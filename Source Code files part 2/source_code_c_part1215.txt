
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // + ! 
100,   // + " 
100,   // + # 
100,   // + $ 
100,   // + % 
100,   // + & 
100,   // + ' 
100,   // + ( 
100,   // + ) 
100,   // + * 
100,   // + + 
100,   // + , 
100,   // + - 
100,   // + . 
100,   // + / 
100,   // + 0 
100,   // + 1 
78,   // + 2 
100,   // + 3 
100,   // + 4 
100,   // + 5 
64,   // + 6 
100,   // + 7 
100,   // + 8 
100,   // + 9 
100,   // + : 
100,   // + ; 
100,   // + < 
100,   // + = 
100,   // + > 
100,   // + ? 
100,   // + @ 
100,   // + A 
100,   // + B 
100,   // + C 
100,   // + D 
100,   // + E 
100,   // + F 
100,   // + G 
100,   // + H 
100,   // + I 
100,   // + J 
100,   // + K 
100,   // + L 
100,   // + M 
100,   // + N 
100,   // + O 
100,   // + P 
100,   // + Q 
100,   // + R 
100,   // + S 
100,   // + T 
100,   // + U 
100,   // + V 
100,   // + W 
100,   // + X 
100,   // + Y 
100,   // + Z 
100,   // + [ 
100,   // + \ 
100,   // + ] 
100,   // + ^ 
100,   // + _ 
100,   // + ` 
100,   // + a 
100,   // + b 
100,   // + c 
100,   // + d 
100,   // + e 
100,   // + f 
100,   // + g 
100,   // + h 
100,   // + i 
100,   // + j 
100,   // + k 
100,   // + l 
100,   // + m 
100,   // + n 
100,   // + o 
100,   // + p 
100,   // + q 
100,   // + r 
100,   // + s 
100,   // + t 
100,   // + u 
100,   // + v 
100,   // + w 
100,   // + x 
100,   // + y 
100,   // + z 
100,   // + { 
100,   // + | 
100,   // + } 
100,   // + ~ 
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
10, 
100,   // , ! 
10,   // , " 
100,   // , # 
100,   // , $ 
100,   // , % 
100,   // , & 
37,   // , ' 
100,   // , ( 
100,   // , ) 
100,   // , * 
100,   // , + 
100,   // , , 
100,   // , - 
100,   // , . 
100,   // , / 
2,   // , 0 
11,   // , 1 
7,   // , 2 
10,   // , 3 
9,   // , 4 
6,   // , 5 
100,   // , 6 
36,   // , 7 
65,   // , 8 
60,   // , 9 
100,   // , : 
100,   // , ; 
100,   // , < 
100,   // , = 
100,   // , > 
100,   // , ? 
100,   // , @ 
100,   // , A 
100,   // , B 
100,   // , C 
100,   // , D 
100,   // , E 
100,   // , F 
100,   // , G 
100,   // , H 
100,   // , I 
100,   // , J 
100,   // , K 
100,   // , L 
100,   // , M 
100,   // , N 
100,   // , O 
100,   // , P 
100,   // , Q 
100,   // , R 
100,   // , S 
100,   // , T 
100,   // , U 
100,   // , V 
100,   // , W 
100,   // , X 
100,   // , Y 
100,   // , Z 
100,   // , [ 
100,   // , \ 
100,   // , ] 
100,   // , ^ 
100,   // , _ 
100,   // , ` 
100,   // , a 
100,   // , b 
100,   // , c 
100,   // , d 
100,   // , e 
100,   // , f 
100,   // , g 
100,   // , h 
100,   // , i 
100,   // , j 
100,   // , k 
100,   // , l 
100,   // , m 
100,   // , n 
100,   // , o 
100,   // , p 
100,   // , q 
100,   // , r 
100,   // , s 
100,   // , t 
100,   // , u 
100,   // , v 
100,   // , w 
100,   // , x 
100,   // , y 
100,   // , z 
100,   // , { 
100,   // , | 
100,   // , } 
100,   // , ~ 
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
9, 
100,   // - ! 
100,   // - " 
100,   // - # 
100,   // - $ 
100,   // - % 
100,   // - & 
100,   // - ' 
100,   // - ( 
100,   // - ) 
100,   // - * 
100,   // - + 
100,   // - , 
8,   // - - 
100,   // - . 
100,   // - / 
2,   // - 0 
1,   // - 1 
4,   // - 2 
2,   // - 3 
4,   // - 4 
2,   // - 5 
1,   // - 6 
1,   // - 7 
2,   // - 8 
2,   // - 9 
100,   // - : 
100,   // - ; 
100,   // - < 
100,   // - = 
100,   // - > 
100,   // - ? 
100,   // - @ 
51,   // - A 
33,   // - B 
54,   // - C 
49,   // - D 
57,   // - E 
22,   // - F 
62,   // - G 
42,   // - H 
85,   // - I 
23,   // - J 
100,   // - K 
58,   // - L 
57,   // - M 
44,   // - N 
67,   // - O 
57,   // - P 
100,   // - Q 
39,   // - R 
47,   // - S 
66,   // - T 
77,   // - U 
58,   // - V 
71,   // - W 
100,   // - X 
73,   // - Y 
100,   // - Z 
100,   // - [ 
100,   // - \ 
100,   // - ] 
100,   // - ^ 
100,   // - _ 
50,   // - ` 
49,   // - a 
30,   // - b 
39,   // - c 
28,   // - d 
18,   // - e 
24,   // - f 
50,   // - g 
25,   // - h 
32,   // - i 
10,   // - j 
32,   // - k 
36,   // - l 
21,   // - m 
57,   // - n 
38,   // - o 
17,   // - p 
53,   // - q 
30,   // - r 
27,   // - s 
30,   // - t 
60,   // - u 
75,   // - v 
15,   // - w 
100,   // - x 
26,   // - y 
100,   // - z 
100,   // - { 
100,   // - | 
100,   // - } 
100,   // - ~ 
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
28, 
100,   // . ! 
10,   // . " 
100,   // . # 
100,   // . $ 
100,   // . % 
100,   // . & 
38,   // . ' 
100,   // . ( 
33,   // . ) 
100,   // . * 
100,   // . + 
37,   // . , 
100,   // . - 
27,   // . . 
100,   // . / 
93,   // . 0 
89,   // . 1 
76,   // . 2 
46,   // . 3 
61,   // . 4 
46,   // . 5 
46,   // . 6 
50,   // . 7 
53,   // . 8 
74,   // . 9 
100,   // . : 
33,   // . ; 
100,   // . < 
100,   // . = 
100,   // . > 
100,   // . ? 
100,   // . @ 
48,   // . A 
100,   // . B 
61,   // . C 
10,   // . D 
100,   // . E 
58,   // . F 
25,   // . G 
5,   // . H 
100,   // . I 
100,   // . J 
5,   // . K 
100,   // . L 
42,   // . M 
100,   // . N 
25,   // . O 
19,   // . P 
100,   // . Q 
50,   // . R 
4,   // . S 
25,   // . T 
5,   // . U 
100,   // . V 
95,   // . W 
100,   // . X 
100,   // . Y 
100,   // . Z 
100,   // . [ 
100,   // . \ 
100,   // . ] 
100,   // . ^ 
100,   // . _ 
100,   // . ` 
100,   // . a 
9,   // . b 
2,   // . c 
100,   // . d 
15,   // . e 
100,   // . f 
0,   // . g 
100,   // . h 
100,   // . i 
0,   // . j 
100,   // . k 
100,   // . l 
3,   // . m 
0,   // . n 
23,   // . o 
100,   // . p 
100,   // . q 
100,   // . r 
100,   // . s 
100,   // . t 
100,   // . u 
16,   // . v 
100,   // . w 
100,   // . x 
100,   // . y 
100,   // . z 
100,   // . { 
100,   // . | 
100,   // . } 
100,   // . ~ 
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // / ! 
100,   // / " 
100,   // / # 
100,   // / $ 
100,   // / % 
100,   // / & 
100,   // / ' 
100,   // / ( 
100,   // / ) 
100,   // / * 
100,   // / + 
100,   // / , 
100,   // / - 
100,   // / . 
100,   // / / 
100,   // / 0 
43,   // / 1 
17,   // / 2 
40,   // / 3 
16,   // / 4 
33,   // / 5 
100,   // / 6 
15,   // / 7 
63,   // / 8 
5,   // / 9 
100,   // / : 
100,   // / ; 
100,   // / < 
100,   // / = 
100,   // / > 
100,   // / ? 
100,   // / @ 
97,   // / A 
100,   // / B 
89,   // / C 
87,   // / D 
88,   // / E 
70,   // / F 
100,   // / G 
100,   // / H 
100,   // / I 
100,   // / J 
100,   // / K 
64,   // / L 
100,   // / M 
83,   // / N 
74,   // / O 
82,   // / P 
100,   // / Q 
48,   // / R 
48,   // / S 
100,   // / T 
100,   // / U 
100,   // / V 
87,   // / W 
100,   // / X 
81,   // / Y 
100,   // / Z 
100,   // / [ 
100,   // / \ 
100,   // / ] 
100,   // / ^ 
100,   // / _ 
100,   // / ` 
97,   // / a 
88,   // / b 
100,   // / c 
81,   // / d 
100,   // / e 
91,   // / f 
82,   // / g 
93,   // / h 
100,   // / i 
100,   // / j 
100,   // / k 
100,   // / l 
100,   // / m 
100,   // / n 
85,   // / o 
91,   // / p 
100,   // / q 
100,   // / r 
82,   // / s 
99,   // / t 
100,   // / u 
100,   // / v 
64,   // / w 
100,   // / x 
98,   // / y 
100,   // / z 
100,   // / { 
100,   // / | 
100,   // / } 
100,   // / ~ 
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
11, 
100,   // 0 ! 
100,   // 0 " 
100,   // 0 # 
100,   // 0 $ 
50,   // 0 % 
100,   // 0 & 
41,   // 0 ' 
100,   // 0 ( 
6,   // 0 ) 
100,   // 0 * 
100,   // 0 + 
6,   // 0 , 
8,   // 0 - 
55,   // 0 . 
25,   // 0 / 
3,   // 0 0 
7,   // 0 1 
1,   // 0 2 
1,   // 0 3 
2,   // 0 4 
13,   // 0 5 
6,   // 0 6 
16,   // 0 7 
7,   // 0 8 
7,   // 0 9 
72,   // 0 : 
80,   // 0 ; 
100,   // 0 < 
100,   // 0 = 
100,   // 0 > 
7,   // 0 ? 
100,   // 0 @ 
100,   // 0 A 
100,   // 0 B 
100,   // 0 C 
100,   // 0 D 
100,   // 0 E 
100,   // 0 F 
100,   // 0 G 
100,   // 0 H 
100,   // 0 I 
100,   // 0 J 
100,   // 0 K 
100,   // 0 L 
100,   // 0 M 
100,   // 0 N 
100,   // 0 O 
100,   // 0 P 
100,   // 0 Q 
100,   // 0 R 
100,   // 0 S 
100,   // 0 T 
100,   // 0 U 
100,   // 0 V 
100,   // 0 W 
100,   // 0 X 
100,   // 0 Y 
100,   // 0 Z 
100,   // 0 [ 
100,   // 0 \ 
100,   // 0 ] 
100,   // 0 ^ 
100,   // 0 _ 
100,   // 0 ` 
100,   // 0 a 
100,   // 0 b 
100,   // 0 c 
100,   // 0 d 
100,   // 0 e 
68,   // 0 f 
100,   // 0 g 
100,   // 0 h 
100,   // 0 i 
100,   // 0 j 
100,   // 0 k 
100,   // 0 l 
86,   // 0 m 
82,   // 0 n 
100,   // 0 o 
100,   // 0 p 
100,   // 0 q 
100,   // 0 r 
73,   // 0 s 
11,   // 0 t 
100,   // 0 u 
100,   // 0 v 
0,   // 0 w 
100,   // 0 x 
100,   // 0 y 
100,   // 0 z 
100,   // 0 { 
100,   // 0 | 
100,   // 0 } 
100,   // 0 ~ 
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
12, 
100,   // 1 ! 
100,   // 1 " 
100,   // 1 # 
100,   // 1 $ 
100,   // 1 % 
100,   // 1 & 
100,   // 1 ' 
100,   // 1 ( 
23,   // 1 ) 
92,   // 1 * 
100,   // 1 + 
28,   // 1 , 
2,   // 1 - 
39,   // 1 . 
37,   // 1 / 
7,   // 1 0 
12,   // 1 1 
7,   // 1 2 
5,   // 1 3 
13,   // 1 4 
7,   // 1 5 
5,   // 1 6 
9,   // 1 7 
2,   // 1 8 
2,   // 1 9 
100,   // 1 : 
100,   // 1 ; 
100,   // 1 < 
100,   // 1 = 
100,   // 1 > 
100,   // 1 ? 
100,   // 1 @ 
100,   // 1 A 
100,   // 1 B 
40,   // 1 C 
100,   // 1 D 
100,   // 1 E 
100,   // 1 F 
100,   // 1 G 
100,   // 1 H 
100,   // 1 I 
100,   // 1 J 
100,   // 1 K 
100,   // 1 L 
100,   // 1 M 
100,   // 1 N 
100,   // 1 O 
100,   // 1 P 
100,   // 1 Q 
100,   // 1 R 
100,   // 1 S 
100,   // 1 T 
100,   // 1 U 
100,   // 1 V 
100,   // 1 W 
100,   // 1 X 
100,   // 1 Y 
100,   // 1 Z 
100,   // 1 [ 
100,   // 1 \ 
100,   // 1 ] 
100,   // 1 ^ 
100,   // 1 _ 
100,   // 1 ` 
100,   // 1 a 
100,   // 1 b 
100,   // 1 c 
100,   // 1 d 
100,   // 1 e 
100,   // 1 f 
100,   // 1 g 
100,   // 1 h 
100,   // 1 i 
100,   // 1 j 
100,   // 1 k 
100,   // 1 l 
100,   // 1 m 
100,   // 1 n 
100,   // 1 o 
100,   // 1 p 
100,   // 1 q 
100,   // 1 r 
10,   // 1 s 
38,   // 1 t 
100,   // 1 u 
100,   // 1 v 
100,   // 1 w 
100,   // 1 x 
100,   // 1 y 
100,   // 1 z 
100,   // 1 { 
100,   // 1 | 
100,   // 1 } 
100,   // 1 ~ 
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
15, 
100,   // 2 ! 
100,   // 2 " 
100,   // 2 # 
100,   // 2 $ 
33,   // 2 % 
100,   // 2 & 
58,   // 2 ' 
100,   // 2 ( 
0,   // 2 ) 
100,   // 2 * 
56,   // 2 + 
12,   // 2 , 
3,   // 2 - 
37,   // 2 . 
12,   // 2 / 
2,   // 2 0 
5,   // 2 1 
20,   // 2 2 
4,   // 2 3 
6,   // 2 4 
8,   // 2 5 
4,   // 2 6 
7,   // 2 7 
6,   // 2 8 
6,   // 2 9 
29,   // 2 : 
31,   // 2 ; 
100,   // 2 < 
100,   // 2 = 
100,   // 2 > 
100,   // 2 ? 
0,   // 2 @ 
100,   // 2 A 
100,   // 2 B 
100,   // 2 C 
100,   // 2 D 
100,   // 2 E 
100,   // 2 F 
100,   // 2 G 
100,   // 2 H 
100,   // 2 I 
100,   // 2 J 
100,   // 2 K 
100,   // 2 L 
100,   // 2 M 
100,   // 2 N 
100,   // 2 O 
100,   // 2 P 
100,   // 2 Q 
100,   // 2 R 
100,   // 2 S 
100,   // 2 T 
100,   // 2 U 
100,   // 2 V 
100,   // 2 W 
100,   // 2 X 
100,   // 2 Y 
100,   // 2 Z 
100,   // 2 [ 
100,   // 2 \ 
73,   // 2 ] 
100,   // 2 ^ 
100,   // 2 _ 
100,   // 2 ` 
100,   // 2 a 
100,   // 2 b 
100,   // 2 c 
100,   // 2 d 
100,   // 2 e 
100,   // 2 f 
100,   // 2 g 
100,   // 2 h 
100,   // 2 i 
100,   // 2 j 
100,   // 2 k 
100,   // 2 l 
100,   // 2 m 
8,   // 2 n 
100,   // 2 o 
100,   // 2 p 
100,   // 2 q 
100,   // 2 r 
50,   // 2 s 
22,   // 2 t 
100,   // 2 u 
100,   // 2 v 
100,   // 2 w 
100,   // 2 x 
100,   // 2 y 
100,   // 2 z 
100,   // 2 { 
100,   // 2 | 
100,   // 2 } 
100,   // 2 ~ 
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
6, 
100,   // 3 ! 
100,   // 3 " 
100,   // 3 # 
100,   // 3 $ 
35,   // 3 % 
100,   // 3 & 
100,   // 3 ' 
100,   // 3 ( 
10,   // 3 ) 
81,   // 3 * 
100,   // 3 + 
11,   // 3 , 
1,   // 3 - 
32,   // 3 . 
46,   // 3 / 
1,   // 3 0 
4,   // 3 1 
3,   // 3 2 
6,   // 3 3 
4,   // 3 4 
9,   // 3 5 
1,   // 3 6 
2,   // 3 7 
6,   // 3 8 
4,   // 3 9 
38,   // 3 : 
100,   // 3 ; 
100,   // 3 < 
100,   // 3 = 
100,   // 3 > 
100,   // 3 ? 
100,   // 3 @ 
100,   // 3 A 
100,   // 3 B 
100,   // 3 C 
100,   // 3 D 
100,   // 3 E 
100,   // 3 F 
100,   // 3 G 
100,   // 3 H 
100,   // 3 I 
100,   // 3 J 
100,   // 3 K 
100,   // 3 L 
72,   // 3 M 
100,   // 3 N 
100,   // 3 O 
100,   // 3 P 
100,   // 3 Q 
100,   // 3 R 
100,   // 3 S 
100,   // 3 T 
100,   // 3 U 
100,   // 3 V 
100,   // 3 W 
100,   // 3 X 
100,   // 3 Y 
100,   // 3 Z 
100,   // 3 [ 
100,   // 3 \ 
81,   // 3 ] 
100,   // 3 ^ 
100,   // 3 _ 
100,   // 3 ` 
100,   // 3 a 
100,   // 3 b 
100,   // 3 c 
0,   // 3 d 
100,   // 3 e 
100,   // 3 f 
100,   // 3 g 
100,   // 3 h 
100,   // 3 i 
100,   // 3 j 
100,   // 3 k 
100,   // 3 l 
100,   // 3 m 
100,   // 3 n 
100,   // 3 o 
100,   // 3 p 
100,   // 3 q 
2,   // 3 r 
100,   // 3 s 
1,   // 3 t 
100,   // 3 u 
100,   // 3 v 
100,   // 3 w 
100,   // 3 x 
100,   // 3 y 
100,   // 3 z 
100,   // 3 { 
100,   // 3 | 
100,   // 3 } 
100,   // 3 ~ 
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
18, 
100,   // 4 ! 
100,   // 4 " 
100,   // 4 # 
100,   // 4 $ 
58,   // 4 % 
100,   // 4 & 
95,   // 4 ' 
100,   // 4 ( 
1,   // 4 ) 
100,   // 4 * 
100,   // 4 + 
17,   // 4 , 
2,   // 4 - 
45,   // 4 . 
66,   // 4 / 
2,   // 4 0 
13,   // 4 1 
12,   // 4 2 
8,   // 4 3 
25,   // 4 4 
7,   // 4 5 
3,   // 4 6 
10,   // 4 7 
8,   // 4 8 
14,   // 4 9 
5,   // 4 : 
55,   // 4 ; 
100,   // 4 < 
100,   // 4 = 
100,   // 4 > 
100,   // 4 ? 
100,   // 4 @ 
100,   // 4 A 
100,   // 4 B 
100,   // 4 C 
100,   // 4 D 
100,   // 4 E 
100,   // 4 F 
100,   // 4 G 
100,   // 4 H 
100,   // 4 I 
100,   // 4 J 
100,   // 4 K 
100,   // 4 L 
100,   // 4 M 
100,   // 4 N 
100,   // 4 O 
100,   // 4 P 
100,   // 4 Q 
100,   // 4 R 
100,   // 4 S 
100,   // 4 T 
100,   // 4 U 
100,   // 4 V 
100,   // 4 W 
100,   // 4 X 
100,   // 4 Y 
100,   // 4 Z 
100,   // 4 [ 
100,   // 4 \ 
100,   // 4 ] 
100,   // 4 ^ 
100,   // 4 _ 
100,   // 4 ` 
100,   // 4 a 
100,   // 4 b 
100,   // 4 c 
100,   // 4 d 
100,   // 4 e 
100,   // 4 f 
100,   // 4 g 
100,   // 4 h 
100,   // 4 i 
100,   // 4 j 
100,   // 4 k 
100,   // 4 l 
100,   // 4 m 
100,   // 4 n 
100,   // 4 o 
100,   // 4 p 
100,   // 4 q 
100,   // 4 r 
100,   // 4 s 
5,   // 4 t 
100,   // 4 u 
100,   // 4 v 
100,   // 4 w 
100,   // 4 x 
100,   // 4 y 
100,   // 4 z 
100,   // 4 { 
100,   // 4 | 
100,   // 4 } 
100,   // 4 ~ 
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
7, 
2,   // 5 ! 
100,   // 5 " 
100,   // 5 # 
100,   // 5 $ 
56,   // 5 % 
100,   // 5 & 
100,   // 5 ' 
100,   // 5 ( 
8,   // 5 ) 
100,   // 5 * 
100,   // 5 + 
18,   // 5 , 
5,   // 5 - 
52,   // 5 . 
14,   // 5 / 
6,   // 5 0 
12,   // 5 1 
6,   // 5 2 
10,   // 5 3 
11,   // 5 4 
10,   // 5 5 
8,   // 5 6 
7,   // 5 7 
6,   // 5 8 
12,   // 5 9 
100,   // 5 : 
66,   // 5 ; 
16,   // 5 < 
100,   // 5 = 
95,   // 5 > 
100,   // 5 ? 
100,   // 5 @ 
100,   // 5 A 
100,   // 5 B 
100,   // 5 C 
100,   // 5 D 
100,   // 5 E 
100,   // 5 F 
100,   // 5 G 
100,   // 5 H 
100,   // 5 I 
100,   // 5 J 
100,   // 5 K 
100,   // 5 L 
100,   // 5 M 
100,   // 5 N 
100,   // 5 O 
100,   // 5 P 
100,   // 5 Q 
100,   // 5 R 
100,   // 5 S 
100,   // 5 T 
100,   // 5 U 
100,   // 5 V 
100,   // 5 W 
100,   // 5 X 
100,   // 5 Y 
100,   // 5 Z 
100,   // 5 [ 
100,   // 5 \ 
100,   // 5 ] 
100,   // 5 ^ 
100,   // 5 _ 
100,   // 5 ` 
100,   // 5 a 
100,   // 5 b 
100,   // 5 c 
100,   // 5 d 
100,   // 5 e 
100,   // 5 f 
100,   // 5 g 
100,   // 5 h 
100,   // 5 i 
100,   // 5 j 
100,   // 5 k 
100,   // 5 l 
100,   // 5 m 
100,   // 5 n 
100,   // 5 o 
21,   // 5 p 
100,   // 5 q 
100,   // 5 r 
100,   // 5 s 
3,   // 5 t 
100,   // 5 u 
100,   // 5 v 
100,   // 5 w 
100,   // 5 x 
100,   // 5 y 
100,   // 5 z 
100,   // 5 { 
100,   // 5 | 
100,   // 5 } 
100,   // 5 ~ 
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
4, 
100,   // 6 ! 
100,   // 6 " 
100,   // 6 # 
100,   // 6 $ 
23,   // 6 % 
100,   // 6 & 
22,   // 6 ' 
100,   // 6 ( 
14,   // 6 ) 
20,   // 6 * 
100,   // 6 + 
11,   // 6 , 
1,   // 6 - 
36,   // 6 . 
21,   // 6 / 
4,   // 6 0 
4,   // 6 1 
3,   // 6 2 
1,   // 6 3 
4,   // 6 4 
3,   // 6 5 
2,   // 6 6 
6,   // 6 7 
4,   // 6 8 
9,   // 6 9 
17,   // 6 : 
37,   // 6 ; 
100,   // 6 < 
100,   // 6 = 
100,   // 6 > 
100,   // 6 ? 
100,   // 6 @ 
100,   // 6 A 
100,   // 6 B 
100,   // 6 C 
100,   // 6 D 
100,   // 6 E 
100,   // 6 F 
100,   // 6 G 
100,   // 6 H 
100,   // 6 I 
100,   // 6 J 
100,   // 6 K 
100,   // 6 L 
100,   // 6 M 
100,   // 6 N 
100,   // 6 O 
100,   // 6 P 
100,   // 6 Q 
100,   // 6 R 
100,   // 6 S 
100,   // 6 T 
100,   // 6 U 
100,   // 6 V 
100,   // 6 W 
100,   // 6 X 
100,   // 6 Y 
100,   // 6 Z 
100,   // 6 [ 
100,   // 6 \ 
40,   // 6 ] 
100,   // 6 ^ 
100,   // 6 _ 
100,   // 6 ` 
100,   // 6 a 
100,   // 6 b 
100,   // 6 c 
100,   // 6 d 
100,   // 6 e 
100,   // 6 f 
100,   // 6 g 
100,   // 6 h 
100,   // 6 i 
100,   // 6 j 
100,   // 6 k 
100,   // 6 l 
100,   // 6 m 
100,   // 6 n 
100,   // 6 o 
100,   // 6 p 
100,   // 6 q 
100,   // 6 r 
100,   // 6 s 
4,   // 6 t 
100,   // 6 u 
100,   // 6 v 
100,   // 6 w 
100,   // 6 x 
100,   // 6 y 
100,   // 6 z 
100,   // 6 { 
100,   // 6 | 
100,   // 6 } 
100,   // 6 ~ 
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
8, 
100,   // 7 ! 
100,   // 7 " 
100,   // 7 # 
100,   // 7 $ 
43,   // 7 % 
100,   // 7 & 
77,   // 7 ' 
100,   // 7 ( 
30,   // 7 ) 
100,   // 7 * 
58,   // 7 + 
32,   // 7 , 
1,   // 7 - 
36,   // 7 . 
35,   // 7 / 
4,   // 7 0 
8,   // 7 1 
5,   // 7 2 
5,   // 7 3 
6,   // 7 4 
6,   // 7 5 
3,   // 7 6 
5,   // 7 7 
4,   // 7 8 
9,   // 7 9 
6,   // 7 : 
52,   // 7 ; 
60,   // 7 < 
61,   // 7 = 
72,   // 7 > 
100,   // 7 ? 
100,   // 7 @ 
100,   // 7 A 
100,   // 7 B 
100,   // 7 C 
100,   // 7 D 
100,   // 7 E 
100,   // 7 F 
100,   // 7 G 
100,   // 7 H 
100,   // 7 I 
100,   // 7 J 
100,   // 7 K 
100,   // 7 L 
100,   // 7 M 
100,   // 7 N 
100,   // 7 O 
100,   // 7 P 
100,   // 7 Q 
100,   // 7 R 
100,   // 7 S 
100,   // 7 T 
100,   // 7 U 
100,   // 7 V 
100,   // 7 W 
100,   // 7 X 
100,   // 7 Y 
100,   // 7 Z 
100,   // 7 [ 
100,   // 7 \ 
100,   // 7 ] 
100,   // 7 ^ 
100,   // 7 _ 
100,   // 7 ` 
100,   // 7 a 
100,   // 7 b 
100,   // 7 c 
100,   // 7 d 
100,   // 7 e 
100,   // 7 f 
100,   // 7 g 
100,   // 7 h 
100,   // 7 i 
100,   // 7 j 
19,   // 7 k 
100,   // 7 l 
100,   // 7 m 
100,   // 7 n 
100,   // 7 o 
100,   // 7 p 
100,   // 7 q 
100,   // 7 r 
52,   // 7 s 
3,   // 7 t 
100,   // 7 u 
100,   // 7 v 
100,   // 7 w 
100,   // 7 x 
100,   // 7 y 
100,   // 7 z 
100,   // 7 { 
100,   // 7 | 
100,   // 7 } 
100,   // 7 ~ 
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
5, 
100,   // 8 ! 
100,   // 8 " 
100,   // 8 # 
100,   // 8 $ 
33,   // 8 % 
100,   // 8 & 
100,   // 8 ' 
100,   // 8 ( 
11,   // 8 ) 
100,   // 8 * 
100,   // 8 + 
18,   // 8 , 
1,   // 8 - 
43,   // 8 . 
55,   // 8 / 
7,   // 8 0 
2,   // 8 1 
7,   // 8 2 
4,   // 8 3 
4,   // 8 4 
4,   // 8 5 
2,   // 8 6 
2,   // 8 7 
3,   // 8 8 
6,   // 8 9 
9,   // 8 : 
8,   // 8 ; 
100,   // 8 < 
66,   // 8 = 
100,   // 8 > 
100,   // 8 ? 
0,   // 8 @ 
100,   // 8 A 
100,   // 8 B 
100,   // 8 C 
100,   // 8 D 
100,   // 8 E 
100,   // 8 F 
100,   // 8 G 
100,   // 8 H 
100,   // 8 I 
100,   // 8 J 
100,   // 8 K 
100,   // 8 L 
100,   // 8 M 
100,   // 8 N 
100,   // 8 O 
100,   // 8 P 
100,   // 8 Q 
100,   // 8 R 
100,   // 8 S 
100,   // 8 T 
100,   // 8 U 
100,   // 8 V 
100,   // 8 W 
100,   // 8 X 
100,   // 8 Y 
100,   // 8 Z 
100,   // 8 [ 
100,   // 8 \ 
100,   // 8 ] 
100,   // 8 ^ 
100,   // 8 _ 
100,   // 8 ` 
100,   // 8 a 
100,   // 8 b 
100,   // 8 c 
100,   // 8 d 
100,   // 8 e 
100,   // 8 f 
100,   // 8 g 
100,   // 8 h 
100,   // 8 i 
100,   // 8 j 
31,   // 8 k 
100,   // 8 l 
100,   // 8 m 
100,   // 8 n 
100,   // 8 o 
100,   // 8 p 
100,   // 8 q 
100,   // 8 r 
100,   // 8 s 
5,   // 8 t 
100,   // 8 u 
100,   // 8 v 
100,   // 8 w 
100,   // 8 x 
100,   // 8 y 
100,   // 8 z 
100,   // 8 { 
100,   // 8 | 
45,   // 8 } 
100,   // 8 ~ 
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
12, 
100,   // 9 ! 
100,   // 9 " 
100,   // 9 # 
100,   // 9 $ 
100,   // 9 % 
100,   // 9 & 
100,   // 9 ' 
100,   // 9 ( 
23,   // 9 ) 
100,   // 9 * 
100,   // 9 + 
39,   // 9 , 
2,   // 9 - 
29,   // 9 . 
71,   // 9 / 
7,   // 9 0 
8,   // 9 1 
7,   // 9 2 
3,   // 9 3 
7,   // 9 4 
8,   // 9 5 
3,   // 9 6 
6,   // 9 7 
4,   // 9 8 
10,   // 9 9 
100,   // 9 : 
42,   // 9 ; 
100,   // 9 < 
100,   // 9 = 
100,   // 9 > 
100,   // 9 ? 
100,   // 9 @ 
100,   // 9 A 
100,   // 9 B 
100,   // 9 C 
100,   // 9 D 
100,   // 9 E 
100,   // 9 F 
100,   // 9 G 
100,   // 9 H 
100,   // 9 I 
100,   // 9 J 
100,   // 9 K 
100,   // 9 L 
100,   // 9 M 
100,   // 9 N 
100,   // 9 O 
100,   // 9 P 
100,   // 9 Q 
100,   // 9 R 
100,   // 9 S 
100,   // 9 T 
100,   // 9 U 
100,   // 9 V 
100,   // 9 W 
100,   // 9 X 
100,   // 9 Y 
100,   // 9 Z 
100,   // 9 [ 
100,   // 9 \ 
100,   // 9 ] 
100,   // 9 ^ 
100,   // 9 _ 
100,   // 9 ` 
100,   // 9 a 
100,   // 9 b 
100,   // 9 c 
100,   // 9 d 
85,   // 9 e 
100,   // 9 f 
100,   // 9 g 
100,   // 9 h 
100,   // 9 i 
100,   // 9 j 
100,   // 9 k 
100,   // 9 l 
100,   // 9 m 
100,   // 9 n 
100,   // 9 o 
100,   // 9 p 
100,   // 9 q 
100,   // 9 r 
73,   // 9 s 
3,   // 9 t 
100,   // 9 u 
100,   // 9 v 
100,   // 9 w 
100,   // 9 x 
100,   // 9 y 
100,   // 9 z 
100,   // 9 { 
100,   // 9 | 
57,   // 9 } 
100,   // 9 ~ 
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
42, 
100,   // : ! 
100,   // : " 
100,   // : # 
100,   // : $ 
100,   // : % 
100,   // : & 
100,   // : ' 
100,   // : ( 
100,   // : ) 
100,   // : * 
100,   // : + 
100,   // : , 
100,   // : - 
100,   // : . 
100,   // : / 
100,   // : 0 
36,   // : 1 
100,   // : 2 
0,   // : 3 
0,   // : 4 
33,   // : 5 
100,   // : 6 
100,   // : 7 
100,   // : 8 
100,   // : 9 
100,   // : : 
100,   // : ; 
100,   // : < 
100,   // : = 
100,   // : > 
100,   // : ? 
100,   // : @ 
100,   // : A 
100,   // : B 
100,   // : C 
100,   // : D 
100,   // : E 
100,   // : F 
100,   // : G 
100,   // : H 
100,   // : I 
100,   // : J 
100,   // : K 
100,   // : L 
100,   // : M 
100,   // : N 
100,   // : O 
100,   // : P 
100,   // : Q 
100,   // : R 
100,   // : S 
100,   // : T 
100,   // : U 
100,   // : V 
100,   // : W 
100,   // : X 
100,   // : Y 
100,   // : Z 
100,   // : [ 
100,   // : \ 
100,   // : ] 
100,   // : ^ 
100,   // : _ 
100,   // : ` 
100,   // : a 
100,   // : b 
100,   // : c 
100,   // : d 
100,   // : e 
100,   // : f 
100,   // : g 
100,   // : h 
100,   // : i 
100,   // : j 
100,   // : k 
100,   // : l 
100,   // : m 
100,   // : n 
100,   // : o 
100,   // : p 
100,   // : q 
100,   // : r 
100,   // : s 
100,   // : t 
100,   // : u 
100,   // : v 
100,   // : w 
100,   // : x 
100,   // : y 
100,   // : z 
100,   // : { 
100,   // : | 
100,   // : } 
100,   // : ~ 
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
41, 
100,   // ; ! 
100,   // ; " 
100,   // ; # 
100,   // ; $ 
100,   // ; % 
100,   // ; & 
100,   // ; ' 
100,   // ; ( 
100,   // ; ) 
100,   // ; * 
100,   // ; + 
100,   // ; , 
100,   // ; - 
100,   // ; . 
100,   // ; / 
100,   // ; 0 
100,   // ; 1 
100,   // ; 2 
100,   // ; 3 
100,   // ; 4 
100,   // ; 5 
100,   // ; 6 
100,   // ; 7 
100,   // ; 8 
100,   // ; 9 
100,   // ; : 
100,   // ; ; 
100,   // ; < 
100,   // ; = 
100,   // ; > 
100,   // ; ? 
100,   // ; @ 
100,   // ; A 
100,   // ; B 
100,   // ; C 
100,   // ; D 
100,   // ; E 
100,   // ; F 
100,   // ; G 
100,   // ; H 
100,   // ; I 
100,   // ; J 
100,   // ; K 
100,   // ; L 
100,   // ; M 
100,   // ; N 
100,   // ; O 
100,   // ; P 
100,   // ; Q 
100,   // ; R 
100,   // ; S 
100,   // ; T 
100,   // ; U 
100,   // ; V 
100,   // ; W 
100,   // ; X 
100,   // ; Y 
100,   // ; Z 
100,   // ; [ 
100,   // ; \ 
100,   // ; ] 
100,   // ; ^ 
100,   // ; _ 
100,   // ; ` 
0,   // ; a 
100,   // ; b 
100,   // ; c 
100,   // ; d 
100,   // ; e 
100,   // ; f 
100,   // ; g 
100,   // ; h 
100,   // ; i 
100,   // ; j 
100,   // ; k 
100,   // ; l 
100,   // ; m 
100,   // ; n 
100,   // ; o 
100,   // ; p 
100,   // ; q 
100,   // ; r 
100,   // ; s 
100,   // ; t 
100,   // ; u 
100,   // ; v 
100,   // ; w 
100,   // ; x 
100,   // ; y 
100,   // ; z 
100,   // ; { 
100,   // ; | 
100,   // ; } 
100,   // ; ~ 
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // < ! 
100,   // < " 
100,   // < # 
100,   // < $ 
100,   // < % 
100,   // < & 
100,   // < ' 
100,   // < ( 
100,   // < ) 
100,   // < * 
100,   // < + 
100,   // < , 
100,   // < - 
100,   // < . 
100,   // < / 
100,   // < 0 
100,   // < 1 
100,   // < 2 
100,   // < 3 
100,   // < 4 
100,   // < 5 
16,   // < 6 
100,   // < 7 
75,   // < 8 
100,   // < 9 
100,   // < : 
100,   // < ; 
100,   // < < 
100,   // < = 
100,   // < > 
100,   // < ? 
100,   // < @ 
100,   // < A 
100,   // < B 
100,   // < C 
100,   // < D 
100,   // < E 
100,   // < F 
100,   // < G 
100,   // < H 
100,   // < I 
100,   // < J 
100,   // < K 
100,   // < L 
100,   // < M 
100,   // < N 
100,   // < O 
100,   // < P 
100,   // < Q 
100,   // < R 
100,   // < S 
100,   // < T 
100,   // < U 
100,   // < V 
100,   // < W 
100,   // < X 
100,   // < Y 
100,   // < Z 
100,   // < [ 
100,   // < \ 
100,   // < ] 
100,   // < ^ 
100,   // < _ 
100,   // < ` 
100,   // < a 
100,   // < b 
100,   // < c 
100,   // < d 
100,   // < e 
100,   // < f 
100,   // < g 
100,   // < h 
100,   // < i 
100,   // < j 
100,   // < k 
100,   // < l 
100,   // < m 
100,   // < n 
100,   // < o 
100,   // < p 
100,   // < q 
100,   // < r 
100,   // < s 
100,   // < t 
100,   // < u 
100,   // < v 
100,   // < w 
100,   // < x 
100,   // < y 
100,   // < z 
100,   // < { 
100,   // < | 
100,   // < } 
100,   // < ~ 
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // = ! 
100,   // = " 
100,   // = # 
100,   // = $ 
100,   // = % 
100,   // = & 
100,   // = ' 
100,   // = ( 
100,   // = ) 
100,   // = * 
100,   // = + 
100,   // = , 
100,   // = - 
100,   // = . 
100,   // = / 
100,   // = 0 
69,   // = 1 
100,   // = 2 
100,   // = 3 
100,   // = 4 
100,   // = 5 
100,   // = 6 
58,   // = 7 
100,   // = 8 
100,   // = 9 
100,   // = : 
100,   // = ; 
100,   // = < 
100,   // = = 
100,   // = > 
100,   // = ? 
100,   // = @ 
100,   // = A 
100,   // = B 
100,   // = C 
100,   // = D 
100,   // = E 
100,   // = F 
100,   // = G 
100,   // = H 
100,   // = I 
100,   // = J 
100,   // = K 
100,   // = L 
100,   // = M 
100,   // = N 
100,   // = O 
100,   // = P 
100,   // = Q 
100,   // = R 
100,   // = S 
100,   // = T 
100,   // = U 
100,   // = V 
100,   // = W 
100,   // = X 
100,   // = Y 
100,   // = Z 
100,   // = [ 
100,   // = \ 
100,   // = ] 
100,   // = ^ 
100,   // = _ 
100,   // = ` 
100,   // = a 
100,   // = b 
100,   // = c 
100,   // = d 
100,   // = e 
100,   // = f 
100,   // = g 
100,   // = h 
100,   // = i 
100,   // = j 
100,   // = k 
100,   // = l 
100,   // = m 
100,   // = n 
100,   // = o 
100,   // = p 
100,   // = q 
100,   // = r 
100,   // = s 
100,   // = t 
100,   // = u 
100,   // = v 
100,   // = w 
100,   // = x 
100,   // = y 
100,   // = z 
100,   // = { 
100,   // = | 
100,   // = } 
100,   // = ~ 
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // > ! 
100,   // > " 
100,   // > # 
100,   // > $ 
100,   // > % 
100,   // > & 
100,   // > ' 
100,   // > ( 
100,   // > ) 
100,   // > * 
100,   // > + 
100,   // > , 
100,   // > - 
100,   // > . 
100,   // > / 
100,   // > 0 
100,   // > 1 
100,   // > 2 
100,   // > 3 
91,   // > 4 
100,   // > 5 
68,   // > 6 
100,   // > 7 
100,   // > 8 
100,   // > 9 
100,   // > : 
100,   // > ; 
100,   // > < 
100,   // > = 
100,   // > > 
100,   // > ? 
100,   // > @ 
100,   // > A 
100,   // > B 
100,   // > C 
100,   // > D 
100,   // > E 
100,   // > F 
100,   // > G 
100,   // > H 
100,   // > I 
100,   // > J 
100,   // > K 
100,   // > L 
100,   // > M 
100,   // > N 
100,   // > O 
100,   // > P 
100,   // > Q 
100,   // > R 
100,   // > S 
100,   // > T 
100,   // > U 
100,   // > V 
100,   // > W 
100,   // > X 
100,   // > Y 
100,   // > Z 
100,   // > [ 
100,   // > \ 
100,   // > ] 
100,   // > ^ 
100,   // > _ 
100,   // > ` 
100,   // > a 
100,   // > b 
100,   // > c 
100,   // > d 
100,   // > e 
100,   // > f 
100,   // > g 
100,   // > h 
100,   // > i 
100,   // > j 
100,   // > k 
100,   // > l 
100,   // > m 
100,   // > n 
100,   // > o 
100,   // > p 
100,   // > q 
100,   // > r 
100,   // > s 
100,   // > t 
100,   // > u 
100,   // > v 
100,   // > w 
100,   // > x 
100,   // > y 
100,   // > z 
100,   // > { 
100,   // > | 
100,   // > } 
100,   // > ~ 
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
25, 
100,   // ? ! 
16,   // ? " 
100,   // ? # 
100,   // ? $ 
100,   // ? % 
100,   // ? & 
100,   // ? ' 
100,   // ? ( 
100,   // ? ) 
100,   // ? * 
100,   // ? + 
100,   // ? , 
100,   // ? - 
100,   // ? . 
100,   // ? / 
100,   // ? 0 
100,   // ? 1 
100,   // ? 2 
100,   // ? 3 
100,   // ? 4 
100,   // ? 5 
100,   // ? 6 
100,   // ? 7 
100,   // ? 8 
100,   // ? 9 
100,   // ? : 
100,   // ? ; 
100,   // ? < 
100,   // ? = 
100,   // ? > 
22,   // ? ? 
100,   // ? @ 
100,   // ? A 
100,   // ? B 
100,   // ? C 
100,   // ? D 
100,   // ? E 
100,   // ? F 
100,   // ? G 
100,   // ? H 
100,   // ? I 
100,   // ? J 
100,   // ? K 
100,   // ? L 
100,   // ? M 
100,   // ? N 
100,   // ? O 
100,   // ? P 
100,   // ? Q 
100,   // ? R 
100,   // ? S 
100,   // ? T 
100,   // ? U 
100,   // ? V 
100,   // ? W 
100,   // ? X 
100,   // ? Y 
100,   // ? Z 
100,   // ? [ 
100,   // ? \ 
100,   // ? ] 
100,   // ? ^ 
100,   // ? _ 
100,   // ? ` 
100,   // ? a 
100,   // ? b 
100,   // ? c 
100,   // ? d 
100,   // ? e 
100,   // ? f 
100,   // ? g 
100,   // ? h 
100,   // ? i 
100,   // ? j 
100,   // ? k 
100,   // ? l 
100,   // ? m 
100,   // ? n 
100,   // ? o 
100,   // ? p 
100,   // ? q 
100,   // ? r 
100,   // ? s 
100,   // ? t 
100,   // ? u 
100,   // ? v 
100,   // ? w 
100,   // ? x 
100,   // ? y 
100,   // ? z 
100,   // ? { 
100,   // ? | 
100,   // ? } 
100,   // ? ~ 
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
83, 
100,   // @ ! 
100,   // @ " 
100,   // @ # 
100,   // @ $ 
100,   // @ % 
100,   // @ & 
100,   // @ ' 
0,   // @ ( 
100,   // @ ) 
100,   // @ * 
100,   // @ + 
100,   // @ , 
100,   // @ - 
100,   // @ . 
100,   // @ / 
100,   // @ 0 
100,   // @ 1 
100,   // @ 2 
100,   // @ 3 
100,   // @ 4 
100,   // @ 5 
100,   // @ 6 
100,   // @ 7 
100,   // @ 8 
100,   // @ 9 
100,   // @ : 
100,   // @ ; 
100,   // @ < 
100,   // @ = 
100,   // @ > 
100,   // @ ? 
100,   // @ @ 
100,   // @ A 
100,   // @ B 
100,   // @ C 
100,   // @ D 
100,   // @ E 
100,   // @ F 
100,   // @ G 
100,   // @ H 
100,   // @ I 
100,   // @ J 
100,   // @ K 
100,   // @ L 
100,   // @ M 
100,   // @ N 
100,   // @ O 
100,   // @ P 
100,   // @ Q 
100,   // @ R 
100,   // @ S 
100,   // @ T 
100,   // @ U 
100,   // @ V 
100,   // @ W 
100,   // @ X 
100,   // @ Y 
100,   // @ Z 
100,   // @ [ 
100,   // @ \ 
100,   // @ ] 
100,   // @ ^ 
100,   // @ _ 
100,   // @ ` 
100,   // @ a 
100,   // @ b 
100,   // @ c 
100,   // @ d 
100,   // @ e 
100,   // @ f 
100,   // @ g 
100,   // @ h 
100,   // @ i 
100,   // @ j 
100,   // @ k 
100,   // @ l 
0,   // @ m 
100,   // @ n 
100,   // @ o 
0,   // @ p 
100,   // @ q 
100,   // @ r 
100,   // @ s 
0,   // @ t 
100,   // @ u 
100,   // @ v 
100,   // @ w 
100,   // @ x 
100,   // @ y 
100,   // @ z 
100,   // @ { 
100,   // @ | 
100,   // @ } 
100,   // @ ~ 
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
12, 
100,   // A ! 
100,   // A " 
100,   // A # 
100,   // A $ 
100,   // A % 
100,   // A & 
49,   // A ' 
100,   // A ( 
44,   // A ) 
100,   // A * 
100,   // A + 
51,   // A , 
95,   // A - 
74,   // A . 
100,   // A / 
100,   // A 0 
30,   // A 1 
100,   // A 2 
100,   // A 3 
100,   // A 4 
100,   // A 5 
100,   // A 6 
100,   // A 7 
100,   // A 8 
100,   // A 9 
100,   // A : 
100,   // A ; 
100,   // A < 
100,   // A = 
100,   // A > 
100,   // A ? 
100,   // A @ 
31,   // A A 
30,   // A B 
41,   // A C 
54,   // A D 
100,   // A E 
24,   // A F 
72,   // A G 
58,   // A H 
42,   // A I 
100,   // A J 
75,   // A K 
64,   // A L 
57,   // A M 
86,   // A N 
20,   // A O 
34,   // A P 
0,   // A Q 
68,   // A R 
25,   // A S 
58,   // A T 
41,   // A U 
74,   // A V 
68,   // A W 
100,   // A X 
71,   // A Y 
32,   // A Z 
100,   // A [ 
100,   // A \ 
100,   // A ] 
100,   // A ^ 
100,   // A _ 
100,   // A ` 
26,   // A a 
18,   // A b 
29,   // A c 
8,   // A d 
42,   // A e 
8,   // A f 
31,   // A g 
100,   // A h 
49,   // A i 
0,   // A j 
17,   // A k 
12,   // A l 
6,   // A m 
20,   // A n 
100,   // A o 
38,   // A p 
15,   // A q 
31,   // A r 
20,   // A s 
6,   // A t 
19,   // A u 
4,   // A v 
27,   // A w 
100,   // A x 
64,   // A y 
17,   // A z 
100,   // A { 
100,   // A | 
100,   // A } 
100,   // A ~ 
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
10, 
100,   // B ! 
100,   // B " 
100,   // B # 
100,   // B $ 
100,   // B % 
100,   // B & 
40,   // B ' 
100,   // B ( 
100,   // B ) 
100,   // B * 
100,   // B + 
100,   // B , 
33,   // B - 
40,   // B . 
34,   // B / 
100,   // B 0 
100,   // B 1 
100,   // B 2 
100,   // B 3 
100,   // B 4 
100,   // B 5 
100,   // B 6 
100,   // B 7 
100,   // B 8 
100,   // B 9 
100,   // B : 
100,   // B ; 
100,   // B < 
100,   // B = 
100,   // B > 
100,   // B ? 
100,   // B @ 
24,   // B A 
30,   // B B 
21,   // B C 
41,   // B D 
82,   // B E 
100,   // B F 
11,   // B G 
14,   // B H 
28,   // B I 
87,   // B J 
100,   // B K 
59,   // B L 
7,   // B M 
10,   // B N 
52,   // B O 
13,   // B P 
100,   // B Q 
76,   // B R 
28,   // B S 
17,   // B T 
100,   // B U 
25,   // B V 
18,   // B W 
5,   // B X 
41,   // B Y 
35,   // B Z 
100,   // B [ 
100,   // B \ 
100,   // B ] 
100,   // B ^ 
100,   // B _ 
100,   // B ` 
14,   // B a 
100,   // B b 
100,   // B c 
100,   // B d 
11,   // B e 
100,   // B f 
100,   // B g 
15,   // B h 
16,   // B i 
0,   // B j 
100,   // B k 
8,   // B l 
100,   // B m 
100,   // B n 
12,   // B o 
100,   // B p 
100,   // B q 
7,   // B r 
90,   // B s 
69,   // B t 
5,   // B u 
100,   // B v 
100,   // B w 
100,   // B x 
11,   // B y 
100,   // B z 
100,   // B { 
100,   // B | 
100,   // B } 
100,   // B ~ 
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
4, 
100,   // C ! 
100,   // C " 
100,   // C # 
100,   // C $ 
100,   // C % 
100,   // C & 
9,   // C ' 
100,   // C ( 
52,   // C ) 
100,   // C * 
100,   // C + 
96,   // C , 
100,   // C - 
63,   // C . 
78,   // C / 
100,   // C 0 
100,   // C 1 
100,   // C 2 
100,   // C 3 
100,   // C 4 
100,   // C 5 
100,   // C 6 
100,   // C 7 
100,   // C 8 
100,   // C 9 
100,   // C : 
5,   // C ; 
100,   // C < 
100,   // C = 
100,   // C > 
100,   // C ? 
100,   // C @ 
44,   // C A 
3,   // C B 
8,   // C C 
11,   // C D 
55,   // C E 
19,   // C F 
8,   // C G 
100,   // C H 
36,   // C I 
40,   // C J 
65,   // C K 
24,   // C L 
9,   // C M 
13,   // C N 
40,   // C O 
5,   // C P 
25,   // C Q 
22,   // C R 
10,   // C S 
30,   // C T 
32,   // C U 
2,   // C V 
6,   // C W 
100,   // C X 
36,   // C Y 
6,   // C Z 
100,   // C [ 
100,   // C \ 
100,   // C ] 
100,   // C ^ 
100,   // C _ 
100,   // C ` 
23,   // C a 
100,   // C b 
100,   // C c 
100,   // C d 
21,   // C e 
100,   // C f 
100,   // C g 
25,   // C h 
27,   // C i 
100,   // C j 
100,   // C k 
24,   // C l 
100,   // C m 
100,   // C n 
28,   // C o 
100,   // C p 
100,   // C q 
24,   // C r 
60,   // C s 
15,   // C t 
24,   // C u 
100,   // C v 
100,   // C w 
100,   // C x 
34,   // C y 
8,   // C z 
100,   // C { 
100,   // C | 
100,   // C } 
100,   // C ~ 
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
21, 
100,   // D ! 
100,   // D " 
100,   // D # 
100,   // D $ 
100,   // D % 
100,   // D & 
24,   // D ' 
100,   // D ( 
75,   // D ) 
100,   // D * 
100,   // D + 
84,   // D , 
43,   // D - 
32,   // D . 
54,   // D / 
100,   // D 0 
100,   // D 1 
100,   // D 2 
100,   // D 3 
0,   // D 4 
100,   // D 5 
100,   // D 6 
100,   // D 7 
100,   // D 8 
100,   // D 9 
100,   // D : 
100,   // D ; 
100,   // D < 
100,   // D = 
100,   // D > 
100,   // D ? 
100,   // D @ 
26,   // D A 
39,   // D B 
0,   // D C 
20,   // D D 
89,   // D E 
15,   // D F 
100,   // D G 
14,   // D H 
56,   // D I 
22,   // D J 
100,   // D K 
14,   // D L 
24,   // D M 
11,   // D N 
53,   // D O 
6,   // D P 
100,   // D Q 
56,   // D R 
18,   // D S 
4,   // D T 
100,   // D U 
100,   // D V 
31,   // D W 
100,   // D X 
35,   // D Y 
100,   // D Z 
100,   // D [ 
100,   // D \ 
100,   // D ] 
100,   // D ^ 
100,   // D _ 
100,   // D ` 
8,   // D a 
100,   // D b 
100,   // D c 
100,   // D d 
10,   // D e 
100,   // D f 
100,   // D g 
51,   // D h 
13,   // D i 
0,   // D j 
100,   // D k 
100,   // D l 
42,   // D m 
100,   // D n 
13,   // D o 
100,   // D p 
100,   // D q 
12,   // D r 
66,   // D s 
100,   // D t 
10,   // D u 
100,   // D v 
9,   // D w 
100,   // D x 
11,   // D y 
100,   // D z 
100,   // D { 
100,   // D | 
100,   // D } 
100,   // D ~ 
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
21, 
100,   // E ! 
100,   // E " 
100,   // E # 
100,   // E $ 
100,   // E % 
100,   // E & 
80,   // E ' 
100,   // E ( 
100,   // E ) 
100,   // E * 
100,   // E + 
19,   // E , 
67,   // E - 
74,   // E . 
100,   // E / 
100,   // E 0 
100,   // E 1 
100,   // E 2 
100,   // E 3 
100,   // E 4 
100,   // E 5 
100,   // E 6 
100,   // E 7 
100,   // E 8 
100,   // E 9 
100,   // E : 
100,   // E ; 
100,   // E < 
100,   // E = 
100,   // E > 
100,   // E ? 
100,   // E @ 
90,   // E A 
12,   // E B 
47,   // E C 
78,   // E D 
74,   // E E 
38,   // E F 
32,   // E G 
17,   // E H 
78,   // E I 
100,   // E J 
36,   // E K 
84,   // E L 
36,   // E M 
87,   // E N 
18,   // E O 
27,   // E P 
100,   // E Q 
89,   // E R 
62,   // E S 
58,   // E T 
15,   // E U 
88,   // E V 
86,   // E W 
58,   // E X 
100,   // E Y 
100,   // E Z 
100,   // E [ 
100,   // E \ 
100,   // E ] 
100,   // E ^ 
100,   // E _ 
100,   // E ` 
11,   // E a 
100,   // E b 
11,   // E c 
5,   // E d 
100,   // E e 
33,   // E f 
6,   // E g 
100,   // E h 
4,   // E i 
20,   // E j 
26,   // E k 
8,   // E l 
9,   // E m 
10,   // E n 
29,   // E o 
14,   // E p 
16,   // E q 
26,   // E r 
17,   // E s 
52,   // E t 
1,   // E u 
6,   // E v 
100,   // E w 
7,   // E x 
17,   // E y 
25,   // E z 
100,   // E { 
100,   // E | 
100,   // E } 
100,   // E ~ 
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
23, 
100,   // F ! 
100,   // F " 
100,   // F # 
100,   // F $ 
100,   // F % 
100,   // F & 
55,   // F ' 
100,   // F ( 
12,   // F ) 
100,   // F * 
100,   // F + 
100,   // F , 
100,   // F - 
68,   // F . 
82,   // F / 
100,   // F 0 
100,   // F 1 
100,   // F 2 
100,   // F 3 
100,   // F 4 
100,   // F 5 
100,   // F 6 
100,   // F 7 
100,   // F 8 
100,   // F 9 
100,   // F : 
100,   // F ; 
100,   // F < 
100,   // F = 
100,   // F > 
100,   // F ? 
100,   // F @ 
43,   // F A 
15,   // F B 
20,   // F C 
8,   // F D 
55,   // F E 
45,   // F F 
15,   // F G 
8,   // F H 
54,   // F I 
100,   // F J 
100,   // F K 
19,   // F L 
12,   // F M 
25,   // F N 
42,   // F O 
9,   // F P 
100,   // F Q 
34,   // F R 
12,   // F S 
41,   // F T 
100,   // F U 
29,   // F V 
23,   // F W 
36,   // F X 
10,   // F Y 
0,   // F Z 
100,   // F [ 
100,   // F \ 
100,   // F ] 
100,   // F ^ 
100,   // F _ 
100,   // F ` 
35,   // F a 
100,   // F b 
100,   // F c 
100,   // F d 
18,   // F e 
100,   // F f 
100,   // F g 
100,   // F h 
17,   // F i 
0,   // F j 
100,   // F k 
14,   // F l 
100,   // F m 
100,   // F n 
17,   // F o 
100,   // F p 
100,   // F q 
18,   // F r 
82,   // F s 
85,   // F t 
36,   // F u 
100,   // F v 
100,   // F w 
100,   // F x 
100,   // F y 
100,   // F z 
100,   // F { 
100,   // F | 
100,   // F } 
100,   // F ~ 
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
14, 
100,   // G ! 
100,   // G " 
100,   // G # 
100,   // G $ 
100,   // G % 
0,   // G & 
100,   // G ' 
100,   // G ( 
100,   // G ) 
100,   // G * 
100,   // G + 
95,   // G , 
100,   // G - 
56,   // G . 
100,   // G / 
100,   // G 0 
100,   // G 1 
100,   // G 2 
100,   // G 3 
100,   // G 4 
100,   // G 5 
100,   // G 6 
100,   // G 7 
100,   // G 8 
100,   // G 9 
100,   // G : 
100,   // G ; 
100,   // G < 
100,   // G = 
100,   // G > 
100,   // G ? 
100,   // G @ 
3,   // G A 
33,   // G B 
16,   // G C 
15,   // G D 
95,   // G E 
4,   // G F 
34,   // G G 
32,   // G H 
45,   // G I 
100,   // G J 
100,   // G K 
100,   // G L 
11,   // G M 
30,   // G N 
30,   // G O 
29,   // G P 
9,   // G Q 
78,   // G R 
34,   // G S 
34,   // G T 
39,   // G U 
17,   // G V 
30,   // G W 
100,   // G X 
12,   // G Y 
100,   // G Z 
100,   // G [ 
100,   // G \ 
100,   // G ] 
100,   // G ^ 
100,   // G _ 
100,   // G ` 
40,   // G a 
100,   // G b 
100,   // G c 
36,   // G d 
10,   // G e 
100,   // G f 
100,   // G g 
29,   // G h 
22,   // G i 
100,   // G j 
100,   // G k 
16,   // G l 
100,   // G m 
54,   // G n 
22,   // G o 
100,   // G p 
100,   // G q 
13,   // G r 
90,   // G s 
100,   // G t 
25,   // G u 
100,   // G v 
37,   // G w 
100,   // G x 
46,   // G y 
100,   // G z 
100,   // G { 
100,   // G | 
100,   // G } 
100,   // G ~ 
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
26, 
100,   // H ! 
100,   // H " 
100,   // H # 
100,   // H $ 
100,   // H % 
100,   // H & 
82,   // H ' 
100,   // H ( 
100,   // H ) 
100,   // H * 
100,   // H + 
100,   // H , 
100,   // H - 
81,   // H . 
100,   // H / 
100,   // H 0 
100,   // H 1 
100,   // H 2 
100,   // H 3 
100,   // H 4 
100,   // H 5 
100,   // H 6 
100,   // H 7 
100,   // H 8 
100,   // H 9 
100,   // H : 
100,   // H ; 
100,   // H < 
100,   // H = 
100,   // H > 
100,   // H ? 
100,   // H @ 
69,   // H A 
100,   // H B 
35,   // H C 
21,   // H D 
96,   // H E 
23,   // H F 
24,   // H G 
5,   // H H 
90,   // H I 
100,   // H J 
100,   // H K 
39,   // H L 
8,   // H M 
50,   // H N 
85,   // H O 
20,   // H P 
25,   // H Q 
60,   // H R 
22,   // H S 
76,   // H T 
29,   // H U 
10,   // H V 
48,   // H W 
100,   // H X 
37,   // H Y 
100,   // H Z 
100,   // H [ 
100,   // H \ 
100,   // H ] 
100,   // H ^ 
100,   // H _ 
100,   // H ` 
16,   // H a 
100,   // H b 
100,   // H c 
100,   // H d 
13,   // H e 
100,   // H f 
100,   // H g 
16,   // H h 
15,   // H i 
100,   // H j 
100,   // H k 
100,   // H l 
100,   // H m 
100,   // H n 
12,   // H o 
100,   // H p 
100,   // H q 
95,   // H r 
100,   // H s 
100,   // H t 
12,   // H u 
100,   // H v 
9,   // H w 
100,   // H x 
19,   // H y 
34,   // H z 
100,   // H { 
100,   // H | 
100,   // H } 
100,   // H ~ 
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
29, 
100,   // I ! 
100,   // I " 
100,   // I # 
100,   // I $ 
100,   // I % 
100,   // I & 
13,   // I ' 
100,   // I ( 
63,   // I ) 
100,   // I * 
100,   // I + 
24,   // I , 
100,   // I - 
64,   // I . 
90,   // I / 
100,   // I 0 
100,   // I 1 
100,   // I 2 
100,   // I 3 
100,   // I 4 
100,   // I 5 
100,   // I 6 
100,   // I 7 
100,   // I 8 
100,   // I 9 
100,   // I : 
100,   // I ; 
100,   // I < 
100,   // I = 
100,   // I > 
100,   // I ? 
100,   // I @ 
36,   // I A 
26,   // I B 
44,   // I C 
34,   // I D 
90,   // I E 
39,   // I F 
52,   // I G 
4,   // I H 
25,   // I I 
100,   // I J 
100,   // I K 
56,   // I L 
54,   // I M 
70,   // I N 
51,   // I O 
31,   // I P 
20,   // I Q 
72,   // I R 
61,   // I S 
79,   // I T 
25,   // I U 
63,   // I V 
33,   // I W 
44,   // I X 
100,   // I Y 
93,   // I Z 
100,   // I [ 
100,   // I \ 
100,   // I ] 
100,   // I ^ 
100,   // I _ 
100,   // I ` 
57,   // I a 
31,   // I b 
17,   // I c 
37,   // I d 
100,   // I e 
40,   // I f 
30,   // I g 
100,   // I h 
100,   // I i 
100,   // I j 
45,   // I k 
65,   // I l 
34,   // I m 
8,   // I n 
88,   // I o 
22,   // I p 
100,   // I q 
24,   // I r 
22,   // I s 
23,   // I t 
100,   // I u 
17,   // I v 
57,   // I w 
100,   // I x 
100,   // I y 
100,   // I z 
100,   // I { 
100,   // I | 
100,   // I } 
100,   // I ~ 
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
16, 
100,   // J ! 
100,   // J " 
100,   // J # 
100,   // J $ 
100,   // J % 
100,   // J & 
58,   // J ' 
100,   // J ( 
100,   // J ) 
100,   // J * 
100,   // J + 
100,   // J , 
100,   // J - 
60,   // J . 
100,   // J / 
100,   // J 0 
100,   // J 1 
100,   // J 2 
100,   // J 3 
100,   // J 4 
100,   // J 5 
100,   // J 6 
100,   // J 7 
100,   // J 8 
100,   // J 9 
100,   // J : 
100,   // J ; 
100,   // J < 
100,   // J = 
100,   // J > 
100,   // J ? 
100,   // J @ 
70,   // J A 
100,   // J B 
3,   // J C 
26,   // J D 
100,   // J E 
100,   // J F 
0,   // J G 
3,   // J H 
36,   // J I 
10,   // J J 
100,   // J K 
100,   // J L 
100,   // J M 
100,   // J N 
100,   // J O 
21,   // J P 
100,   // J Q 
47,   // J R 
100,   // J S 
100,   // J T 
34,   // J U 
32,   // J V 
0,   // J W 
0,   // J X 
100,   // J Y 
100,   // J Z 
100,   // J [ 
100,   // J \ 
100,   // J ] 
100,   // J ^ 
100,   // J _ 
100,   // J ` 
10,   // J a 
100,   // J b 
100,   // J c 
100,   // J d 
6,   // J e 
100,   // J f 
100,   // J g 
100,   // J h 
26,   // J i 
100,   // J j 
100,   // J k 
100,   // J l 
100,   // J m 
100,   // J n 
14,   // J o 
100,   // J p 
100,   // J q 
1,   // J r 
100,   // J s 
100,   // J t 
17,   // J u 
100,   // J v 
100,   // J w 
100,   // J x 
100,   // J y 
100,   // J z 
100,   // J { 
100,   // J | 
100,   // J } 
100,   // J ~ 
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
12, 
100,   // K ! 
100,   // K " 
100,   // K # 
100,   // K $ 
100,   // K % 
100,   // K & 
53,   // K ' 
100,   // K ( 
33,   // K ) 
100,   // K * 
100,   // K + 
71,   // K , 
100,   // K - 
90,   // K . 
100,   // K / 
100,   // K 0 
100,   // K 1 
83,   // K 2 
100,   // K 3 
100,   // K 4 
100,   // K 5 
100,   // K 6 
100,   // K 7 
100,   // K 8 
100,   // K 9 
100,   // K : 
100,   // K ; 
100,   // K < 
100,   // K = 
100,   // K > 
100,   // K ? 
100,   // K @ 
100,   // K A 
100,   // K B 
52,   // K C 
54,   // K D 
100,   // K E 
100,   // K F 
5,   // K G 
100,   // K H 
65,   // K I 
8,   // K J 
42,   // K K 
60,   // K L 
100,   // K M 
61,   // K N 
17,   // K O 
6,   // K P 
100,   // K Q 
100,   // K R 
100,   // K S 
100,   // K T 
21,   // K U 
16,   // K V 
100,   // K W 
100,   // K X 
21,   // K Y 
100,   // K Z 
100,   // K [ 
100,   // K \ 
100,   // K ] 
100,   // K ^ 
100,   // K _ 
100,   // K ` 
15,   // K a 
100,   // K b 
100,   // K c 
100,   // K d 
16,   // K e 
100,   // K f 
100,   // K g 
15,   // K h 
30,   // K i 
100,   // K j 
100,   // K k 
10,   // K l 
100,   // K m 
63,   // K n 
17,   // K o 
100,   // K p 
100,   // K q 
20,   // K r 
54,   // K s 
100,   // K t 
9,   // K u 
100,   // K v 
50,   // K w 
100,   // K x 
9,   // K y 
100,   // K z 
100,   // K { 
100,   // K | 
100,   // K } 
100,   // K ~ 
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
13, 
100,   // L ! 
100,   // L " 
100,   // L # 
100,   // L $ 
100,   // L % 
100,   // L & 
100,   // L ' 
100,   // L ( 
11,   // L ) 
100,   // L * 
100,   // L + 
100,   // L , 
36,   // L - 
95,   // L . 
38,   // L / 
100,   // L 0 
100,   // L 1 
100,   // L 2 
100,   // L 3 
100,   // L 4 
100,   // L 5 
100,   // L 6 
100,   // L 7 
100,   // L 8 
100,   // L 9 
100,   // L : 
100,   // L ; 
100,   // L < 
100,   // L = 
100,   // L > 
100,   // L ? 
100,   // L @ 
78,   // L A 
6,   // L B 
7,   // L C 
37,   // L D 
83,   // L E 
29,   // L F 
4,   // L G 
5,   // L H 
77,   // L I 
100,   // L J 
100,   // L K 
99,   // L L 
70,   // L M 
15,   // L N 
43,   // L O 
9,   // L P 
0,   // L Q 
9,   // L R 
16,   // L S 
29,   // L T 
53,   // L U 
16,   // L V 
11,   // L W 
100,   // L X 
88,   // L Y 
33,   // L Z 
100,   // L [ 
100,   // L \ 
100,   // L ] 
100,   // L ^ 
100,   // L _ 
100,   // L ` 
20,   // L a 
100,   // L b 
100,   // L c 
100,   // L d 
16,   // L e 
100,   // L f 
100,   // L g 
100,   // L h 
16,   // L i 
100,   // L j 
100,   // L k 
4,   // L l 
100,   // L m 
100,   // L n 
19,   // L o 
100,   // L p 
100,   // L q 
100,   // L r 
82,   // L s 
59,   // L t 
8,   // L u 
100,   // L v 
100,   // L w 
100,   // L x 
13,   // L y 
100,   // L z 
100,   // L { 
100,   // L | 
100,   // L } 
100,   // L ~ 
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
13, 
100,   // M ! 
100,   // M " 
100,   // M # 
100,   // M $ 
100,   // M % 
100,   // M & 
100,   // M ' 
100,   // M ( 
100,   // M ) 
100,   // M * 
100,   // M + 
100,   // M , 
100,   // M - 
59,   // M . 
100,   // M / 
100,   // M 0 
100,   // M 1 
100,   // M 2 
100,   // M 3 
100,   // M 4 
100,   // M 5 
100,   // M 6 
100,   // M 7 
100,   // M 8 
100,   // M 9 
100,   // M : 
100,   // M ; 
100,   // M < 
100,   // M = 
100,   // M > 
100,   // M ? 
100,   // M @ 
57,   // M A 
30,   // M B 
13,   // M C 
10,   // M D 
90,   // M E 
10,   // M F 
14,   // M G 
18,   // M H 
36,   // M I 
2,   // M J 
100,   // M K 
13,   // M L 
69,   // M M 
19,   // M N 
34,   // M O 
38,   // M P 
100,   // M Q 
12,   // M R 
23,   // M S 
17,   // M T 
100,   // M U 
7,   // M V 
46,   // M W 
38,   // M X 
100,   // M Y 
0,   // M Z 
100,   // M [ 
100,   // M \ 
100,   // M ] 
100,   // M ^ 
100,   // M _ 
100,   // M ` 
19,   // M a 
20,   // M b 
1,   // M c 
100,   // M d 
29,   // M e 
100,   // M f 
84,   // M g 
100,   // M h 
22,   // M i 
100,   // M j 
30,   // M k 
56,   // M l 
48,   // M m 
100,   // M n 
24,   // M o 
100,   // M p 
100,   // M q 
5,   // M r 
81,   // M s 
34,   // M t 
31,   // M u 
100,   // M v 
100,   // M w 
100,   // M x 
35,   // M y 
100,   // M z 
100,   // M { 
100,   // M | 
100,   // M } 
100,   // M ~ 
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
25, 
100,   // N ! 
100,   // N " 
100,   // N # 
100,   // N $ 
100,   // N % 
100,   // N & 
75,   // N ' 
100,   // N ( 
93,   // N ) 
100,   // N * 
100,   // N + 
100,   // N , 
100,   // N - 
81,   // N . 
100,   // N / 
100,   // N 0 
100,   // N 1 
100,   // N 2 
100,   // N 3 
100,   // N 4 
100,   // N 5 
100,   // N 6 
100,   // N 7 
100,   // N 8 
100,   // N 9 
100,   // N : 
100,   // N ; 
100,   // N < 
100,   // N = 
100,   // N > 
100,   // N ? 
100,   // N @ 
25,   // N A 
16,   // N B 
34,   // N C 
82,   // N D 
7,   // N E 
28,   // N F 
72,   // N G 
23,   // N H 
63,   // N I 
35,   // N J 
38,   // N K 
21,   // N L 
30,   // N M 
59,   // N N 
60,   // N O 
16,   // N P 
100,   // N Q 
33,   // N R 
54,   // N S 
86,   // N T 
100,   // N U 
76,   // N V 
0,   // N W 
100,   // N X 
5,   // N Y 
100,   // N Z 
100,   // N [ 
100,   // N \ 
100,   // N ] 
100,   // N ^ 
100,   // N _ 
100,   // N ` 
32,   // N a 
100,   // N b 
100,   // N c 
100,   // N d 
19,   // N e 
100,   // N f 
63,   // N g 
100,   // N h 
32,   // N i 
100,   // N j 
0,   // N k 
100,   // N l 
100,   // N m 
100,   // N n 
32,   // N o 
100,   // N p 
100,   // N q 
100,   // N r 
87,   // N s 
100,   // N t 
55,   // N u 
100,   // N v 
100,   // N w 
100,   // N x 
45,   // N y 
100,   // N z 
100,   // N { 
100,   // N | 
100,   // N } 
100,   // N ~ 
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
13, 
100,   // O ! 
100,   // O " 
100,   // O # 
100,   // O $ 
100,   // O % 
100,   // O & 
5,   // O ' 
100,   // O ( 
100,   // O ) 
100,   // O * 
100,   // O + 
100,   // O , 
100,   // O - 
53,   // O . 
100,   // O / 
100,   // O 0 
100,   // O 1 
100,   // O 2 
100,   // O 3 
100,   // O 4 
100,   // O 5 
100,   // O 6 
100,   // O 7 
100,   // O 8 
100,   // O 9 
100,   // O : 
100,   // O ; 
100,   // O < 
100,   // O = 
100,   // O > 
100,   // O ? 
100,   // O @ 
59,   // O A 
24,   // O B 
24,   // O C 
31,   // O D 
39,   // O E 
75,   // O F 
36,   // O G 
46,   // O H 
67,   // O I 
52,   // O J 
26,   // O K 
37,   // O L 
30,   // O M 
92,   // O N 
55,   // O O 
62,   // O P 
29,   // O Q 
56,   // O R 
30,   // O S 
46,   // O T 
69,   // O U 
92,   // O V 
62,   // O W 
83,   // O X 
100,   // O Y 
100,   // O Z 
100,   // O [ 
100,   // O \ 
100,   // O ] 
100,   // O ^ 
100,   // O _ 
100,   // O ` 
66,   // O a 
14,   // O b 
31,   // O c 
41,   // O d 
9,   // O e 
46,   // O f 
31,   // O g 
7,   // O h 
61,   // O i 
100,   // O j 
9,   // O k 
6,   // O l 
36,   // O m 
16,   // O n 
100,   // O o 
51,   // O p 
100,   // O q 
35,   // O r 
17,   // O s 
18,   // O t 
34,   // O u 
28,   // O v 
29,   // O w 
37,   // O x 
100,   // O y 
100,   // O z 
100,   // O { 
100,   // O | 
100,   // O } 
100,   // O ~ 
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
12, 
100,   // P ! 
100,   // P " 
100,   // P # 
100,   // P $ 
100,   // P % 
100,   // P & 
28,   // P ' 
100,   // P ( 
30,   // P ) 
100,   // P * 
100,   // P + 
96,   // P , 
100,   // P - 
66,   // P . 
92,   // P / 
100,   // P 0 
100,   // P 1 
100,   // P 2 
100,   // P 3 
100,   // P 4 
100,   // P 5 
100,   // P 6 
100,   // P 7 
100,   // P 8 
100,   // P 9 
100,   // P : 
100,   // P ; 
100,   // P < 
100,   // P = 
100,   // P > 
100,   // P ? 
100,   // P @ 
21,   // P A 
15,   // P B 
19,   // P C 
20,   // P D 
89,   // P E 
11,   // P F 
6,   // P G 
40,   // P H 
47,   // P I 
100,   // P J 
59,   // P K 
49,   // P L 
35,   // P M 
1,   // P N 
61,   // P O 
42,   // P P 
17,   // P Q 
55,   // P R 
31,   // P S 
32,   // P T 
75,   // P U 
1,   // P V 
38,   // P W 
21,   // P X 
100,   // P Y 
100,   // P Z 
100,   // P [ 
100,   // P \ 
100,   // P ] 
100,   // P ^ 
100,   // P _ 
100,   // P ` 
24,   // P a 
100,   // P b 
100,   // P c 
61,   // P d 
7,   // P e 
47,   // P f 
100,   // P g 
12,   // P h 
25,   // P i 
100,   // P j 
0,   // P k 
32,   // P l 
100,   // P m 
100,   // P n 
23,   // P o 
100,   // P p 
100,   // P q 
12,   // P r 
36,   // P s 
28,   // P t 
28,   // P u 
100,   // P v 
100,   // P w 
100,   // P x 
8,   // P y 
100,   // P z 
100,   // P { 
100,   // P | 
100,   // P } 
100,   // P ~ 
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
20, 
100,   // Q ! 
100,   // Q " 
100,   // Q # 
100,   // Q $ 
100,   // Q % 
100,   // Q & 
20,   // Q ' 
100,   // Q ( 
100,   // Q ) 
100,   // Q * 
100,   // Q + 
100,   // Q , 
100,   // Q - 
100,   // Q . 
100,   // Q / 
100,   // Q 0 
100,   // Q 1 
100,   // Q 2 
100,   // Q 3 
100,   // Q 4 
100,   // Q 5 
100,   // Q 6 
100,   // Q 7 
100,   // Q 8 
100,   // Q 9 
100,   // Q : 
100,   // Q ; 
100,   // Q < 
100,   // Q = 
100,   // Q > 
100,   // Q ? 
100,   // Q @ 
100,   // Q A 
11,   // Q B 
0,   // Q C 
100,   // Q D 
100,   // Q E 
6,   // Q F 
100,   // Q G 
100,   // Q H 
100,   // Q I 
100,   // Q J 
100,   // Q K 
100,   // Q L 
4,   // Q M 
100,   // Q N 
100,   // Q O 
0,   // Q P 
100,   // Q Q 
28,   // Q R 
100,   // Q S 
100,   // Q T 
63,   // Q U 
100,   // Q V 
0,   // Q W 
100,   // Q X 
100,   // Q Y 
100,   // Q Z 
100,   // Q [ 
100,   // Q \ 
100,   // Q ] 
100,   // Q ^ 
100,   // Q _ 
100,   // Q ` 
6,   // Q a 
100,   // Q b 
100,   // Q c 
100,   // Q d 
100,   // Q e 
100,   // Q f 
100,   // Q g 
100,   // Q h 
100,   // Q i 
100,   // Q j 
100,   // Q k 
100,   // Q l 
100,   // Q m 
100,   // Q n 
100,   // Q o 
100,   // Q p 
100,   // Q q 
100,   // Q r 
60,   // Q s 
100,   // Q t 
7,   // Q u 
100,   // Q v 
100,   // Q w 
100,   // Q x 
100,   // Q y 
100,   // Q z 
100,   // Q { 
100,   // Q | 
100,   // Q } 
100,   // Q ~ 
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
23, 
100,   // R ! 
100,   // R " 
100,   // R # 
100,   // R $ 
100,   // R % 
100,   // R & 
57,   // R ' 
100,   // R ( 
80,   // R ) 
100,   // R * 
100,   // R + 
100,   // R , 
100,   // R - 
66,   // R . 
100,   // R / 
100,   // R 0 
100,   // R 1 
100,   // R 2 
100,   // R 3 
100,   // R 4 
100,   // R 5 
100,   // R 6 
100,   // R 7 
100,   // R 8 
100,   // R 9 
100,   // R : 
100,   // R ; 
100,   // R < 
100,   // R = 
100,   // R > 
100,   // R ? 
100,   // R @ 
56,   // R A 
12,   // R B 
33,   // R C 
46,   // R D 
88,   // R E 
40,   // R F 
73,   // R G 
30,   // R H 
69,   // R I 
38,   // R J 
7,   // R K 
100,   // R L 
45,   // R M 
56,   // R N 
60,   // R O 
29,   // R P 
100,   // R Q 
50,   // R R 
47,   // R S 
59,   // R T 
77,   // R U 
17,   // R V 
7,   // R W 
100,   // R X 
100,   // R Y 
100,   // R Z 
100,   // R [ 
100,   // R \ 
100,   // R ] 
100,   // R ^ 
100,   // R _ 
100,   // R ` 
27,   // R a 
100,   // R b 
100,   // R c 
1,   // R d 
16,   // R e 
100,   // R f 
100,   // R g 
19,   // R h 
15,   // R i 
100,   // R j 
100,   // R k 
100,   // R l 
100,   // R m 
100,   // R n 
12,   // R o 
100,   // R p 
100,   // R q 
100,   // R r 
56,   // R s 
100,   // R t 
11,   // R u 
100,   // R v 
3,   // R w 
100,   // R x 
35,   // R y 
100,   // R z 
100,   // R { 
100,   // R | 
100,   // R } 
100,   // R ~ 
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
26, 
100,   // S ! 
100,   // S " 
100,   // S # 
100,   // S $ 
100,   // S % 
100,   // S & 
58,   // S ' 
100,   // S ( 
85,   // S ) 
100,   // S * 
100,   // S + 
85,   // S , 
80,   // S - 
24,   // S . 
100,   // S / 
100,   // S 0 
100,   // S 1 
100,   // S 2 
100,   // S 3 
100,   // S 4 
100,   // S 5 
100,   // S 6 
100,   // S 7 
100,   // S 8 
100,   // S 9 
100,   // S : 
100,   // S ; 
100,   // S < 
100,   // S = 
100,   // S > 
100,   // S ? 
100,   // S @ 
31,   // S A 
14,   // S B 
17,   // S C 
10,   // S D 
38,   // S E 
18,   // S F 
20,   // S G 
63,   // S H 
39,   // S I 
100,   // S J 
18,   // S K 
9,   // S L 
21,   // S M 
7,   // S N 
28,   // S O 
34,   // S P 
100,   // S Q 
17,   // S R 
37,   // S S 
58,   // S T 
78,   // S U 
3,   // S V 
8,   // S W 
3,   // S X 
100,   // S Y 
100,   // S Z 
100,   // S [ 
100,   // S \ 
100,   // S ] 
100,   // S ^ 
100,   // S _ 
100,   // S ` 
27,   // S a 
100,   // S b 
18,   // S c 
100,   // S d 
20,   // S e 
100,   // S f 
3,   // S g 
36,   // S h 
32,   // S i 
100,   // S j 
36,   // S k 
39,   // S l 
23,   // S m 
35,   // S n 
25,   // S o 
32,   // S p 
28,   // S q 
32,   // S r 
87,   // S s 
12,   // S t 
28,   // S u 
50,   // S v 
25,   // S w 
100,   // S x 
28,   // S y 
4,   // S z 
100,   // S { 
100,   // S | 
100,   // S } 
100,   // S ~ 
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
39, 
100,   // T ! 
100,   // T " 
100,   // T # 
100,   // T $ 
100,   // T % 
0,   // T & 
56,   // T ' 
100,   // T ( 
100,   // T ) 
100,   // T * 
100,   // T + 
100,   // T , 
85,   // T - 
80,   // T . 
100,   // T / 
100,   // T 0 
100,   // T 1 
100,   // T 2 
100,   // T 3 
100,   // T 4 
100,   // T 5 
100,   // T 6 
100,   // T 7 
100,   // T 8 
100,   // T 9 
100,   // T : 
100,   // T ; 
100,   // T < 
100,   // T = 
100,   // T > 
100,   // T ? 
100,   // T @ 
75,   // T A 
17,   // T B 
21,   // T C 
25,   // T D 
76,   // T E 
100,   // T F 
26,   // T G 
85,   // T H 
100,   // T I 
0,   // T J 
18,   // T K 
66,   // T L 
23,   // T M 
37,   // T N 
45,   // T O 
14,   // T P 
100,   // T Q 
70,   // T R 
32,   // T S 
80,   // T T 
50,   // T U 
10,   // T V 
34,   // T W 
49,   // T X 
61,   // T Y 
0,   // T Z 
100,   // T [ 
100,   // T \ 
100,   // T ] 
100,   // T ^ 
100,   // T _ 
100,   // T ` 
37,   // T a 
100,   // T b 
100,   // T c 
100,   // T d 
19,   // T e 
100,   // T f 
100,   // T g 
18,   // T h 
25,   // T i 
100,   // T j 
100,   // T k 
100,   // T l 
100,   // T m 
100,   // T n 
34,   // T o 
100,   // T p 
100,   // T q 
31,   // T r 
59,   // T s 
100,   // T t 
23,   // T u 
100,   // T v 
14,   // T w 
100,   // T x 
33,   // T y 
100,   // T z 
100,   // T { 
100,   // T | 
100,   // T } 
100,   // T ~ 
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
21, 
100,   // U ! 
100,   // U " 
100,   // U # 
100,   // U $ 
100,   // U % 
100,   // U & 
34,   // U ' 
100,   // U ( 
100,   // U ) 
100,   // U * 
100,   // U + 
100,   // U , 
100,   // U - 
12,   // U . 
100,   // U / 
100,   // U 0 
100,   // U 1 
100,   // U 2 
100,   // U 3 
100,   // U 4 
100,   // U 5 
100,   // U 6 
100,   // U 7 
100,   // U 8 
100,   // U 9 
100,   // U : 
100,   // U ; 
100,   // U < 
100,   // U = 
100,   // U > 
100,   // U ? 
100,   // U @ 
33,   // U A 
100,   // U B 
31,   // U C 
41,   // U D 
51,   // U E 
14,   // U F 
80,   // U G 
100,   // U H 
61,   // U I 
100,   // U J 
34,   // U K 
82,   // U L 
69,   // U M 
45,   // U N 
100,   // U O 
51,   // U P 
100,   // U Q 
51,   // U R 
33,   // U S 
70,   // U T 
100,   // U U 
20,   // U V 
41,   // U W 
18,   // U X 
100,   // U Y 
100,   // U Z 
100,   // U [ 
100,   // U \ 
100,   // U ] 
100,   // U ^ 
100,   // U _ 
100,   // U ` 
100,   // U a 
60,   // U b 
0,   // U c 
100,   // U d 
100,   // U e 
100,   // U f 
10,   // U g 
100,   // U h 
100,   // U i 
100,   // U j 
22,   // U k 
34,   // U l 
84,   // U m 
28,   // U n 
100,   // U o 
53,   // U p 
100,   // U q 
45,   // U r 
79,   // U s 
31,   // U t 
100,   // U u 
23,   // U v 
100,   // U w 
26,   // U x 
100,   // U y 
100,   // U z 
100,   // U { 
100,   // U | 
100,   // U } 
100,   // U ~ 
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
16, 
100,   // V ! 
100,   // V " 
100,   // V # 
100,   // V $ 
100,   // V % 
100,   // V & 
24,   // V ' 
100,   // V ( 
0,   // V ) 
100,   // V * 
100,   // V + 
87,   // V , 
21,   // V - 
92,   // V . 
60,   // V / 
100,   // V 0 
100,   // V 1 
100,   // V 2 
100,   // V 3 
0,   // V 4 
100,   // V 5 
100,   // V 6 
100,   // V 7 
100,   // V 8 
100,   // V 9 
100,   // V : 
100,   // V ; 
100,   // V < 
100,   // V = 
100,   // V > 
100,   // V ? 
100,   // V @ 
56,   // V A 
100,   // V B 
11,   // V C 
4,   // V D 
85,   // V E 
5,   // V F 
100,   // V G 
3,   // V H 
47,   // V I 
22,   // V J 
100,   // V K 
1,   // V L 
100,   // V M 
0,   // V N 
25,   // V O 
3,   // V P 
100,   // V Q 
17,   // V R 
43,   // V S 
16,   // V T 
100,   // V U 
100,   // V V 
29,   // V W 
100,   // V X 
100,   // V Y 
100,   // V Z 
100,   // V [ 
100,   // V \ 
100,   // V ] 
100,   // V ^ 
100,   // V _ 
100,   // V ` 
28,   // V a 
100,   // V b 
100,   // V c 
100,   // V d 
20,   // V e 
100,   // V f 
100,   // V g 
100,   // V h 
28,   // V i 
100,   // V j 
100,   // V k 
100,   // V l 
100,   // V m 
100,   // V n 
50,   // V o 
100,   // V p 
100,   // V q 
100,   // V r 
44,   // V s 
100,   // V t 
58,   // V u 
100,   // V v 
100,   // V w 
100,   // V x 
100,   // V y 
100,   // V z 
100,   // V { 
100,   // V | 
100,   // V } 
100,   // V ~ 
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
7, 
100,   // W ! 
100,   // W " 
100,   // W # 
100,   // W $ 
100,   // W % 
100,   // W & 
27,   // W ' 
100,   // W ( 
100,   // W ) 
100,   // W * 
100,   // W + 
3,   // W , 
100,   // W - 
83,   // W . 
100,   // W / 
100,   // W 0 
100,   // W 1 
100,   // W 2 
100,   // W 3 
100,   // W 4 
100,   // W 5 
100,   // W 6 
100,   // W 7 
100,   // W 8 
100,   // W 9 
100,   // W : 
100,   // W ; 
100,   // W < 
100,   // W = 
100,   // W > 
100,   // W ? 
100,   // W @ 
55,   // W A 
29,   // W B 
2,   // W C 
20,   // W D 
88,   // W E 
9,   // W F 
7,   // W G 
43,   // W H 
51,   // W I 
100,   // W J 
100,   // W K 
20,   // W L 
6,   // W M 
73,   // W N 
45,   // W O 
20,   // W P 
100,   // W Q 
22,   // W R 
59,   // W S 
25,   // W T 
35,   // W U 
26,   // W V 
32,   // W W 
4,   // W X 
15,   // W Y 
100,   // W Z 
100,   // W [ 
100,   // W \ 
100,   // W ] 
100,   // W ^ 
100,   // W _ 
100,   // W ` 
10,   // W a 
100,   // W b 
100,   // W c 
100,   // W d 
22,   // W e 
100,   // W f 
100,   // W g 
26,   // W h 
26,   // W i 
100,   // W j 
100,   // W k 
100,   // W l 
100,   // W m 
100,   // W n 
33,   // W o 
100,   // W p 
100,   // W q 
61,   // W r 
84,   // W s 
100,   // W t 
100,   // W u 
100,   // W v 
100,   // W w 
100,   // W x 
26,   // W y 
100,   // W z 
100,   // W { 
100,   // W | 
100,   // W } 
100,   // W ~ 
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
18, 
100,   // X ! 
100,   // X " 
100,   // X # 
100,   // X $ 
100,   // X % 
100,   // X & 
50,   // X ' 
100,   // X ( 
100,   // X ) 
100,   // X * 
100,   // X + 
51,   // X , 
100,   // X - 
67,   // X . 
100,   // X / 
100,   // X 0 
100,   // X 1 
100,   // X 2 
100,   // X 3 
100,   // X 4 
100,   // X 5 
100,   // X 6 
100,   // X 7 
100,   // X 8 
100,   // X 9 
100,   // X : 
100,   // X ; 
100,   // X < 
100,   // X = 
100,   // X > 
100,   // X ? 
100,   // X @ 
100,   // X A 
0,   // X B 
62,   // X C 
0,   // X D 
100,   // X E 
100,   // X F 
100,   // X G 
100,   // X H 
20,   // X I 
100,   // X J 
100,   // X K 
0,   // X L 
100,   // X M 
100,   // X N 
100,   // X O 
100,   // X P 
100,   // X Q 
100,   // X R 
100,   // X S 
93,   // X T 
100,   // X U 
0,   // X V 
100,   // X W 
100,   // X X 
100,   // X Y 
100,   // X Z 
100,   // X [ 
100,   // X \ 
100,   // X ] 
100,   // X ^ 
100,   // X _ 
100,   // X ` 
100,   // X a 
100,   // X b 
100,   // X c 
100,   // X d 
44,   // X e 
100,   // X f 
100,   // X g 
30,   // X h 
100,   // X i 
100,   // X j 
100,   // X k 
100,   // X l 
0,   // X m 
100,   // X n 
100,   // X o 
100,   // X p 
100,   // X q 
100,   // X r 
80,   // X s 
100,   // X t 
100,   // X u 
100,   // X v 
100,   // X w 
100,   // X x 
90,   // X y 
100,   // X z 
100,   // X { 
100,   // X | 
100,   // X } 
100,   // X ~ 
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
19, 
100,   // Y ! 
100,   // Y " 
100,   // Y # 
100,   // Y $ 
100,   // Y % 
100,   // Y & 
46,   // Y ' 
100,   // Y ( 
100,   // Y ) 
100,   // Y * 
100,   // Y + 
84,   // Y , 
100,   // Y - 
71,   // Y . 
100,   // Y / 
100,   // Y 0 
100,   // Y 1 
100,   // Y 2 
100,   // Y 3 
100,   // Y 4 
100,   // Y 5 
100,   // Y 6 
100,   // Y 7 
100,   // Y 8 
100,   // Y 9 
100,   // Y : 
100,   // Y ; 
100,   // Y < 
100,   // Y = 
100,   // Y > 
100,   // Y ? 
100,   // Y @ 
42,   // Y A 
20,   // Y B 
5,   // Y C 
100,   // Y D 
77,   // Y E 
100,   // Y F 
0,   // Y G 
6,   // Y H 
31,   // Y I 
100,   // Y J 
100,   // Y K 
100,   // Y L 
6,   // Y M 
44,   // Y N 
18,   // Y O 
18,   // Y P 
100,   // Y Q 
10,   // Y R 
24,   // Y S 
100,   // Y T 
100,   // Y U 
100,   // Y V 
2,   // Y W 
100,   // Y X 
100,   // Y Y 
100,   // Y Z 
100,   // Y [ 
100,   // Y \ 
100,   // Y ] 
100,   // Y ^ 
100,   // Y _ 
100,   // Y ` 
50,   // Y a 
100,   // Y b 
100,   // Y c 
100,   // Y d 
45,   // Y e 
100,   // Y f 
100,   // Y g 
100,   // Y h 
24,   // Y i 
100,   // Y j 
100,   // Y k 
100,   // Y l 
100,   // Y m 
100,   // Y n 
15,   // Y o 
100,   // Y p 
100,   // Y q 
100,   // Y r 
74,   // Y s 
100,   // Y t 
19,   // Y u 
0,   // Y v 
100,   // Y w 
100,   // Y x 
100,   // Y y 
100,   // Y z 
100,   // Y { 
100,   // Y | 
100,   // Y } 
100,   // Y ~ 
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
20, 
100,   // Z ! 
100,   // Z " 
100,   // Z # 
100,   // Z $ 
100,   // Z % 
100,   // Z & 
7,   // Z ' 
100,   // Z ( 
100,   // Z ) 
100,   // Z * 
100,   // Z + 
100,   // Z , 
100,   // Z - 
50,   // Z . 
100,   // Z / 
100,   // Z 0 
100,   // Z 1 
100,   // Z 2 
100,   // Z 3 
100,   // Z 4 
100,   // Z 5 
100,   // Z 6 
100,   // Z 7 
100,   // Z 8 
100,   // Z 9 
100,   // Z : 
100,   // Z ; 
100,   // Z < 
100,   // Z = 
100,   // Z > 
100,   // Z ? 
100,   // Z @ 
100,   // Z A 
100,   // Z B 
100,   // Z C 
100,   // Z D 
48,   // Z E 
100,   // Z F 
100,   // Z G 
100,   // Z H 
100,   // Z I 
100,   // Z J 
100,   // Z K 
100,   // Z L 
0,   // Z M 
100,   // Z N 
100,   // Z O 
0,   // Z P 
100,   // Z Q 
100,   // Z R 
5,   // Z S 
0,   // Z T 
100,   // Z U 
100,   // Z V 
100,   // Z W 
100,   // Z X 
64,   // Z Y 
100,   // Z Z 
100,   // Z [ 
100,   // Z \ 
100,   // Z ] 
100,   // Z ^ 
100,   // Z _ 
100,   // Z ` 
19,   // Z a 
100,   // Z b 
100,   // Z c 
100,   // Z d 
44,   // Z e 
100,   // Z f 
100,   // Z g 
100,   // Z h 
44,   // Z i 
100,   // Z j 
100,   // Z k 
100,   // Z l 
100,   // Z m 
100,   // Z n 
65,   // Z o 
100,   // Z p 
100,   // Z q 
100,   // Z r 
100,   // Z s 
100,   // Z t 
18,   // Z u 
100,   // Z v 
100,   // Z w 
100,   // Z x 
100,   // Z y 
100,   // Z z 
100,   // Z { 
100,   // Z | 
100,   // Z } 
100,   // Z ~ 
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
83, 
100,   // [ ! 
100,   // [ " 
100,   // [ # 
100,   // [ $ 
100,   // [ % 
100,   // [ & 
100,   // [ ' 
100,   // [ ( 
100,   // [ ) 
100,   // [ * 
100,   // [ + 
100,   // [ , 
100,   // [ - 
100,   // [ . 
100,   // [ / 
100,   // [ 0 
100,   // [ 1 
68,   // [ 2 
25,   // [ 3 
100,   // [ 4 
100,   // [ 5 
100,   // [ 6 
100,   // [ 7 
100,   // [ 8 
100,   // [ 9 
100,   // [ : 
100,   // [ ; 
100,   // [ < 
100,   // [ = 
100,   // [ > 
100,   // [ ? 
100,   // [ @ 
100,   // [ A 
100,   // [ B 
100,   // [ C 
100,   // [ D 
100,   // [ E 
100,   // [ F 
11,   // [ G 
100,   // [ H 
100,   // [ I 
100,   // [ J 
100,   // [ K 
100,   // [ L 
100,   // [ M 
100,   // [ N 
100,   // [ O 
100,   // [ P 
100,   // [ Q 
100,   // [ R 
100,   // [ S 
100,   // [ T 
100,   // [ U 
100,   // [ V 
100,   // [ W 
100,   // [ X 
100,   // [ Y 
100,   // [ Z 
100,   // [ [ 
100,   // [ \ 
100,   // [ ] 
100,   // [ ^ 
100,   // [ _ 
100,   // [ ` 
76,   // [ a 
100,   // [ b 
100,   // [ c 
100,   // [ d 
100,   // [ e 
100,   // [ f 
100,   // [ g 
100,   // [ h 
100,   // [ i 
100,   // [ j 
100,   // [ k 
100,   // [ l 
100,   // [ m 
100,   // [ n 
100,   // [ o 
100,   // [ p 
100,   // [ q 
85,   // [ r 
100,   // [ s 
100,   // [ t 
100,   // [ u 
100,   // [ v 
100,   // [ w 
100,   // [ x 
100,   // [ y 
100,   // [ z 
100,   // [ { 
100,   // [ | 
100,   // [ } 
100,   // [ ~ 
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // \ ! 
100,   // \ " 
100,   // \ # 
100,   // \ $ 
100,   // \ % 
100,   // \ & 
100,   // \ ' 
100,   // \ ( 
100,   // \ ) 
100,   // \ * 
100,   // \ + 
100,   // \ , 
100,   // \ - 
100,   // \ . 
100,   // \ / 
100,   // \ 0 
100,   // \ 1 
100,   // \ 2 
100,   // \ 3 
100,   // \ 4 
100,   // \ 5 
100,   // \ 6 
100,   // \ 7 
100,   // \ 8 
100,   // \ 9 
100,   // \ : 
100,   // \ ; 
100,   // \ < 
100,   // \ = 
100,   // \ > 
100,   // \ ? 
100,   // \ @ 
100,   // \ A 
100,   // \ B 
100,   // \ C 
100,   // \ D 
100,   // \ E 
100,   // \ F 
100,   // \ G 
100,   // \ H 
100,   // \ I 
100,   // \ J 
100,   // \ K 
100,   // \ L 
100,   // \ M 
100,   // \ N 
100,   // \ O 
100,   // \ P 
100,   // \ Q 
100,   // \ R 
100,   // \ S 
100,   // \ T 
100,   // \ U 
100,   // \ V 
100,   // \ W 
100,   // \ X 
100,   // \ Y 
100,   // \ Z 
100,   // \ [ 
100,   // \ \ 
100,   // \ ] 
100,   // \ ^ 
100,   // \ _ 
100,   // \ ` 
100,   // \ a 
100,   // \ b 
100,   // \ c 
100,   // \ d 
100,   // \ e 
100,   // \ f 
100,   // \ g 
100,   // \ h 
100,   // \ i 
100,   // \ j 
100,   // \ k 
100,   // \ l 
100,   // \ m 
100,   // \ n 
100,   // \ o 
100,   // \ p 
100,   // \ q 
100,   // \ r 
100,   // \ s 
100,   // \ t 
100,   // \ u 
100,   // \ v 
100,   // \ w 
100,   // \ x 
100,   // \ y 
100,   // \ z 
100,   // \ { 
100,   // \ | 
100,   // \ } 
100,   // \ ~ 
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
91, 
100,   // ] ! 
100,   // ] " 
100,   // ] # 
100,   // ] $ 
100,   // ] % 
100,   // ] & 
100,   // ] ' 
100,   // ] ( 
100,   // ] ) 
100,   // ] * 
100,   // ] + 
100,   // ] , 
100,   // ] - 
100,   // ] . 
100,   // ] / 
100,   // ] 0 
100,   // ] 1 
100,   // ] 2 
100,   // ] 3 
100,   // ] 4 
100,   // ] 5 
100,   // ] 6 
100,   // ] 7 
100,   // ] 8 
100,   // ] 9 
100,   // ] : 
100,   // ] ; 
100,   // ] < 
100,   // ] = 
100,   // ] > 
100,   // ] ? 
100,   // ] @ 
100,   // ] A 
100,   // ] B 
100,   // ] C 
100,   // ] D 
100,   // ] E 
100,   // ] F 
100,   // ] G 
100,   // ] H 
100,   // ] I 
100,   // ] J 
100,   // ] K 
100,   // ] L 
100,   // ] M 
100,   // ] N 
100,   // ] O 
100,   // ] P 
100,   // ] Q 
100,   // ] R 
100,   // ] S 
100,   // ] T 
100,   // ] U 
100,   // ] V 
100,   // ] W 
100,   // ] X 
100,   // ] Y 
100,   // ] Z 
100,   // ] [ 
100,   // ] \ 
100,   // ] ] 
100,   // ] ^ 
100,   // ] _ 
100,   // ] ` 
100,   // ] a 
100,   // ] b 
100,   // ] c 
100,   // ] d 
100,   // ] e 
100,   // ] f 
100,   // ] g 
100,   // ] h 
100,   // ] i 
100,   // ] j 
100,   // ] k 
100,   // ] l 
100,   // ] m 
100,   // ] n 
100,   // ] o 
100,   // ] p 
100,   // ] q 
100,   // ] r 
100,   // ] s 
100,   // ] t 
100,   // ] u 
100,   // ] v 
100,   // ] w 
100,   // ] x 
100,   // ] y 
100,   // ] z 
100,   // ] { 
100,   // ] | 
100,   // ] } 
100,   // ] ~ 
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // ^ ! 
100,   // ^ " 
100,   // ^ # 
100,   // ^ $ 
100,   // ^ % 
100,   // ^ & 
100,   // ^ ' 
100,   // ^ ( 
100,   // ^ ) 
100,   // ^ * 
100,   // ^ + 
100,   // ^ , 
100,   // ^ - 
100,   // ^ . 
100,   // ^ / 
100,   // ^ 0 
100,   // ^ 1 
100,   // ^ 2 
100,   // ^ 3 
100,   // ^ 4 
100,   // ^ 5 
100,   // ^ 6 
100,   // ^ 7 
100,   // ^ 8 
100,   // ^ 9 
100,   // ^ : 
100,   // ^ ; 
100,   // ^ < 
100,   // ^ = 
100,   // ^ > 
100,   // ^ ? 
100,   // ^ @ 
100,   // ^ A 
100,   // ^ B 
100,   // ^ C 
100,   // ^ D 
100,   // ^ E 
100,   // ^ F 
100,   // ^ G 
100,   // ^ H 
100,   // ^ I 
100,   // ^ J 
100,   // ^ K 
100,   // ^ L 
100,   // ^ M 
100,   // ^ N 
100,   // ^ O 
100,   // ^ P 
100,   // ^ Q 
100,   // ^ R 
100,   // ^ S 
100,   // ^ T 
100,   // ^ U 
100,   // ^ V 
100,   // ^ W 
100,   // ^ X 
100,   // ^ Y 
100,   // ^ Z 
100,   // ^ [ 
100,   // ^ \ 
100,   // ^ ] 
100,   // ^ ^ 
100,   // ^ _ 
100,   // ^ ` 
100,   // ^ a 
100,   // ^ b 
100,   // ^ c 
100,   // ^ d 
100,   // ^ e 
100,   // ^ f 
100,   // ^ g 
100,   // ^ h 
100,   // ^ i 
100,   // ^ j 
100,   // ^ k 
100,   // ^ l 
100,   // ^ m 
100,   // ^ n 
100,   // ^ o 
100,   // ^ p 
100,   // ^ q 
100,   // ^ r 
100,   // ^ s 
100,   // ^ t 
100,   // ^ u 
100,   // ^ v 
100,   // ^ w 
100,   // ^ x 
100,   // ^ y 
100,   // ^ z 
100,   // ^ { 
100,   // ^ | 
100,   // ^ } 
100,   // ^ ~ 
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // _ ! 
100,   // _ " 
100,   // _ # 
100,   // _ $ 
100,   // _ % 
100,   // _ & 
100,   // _ ' 
100,   // _ ( 
100,   // _ ) 
100,   // _ * 
100,   // _ + 
100,   // _ , 
100,   // _ - 
100,   // _ . 
100,   // _ / 
100,   // _ 0 
100,   // _ 1 
100,   // _ 2 
100,   // _ 3 
100,   // _ 4 
100,   // _ 5 
100,   // _ 6 
100,   // _ 7 
100,   // _ 8 
100,   // _ 9 
100,   // _ : 
100,   // _ ; 
100,   // _ < 
100,   // _ = 
100,   // _ > 
100,   // _ ? 
100,   // _ @ 
100,   // _ A 
100,   // _ B 
100,   // _ C 
100,   // _ D 
100,   // _ E 
100,   // _ F 
100,   // _ G 
100,   // _ H 
100,   // _ I 
100,   // _ J 
100,   // _ K 
100,   // _ L 
100,   // _ M 
100,   // _ N 
100,   // _ O 
100,   // _ P 
100,   // _ Q 
100,   // _ R 
100,   // _ S 
100,   // _ T 
100,   // _ U 
100,   // _ V 
100,   // _ W 
100,   // _ X 
100,   // _ Y 
100,   // _ Z 
100,   // _ [ 
100,   // _ \ 
100,   // _ ] 
100,   // _ ^ 
100,   // _ _ 
100,   // _ ` 
100,   // _ a 
100,   // _ b 
100,   // _ c 
100,   // _ d 
100,   // _ e 
100,   // _ f 
100,   // _ g 
100,   // _ h 
100,   // _ i 
100,   // _ j 
100,   // _ k 
100,   // _ l 
100,   // _ m 
100,   // _ n 
100,   // _ o 
100,   // _ p 
100,   // _ q 
100,   // _ r 
100,   // _ s 
100,   // _ t 
100,   // _ u 
100,   // _ v 
100,   // _ w 
100,   // _ x 
100,   // _ y 
100,   // _ z 
100,   // _ { 
100,   // _ | 
100,   // _ } 
100,   // _ ~ 
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // ` ! 
100,   // ` " 
100,   // ` # 
100,   // ` $ 
100,   // ` % 
100,   // ` & 
100,   // ` ' 
100,   // ` ( 
100,   // ` ) 
100,   // ` * 
100,   // ` + 
100,   // ` , 
100,   // ` - 
100,   // ` . 
100,   // ` / 
100,   // ` 0 
100,   // ` 1 
100,   // ` 2 
100,   // ` 3 
0,   // ` 4 
100,   // ` 5 
100,   // ` 6 
40,   // ` 7 
100,   // ` 8 
100,   // ` 9 
100,   // ` : 
100,   // ` ; 
100,   // ` < 
100,   // ` = 
100,   // ` > 
100,   // ` ? 
100,   // ` @ 
100,   // ` A 
100,   // ` B 
100,   // ` C 
100,   // ` D 
100,   // ` E 
100,   // ` F 
100,   // ` G 
100,   // ` H 
100,   // ` I 
100,   // ` J 
100,   // ` K 
100,   // ` L 
100,   // ` M 
100,   // ` N 
100,   // ` O 
100,   // ` P 
100,   // ` Q 
100,   // ` R 
100,   // ` S 
100,   // ` T 
100,   // ` U 
100,   // ` V 
100,   // ` W 
100,   // ` X 
100,   // ` Y 
100,   // ` Z 
100,   // ` [ 
100,   // ` \ 
100,   // ` ] 
100,   // ` ^ 
100,   // ` _ 
100,   // ` ` 
85,   // ` a 
53,   // ` b 
100,   // ` c 
100,   // ` d 
100,   // ` e 
100,   // ` f 
100,   // ` g 
100,   // ` h 
100,   // ` i 
100,   // ` j 
100,   // ` k 
100,   // ` l 
100,   // ` m 
100,   // ` n 
100,   // ` o 
100,   // ` p 
100,   // ` q 
100,   // ` r 
100,   // ` s 
100,   // ` t 
100,   // ` u 
100,   // ` v 
100,   // ` w 
100,   // ` x 
100,   // ` y 
100,   // ` z 
100,   // ` { 
100,   // ` | 
100,   // ` } 
100,   // ` ~ 
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
10, 
76,   // a ! 
100,   // a " 
100,   // a # 
100,   // a $ 
100,   // a % 
100,   // a & 
27,   // a ' 
100,   // a ( 
66,   // a ) 
100,   // a * 
100,   // a + 
8,   // a , 
58,   // a - 
31,   // a . 
91,   // a / 
100,   // a 0 
100,   // a 1 
100,   // a 2 
100,   // a 3 
100,   // a 4 
100,   // a 5 
100,   // a 6 
100,   // a 7 
100,   // a 8 
100,   // a 9 
63,   // a : 
50,   // a ; 
100,   // a < 
100,   // a = 
100,   // a > 
20,   // a ? 
100,   // a @ 
100,   // a A 
100,   // a B 
100,   // a C 
100,   // a D 
100,   // a E 
100,   // a F 
100,   // a G 
100,   // a H 
100,   // a I 
100,   // a J 
100,   // a K 
100,   // a L 
100,   // a M 
100,   // a N 
100,   // a O 
100,   // a P 
100,   // a Q 
100,   // a R 
100,   // a S 
100,   // a T 
100,   // a U 
100,   // a V 
100,   // a W 
100,   // a X 
100,   // a Y 
100,   // a Z 
100,   // a [ 
100,   // a \ 
100,   // a ] 
100,   // a ^ 
100,   // a _ 
100,   // a ` 
26,   // a a 
3,   // a b 
4,   // a c 
6,   // a d 
15,   // a e 
6,   // a f 
5,   // a g 
14,   // a h 
6,   // a i 
1,   // a j 
7,   // a k 
4,   // a l 
6,   // a m 
6,   // a n 
13,   // a o 
3,   // a p 
3,   // a q 
6,   // a r 
6,   // a s 
4,   // a t 
8,   // a u 
10,   // a v 
9,   // a w 
6,   // a x 
7,   // a y 
4,   // a z 
100,   // a { 
100,   // a | 
100,   // a } 
100,   // a ~ 
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
12, 
100,   // b ! 
100,   // b " 
100,   // b # 
100,   // b $ 
100,   // b % 
100,   // b & 
100,   // b ' 
100,   // b ( 
16,   // b ) 
100,   // b * 
100,   // b + 
71,   // b , 
85,   // b - 
38,   // b . 
70,   // b / 
100,   // b 0 
100,   // b 1 
100,   // b 2 
100,   // b 3 
100,   // b 4 
100,   // b 5 
100,   // b 6 
100,   // b 7 
100,   // b 8 
100,   // b 9 
100,   // b : 
37,   // b ; 
100,   // b < 
100,   // b = 
100,   // b > 
100,   // b ? 
100,   // b @ 
100,   // b A 
100,   // b B 
100,   // b C 
100,   // b D 
100,   // b E 
100,   // b F 
100,   // b G 
100,   // b H 
100,   // b I 
100,   // b J 
100,   // b K 
100,   // b L 
100,   // b M 
100,   // b N 
100,   // b O 
100,   // b P 
100,   // b Q 
100,   // b R 
100,   // b S 
100,   // b T 
100,   // b U 
100,   // b V 
100,   // b W 
100,   // b X 
100,   // b Y 
100,   // b Z 
100,   // b [ 
100,   // b \ 
100,   // b ] 
100,   // b ^ 
100,   // b _ 
100,   // b ` 
8,   // b a 
4,   // b b 
4,   // b c 
2,   // b d 
5,   // b e 
23,   // b f 
2,   // b g 
4,   // b h 
5,   // b i 
1,   // b j 
21,   // b k 
2,   // b l 
2,   // b m 
4,   // b n 
5,   // b o 
7,   // b p 
100,   // b q 
4,   // b r 
6,   // b s 
3,   // b t 
6,   // b u 
3,   // b v 
4,   // b w 
100,   // b x 
4,   // b y 
62,   // b z 
100,   // b { 
100,   // b | 
100,   // b } 
100,   // b ~ 
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
5, 
100,   // c ! 
46,   // c " 
100,   // c # 
100,   // c $ 
100,   // c % 
100,   // c & 
100,   // c ' 
100,   // c ( 
65,   // c ) 
100,   // c * 
100,   // c + 
17,   // c , 
33,   // c - 
50,   // c . 
76,   // c / 
100,   // c 0 
100,   // c 1 
100,   // c 2 
100,   // c 3 
100,   // c 4 
100,   // c 5 
100,   // c 6 
100,   // c 7 
100,   // c 8 
100,   // c 9 
100,   // c : 
43,   // c ; 
100,   // c < 
100,   // c = 
100,   // c > 
100,   // c ? 
100,   // c @ 
1,   // c A 
100,   // c B 
2,   // c C 
1,   // c D 
100,   // c E 
100,   // c F 
22,   // c G 
100,   // c H 
100,   // c I 
100,   // c J 
1,   // c K 
1,   // c L 
2,   // c M 
0,   // c N 
100,   // c O 
100,   // c P 
0,   // c Q 
0,   // c R 
100,   // c S 
100,   // c T 
100,   // c U 
100,   // c V 
0,   // c W 
100,   // c X 
100,   // c Y 
100,   // c Z 
100,   // c [ 
100,   // c \ 
100,   // c ] 
100,   // c ^ 
100,   // c _ 
100,   // c ` 
3,   // c a 
100,   // c b 
2,   // c c 
35,   // c d 
3,   // c e 
100,   // c f 
57,   // c g 
4,   // c h 
2,   // c i 
100,   // c j 
4,   // c k 
3,   // c l 
29,   // c m 
22,   // c n 
3,   // c o 
100,   // c p 
1,   // c q 
2,   // c r 
8,   // c s 
2,   // c t 
3,   // c u 
50,   // c v 
100,   // c w 
100,   // c x 
2,   // c y 
0,   // c z 
100,   // c { 
100,   // c | 
100,   // c } 
100,   // c ~ 
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
3, 
41,   // d ! 
32,   // d " 
100,   // d # 
100,   // d $ 
100,   // d % 
100,   // d & 
41,   // d ' 
100,   // d ( 
59,   // d ) 
100,   // d * 
100,   // d + 
17,   // d , 
13,   // d - 
29,   // d . 
80,   // d / 
100,   // d 0 
100,   // d 1 
100,   // d 2 
100,   // d 3 
100,   // d 4 
100,   // d 5 
100,   // d 6 
100,   // d 7 
100,   // d 8 
100,   // d 9 
60,   // d : 
28,   // d ; 
100,   // d < 
100,   // d = 
100,   // d > 
38,   // d ? 
100,   // d @ 
100,   // d A 
42,   // d B 
100,   // d C 
100,   // d D 
100,   // d E 
100,   // d F 
100,   // d G 
100,   // d H 
100,   // d I 
100,   // d J 
100,   // d K 
100,   // d L 
100,   // d M 
100,   // d N 
100,   // d O 
100,   // d P 
100,   // d Q 
100,   // d R 
100,   // d S 
100,   // d T 
100,   // d U 
100,   // d V 
100,   // d W 
100,   // d X 
100,   // d Y 
100,   // d Z 
100,   // d [ 
100,   // d \ 
100,   // d ] 
100,   // d ^ 
100,   // d _ 
100,   // d ` 
6,   // d a 
6,   // d b 
3,   // d c 
4,   // d d 
3,   // d e 
6,   // d f 
2,   // d g 
9,   // d h 
3,   // d i 
1,   // d j 
14,   // d k 
7,   // d l 
5,   // d m 
4,   // d n 
6,   // d o 
7,   // d p 
5,   // d q 
2,   // d r 
7,   // d s 
8,   // d t 
5,   // d u 
2,   // d v 
2,   // d w 
100,   // d x 
5,   // d y 
9,   // d z 
100,   // d { 
100,   // d | 
100,   // d } 
100,   // d ~ 
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
4, 
12,   // e ! 
23,   // e " 
100,   // e # 
100,   // e $ 
100,   // e % 
100,   // e & 
34,   // e ' 
100,   // e ( 
30,   // e ) 
100,   // e * 
100,   // e + 
14,   // e , 
17,   // e - 
25,   // e . 
92,   // e / 
100,   // e 0 
100,   // e 1 
100,   // e 2 
100,   // e 3 
100,   // e 4 
100,   // e 5 
100,   // e 6 
100,   // e 7 
100,   // e 8 
100,   // e 9 
29,   // e : 
33,   // e ; 
100,   // e < 
100,   // e = 
100,   // e > 
19,   // e ? 
0,   // e @ 
100,   // e A 
100,   // e B 
100,   // e C 
100,   // e D 
100,   // e E 
100,   // e F 
100,   // e G 
100,   // e H 
100,   // e I 
100,   // e J 
100,   // e K 
100,   // e L 
100,   // e M 
100,   // e N 
100,   // e O 
41,   // e P 
100,   // e Q 
100,   // e R 
100,   // e S 
100,   // e T 
100,   // e U 
100,   // e V 
100,   // e W 
100,   // e X 
100,   // e Y 
100,   // e Z 
100,   // e [ 
100,   // e \ 
51,   // e ] 
100,   // e ^ 
100,   // e _ 
100,   // e ` 
5,   // e a 
4,   // e b 
2,   // e c 
3,   // e d 
7,   // e e 
3,   // e f 
3,   // e g 
4,   // e h 
4,   // e i 
1,   // e j 
6,   // e k 
4,   // e l 
4,   // e m 
5,   // e n 
5,   // e o 
3,   // e p 
1,   // e q 
3,   // e r 
5,   // e s 
5,   // e t 
3,   // e u 
4,   // e v 
4,   // e w 
1,   // e x 
6,   // e y 
5,   // e z 
100,   // e { 
100,   // e | 
100,   // e } 
100,   // e ~ 
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
3, 
2,   // f ! 
36,   // f " 
100,   // f # 
100,   // f $ 
100,   // f % 
100,   // f & 
82,   // f ' 
100,   // f ( 
33,   // f ) 
100,   // f * 
100,   // f + 
24,   // f , 
21,   // f - 
65,   // f . 
79,   // f / 
100,   // f 0 
100,   // f 1 
100,   // f 2 
100,   // f 3 
100,   // f 4 
100,   // f 5 
100,   // f 6 
100,   // f 7 
100,   // f 8 
100,   // f 9 
100,   // f : 
100,   // f ; 
100,   // f < 
100,   // f = 
100,   // f > 
38,   // f ? 
100,   // f @ 
100,   // f A 
100,   // f B 
100,   // f C 
100,   // f D 
100,   // f E 
100,   // f F 
100,   // f G 
100,   // f H 
100,   // f I 
100,   // f J 
100,   // f K 
100,   // f L 
100,   // f M 
100,   // f N 
100,   // f O 
100,   // f P 
100,   // f Q 
100,   // f R 
100,   // f S 
100,   // f T 
100,   // f U 
100,   // f V 
100,   // f W 
100,   // f X 
100,   // f Y 
100,   // f Z 
100,   // f [ 
100,   // f \ 
100,   // f ] 
100,   // f ^ 
100,   // f _ 
100,   // f ` 
8,   // f a 
2,   // f b 
4,   // f c 
27,   // f d 
5,   // f e 
3,   // f f 
6,   // f g 
5,   // f h 
3,   // f i 
1,   // f j 
9,   // f k 
4,   // f l 
66,   // f m 
74,   // f n 
4,   // f o 
28,   // f p 
100,   // f q 
3,   // f r 
7,   // f s 
7,   // f t 
6,   // f u 
100,   // f v 
16,   // f w 
100,   // f x 
2,   // f y 
100,   // f z 
100,   // f { 
100,   // f | 
100,   // f } 
100,   // f ~ 
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
4, 
100,   // g ! 
100,   // g " 
100,   // g # 
100,   // g $ 
100,   // g % 
100,   // g & 
62,   // g ' 
100,   // g ( 
88,   // g ) 
100,   // g * 
100,   // g + 
30,   // g , 
45,   // g - 
45,   // g . 
100,   // g / 
100,   // g 0 
100,   // g 1 
100,   // g 2 
100,   // g 3 
100,   // g 4 
100,   // g 5 
100,   // g 6 
100,   // g 7 
100,   // g 8 
100,   // g 9 
59,   // g : 
54,   // g ; 
100,   // g < 
100,   // g = 
100,   // g > 
28,   // g ? 
100,   // g @ 
100,   // g A 
100,   // g B 
100,   // g C 
100,   // g D 
100,   // g E 
100,   // g F 
100,   // g G 
100,   // g H 
100,   // g I 
100,   // g J 
100,   // g K 
100,   // g L 
100,   // g M 
100,   // g N 
100,   // g O 
100,   // g P 
100,   // g Q 
100,   // g R 
100,   // g S 
100,   // g T 
100,   // g U 
100,   // g V 
100,   // g W 
100,   // g X 
100,   // g Y 
100,   // g Z 
100,   // g [ 
100,   // g \ 
100,   // g ] 
100,   // g ^ 
100,   // g _ 
100,   // g ` 
4,   // g a 
3,   // g b 
12,   // g c 
15,   // g d 
4,   // g e 
4,   // g f 
3,   // g g 
2,   // g h 
3,   // g i 
11,   // g j 
24,   // g k 
3,   // g l 
6,   // g m 
2,   // g n 
6,   // g o 
15,   // g p 
100,   // g q 
2,   // g r 
8,   // g s 
1,   // g t 
6,   // g u 
23,   // g v 
4,   // g w 
100,   // g x 
5,   // g y 
3,   // g z 
100,   // g { 
100,   // g | 
100,   // g } 
100,   // g ~ 
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
5, 
16,   // h ! 
73,   // h " 
100,   // h # 
100,   // h $ 
100,   // h % 
100,   // h & 
47,   // h ' 
100,   // h ( 
36,   // h ) 
100,   // h * 
100,   // h + 
22,   // h , 
13,   // h - 
27,   // h . 
81,   // h / 
100,   // h 0 
100,   // h 1 
100,   // h 2 
100,   // h 3 
100,   // h 4 
100,   // h 5 
100,   // h 6 
100,   // h 7 
100,   // h 8 
100,   // h 9 
100,   // h : 
23,   // h ; 
100,   // h < 
100,   // h = 
100,   // h > 
13,   // h ? 
100,   // h @ 
100,   // h A 
100,   // h B 
100,   // h C 
28,   // h D 
100,   // h E 
100,   // h F 
100,   // h G 
100,   // h H 
100,   // h I 
100,   // h J 
100,   // h K 
100,   // h L 
100,   // h M 
100,   // h N 
100,   // h O 
100,   // h P 
100,   // h Q 
100,   // h R 
100,   // h S 
100,   // h T 
100,   // h U 
100,   // h V 
100,   // h W 
100,   // h X 
100,   // h Y 
100,   // h Z 
100,   // h [ 
100,   // h \ 
100,   // h ] 
100,   // h ^ 
100,   // h _ 
100,   // h ` 
5,   // h a 
3,   // h b 
5,   // h c 
5,   // h d 
3,   // h e 
1,   // h f 
33,   // h g 
0,   // h h 
5,   // h i 
2,   // h j 
3,   // h k 
2,   // h l 
5,   // h m 
3,   // h n 
5,   // h o 
4,   // h p 
1,   // h q 
6,   // h r 
9,   // h s 
1,   // h t 
10,   // h u 
9,   // h v 
4,   // h w 
100,   // h x 
7,   // h y 
100,   // h z 
100,   // h { 
100,   // h | 
100,   // h } 
100,   // h ~ 
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
16, 
27,   // i ! 
62,   // i " 
100,   // i # 
100,   // i $ 
100,   // i % 
100,   // i & 
100,   // i ' 
100,   // i ( 
34,   // i ) 
100,   // i * 
100,   // i + 
26,   // i , 
52,   // i - 
99,   // i . 
100,   // i / 
100,   // i 0 
100,   // i 1 
100,   // i 2 
100,   // i 3 
100,   // i 4 
100,   // i 5 
100,   // i 6 
100,   // i 7 
100,   // i 8 
100,   // i 9 
100,   // i : 
100,   // i ; 
100,   // i < 
100,   // i = 
100,   // i > 
100,   // i ? 
100,   // i @ 
100,   // i A 
100,   // i B 
100,   // i C 
100,   // i D 
100,   // i E 
100,   // i F 
100,   // i G 
100,   // i H 
100,   // i I 
100,   // i J 
100,   // i K 
100,   // i L 
0,   // i M 
100,   // i N 
100,   // i O 
100,   // i P 
100,   // i Q 
100,   // i R 
100,   // i S 
100,   // i T 
100,   // i U 
100,   // i V 
100,   // i W 
100,   // i X 
100,   // i Y 
100,   // i Z 
100,   // i [ 
100,   // i \ 
100,   // i ] 
100,   // i ^ 
100,   // i _ 
100,   // i ` 
4,   // i a 
3,   // i b 
2,   // i c 
4,   // i d 
4,   // i e 
2,   // i f 
3,   // i g 
9,   // i h 
43,   // i i 
4,   // i j 
6,   // i k 
4,   // i l 
4,   // i m 
3,   // i n 
2,   // i o 
3,   // i p 
1,   // i q 
4,   // i r 
4,   // i s 
5,   // i t 
2,   // i u 
3,   // i v 
2,   // i w 
3,   // i x 
7,   // i y 
1,   // i z 
100,   // i { 
100,   // i | 
100,   // i } 
100,   // i ~ 
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
0, 
100,   // j ! 
100,   // j " 
100,   // j # 
100,   // j $ 
100,   // j % 
100,   // j & 
100,   // j ' 
100,   // j ( 
100,   // j ) 
100,   // j * 
100,   // j + 
100,   // j , 
100,   // j - 
100,   // j . 
100,   // j / 
100,   // j 0 
100,   // j 1 
0,   // j 2 
100,   // j 3 
100,   // j 4 
100,   // j 5 
100,   // j 6 
100,   // j 7 
100,   // j 8 
100,   // j 9 
100,   // j : 
100,   // j ; 
100,   // j < 
100,   // j = 
100,   // j > 
100,   // j ? 
100,   // j @ 
100,   // j A 
100,   // j B 
100,   // j C 
100,   // j D 
100,   // j E 
100,   // j F 
100,   // j G 
100,   // j H 
100,   // j I 
100,   // j J 
100,   // j K 
100,   // j L 
100,   // j M 
100,   // j N 
100,   // j O 
100,   // j P 
100,   // j Q 
100,   // j R 
100,   // j S 
100,   // j T 
100,   // j U 
100,   // j V 
100,   // j W 
100,   // j X 
100,   // j Y 
100,   // j Z 
100,   // j [ 
100,   // j \ 
100,   // j ] 
100,   // j ^ 
100,   // j _ 
100,   // j ` 
3,   // j a 
100,   // j b 
100,   // j c 
100,   // j d 
3,   // j e 
100,   // j f 
100,   // j g 
100,   // j h 
18,   // j i 
100,   // j j 
100,   // j k 
100,   // j l 
100,   // j m 
100,   // j n 
3,   // j o 
0,   // j p 
100,   // j q 
0,   // j r 
100,   // j s 
100,   // j t 
1,   // j u 
100,   // j v 
100,   // j w 
100,   // j x 
100,   // j y 
100,   // j z 
100,   // j { 
100,   // j | 
100,   // j } 
100,   // j ~ 
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
8, 
7,   // k ! 
66,   // k " 
100,   // k # 
100,   // k $ 
100,   // k % 
100,   // k & 
40,   // k ' 
100,   // k ( 
26,   // k ) 
100,   // k * 
100,   // k + 
13,   // k , 
27,   // k - 
25,   // k . 
74,   // k / 
100,   // k 0 
100,   // k 1 
100,   // k 2 
100,   // k 3 
100,   // k 4 
100,   // k 5 
100,   // k 6 
100,   // k 7 
100,   // k 8 
100,   // k 9 
26,   // k : 
52,   // k ; 
100,   // k < 
100,   // k = 
100,   // k > 
22,   // k ? 
100,   // k @ 
100,   // k A 
100,   // k B 
100,   // k C 
100,   // k D 
100,   // k E 
100,   // k F 
100,   // k G 
0,   // k H 
100,   // k I 
0,   // k J 
100,   // k K 
100,   // k L 
100,   // k M 
100,   // k N 
100,   // k O 
100,   // k P 
100,   // k Q 
100,   // k R 
100,   // k S 
100,   // k T 
100,   // k U 
0,   // k V 
4,   // k W 
100,   // k X 
100,   // k Y 
100,   // k Z 
100,   // k [ 
100,   // k \ 
100,   // k ] 
100,   // k ^ 
100,   // k _ 
100,   // k ` 
6,   // k a 
2,   // k b 
1,   // k c 
8,   // k d 
5,   // k e 
2,   // k f 
7,   // k g 
4,   // k h 
5,   // k i 
2,   // k j 
3,   // k k 
3,   // k l 
6,   // k m 
3,   // k n 
9,   // k o 
1,   // k p 
100,   // k q 
2,   // k r 
8,   // k s 
2,   // k t 
6,   // k u 
10,   // k v 
9,   // k w 
100,   // k x 
9,   // k y 
100,   // k z 
100,   // k { 
100,   // k | 
100,   // k } 
100,   // k ~ 
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
5, 
21,   // l ! 
42,   // l " 
100,   // l # 
100,   // l $ 
100,   // l % 
100,   // l & 
50,   // l ' 
100,   // l ( 
40,   // l ) 
100,   // l * 
100,   // l + 
23,   // l , 
18,   // l - 
28,   // l . 
100,   // l / 
100,   // l 0 
100,   // l 1 
100,   // l 2 
100,   // l 3 
100,   // l 4 
100,   // l 5 
100,   // l 6 
100,   // l 7 
100,   // l 8 
100,   // l 9 
50,   // l : 
47,   // l ; 
100,   // l < 
100,   // l = 
100,   // l > 
100,   // l ? 
100,   // l @ 
100,   // l A 
100,   // l B 
100,   // l C 
100,   // l D 
100,   // l E 
100,   // l F 
100,   // l G 
100,   // l H 
100,   // l I 
100,   // l J 
100,   // l K 
100,   // l L 
100,   // l M 
100,   // l N 
100,   // l O 
100,   // l P 
100,   // l Q 
100,   // l R 
100,   // l S 
100,   // l T 
100,   // l U 
100,   // l V 
100,   // l W 
100,   // l X 
100,   // l Y 
100,   // l Z 
100,   // l [ 
100,   // l \ 
100,   // l ] 
100,   // l ^ 
100,   // l _ 
100,   // l ` 
4,   // l a 
6,   // l b 
3,   // l c 
2,   // l d 
5,   // l e 
4,   // l f 
3,   // l g 
5,   // l h 
3,   // l i 
2,   // l j 
5,   // l k 
4,   // l l 
3,   // l m 
1,   // l n 
4,   // l o 
2,   // l p 
2,   // l q 
3,   // l r 
5,   // l s 
5,   // l t 
3,   // l u 
3,   // l v 
2,   // l w 
32,   // l x 
3,   // l y 
6,   // l z 
100,   // l { 
100,   // l | 
100,   // l } 
100,   // l ~ 
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
13, 
20,   // m ! 
85,   // m " 
100,   // m # 
100,   // m $ 
100,   // m % 
100,   // m & 
81,   // m ' 
100,   // m ( 
82,   // m ) 
100,   // m * 
100,   // m + 
23,   // m , 
38,   // m - 
30,   // m . 
75,   // m / 
100,   // m 0 
100,   // m 1 
100,   // m 2 
100,   // m 3 
100,   // m 4 
100,   // m 5 
100,   // m 6 
100,   // m 7 
100,   // m 8 
100,   // m 9 
43,   // m : 
50,   // m ; 
100,   // m < 
100,   // m = 
100,   // m > 
32,   // m ? 
100,   // m @ 
100,   // m A 
100,   // m B 
100,   // m C 
100,   // m D 
100,   // m E 
100,   // m F 
100,   // m G 
100,   // m H 
100,   // m I 
100,   // m J 
100,   // m K 
100,   // m L 
100,   // m M 
100,   // m N 
100,   // m O 
100,   // m P 
100,   // m Q 
100,   // m R 
100,   // m S 
100,   // m T 
100,   // m U 
30,   // m V 
100,   // m W 
100,   // m X 
100,   // m Y 
100,   // m Z 
100,   // m [ 
100,   // m \ 
100,   // m ] 
100,   // m ^ 
100,   // m _ 
100,   // m ` 
5,   // m a 
1,   // m b 
8,   // m c 
14,   // m d 
5,   // m e 
3,   // m f 
69,   // m g 
7,   // m h 
4,   // m i 
1,   // m j 
8,   // m k 
5,   // m l 
4,   // m m 
7,   // m n 
5,   // m o 
2,   // m p 
7,   // m q 
6,   // m r 
10,   // m s 
40,   // m t 
4,   // m u 
1,   // m v 
13,   // m w 
1,   // m x 
8,   // m y 
100,   // m z 
100,   // m { 
100,   // m | 
100,   // m } 
100,   // m ~ 
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
10, 
100,   // n ! 
48,   // n " 
100,   // n # 
100,   // n $ 
100,   // n % 
100,   // n & 
20,   // n ' 
100,   // n ( 
49,   // n ) 
100,   // n * 
100,   // n + 
10,   // n , 
27,   // n - 
27,   // n . 
88,   // n / 
100,   // n 0 
100,   // n 1 
100,   // n 2 
100,   // n 3 
100,   // n 4 
100,   // n 5 
100,   // n 6 
100,   // n 7 
100,   // n 8 
100,   // n 9 
47,   // n : 
42,   // n ; 
100,   // n < 
100,   // n = 
100,   // n > 
41,   // n ? 
100,   // n @ 
100,   // n A 
100,   // n B 
100,   // n C 
100,   // n D 
100,   // n E 
100,   // n F 
100,   // n G 
100,   // n H 
100,   // n I 
100,   // n J 
100,   // n K 
100,   // n L 
100,   // n M 
100,   // n N 
100,   // n O 
100,   // n P 
100,   // n Q 
100,   // n R 
100,   // n S 
100,   // n T 
100,   // n U 
100,   // n V 
100,   // n W 
100,   // n X 
100,   // n Y 
100,   // n Z 
100,   // n [ 
100,   // n \ 
91,   // n ] 
100,   // n ^ 
100,   // n _ 
100,   // n ` 
6,   // n a 
5,   // n b 
3,   // n c 
3,   // n d 
7,   // n e 
2,   // n f 
2,   // n g 
5,   // n h 
5,   // n i 
1,   // n j 
7,   // n k 
6,   // n l 
4,   // n m 
7,   // n n 
5,   // n o 
7,   // n p 
2,   // n q 
6,   // n r 
8,   // n s 
4,   // n t 
4,   // n u 
3,   // n v 
3,   // n w 
5,   // n x 
10,   // n y 
3,   // n z 
100,   // n { 
100,   // n | 
100,   // n } 
100,   // n ~ 
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
7, 
23,   // o ! 
21,   // o " 
100,   // o # 
100,   // o $ 
100,   // o % 
100,   // o & 
48,   // o ' 
100,   // o ( 
70,   // o ) 
100,   // o * 
100,   // o + 
22,   // o , 
33,   // o - 
32,   // o . 
92,   // o / 
100,   // o 0 
100,   // o 1 
100,   // o 2 
100,   // o 3 
100,   // o 4 
100,   // o 5 
100,   // o 6 
100,   // o 7 
100,   // o 8 
100,   // o 9 
93,   // o : 
43,   // o ; 
100,   // o < 
100,   // o = 
100,   // o > 
56,   // o ? 
100,   // o @ 
100,   // o A 
100,   // o B 
100,   // o C 
100,   // o D 
100,   // o E 
100,   // o F 
100,   // o G 
100,   // o H 
100,   // o I 
100,   // o J 
100,   // o K 
100,   // o L 
100,   // o M 
100,   // o N 
100,   // o O 
100,   // o P 
100,   // o Q 
100,   // o R 
100,   // o S 
100,   // o T 
100,   // o U 
100,   // o V 
100,   // o W 
100,   // o X 
100,   // o Y 
100,   // o Z 
100,   // o [ 
100,   // o \ 
100,   // o ] 
100,   // o ^ 
100,   // o _ 
100,   // o ` 
8,   // o a 
4,   // o b 
4,   // o c 
4,   // o d 
16,   // o e 
2,   // o f 
2,   // o g 
8,   // o h 
6,   // o i 
2,   // o j 
6,   // o k 
3,   // o l 
3,   // o m 
4,   // o n 
5,   // o o 
3,   // o p 
1,   // o q 
5,   // o r 
5,   // o s 
6,   // o t 
3,   // o u 
5,   // o v 
4,   // o w 
2,   // o x 
9,   // o y 
11,   // o z 
100,   // o { 
100,   // o | 
100,   // o } 
100,   // o ~ 
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
10, 
2,   // p ! 
100,   // p " 
100,   // p # 
100,   // p $ 
100,   // p % 
100,   // p & 
80,   // p ' 
100,   // p ( 
38,   // p ) 
100,   // p * 
100,   // p + 
16,   // p , 
35,   // p - 
25,   // p . 
95,   // p / 
100,   // p 0 
100,   // p 1 
100,   // p 2 
100,   // p 3 
100,   // p 4 
100,   // p 5 
100,   // p 6 
100,   // p 7 
100,   // p 8 
100,   // p 9 
87,   // p : 
40,   // p ; 
100,   // p < 
100,   // p = 
100,   // p > 
12,   // p ? 
100,   // p @ 
100,   // p A 
100,   // p B 
100,   // p C 
100,   // p D 
100,   // p E 
100,   // p F 
100,   // p G 
18,   // p H 
100,   // p I 
100,   // p J 
100,   // p K 
100,   // p L 
100,   // p M 
100,   // p N 
100,   // p O 
100,   // p P 
100,   // p Q 
100,   // p R 
100,   // p S 
11,   // p T 
100,   // p U 
100,   // p V 
100,   // p W 
100,   // p X 
100,   // p Y 
100,   // p Z 
100,   // p [ 
100,   // p \ 
100,   // p ] 
100,   // p ^ 
100,   // p _ 
100,   // p ` 
4,   // p a 
2,   // p b 
6,   // p c 
3,   // p d 
3,   // p e 
4,   // p f 
5,   // p g 
1,   // p h 
4,   // p i 
10,   // p j 
2,   // p k 
2,   // p l 
5,   // p m 
4,   // p n 
3,   // p o 
2,   // p p 
100,   // p q 
2,   // p r 
11,   // p s 
2,   // p t 
3,   // p u 
100,   // p v 
1,   // p w 
100,   // p x 
2,   // p y 
1,   // p z 
100,   // p { 
100,   // p | 
100,   // p } 
100,   // p ~ 
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
4, 
100,   // q ! 
100,   // q " 
100,   // q # 
100,   // q $ 
100,   // q % 
100,   // q & 
16,   // q ' 
100,   // q ( 
25,   // q ) 
100,   // q * 
100,   // q + 
100,   // q , 
100,   // q - 
23,   // q . 
100,   // q / 
100,   // q 0 
100,   // q 1 
100,   // q 2 
100,   // q 3 
100,   // q 4 
100,   // q 5 
100,   // q 6 
100,   // q 7 
100,   // q 8 
100,   // q 9 
100,   // q : 
100,   // q ; 
100,   // q < 
100,   // q = 
100,   // q > 
100,   // q ? 
100,   // q @ 
100,   // q A 
100,   // q B 
100,   // q C 
100,   // q D 
100,   // q E 
100,   // q F 
100,   // q G 
100,   // q H 
100,   // q I 
100,   // q J 
100,   // q K 
100,   // q L 
100,   // q M 
100,   // q N 
100,   // q O 
100,   // q P 
100,   // q Q 
100,   // q R 
100,   // q S 
100,   // q T 
100,   // q U 
100,   // q V 
100,   // q W 
100,   // q X 
100,   // q Y 
100,   // q Z 
100,   // q [ 
100,   // q \ 
100,   // q ] 
100,   // q ^ 
100,   // q _ 
100,   // q ` 
100,   // q a 
100,   // q b 
100,   // q c 
100,   // q d 
100,   // q e 
100,   // q f 
100,   // q g 
100,   // q h 
30,   // q i 
100,   // q j 
100,   // q k 
100,   // q l 
100,   // q m 
100,   // q n 
100,   // q o 
100,   // q p 
100,   // q q 
100,   // q r 
100,   // q s 
64,   // q t 
1,   // q u 
100,   // q v 
100,   // q w 
100,   // q x 
100,   // q y 
100,   // q z 
100,   // q { 
100,   // q | 
100,   // q } 
100,   // q ~ 
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
8, 
34,   // r ! 
60,   // r " 
100,   // r # 
100,   // r $ 
100,   // r % 
100,   // r & 
34,   // r ' 
100,   // r ( 
27,   // r ) 
100,   // r * 
100,   // r + 
13,   // r , 
26,   // r - 
33,   // r . 
84,   // r / 
100,   // r 0 
100,   // r 1 
100,   // r 2 
100,   // r 3 
100,   // r 4 
100,   // r 5 
100,   // r 6 
100,   // r 7 
100,   // r 8 
100,   // r 9 
56,   // r : 
36,   // r ; 
100,   // r < 
100,   // r = 
100,   // r > 
27,   // r ? 
0,   // r @ 
100,   // r A 
100,   // r B 
100,   // r C 
100,   // r D 
100,   // r E 
100,   // r F 
100,   // r G 
100,   // r H 
100,   // r I 
100,   // r J 
100,   // r K 
100,   // r L 
100,   // r M 
100,   // r N 
100,   // r O 
100,   // r P 
100,   // r Q 
100,   // r R 
100,   // r S 
100,   // r T 
100,   // r U 
100,   // r V 
100,   // r W 
100,   // r X 
100,   // r Y 
100,   // r Z 
100,   // r [ 
100,   // r \ 
100,   // r ] 
100,   // r ^ 
100,   // r _ 
100,   // r ` 
4,   // r a 
3,   // r b 
4,   // r c 
5,   // r d 
4,   // r e 
2,   // r f 
4,   // r g 
2,   // r h 
3,   // r i 
0,   // r j 
4,   // r k 
5,   // r l 
4,   // r m 
4,   // r n 
3,   // r o 
3,   // r p 
3,   // r q 
4,   // r r 
6,   // r s 
5,   // r t 
4,   // r u 
4,   // r v 
2,   // r w 
11,   // r x 
5,   // r y 
3,   // r z 
100,   // r { 
100,   // r | 
100,   // r } 
100,   // r ~ 
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
5, 
31,   // s ! 
32,   // s " 
100,   // s # 
100,   // s $ 
100,   // s % 
100,   // s & 
51,   // s ' 
100,   // s ( 
25,   // s ) 
100,   // s * 
100,   // s + 
18,   // s , 
43,   // s - 
26,   // s . 
94,   // s / 
100,   // s 0 
100,   // s 1 
100,   // s 2 
3,   // s 3 
100,   // s 4 
100,   // s 5 
100,   // s 6 
100,   // s 7 
100,   // s 8 
100,   // s 9 
44,   // s : 
32,   // s ; 
100,   // s < 
100,   // s = 
100,   // s > 
55,   // s ? 
33,   // s @ 
100,   // s A 
100,   // s B 
66,   // s C 
100,   // s D 
100,   // s E 
100,   // s F 
100,   // s G 
100,   // s H 
100,   // s I 
100,   // s J 
100,   // s K 
100,   // s L 
100,   // s M 
100,   // s N 
100,   // s O 
100,   // s P 
100,   // s Q 
100,   // s R 
100,   // s S 
100,   // s T 
100,   // s U 
100,   // s V 
100,   // s W 
100,   // s X 
100,   // s Y 
100,   // s Z 
100,   // s [ 
100,   // s \ 
100,   // s ] 
100,   // s ^ 
100,   // s _ 
100,   // s ` 
6,   // s a 
4,   // s b 
2,   // s c 
5,   // s d 
4,   // s e 
3,   // s f 
4,   // s g 
6,   // s h 
3,   // s i 
2,   // s j 
4,   // s k 
3,   // s l 
3,   // s m 
4,   // s n 
5,   // s o 
2,   // s p 
2,   // s q 
2,   // s r 
3,   // s s 
3,   // s t 
3,   // s u 
7,   // s v 
4,   // s w 
100,   // s x 
2,   // s y 
100,   // s z 
100,   // s { 
100,   // s | 
100,   // s } 
100,   // s ~ 
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
7, 
15,   // t ! 
68,   // t " 
100,   // t # 
100,   // t $ 
100,   // t % 
100,   // t & 
32,   // t ' 
0,   // t ( 
60,   // t ) 
100,   // t * 
100,   // t + 
24,   // t , 
44,   // t - 
36,   // t . 
100,   // t / 
100,   // t 0 
100,   // t 1 
100,   // t 2 
100,   // t 3 
100,   // t 4 
100,   // t 5 
100,   // t 6 
100,   // t 7 
100,   // t 8 
100,   // t 9 
47,   // t : 
38,   // t ; 
100,   // t < 
100,   // t = 
100,   // t > 
17,   // t ? 
100,   // t @ 
100,   // t A 
100,   // t B 
100,   // t C 
100,   // t D 
100,   // t E 
100,   // t F 
100,   // t G 
100,   // t H 
100,   // t I 
100,   // t J 
100,   // t K 
100,   // t L 
100,   // t M 
100,   // t N 
100,   // t O 
100,   // t P 
100,   // t Q 
100,   // t R 
100,   // t S 
100,   // t T 
100,   // t U 
100,   // t V 
100,   // t W 
100,   // t X 
100,   // t Y 
100,   // t Z 
100,   // t [ 
100,   // t \ 
100,   // t ] 
100,   // t ^ 
100,   // t _ 
100,   // t ` 
5,   // t a 
4,   // t b 
4,   // t c 
11,   // t d 
4,   // t e 
4,   // t f 
3,   // t g 
3,   // t h 
3,   // t i 
7,   // t j 
13,   // t k 
3,   // t l 
5,   // t m 
6,   // t n 
4,   // t o 
7,   // t p 
100,   // t q 
3,   // t r 
6,   // t s 
8,   // t t 
3,   // t u 
13,   // t v 
4,   // t w 
100,   // t x 
4,   // t y 
2,   // t z 
100,   // t { 
100,   // t | 
100,   // t } 
100,   // t ~ 
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
27, 
1,   // u ! 
20,   // u " 
100,   // u # 
100,   // u $ 
100,   // u % 
100,   // u & 
8,   // u ' 
100,   // u ( 
100,   // u ) 
100,   // u * 
100,   // u + 
34,   // u , 
100,   // u - 
32,   // u . 
100,   // u / 
100,   // u 0 
100,   // u 1 
100,   // u 2 
100,   // u 3 
100,   // u 4 
100,   // u 5 
100,   // u 6 
100,   // u 7 
100,   // u 8 
100,   // u 9 
100,   // u : 
100,   // u ; 
100,   // u < 
100,   // u = 
100,   // u > 
2,   // u ? 
100,   // u @ 
100,   // u A 
100,   // u B 
100,   // u C 
100,   // u D 
100,   // u E 
100,   // u F 
100,   // u G 
100,   // u H 
100,   // u I 
100,   // u J 
100,   // u K 
100,   // u L 
100,   // u M 
100,   // u N 
100,   // u O 
100,   // u P 
100,   // u Q 
100,   // u R 
100,   // u S 
100,   // u T 
100,   // u U 
100,   // u V 
100,   // u W 
100,   // u X 
100,   // u Y 
100,   // u Z 
100,   // u [ 
100,   // u \ 
100,   // u ] 
100,   // u ^ 
100,   // u _ 
100,   // u ` 
3,   // u a 
3,   // u b 
3,   // u c 
6,   // u d 
7,   // u e 
3,   // u f 
3,   // u g 
30,   // u h 
3,   // u i 
3,   // u j 
10,   // u k 
3,   // u l 
5,   // u m 
6,   // u n 
3,   // u o 
3,   // u p 
2,   // u q 
4,   // u r 
4,   // u s 
5,   // u t 
4,   // u u 
10,   // u v 
2,   // u w 
2,   // u x 
17,   // u y 
9,   // u z 
100,   // u { 
100,   // u | 
100,   // u } 
100,   // u ~ 
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
28, 
100,   // v ! 
100,   // v " 
100,   // v # 
100,   // v $ 
100,   // v % 
100,   // v & 
100,   // v ' 
100,   // v ( 
100,   // v ) 
100,   // v * 
100,   // v + 
54,   // v , 
100,   // v - 
50,   // v . 
100,   // v / 
100,   // v 0 
100,   // v 1 
100,   // v 2 
100,   // v 3 
100,   // v 4 
100,   // v 5 
100,   // v 6 
100,   // v 7 
100,   // v 8 
100,   // v 9 
100,   // v : 
100,   // v ; 
100,   // v < 
100,   // v = 
100,   // v > 
100,   // v ? 
100,   // v @ 
100,   // v A 
100,   // v B 
100,   // v C 
100,   // v D 
100,   // v E 
100,   // v F 
100,   // v G 
100,   // v H 
100,   // v I 
100,   // v J 
100,   // v K 
100,   // v L 
100,   // v M 
100,   // v N 
100,   // v O 
100,   // v P 
100,   // v Q 
100,   // v R 
100,   // v S 
100,   // v T 
100,   // v U 
100,   // v V 
100,   // v W 
100,   // v X 
100,   // v Y 
100,   // v Z 
100,   // v [ 
100,   // v \ 
100,   // v ] 
100,   // v ^ 
100,   // v _ 
100,   // v ` 
5,   // v a 
100,   // v b 
26,   // v c 
6,   // v d 
4,   // v e 
100,   // v f 
100,   // v g 
33,   // v h 
4,   // v i 
100,   // v j 
100,   // v k 
11,   // v l 
100,   // v m 
0,   // v n 
3,   // v o 
100,   // v p 
100,   // v q 
11,   // v r 
46,   // v s 
100,   // v t 
4,   // v u 
15,   // v v 
100,   // v w 
100,   // v x 
9,   // v y 
100,   // v z 
100,   // v { 
100,   // v | 
100,   // v } 
100,   // v ~ 
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
8, 
7,   // w ! 
70,   // w " 
100,   // w # 
100,   // w $ 
100,   // w % 
100,   // w & 
49,   // w ' 
100,   // w ( 
100,   // w ) 
100,   // w * 
100,   // w + 
16,   // w , 
62,   // w - 
36,   // w . 
67,   // w / 
100,   // w 0 
100,   // w 1 
100,   // w 2 
100,   // w 3 
100,   // w 4 
100,   // w 5 
100,   // w 6 
100,   // w 7 
100,   // w 8 
100,   // w 9 
100,   // w : 
100,   // w ; 
100,   // w < 
100,   // w = 
100,   // w > 
14,   // w ? 
100,   // w @ 
100,   // w A 
100,   // w B 
100,   // w C 
100,   // w D 
100,   // w E 
100,   // w F 
100,   // w G 
100,   // w H 
100,   // w I 
100,   // w J 
100,   // w K 
100,   // w L 
100,   // w M 
100,   // w N 
100,   // w O 
100,   // w P 
100,   // w Q 
100,   // w R 
100,   // w S 
100,   // w T 
100,   // w U 
100,   // w V 
100,   // w W 
100,   // w X 
100,   // w Y 
100,   // w Z 
100,   // w [ 
100,   // w \ 
100,   // w ] 
100,   // w ^ 
100,   // w _ 
100,   // w ` 
5,   // w a 
2,   // w b 
4,   // w c 
11,   // w d 
8,   // w e 
3,   // w f 
4,   // w g 
4,   // w h 
5,   // w i 
100,   // w j 
8,   // w k 
7,   // w l 
18,   // w m 
5,   // w n 
5,   // w o 
4,   // w p 
100,   // w q 
9,   // w r 
10,   // w s 
9,   // w t 
12,   // w u 
100,   // w v 
9,   // w w 
100,   // w x 
17,   // w y 
1,   // w z 
100,   // w { 
100,   // w | 
100,   // w } 
100,   // w ~ 
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
7, 
100,   // x ! 
100,   // x " 
100,   // x # 
100,   // x $ 
100,   // x % 
100,   // x & 
56,   // x ' 
100,   // x ( 
100,   // x ) 
100,   // x * 
100,   // x + 
32,   // x , 
28,   // x - 
23,   // x . 
100,   // x / 
100,   // x 0 
100,   // x 1 
100,   // x 2 
100,   // x 3 
100,   // x 4 
100,   // x 5 
100,   // x 6 
100,   // x 7 
100,   // x 8 
100,   // x 9 
36,   // x : 
62,   // x ; 
100,   // x < 
100,   // x = 
100,   // x > 
100,   // x ? 
100,   // x @ 
100,   // x A 
100,   // x B 
100,   // x C 
100,   // x D 
100,   // x E 
100,   // x F 
100,   // x G 
100,   // x H 
100,   // x I 
100,   // x J 
100,   // x K 
100,   // x L 
100,   // x M 
100,   // x N 
100,   // x O 
100,   // x P 
100,   // x Q 
100,   // x R 
100,   // x S 
100,   // x T 
100,   // x U 
100,   // x V 
100,   // x W 
100,   // x X 
100,   // x Y 
100,   // x Z 
100,   // x [ 
100,   // x \ 
100,   // x ] 
100,   // x ^ 
100,   // x _ 
100,   // x ` 
4,   // x a 
1,   // x b 
2,   // x c 
100,   // x d 
3,   // x e 
1,   // x f 
2,   // x g 
2,   // x h 
2,   // x i 
100,   // x j 
100,   // x k 
15,   // x l 
100,   // x m 
0,   // x n 
5,   // x o 
1,   // x p 
0,   // x q 
100,   // x r 
6,   // x s 
1,   // x t 
2,   // x u 
0,   // x v 
2,   // x w 
9,   // x x 
3,   // x y 
100,   // x z 
100,   // x { 
100,   // x | 
100,   // x } 
100,   // x ~ 
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
4, 
27,   // y ! 
55,   // y " 
100,   // y # 
100,   // y $ 
100,   // y % 
100,   // y & 
27,   // y ' 
100,   // y ( 
56,   // y ) 
100,   // y * 
100,   // y + 
21,   // y , 
16,   // y - 
26,   // y . 
90,   // y / 
100,   // y 0 
100,   // y 1 
100,   // y 2 
100,   // y 3 
100,   // y 4 
100,   // y 5 
100,   // y 6 
100,   // y 7 
100,   // y 8 
100,   // y 9 
16,   // y : 
60,   // y ; 
100,   // y < 
100,   // y = 
100,   // y > 
55,   // y ? 
100,   // y @ 
100,   // y A 
100,   // y B 
100,   // y C 
100,   // y D 
100,   // y E 
100,   // y F 
100,   // y G 
100,   // y H 
100,   // y I 
100,   // y J 
100,   // y K 
100,   // y L 
100,   // y M 
100,   // y N 
100,   // y O 
100,   // y P 
100,   // y Q 
100,   // y R 
100,   // y S 
100,   // y T 
100,   // y U 
100,   // y V 
100,   // y W 
100,   // y X 
100,   // y Y 
100,   // y Z 
100,   // y [ 
100,   // y \ 
100,   // y ] 
100,   // y ^ 
100,   // y _ 
100,   // y ` 
11,   // y a 
3,   // y b 
1,   // y c 
2,   // y d 
6,   // y e 
3,   // y f 
2,   // y g 
6,   // y h 
4,   // y i 
2,   // y j 
22,   // y k 
2,   // y l 
3,   // y m 
3,   // y n 
7,   // y o 
5,   // y p 
100,   // y q 
4,   // y r 
5,   // y s 
4,   // y t 
16,   // y u 
3,   // y v 
3,   // y w 
0,   // y x 
100,   // y y 
4,   // y z 
100,   // y { 
100,   // y | 
100,   // y } 
100,   // y ~ 
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
39, 
100,   // z ! 
100,   // z " 
100,   // z # 
100,   // z $ 
100,   // z % 
100,   // z & 
83,   // z ' 
100,   // z ( 
100,   // z ) 
100,   // z * 
100,   // z + 
14,   // z , 
24,   // z - 
34,   // z . 
100,   // z / 
100,   // z 0 
100,   // z 1 
100,   // z 2 
100,   // z 3 
100,   // z 4 
100,   // z 5 
100,   // z 6 
100,   // z 7 
100,   // z 8 
100,   // z 9 
100,   // z : 
100,   // z ; 
100,   // z < 
100,   // z = 
100,   // z > 
100,   // z ? 
100,   // z @ 
100,   // z A 
100,   // z B 
100,   // z C 
100,   // z D 
100,   // z E 
100,   // z F 
100,   // z G 
100,   // z H 
100,   // z I 
100,   // z J 
100,   // z K 
100,   // z L 
100,   // z M 
100,   // z N 
100,   // z O 
100,   // z P 
100,   // z Q 
100,   // z R 
100,   // z S 
100,   // z T 
100,   // z U 
100,   // z V 
100,   // z W 
100,   // z X 
100,   // z Y 
100,   // z Z 
100,   // z [ 
100,   // z \ 
100,   // z ] 
100,   // z ^ 
100,   // z _ 
100,   // z ` 
2,   // z a 
0,   // z b 
100,   // z c 
100,   // z d 
2,   // z e 
100,   // z f 
0,   // z g 
0,   // z h 
2,   // z i 
100,   // z j 
0,   // z k 
1,   // z l 
5,   // z m 
100,   // z n 
3,   // z o 
26,   // z p 
100,   // z q 
0,   // z r 
100,   // z s 
0,   // z t 
5,   // z u 
0,   // z v 
0,   // z w 
100,   // z x 
5,   // z y 
1,   // z z 
100,   // z { 
100,   // z | 
100,   // z } 
100,   // z ~ 
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // { ! 
100,   // { " 
100,   // { # 
100,   // { $ 
100,   // { % 
100,   // { & 
100,   // { ' 
100,   // { ( 
100,   // { ) 
100,   // { * 
100,   // { + 
100,   // { , 
100,   // { - 
100,   // { . 
100,   // { / 
100,   // { 0 
100,   // { 1 
100,   // { 2 
100,   // { 3 
100,   // { 4 
100,   // { 5 
100,   // { 6 
100,   // { 7 
0,   // { 8 
37,   // { 9 
100,   // { : 
100,   // { ; 
100,   // { < 
100,   // { = 
100,   // { > 
100,   // { ? 
100,   // { @ 
100,   // { A 
100,   // { B 
100,   // { C 
100,   // { D 
100,   // { E 
100,   // { F 
100,   // { G 
100,   // { H 
100,   // { I 
100,   // { J 
100,   // { K 
100,   // { L 
100,   // { M 
100,   // { N 
100,   // { O 
100,   // { P 
100,   // { Q 
100,   // { R 
100,   // { S 
100,   // { T 
100,   // { U 
100,   // { V 
100,   // { W 
100,   // { X 
100,   // { Y 
100,   // { Z 
100,   // { [ 
100,   // { \ 
100,   // { ] 
100,   // { ^ 
100,   // { _ 
100,   // { ` 
100,   // { a 
100,   // { b 
100,   // { c 
100,   // { d 
100,   // { e 
100,   // { f 
100,   // { g 
100,   // { h 
100,   // { i 
100,   // { j 
100,   // { k 
100,   // { l 
100,   // { m 
100,   // { n 
100,   // { o 
100,   // { p 
100,   // { q 
100,   // { r 
100,   // { s 
100,   // { t 
100,   // { u 
100,   // { v 
100,   // { w 
100,   // { x 
100,   // { y 
100,   // { z 
100,   // { { 
100,   // { | 
100,   // { } 
100,   // { ~ 
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // | ! 
100,   // | " 
100,   // | # 
100,   // | $ 
100,   // | % 
100,   // | & 
100,   // | ' 
100,   // | ( 
100,   // | ) 
100,   // | * 
100,   // | + 
100,   // | , 
100,   // | - 
100,   // | . 
100,   // | / 
100,   // | 0 
100,   // | 1 
100,   // | 2 
100,   // | 3 
100,   // | 4 
100,   // | 5 
100,   // | 6 
100,   // | 7 
100,   // | 8 
100,   // | 9 
100,   // | : 
100,   // | ; 
100,   // | < 
100,   // | = 
100,   // | > 
100,   // | ? 
100,   // | @ 
100,   // | A 
100,   // | B 
100,   // | C 
100,   // | D 
100,   // | E 
100,   // | F 
100,   // | G 
100,   // | H 
100,   // | I 
100,   // | J 
100,   // | K 
100,   // | L 
100,   // | M 
100,   // | N 
100,   // | O 
100,   // | P 
100,   // | Q 
100,   // | R 
100,   // | S 
100,   // | T 
100,   // | U 
100,   // | V 
100,   // | W 
100,   // | X 
100,   // | Y 
100,   // | Z 
100,   // | [ 
100,   // | \ 
100,   // | ] 
100,   // | ^ 
100,   // | _ 
100,   // | ` 
100,   // | a 
100,   // | b 
100,   // | c 
100,   // | d 
100,   // | e 
100,   // | f 
100,   // | g 
100,   // | h 
100,   // | i 
100,   // | j 
100,   // | k 
100,   // | l 
100,   // | m 
100,   // | n 
100,   // | o 
100,   // | p 
100,   // | q 
100,   // | r 
100,   // | s 
100,   // | t 
100,   // | u 
100,   // | v 
100,   // | w 
100,   // | x 
100,   // | y 
100,   // | z 
100,   // | { 
100,   // | | 
100,   // | } 
100,   // | ~ 
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // } ! 
100,   // } " 
100,   // } # 
100,   // } $ 
100,   // } % 
100,   // } & 
100,   // } ' 
100,   // } ( 
100,   // } ) 
100,   // } * 
100,   // } + 
100,   // } , 
100,   // } - 
100,   // } . 
100,   // } / 
100,   // } 0 
100,   // } 1 
100,   // } 2 
100,   // } 3 
100,   // } 4 
100,   // } 5 
100,   // } 6 
100,   // } 7 
100,   // } 8 
100,   // } 9 
100,   // } : 
100,   // } ; 
100,   // } < 
100,   // } = 
100,   // } > 
100,   // } ? 
100,   // } @ 
100,   // } A 
100,   // } B 
100,   // } C 
100,   // } D 
100,   // } E 
100,   // } F 
100,   // } G 
100,   // } H 
100,   // } I 
100,   // } J 
100,   // } K 
100,   // } L 
100,   // } M 
100,   // } N 
100,   // } O 
100,   // } P 
100,   // } Q 
100,   // } R 
100,   // } S 
100,   // } T 
100,   // } U 
100,   // } V 
100,   // } W 
100,   // } X 
100,   // } Y 
100,   // } Z 
100,   // } [ 
100,   // } \ 
100,   // } ] 
100,   // } ^ 
100,   // } _ 
100,   // } ` 
100,   // } a 
100,   // } b 
100,   // } c 
100,   // } d 
100,   // } e 
100,   // } f 
100,   // } g 
100,   // } h 
100,   // } i 
100,   // } j 
100,   // } k 
100,   // } l 
100,   // } m 
100,   // } n 
100,   // } o 
100,   // } p 
100,   // } q 
100,   // } r 
100,   // } s 
100,   // } t 
100,   // } u 
100,   // } v 
100,   // } w 
100,   // } x 
100,   // } y 
100,   // } z 
100,   // } { 
100,   // } | 
100,   // } } 
100,   // } ~ 
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // ~ ! 
100,   // ~ " 
100,   // ~ # 
100,   // ~ $ 
100,   // ~ % 
100,   // ~ & 
100,   // ~ ' 
100,   // ~ ( 
100,   // ~ ) 
100,   // ~ * 
100,   // ~ + 
100,   // ~ , 
100,   // ~ - 
100,   // ~ . 
100,   // ~ / 
100,   // ~ 0 
100,   // ~ 1 
0,   // ~ 2 
0,   // ~ 3 
100,   // ~ 4 
100,   // ~ 5 
100,   // ~ 6 
100,   // ~ 7 
100,   // ~ 8 
100,   // ~ 9 
100,   // ~ : 
100,   // ~ ; 
100,   // ~ < 
100,   // ~ = 
100,   // ~ > 
100,   // ~ ? 
100,   // ~ @ 
100,   // ~ A 
100,   // ~ B 
100,   // ~ C 
100,   // ~ D 
100,   // ~ E 
100,   // ~ F 
100,   // ~ G 
100,   // ~ H 
100,   // ~ I 
100,   // ~ J 
100,   // ~ K 
100,   // ~ L 
100,   // ~ M 
100,   // ~ N 
100,   // ~ O 
100,   // ~ P 
100,   // ~ Q 
100,   // ~ R 
100,   // ~ S 
100,   // ~ T 
100,   // ~ U 
100,   // ~ V 
100,   // ~ W 
100,   // ~ X 
100,   // ~ Y 
100,   // ~ Z 
100,   // ~ [ 
100,   // ~ \ 
100,   // ~ ] 
100,   // ~ ^ 
100,   // ~ _ 
100,   // ~ ` 
100,   // ~ a 
100,   // ~ b 
100,   // ~ c 
100,   // ~ d 
100,   // ~ e 
100,   // ~ f 
100,   // ~ g 
100,   // ~ h 
100,   // ~ i 
100,   // ~ j 
100,   // ~ k 
100,   // ~ l 
100,   // ~ m 
100,   // ~ n 
100,   // ~ o 
100,   // ~ p 
100,   // ~ q 
100,   // ~ r 
100,   // ~ s 
100,   // ~ t 
100,   // ~ u 
100,   // ~ v 
100,   // ~ w 
100,   // ~ x 
100,   // ~ y 
100,   // ~ z 
100,   // ~ { 
100,   // ~ | 
100,   // ~ } 
100,   // ~ ~ 
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,100,100,100,100,100,100,100,100,100,
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\bitmapco.h ===
/* *************************************************************************** */
/* *     Get bitmap given trace and XrData Range                             * */
/* *************************************************************************** */

#ifndef _GBM_HEADER_INCLUDED
#define _GBM_HEADER_INCLUDED

#include "div_let.h"
//#include "learn.h"

#define GBM_XSIZE              16
#define GBM_YSIZE              16
#define GBM_QSX                 4
#define GBM_QSY                 4
#define GBM_NCOEFF     (GBM_XSIZE*GBM_YSIZE)

_INT GetSnnBitMap(_INT st, _INT len, p_xrdata_type xrdata, _TRACE trace, p_UCHAR coeff, p_RECT rect, Part_of_letter _PTR parts);

#endif //  _GBM_HEADER_INCLUDED
/* *************************************************************************** */
/* *            End Of Alll                                                  * */
/* *************************************************************************** */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\ams_mg.h ===
/* *********************************************************************** */
/* * Recognition project header                                          * */
/* *********************************************************************** */

#ifndef AMS_MG_INCLUDED
#define AMS_MG_INCLUDED

#include "bastypes.h"
#include "cgr_ver.h"


#ifdef DLLEXP
 #define __cdecl
#endif

#if (defined(__PSION32__) || defined(__WINS__) || defined(__MARM__))
 #include <e32def.h>
 #ifdef __cdecl
  #undef __cdecl
 #endif
 #define __cdecl GLDEF_C
#endif /* __PSION32__ */

/******* Definitions *********************************************/

#define ON                     1
#define OFF                    0

#ifdef PEGASUS
 #define ERR_MSG_EMPMACRO
 #define err_msg(s)           {}
#endif

#ifdef  PG_DEBUG_ON
  #define PG_DEBUG            ON // Moved to Compiler's params
#else
  #define PG_DEBUG            OFF
#endif

#ifndef PG_DEBUG_MAC
  #define PG_DEBUG_MAC        OFF
#endif

#define USE_ORTOGRAPH         OFF
#define USE_CHUNK_PROCESSOR   OFF
#define USE_POSTPROC          OFF

#if !defined(FOR_GERMAN) && !defined(FOR_FRENCH) && !defined(FOR_INTERNATIONAL) && !defined(FOR_ENGLISH)
 #error Languge selection error!
#endif

#if HWR_SYSTEM == MACINTOSH
  #ifndef EXTERN_VOCABULARY
    #define EXTERN_VOCABULARY ON
  #endif
#else
  #define EXTERN_VOCABULARY   OFF
#endif

#if EXTERN_VOCABULARY
  #define   PS_VOC           OFF
  #define   AIRUS_VOC        OFF
#else
  #define   PS_VOC            ON
  #define   AIRUS_VOC        OFF
#endif

#define SUCCESS   0
#define UNSUCCESS 1

/******* Definitions *********************************************/

#define NUM_RW              32                    /* Size of recognized str*/
#define XRINP_SIZE         160                    /* Len of corr matrix    */
#define w_lim               32                    /* Len of char strings   */
#define MAX_DICT            15

#define CS_ALPHA         0x0001                   /* Letter enabled        */
#define CS_NUMBER        0x0002                   /* Number enabled        */
#define CS_MATH          0x0004                   /* Mathematic sym's en   */
#define CS_LPUNCT        0x0008                   /* Leading punctuation   */
#define CS_EPUNCT        0x0010                   /* Ending  punctuation   */
#define CS_OTHER         0x0020                   /* Any other symbols     */

#define WW_RESTRICTED    0x0001                   /* Writing way -- Restricted set */
#define WW_GENERAL       0x0002                   /* Writing way -- Mixed     */
#define WW_BLOCK         0x0004                   /* Writing way -- HandPrint */
#define WW_PALMER        0x0008                   /* Writing way -- Palmer    */

#define EL_ENGLISH       0x0001                   /* Enabled language -- English */
#define EL_GERMAN        0x0002                   /* Enabled language -- German  */
#define EL_FRENCH        0x0004                   /* Enabled language -- French  */

#define EL_SWEDISH       0x0008                   /* Enabled language -- Swedish */
#if !PG_DEBUG
#define HWR_USE_VAR(a) a
#else
#define HWR_USE_VAR(a)
#endif

/* ---- XRW_ALGS definitions -------------------------------------------- */

#define XRWALG_XRWS          1            /* Main upper level recognition algorithm */
#define XRWALG_XR_SPL        2            /* Separated letter recognition algorithm */
#define XRWALG_XRSL          3            /* Single letter recognition algorithm */
#define XRWALG_XRLWS         4            /* Combined recognition algorithm */
#define XRWALG_XRLW          5            /* Word  recognition algorithm */
#define XRWALG_EXP          16            /* Experimental routines */
#define XRWALG_CMP          17            /* Get aliases for given CMP word in RC */

#define XRWM_VOC          0x0001          /* Xrws takes symbols from VOC    */
#define XRWM_CS           0x0002          /* Xrws takes symbols from CharSet*/
#define XRWM_TRIAD        0x0004          /* Symbols from charset verified by triads */
#define XRWM_LD           0x0008          /* Symbols are generated by LexDB */
#define XRWM_BLOCK        0x0010          /* Fast 'BLOCK' matrix counting   */
#define XRWM_MWORD        0x0020          /* Multiword dict recognition      */
#define XRWM_NONUMFILTER  0x0040          /* Disable CheckPure num filter      */
#define XRWM_NOSSPENL     0x0080          /* Disable Sources penalties */

#define XRCM_CACHE        0x0001          /* Use cache in counting of matrix */
#define XRCM_SEPLET       0x0002          /* Recognition of separated-letter word */

#if defined( FOR_GERMAN)
#define XCM_DEFAULT       0x0027          /* Default capitalization flags                  */
#else
#define XCM_DEFAULT       0x0037          /* Default capitalization flags                  */
#endif
#define XCM_FL_DEFSIZE    0x0001          /* First letter in accordance with voc/charset   */
#define XCM_FL_TRYCAPS    0x0002          /* Use capitals vars for first letter from voc/cs*/
#define XCM_AL_DEFSIZE    0x0005          /* All letters in accordance with voc/cs         */
#define XCM_AL_TRYCAPS    0x000A          /* Use capitals vars for all letters from voc/cs */
#define XCM_AL_TRYS4C     0x0015          /* Try also small vars for capitals form voc/cs  */
#define XCM_AL_RETC4AV    0x0020          /* Return capitalization for all answer variants */

/* ----------- Load utilities command definitions ----------------------- */

#define TR_REQUEST         1              /* Request to load beg triads */

#define DTI_DTE_REQUEST   0x0001          /* Operation on DTI requested */
#define DTI_XRT_REQUEST   0x0002          /* Operation on XRT requested */
#define DTI_PDF_REQUEST   0x0004          /* Operation on PDF requested */
#define DTI_PICT_REQUEST  0x0008          /* Operation on PICT requested*/

/* ----------- Low level modes & values --------------------------------- */

  /*  Possible values of the "rec_mode" field of "rc_type" structure. */
  /* May be combined (using OR):                                      */

#define  RECM_TEXT       1
#define  RECM_FORMULA    2
#define  RECM_ALL        (RECM_TEXT|RECM_FORMULA)

/*
  Constants - values of the "low_mode" field in "rc_type"
 structure:
 Only one flag from each group (excluding
 LMOD_CHECK_PUNCTN) may be set!
 Flags concerning BORDER have effect only when LMOD_FREE_TEXT
 is set.  When LMOD_BOX_EDIT is set, the border fields in "rc"
 must contain predefined value for the line borders.
 Flag LMOD_CHECK_PUNCTN has no effect in LMOD_BOX_EDIT mode.
*/

#define   LMOD_BOX_EDIT       (_USHORT)0x0001
#define   LMOD_FREE_TEXT      (_USHORT)0x0002

#define   LMOD_BORDER_TEXT    (_USHORT)0x0010
#define   LMOD_BORDER_NUMBER  (_USHORT)0x0020

#define   LMOD_BORDER_GENERAL (LMOD_BORDER_TEXT|LMOD_BORDER_NUMBER)
#define   LMOD_NO_BORDER_DECISION  (_USHORT)0
#define   LMOD_BORDER_ONLY    (_USHORT)0x0040

#define   LMOD_SEPARATE_LET   (_USHORT)0x0400

#define   LMOD_SMALL_CAPS     (_USHORT)0x0800

#define   LMOD_CHECK_PUNCTN   (_USHORT)0x8000

#define   CB_NUM_VERTEX         10

/* -------------- XRinp section ----------------------------------------- */

#define XRB_ST_ELEM        0x01                  /* Tail flag of starting element */
#define XRB_EN_ELEM        0x02                  /* Tail flag of ending element */

/* ------- Learning info flags definitions for LearningHandleConfig field - */
#define kLDRC       0x0001          /* write RC         to learning info    */
#define kLDTrace    0x0002          /* write Trace      to learning info    */
#define kLDXRdata   0x0004          /* write XRdata     to learning info    */
#define kLDRWS      0x0008          /* write RWS        to learning info    */
#define kLDRWGPPD   0x0010          /* write RWG PDD    to learning info    */
#define kLDRecWrd   0x0020          /* write rec words  to learning info    */
#define kLDORT      0x0040          /* write poliakov's data to learning info   */
/* ---------------------------------------------------------------------- */

/* ------- Learning info flags definitions for fOrto field ------------ */
#define kORTO_UPPER 0x0001      /*  use ortograph in upper level        */
#define kORTO_POSTP 0x0002      /*  use ortograph as a postrocessing    */
#define kORTO_EMPTY 0x0004      /*  use an empty data base              */
#define kORTO_LEARN 0x0008      /*  perform learning                    */
/* -------------------------------------------------------------------- */

/* ----------------- Upper level defines -------------------------------- */

#define XRWG_FCASECHANGE  0x80    /* Flag of case-of-letter change in alias */

#define XRLV_DATA_SAVE    0x01    /* Save not-finished state for the word */
#define XRLV_DATA_USE     0x02    /* Use not-finished state for the word */

/* ----------- System yield function ------------------------------------- */

typedef _INT (__cdecl *RecYield_type)(p_VOID);

/********** Structure definitions *******************************/

/* ----------------- Lower level structures ----------------------------- */

typedef struct  {
                 _SHORT          x;
                 _SHORT          y;
                }PS_point_type, _PTR p_PS_point_type;

typedef  p_PS_point_type _TRACE ;

typedef  struct
                {
                 _SHORT          left;
                 _SHORT          top;
                 _SHORT          right;
                 _SHORT          bottom;
               } _RECT, _PTR p_RECT;

typedef struct {
//                 p_VOID          trace_in; // Reserved for future use
//                 p_VOID          trace_out;
//                 _SHORT          num_points_in;
//                 _SHORT          num_points_out;

                 _RECT           box;

                 _SHORT          extr_depth;

                 _SHORT          size_in;
                 _SHORT          dn_pos_in;
                 _SHORT          size_sure_in;
                 _SHORT          pos_sure_in;

                 _SHORT          size_out;
                 _SHORT          dn_pos_out;
                 _SHORT          size_sure_out;
                 _SHORT          pos_sure_out;
               }stroka_data, _PTR p_stroka_data;

/* --------------------------------------------------------------------- */
/*  Structure containing control variables for postprocessing  */
/* applicability:                                              */

typedef  struct  {
                   _SHORT   nMinWeight; /*  Min. weight of 1st variant   */
                                        /* for postproc. to be applied.  */
                   _SHORT   nMaxDist;   /*  Max. weight distance between */
                                        /* two first variants for post-  */
                                        /* proc. to be applied.          */
                 } POST_CONTROLS, _PTR p_POST_CONTROLS;

/* ----------------- Global Rec Context --------------------------------- */

typedef struct  {
                 _SHORT          algorithm;          /* Upper level recognition algorithm */

                 _SHORT          enabled_cs;         /* Inluded parts of symbol set (anmleo) */
                 _SHORT          enabled_ww;         /* Enabled ways of writing (Handprint/Palmer/Mixed) (bpg) */
                 _SHORT          enabled_languages;  /* Allowed languages to use from DTI prototypes (egf)*/

                 _SHORT          xrw_mode;            /* Xrws mode v/c/t/b ....         */
                 _SHORT          corr_mode;           /* Corr matr modes - s/c ...      */
                 _SHORT          xrw_min_wlen;        /* Min Num let in word to read    */
                 _SHORT          xrw_max_wlen;        /* Max Num let in word to read    */
                 _SHORT          xrw_tag_size;        /* Number of TAG buffers          */
                 _SHORT          xrw_chr_size;        /* Number of character buffers    */
                 _SHORT          bad_distance;        /* CutOff distance of XRW modules */

                 _SHORT          answer_level;
                 _SHORT          sure_level;
                 _SHORT          answer_allow;

                 _SHORT          bad_amnesty;

                 _SHORT          caps_mode;
                 _SHORT          use_len_limits;

                 _SHORT          fly_learn;
                 _SHORT          use_vars_inf;

                 _SHORT          lrn_class_level;
                 _SHORT          lrn_min_class;
                 _SHORT          lrn_learn_suff;
                 _SHORT          lrn_vocvar_rew;

                 p_VOID          dtiptr;               /* Handle to Xr database            */
                 p_VOID          vocptr[MAX_DICT];     /* Handle to vocabularies           */
                 p_VOID          tr_ptr;               /* Handle to character filters      */

                 p_UCHAR         alpha_charset;
                 p_UCHAR         num_charset;
                 p_UCHAR         math_charset;
                 p_UCHAR         lpunct_charset;
                 p_UCHAR         epunct_charset;
                 p_UCHAR         other_charset;

                 _USHORT         low_mode;          /*  See possible values above (LMOD_...).*/
                 _USHORT         rec_mode;          /*  See possible values above (RECM_...).*/
                 _USHORT         lmod_border_used;  /* See possible values above (LMOD_BORDER...).*/

                 _SHORT          ii;                /* Number of points in trajectory */
				 _SHORT			 n_str;				/* Number of strokes in trajectory */
                 _TRACE          trace;             /* Trajectory */
                 _RECT           trace_rect;        /* Box of the trajectory */
                 _SHORT          slope;             /* Slope of the trajectory */

                 _UCHAR          curv_bord[CB_NUM_VERTEX*2];  /* Curved border of the trace */

                 _UCHAR          fl_fil;
                 _UCHAR          fl_post;

                 _UCHAR          ws_handle;
                 _USHORT         LearningHandleConfig;
                 _USHORT         FakeRecognition;      /* recognize just first point of a tajectory */

                 _UCHAR          fl_chunk;             // CHUNK_PROCESSOR
                 _UCHAR          fl_chunk_let;         // CHUNK_PROCESSOR

                  _SHORT         fOrto;                // ORTOGRAPH
                 p_VOID          pDB;

                  _CHAR          cmp_word[w_lim];

                 stroka_data     stroka;             /* new data structure for baseline */
                 _SHORT          BoxEditSamllHeight;
                 _SHORT          BoxEditBase;

                 _SHORT          fReject;              // REJECT

                 POST_CONTROLS   postCtrl;

                 RecYield_type   pFuncYield;       // Callback Yield fuction
                 p_VOID          FY_param;         // Parameter for FuncYield

                 p_VOID          p_ws_wi;          // Pointer to struct with ws info for cur word

                 _INT            f_xd_data;        // Flags controlling saving of xd data
                 p_VOID          p_xd_data;        // Pointer to XRLV data structure saved for continuing recognition

                 p_VOID          pXrc;		        // The Bear XRc for this context
				 p_VOID			 hSeg;				// handle to multiseg data

				 void *pvFactoid;
				 unsigned char *szPrefix;
				 unsigned char *szSuffix;

                } rc_type, _PTR p_rc_type;

/* -------------- XRinp section ----------------------------------------- */

typedef struct  {
                _UCHAR type;                 //64  direction:1b:type:2b:width:3b:
                _UCHAR attrib;               // bit field
                _UCHAR penalty;              //16 max value
                _UCHAR height;               //16

                _UCHAR shift;                //16
                _UCHAR orient;               //32
                _UCHAR depth;                //16

                _UCHAR	iSpc;                  // Spc net out
				
}xrinp_type, _PTR p_xrinp_type;

typedef struct  {
                 xrinp_type      xr;
                 _SHORT          hotpoint;
                 _SHORT          begpoint;
                 _SHORT          endpoint;
                 _SHORT          box_left;
                 _SHORT          box_up;
                 _SHORT          box_right;
                 _SHORT          box_down;
                 _UCHAR          location;
                }xrd_el_type, _PTR p_xrd_el_type;

typedef xrd_el_type xrd_type[XRINP_SIZE];
typedef xrd_type _PTR p_xrd_type;

typedef struct  {
                 _INT            len;     // Real filled length
                 _INT            size;    // Allocated size (in els)
                 p_xrd_type      xrd;     // Pointer to array of xrd_el's
                }xrdata_type, _PTR p_xrdata_type;

/* ----------- Rec Words Structure --------------------------------------- */

typedef struct  {
                 _UCHAR          word[w_lim];
                 _UCHAR          nvar[w_lim];    /* Number of variants + CapsChange falg */
                 _UCHAR          linp[w_lim];    /* Lengths of letter-correspondent xr strings */
                 _SHORT          weight;
                 _SHORT          src_id;
                 _SHORT          attr;
                }rec_w_type, _PTR p_rec_w_type;

/* ----------- Symbol Graph definitions ---------------------------------- */

typedef struct {                  /* Type, defining base of graph             */
                _UCHAR           type;     /* Graph type (word/letter/number           */
                _INT             size;     /* Number of elements in RWS array          */
                p_VOID           rws_mem;  /* Pointer to RWS  memory                   */
                p_VOID           ppd_mem;  /* Pointer to PPD allocation                */
                _BOOL            bReversePass; /* For ppd in upper level -- flag of reverse rwg */
               } RWG_type, _PTR p_RWG_type;

/* --------------------- Prototypes ---------------------------- */

_INT   AllocXrdata(p_xrdata_type xrdata, _INT size);
_INT   FreeXrdata(p_xrdata_type xrdata);

_INT   PreprocessTrajectory(p_rc_type rc);

#if !defined(ERR_MSG_EMPMACRO) && !defined(err_msg)
 _VOID err_msg(_STR);
#endif

#endif /*  AMS_MG_INCLUDED  */

/* ************************************************************************* */
/* * End of all                                                            * */
/* ************************************************************************* */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\arcs.h ===
#ifndef  ARCS_H_INCLUDED
 #define  ARCS_H_INCLUDED

 /* #define  D_ARCS    */           /* if you want realy arcs.....         */

 /***********************  Owner debug defines  ****************************/
 #define     ANDREI_DEB
 /**************************************************************************/

 /***********************  Owner masked defines  ***************************/
 /**************************************************************************/


 /********************************************************/

  _VOID   InitElementSDS( p_SDS pSDS ) ;

  _SHORT  SlashArcs( low_type _PTR  pLowData , _INT iBeg , _INT iEnd ) ;

  _VOID   InitSDS( _SDS asds[] , _SHORT _PTR lsds , _SHORT n ) ;

  _BOOL   RelHigh( p_SHORT y, _INT begin, _INT end,
                  _INT height[], p_SHORT plowrelh, p_SHORT puprelh ) ;


  _VOID   DotPostcrossModify( low_type _PTR  pLowData ) ;
 /********************************************************/

  #define    SHORT_BASE                100       /* Short scaling base . */
  #define    LONG_BASE                 100L      /* Long scaling base .  */
  #define    MAX_NO_VERT               1500L
  #define    DEF_MINLENTH              15L       /* Default minimum  sig- */
                                                 /* nificant lenth .     */
  #define    DEF_MINLENTH_S            10


  #define    MIN_NO_HOR                4


 /********************************************************/


 /********************************************************/
 /*           Arcs description structures:               */
 /********************************************************/



 #ifdef D_ARCS

  typedef struct
    {
      _SHORT    iBeg    ;      /*  Index of the 1st point                 */
      _SHORT    iEnd    ;      /*  Index of the last point                */
      _SHORT    nLength ;      /*  The length of the chord at this arc    */
      _SHORT    nCurv   ;      /*  Curvature of the arc, measured with    */
                               /* "CurvMeasure" function.  See comments   */
                               /*  at the head of that function in module */
                               /*  LOW_UTIL.C .                           */
      _RECT     box     ;      /*  The box containing the arc.            */
      _ARC_TYPE  type   ;      /*  The interpretation of the arc.         */
    }
  ARC_DESCR, _PTR p_ARC_DESCR     ;

  typedef struct
    {
      p_ARC_DESCR  pArcData       ;
      _SHORT       arc_buf_Len    ;
      _SHORT       LenArcData     ;
    }
  ARC_CONTROL, _PTR p_ARC_CONTROL ;

 /********************************************************/

  _SHORT  Prepare_Arcs_Data( p_ARC_CONTROL pArcControl  ) ;

  _VOID   Dealloc_Arcs_Data ( p_ARC_CONTROL pArcControl ) ;

  _SHORT  ArcRetrace( low_type _PTR p_low_data , p_ARC_CONTROL pArcControl );

  _SHORT  Arcs( low_type _PTR low_data, p_ARC_CONTROL pArcControl ) ;

 /********************************************************/

  #define    LEN_ARC_BUFFER            50

 /********************************************************/

 #endif    /* D_ARCS */

 #endif    /* ARCS_H_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\usa\solefeed.c ===
#include <stdlib.h>
#include "common.h"
#include "runNet.h"
#include "resource.h"
#include "sole.h"



static  LOCAL_NET    s_soleguideNet ;    //Net for sole with the guide
static LOCAL_NET    s_solenoguideNet ;  //Net for sole without the guide
static int          s_cSoleGuideNetMem=0;
static int          s_cSoleNoGuideNetMem=0;

extern LOCAL_NET * loadNet(HINSTANCE hInst, int iKey, int *iNetSize, LOCAL_NET *pNet);


// Loads sole nets
BOOL LoadSoleNets(HINSTANCE hInst)
{
	// Sole nets
	if (  !loadNet(hInst, RESID_SOLENET_GUIDE,&s_cSoleGuideNetMem,&s_soleguideNet)
		|| !loadNet(hInst, RESID_SOLENET_NOGUIDE,&s_cSoleNoGuideNetMem,&s_solenoguideNet))
	{
		return FALSE;
	}

	return TRUE;

}

// Unload sole nets
void UnLoadSoleNets()
{
}

//This is used to return the values from the Sole Nets
BOOL GetSoleNetValues(int *icSoleNetMem,int *icSoleFeat,int *icSoleOutput,int bGuide)
{

	//We first check to see if the various net parameters are available

	if ((!s_cSoleGuideNetMem)||(!s_cSoleNoGuideNetMem)||(!&s_soleguideNet)||(!&s_solenoguideNet))
		return FALSE;

	//Assginments are now done

	if (bGuide)
	{
		*icSoleNetMem=s_cSoleGuideNetMem;
		*icSoleFeat=s_soleguideNet.runNet.cUnitsPerLayer[0];
		*icSoleOutput=s_soleguideNet.runNet.cUnitsPerLayer[s_solenoguideNet.runNet.cLayer-1];
	}
	else
	{
		*icSoleNetMem=s_cSoleNoGuideNetMem;
		*icSoleFeat=s_solenoguideNet.runNet.cUnitsPerLayer[0];
		*icSoleOutput=s_solenoguideNet.runNet.cUnitsPerLayer[s_solenoguideNet.runNet.cLayer-1];
	}

	return TRUE;

}


RREAL * RunSoleNets(RREAL * pMem,BOOL bGuide)
{

	RREAL *pAnsOut=NULL;
	int	 iWinSoleGuide, cOutGuide, iWinSoleNoGuide, cOutNoGuide;


	
	if (bGuide)
	{	
		//Since the guide is present we run the guide net

		pAnsOut = runLocalConnectNet(&s_soleguideNet, pMem, &iWinSoleGuide, &cOutGuide);				
	
	}
	else
	{
		//Since the guide is not present we run the no guide net

		pAnsOut = runLocalConnectNet(&s_solenoguideNet, pMem, &iWinSoleNoGuide, &cOutNoGuide);
	
	}

	return  pAnsOut;

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\bastypes.h ===
/**************************************************************************
*                                                                         *
*  BASTYPES.H                             Created: 27 Feb 1991.           *
*                                                                         *
*  WTD                                                                    *
*                                                                         *
*    This file contains the basic data types definitions  for  the        *
*                                                                         *
*  IBM (Borland C++,  Windows, Win32 )                                    *
*  version of HWR program. These types usage is                           *
*  preferrable everywhere across the program instead of  usual  C  data   *
*  types (int, char, etc).                                                *
*                                                                         *
*  Items defined: _VOID   (vVar)    p_VOID   (pvVar)    _PTR              *
*                 _CHAR   (cVar)    p_CHAR   (pcVar)    _FPTR             *
*                 _UCHAR  (ucVar)   p_UCHAR  (pucVar)   _FPREFIX          *
*                 _INT    (iVar)    p_INT    (piVar)    _FVPTR            *
*                 _WORD   (wVar)    p_WORD   (pwVar)    _FVPREFIX         *
*                 _LONG   (lVar)    p_LONG   (plVar)    _NULL             *
*                 _ULONG  (ulVar)   p_ULONG  (pulVar)   _TRUE             *
*                 _SHORT  (sVar)    p_SHORT  (psVar)    _FALSE            *
*                 _USHORT (usVar)   p_USHORT (pusVar)   VALUE_TO_INT      *
*                 _BOOL   (bVar)    p_BOOL   (pbVar)    VALUE_TO_LONG     *
*                 _HANDLE (hVar)    p_HANDLE (phVar)    VALUE_TO_PTR      *
*                 _BIT    (bVar)    p_PROC   (pfProc)   VALUE_TO_HANDLE   *
*                 _STR    (zVar)    p_STR    (pzVar)    INT_TO_VALU       *
*                 _VALUE  (vVar)                        LONG_TO_VALUE     *
*                 _FLOAT            p_FLOAT             PTR_TO_VALUE      *
*                 _DOUBLE           p_DOUBLE            HANDLE_TO_VALUE   *
*                                                       min               *
*                                                       max               *
*                                                                         *
**************************************************************************/

#ifndef BASTYPES_DEFINED      /*   This string suppresses the duplicate  */
                              /* declarations. (See #endif later.)       */
#define BASTYPES_DEFINED

#define  HWR_WINDOWS      1
#define  HWR_DOS          2
#define  HWR_OS2          3
#define  HWR_GO           4
#define  HWR_MACINTOSH    5
#define  HWR_TURBOC       6
#define  HWR_WINDOWS_ANSI 7
#define  HWR_SUN          8
#define  HWR_ANSI         9
#define  HWR_EPOC32       10

#ifndef MACINTOSH
#define  MACINTOSH        HWR_MACINTOSH
#endif

#define  HWR_PROCESSOR_UNKNOWN  0
#define  HWR_PROCESSOR_386      1
#define  HWR_PROCESSOR_SPARC    2

#if 0
#if (defined(__PSION32__) || defined(__WINS__) || defined(__MARM__))
#define  HWR_SYSTEM  HWR_EPOC32
#else
#define  HWR_SYSTEM  HWR_ANSI
#endif
#else  // 0
#define  HWR_SYSTEM  HWR_WINDOWS
#endif // 0


#if HWR_SYSTEM == HWR_EPOC32
#include "rece32.h" /* simple way to include global project defs. */
#endif

#ifndef _FLAT32
  #define  _FLAT32
#endif //_FLAT32

/* this should be an external define (for whole project) bigor 10/20/93 */
#ifdef _FLAT32

#undef near
#define near

#undef _near
#define _near

#undef __near
#define __near

#undef far
#define far

#undef _far
#define _far

#undef __far
#define __far

#undef pascal
#define pascal

#undef _pascal
#define _pascal

#undef __pascal
#define __pascal

#undef _export
#define _export

//#undef __export
//#define __export

#endif /*_FLAT32 */

/*                  CONSTANTS DEFINITIONS.                               */
/*                 ========================                              */

#undef _NULL
#define _NULL                 0

#undef _TRUE
#define _TRUE                 1

#undef _FALSE
#define _FALSE                0

#undef _YES
#define _YES                  1

#undef _NO
#define _NO                   0

#undef _ON
#define _ON                   1

#undef _OFF
#define _OFF                  0

/*              1.  BASIC     TYPES.                                     */
/*             ======================                                    */

#if HWR_SYSTEM == HWR_WINDOWS || HWR_SYSTEM == HWR_TURBOC || HWR_SYSTEM == HWR_ANSI || HWR_SYSTEM == HWR_EPOC32

#define _VOID                 void

typedef char                  _CHAR;    /*   1-byte data type. It can be */
                                        /* signed or unsigned,  so it is */
                                        /* a good idea to  use  it  when */
                                        /* sorting is not required.      */

typedef unsigned char         _UCHAR;   /*   1-byte data type. Unsigned. */

typedef   signed char         _SCHAR;   /*   1-byte data type. Signed.   */

typedef int                   _INT;     /*   The most natural data type. */
                                        /* It  is  signed,  but its size */
                                        /* can be 2 or 4  byte depending */
                                        /* upon the current processor.   */

typedef unsigned int          _UINT;    /*   The most natural  data type */
                                        /* for  the processor given, but */
                                        /* it is unsigned.(2 or 4 bytes) */

typedef unsigned int          _WORD;    /*   The most natural  data type */
                                        /* for  the processor given, but */
                                        /* it is unsigned.(2 or 4 bytes) */

typedef long                  _LONG;    /*   This data type is  at least */
                                        /* 32-bit long and signed.       */

typedef unsigned long         _ULONG;   /*   This data type is  at least */
                                        /* 32-bit long and unsigned.     */

typedef short                 _SHORT;   /*   16-bit data  type,  signed. */
                                        /* The  usage  is not desirable, */
                                        /* except  the  variable  length */
                                        /* must be 2 bytes.              */

typedef unsigned short        _USHORT;  /*   16-bit data type, unsigned. */
                                        /* The  usage  is not desirable, */
                                        /* except  the  variable  length */
                                        /* must be 2 bytes.              */

typedef unsigned              _BIT;     /*   The bit field.              */

typedef float                 _FLOAT;   /*   Single precision   floating */
                                        /* point numbers.                */

typedef double                _DOUBLE;  /*   Double precision   floating */
                                        /* point numbers.                */

//typedef int                   _S16;     /* 16-bit data type */
//typedef unsigned int          _U16;     /* 16-bit data type for rasters */
//typedef long                  _S32;     /* 32-bit data type */
//typedef unsigned long         _U32;     /* 32-bit data type for rasters */


/*              2.  DERIVATIVES FROM BASIC TYPES.                        */
/*             ===================================                       */

typedef unsigned int          _BOOL;    /*   The variable of  this  type */
                                        /* usually may be only 0 or 1.   */


/*              3.  POINTERS FOR THE GROUPS 1 AND 2.                     */
/*             ======================================                    */

#define _PTR _far *                   /*   This macro   is   used   to */
                                      /* create the data pointers.     */
#define _FPREFIX _far _pascal         /*This prefix is   used   to */
                                      /* indicate  the normal function */
                                      /* (it is used  before  function */
                                      /* definition and in prototypes) */

#define _FPTR _FPREFIX _far *         /*   This macro   is   used   to */
                                      /* create the function pointers. */

//#define _FVPREFIX _far                /*This prefix is   used   to */
#define _FVPREFIX _far _cdecl         /*This prefix is   used   to */
                                      /* indicate  the  function  with */
                                      /* varying parameters  number  - */
                                      /* printf,   etc.  (it  is  used */
                                      /* before  function   definition */
                                      /* and in prototypes)            */

#define _FVPTR _FVPREFIX _far *       /*   This macro   is   used   to */
                                      /* create  the function pointers */
                                      /* for the  functions  with  the */
                                      /* varying parameters number.    */

#ifdef _FLAT32
#define DLLEXPORT  WINAPI _export     /* Standard export definition for 16 */
#else /* _FLAT32 */
  #define DLLEXPORT WINAPI            /* Standard export definition for 32 */
#endif /* _FLAT32 */

typedef _VOID   _PTR          p_VOID;
typedef _CHAR   _PTR          p_CHAR;
typedef _CHAR   _PTR          _STR;
typedef _STR    _PTR          p_STR;
typedef _UCHAR  _PTR          p_UCHAR;
typedef _SCHAR  _PTR          p_SCHAR;
typedef _INT    _PTR          p_INT;
typedef _WORD   _PTR          p_WORD;
typedef _UINT   _PTR          p_UINT;
typedef _LONG   _PTR          p_LONG;
typedef _ULONG  _PTR          p_ULONG;
//typedef _S16    _PTR          p_S16;
//typedef _U16    _PTR          p_U16;
//typedef _S32    _PTR          p_S32;
//typedef _U32    _PTR          p_U32;
typedef _SHORT  _PTR          p_SHORT;
typedef _USHORT _PTR          p_USHORT;
typedef _BOOL   _PTR          p_BOOL;
typedef _FLOAT  _PTR          p_FLOAT;
typedef _DOUBLE _PTR          p_DOUBLE;

typedef _INT    (_FPTR        p_PROC)();

typedef p_VOID                _VALUE;

#define VALUE_TO_UCHAR(a)       ((_UCHAR)(_ULONG)(a))
#define VALUE_TO_CHAR(a)        ((_CHAR)(_LONG)(a))
#define VALUE_TO_USHORT(a)      ((_USHORT)(_ULONG)(a))
#define VALUE_TO_SHORT(a)       ((_SHORT)(_LONG)(a))
#define VALUE_TO_PVOID(a)       ((p_VOID)(a))
#define VALUE_TO_INT(a)         ((_INT)(_LONG)(a))
#define VALUE_TO_WORD(a)        ((_WORD)(_ULONG)(a))
#define VALUE_TO_BOOL(a)        ((_WORD)(_ULONG)(a))
#define VALUE_TO_LONG(a)        ((_LONG)(a))
#define VALUE_TO_ULONG(a)       ((_ULONG)(a))
#define VALUE_TO_S16(a)         ((_INT)(_LONG)(a))
#define VALUE_TO_U16(a)         ((_WORD)(_ULONG)(a))
#define VALUE_TO_S32(a)         ((_LONG)(a))
#define VALUE_TO_U32(a)         ((_ULONG)(a))
#define VALUE_TO_PTR(a)         ((p_VOID)(a))
#define VALUE_TO_STR(a)         ((p_VOID)(a))
#define VALUE_TO_FPTR(a)        ((_VALUE (_FPTR)())(a))
#define VALUE_TO_FVPTR(a)       ((_VALUE (_FVPTR)())(a))

#define UCHAR_TO_VALUE(a)       ((_VALUE)(_ULONG)(a))
#define CHAR_TO_VALUE(a)        ((_VALUE)(_LONG)(a))
#define USHORT_TO_VALUE(a)      ((_VALUE)(_ULONG)(a))
#define SHORT_TO_VALUE(a)       ((_VALUE)(_LONG)(a))
#define PVOID_TO_VALUE(a)       ((_VALUE)(a))
#define INT_TO_VALUE(a)         ((_VALUE)(_LONG)(a))
#define WORD_TO_VALUE(a)        ((_VALUE)(_ULONG)(a))
#define BOOL_TO_VALUE(a)        ((_VALUE)(_ULONG)(a))
#define LONG_TO_VALUE(a)        ((_VALUE)(a))
#define ULONG_TO_VALUE(a)       ((_VALUE)(a))
#define S16_TO_VALUE(a)         ((_VALUE)(_LONG)(a))
#define U16_TO_VALUE(a)         ((_VALUE)(_ULONG)(a))
#define S32_TO_VALUE(a)         ((_VALUE)(a))
#define U32_TO_VALUE(a)         ((_VALUE)(a))
#define PTR_TO_VALUE(a)         ((_VALUE)(p_VOID)(a))
#define STR_TO_VALUE(a)         ((_VALUE)(p_VOID)(a))
#define FPTR_TO_VALUE(a)        ((p_VOID)(a))
#define FVPTR_TO_VALUE(a)       ((p_VOID)(a))

typedef _WORD                 _HATOM;
#define VALUE_TO_HATOM  VALUE_TO_WORD
#define HATOM_TO_VALUE  WORD_TO_VALUE

#endif   /* HWR_SYSTEM... */

#define  BEGIN_BLOCK          do {
#define  END_BLOCK            } while (_FALSE);
#define  BLOCK_EXIT           break

#define  UNUSED(x)     ((x)=(x))
#define  _UNDEFINED    ((_WORD)-1)
#define  _HWR_SYS_MAXSHORT    ((_SHORT)0x7FFF)
#define  _HWR_SYS_MINSHORT    ((_SHORT)0x8000)

#define  HWR_DIRECT_MATH   _ON

#undef HWRMin
#define HWRMin(a,b)            (((a) < (b)) ? (a) : (b))

#undef HWRMax
#define HWRMax(a,b)            (((a) > (b)) ? (a) : (b))


#define  HWR_SWAP_MASK_BYTESWAP  0x01
#define  HWR_SWAP_NOBYTESWAP     0x00
#define  HWR_SWAP_BYTESWAP       0x01
#define  HWR_SWAP_MASK_BITSWAP   0x02
#define  HWR_SWAP_NOBITSWAP      0x00
#define  HWR_SWAP_BITSWAP        0x02

#define  HWR_SWAP_BYTE        HWR_SWAP_NOBYTESWAP
#define  HWR_SWAP_BIT         HWR_SWAP_NOBITSWAP

#ifdef __cplusplus
	#define ROM_DATA extern const
	#define ROM_DATA_EXTERNAL extern const
#else
	#define ROM_DATA const
	#define ROM_DATA_EXTERNAL extern const
#endif


#endif  /*  BASTYPES_DEFINED  */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\bit_mark.h ===
#include "ams_mg.h"

#if defined( FOR_GERMAN) || defined (FOR_FRENCH) || defined(FOR_INTERNATIONAL)

 /*************************************************************************/


  #ifdef  FILE_TESTING
	 #include   <stdio.h>
  #endif

 /*-----------------------------------------------------------------------*/

  #define    MAX_MARK                      10

  #define    BITS_FOR_SINGLE_MARK          4

  #define    BIT_MARK_MAX                  15

  #define    SCALE_Y_DIMENSION             24

  #define    SCALE_X_ELS_DIMENSION         18
  #define    SCALE_Y_ELS_DIMENSION         15

  #define    SCALE_X_STR_DIMENSION         23
  #define    SCALE_Y_STR_DIMENSION         12

  #define    SCALE_X_DOT_DIMENSION         15
  #define    SCALE_Y_DOT_DIMENSION         11

  #define    MAX_BOX_SCALE                 SCALE_Y_DIMENSION

  #define    SCALE_EXT_DIMENSION           4
  #define    SCALE_INT_DIMENSION           2
  #define    SCALE_POS_DIMENSION           3

  #define    SCALE_BOX_EXT_UML_STR_DIM     2
  #define    SCALE_BOX_INT_ELS_UML_DIM     2

  #define    INTERSECTED                   1
  #define    ISOLATE                       0

  #define    END_LAST                      0
  #define    MID_LAST                      1
  #define    COMMON                        2

 /*-----------------------------------------------------------------------*/

  typedef struct
	 {
		unsigned int    single_mark   : BITS_FOR_SINGLE_MARK  ;
	 } BIT_MARK ,
		_PTR  p_BIT_MARK ;


  typedef struct
	 {
		p_BIT_MARK  pBitMarkTable ;

		p_UCHAR     pXScale       ;
		_SHORT      mColumns      ;
		p_UCHAR     pYScale       ;
		_SHORT      nLines        ;
	 }
		 BIT_MARK_TABLE_CONTROL,
		_PTR   p_BIT_MARK_TABLE_CONTROL ;


 /**************************************************************************/


  _SHORT  GroupsSpeclBegProect( low_type _PTR  pLowData , _SHORT  numGroup );

  _SHORT  MarkPCounter( low_type _PTR  pLowData , p_SPECL  pSpecl ,
								_UCHAR   MarkName  )  ;

  _VOID   GetBoxMarks( p_UM_MARKS  pSpaceMarks , _SHORT dX , _SHORT dY  ) ;

  _SHORT  FetchTableNumber( _SHORT dX, p_UCHAR Scale, _SHORT ScaleDimension );

  _SHORT  WriteUmlData ( p_UM_MARKS_CONTROL  pUmMarksControl  ,
								 p_UM_MARKS          pUmSpaceMarks    )  ;

  _VOID   UmIntersectBuild ( low_type _PTR   pLowData )  ;

  _VOID   UmIntersectDestroy ( low_type _PTR  pLowData, _SHORT  UmNumGroup ) ;
  _SHORT  InterMarks( _CHAR dN , p_BIT_MARK  pInterTable ) ;

  _SHORT  GetMarks( p_BIT_MARK_TABLE_CONTROL  pMarksTableControl ,
														_SHORT dX ,  _SHORT dN   ) ;

  _BOOL   ShapeFilter  ( low_type _PTR  pLowData ,
								_SHORT   iMin0 , _SHORT  iMax , _SHORT iMin1   ) ;

  _BOOL   CheckGroup   ( low_type _PTR  pLowData , _SHORT  GroupNumber ) ;

  _SHORT  CheckPosition( low_type _PTR  pLowData , _SHORT  GroupNumber ) ;

  _VOID   GetPositionMark( low_type _PTR  pLowData ,
									_SHORT         GroupNumber ,
									p_UM_MARKS     pUmTmpMarks ) ;

  _BOOL   IntersectContains( low_type _PTR  pLowData , _SHORT  NumGroup ) ;
  #if PG_DEBUG

	 _VOID   BoxOutline( p_RECT pBox ) ;

	 _VOID   HeightEncode( _UCHAR  tmpHeight , p_STR  pCodedHeight ) ;

	 _VOID   TypeCodedHeight( _UCHAR  tmpHeight ) ;

	 _VOID   UmInfoTypePaint( low_type _PTR   pLowData  ,
										 #ifdef  FILE_TESTING
											FILE       *debUmInfo ,
										 #endif
									  p_UM_MARKS     pUmTmpMarks, p_UM_MARKS  pBoxMarks ,
									  p_UM_MARKS     pExtMarks  , p_UM_MARKS  pIntMarks ) ;

  #endif      /* PG_DEBUG */


#endif /* FOR_FRENCH || FOR_GERMAN */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\calcmacr.h ===
#ifndef  CALCMACR_H
#define  CALCMACR_H

#ifndef LK_CODE_INCLUDED
#include "lk_code.h"
#endif

/*  Useful non-portable macros (on other platform they may need */
/* to be redefined, though this is almost unprobable):          */

   /*  The following macros are applicable only to positive */
   /* integer-type values:                                  */

#define  wODD(w)   ((w)&1)
#define  wEVEN(w)  (!wODD(w))

#define  ONE_HALF(X)             ( (X) >> 1 )
#define  ONE_THIRD(X)            ( ((X)+1) / 3 )
#define  TWO_THIRD(X)            ( (((X)<<1)+1) / 3 )
#define  ONE_FOURTH(X)           ( ((X)+2) >> 2 )
#define  ONE_FIFTH(X)            ( ((X) + 2) / 5 )
#define  TWO_FIFTH(X)            ( (((X)<<1) + 2) / 5 )
#define  ONE_EIGHTTH(X)          ( ((X) + 4) >> 3 )

#define  ONE_NTH(X,N)            ( ((X) + ONE_HALF(N)) / (N) )
#define  MULT_RATIO(X,NMR,DNM)   ( ((X)*NMR + ONE_HALF(DNM)) / (DNM) )

#define  TWO(X)                  ( (X) << 1 )
#define  FOUR(X)                 ( (X) << 2 )
#define  EIGHT(X)                ( (X) << 3 )

#ifdef __cplusplus
  inline _INT  THREE_HALF(_SHORT X)   { return (X + ONE_HALF(X)); }
  inline _INT  THREE_HALF(_INT X)     { return (X + ONE_HALF(X)); }
  inline _LONG THREE_HALF(_LONG X)    { return (X + ONE_HALF(X)); }

  inline _INT  FOUR_THIRD(_SHORT X)   { return (X + ONE_THIRD(X)); }
  inline _INT  FOUR_THIRD(_INT X)     { return (X + ONE_THIRD(X)); }
  inline _LONG FOUR_THIRD(_LONG X)    { return (X + ONE_THIRD(X)); }

  inline _INT  THREE_FOURTH(_SHORT X) { return (X - ONE_FOURTH(X)); }
  inline _INT  THREE_FOURTH(_INT X)   { return (X - ONE_FOURTH(X)); }
  inline _LONG THREE_FOURTH(_LONG X)  { return (X - ONE_FOURTH(X)); }

  inline _INT  FIVE_FOURTH(_SHORT X)  { return (X + ONE_FOURTH(X)); }
  inline _INT  FIVE_FOURTH(_INT X)    { return (X + ONE_FOURTH(X)); }
  inline _LONG FIVE_FOURTH(_LONG X)   { return (X + ONE_FOURTH(X)); }

  inline _INT  FOUR_FIFTH(_SHORT X)   { return (X - ONE_FIFTH(X)); }
  inline _INT  FOUR_FIFTH(_INT X)     { return (X - ONE_FIFTH(X)); }
  inline _LONG FOUR_FIFTH(_LONG X)    { return (X - ONE_FIFTH(X)); }

  inline _INT  THREE(_SHORT X)        { return (X + TWO(X)); }
  inline _INT  THREE(_INT X)          { return (X + TWO(X)); }
  inline _LONG THREE(_LONG X)         { return (X + TWO(X)); }

  inline _INT  FIVE(_SHORT X)         { return (X + FOUR(X)); }
  inline _INT  FIVE(_INT X)           { return (X + FOUR(X)); }
  inline _LONG FIVE(_LONG X)          { return (X + FOUR(X)); }

#else  /* !__cplusplus */
  #define  THREE_HALF(X)           ( (X) + ONE_HALF(X) )
  #define  FOUR_THIRD(X)           ( (X) + ONE_THIRD(X) )
  #define  THREE_FOURTH(X)         ( (X) - ONE_FOURTH(X) )
  #define  FIVE_FOURTH(X)          ( (X) + ONE_FOURTH(X) )
  #define  FOUR_FIFTH(X)           ( (X) - ONE_FIFTH(X) )

  #define  THREE(X)                ( (X) + TWO(X) )
  #define  FIVE(X)                 ( (X) + FOUR(X) )

#endif  /* !__cplusplus */

#define  TO_TWO_TIMES(X)         {(X) <<= 1;}
#define  TO_THREE_TIMES(X)       {(X) += ((X)<<1);}

/***************************************/

/*  Useful portable macros: */

#define  DX_RECT(rect)           ((rect).right - (rect).left)
#define  DY_RECT(rect)           ((rect).bottom - (rect).top)

#define  XMID_RECT(rect)         ONE_HALF((rect).left + (rect).right)
#define  YMID_RECT(rect)         ONE_HALF((rect).top + (rect).bottom)

#define  SWAP_SHORTS(w1,w2)      {_SHORT w; w=w1; w1=w2; w2=w;}
#define  SWAP_INTS(w1,w2)        {_INT w;   w=w1; w1=w2; w2=w;}

#define  EQ_SIGN(X,Y)            (((X)>=0) == ((Y)>=0))
#define  TO_ABS_VALUE(X)         {if  ((X) < 0)  (X) = -(X);}

#define  MEAN_OF(X,Y)            ONE_HALF((X) + (Y))

/***************************************/

/*  Useful macros for lower level: */

#define  MID_POINT(elem)        MEAN_OF(REF(elem)->ibeg,REF(elem)->iend)

#define  NO_ATTR_ASSIGNED(elem) (!(REF(elem)->attr))
#define  CLEAR_ATTR(elem)       {CHECK_PTR(elem); (elem)->attr = 0;}

#define  HEIGHT_OF(elem)        (REF(elem)->attr & _umd_)
#define  ASSIGN_HEIGHT(elem,h)  (elem)->attr = (REF(elem)->attr&(~_umd_)) | (((_UCHAR)(h))&_umd_) /*Should be ";"*/

#define  CIRCLE_DIR(elem)            (REF(elem)->attr & _fb_)
#define  CLOCKWISE(elem)             (CIRCLE_DIR(elem) == _f_)
#define  COUNTERCLOCKWISE(elem)      (CIRCLE_DIR(elem) == _b_)
#define  ASSIGN_CIRCLE_DIR(elem,FB)  (elem)->attr = (REF(elem)->attr&(~_fb_)) | (((_UCHAR)(FB))&_fb_) /*Should be ";"*/
#define  SET_CLOCKWISE(elem)         ASSIGN_CIRCLE_DIR(elem,_f_)
#define  SET_COUNTERCLOCKWISE(elem)  ASSIGN_CIRCLE_DIR(elem,_b_)

#define  SET_OVR(elem)        {CHECK_PTR(elem); (elem)->attr |= _OVR_;}
#define  CLEAR_OVR(elem)      {CHECK_PTR(elem); (elem)->attr &= (~_OVR_);}


#endif  /*CALCMACR_H*/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\dscr.h ===
#ifndef  DISCR_INCLUDED
  #define  DISCR_INCLUDED

  #include "bastypes.h"
  #include "param.h"


  // ******************************************************************* //


 _BOOL _FPREFIX Trace3DToDct ( _WORD nTrace, p_3DPOINT pTrace   ,
                               _WORD  Order, p_3DPOINT pCoeffs  ,
                               _WORD  nItr ,  _WORD    nFiltrItr,
                              p_LONG  pLam , p_LONG    pErr     , _BOOL  fCutTail );

 _BOOL _FPREFIX DctToCurve3D ( _WORD Order , p_3DPOINT pCfs     ,
                               _WORD Resam , p_3DPOINT pCrv     );
                                                              
  #endif // DISCR_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\const.h ===
/*************************************************************************/
  /*             CONSTANTS` DEFINITON OF LOW LEVELM SORTING OUT            */
  /*************************************************************************/

    #define           EPS0_SH            24         /*horisontal shelf     */
                                                    /*      radius         */
    #define           DLT0               4          /* current depth  of   */
                                                    /* crossings search    */
    #define           EPS_PY             35         /* max vertical and    */
                                                    /* horisontal sizes of */
    #define           EPS_PX             30         /* 'points'            */
                                                    /*                     */
    #define           EPS_ST             35         /* max stroke length   */
                                                    /*                     */
    #define           EPSA_ST            6          /* max stroke          */
                                                    /*  inclination        */
    #define           EPSR_ST            12         /* max integral        */
                                                    /* stroke curvature    */
    #define           EPS_Y              8          /* environs marking    */
                                                    /*out of extremums     */
    #define           EPS_X              10         /* preliminary marking */
                                                    /* out of shelves      */
    #define           EPS_SM             3          /*environs of marking  */
                                                 /*out of extremums on ends*/
    #define           EPSX_SH            40         /* min horizontal size */
                                                    /*       of shelves    */
    #define           EPSY_SH            3          /* half max vertical   */
                                                    /* shelves` size       */
    #define           EPSL_SH            25         /* max height of       */
                                                    /* shelves` pasting    */
    #define           HORDA              10         /* normalization chord */
                                                    /*                     */
    #define           EPS_F              32767      /* utmost distance     */
                                                    /* between points      */
                                                    /* common table        */
    #define           A0                 12         /* max utmost value    */
                                                    /* of spatial environs */
                                                    /*                     */
    #define           B0                 2       /* coefficient of exponent*/
                                                    /* growth              */
    #define           LF0                32      /* ending point of limit`s*/
                                                    /* environs growth     */
    #define           LZ0                8          /* restricted area of  */
                                                    /* crossings           */
    #define           A1                 14         /* table for open      */
                                                    /* crossings           */
    #define           B1                 25         /*                     */
                                                    /*                     */
    #define           LF1                32         /*                     */
                                                    /*                     */
    #define           LZ1                6          /*                     */
                                                    /*                     */
    #define           A2                 10         /*  table for breaks   */
                                                    /*                     */
    #define           B2                 35         /*                     */
                                                    /*                     */
    #define           LF2                12         /*                     */
                                                    /*                     */
    #define           LZ2                2          /*                     */
                                                    /*  tables for ends    */
    #define           A3                 10         /*                     */
                                                    /*                     */
    #define           B3                 35         /*                     */
                                                    /*                     */
    #define           LF3                8          /*                     */
                                                    /*                     */
    #define           LZ3                0          /*                     */
                                                    /*                     */
    #define           NSR                260        /* max possible number */
                                                    /* of points in letter */
    #define           J_STEP             1          /*                     */
                                                    /*                     */
    #define           I_STEP             1          /*                     */
                                                    /*                     */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\div_let.h ===
/***************************************************************************/
/* This file contains data structures and prototypes, needed for learning  */
/* interface (it means to display, which part of trajectory belongs to     */
/* the each letter in the answer). Functions connect_trajectory_and_answers*/
/* and connect_trajectory_and_letter will help you                         */
/* (see description of them in module div_let.c)                           */
/***************************************************************************/

#ifndef DIV_LET_H_INCLUDED
#define DIV_LET_H_INCLUDED

#include "ams_mg.h"

#define  MAX_PARTS_IN_LETTER  8

typedef struct {                     /* information about part of letter */
                 _SHORT ibeg;        /* the beginning of the letter      */
                 _SHORT iend;        /* the end of the letter            */
               } Part_of_letter;

typedef  Part_of_letter _PTR pPart_of_letter;

typedef struct {                                    /* output structure  */
                 _UCHAR num_parts_in_letter[w_lim]; /* number of parts   */
                                                    /* in letter         */
                 Part_of_letter Parts_of_letters[w_lim*MAX_PARTS_IN_LETTER];  /* pointer on beg and*/
                                                    /* end of parts      */
               } Osokin_output;

typedef Osokin_output _PTR pOsokin_output;

_SHORT connect_trajectory_and_answers(xrd_el_type _PTR xrdata,
                                      rec_w_type _PTR rec_word,
                                      pOsokin_output pOutputData);
_SHORT connect_trajectory_and_letter(xrd_el_type _PTR xrdata,
                                     _SHORT ibeg_xr, _SHORT iend_xr,
                                     p_SHORT num_parts,pPart_of_letter pParts);

#endif // DIV_LET_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\dti.h ===
/* ***************************************************************************** */
/* * DTI header file  Created 12/3/1993  AVP   Last modified 3/30/1998         * */
/* ***************************************************************************** */

#ifndef DTI_H_INCLUDED
#define DTI_H_INCLUDED

#include "ams_mg.h"

/* -------------------------- Defines for DTI ---------------------------------- */

#ifdef DTI_COMPRESSED_ON
 #define DTI_COMPRESSED      1    /* Define to enable use of DTI in compr form  */
#else
 #define DTI_COMPRESSED      0    /* Define to enable use of DTI in compr form  */
#endif

#if defined PEGASUS && !defined PSR_DLL
 #define DTI_LRN_SUPPORTFUNC  1    /* Enables functions supporting DTI learning  */
 #define DTI_LOAD_FROM_ROM    1    /* Initialize DTI from linked-in resource     */
 #define DTILRN_FLY_LEARN     0      /* Enable Fly Learn functions         */
#else
 #ifndef DTI_LRN_SUPPORTFUNC
  #define DTI_LRN_SUPPORTFUNC 1    /* Enables functions supporting DTI learning  */
 #endif
 #ifndef DTI_LOAD_FROM_ROM
  #define DTI_LOAD_FROM_ROM    0   /* Initialize DTI from linked-in resource     */
 #endif
 #ifndef DTILRN_FLY_LEARN
  #define DTILRN_FLY_LEARN     1   /* Enable Fly Learn functions         */
 #endif
#endif

/* -------------------------- Defines for DTI -------------------------------- */

#define XT_COUNT            64                   /* Number of Type elements      */
#define XZ_COUNT            16                   /* Number of sizes              */
#define XH_COUNT            16                   /* Number of Height values      */
#define XS_COUNT            16                   /* Number of Shift values       */
#define XO_COUNT            32                   /* Number of Orientation values */

#define XR_COUNT           XT_COUNT

#define DTI_XTB_SIZE     (XT_COUNT/2)            /* Size of dti buffer for XR  */
#define DTI_XZB_SIZE     (XZ_COUNT/2)            /* Size of dti buffer for XZ  */
#define DTI_XHB_SIZE     (XH_COUNT/2)            /* Size of dti buffer for H values */
#define DTI_XSB_SIZE     (XS_COUNT/2)            /* Size of dti buffer for S values */
#define DTI_XOB_SIZE     (XO_COUNT/2)            /* Size of dti buffer for O values */

#define DTI_MAXVARSPERLET   16                   /* How many vars each letter has */
#define DTI_FIRSTSYM        32                   /* First definable DTI sym    */
#define DTI_XR_SIZE         12                   /* Max length of DTI prototype*/

#define DTI_XT_PALETTE_SIZE 256                  /* Number of vectors in 'type' palette */
#define DTI_XZ_PALETTE_SIZE 256                  /* Number of vectors in 'size' palette */
#define DTI_XH_PALETTE_SIZE 256                  /* Number of vectors in 'height' palette */
#define DTI_XS_PALETTE_SIZE 256                  /* Number of vectors in 'shift' palette */
#define DTI_XO_PALETTE_SIZE 256                  /* Number of vectors in 'orient' palette */

#define DTI_XT_LSB         0x01                  /* LSB bit of pallete num (select of upper/lower half)  */
#define DTI_XH_LSB         0x02                  /* LSB bit of pallete num (select of upper/lower half)  */
#define DTI_XS_LSB         0x04                  /* LSB bit of pallete num (select of upper/lower half)  */
#define DTI_XZ_LSB         0x08                  /* LSB bit of pallete num (select of upper/lower half)  */
#define DTI_XO_LSB         0x10                  /* LSB bit of pallete num (select of upper/lower half)  */

#define ST_CONV_RANGE      128
#define DTI_NUMSYMBOLS    (128+72-DTI_FIRSTSYM)  /* How many letters in DTI    */

#if DTI_COMPRESSED
 #define DTI_DTI_OBJTYPE   "DTI5"                /* Object type of current DTI */
 #define DTI_DTI_VER       "1.02"                /* Version of current DTI */
#else
 #define DTI_DTI_OBJTYPE   "DTI4"                /* Object type of current DTI */
 #define DTI_DTI_VER       "2.00"                /* Version of current DTI */
#endif

#define DTI_DTI_TYPE      "EngM"                 /* Object type of current DTI */
#define DTI_ID_LEN          4                    /* LEngth of ID string in DTI */
#define DTI_FNAME_LEN      32                    /* Pathname of dti len        */

#define DTI_CAP_BIT        0x01                  /* Var capitalization flagiting */
#define DTI_PICT_OFS        1                    /* Offset from right of picture group */
#define DTI_OFS_WW          4                    /* Offset from right of WritingWay field in var_veis */
#define DTI_RESTRICTED_SET 0x10                  /* Veis flag of restricted prototype set */
#define DTI_VEX_MASK       0xF0                  /* Vex mask */
#define DTI_VEX_OFFS        4                    /* Offset of vex in var header */
#define DTI_NXR_MASK       0x0F                  /* Mask of num var field */
#define DTI_XRTYPE_OFFS     4                    /* Offset of XR type high bits in xrp->penl field*/
#define DTI_PENL_MASK      0x0F                  /* Mask of penl ion xrp->penl field*/

#define DTI_SIZEOFVEXT (DTI_NUMSYMBOLS*DTI_MAXVARSPERLET*sizeof(_UCHAR))  // Size of learn vex table
#define DTI_SIZEOFCAPT (DTI_NUMSYMBOLS*DTI_MAXVARSPERLET/8)               // Size of capitalization table

/* ---------------- Definitions for OS to REC conversions ------------------ */

#define REC_BritishPound    ((_UCHAR)0x7f)
#define REC_A_umlaut        ((_UCHAR)0x80)
#define REC_a_umlaut        ((_UCHAR)0x81)
#define REC_O_umlaut        ((_UCHAR)0x82)
#define REC_o_umlaut        ((_UCHAR)0x83)
#define REC_U_umlaut        ((_UCHAR)0x84)
#define REC_u_umlaut        ((_UCHAR)0x85)
#define REC_ESZET           ((_UCHAR)0x86)

#define REC_A_grave         ((_UCHAR)0x87)
#define REC_a_grave         ((_UCHAR)0x88)
#define REC_A_circumflex    ((_UCHAR)0x89)
#define REC_a_circumflex    ((_UCHAR)0x8a)
#define REC_C_cedilla       ((_UCHAR)0x8b)
#define REC_c_cedilla       ((_UCHAR)0x8c)
#define REC_E_grave         ((_UCHAR)0x8d)
#define REC_e_grave         ((_UCHAR)0x8e)
#define REC_E_acute         ((_UCHAR)0x8f)
#define REC_e_acute         ((_UCHAR)0x90)
#define REC_E_circumflex    ((_UCHAR)0x91)
#define REC_e_circumflex    ((_UCHAR)0x92)
#define REC_I_circumflex    ((_UCHAR)0x93)
#define REC_i_circumflex    ((_UCHAR)0x94)
#define REC_I_umlaut        ((_UCHAR)0x95)
#define REC_i_umlaut        ((_UCHAR)0x96)
#define REC_O_circumflex    ((_UCHAR)0x97)
#define REC_o_circumflex    ((_UCHAR)0x98)
#define REC_U_grave         ((_UCHAR)0x99)
#define REC_u_grave         ((_UCHAR)0x9a)
#define REC_U_circumflex    ((_UCHAR)0x9b)
#define REC_u_circumflex    ((_UCHAR)0x9c)
#define REC_e_umlaut        ((_UCHAR)0x9d)
#define REC_DIV_sign        ((_UCHAR)0x9e)
#define REC_n_numero        ((_UCHAR)0x9f)

#define REC_A_angstrem      ((_UCHAR)0xa0)
#define REC_a_angstrem      ((_UCHAR)0xa1)
#define REC_Yenn_sign       ((_UCHAR)0xa2)

#define REC_DblBrace_left   ((_UCHAR)0xa3)
#define REC_DblBrace_right  ((_UCHAR)0xa4)
//#define REC_Paragraph_sign  ((_UCHAR)0xa5)
#define REC_Copyright_sign  ((_UCHAR)0xa5)

#define REC_Y_umlaut        ((_UCHAR)0xa6)
#define REC_y_umlaut        ((_UCHAR)0xa7)
#define REC_N_tilda         ((_UCHAR)0xa8)
#define REC_n_tilda         ((_UCHAR)0xa9)

//#define REC_Cent_sign       ((_UCHAR)0xaa)
#define REC_TradeName_sign  ((_UCHAR)0xaa)

#define REC_Question_inv    ((_UCHAR)0xab)
#define REC_Exclamation_inv ((_UCHAR)0xac)

#define REC_A_acute         ((_UCHAR)0xad)
#define REC_a_acute         ((_UCHAR)0xae)
#define REC_I_acute         ((_UCHAR)0xaf)
#define REC_i_acute         ((_UCHAR)0xb0)
#define REC_I_grave         ((_UCHAR)0xb1)
#define REC_i_grave         ((_UCHAR)0xb2)
#define REC_O_acute         ((_UCHAR)0xb3)
#define REC_o_acute         ((_UCHAR)0xb4)
#define REC_O_grave         ((_UCHAR)0xb5)
#define REC_o_grave         ((_UCHAR)0xb6)
#define REC_U_acute         ((_UCHAR)0xb7)
#define REC_u_acute         ((_UCHAR)0xb8)
#define REC_A_tilda         ((_UCHAR)0xb9)
#define REC_a_tilda         ((_UCHAR)0xba)
#define REC_O_tilda         ((_UCHAR)0xbb)
#define REC_o_tilda         ((_UCHAR)0xbc)
#define REC_E_umlaut        ((_UCHAR)0xbd)
#define REC_oe_letter       ((_UCHAR)0xbe)
#define REC_OE_letter       ((_UCHAR)0xbf)
#define REC_euro_currency	((unsigned char)0xc0)

/*  These definitions are for Windows OS: */

#define OS_euro_currency   ((unsigned char)0x80)
#define OS_BritishPound    ((unsigned char)0xa3)
#define OS_A_umlaut        ((unsigned char)0xc4)
#define OS_a_umlaut        ((unsigned char)0xe4)
#define OS_O_umlaut        ((unsigned char)0xd6)
#define OS_o_umlaut        ((unsigned char)0xf6)
#define OS_U_umlaut        ((unsigned char)0xdc)
#define OS_u_umlaut        ((unsigned char)0xfc)
#define OS_ESZET           ((unsigned char)0xdf)

#define OS_A_grave         ((unsigned char)0xc0)
#define OS_a_grave         ((unsigned char)0xe0)
#define OS_A_circumflex    ((unsigned char)0xc2)
#define OS_a_circumflex    ((unsigned char)0xe2)
#define OS_C_cedilla       ((unsigned char)0xc7)
#define OS_c_cedilla       ((unsigned char)0xe7)
#define OS_E_grave         ((unsigned char)0xc8)
#define OS_e_grave         ((unsigned char)0xe8)
#define OS_E_acute         ((unsigned char)0xc9)
#define OS_e_acute         ((unsigned char)0xe9)
#define OS_E_circumflex    ((unsigned char)0xca)
#define OS_e_circumflex    ((unsigned char)0xea)
#define OS_I_circumflex    ((unsigned char)0xce)
#define OS_i_circumflex    ((unsigned char)0xee)
#define OS_I_umlaut        ((unsigned char)0xcf)
#define OS_i_umlaut        ((unsigned char)0xef)
#define OS_O_circumflex    ((unsigned char)0xd4)
#define OS_o_circumflex    ((unsigned char)0xf4)
#define OS_U_grave         ((unsigned char)0xd9)
#define OS_u_grave         ((unsigned char)0xf9)
#define OS_U_circumflex    ((unsigned char)0xdb)
#define OS_u_circumflex    ((unsigned char)0xfb)
#define OS_e_umlaut        ((unsigned char)0xeb)
//#define OS_N_numero        ((unsigned char)0xaa)
//#define OS_n_numero        ((unsigned char)0xba)

#define OS_A_angstrem      ((unsigned char)0xc5)
#define OS_a_angstrem      ((unsigned char)0xe5)

#define OS_Yenn_sign       ((unsigned char)0xa5)

#define OS_DblBrace_left   ((unsigned char)0xab)
#define OS_DblBrace_right  ((unsigned char)0xbb)
//#define OS_Paragraph_sign  ((unsigned char)0xb6)

#define OS_Copyright_sign  ((unsigned char)0xa9)

#define OS_Y_umlaut        ((unsigned char)0x9f)
#define OS_y_umlaut        ((unsigned char)0xff)
#define OS_N_tilda         ((unsigned char)0xd1)
#define OS_n_tilda         ((unsigned char)0xf1)

//#define OS_Cent_sign       ((unsigned char)0xa2)

#define OS_TradeName_sign  ((unsigned char)0xae)

#define OS_Question_inv    ((unsigned char)0xbf)
#define OS_Exclamation_inv ((unsigned char)0xa1)

#define OS_A_acute         ((unsigned char)0xc1)
#define OS_a_acute         ((unsigned char)0xe1)
#define OS_I_acute         ((unsigned char)0xcd)
#define OS_i_acute         ((unsigned char)0xed)
#define OS_I_grave         ((unsigned char)0xcc)
#define OS_i_grave         ((unsigned char)0xec)
#define OS_O_acute         ((unsigned char)0xd3)
#define OS_o_acute         ((unsigned char)0xf3)
#define OS_O_grave         ((unsigned char)0xd2)
#define OS_o_grave         ((unsigned char)0xf2)
#define OS_U_acute         ((unsigned char)0xda)
#define OS_u_acute         ((unsigned char)0xfa)
#define OS_A_tilda         ((unsigned char)0xc3)
#define OS_a_tilda         ((unsigned char)0xe3)
#define OS_O_tilda         ((unsigned char)0xd5)
#define OS_o_tilda         ((unsigned char)0xf5)
#define OS_E_umlaut        ((unsigned char)0xcb)
#define OS_oe_letter       ((unsigned char)0x9c)
#define OS_OE_letter       ((unsigned char)0x8c)
#define OS_ae_letter       ((unsigned char)198)
#define OS_AE_letter       ((unsigned char)230)

#define OS_MUL_sign        ((unsigned char)215)
#define OS_DIV_sign        ((unsigned char)247)

#define OS_O_crossed       ((unsigned char)216)
#define OS_o_crossed       ((unsigned char)248)

#define OS_Y_acute         ((unsigned char)221)
#define OS_y_acute         ((unsigned char)253)


//#if  0 /*Macintosh definitions - don't use them for now */

/* Definitions for OS (Macintosh Roman) FOR_INTERNATIONAL characters */

#define MAC_euro_currency    ((_UCHAR)0xf0)			// FIXME or do we care ??? MR, april 2000
#define MAC_BritishPound     ((_UCHAR)0xa3)
#define MAC_A_umlaut         ((_UCHAR)0x80)
#define MAC_a_umlaut         ((_UCHAR)0x8a)
#define MAC_O_umlaut         ((_UCHAR)0x85)
#define MAC_o_umlaut         ((_UCHAR)0x9a)
#define MAC_U_umlaut         ((_UCHAR)0x86)
#define MAC_u_umlaut         ((_UCHAR)0x9f)
#define MAC_ESZET            ((_UCHAR)0xa7)

#define MAC_A_grave          ((_UCHAR)0xcb)
#define MAC_a_grave          ((_UCHAR)0x88)
#define MAC_A_circumflex     ((_UCHAR)0xe5)
#define MAC_a_circumflex     ((_UCHAR)0x89)
#define MAC_C_cedilla        ((_UCHAR)0x82)
#define MAC_c_cedilla        ((_UCHAR)0x8d)
#define MAC_E_grave          ((_UCHAR)0xe9)
#define MAC_e_grave          ((_UCHAR)0x8f)
#define MAC_E_acute          ((_UCHAR)0x83)
#define MAC_e_acute          ((_UCHAR)0x8e)
#define MAC_E_circumflex     ((_UCHAR)0xe6)
#define MAC_e_circumflex     ((_UCHAR)0x90)
#define MAC_I_circumflex     ((_UCHAR)0xeb)
#define MAC_i_circumflex     ((_UCHAR)0x94)
#define MAC_I_umlaut         ((_UCHAR)0xec)
#define MAC_i_umlaut         ((_UCHAR)0x95)
#define MAC_O_circumflex     ((_UCHAR)0xef)
#define MAC_o_circumflex     ((_UCHAR)0x99)
#define MAC_U_grave          ((_UCHAR)0xf4)
#define MAC_u_grave          ((_UCHAR)0x9d)
#define MAC_U_circumflex     ((_UCHAR)0xf3)
#define MAC_u_circumflex     ((_UCHAR)0x9e)
#define MAC_e_umlaut         ((_UCHAR)0x91)
#define MAC_N_numero         ((_UCHAR)0xbb)
#define MAC_n_numero         ((_UCHAR)0xbc)

#define MAC_A_angstrem       ((_UCHAR)0x81)
#define MAC_a_angstrem       ((_UCHAR)0x8c)
#define MAC_Yenn_sign        ((_UCHAR)0xb4)

#define MAC_DblBrace_left    ((_UCHAR)0xc7)
#define MAC_DblBrace_right   ((_UCHAR)0xc8)
//#define MAC_Paragraph_sign   ((_UCHAR)0xa6)

#define MAC_Y_umlaut         ((_UCHAR)0xd9)
#define MAC_y_umlaut         ((_UCHAR)0xd8)
#define MAC_N_tilda          ((_UCHAR)0x84)
#define MAC_n_tilda          ((_UCHAR)0x96)

//#define MAC_Cent_sign        ((_UCHAR)0xa2)
#define MAC_Question_inv     ((_UCHAR)0xc0)
#define MAC_Exclamation_inv  ((_UCHAR)0xc1)

#define MAC_A_acute          ((_UCHAR)0xe7)
#define MAC_a_acute          ((_UCHAR)0x87)
#define MAC_I_acute          ((_UCHAR)0xea)
#define MAC_i_acute          ((_UCHAR)0x92)
#define MAC_I_grave          ((_UCHAR)0xed)
#define MAC_i_grave          ((_UCHAR)0x93)
#define MAC_O_acute          ((_UCHAR)0xee)
#define MAC_o_acute          ((_UCHAR)0x97)
#define MAC_O_grave          ((_UCHAR)0xf1)
#define MAC_o_grave          ((_UCHAR)0x98)
#define MAC_U_acute          ((_UCHAR)0xf2)
#define MAC_u_acute          ((_UCHAR)0x9c)
#define MAC_A_tilda          ((_UCHAR)0xcc)
#define MAC_a_tilda          ((_UCHAR)0x8b)
#define MAC_O_tilda          ((_UCHAR)0xcd)
#define MAC_o_tilda          ((_UCHAR)0x9b)
#define MAC_E_umlaut         ((_UCHAR)0xe8)
#define MAC_oe_letter        ((_UCHAR)0xcf)
#define MAC_OE_letter        ((_UCHAR)0xce)

#define MAC_Copyright_sign   ((_UCHAR)0xa9)
#define MAC_TradeName_sign   ((_UCHAR)0xa8)
#define MAC_Y_acute          ((_UCHAR)0)
#define MAC_y_acute          ((_UCHAR)0)

//#endif  /*Macintosh definitions - don't use them for now */

/* ------------------- Defines for ROM tables -------------------------------- */

#if defined (FOR_FRENCH)
    #define CAP_TABLE_NUM_LET   1
    #define CAP_TABLE_NUM_VAR   1
#elif defined (FOR_GERMAN)
    #define CAP_TABLE_NUM_LET   30
    #define CAP_TABLE_NUM_VAR   9
#elif defined (FOR_INTERNATIONAL)
    #define CAP_TABLE_NUM_LET   1
    #define CAP_TABLE_NUM_VAR   1
#elif defined (FOR_SWED)
    #define CAP_TABLE_NUM_LET   29
    #define CAP_TABLE_NUM_VAR   9
#else
    #define CAP_TABLE_NUM_LET   26
    #define CAP_TABLE_NUM_VAR   9
#endif

/* -------------------------- Types definitions ------------------------------ */

typedef _UCHAR  cap_table_type[CAP_TABLE_NUM_LET][CAP_TABLE_NUM_VAR];

typedef _UCHAR  dti_xrt_type[XT_COUNT][XT_COUNT/2];/* Reference XR Corr table */
typedef dti_xrt_type _PTR p_dti_xrt_type;

typedef struct {                                 /* Header of DTI file         */
                _CHAR  object_type[DTI_ID_LEN];  /* Type file (now DTI1)       */
                _CHAR  type[DTI_ID_LEN];         /* Type of DTI (EngM, EngP..) */
                _CHAR  version[DTI_ID_LEN];      /* Version number             */

                _ULONG dte_offset;               /* File offset of DTE part    */
                _ULONG dte_len;                  /* Length of DTE part of data */
                _ULONG dte_chsum;                /* Checksum of DTE part       */

                _ULONG xrt_offset;               /* File offset of XRT part    */
                _ULONG xrt_len;                  /* Length of XRT part of data */
                _ULONG xrt_chsum;                /* Checksum of XRT part       */

                _ULONG pdf_offset;               /* Start of PDF part in DTI   */
                _ULONG pdf_len;                  /* Length of PDF part         */
                _ULONG pdf_chsum;                /* ChekSum of PDF part        */

                _ULONG pict_offset;              /* Offset of pictures from the beg of DTI file */
                _ULONG pict_len;                 /* Length of pictures         */
                _ULONG pict_chsum;               /* CheckSum of pictures       */
               } dti_header_type, _PTR p_dti_header_type;

typedef struct {                                 /* DTI memory descriptor      */
                _CHAR  dti_fname[DTI_FNAME_LEN]; /* File name of loaded DTI    */
                _CHAR  object_type[DTI_ID_LEN];  /* Type file (now DTI1)       */
                _CHAR  type[DTI_ID_LEN];         /* Type of DTI (EngM, EngP..) */
                _CHAR  version[DTI_ID_LEN];      /* Version number             */

                _ULONG h_dte;                    /* Handle of dte memory       */
               p_UCHAR p_dte;                    /* Pointer to locked dte mem  */
                _ULONG h_ram_dte;                /* Handle of dte memory       */
               p_UCHAR p_ram_dte;                /* Pointer to RAM dte addresses */
                _ULONG dte_chsum;                /* CheckSum of dte memory     */
                _ULONG h_vex;                    /* Handle of vex learning buffer */
               p_UCHAR p_vex;                    /* Pointer of vex learning buffer */

                _ULONG h_xrt;                    /* Handle of reference xrtabl */
               p_UCHAR p_xrt;                    /* Pointer to locked xrtabl   */
                _ULONG xrt_chsum;                /* CheckSum of xrtabl memory  */

                _ULONG h_pdf;                    /* Same for pdf */
               p_UCHAR p_pdf;
               p_UCHAR p_ram_pdf;
                _ULONG pdf_chsum;

                _ULONG h_pict;                   /* Same for pictures */
               p_UCHAR p_pict;
               p_UCHAR p_ram_pict;
                _ULONG pict_chsum;

//               #if HWR_SYSTEM != MACINTOSH
//                 #define  LRM_FNAME_LEN  128
//
//                 _CHAR         szLrmName[LRM_FNAME_LEN];
//                 _BOOL         bLoadLRM;
//                 _BOOL         bSaveLRM;
//               #endif /*HWR_SYSTEM != MACINTOSH*/

               } dti_descr_type, _PTR p_dti_descr_type;

#if DTI_COMPRESSED // ------------- Compressed DTI header -____--------------

typedef struct {
                _ULONG  len;
                _USHORT sym_index[256];
                _UCHAR  xt_palette[DTI_XT_PALETTE_SIZE][XT_COUNT];
                _UCHAR  xz_palette[DTI_XZ_PALETTE_SIZE][XZ_COUNT];
                _UCHAR  xh_palette[DTI_XH_PALETTE_SIZE][XH_COUNT];
                _UCHAR  xs_palette[DTI_XS_PALETTE_SIZE][XS_COUNT];
                _UCHAR  xo_palette[DTI_XO_PALETTE_SIZE][XO_COUNT];
               } dte_index_type, _PTR p_dte_index_type;

typedef struct {                                 /* Prototype XR element definition */
                _UCHAR type;                     /* Temp: main type definition   */
//                _UCHAR height;                   /* Temp: main h of xr         */
                _UCHAR attr;                     /* Attributes (flag bits)     */
                _UCHAR penl;                     /* Penalty value for element  */
                _UCHAR xtc;                      /* Type(64) Line of XR corr vaues      */
                _UCHAR xhc;                      /* Height(16) Line of H corr values      */
                _UCHAR xsc;                      /* Shift(16) Line of S corr values      */
                _UCHAR xzc;                      /* Size(16) Line of Z corr vaues      */
                _UCHAR xoc;                      /* Orientation(16) of O corr values      */
               } xrp_type, _PTR p_xrp_type;

typedef struct {                                 /* Header of prototype in DTI */
                _UCHAR nx_and_vex;               /* Num xrs and VarExtraInfo   */
                _UCHAR veis;                     /* Additional VEXs            */
                _UCHAR pos;                      /* Box relative position      */
                _UCHAR size;                     /* Box relative size          */
              xrp_type xrs[1];                   /* Prototype XRs              */
               } dte_var_header_type, _PTR p_dte_var_header_type;

typedef struct {                                 /* Header of symbol in DTI    */
                _UCHAR num_vars;                 /* Number of variants of sym  */
                _UCHAR loc_vs_border;            /* Sym location vs border     */
                _UCHAR let;                      /* Temp: symbol itself        */
                _UCHAR language;                 /* Temp: language of symbol   */
               } dte_sym_header_type, _PTR p_dte_sym_header_type;

#else // ------------- Not compressed DTI header ----------------------------

typedef _ULONG let_table_type[256];             /* Header of DTE (sym loc table) */
typedef let_table_type _PTR p_let_table_type;

typedef struct {                                 /* Header of symbol in DTI    */
                _UCHAR num_vars;                 /* Number of variants of sym  */
                _UCHAR loc_vs_border;            /* Sym location vs border */
                _UCHAR let;                      /* Temp: symbol itself        */
                _UCHAR language;                 /* Temp: language of symbol   */
                _UCHAR var_lens[DTI_MAXVARSPERLET];  /* Array of var lens          */
                _UCHAR var_vexs[DTI_MAXVARSPERLET];  /* Array of VarExtraInfo's    */
                _UCHAR var_veis[DTI_MAXVARSPERLET];  /* Array of Additional VEXs   */
                _UCHAR var_pos[DTI_MAXVARSPERLET];  /* Array of Additional VEXs   */
                _UCHAR var_size[DTI_MAXVARSPERLET];  /* Array of Additional VEXs   */
               } dte_sym_header_type, _PTR p_dte_sym_header_type;

typedef struct {                                 /* Prototype XR element definition */
                _UCHAR type;                     /* Temp: main type definition   */
                _UCHAR height;                   /* Temp: main h of xr         */
                _UCHAR attr;                     /* Attributes (flag bits)     */
                _UCHAR penl;                     /* Penalty value for element  */
                _UCHAR xtc[DTI_XTB_SIZE];        /* Type(64) Line of XR corr vaues      */
                _UCHAR xhc[DTI_XHB_SIZE];        /* Height(16) Line of H corr values      */
                _UCHAR xsc[DTI_XSB_SIZE];        /* Shift(16) Line of S corr values      */
                _UCHAR xzc[DTI_XZB_SIZE];        /* Size(16) Line of Z corr vaues      */
                _UCHAR xoc[DTI_XOB_SIZE];        /* Orientation(16) of O corr values      */
               } xrp_type, _PTR p_xrp_type;

#endif // ------------- Not compressed DTI header ----------------------------

typedef struct {
                 _USHORT len;      /* length of groups' descriptions */
                 _UCHAR symbol;   /* ASCII code of symbol           */
                 _UCHAR num_groups; /* number of groups             */
                 /* groups are placed  after this header */
               } pict_symb_header_type, _PTR p_pict_symb_header_type;

typedef struct {
                 _USHORT len;      /* length of pictures' descriptions */
                 _UCHAR groupno;  /* number of group                  */
                 _UCHAR num_pictures; /* number of groups             */
                 /* pictures are placed  after this header */
                } pict_group_header_type, _PTR p_pict_group_header_type;

typedef struct {
                 _USHORT len;      /* length of pictures' descriptions */
                 /* traces are placed  after this header */
               } pict_picture_header_type, _PTR p_pict_picture_header_type;

typedef struct {
                 _UCHAR x;
                 _UCHAR y;
               } pict_point_type, _PTR p_pict_point_type;

typedef _UCHAR dte_vex_type[DTI_NUMSYMBOLS][DTI_MAXVARSPERLET];/* Type for learning vex buffer */
typedef dte_vex_type _PTR p_dte_vex_type;          /* Type for learning vex buffer */

/* -------------------------- Prototypes ------------------------------------- */

#ifdef DTE_CONVERTER

#define  dti_load         dti_load_2
#define  dti_unload       dti_unload_2
#define  dti_save         dti_save_2
#define  dti_lock         dti_lock_2
#define  dti_unlock       dti_unlock_2

#define  LetXrLength      LetXrLength_2

#define  GetNumVarsOfChar GetNumVarsOfChar_2
#define  GetVarOfChar     GetVarOfChar_2
#define  GetVarLenOfChar  GetVarLenOfChar_2
#define  GetVarVex        GetVarVex_2
#define  GetVarExtra      GetVarExtra_2
#define  SetVarVex        SetVarVex_2
#define  SetDefVexes      SetDefVexes_2
#define  SetVarCounter    SetVarCounter_2
#define  GetVarGroup      GetVarGroup_2

#define  OSToRec          OSToRec_2
#define  RecToOS          RecToOS_2

#endif // DTE_CONVERTER

_INT     dti_load(p_CHAR dtiname, _INT what_to_load, p_VOID _PTR dp);
_INT     dti_unload(p_VOID _PTR dp);
_INT     dti_save(p_CHAR fname, _INT what_to_save, p_VOID dp);
_INT     dti_lock(p_VOID dti_ptr);
_INT     dti_unlock(p_VOID dti_ptr);

//#if  PG_DEBUG
//_VOID  LoadLRMIfAny( p_dti_descr_type dti_descr,
//                     _CHAR szLrmName[LRM_FNAME_LEN],
//                     _BOOL bLoadLRM, _BOOL bSaveLRM );
//#endif  /*PG_DEBUG*/

_VOID    LetXrLength(p_UCHAR min, p_UCHAR max, _SHORT let, _VALUE hdte);

_INT     CheckVarActive(_UCHAR chIn, _UCHAR nv, _UCHAR ww, p_VOID dtp);
_INT     GetNumVarsOfChar(_UCHAR chIn, p_VOID dtp);
_INT     GetVarOfChar(_UCHAR chIn, _UCHAR nv, p_xrp_type xvb, p_VOID dtp);
_INT     GetVarLenOfChar(_UCHAR chIn, _UCHAR nv, p_VOID dtp);
_INT     GetVarVex(_UCHAR chIn, _UCHAR nv, p_VOID dtp);
_INT     GetVarExtra(_UCHAR chIn, _UCHAR nv, p_VOID dtp);
_INT     SetVarVex(_UCHAR chIn, _UCHAR nv, _UCHAR vex, p_VOID dtp);
_INT     SetDefVexes(p_VOID dtp);
_INT     SetVarCounter(_UCHAR chIn, _UCHAR nv, _UCHAR cnt, p_VOID dtp);
_INT     GetVarGroup(_UCHAR chIn, _UCHAR nv, p_VOID dtp);

_INT     GetPairCapGroup(_UCHAR let, _UCHAR groupNum, _UCHAR EnableVariantSet);
_INT     SetDefCaps(p_VOID dtp);
_INT     SetVarCap(_UCHAR chIn, _UCHAR nv, _UCHAR cap, p_VOID dtp);
_INT     GetVarCap(_UCHAR chIn, _UCHAR nv, p_VOID dtp);
_INT     GetVarRewcapAllow(_UCHAR chIn, _UCHAR nv, p_VOID dtp);

_INT     GetAutoCorr(_UCHAR chIn, _UCHAR nv, p_VOID dtp);
_INT     GetShiftCorr(_UCHAR chIn, _UCHAR nv,_UCHAR nXr, _UCHAR nIn, p_VOID dtp);
_INT     GetSymDescriptor(_UCHAR sym, _UCHAR numv, p_dte_sym_header_type _PTR psfc, p_VOID dtp);
_INT     GetVarPosSize(_UCHAR chIn, _UCHAR nv, p_VOID dtp);
#if DTI_COMPRESSED
_INT     GetSymIndexTable(_UCHAR sym, _UCHAR numv, p_dte_index_type _PTR pi, p_VOID dtp);
_INT     GetVarHeader(_UCHAR sym, _UCHAR var_num, p_dte_var_header_type _PTR ppvh, p_VOID dtp);
#endif
/* ---------------- Definitions for OS to REC conversions ------------------ */

#ifdef __cplusplus
extern "C" {
#endif
_INT     OSToRec(_INT sym);
_INT     RecToOS(_INT sym);
_INT     MacToOS(_INT sym);
_INT     OSToMac(_INT sym);
#ifdef __cplusplus
}
#endif

/* ------------------------------------------------------------------------- */
 /*  For FOR_INTERNATIONAL versions: changes the os-rec table */
 /* and charset used:                                     */

#define  TBL_AMERICAN       0
#define  TBL_FOR_INTERNATIONAL  1
#define  TBL_INTER_NODIACR  2

_VOID  SetOsRecTableAndCharSet( _INT interTable );
_INT   SetFOR_INTERNATIONALCharSet( _INT interTable, p_VOID rcv, p_VOID xrd );

/* --------------------------------------------------------------------------- */

#endif
/* ************************************************************************ */
/* * End Of All ...                                                       * */
/* ************************************************************************ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\def.h ===
/*************************************************************************/
  /*                       .                              */
  /*************************************************************************/

#ifndef _DEF_H_
#define _DEF_H_

    #define           COLORSMALLGAM       3         /* Small gammas colour */
                                                    /*                     */
    #define           COLORGAM            2         /* Gammas colour.      */
                                                    /*                     */
    #define           COLORCIRCLE         7         /* Circles colour.     */
                                                    /*                     */
    #define           COLORMAX            9         /* Maximums colour .   */
                                                    /*                     */
    #define           COLORMAXN           3         /* Maximums colour .   */
                                                    /*                     */
    #define           COLORMIN           13         /* Minimums colour.    */
                                                    /*                     */
    #define           COLORMINN           5         /* Minimums colour.    */
                                                    /*                     */
    #define           COLORC             12         /* Intersections colour*/
                                                    /*                     */
    #define           COLOR              15         /* Main colour .       */
                                                    /*                     */
    #define           COLORSH            10         /* Shelves colour .    */
                                                    /*                     */
    #define           COLORT             14         /* Strokes colour .    */
                                                    /*                     */
    #define           COLORP             11         /* Strokes colour .    */
                                                    /*                     */
    #define           COLORAN             2         /* Angles colour .     */

    #define           COLORB              9         /* It's necessary...   */

                                                    /*                     */
    #define  COLOR_FON         2                    /* background colour   */
    #define  COLOR_UP          0                    /* upper screen colour */
    #define  COLOR_LABEL      14                    /* label colour        */
    #define  COLOR_FRAME      10                    /* common frame colour */
    #define  COLOR_FRAME_UP   13                    /*                     */
    #define  COLOR_FRAME_TEXT 12                    /* text frame colour   */
    #define  COLOR_TEXT_BACK   0                    /* text screen colour  */
    #define  COLOR_TEXT        0                    /* text colour         */
    #define  COLOR_MSG        14                    /* message colour      */
    #define  COLOR_PENCIL     12                    /* pencil colour       */
    #define  COLLIN           11                    /* line colour        .*/
                                                    /*                     */
    #define  SCR_MAXX        640                    /* horizontal screen   */
    #define  SCR_MAXY        350                    /* vertical screen     */

#ifdef  FORMULA
    #define  TABLET_MAXX    8000                    /*                     */
    #define  TABLET_MAXY    6000                    /*                     */
#else
    #define  TABLET_MAXX    10000                   /*                     */
    #define  TABLET_MAXY     8000                   /*                     */
#endif  /*FORMULA*/

    #define  SHIFT_Y_TRANS 10000                    /* shift along y axis  */
                                                    /* while setting scale */
    #define  L_TOPX           13                    /* left                */
    #define  L_TOPY           41                    /*   drawing           */
    #define  L_BOTX          313                    /*      window         */
    #define  L_BOTY          308                    /*        coordinates  */
    #define  R_TOPX          326                    /* right               */
    #define  R_TOPY           41                    /*   drawing           */
    #define  R_BOTX          626                    /*     window          */
    #define  R_BOTY          308                    /*        coordinates  */
    #define  T_TOPX            1                    /* text                */
    #define  T_BOTX           78                    /*    window           */
    #define  T_BOTY           24                    /*       coordinates   */
    #define  MSG_TOPX         17                    /* x coord. of message line */
    #define  MSG_TOPY        325                    /* y coord. of message line */
    #define  MSG_BOTX        628                    /* x coord. of message line */
    #define  MSG_BOTY        341                    /* y coord. of message line */
    #define  DLT               6                    /* distance between screen */
                                                    /* and frame               */
    #define  LIN_UP         ( 54 +SHIFT_Y_TRANS)    /* y coord. of superupper line */
    #define  STR_UP         (134 +SHIFT_Y_TRANS)    /* y coord. of upper line     */
    #define  STR_DOWN       (214 +SHIFT_Y_TRANS)    /* y coord. of lower line*/
    #define  LIN_DOWN       (294 +SHIFT_Y_TRANS)    /* y coord. of superlower line*/
    #define  DY_STR         ((_SHORT)(STR_DOWN-STR_UP))
                                                    /*                     */
    #define    DW            1                      /*                     */
                                                    /*                     */
    #define    MX            3         /*  x coordinate scale exponent     */
                                       /*     .   ( M = 2**MX )            */
    #define    MY            4         /*  y coordinate scale exponent     */
                                       /*  Y .   ( M = 2**MY )             */
    #define    WTBX0          0        /*  Coordinates of the beginning of */
    #define    WTBY0          0        /*  a window on a tablet            */
    #define    WTTX0         4640      /*  Coordinates of the end of the   */
    #define    WTTY0         3020      /*  a window on a tablet .          */
    #define    WTX0          0         /*  Coordinates of the beginning of */
    #define    WTY0          0         /*  a window in a screen            */
    #define    WBX0          639       /*  Coordibates of the end of       */
    #define    WBY0          349       /*  a window in a screen .          */
    #define    STBX0         0         /*  Coordinates of the beginning of */
    #define    STBY0         0         /*  a window on a tablet            */
    #define    STTX0         5850      /*  Coordinates of the end of       */
    #define    STTY0         5850      /*  a window on a tablet.           */
    #define    SSTX0         L_TOPX    /*  Coordinates of the beginning of */
    #define    SSTY0         L_TOPY    /*  a window in a screen.           */
    #define    SSBX0         R_BOTX    /*  Coordinates of the end of       */
    #define    SSBY0         R_BOTY    /*  window in a screen              */
    #define    SDX           30        /*  Coordinates of the window       */
    #define    SDY           80        /*  shift in the screen .           */


#endif // _DEF_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\cgr_ver.h ===
/* ************************************************************************** */
/* * Version.h     Global cross-project definitions  1998-1999              * */
/* ************************************************************************** */
#ifndef _VERSION_H_INCLUDED
#define _VERSION_H_INCLUDED

// --------- Major switches ----------------------------------------------------

#define VER_MAJOR_VERSION   1
#define VER_MINOR_VERSION   1
#define VER_RELEASE         1   

#define VER_LITE_VERSION    0 
#define VER_TRIAL_VERSION   0 // Trial(restricted) version 

#define VER_FOR_CLIO        0  // Include Clio specific files and options
#define VER_FOR_NINO        0  // Include Nino specific files and options

#define VER_RECPROTECTED    0  // Recognizer protection from unauthorized use

#define VER_PALK_DICT       1  // Switch between Elk dict (0) and Palk dict (1) format 

#define VER_RECINT_UNICODE  0 // Use UNICODE interface to the recognizer

#define VER_CE              1
#define VER_95              2
#define VER_VER          VER_95   

// -------------- Rec engine defines -------------------------------------------

#define VER_DTI_COMPRESSED  0  // Include full blown DTI in engine build
#define VER_DICT_PEGDICT    0  // Include all dictionary-related functions in the Rec engine (file and spell func)

// Some nets for some langs are only avail. in compressed format
#if defined (FOR_ENGLISH)
#define VER_SNN_COMPRESSED  0  // 0: Big net, 1: compressed
#elif defined (FOR_FRENCH)
#define VER_SNN_COMPRESSED  1  // 0: Big net, 1: compressed
#elif defined (FOR_GERMAN)
#define VER_SNN_COMPRESSED  1  // 0: Big net, 1: compressed
#else
#define VER_SNN_COMPRESSED  0  // 0: Big net, 1: compressed
#endif

//#define FOR_ENGLISH            // - Language selector - Warning -- only one can be defined at a time
//#define FOR_FRENCH
//#define FOR_GERMAN
//#define FOR_INTERNATIONAL

// -----------------------------------------------------------------------------
//--------- Support redifintions - no user serviceable defines inside! ---------
// -----------------------------------------------------------------------------

//------ Rec engine switches ---------------------------------------------------

#if VER_DTI_COMPRESSED
 #define DTI_COMPRESSED_ON
#endif

#if !VER_SNN_COMPRESSED
 #define SNN_FAT_NET_ON
#endif 

#if VER_DICT_PEGDICT && !defined(PEGDICT)
 #define PEGDICT
#endif

//------ Defaults for components names for Options dialog ----------------------

#ifdef FOR_ENGLISH
 #define VER_DEF_RECOGNIZER_NAME TEXT("CgrEng02.dll")
 #define VER_DEF_MAIN_DICT_NAME  TEXT("CgrEng65k.dct")
 #define VER_DEF_USER_DICT_NAME  TEXT("CgrUser.dct")
#endif //FOR_ENGLISH

#ifdef FOR_GERMAN
 #define VER_DEF_RECOGNIZER_NAME TEXT("CgrGer02.dll")
 #define VER_DEF_MAIN_DICT_NAME  TEXT("CgrGer175k.dct")
 #define VER_DEF_USER_DICT_NAME  TEXT("CgrUser.dct")
#endif //FOR_GERMAN

#ifdef FOR_FRENCH
 #define VER_DEF_RECOGNIZER_NAME TEXT("CgrFr02.dll")
 #define VER_DEF_MAIN_DICT_NAME  TEXT("CgrFr144k.dct")
 #define VER_DEF_USER_DICT_NAME  TEXT("CgrUser.dct")
#endif //FOR_FRENCH

#ifdef FOR_INTERNATIONAL
 #define VER_DEF_RECOGNIZER_NAME TEXT("CgrInt02.dll")
 #define VER_DEF_MAIN_DICT_NAME  TEXT("CgrInt65k.dct")
 #define VER_DEF_USER_DICT_NAME  TEXT("CgrUser.dct")
#endif //INTERNATIONAL

#if !defined(FOR_ENGLISH) && !defined(FOR_FRENCH) && !defined(FOR_GERMAN) && !defined(FOR_INTERNATIONAL)   
 #error Languge selection error!
#endif

// ------- Def folders -----------------------------------------

#ifdef FOR_ENGLISH
 #define VER_DEF_NOTESFOLDR_NAME  TEXT("\\My Documents\\InkNotes")
 #define VER_DEF_NOTESPREFX_NAME  TEXT("Notes_")
#elif defined (FOR_GERMAN)
 #define VER_DEF_NOTESFOLDR_NAME  TEXT("\\Eigene Dateien\\InkNotes")
 #define VER_DEF_NOTESPREFX_NAME  TEXT("Notes_")
#elif defined (FOR_FRENCH) 
 #define VER_DEF_NOTESPREFX_NAME  TEXT("Notes_")
 #define VER_DEF_NOTESFOLDR_NAME  TEXT("\\Mes Documents\\InkNotes")
#elif defined (FOR_INTERNATIONAL)
 #define VER_DEF_NOTESPREFX_NAME  TEXT("Notes_")
 #define VER_DEF_NOTESFOLDR_NAME  TEXT("\\My Documents\\InkNotes")
#endif // Lang switch

// ------- Switch for APP and its resources --------------------

#if VER_FOR_CLIO
 #define FOR_CLIO
#endif

#if VER_RECINT_UNICODE
 #define PEG_RECINT_UNICODE
#endif

#endif // _VERSION_H_INCLUDED

/* ************************************************************************** */
/* * End of Versions.h                                                      * */
/* ************************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\floats.h ===
#ifndef FLOATS_INCLUDED
#define FLOATS_INCLUDED

#include "bastypes.h"

#if HWR_SYSTEM == HWR_WINDOWS || HWR_SYSTEM == HWR_DOS || HWR_SYSTEM == HWR_ANSI || HWR_SYSTEM == HWR_EPOC32 /* substitute floating   */
                                                  /* point operations      */
 #define  HWRfl_add(a,b,c)   ((*(c))=((a)+(b)))   /*                       */
 #define  HWRfl_sub(a,b,c)   ((*(c))=((a)-(b)))   /*                       */
 #define  HWRfl_mul(a,b,c)   ((*(c))=((a)*(b)))   /*                       */
 #define  HWRfl_div(a,b,c)   ((*(c))=((a)/(b)))   /*                       */
 #define  HWRfl_assign(a,b)  ((*(a))=(b))         /*                       */
 #define  HWRfl_gt(a,b)      ((a)>(b))            /*                       */
 #define  HWRfl_ge(a,b)      ((a)>=(b))           /*                       */
 #define  HWRfl_lt(a,b)      ((a)<(b))            /*                       */
 #define  HWRfl_le(a,b)      ((a)<=(b))           /*                       */
 #define  HWRfl_eq(a,b)      ((a)==(b))           /*                       */
 #define  HWRfl_ne(a,b)      ((a)!=(b))           /*                       */
 #define  HWRitof(a,b)       ((*(b))=((_DOUBLE)(a)))/*                     */
 #define  HWRltof(a,b)       ((*(b))=((_DOUBLE)(a)))/*                     */
 #define  HWRftoi(a)         ((_SHORT)(a))        /*                       */
 #define  HWRftol(a)         ((_LONG)(a))         /*                       */
                                                  /*                       */
#else                                             /*                       */
                                                  /*                       */
 _VOID  HWRfl_add(_DOUBLE add1,_DOUBLE add2,p_DOUBLE res);/*               */
                                                  /*                       */
 _VOID  HWRfl_sub(_DOUBLE sub1,_DOUBLE sub2,p_DOUBLE res);/*               */
                                                  /*                       */
 _VOID  HWRfl_mul(_DOUBLE mul1,_DOUBLE mul2,p_DOUBLE res);/*               */
                                                  /*                       */
 _VOID  HWRfl_div(_DOUBLE div1,_DOUBLE div2,p_DOUBLE res);/*               */
                                                  /*                       */
 _VOID  HWRfl_assign(p_DOUBLE res,_DOUBLE ass);   /*                       */
                                                  /*                       */
 _BOOL  HWRfl_gt(_DOUBLE op1,_DOUBLE op2);        /*                       */
                                                  /*                       */
 _BOOL  HWRfl_ge(_DOUBLE op1,_DOUBLE op2);        /*                       */
                                                  /*                       */
 _BOOL  HWRfl_lt(_DOUBLE op1,_DOUBLE op2);        /*                       */
                                                  /*                       */
 _BOOL  HWRfl_le(_DOUBLE op1,_DOUBLE op2);        /*                       */
                                                  /*                       */
 _BOOL  HWRfl_eq(_DOUBLE op1,_DOUBLE op2);        /*                       */
                                                  /*                       */
 _BOOL  HWRfl_ne(_DOUBLE op1,_DOUBLE op2);        /*                       */
                                                  /*                       */
 _VOID  HWRitof(_SHORT op1,p_DOUBLE res);         /*                       */
                                                  /*                       */
 _VOID  HWRltof(_LONG op1,p_DOUBLE res);          /*                       */
                                                  /*                       */
 _SHORT HWRftoi(_DOUBLE op1);                     /*                       */
                                                  /*                       */
 _LONG  HWRftol(_DOUBLE op1);                     /*                       */
                                                  /*                       */
#endif                                   /* floating point operations      */

#endif  /*  FLOATS_INCLUDED  */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\hwr_swap.h ===
/*****************************************************************************
 *
 * ST_LIB.H                                               Created: 06/26/91
 *
 * Header file for functions which swap bytes
 *
 ****************************************************************************/
#ifndef _HWR_SWAP_H_
#define _HWR_SWAP_H_

#include "bastypes.h"

void HWRSwapInt( p_USHORT pShort );
void HWRSwapLong( p_ULONG pUlong );
void HWRSwapTriad( p_VOID  mem );

#endif /* _HWR_SWAP_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\elk.h ===
/* *************************************************************************** */
/* *    Tree - based dictionary programs                                     * */
/* *************************************************************************** */
#ifndef ELK_H_INCLUDED
#define ELK_H_INCLUDED

// --------------- Defines -----------------------------------------------------

//#if VER_PALK_DICT
// #define ELK_MAX_WORDLEN 40
//#else
 #define ELK_MAX_WORDLEN 30
//#endif

#define ELK_MAX_ALTS     10

#define ELK_NOERR         0
#define ELK_ERR           1
#define ELK_PREV_VER_ERR  2

#define ELK_ATTR_FCAP    0x04
#define ELK_ATTR_FREQM   0x03

#define ELK_STND_TYPE     0    // Standard dictionary (not optimized)
#define ELK_OPT1_TYPE     1    // Optimized level 1 dictionary
#define ELK_OPT2_TYPE     2    // Optimized level 2 dictionary (Stat coding)

// --------------- Types -------------------------------------------------------

typedef struct {
                _INT   nansw;
                _UCHAR weights[ELK_MAX_ALTS];
                _UCHAR list[ELK_MAX_ALTS][ELK_MAX_WORDLEN];
               } spc_answer_type, _PTR p_spc_answer_type;

// --------------- Prototypes --------------------------------------------------

_INT ElkGetNextSyms(p_VOID cur_fw, p_VOID fwb, p_VOID pd, _UCHAR source, p_VOID pUd, p_rc_type prc);
_INT ElkCheckWord(p_UCHAR word, p_UCHAR status, p_UCHAR attr, p_VOID pd);
_INT ElkAddWord(p_UCHAR word, _UCHAR attr, p_VOID _PTR pd);
_INT ElkOptimizeDict(p_VOID _PTR pd);
_INT ElkCreateDict(p_VOID _PTR pd);
_INT ElkFreeDict(p_VOID _PTR pd);
_INT ElkLoadDict(p_UCHAR name, p_VOID _PTR pd);
_INT ElkSaveDict(p_UCHAR name, p_VOID pd);
_INT ElkGetStat(_INT layer, p_INT stats, p_VOID pd);
_INT ElkGetDictStatus(p_INT len, p_VOID pd);
_INT ElkGetDictType(p_VOID pd);
_INT ElkAttachCodeTable(_INT ctbl_size, p_UCHAR code_table, p_VOID _PTR pd);

_INT SpellCheckWord(_UCHAR * word, p_spc_answer_type answ, p_VOID hdict, int flags);

#endif // ELK_H_INCLUDED
/* *************************************************************************** */
/* *       END OF ALL                                                        * */
/* *************************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\glob.h ===
#include  "hwr_sys.h"
#include  "const.h"
#include  "def.h"

/************************** Global variables **************************/

    ROM_DATA _SHORT  sqrtab[LENTH_S] = {0,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,
                          4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,
                      6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
      8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
      10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
      11,11,11,11,11,11,11     } ;

    ROM_DATA _ULONG bit[32] = { 0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x80,0x100,0x200,
                            0x400,0x800,0x1000,0x2000,0x4000,0x8000,0x10000L,
                            0x20000L,0x40000L,0x80000L,0x100000L,0x200000L,0x400000L,
                            0x800000L,0x1000000L,0x2000000L,0x4000000L,0x8000000L,
                            0x10000000L,0x20000000L,0x40000000L,0x80000000L };
    ROM_DATA _SHORT  quad[LENTH_Q]={
                               0,    1,    4,    9,   16,   25,   36,   49,
                              64,   81,  100,  121,  144,  169,  196,  225,
                             256,  289,  324,  361,  400,  441,  484,  529,
                             576,  625,  676,  729,  784,  841,  900,  961,
                            1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521,
                            1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209,
                            2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025,
                            3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969
                          } ;
    ROM_DATA _SHORT  eps0[LENTH_E]={
                               0,    0,    0,    0,    0,    0,    0,    0,
                               0,    1,    3,    5,    8,   11,   15,   20,
                              25,   30,   36,   42,   48,   55,   62,   69,
                              77,   85,   92,  101,  109,  117,  126,  135,
                             135,  135,  135,  135,  135,  135,  135,  135,
                             135,  135,  135,  135,  135,  135,  135,  135,
                             135,  135,  135,  135,  135,  135,  135,  135,
                             135,  135,  135,  135,  135,  135,  135,  135
                          } ;
    ROM_DATA _SHORT  eps1[LENTH_E]={
                               0,    0,    0,    0,    0,    0,    9,   30,
                              54,   78,  100,  118,  134,  146,  157,  165,
                             172,  177,  181,  184,  187,  189,  190,  192,
                             193,  193,  194,  194,  195,  195,  195,  195,
                             195,  195,  195,  195,  195,  195,  195,  195,
                             195,  195,  195,  195,  195,  195,  195,  195,
                             195,  195,  195,  195,  195,  195,  195,  195,
                             195,  195,  195,  195,  195,  195,  195,  195
                          } ;

    ROM_DATA _SHORT  eps2[LENTH_E] = {
                               0,    1,    9,   26,   44,   59,   71,   80,
                              87,   92,   95,   98,   98,   98,   98,   98,
                              98,   98,   98,   98,   98,   98,   98,   98,
                              98,   98,   98,   98,   98,   98,   98,   98,
                              98,   98,   98,   98,   98,   98,   98,   98,
                              98,   98,   98,   98,   98,   98,   98,   98,
                              98,   98,   98,   98,   98,   98,   98,   98,
                              98,   98,   98,   98,   98,   98,   98,   98
                          } ;
    ROM_DATA _SHORT  eps3[LENTH_E]={
                               9,   27,   46,   61,   74,   84,   91,   96,
                              96,   96,   96,   96,   96,   96,   96,   96,
                              96,   96,   96,   96,   96,   96,   96,   96,
                              96,   96,   96,   96,   96,   96,   96,   96,
                              96,   96,   96,   96,   96,   96,   96,   96,
                              96,   96,   96,   96,   96,   96,   96,   96,
                              96,   96,   96,   96,   96,   96,   96,   96,
                              96,   96,   96,   96,   96,   96,   96,   96
                          } ;

#if  HWR_SYSTEM==HWR_DOS /* ||  HWR_SYSTEM==HWR_WINDOWS */
    SPECL   speclGlobal[SPECVAL]={0} ;         /* Event describing structures array */
#endif

    ROM_DATA _SHORT  nbcut0 = 10  ;      /* Utmost radius of intersection   */
                                         /* search                          */
    ROM_DATA _SHORT  nbcut1 = 95 ;       /* A square of utmost radius of    */
                                         /* intersection search             */
    ROM_DATA _SHORT  nbcut2 = 2   ;

/*******************  Low level constants *****************************/

    ROM_DATA CONSTS   const1 =
            {
              (_SHORT)HORDA  ,         /* Normalization chord               */
              (_SHORT)DLT0   ,         /*                                   */
              (_SHORT)NSR    ,         /*                                   */
              (_SHORT)J_STEP ,         /* Initial steps of search  for      */
              (_SHORT)I_STEP ,         /* intersectons                      */
              (_SHORT)EPS_Y ,          /* Vicinity of pointing out extremums*/
              (_SHORT)EPS_X,           /* and preliminary search for        */
                                       /* shelves                           */
              (_SHORT)EPS_PY ,         /* Maximum horizontal and vertical   */
              (_SHORT)EPS_PX ,         /* size of "points" .                */
              (_SHORT)EPS_ST ,         /* Maximum length of a stroke.       */
              /* (_SHORT)EPSA_ST , */        /* Maximum slope of a stroke.        */
              /* (_SHORT)EPSR_ST , */        /* Stroke maximum integral curvature */
              /* (_SHORT)EPSX_SH , */        /* Minimum horizontal shelves        */
              /*                   */        /* size .                            */
              /* (_SHORT)EPSY_SH , */        /* Half maximum vertical shelf       */
              /*                   */        /* size                              */
              /* (_SHORT)EPSL_SH , */        /* Maximum height of shelves gluing  */
              /* (_SHORT)EPS_SM ,  */        /* Vicinity  of ending extremums     */
                                       /* marks                             */
              (_SHORT)A0 ,             /*                                   */
              (_SHORT)B0 ,             /*                                   */
              (_SHORT)LF0 ,            /*                                   */
              (_SHORT)LZ0 ,            /*                                   */
              (_SHORT)A1 ,             /*                                   */
              (_SHORT)B1 ,             /*                                   */
              (_SHORT)LF1 ,            /*                                   */
              (_SHORT)LZ1 ,            /*                                   */
              (_SHORT)A2 ,             /*                                   */
              (_SHORT)B2 ,             /*                                   */
              (_SHORT)LF2 ,            /*                                   */
              (_SHORT)LZ2 ,            /*                                   */
              (_SHORT)A3 ,             /*                                   */
              (_SHORT)B3 ,             /*                                   */
              (_SHORT)LF3 ,            /*                                   */
              (_SHORT)LZ3              /*                                   */
              /* (_SHORT)EPS_F  */
            } ;

#if PG_DEBUG || (defined(FORMULA) && !DEMO)
/******************  Interface variables    ******************************/

_SHORT PG_line_s = 1;              /* line mumber in DBG window */
_SHORT mpr;                        /* print mask                  */

_CHAR *code_name[] =               /* codes                            */
  {"_NO_CODE",                     /*       are described              */
   "_ZZ_", "_UU_", "_IU_", "_GU_", /*                      here        */
   " _O_", "_GD_", "_ID_", "_UD_", /*                                  */
   "_UUL_","_UUR_","_UDL_","_UDR_",/*                                  */
   "_XT_", "_ANl", "_DF_ ", "_ST_",/*                                  */
   "_ANr","_ZZZ_","_Z_","_FF_",    /*                                  */
   "_DUR_","_CUR_","_CUL_","_DUL_",/*                                  */
   "_DDR_","_CDR_","_CDL_","_DDL_",/*                                  */
   "_GUs_","_GDs_","_Gl_","_Gr_",  /*                                  */
   "_UUC_","_UDC_",                /*                                  */
   "_TS_", "_TZ_", "_BR_", "_BL",
   "_BSS", "_AN_UR", "_AN_UL",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED"
  };                               /*                                  */
_CHAR *dist_name[] =               /* heights and directions           */
  {"   ", "US1_", "US2_", "UE1_", "UE2_", "UI1_", "UI2_",
   "MD_", "DI1_", "DI2_", "DE1_", "DE2_", "DS1_", "DS2_",
   "   ", "   ",
   "f_  ","fUS1_","fUS2_","fUE1_","fUE2_","fUI1_","fUI2_",
   "fMD_","fDI1_","fDI2_","fDE1_","fDE2_","fDS1_","fDS2_",
   "   ", "   ",
   "b_  ","bUS1_","bUS2_","bUE1_","bUE2_","bU1_","bU2_",
   "bMD_","bDI1_","bDI2_","bDE1_","bDE2_","bDS1_","bDS2_"
  };                               /*                                  */
#if 0
p_CHAR links_name[] =           /* array of link's names            */
{"ARC_UNKNOWN", "ARC_LEFT", "ARC_RIGHT", "ARC_UP", "ARC_DOWN",
 "ARC_UP_LEFT", "ARC_DOWN_LEFT", "ARC_UP_RIGHT", "ARC_DOWN_RIGHT",
 "ARC_LINE_VERT", "ARC_LINE_HOR", "ARC_LINE_SLASH", "ARC_LINE_BACKSLASH",
 "ARC_S_LIKE", "ARC_Z_LIKE", "ARC_SHORT"
};
#else
p_CHAR links_name[] =           /* array of link's names            */
{"LINK_UNKNOWN",
 "LINK_HCR_CCW", "LINK_LCR_CCW", "LINK_MCR_CCW", "LINK_SCR_CCW", "LINK_TCR_CCW",
 "LINK_LINE",
 "LINK_TCR_CW",  "LINK_SCR_CW",  "LINK_MCR_CW",  "LINK_LCR_CW",  "LINK_HCR_CW",
 "LINK_HS_LIKE", "LINK_S_LIKE",  "LINK_Z_LIKE",  "LINK_HZ_LIKE"
};
#endif
#endif /* PG_DEBUG... */

/***************************************************************************/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\hwr_file.h ===
/**************************************************************************
*
*  HWR_FILE.H                             Created: 21.01.92
*
*    This file contains the function prototypes needed for some basic
*  functions, data definitions  and  function  prototypes needed for
*  file handling functions,
*
**************************************************************************/

#ifndef FILE_DEFINED        /*  See #endif in the end of file.  */
#define FILE_DEFINED

#include "bastypes.h"
#include "hwr_sys.h"

#if !defined(HWR_SYSTEM_NO_LIBC) && HWR_SYSTEM == HWR_ANSI
	#include <stdio.h>
	#define HWR_FILENAME_MAX FILENAME_MAX
#endif

#ifndef HWR_FILENAME_MAX
	#define HWR_FILENAME_MAX 1024
#endif

#ifndef  HFILE_TO_VALUE
typedef  p_VOID  _HFILE;
#define  VALUE_TO_HFILE VALUE_TO_PTR
#define  HFILE_TO_VALUE PTR_TO_VALUE
#endif
typedef  _HFILE _PTR           p_HFILE;

#ifndef  HTEXT_TO_VALUE
typedef  p_VOID  _HTEXT;
#define  VALUE_TO_HTEXT VALUE_TO_PTR
#define  HTEXT_TO_VALUE PTR_TO_VALUE
#endif
typedef  _HTEXT _PTR           p_HTEXT;

#ifndef  HFIND_TO_VALUE
typedef  _HMEM _HFIND;
#define  VALUE_TO_HFIND VALUE_TO_HMEM
#define  HFIND_TO_VALUE HMEM_TO_VALUE
#endif
typedef  _HFIND _PTR           p_HFIND;

#ifndef  HSEEK_TO_VALUE
typedef  _LONG  _HSEEK;
#define  VALUE_TO_HSEEK VALUE_TO_LONG
#define  HSEEK_TO_VALUE LONG_TO_VALUE
#endif
typedef  _HSEEK _PTR           p_HSEEK;

/* Values available for Open (parameter wRdWrAccess HWRFileOpend and
   HWRTextOpen) */
#define HWR_FILE_NORMAL 0
#define HWR_FILE_RDWR   0
#define HWR_FILE_RDONLY 1
#define HWR_FILE_WRONLY 2

#define HWR_TEXT_NORMAL 0
#define HWR_TEXT_RDWR   0
#define HWR_TEXT_RDONLY 1
#define HWR_TEXT_WRONLY 2

/* Origin constants for seek (parameter wOrigin in function HWRFileSeek) */
#define HWR_FILE_SEEK_SET 0
#define HWR_FILE_SEEK_CUR 1
#define HWR_FILE_SEEK_END 2

/* Constants for seek (parameter hSeek in function HWRTextSeek) */
#define HWR_TEXT_SEEK_BEGIN   ((_LONG)(-2L))
#define HWR_TEXT_SEEK_END     ((_LONG)(-3L))

/* EOF constants */
#define HWR_FILE_EOF   ((_WORD)(_INT)-1)
#define HWR_TEXT_EOF   ((_WORD)(_INT)-1)

/* Open mode for file functions (parameter wOpenMode in function HWRFileOpen) */
#define HWR_FILE_EXIST_OPEN      0x01
#define HWR_FILE_EXIST_CREATE    0x02
#define HWR_FILE_EXIST_ERROR     0x03
#define HWR_FILE_EXIST_UNIQUE    0x04
#define HWR_FILE_EXIST_APPEND    0x05
#define HWR_FILE_NOTEXIST_CREATE 0x10
#define HWR_FILE_NOTEXIST_ERROR  0x20
#define HWR_FILE_EXIST_MASK      0x0F
#define HWR_FILE_NOTEXIST_MASK   0xF0

#define HWR_FILE_EXCL      (HWR_FILE_EXIST_OPEN|HWR_FILE_NOTEXIST_ERROR)
#define HWR_FILE_OPEN      (HWR_FILE_EXIST_OPEN|HWR_FILE_NOTEXIST_CREATE)
#define HWR_FILE_CREAT     HWR_FILE_OPEN
#define HWR_FILE_TRUNC     (HWR_FILE_EXIST_CREATE|HWR_FILE_NOTEXIST_CREATE)
#define HWR_FILE_APPEND    (HWR_FILE_EXIST_APPEND|HWR_FILE_NOTEXIST_CREATE)

/* Open mode for text functions (parameter wOpenMode in function HWRTextOpen) */
#define HWR_TEXT_EXIST_OPEN      0x01
#define HWR_TEXT_EXIST_CREATE    0x02
#define HWR_TEXT_EXIST_ERROR     0x03
#define HWR_TEXT_EXIST_UNIQUE    0x04
#define HWR_TEXT_EXIST_APPEND    0x05
#define HWR_TEXT_NOTEXIST_CREATE 0x10
#define HWR_TEXT_NOTEXIST_ERROR  0x20
#define HWR_TEXT_EXIST_MASK      0x0F
#define HWR_TEXT_NOTEXIST_MASK   0xF0

#define HWR_TEXT_EXCL      (HWR_TEXT_EXIST_OPEN|HWR_TEXT_NOTEXIST_ERROR)
#define HWR_TEXT_OPEN      (HWR_TEXT_EXIST_OPEN|HWR_TEXT_NOTEXIST_CREATE)
#define HWR_TEXT_CREAT     HWR_TEXT_OPEN
#define HWR_TEXT_TRUNC     (HWR_TEXT_EXIST_CREATE|HWR_TEXT_NOTEXIST_CREATE)
#define HWR_TEXT_APPEND    (HWR_TEXT_EXIST_APPEND|HWR_TEXT_NOTEXIST_CREATE)

   /* Binary file functions */

_HFILE  HWRFileOpen (_STR zPathName, _WORD wRdWrAccess, _WORD wOpenMode);
/* a, Ǽ 2. wRdWrAccess - ǧǒ ǧ¹ȇ -  E,
    2 ǒǗ2E. wOpenMode -  a° 2. 4§U
   2Ǘ° 4aǗ a¶:
   HWR_FILE_EXCL - a 2 E 2, 2  ,  .
   HWR_FILE_OPEN - 2 2 ,   Ǽ§U. 2 ° - a§U.
   HWR_FILE_CREAT -  ,   HWR_FILE_OPEN.
   HWR_FILE_TRUNC - 2 Ǽ§U Ǘ 4  ǜ °  2 .
   HWR_FILE_APPEND - »   HWR_FILE_OPEN,  ǧ2 aU 2
      U/    2.
   Ǽa - Handle 2 _NULL a 
*/

_WORD  HWRFileRead (_HFILE hFile, p_VOID pReadBuffer,
                              _WORD wNumberOfBytes);
/*   2 . Ǽa 2 o  (0 2  
   2ǧ a  2  2.
*/

_WORD HWRFileWrite (_HFILE hFile, p_VOID pWriteBuffer,
                              _WORD wNumberOfBytes);
/*   2 . Ǽa 2 o  (0 2  
   2ǧ a  2  4  ǧ2.
*/

/* _WORD HWRFileXRead (_HFILE hFile, p_VOID pReadBuffer,
                              _WORD wNumberOfBytes); */

/* _WORD HWRFileXWrite (_HFILE hFile, p_VOID pReadBuffer,
                              _WORD wNumberOfBytes); */

_BOOL HWRFileSeek (_HFILE hFile, _LONG lOffset, _WORD wOrigin);
/* Ǘ 2U U/  2ǻ lOffset  4ǖ wOrigin.
   Ǽa _TRUE 2  a2 a42  _FALSE 2 .
*/

_LONG HWRFileTell (_HFILE hFile);
/* Ǽa ¹E ǼE 2 2 -1L 2  2 ǼU 
   a2.
*/

_BOOL  HWRFileEOF (_HFILE hFile);
/* Ǽa  _NULL 2 2 U/   2  _NULL
    a4 2.
*/

_BOOL HWRFileClose (_HFILE hFile);
/* a 2. Ǽa _NULL a , _TRUE a Ȅo.
*/

   /* Text file functions */

_HTEXT HWRTextOpen (_STR zPathName, _WORD wRdWrAccess, _WORD wOpenMode);
/* a, Ǽ 2. wRdWrAccess - ǧǒ ǧ¹ȇ -  E,
    2 ǒǗ2E. wOpenMode -  a° 2. 4§U
   2Ǘ° 4aǗ a¶:
   HWR_TEXT_EXCL - a 2 E 2, 2  ,  .
   HWR_TEXT_OPEN - 2 2 ,   Ǽ§U. 2 ° - a§U.
   HWR_TEXT_CREAT -  ,   HWR_TEXT_OPEN.
   HWR_TEXT_TRUNC - 2 Ǽ§U Ǘ 4  ǜ °  2 .
   HWR_TEXT_APPEND - »   HWR_TEXT_OPEN,  ǧ2 aU 2
      U/    2.
   Ǽa - Handle 2 _NULL a 
*/

#if HWR_SYSTEM == HWR_MACINTOSH || HWR_SYSTEM == HWR_ANSI

#define hwr_stdin  hwr_getstdin()
#define hwr_stdout hwr_getstdout()
#define hwr_stderr hwr_getstderr()

_HTEXT hwr_getstdin(_VOID);
_HTEXT hwr_getstdout(_VOID);
_HTEXT hwr_getstderr(_VOID);

_WORD  _FVPREFIX HWRTextPrintf (_HTEXT hText, _STR pFormatString, ... );
/*  printf. Ǽa 2 o 42Ǘ,  a  -
   HWR_TEXT_EOF.
*/

_WORD _FVPREFIX HWRTextSPrintf (p_CHAR pcBuffer, _STR pFormatString, ... );
/*  sprintf. Ǽa 2 o 42Ǘ,  a  -
   HWR_TEXT_EOF.
*/
#else 
#define HWRTextSPrintf sprintf
#define HWRTextPrintf  fprintf
#endif /* HWR_SYSTEM */
/* _WORD    _FVPREFIX HWRTextScanf (_HTEXT hText, _STR pFormatString, ... ); */
/*   a.
*/

/* _WORD HWRTextGetLine (_HTEXT hText, p_VOID pBuffer); */
/* µU  ǒ - 2 HWRTextGetS.
*/

_WORD HWRTextGetC (_HTEXT hText);
/* ǖ 42. aǖ§U a2UU \r\n. Ǽa  42,
    a  HWR_TEXT_EOF.
*/

_WORD HWRTextPutC (_WORD wChar, _HTEXT hText);
/* ǖ 42. aǖ§U a2UU \r\n. Ǽa  42,
    a  HWR_TEXT_EOF.
*/

_STR HWRTextGetS (_STR zStr, _WORD wMaxSize, _HTEXT hText);
/* ǖ a. aǖ§U a2UU \r\n. wMaxSize - a4a a 2U
   a4 a (   \0, a  ǒ2U§U   -
   2U  ǻ  4). Ǽa§U _NULL a   zStr a
   .  4!
*/

_BOOL HWRTextPutS (_STR zStr, _HTEXT hText);
/* ǖ a. aǖ§U a2UU \r\n. Ǽa§U _NULL a
     _TRUE a Ȅo.
*/

_BOOL HWRTextEOF (_HTEXT hText);
/* Ǽa  _NULL 2 2 U/   2  _NULL
    a4 2.
*/

_HSEEK HWRTextTell (_HTEXT hText);
/* a ¹E ǼE 2 2U ǜ, ǒ  4 ȇ°
   ¹  (2 ¹ !). Ǽa _NULL a    handle
   a Ȅo.  handle 4ǻ 2Ǘ° 2  µ HWRTextSeek.
*/

_BOOL HWRTextSeek (_HTEXT hText, _HSEEK hSeek);
/* 2 2  ǼE a2U4E hSeek. hSeek - 2 a2
   2U HWRTextTell, 2  ǖ   HWR_TEXT_SEEK_BEGIN
   2 HWR_TEXT_SEEK_END. a 4,   
   HWR_FILE_SEEK_END  HWR_TEXT_SEEK_END oǻ 4,  Ǘaۄ
   a 42 , §, aǄ a   .
*/

_BOOL HWRTextClose (_HTEXT hText);
/* a 2. Ǽa _NULL a , _TRUE a Ȅo.
*/


typedef struct {
    _STR    zFileName;
    _LONG   lFileSize;
    } _FileFind, _PTR p_FileFind;

_HFIND HWRFileFindOpen (_STR zPathName, _WORD wAttr);
p_FileFind  HWRFileFind (_HFIND hFind);
_BOOL  HWRFileFindClose (_HFIND hFind);

#endif  /*  FILE_DEFINED  */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\ldbtypes.h ===
#ifndef _LDBTYPES_H
#define _LDBTYPES_H

#define LdbLast       0x20000000   /* This is last terminal in sequence */
#define LdbAllow      0x40000000   /* This state is allowing            */
#define LdbCont       0x80000000   /* This rule have alternatives       */
#define LdbMask       0x0fffffff

#define LdbFileSignature "LDB0"
#define SizeofLdbFileSignature 4

#define nStateLimDef    512

typedef struct tagLDBHeader {
  _CHAR  sign[SizeofLdbFileSignature];
  _ULONG nRules;
  _ULONG fileSize;
  _ULONG extraBytes;
} LDBHeader, *PLDBHeader;

typedef struct tagLDBRule {
  _ULONG strOffset;
  _ULONG state;
} LDBRule, *PLDBRule;

typedef struct tagAutoState {
  _STR   choice;
  _ULONG state;
} AutoState, _PTR Automaton;

typedef struct tagLdb {
  struct tagLdb _PTR next;
  Automaton am;
} Ldb, _PTR p_Ldb;

typedef struct tagStatemap
 {
  p_ULONG pulStateMap;  /* State remapping from abstract one to specific ones */
  _INT    nLdbs;        /* Number of ldbs in chain */
  _INT    nStateLim;    /* Number of state slots in pulStateMap */
  _INT    nStateMac;    /* Last allocated state */
  /* Helper fields */
  /* They are included in this structure because of similar life time */
  /* Logically, they are independent of first part */
  p_UCHAR sym;
  p_UCHAR l_status;
  p_ULONG pstate;
  _INT    nSyms;
} StateMap, _PTR p_StateMap;



//extern StateMap sm;

#endif /* _LDBTYPES_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\hwr_sys.h ===
/**************************************************************************
*
*  HWR_SYS.H                             Created: 04 November 1991.           *
*
*    This file contains the function prototypes needed for some basic
*  functions, data definitions  and  function  prototypes needed for
*  memory handling functions,
*
*  Items defined: _HMEM  (hVar)     p_HMEM  (phVar)
*
**************************************************************************/

#ifndef SYSTEM_DEFINED        /*  See #endif in the end of file.  */
#define SYSTEM_DEFINED

#include "bastypes.h"

#ifndef HWR_SYSTEM_NO_LIBC
	#include <string.h>
#endif

#ifdef PG_DEBUG_ON
 #define MEMORY_DEBUG_ON     1
 #define MEMORY_DEBUG_REPORT 0
#else
 #define MEMORY_DEBUG_ON     0
 #define MEMORY_DEBUG_REPORT 0
#endif

#if  MEMORY_DEBUG_ON

#include <stdarg.h>
#include <stdio.h>

#define MEMORY_DEBUG_ARRAY_SIZE 1000

 int DPrintf5(const char * format, ...);

  #ifdef __cplusplus
  extern "C" {            /* Assume C declarations for C++ */
  #endif  /* __cplusplus */
     _VOID QueryBlocks(_VOID);
     _INT  CheckBlocks(char *szID);
 #ifdef __cplusplus
  }                       /* End of extern "C" { */
  #endif  /* __cplusplus */

#else   // !MEMORY_DEBUG_ON

#define  QueryBlocks(a)   {}
#define  CheckBlocks(a)   {}

#endif  // MEMORY_DEBUG_ON


#ifndef HANDLE_TO_VALUE
typedef _UINT               _HANDLE;  /*   This type is used to access */
#define VALUE_TO_HANDLE VALUE_TO_WORD /* some     internal     objects */
#define HANDLE_TO_VALUE WORD_TO_VALUE /* (usually moveable).           */
#endif
typedef _HANDLE   _PTR          p_HANDLE;

#ifndef HMEM_TO_VALUE
typedef _HANDLE               _HMEM;    /*  The handle for memory block  */
#define VALUE_TO_HMEM VALUE_TO_HANDLE
#define HMEM_TO_VALUE HANDLE_TO_VALUE
#endif
typedef _HMEM   _PTR          p_HMEM;

#ifndef HATOM_TO_VALUE
typedef _HANDLE               _HATOM;
#define VALUE_TO_HATOM VALUE_TO_HANDLE
#define HATOM_TO_VALUE HANDLE_TO_VALUE
#endif
typedef _HATOM   _PTR          p_HATOM;

#include "hwr_file.h"

#define HWR_UNDEF             ((_WORD)(_INT)-1)
#define MAX_MBLOCKSIZE        0xfffffff0 //(0xFFFF-sizeof(_HMEM))
                                      /*  The maximal memory block size. */
#define HWR_MAXATOMSIZE          64

/*              MATH FUNCTIONS PROTOTYPES.                               */
/*             ============================                              */

#if HWR_SYSTEM == HWR_MACINTOSH
_DOUBLE   HWRMathSqrt(_DOUBLE);
_DOUBLE   HWRMathExp(_DOUBLE);
_DOUBLE   HWRMathSin(_DOUBLE);
_DOUBLE   HWRMathCos(_DOUBLE);
_DOUBLE   HWRMathAtan2(_DOUBLE, _DOUBLE);
_DOUBLE   HWRMathFloor(_DOUBLE);
_DOUBLE   HWRMathLSqrt(_LONG);
_INT      HWRMathILSqrt (_LONG x);
_INT      HWRMathISqrt (_INT x);

#else /* HWR_SYSTEM != HWR_MACINTOSH */
_INT  HWRMathILSqrt (_LONG x);
_INT  HWRMathISqrt (_INT x);
_WORD  HWRMathSystemSqrt (_DOUBLE dArg, p_DOUBLE pdRes);
_WORD  HWRMathSystemLSqrt (_LONG lArg, p_DOUBLE pdRes);
_WORD  HWRMathSystemExp (_DOUBLE dArg, p_DOUBLE pdRes);
_WORD  HWRMathSystemSin (_DOUBLE dArg, p_DOUBLE pdRes);
_WORD  HWRMathSystemCos(_DOUBLE dArg, p_DOUBLE pdRes);
_WORD  HWRMathSystemAtan2 (_DOUBLE dArg1, _DOUBLE dArg2, p_DOUBLE pdRes);
_WORD  HWRMathSystemFloor(_DOUBLE dArg, p_DOUBLE pdRes);

extern _DOUBLE  dTmpResult;

#define HWRMathSqrt(d) (HWRMathSystemSqrt(d,&dTmpResult),dTmpResult)
#define HWRMathExp(d) (HWRMathSystemExp(d,&dTmpResult),dTmpResult)
#define HWRMathSin(d) (HWRMathSystemSin(d,&dTmpResult),dTmpResult)
#define HWRMathCos(d) (HWRMathSystemCos(d,&dTmpResult),dTmpResult)
#define HWRMathAtan2(d1,d2) (HWRMathSystemAtan2(d1,d2,&dTmpResult),dTmpResult)
#define HWRMathFloor(d) (HWRMathSystemFloor(d,&dTmpResult),dTmpResult)
#define HWRMathLSqrt(d) (HWRMathSystemLSqrt(d,&dTmpResult),dTmpResult)

#endif /* HWR_SYSTEM */

#define  HWRSqrt  HWRMathSqrt
#define  HWRExp   HWRMathExp
#define  HWRSin   HWRMathSin
#define  HWRCos   HWRMathCos
#define  HWRAtan2 HWRMathAtan2
#define  HWRFloor HWRMathFloor
#define  HWRLSqrt HWRMathLSqrt
#define  HWRILSqrt HWRMathILSqrt
#define  HWRISqrt  HWRMathISqrt


/*              MEMORY FUNCTIONS PROTOTYPES.                             */
/*             ==============================                            */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

_HMEM     HWRMemoryAllocHandle (_ULONG);

p_VOID    HWRMemoryLockHandle (_HMEM);
_BOOL     HWRMemoryUnlockHandle (_HMEM);
_ULONG    HWRMemorySize (_HMEM);

_BOOL     HWRMemoryFreeHandle (_HMEM);

p_VOID    HWRMemoryAlloc (_ULONG);
_BOOL     HWRMemoryFree (p_VOID);

p_VOID    HWRMemCpy (p_VOID, p_VOID, _WORD);
p_VOID    HWRMemSet (p_VOID, _UCHAR, _WORD);

#define  HWRMemoryCpy HWRMemCpy
#define  HWRMemorySet HWRMemSet
#ifndef HWR_SYSTEM_NO_LIBC
	//#define  HWRMemCpy(d,s,l)  (memmove((p_VOID)(d), (p_VOID)(s), (_WORD)(l)))
	#define  HWRMemSet(d,v,l)  (memset((p_VOID)(d), (_UCHAR)(v), (_WORD)(l)))
#endif /* HWR_SYSTEM_NO_LIBC */

#ifdef __cplusplus
}                       /* End of extern "C" { */
#endif  /* __cplusplus */

/*                 STD FUNCTIONS PROTOTYPES.                         */
/*                 =========================                         */

_INT      HWRAbs(_INT);
_LONG     HWRLAbs (_LONG lArg);
_STR      HWRItoa(_INT, _STR, _INT);
_STR      HWRLtoa(_LONG, _STR, _INT);
_INT      HWRRand(_VOID);
_INT      HWRAtoi(_STR);
_LONG     HWRAtol(_STR);

/*              STRING FUNCTIONS PROTOTYPES.                             */
/*             ==============================                            */

_WORD     HWRStrLen(_STR);
_STR      HWRStrChr(_STR, _INT);
_STR      HWRStrrChr(_STR, _INT);
_STR      HWRStrCpy(_STR, _STR);
_STR      HWRStrnCpy(_STR, _STR, _WORD);
_STR      HWRStrCat(_STR, _STR);
_STR      HWRStrnCat(_STR, _STR, _WORD);
_STR      HWRStrRev(_STR);
_INT      HWRStrCmp(_STR, _STR);
_INT      HWRStrnCmp(_STR, _STR, _WORD);
_BOOL     HWRStrEq(_STR, _STR);

_HATOM    HWRAtomAdd (_STR);
_STR      HWRAtomGet (_HATOM);
_BOOL     HWRAtomRelease (_STR);
_BOOL     HWRAtomDelete (_HATOM);

/*******************************************************************/

#endif  /*  SYSTEM_DEFINED  */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\ldbutil.h ===
#ifndef _LDBUTIL_H
#define _LDBUTIL_H

#include "ldbtypes.h"

_BOOL LdbLoad(p_UCHAR fname, p_VOID _PTR ppLdb);
_BOOL LdbUnload(p_VOID _PTR ppLdb);
_BOOL InitStateMap(p_StateMap psm, _INT nLdbs);
_VOID FreeStateMap(p_StateMap psm);
_INT  GetNextSyms(p_Ldb pLdb, _ULONG state, _INT nLdb, p_StateMap psm);
_VOID ClearStates(p_StateMap psm, _INT nSyms);

#endif /* _LDBUTIL_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\ligstate.h ===
/*
    File:       ligstate.h

    Contains:   This file contains the definitions
    			needed to get/set letter image group state.

    Written by: Mikhail Ovsiannikov

    Copyright:   1998 by ParaGraph Int'l, all rights reserved.

    Change History (most recent first):

       <1>  	3/24/98		mbo     New today

*/


#ifndef __LISTATE_H
#define __LISTATE_H

enum E_LIG_STATE {
	LIG_STATE_UNDEF  = 0,
	LIG_STATE_OFTEN  = 1,
	LIG_STATE_RARELY = 2,
	LIG_STATE_NEVER  = 3
};

#define LIG_FIRST_LETTER 0x20
#define LIG_LAST_LETTER  0xFF
#define LIG_NUM_LETTERS  (LIG_LAST_LETTER - LIG_FIRST_LETTER + 1)
#if LIG_NUM_LETTERS <= 0
	#error
#endif
#define LIG_LET_NUM_GROUPS     8
#define LIG_NUM_BITS_PER_GROUP 2
#define LIG_NUM_BIT_GROUP_MASK 0x3

#define LIG_STATES_SIZE \
	(LIG_NUM_LETTERS * LIG_LET_NUM_GROUPS * LIG_NUM_BITS_PER_GROUP / 8)

typedef unsigned char LIGStatesType[LIG_STATES_SIZE];

/*
 * Sets state for a given letter and group.
 * Returns 0 if letter and group are in the allowed range, -1 otherwise.
 */
int         LIGSetGroupState(LIGStatesType *ioGStates,
                             int           inLetter,
					         int           inGroup,
                             E_LIG_STATE   inGroupState);

/*
 * Returns state for a given letter and group.
 */
E_LIG_STATE LIGGetGroupState(const LIGStatesType *inGStates,
                             int                 inLetter,
					         int                 inGroup);

#endif /* __LISTATE_H */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\low_dbg.h ===
#ifndef  LOW_DBG_H
#define  LOW_DBG_H

#ifndef AMS_MG_INCLUDED
#include "ams_mg.h"
#endif

_SHORT  ChkSPECL (low_type _PTR pLowData);
_SHORT  ChkSPECL_msg (low_type _PTR pLowData);

#if  PG_DEBUG

  #define  MAX_GIT_MPR   20

  extern _SHORT  mpr, PG_line_s;

  _SHORT  fspecl ( low_type _PTR pLowData );
  _VOID  AddToLog ( _BOOL bWriteName, p_CHAR fmt, ... );
  _SHORT print_seq_of_elem(p_SPECL specl);
  _SHORT print_end_seq_of_elem(p_SPECL specl);
  _SHORT final_print(p_SPECL specl);
  _VOID  BlinkShowElemEQ6 ( p_SPECL pElem, p_SHORT x, p_SHORT y,
                            p_CHAR strAddFormat, _SHORT AddData );
  _VOID  BlinkShowElemGT5 ( p_SPECL pElem, p_SHORT x, p_SHORT y,
                            _SHORT color);

#define  GT5_SHOWBEGEND     1
#define  GT5_SHOWNAMEATTR   2
#define  GT5_SHOWMSG        3

  _VOID  ShowElemsGT5 ( p_SPECL pElem, p_SPECL pNxt,
                        p_SHORT x, p_SHORT y,
                       _SHORT  nMode, p_CHAR szMsg );

  _SHORT  InqString ( p_CHAR szPrompt, p_CHAR szStr );
  _VOID  ShowKateMarks( p_SPECL specl, p_SHORT x, p_SHORT y, p_CHAR msg );
  _VOID  PaintArcs( p_low_type low_data, p_VOID pArcControl );

  #define   DBG_print_seq_of_elem(s)      print_seq_of_elem(s)
  #define   DBG_print_end_seq_of_elem(s)  print_end_seq_of_elem(s)
  #define   DBG_final_print(s)            final_print(s)
  #define   DBG_err_msg(msg)              err_msg(msg)
  #define   DBG_CHK_err_msg(cond,msg)     {if(cond) err_msg(msg);}
  #define   DBG_BlinkShowElemEQ6(s,x,y,f,d)    BlinkShowElemEQ6(s,x,y,f,(_SHORT)d)
  #define   DBG_BlinkShowElemGT5(s,x,y,color)  BlinkShowElemGT5(s,x,y,color)
  #define   DBG_ShowElemsGT5(s,n,x,y,mode,str) ShowElemsGT5(s,n,x,y,mode,str)
  #define   DBG_ChkSPECL(pld)             ChkSPECL_msg(pld)

//#elif  PG_DEBUG_WIN //AVP cleanup
//
//  #define   DBG_err_msg(msg)              err_msg(msg)
//  #define   DBG_CHK_err_msg(cond,msg)     {if(cond) err_msg(msg);}
//  #define   DBG_ChkSPECL(pld)             ChkSPECL_msg(pld)
//
//  #define   DBG_print_seq_of_elem(s)                  {}
//  #define   DBG_print_end_seq_of_elem(s)              {}
//  #define   DBG_final_print(s)                        {}
//  #define   DBG_BlinkShowElemEQ6(s,x,y,f,d)           {}
//  #define   DBG_BlinkShowElemGT5(s,x,y,color)         {}
//  #define   DBG_ShowElemsGT5(s,n,x,y,mode,str)        {}

#else  /* !PG_DEBUG */
  #define   DBG_print_seq_of_elem(s)                  {}
  #define   DBG_print_end_seq_of_elem(s)              {}
  #define   DBG_final_print(s)                        {}
  #define   DBG_err_msg(msg)                          {}
  #define   DBG_CHK_err_msg(cond,msg)                 {}
  #define   DBG_BlinkShowElemEQ6(s,x,y,f,d)           {}
  #define   DBG_BlinkShowElemGT5(s,x,y,color)         {}
  #define   DBG_ShowElemsGT5(s,n,x,y,mode,str)        {}
  #define   DBG_ChkSPECL(pld)                         {}
#endif  /*PG_DEBUG*/

#endif  /*LOW_DBG_H*/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\param.h ===
#ifndef     PARAM_INCLUDED
  #define     PARAM_INCLUDED

  #define     USE_RESAM_32     1

  #define     USE_C_32         0
  #define     USE_ASM_86       1
  #define     USE_ASM_SH3      2
  #define     USE_ASM_MIPS     3 

  #define     FIXED_ARITHMETIC    USE_C_32
//  #define     FIXED_ARITHMETIC    USE_ASM_86


  #define    _POINT_DEFINED    
   typedef struct   {
    _SHORT  x     ;
    _SHORT  y     ;
  } _POINT, _PTR  p_POINT;

  #define    _3DPOINT_DEFINED    
   typedef struct   {
    _SHORT  x;
    _SHORT  y;
    _SHORT  z;
    _SHORT  p;
  } _3DPOINT, _PTR  p_3DPOINT;


/*
 typedef struct   {
    _SHORT  left  ;
    _SHORT  top   ;
    _SHORT  right ;
    _SHORT  bottom;
  } _RECT, _PTR  p_RECT;
*/

 typedef struct   {
    _LONG    x    ;
    _LONG    y    ;
    _LONG   dx    ;
    _LONG   dy    ;
    _LONG    s    ;
    _LONG    r    ;
  } _ODATA , _PTR  p_ODATA;

 typedef struct   {
    _LONG    x    ;
    _LONG    y    ;
    _LONG    z    ;
    _LONG   dx    ;
    _LONG   dy    ;
    _LONG   dz    ;
    _LONG    s    ;
    _LONG    r    ;
  } _ODATA3D , _PTR  p_ODATA3D;

  typedef struct  {
    _LONG    Ax   ;
    _LONG    Ay   ;
    _LONG    Rx   ;
    _LONG    Ry   ;
    _LONG    s    ;
    _LONG    r    ;
  } _ARDATA, _PTR  p_ARDATA;

  typedef struct  {
    _LONG    Ax   ;
    _LONG    Ay   ;
    _LONG    Az   ;
    _LONG    Rx   ;
    _LONG    Ry   ;
    _LONG    Rz   ;
    _LONG    s    ;
    _LONG    r    ;
  } _ARDATA3D, _PTR  p_ARDATA3D;


 _ULONG  SQRT32        (  _ULONG   );
  // 2D
 _VOID   ResetParam    (  _INT sm, p_ARDATA   pData,  _LONG FullLen);
 _LONG   ApprError     (  _INT sm   , p_ARDATA   pARdata );
 _VOID   Tracing       (  _INT sm   , p_ARDATA   pData   );
 _LONG   Repar         (  _INT Sam  , p_ODATA    pOdata,
                          _INT ReSam, p_ARDATA   pARdata );
  // 3D
 _VOID   ResetParam3D  (  _INT sm, p_ARDATA3D pDdata, _LONG LenApp);
 _LONG   ApprError3D   (  _INT sm   , p_ARDATA3D pARdata );
 _VOID   Tracing3D     (  _INT sm   , p_ARDATA3D pData   );
 _LONG   Repar3D       (  _INT Sam  , p_ODATA3D  pOdata,
                          _INT ReSam, p_ARDATA3D pARdata );

 _VOID            FDCT16        ( p_LONG pS );
 _VOID            IDCT16        ( p_LONG pS );
 #if  USE_RESAM_32
 _VOID            FDCT32        ( p_LONG pS );
 _VOID            IDCT32        ( p_LONG pS );
 #endif

 #endif  // PARAM_INCLUDED
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\palk.h ===
/* *************************************************************************** */
/* *    Tree - based dictionary programs                                     * */
/* *************************************************************************** */
/* * Created 3-1998 by NB.   Last modification: 1-26-99                      * */
/* *************************************************************************** */

#ifndef PALK_H_INCLUDED
#define PALK_H_INCLUDED


typedef unsigned char uchar;

//#ifndef PALK_SUPPORT_PROGRAM     //For Calligrapher
#include "elk.h"     
//#endif

//-------------- Defines -------------------------------------------------------

#define PALK_ID_STRING      "PLK dict v.1.01."
#define PALK_ID_LEN         16
#define PALK_VER_ID         (('1' << 0) | ('.' << 8) | ('0' << 16) | ('1' << 24))
#define PALK_VER_ID_LEN     4

#define PALK_ID_STRING_PREV "PLK dict v.1.00."
#define PALK_VER_ID_PREV    (('1' << 0) | ('.' << 8) | ('0' << 16) | ('0' << 24))


#define  PLAIN_TREE_ID  "NB: PLAIN TREE  "
#define  MERGED_TREE_ID "NB: MERGED TREE "
#define  PALK_TREE_ID_LEN     16


//#ifndef PALK_SUPPORT_PROGRAM     //For Calligrapher

#define PALK_NOERR          ELK_NOERR            
#define PALK_ERR            ELK_ERR 

#define PALK_MAX_WORDLEN    ELK_MAX_WORDLEN
/*
#else //PALK_SUPPORT_PROGRAM

#define PALK_NOERR        0
#define PALK_ERR          1
                                     
#define PALK_MAX_WORDLEN 40

#endif  //PALK_SUPPORT_PROGRAM
*/


#define  DICT_INIT        1      /* Empty vertex (the only vertex in empty voc)*/


#define  LHDR_STEP_LOG   4     //6
#define  LHDR_STEP_MASK  0x0F //0x3F                        //0011 1111
#define  LHDR_STEP       (1<<LHDR_STEP_LOG)                 //64

#define  MAX_CHSET_LEN   80
#define  MAX_DVSET_LEN   32

#define  MIN_LONG_DVSET_NUM  16
#define  MIN_LONG_CHSET_NUM  64

//------------------Vertex Flags and Masks----------------------------/

#define  ONE_BYTE_FLAG   ((uchar)0x80)             //1000 0000
#define  END_WRD_FLAG    ((uchar)0x40)            //0100 0000
#define  ATTR_MASK        0x30                             //0011 0000
                                              // FOR MERGED TREE
#define  CODED_DVSET_FLAG       ((uchar)0x20)      //0010 0000
#define  SHORT_DVSET_NUM_FLAG   ((uchar)0x10)      //0001 0000
#define  DVSET_NUM_MASK         0x0F                       //0000 1111
#define  DVSET_LEN_MASK         0x0F                       //0000 1111
#define  CODED_CHSET_FLAG       ((uchar)0x80)      //1000 0000
#define  SHORT_CHSET_NUM_FLAG   ((uchar)0x40)      //0100 0000
#define  CHSET_NUM_MASK         0x3F                       //0011 1111

#define  SHORT_CHSET_LEN_FLAG 0x20                //not used
#define  SHORT_CHSET_LEN_MASK 0x1F                //not used
#define  SHORT_ECHSET_LEN_FLAG 0x08               //used in Plain Tree
#define  SHORT_ECHSET_LEN_MASK 0x07               //used in Plain Tree 

//in chset                                                   
#define  LAST_SYM_FLAG          ((uchar)0x80)
//in dvset                                                 
#define  SHORT_VADR_FLAG        0x80                       //1000 0000



//--------- Macros'y --------------------------------------------------------------

#define PutPalkID(pV) ( *((unsigned long *)pV) = (unsigned long)PALK_VER_ID )

#define VBeg(pV) ((uchar *)pV+PALK_VER_ID_LEN)

#define IsTreeMerged(pV)        ( ( *(int *)VBeg(pV) > 0 ) ? 1 : 0 ) 
#define PutTreeMerge(pV,b)      ( *(int *)VBeg(pV) = (b) ? 1 : 0 )

#define IsVocChanged(pV)        ( ( *(int *)VBeg(pV) < 0 ) ? 1 : 0 )
#define PutVocIsChanged(pV)     { if (IsTreeMerged(pV)==0) *(int *)VBeg(pV)=-1; }
 

#define PalkHeaderSize(IsMerged) ( (IsMerged) ?  \
            PALK_VER_ID_LEN+sizeof(int)+sizeof(int)+sizeof(int)+sizeof(int) :   \
            PALK_VER_ID_LEN+sizeof(int)+sizeof(int) )

#define PalkGetVocHeaderSize(pV) ( PalkHeaderSize(IsTreeMerged(pV)) )

#define PalkGetGraphSize(pV) (*(int *)( VBeg(pV)+sizeof(int) ))
#define PalkPutGraphSize(pV,s) ( PalkGetGraphSize(pV) = s )
#define PalkGetChsetTablSize(pV) (*(int *)( VBeg(pV)+sizeof(int)+sizeof(int) ))
#define PalkPutChsetTablSize(pV,s) ( PalkGetChsetTablSize(pV) = s )
#define PalkGetDvsetTablSize(pV) (*(int *)( VBeg(pV)+sizeof(int)+sizeof(int)+sizeof(int) ))
#define PalkPutDvsetTablSize(pV,s) ( PalkGetDvsetTablSize(pV) = s )

#define PalkGetGraph(pV)  ( (uchar *)pV + PalkGetVocHeaderSize(pV) )
#define PalkGetChsetTabl(pV)( (void *)((uchar *)PalkGetGraph(pV)+PalkGetGraphSize(pV)) )
#define PalkGetDvsetTabl(pV)( (void *)((uchar *)PalkGetGraph(pV)+PalkGetGraphSize(pV)+PalkGetChsetTablSize(pV)) )


//--------- Proto --------------------------------------------------------------


int PalkGetNextSyms(void *cur_fw, void *fwb, void *pd, p_rc_type prc);
int PalkAddWord(uchar *word, uchar attr, void **pd);
int PalkCreateDict(void **pd);
int PalkFreeDict(void **pd);
int PalkLoadDict(uchar *name, void **pd);
int PalkSaveDict(uchar *name, void *pd);
int PalkCheckWord(uchar *word,uchar *status,uchar *attr,void *pd);
int PalkGetDictStatus(int *len, void *pd);
int PalkGetDictMemSize(void *pVoc);




#endif //PALK_H_INCLUDED


/* *************************************************************************** */
/* *       BRIEF DESCRIPTION                                                        * */
/* *************************************************************************** *

There are 2 types of PALK dictionary: PLAIN TREE and MERGED TREE.
PLAIN TREE is usual uncompressed dictionary tree; this type is used for
User Voc, since new words can be easily added to PLAIN TREE.
PalkCreateDict creates empty PLAIN TREE with PALK_MAX_WORDLEN levels;
PalkAddWord adds words to it. Other Palk functions work with both dict types.


MERGED TREE represents a Deterministic Finite State Machine with minimum number
of states generating list of words L,
i.e. it is a Labeled (i.e. with a letter on each edge) Directed Acyclic Graph G,
satisfying the following conditions:
(1) Every full path of G represents a word from list L;
(2) Every word from list L is represented by a full path of G;
(3) Any 2 edges with common starting node are labeled by different symbols;
(4) G has minimal (with respect to first 3 properties) number of nodes.

Merged Tree is constructed from Plain Tree first by merging leaves (rank 0),
then by merging appropriate nodes of rank 1, and so on, (here node rank is
defined by max path length from node to a leaf).

All edges of final graph G can be divided into 2 sets:
1) non-diagonal (or nd_childs): these are edges from initial tree,
each of them lead to a first-in-a-set-of-merging-nodes.
2) diagonal (or d_childs), which appear in the process of merging.

As graph G without diagonal edges form a tree structure, it can be represented
in a similar to ELK format:
All nodes are ordered with respect to this tree structure.
Graph header contains relative pointers to each level and number of
nodes in prev levels.
Each level header contains rel. pointer and number of prev nd_childs
for each LHDR_STEP-th node, thus # of first (and other) nd_child of a
node can be easily calculated by scanning only prev nodes in corresponding
segment of LHDR_STEP length.
Thus every node should contain only (a) list of symbols for all childs
(nd_childs symbols - first) [chset], (b) list of addresses (#-s in graph) for
d_childs [dvset].

Those chsets and dvsets, which are frequently used, are coded: sets are
extracted in ChsetTabl and DvsetTabl; corresponding nodes in Graph contain
only # of a set in a table. (# of a coded set, length of an uncoded
dvset and # of a vertex in a dvset can be written down in either long or
short form, with corresponding one bit flag).

Sets in Tabls are ordered according to their length; for each length
there is an entry in Tabl header, which contains length and # and rel.
pointer to the first set of this length.


Spec. notes:
1. In Plain Tree length of (uncoded) chset is indicated in a node before
the chset, either in short or long form.  In Merged Tree length is not
indicated, last sym in chset is marked by LAST_SYM_FLAG. Thus,
chsets, containing sym>=128, should be coded.
2. END_WRD_FLAG is instead additional '\n'-child.
3. One byte node has one child, non-diag, with sym<128; no END_WRD.

4. PLAIN TREE always has PALK_MAX_WORDLEN levels; MERGED TREE has only necessary
(non-empty) levels.

* *************************************************************************** */
/* *       END OF ALL                                                        * */
/* *************************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\pegrec.h ===
/* ************************************************************************** */
/* *   Head functions of Pegasus recognizer header                          * */
/* ************************************************************************** */
#ifndef PR_PEGREC_H_INCLUDED
#define PR_PEGREC_H_INCLUDED

#include "Cgr_Ver.h"
#include "bastypes.h"

#ifndef DLLEXP
 #define DLLEXP _stdcall
#else
 #define __cdecl
#endif

#if (defined(__PSION32__) || defined(__WINS__) || defined(__MARM__))
 #define _PSION_DLL
 #include <e32def.h>
 #ifdef DLLEXP
  #undef DLLEXP
 #endif
 #if defined(__DLL__)
  #define DLLEXP EXPORT_C
 #else
  #define DLLEXP IMPORT_C
 #endif /* __DLL__ */
 #ifdef __cdecl
  #undef __cdecl
 #endif
 #define __cdecl GLDEF_C
#endif /* __PSION32__ */

/* ------------------------- Defines ---------------------------------------- */

// #define PEG_RECINT_UNICODE          /* Will Recognizer pass text strings as UNICODE strings or char strings */

#define PEG_RECINT_ID_001 0x01000002   /* Rec Interface ID */
#define PEG_MAX_SPELL_NUM_ALTS 10      /* How many variants will be out by the SpellCheck func */
#define PEG_RECID_MAXLEN       45      /* Max length of the RecID string */
#define PEG_MAX_FILENAME      128      /* Limit for filename buffer */
                                       /* Recognizer Control Falgs */
#define PEG_RECFL_NSEG				0x0001      /* Do not perform segmentation at all*/
#define PEG_RECFL_NCSEG				0x0002      /* Do not allow segm not waiting for final stroke. (No results on the go) */
#define PEG_RECFL_TTSEG				0x0004      /* Perform read-ahead of tentative segmented words */
#define PEG_RECFL_INTL_CS			0x0010      /* Enables international charsets */
#define PEG_RECFL_LANGMODEL_DISABLED	0x0020      /* Disables word dictionary */
#define PEG_RECFL_SEPLET			0x0100      /* Enables separate letter mode */
#define PEG_RECFL_DICTONLY			0x0200      /* Restricts dictionary words only recognition */
#define PEG_RECFL_NUMONLY			0x0400      /* NUMBERS only  */
#define PEG_RECFL_CAPSONLY			0x0800      /* CAPITALS only */
#define PEG_RECFL_COERCE			0x1000      /* Is COERCION enabled */

                                       /* Bits of recognizer capabilities */
#define PEG_CPFL_CURS      0x0001      /* Cursive capable */
#define PEG_CPFL_TRNBL     0x0002      /* Training capable */
#define PEG_CPFL_SPVSQ     0x0004      /* Speed VS Quality control capable */
#define PEG_CPFL_INTER     0x0008      /* International support capable */

#define PEG_SPELL_CHECK    0x0000      /* SpellCheck flag: do spell checking */
#define PEG_SPELL_LIST     0x0001      /* SpellCheck flag: list continuations */

#define CGA_NUM_ANSWERS      1         /* Request to get number of recognized words */
#define CGA_NUM_ALTS         2         /* Request number of alternatives for given word */
#define CGA_ALT_WORD         3         /* Requestto get pointer to a given word alternative */
#define CGA_ALT_WEIGHT       4         /* Request to get weight of a give word alternative */
#define CGA_ALT_NSTR         5         /* Request to get number of strokes used for a given word alternative */
#define CGA_ALT_STROKES      6         /* Request to get a pointer to a given word alternative stroke ids */

#define LRN_WEIGHTSBUFFER_SIZE 448
#define LRN_SETDEFWEIGHTS_OP 0         /* LEARN interface commands for CgrGetSetPictWghts func */
#define LRN_GETCURWEIGHTS_OP 1
#define LRN_SETCURWEIGHTS_OP 2


/* ------------------------- Structures ------------------------------------- */

typedef void * CGRCTX;                 /* Type of handle of recognizer context */
typedef void * CGRHDICT;               /* Type of handle of user dictionary handle */
typedef int  (__cdecl *info_func_type)(void *); /* Type of the callback returning parent status */

#ifdef PEG_RECINT_UNICODE
 typedef unsigned short UCHR;          /* Unicode character define */
#else  // PEG_RECINT_UNICODE
 typedef char UCHR;                    /* Regular character define */
#endif // PEG_RECINT_UNICODE

typedef struct  {							/* Control structure for initializing recognition */
                 int		flags;			/* place for the PEG_RECFL_ flags */
                 int		sp_vs_q;		/* Parameter of speed-quality tradeof */
				 CGRHDICT h_main_dict;   /* Handle to user dictionary loaded by ELK functions */
				 p_VOID     h_user_dict;      /* user dict handle       */
				 info_func_type InfoCallBack;  /* CallBack for interrupting recognizer operation */
                 void * ICB_param;     /* Parameter, which will be passed to InfoCallBack */
				 void *pvFactoid;
				 unsigned char *szPrefix;
				 unsigned char *szSuffix;
                } CGR_control_type, * p_CGR_control_type;

typedef struct  {
                 int    capabilities;  /* Bits (PEG_CPFL_) describing what type of recognizer it is */
                 UCHR   id_string[PEG_RECID_MAXLEN]; /* Name of the recognizer */
                } CGR_ID_type, * p_CGR_ID_type;

typedef struct  {                      /* Trajectory point declaration */
                 short  x;
                 short  y;
                }CGR_point_type, * p_CGR_point_type;

typedef struct  {                      /* Baseline definition for SymbRecognize */
                 int    size;
                 int    base;
                } CGR_baseline_type, * p_CGR_baseline_type;

/* ------------------------- Prototypes ------------------------------------- */

#ifdef __cplusplus
extern "C"
{
#endif

// --------------- Recognition API functions ----------------------------------- 

int      DLLEXP CgrGetRecID(p_CGR_ID_type p_inf);
int      CgrGetRecIDInternal(p_CGR_ID_type p_inf);

CGRCTX   DLLEXP CgrCreateContext(void);
CGRCTX   CgrCreateContextInternal(void);
CGRCTX	 getContextFromGlobal(CGRCTX context);
void	PegRecUnloadDti(CGRCTX context);

int      DLLEXP CgrCloseContext(CGRCTX context);
int      CgrCloseContextInternal(CGRCTX context);

int      DLLEXP CgrOpenSession(p_CGR_control_type ctrl, CGRCTX context);
int      CgrOpenSessionInternal(p_CGR_control_type ctrl, CGRCTX context);

int      DLLEXP CgrCloseSession(CGRCTX context);
int      CgrCloseSessionInternal(CGRCTX context, void *pxrc, int bRecognize);

int      DLLEXP CgrRecognize(int npoints, p_CGR_point_type strokes, CGRCTX context);
int      CgrRecognizeInternal(int npoints, p_CGR_point_type strokes, CGRCTX context, int bRecognize);

int      DLLEXP CgrRecognizeSymbol(int npoints, p_CGR_point_type strokes, p_CGR_baseline_type baseline, CGRCTX context);
int      CgrRecognizeSymbolInternal(int npoints, p_CGR_point_type strokes, p_CGR_baseline_type baseline, CGRCTX context);

long     DLLEXP CgrGetAnswers(int what, int nw, int na, CGRCTX context);
long     CgrGetAnswersInternal(int what, int nw, int na, CGRCTX context);

// -------------- Dictionary functions -----------------------------------------
 
int      DLLEXP CgrLoadDict(char * store, CGRHDICT *phDict);
int      CgrLoadDictInternal(char * store, CGRHDICT *phDict);

int      DLLEXP CgrSaveDict(char * store, CGRHDICT h_dict);
int      CgrSaveDictInternal(char * store, CGRHDICT h_dict);

int      DLLEXP CgrFreeDict(CGRHDICT * h_dict);
int      CgrFreeDictInternal(CGRHDICT * h_dict);

int      DLLEXP CgrGetDictStatus(int * plen, CGRHDICT h_dict);
int      CgrGetDictStatusInternal(int * plen, CGRHDICT h_dict);

int      DLLEXP CgrAddWordToDict(UCHR * word, CGRHDICT * h_dict);
int      CgrAddWordToDictInternal(UCHR * word, CGRHDICT * h_dict);

int      DLLEXP CgrCheckWordInDicts(UCHR * word, CGRHDICT h_main_dict, CGRHDICT h_user_dict);
int      CgrCheckWordInDictsInternal(UCHR * word, CGRHDICT h_main_dict, CGRHDICT h_user_dict);
#ifndef _PSION_DLL
int      DLLEXP CgrSpellCheckWord(UCHR * word, UCHR * answ, int buf_len, CGRHDICT h_main_dict, CGRHDICT h_user_dict, int flags);
int      CgrSpellCheckWordInternal(UCHR * word, UCHR * answ, int buf_len, CGRHDICT h_main_dict, CGRHDICT h_user_dict, int flags);
#endif

// -------------- Letter Shape selector functions ------------------------------

int      DLLEXP CgrGetSetPicturesWeights(int operation, void * buf, CGRCTX context); // Private API call

// -----------------------------------------------------------------------------
#ifdef __cplusplus
}
#endif


#endif /* PR_PEGREC_H_INCLUDED */
/* ************************************************************************** */
/* *   Head functions of Pegasus recognizer header end                      * */
/* ************************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\lk_code.h ===
/***********************************************************************/
/*                        MAIN CONSTANTS                               */
/***********************************************************************/

#ifndef LK_CODE_INCLUDED
#define LK_CODE_INCLUDED

#include "ams_mg.h"
#include "xr_names.h"

/***********************************************************************/
/*                         GLOBAL VARIABLES                            */
/***********************************************************************/

#if  PG_DEBUG
extern _SHORT mpr;                  /* printing mask                   */
extern char *code_name[],        /* deciphering of codes` names        */
            *dist_name[];        /* position deciphering               */
#endif

/***********************************************************************/
/*                    IMPORTANT CONSTANTS                              */
/***********************************************************************/
#define ICOS        -79L          /* % limit of cros. angle for stick  */
#define OCOS         -1L          /* 65                  for circle    */
#define GCOS         70L          /* angle of  gammas` curve  opening  */
#ifdef FORMULA
#define DUGCOS       35L
#define O_LITTLE     50        /* % coeff. for defin. of small circles */
#else
#define DUGCOS       50L
#define O_LITTLE     50        /* % coeff. for defin. of small circles */
#endif /*FORMULA*/
#define Z_LITTLE     25        /* % coeff. for defin. of small breaks  */
#define LEN_CROSS    75        /* % coeff. of min crossing`s length    */

#define  DHEIGHT_BIG_DARCS  6  /* Height difference of the ends of the */
                               /* vertical arc for it to be consi-     */
                               /* dered as big one (usually bracket).  */
#define  DHEIGHT_SMALL_DARCS 3   /* Height difference of the ends of the */
                               /* vertical arc for it to be consi-     */
                               /* dered as small one (usually arc at   */
                               /* "p"                                  */

/***********************************************************************/
/*                CODES OF MAIN CONSTANTS                              */
/***********************************************************************/
#define  _NO_CODE  0x00                   /* no code                   */
#define  _ZZ_      0x01                   /* break                     */
#define  _UU_      0x02                   /* arc. up                   */
#define  _IU_      0x03                   /* I up   - max black        */
#define  _GU_      0x04                   /* gamma up                  */
#define  _O_       0x05                   /* O element                 */
#define  _GD_      0x06                   /* gamma down                */
#define  _ID_      0x07                   /* I-down    - min black     */
#define  _UD_      0x08                   /* arc down                  */
#define  _UUL_     0x09                   /*arc up with min to the left*/
#define  _UUR_     0x0a                  /*arc up with min to the right*/
#define  _UDL_     0x0b                 /*arc down with min to the left*/
#define  _UDR_     0x0c                /*arc down with min to the right*/
#define  _XT_      0x0d                   /* stroke                    */
#define  _ANl      0x0e                   /* direction changing        */
#define  _DF_      0x0f                   /* shelf                     */
#define  _ST_      0x10                   /* point                     */
#define  _ANr      0x11                   /* direction changing        */
#define _ZZZ_      0x12                   /* break                     */
#define _Z_        0x13                   /* next elem - to the left   */
#define _FF_       0x14                   /* large break               */
#define _DUR_      0x15   /* Double move upper with right end          */
#define _CUR_      0x16   /* Circle upper with right end               */
#define _CUL_      0x17   /* Circle upper with left end                */
#define _DUL_      0x18   /* Double move down with left end            */
#define _DDR_      0x19   /* Double move down  with right end          */
#define _CDR_      0x1a   /* Circle down  with right end               */
#define _CDL_      0x1b   /* Circle down  with left end                */
#define _DDL_      0x1c   /* Double move down with left end            */
#define _GUs_      0x1d   /* Small gamma up                            */
#define _GDs_      0x1e   /* Small gamma down                          */
#define _Gl_       0x1f   /* Gamma left                                */
#define _Gr_       0x20   /* Gamma right                               */
#define _UUC_      0x21   /* circle arc up                             */
#define _UDC_      0x22   /* circle arc down                           */

  /*CHE*/
#define _TS_       0x23   /* S-like arc                                */
#define _TZ_       0x24   /* Z-like arc                                */
#define _BR_       0x25   /* Right D-arc                               */
#define _BL_       0x26   /* Left D-arc                                */

#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
#define _BSS_      0x27   /* Special SHELF                             */
#endif /* FOR_GERMAN */

#define _AN_UR     0x28   /* Angle-like upper-right corner.            */
#define _AN_UL     0x29   /* Angle-like upper-left corner.             */

#ifdef  FORMULA

#error  Recode these elems for FORMULA project!!!!
#define  _ERU_     0x14                   /* End right-up              */
#define  _ELU_     0x15                   /* End left-up               */
#define  _ERD_     0x16                   /* End right-down            */
#define  _ELD_     0x17                   /* End left-down             */

#define  _SRU_     0x18                   /* Start from right-up       */
#define  _SLU_     0x19                   /* Start from left-up        */
#define  _SRD_     0x20                   /* Start from right-down     */
#define  _SLD_     0x21                   /* Start from left-down      */

#endif /*FORMULA*/

/***********************************************************************/
/*       POSITION OF ELEMENTS AND THEIR SIGNS                          */
/***********************************************************************/

#define _f_    ((_UCHAR)0x10)     /* arc moves clockwise               */
#define _b_    ((_UCHAR)0x20)     /* arc moves counter clockwise       */


#define _fUS1_  (_f_|_US1_)           /* h    clockwise                    */
#define _fUS2_  (_f_|_US2_)
#define _fUE1_  (_f_|_UE1_)           /* e    clockwise                    */
#define _fUE2_  (_f_|_UE2_)
#define _fUI1_  (_f_|_UI1_)           /* i    clockwise                    */
#define _fUI2_  (_f_|_UI2_)
#define _fMD_   (_f_|_MD_)            /* g    clockwise                    */
#define _fDI1_  (_f_|_DI1_)
#define _fDI2_  (_f_|_DI2_)           /* h    clockwise                    */
#define _fDE1_  (_f_|_DE1_)
#define _fDE2_  (_f_|_DE2_)           /* t    clockwise                    */
#define _fDS1_  (_f_|_DS1_)
#define _fDS2_  (_f_|_DS2_)           /*                                   */

#define _bUS1_  (_b_|_US1_)           /* h    counter clockwise            */
#define _bUS2_  (_b_|_US2_)
#define _bUE1_  (_b_|_UE1_)           /* e    counter clockwise            */
#define _bUE2_  (_b_|_UE2_)
#define _bUI1_  (_b_|_UI1_)           /* i    counter clockwise            */
#define _bUI2_  (_b_|_UI2_)
#define _bMD_   (_b_|_MD_)            /* g    counter clockwise            */
#define _bDI1_  (_b_|_DI1_)
#define _bDI2_  (_b_|_DI2_)           /* h    counter clockwise            */
#define _bDE1_  (_b_|_DE1_)
#define _bDE2_  (_b_|_DE2_)           /* t    counter clockwise            */
#define _bDS1_  (_b_|_DS1_)
#define _bDS2_  (_b_|_DS2_)           /*      counter clockwise            */

#define _OVR_      ((_UCHAR)0x40)     /* veto on wordcutting after element */
#define _fb_       ((_UCHAR)0x30)   /* code for marking out round direction*/
/***********************************************************************/
/*         Code for storing in byte specl->other                       */
/***********************************************************************/

/* directions of angles and information concerning use of them -
           files ANGLE.C, LK_BEGIN.C, CROSS_G.C, LK_NEXT.C */
#define _ANGLE_UP_           0x10 /* angle up                          */
#define _ANGLE_DOWN_         0x20 /* angle down                        */
#define _ANGLE_LEFT_         0x40 /* angle to the left                 */
#define _ANGLE_RIGHT_        0x80 /* angle to the right                */

#define _ANGLE_DIRECT_       0xf0 /* code for marking angle direction  */

#define NOT_RESTORED         0x01 /* for not restored angles   */
#define WAS_DELETED_BY_CROSS 0x02 /* deleted by CROSS at first */
#define WAS_DELETED_BY_STICK 0x04 /* deleted by STICK at first */
#define INNER_ANGLE          0x08 /* angle inside crossing like B */

/* mark field other for elements inside and outside the circle -
           module CROSS_G.C, LK_NEXT.C */
#define INSIDE_CIRCLE         0x40
#define OUTSIDE_CIRCLE        0x80

/* Mark SHELF as belongs to small 'h' - module PICT.C */
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
 #define LETTER_H_STEP        0x01
 #define ZERO_PENALTY         0x02
 #define REGULAR_PENALTY      0x04
 #define LARGE_PENALTY        0x08
#endif

/* mark field other for CROSS elements - module CIRCLE.C */
#define CIRCLE_FIRST          0x63
#define CIRCLE_NEXT           0x64

/* Mark O as converted from GU - module CROSS_G.C, LK_NEXT.C */
#define WAS_CONVERTED_FROM_GU    0x01
/* Mark O as too narrow - module CROSS_G.C, LK_NEXT.C */
#define TOO_NARROW               0x02
/* Mark Gsmall as converted from Gamma - module CROSS_G.C, LK_NEXT.C */
#define WAS_CONVERTED_FROM_GAMMA 0x04
/* mark field other for Gamma-elements,
   which appears in the narrow places - module CROSS_G.C, LK_NEXT.C */
#define NO_ARC                   0x08

/* Mark IU or ID, if they were STICK or CROSS - module CROSS_G.C, LK_NEXT.C */
#define WAS_STICK_OR_CROSS    0x01
/* Mark IU or ID, if they were in STICK, but it was too little
   and was thrown away - module CROSS_G.C, LK_NEXT.C */
#define WAS_INSIDE_STICK      0x02
/* Mark IU, ID or any arc with tail as "non-deleted" - module LK_NEXT.C */
#define DONT_DELETE           0x04
/* Mark IU, ID as near artificial break - module LK_BEGIN.C, BREAKS.C */
#define MIN_MAX_CUTTED        0x08
/* Mark IU, ID as glued with another one - module LK_NEXT.C */
#define WAS_GLUED             0x10
/* Mark IU or ID, if there are in redirected stick - module BREAKS.C */
#define WAS_REDIRECTED        0x20

/* Mark STROKEs and DOTs as:
   - processed or not-processed - module BREAKS.C
   STROKE as:
   - cutted - modules PICT.C,BREAKS.C,CONVERT.C
   - with crossing - module BREAKS.C,CONVERT.C
   - fake - module BREAKS.C
   - reanimated - modules SKETCH.C,BREAKS.C,CONVERT.C (FOR_FRENCH)
   DOT as:
   - artificial made to convert it to UMLAUT - module BREAKS.C (FOR_GERMAN and FOR_FRENCH)
   - apostrof - module el_aps.C
   - clitics - modules BREAKS.C,CONVERT.C
   - cedilla - modules SKETCH.C,BREAKS.C,CONVERT.C (FOR_FRENCH)
   - cedilla in the end - modules SKETCH.C,BREAKS.C,CONVERT.C (FOR_FRENCH)
   - artificial made to convert it to ANGSTREM - module BREAKS.C (FOR_SWED)
*/
#define NOT_PROCESSED         0x00
#define PROCESSED             0x01

#define CUTTED                0x02
#define WITH_CROSSING         0x04
#define FAKE                  0x08
#if defined(FOR_FRENCH) || defined (FOR_INTERNATIONAL)
 #define REANIMATED           0x10
#endif /* FOR_FRENCH */
#define RIGHT_KREST           0x20

#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
 #define ST_UMLAUT            0x02
#endif /* FOR_GERMAN... */
 #define ST_APOSTR            0x04
 #define ST_QUOTE             0x08
#if defined(FOR_FRENCH) || defined (FOR_INTERNATIONAL)
 #define ST_CEDILLA           0x10
 #define CEDILLA_END          0x20
#endif /* FOR_FRENCH */

#if defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
 #define ST_ANGSTREM          0x40
#endif /* FOR_SWED */
/* Mark Breaks as:
   - FF_PUNCT to treat them as punctuation separators - module BREAKS.C
   - NO_PENALTY to treat them as apostrof separators - modules EL_APS.C,BREAKS.C
   - SPECIAL_ZZ to distinguish them from the original (with crossing) ZZ - module BREAKS.C, CONVERT.C
   - FF_CUTTED (artificially made) - module LK_BEGIN.C, BREAKS.C, CONVERT.C
   - Z_UP_DOWN (2-nd stroke higher 1-st) to distinguish them from the original (with crossing) Z - module BREAKS.C, CONVERT.C
*/
 #define FF_PUNCT             0x01
 #define NO_PENALTY           0x02
 #define SPECIAL_ZZ           0x04
 #define FF_CUTTED            0x08
 #define Z_UP_DOWN            0x10

/***********************************************************************/
/* Function's prototypes                                               */
/***********************************************************************/

 _VOID Restore_AN(p_low_type low_data,p_SPECL pCross,
                 _UCHAR RestoreMask,_SHORT NumCr);

#endif  /*  LK_CODE_INCLUDED  */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\mlp.h ===
/* **************************************************************************** */
/* **************************************************************************** */
/* *                  AVP 1996                                                * */
/* **************************************************************************** */
#ifndef MLP_HEADER_INCLUDED
#define MLP_HEADER_INCLUDED

#include "snn.h"

#if !MLP_PRELOAD_MODE
  #include "stdio.h"
#endif

// -------------------- Defines ------------------------------------------------

#define MLP_EXPTABL_MAX        8
#define MLP_EXPTABL_SIZE      512

// -------------------- Defines ------------------------------------------------

#define MLP_UNROLL_CYCLES      1
#define MLP_ROLLING_LEARN      0

#define MLP_F_CELL_CMASK      0x0001
#define MLP_F_CELL_PMASK      0x0002

// -----------------------------------------------------------------------------

#define  MLP_ABS(x) (((x) > 0) ? (x):(-(x)))
#define  MLP_ERR(e) ((e)*(e)*(e))
//#define  MLP_ERR(e) (((e) > 0) ? (e)*(e) : -((e)*(e)))

#if MLP_UPSCALE

 #if MLP_BYTE_NET

  #define MLP_MAX_INT_C 127
  #define MLP_MAX_INT_S 255

  #if MLP_INT_MODE
   #define x_UPCO_C    << 3
   #define x_DNCO_C    >> 3
   #define x_UPCO_S    << 8
   #define x_DNCO_S    >> 8
   #define x_DNDNCO_S  >> 16
  #else
   #define x_UPCO_C    *(8)
   #define x_DNCO_C    *(0.125)
   #define x_UPCO_S    *(256)
   #define x_DNCO_S    *(0.00390625)
   #define x_DNDNCO_S  *(1.52587890625E-05)
  #endif

 #else // SHORT mode

  #define MLP_MAX_INT_C 32767
  #define MLP_MAX_INT_S 4095

  #if MLP_INT_MODE
   #define x_UPCO_C    << 9
   #define x_DNCO_C    >> 9
   #define x_UPCO_S    << 12
   #define x_DNCO_S    >> 12
   #define x_DNDNCO_S  >> 24
  #else
   #define x_UPCO_C    *(512)
   #define x_DNCO_C    *(0.001953125)
   #define x_UPCO_S    *(4096)
   #define x_DNCO_S    *(0.000244140625)
   #define x_DNDNCO_S  *(5.96046447753906E-08)
  #endif

 #endif // MLP_BYTE_NET

#else

// #define MLP_MAX_INT_C 63.9
// #define MLP_MAX_INT_C 15.875
 #define MLP_MAX_INT_C 127
 #define MLP_MAX_INT_S 1.0

 #define x_UPCO_C
 #define x_DNCO_C
 #define x_UPCO_S
 #define x_DNCO_S
 #define x_DNDNCO_S

#endif

#if MLP_EMULATE_INT && !(MLP_INT_MODE)
 #define FINT_C_OF(x) ((fint_c)(x))
 #define FINT_S_OF(x) ((fint_s)(x))
#else
 #define FINT_C_OF(x) ((flong)(x))
 #define FINT_S_OF(x) ((flong)(x))
#endif

#if MLP_INT_MODE
 #define FINT_C_LD(x) (((x) > -MLP_MAX_INT_C && (x) < MLP_MAX_INT_C) ? (fint_c)(x) : (((x) > 0) ? MLP_MAX_INT_C : -MLP_MAX_INT_C))
#else
 #define FINT_C_LD(x) (x)
#endif

// -------------------- Structures and classes ---------------------------------

typedef struct
 {
  _USHORT inp_ind;
  fint_c  bias;
  fint_c  weights[MLP_CELL_MAXINPUTS];

  #if MLP_LEARN_MODE // Debug + learning
  float   err;

  float   sbias;
  float   psbias;
  float   sws[MLP_CELL_MAXINPUTS];
  float   psws[MLP_CELL_MAXINPUTS];
  _INT    num_sws;
  _INT    num_psws;

  _UCHAR  flags;
//  _USHORT out_ind;
  _INT    num_changes;
  float   prev_val;
  #endif
 } mlp_cell_type, * p_mlp_cell_type;

typedef struct
 {
  flong   sum_delt;
  _INT    num_sum;
 } mlp_layer_type, * p_mlp_layer_type;

typedef struct
 {
  _UCHAR        id_str[32];
  _INT          num_layers;
  _INT          num_inputs;
  _INT          num_outputs;
  fint_s        exp_tabl[MLP_EXPTABL_SIZE];
  mlp_cell_type cells[MLP_NET_NUMCELLS];
 mlp_layer_type layers[MLP_NET_NUMLAYERS];
 } mlp_net_type, * p_mlp_net_type;

// ---------------- Functions --------------------------------------------------

  _INT CountNetResult(p_UCHAR inps, p_UCHAR outs, p_mlp_data_type mlpd);
fint_s CountCellSignal(_INT nc, p_mlp_data_type mlpd);

  #if !MLP_PRELOAD_MODE
  _INT LoadNet(FILE * file, p_mlp_data_type mlpd);
  _INT InitNet(_INT type, p_mlp_data_type mlpd);
  _INT FillExpTable(flong ic, p_mlp_data_type mlpd);
  #endif

  #if MLP_LEARN_MODE
  _INT InitNetWeights(_INT type, flong ic, p_mlp_data_type mlpd);
  _INT CountNetError(float * desired_outputs, flong  zc, p_mlp_data_type mlpd);
  _INT ModifyNetDeltas(_INT flags, p_mlp_data_type mlpd);
  _INT AdjustNetWeights(_INT flags, float * lcs, float ic, p_mlp_data_type mlpd);
  _INT ShakeNetWeights(_INT flags, float lc, p_mlp_data_type mlpd);
  _INT CountNetStats(_INT mode, p_mlp_data_type mlpd);
  _INT SaveNet(FILE *file, p_mlp_data_type mlpd);
  _INT DumpNet(FILE *file, p_mlp_data_type mlpd);

  _INT CalcHiddenLayerError(_INT layer_st, _INT layer_len, p_mlp_data_type mlpd);
  _INT CountLayerStats(_INT mode, _INT layer_num, _INT layer_st, _INT layer_len, p_mlp_data_type mlpd);
  _INT InitCellWeights(_INT type, float ic, _INT ncell, p_mlp_data_type mlpd);
  #endif

#endif // MLP_HEADER_INCLUDED
/* **************************************************************************** */
/* *        End OF all                                                        * */
/* **************************************************************************** */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\lowlevel.h ===
/**************************************************************************
*                                                                         *
*  LOWLEVEL.H                             Created: 28 May 1991.           *
*                                                                         *
*    This file contains the items needed for the  low  word  processing   *
*  part of the recognizer which are needed only in kernel variant.        *
*                                                                         *
**************************************************************************/

#ifndef LOW_LEVEL_INCLUDED
#define LOW_LEVEL_INCLUDED

#include "ams_mg.h"
#include "floats.h"

 #define  NEW_VERSION  _TRUE         /* New version - born in Sept.1992 */

 #define  LOW_INLINE  _FALSE  /*  If small low-level functions should be */
                              /* expanded inline (as macros).            */

 #define  USE_FRM_WORD  _FALSE    /* _TRUE - makes it able to provide    */
                                  /*        formulas wordbreaking and    */
                                  /*        recogn. enhancing by cost of */
                                  /*        code enlarging.              */
                                  /* _FALSE- no fromula wordbreaking and */
                                  /*        additional enhancement, but  */
                                  /*        code size reduces.           */



 /**************************************************************************/
 /*       CODES OF SPECIAL POINTS                                          */
 /**************************************************************************/
 /*                                                                        */
    #define       EMPTY  0x00     /*     empty mark                        */
    #define       MINW   0x01     /*     wide minimum                      */
    #define       MINN   0x02     /*     narrow minimum                    */
    #define       MAXW   0x03     /*     wide maximum                      */
    #define       MAXN   0x04     /*     narrow maximum                    */
    #define       _MINX  0x11     /*                                       */
    #define       _MAXX  0x13     /*                                       */
    #define       MINXY  0x21     /*                                       */
    #define       MAXXY  0x23     /*                                       */
    #define       MINYX  0x31     /*                                       */
    #define       MAXYX  0x33     /*                                       */
    #define       SHELF  0x05     /*     shelf                             */
    #define       CROSS  0x06     /*     crossing                          */
    #define       STROKE 0x07     /*     stroke                            */
    #define       DOT    0x08     /*     point                             */
    #define       STICK  0x09     /*     hypothetical stick                */
    #define       HATCH  0x0a     /*     crossing with the stroke          */
 /* #define       BIRD   0x12 */  /*                                       */
 /* #define       STAFF  0x21 */  /*                                       */
    #define       ANGLE  0x0b     /*     angle                             */
    #define       BEG    0x10     /* beginning of unbroken group of points */
    #define       END    0x20     /* end of the unbroken group of points   */
    #define       DROP   0x44     /* break                                 */

//GIT - new marks for SDS
    #define    SDS_INTERSECTED                   0x80
    #define    SDS_ISOLATE                       0x81
                                  /*                                       */
 /**************************************************************************/
 /*       Constants - direction setters for extrema searching.             */
 /*  They are bits in the variable and may be combined using "|".          */
 /**************************************************************************/

 #define    EMPTY_DIR    0x0000
 #define    X_DIR        0x0001
 #define    Y_DIR        0x0002
 #define    XY_DIR       0x0004
 #define    YX_DIR       0x0008

 /**************************************************************************/
 /*                CONSTANTS DEFINITION                                    */
 /**************************************************************************/
 /*                                                                        */

    #define           MAXBUF             8000       /*  max size           */
                                                    /* buffer of data      */
    #define           LOWBUF             (MAXBUF+3) /*  size of buffer for */
                                                    /* lower level.        */
    #define           SPECVAL            640        /* masssive  measurity */
                                                    /* structure of special*/
                                                    /* points .            */
    #define           N_GR_BORD          50         /* Size of an array of */
                                                    /* moveable SPECL elems*/
    #define           N_ABSNUM           50         /* Size of an array of */
                                                    /* moveable SPECL elems*/
    #define           UMSPC              50         /*                     */
                                                    /*                     */
    #define           N_SDS              200        /* Size of SDS array   */
                                                    /*                     */
    #define           LENTH_E            64         /*                     */
                                                    /*                     */
    #define           LENTH_Q            64         /*                     */
                                                    /*                     */
    #define           LENTH_S            128        /*                     */
                                                    /*                     */
    #define           ALEF               32767      /* the biggest  number */
                                                    /* y (for regime EGA ).*/
    #define           SQRT_ALEF          181        /* sqrt(ALEF)          */
                                                    /*                     */
    #define           ELEM               0          /* the  smallest       */
                                                    /* bite number         */
                                                    /* without sign        */
    #define           BREAK              -1         /* number-symbol of    */
                                                    /*   style break       */
    #define           RIGHT              319        /* the most right point*/
                                                    /*                     */
    #define           CONSTVAL           8          /* max number of files */
                                                    /*   with constants    */
                                                    /*                     */
    #define           ABSENCE            1          /*                     */
                                                    /*                     */
    #define           NOABSENCE          0          /*                     */
                                                    /*                     */
    #define           CELLSIZE           7          /*size of rastre square*/
                                                    /*                     */
    #define           END_OF_WORDS       0xff       /* End of list         */
                                                    /*                     */
    #define           UNDEF              -2         /* Undef value for in- */
                                                    /* dexes in arrays etc.*/
                                                    /*                     */
                                                    /*                     */
/***************************************************************************/
/*                 STRUCTURE OF DATA FOR LOW LEVEL                         */
/***************************************************************************/


 /*------------------------------------------------------------------------*/

  #if  defined(FOR_GERMAN)  ||  defined(FOR_FRENCH) || defined(FOR_INTERNATIONAL)

    typedef  struct
      {
        _SHORT  GroupNum        ;
        _SHORT  numMin          ;
        _CHAR   tH              ;
        _CHAR   bH              ;
        _CHAR   UmEls           ;
        _CHAR   ElsUm           ;
        _CHAR   UmDot           ;
        _CHAR   DotUm           ;
        _CHAR   UmStr           ;
        _CHAR   StrUm           ;
        _CHAR   UmCom           ;
        _CHAR   ComUm           ;
        _CHAR   CrossFeature    ;
        _CHAR   PositionFeature ;

      }
        _UM_MARKS               ,
        _PTR  p_UM_MARKS        ;


    typedef struct
      {
        p_UM_MARKS     pUmMarks     ;
        _SHORT         Um_buf_Len   ;
        _SHORT         tmpUMnumber  ;
        _SHORT         termSpecl    ;
        _SHORT         termSpecl1   ;
      }
    _UM_MARKS_CONTROL , _PTR  p_UM_MARKS_CONTROL  ;

  #endif /* FOR_GERMAN... */

 /********************************************************/
 /*           Lines description structures:              */
 /********************************************************/

  typedef struct SDB_TYPE
        {
          _SHORT   s     ;
          _SHORT   a     ;
          _SHORT   dL    ;
          _SHORT   iLmax ;
          _SHORT   dR    ;
          _SHORT   iRmax ;
          _SHORT   d     ;
          _SHORT   imax  ;
          _LONG    l     ;
          _SHORT   cr    ;
          _SHORT   ld    ;
          _SHORT   lg    ;
        } _SAD ;

  typedef _SAD _PTR  p_SAD ;


  /*    cr == (BASE*d/s);  "Curvity"                                  */
  /*    ld == (BASE*l/s);                                             */
  /*    lg == (BASE*l/(length of all part between breaks));           */
  /*                            ooo   "l"                             */
  /*                     ooooooo | ooo                                */
  /*                  ooo        |    o                       ooOO    */
  /*               ooo          |      oo                  ooo        */
  /*             oo             |        oo              oo           */
  /*           oo              | "d"       o            o             */
  /* ------- OO -------------- | ---------- o --------- o ----------  */
  /*             -------    "s"|            o           o             */
  /*                    ------------        o           o             */
  /*          "a" - slope of this >  --------OO       oo              */
  /*                 (BASE*"dy"/"dx")          oo     oo              */
  /*                                              ooo                 */


     typedef struct _SDS_TYPE
        {
          _SHORT    mark ;
          _SHORT    ibeg ;
          _SHORT    iend ;
          _SHORT    xmax ;
          _SHORT    xmin ;
          _SHORT    ymax ;
          _SHORT    ymin ;

          _SAD      des  ;
        } _SDS ;

      typedef _SDS _PTR  p_SDS ;

     typedef struct _SDS_CONTROL_TYPE
        {
           _SHORT    sizeSDS ;
           _SHORT    iBegLock_SDS ;
           _SHORT    lenSDS       ;
          p_SDS     pSDS    ;
        }
          _SDS_CONTROL      ;

     typedef _SDS_CONTROL _PTR  p_C_SDS ;

/* links description structure */
  typedef  enum
    {
      ARC_UNKNOWN = 0    ,
      ARC_LEFT           ,
      ARC_RIGHT          ,
      ARC_UP             ,
      ARC_DOWN           ,
      ARC_UP_LEFT        ,
      ARC_DOWN_LEFT      ,
      ARC_UP_RIGHT       ,
      ARC_DOWN_RIGHT     ,
      ARC_LINE_VERT      ,
      ARC_LINE_HOR       ,
      ARC_LINE_SLASH     ,
      ARC_LINE_BACKSLASH ,
      ARC_S_LIKE         ,
      ARC_Z_LIKE         ,
      ARC_SHORT
    }
  _ARC_TYPE ;

/* new links description structure */
  typedef  enum
    {
      LINK_UNKNOWN = 0,    // 0
      LINK_HCR_CCW    ,    // 1
      LINK_LCR_CCW    ,    // 2
      LINK_MCR_CCW    ,    // 3
      LINK_SCR_CCW    ,    // 4
      LINK_TCR_CCW    ,    // 5
      LINK_LINE       ,    // 6
      LINK_TCR_CW     ,    // 7
      LINK_SCR_CW     ,    // 8
      LINK_MCR_CW     ,    // 9
      LINK_LCR_CW     ,    // 10
      LINK_HCR_CW     ,    // 11
      LINK_HS_LIKE    ,    // 12
      LINK_S_LIKE     ,    // 13
      LINK_Z_LIKE     ,    // 14
      LINK_HZ_LIKE         // 15
    }
  _LINK_TYPE ;

 /*--------------- SPECIAL POINTS DESCRIPTOR ------------------------------*/

    typedef struct SPEC_TYPE
        {
          _UCHAR  mark    ;
          _UCHAR  code    ;
          _UCHAR  attr    ;
          _UCHAR  other   ;
          _SHORT  ibeg    ;
          _SHORT  iend    ;
          _SHORT  ipoint0 ;
          _SHORT  ipoint1 ;
          struct SPEC_TYPE near * next ;
          struct SPEC_TYPE near * prev ;
  }  SPECL, _PTR p_FSPECL; /* grafy.h definitions */

    typedef  SPECL near*  p_SPECL ;

 /*--------------- LIST OF CONSTANTS --------------------------------------*/

    typedef  struct  CON_TYPE          /* table for interpolaton constants */
     {
       _SHORT  horda ;                 /* chord of normalizaton            */
       _SHORT  dlt0 ;                  /*                                  */
       _SHORT  nsr ;                   /*                                  */
       _SHORT  j_step ;                /* beginning steps of crossings     */
       _SHORT  i_step ;                /*   search                         */
       _SHORT  eps_y  ;                /* environs of extremums marking out*/
       _SHORT  eps_x  ;                /* and preliminary marking out      */
                                       /* of shelves                       */
       _SHORT  eps_py ;                /* max.(vertical and horisontal)    */
       _SHORT  eps_px ;                /*  sizes of 'points                */
       _SHORT  eps_st ;                /* max stroke legnth                */
       _SHORT    a0 ;                  /*                                  */
       _SHORT    b0 ;                  /*                                  */
       _SHORT    lf0 ;                 /*                                  */
       _SHORT    lz0 ;                 /*                                  */
       _SHORT    a1 ;                  /*                                  */
       _SHORT    b1 ;                  /*                                  */
       _SHORT    lf1 ;                 /*                                  */
       _SHORT    lz1 ;                 /*                                  */
       _SHORT    a2 ;                  /*                                  */
       _SHORT    b2 ;                  /*                                  */
       _SHORT    lf2 ;                 /*                                  */
       _SHORT    lz2 ;                 /*                                  */
       _SHORT    a3 ;                  /*                                  */
       _SHORT    b3 ;                  /*                                  */
       _SHORT    lf3 ;                 /*                                  */
       _SHORT    lz3 ;                 /*                                  */
      }
        CONSTS ;

 /*--------------- HEIGHTS ------------------------------------------------*/
typedef struct {                   /*  If y<=y_US_, then height==_US_ */
                 _SHORT  y_US1_ ;
                 _SHORT  y_US2_ ;
                 _SHORT  y_UE1_ ;
                 _SHORT  y_UE2_ ;
                 _SHORT  y_UI1_ ;
                 _SHORT  y_UI2_ ;
                 _SHORT  y_MD_  ;
                 _SHORT  y_DI1_ ;
                 _SHORT  y_DI2_ ;
                 _SHORT  y_DE1_ ;
                 _SHORT  y_DE2_ ;
                 _SHORT  y_DS1_ ;
                 _SHORT  y_DS2_ ;
               }
                 HEIGHTS_DEF ;

 /*--------------- BUFFER'S STRUCTURE -------------------------------------*/

    typedef struct
               {
                 p_SHORT  ptr   ;               /* Pointer to buffer.      */
                 _SHORT   nSize ;               /* # of _SHORTs in buffer. */
               }
                BUF_DESCR,  _PTR  p_BUF_DESCR ;

 /*--------------- NUMBER OF BEGIN & END OF POINTS GROUP ------------------*/

    typedef struct
      {
        _SHORT   iBeg  ;
        _SHORT   iEnd  ;
        _RECT    GrBox ;
      }
        POINTS_GROUP, _PTR   p_POINTS_GROUP ;

 /*--------------- LOW LEVEL MAIN DATA STRUCTURE --------------------------*/

   #define          NUM_BUF            4            /* buffers quantity    */

    typedef struct
      {
        rc_type _PTR         rc                ;
        BUF_DESCR            buffers[NUM_BUF]  ;

        PS_point_type _PTR   p_trace           ;
        _SHORT               nLenXYBuf         ;
        p_SHORT              xBuf              ;
        p_SHORT              yBuf              ;

        p_SHORT              x                 ;
        p_SHORT              y                 ;
        _SHORT               ii                ;

        p_SPECL              specl             ;
        _SHORT               nMaxLenSpecl      ;
        _SHORT               len_specl         ;
        _SHORT               LastSpeclIndex    ;

        p_SHORT              pAbsnum           ;
        _SHORT               lenabs            ;
        _SHORT               rmAbsnum          ;
        p_POINTS_GROUP       pGroupsBorder     ;
        _SHORT               lenGrBord         ;
        _SHORT               rmGrBord          ;

        _SHORT               iBegBlankGroups   ;
  #if defined(FOR_GERMAN) || defined(FOR_FRENCH) || defined(FOR_INTERNATIONAL)
        p_UM_MARKS_CONTROL   pUmMarksControl   ;
  #endif
        p_C_SDS              p_cSDS            ; /* array of geometric features       */
        _SHORT               VertSticksNum     ;
        p_POINTS_GROUP       pVS_Collector     ;
        _SHORT               padding           ;
        _SHORT               slope             ;
        _SHORT               width_letter      ;
        _SHORT               StepSure          ;
        _RECT                box               ;
                                       /* the smallest and the biggest  y  */
                                     /* the smallest and the biggest    x  */
        HEIGHTS_DEF          hght              ;
        _SHORT               o_little          ;
        _SHORT               z_little          ;
      }
        low_type, _PTR  p_low_type             ;

    typedef   p_low_type  p_LowData ;


#if PG_DEBUG
 _VOID draw_SDS(p_low_type low_data);
#endif

_SHORT GetLinkBetweenThisAndNextXr(p_low_type low_data,p_SPECL pXr,
                                      xrd_el_type _PTR xrd_elem);
_SHORT RecountBegEndInSDS(p_low_type low_data);
/* bCalc determines, whether or not to calculate some features in this function */
_SHORT iMostFarDoubleSide( p_SHORT xArray, p_SHORT yArray, p_SDS pSDS,
                           p_SHORT pxd,    p_SHORT pyd,    _BOOL bCalc ) ;

/***************************************************************************/
/*                              FUNCTIONS                                  */
/***************************************************************************/

/*------------------------- module lk_begin  ------------------------------*/

 _SHORT  lk_begin(low_type _PTR low_data); /*beginning working out of elem.*/

 _SHORT  get_last_in_specl(low_type _PTR low_data);

 _SHORT  Sort_specl(p_SPECL specl,_SHORT l_specl);  /*sorting SPECL in time*/

 _SHORT  Clear_specl(p_SPECL specl,_SHORT len_specl);
 _SHORT extremum(_UCHAR code,_SHORT beg,_SHORT end,_SHORT _PTR y);
/*------------------------  module lk_cross  ------------------------------*/

 _SHORT  lk_cross(low_type _PTR low_data); /*sorting out of elem. crossings*/

/*------------------------  module lk_next   ------------------------------*/
    /* Parsing of different arcs on the ends: */
 _SHORT lk_duga( low_type _PTR low_data );

/*------------------------  module low_3    -------------------------------*/

 _SHORT  FindDArcs ( low_type _PTR pld ) ;              /* see fig. at the */
                                                        /* func. text      */

   /*  Checks, if some _IU(D)_s should be _UU(D)_ and vice versa: */
 _VOID  Adjust_I_U (  low_type _PTR low_data ) ;

 _BOOL  FindSideExtr( low_type _PTR low_data ) ;

 _BOOL  PostFindSideExtr( low_type _PTR low_data );

 _SHORT  RestoreColons( low_type _PTR low_data );
#if !defined (FOR_GERMAN)
_BOOL  RestoreApostroph(p_low_type low_data,p_SPECL pCurr); /*Eric*/
#endif
/*------------------------  module breaks   -------------------------------*/
 _SHORT xt_st_zz(low_type _PTR low_data); /* working out of tear-off parts */
 _BOOL find_CROSS(p_low_type low_data,_SHORT ibeg_X,_SHORT iend_X,
                  p_SPECL _PTR pCross);

/*------------------------  module FILTER   -------------------------------*/

 _SHORT   Filt( low_type _PTR  pLowData ,
                _SHORT         t_horda  ,  _SHORT  fl_absence ) ;

 _SHORT   PreFilt( _SHORT t_horda , low_type _PTR p_low_data ) ;
 _VOID    Errorprov(low_type _PTR low_data) ; /* check tablete co-ordinates*/

/*------------------------  module INIT_GRF -------------------------------*/

  _VOID    AcceptEps( _SHORT a,_SHORT b,_SHORT lf,_SHORT lz,p_SHORT eps ) ;

  _VOID    AcceptNbcut (_VOID) ;

  _VOID    glob_low_init( _VOID ) ;  /* initialisation of globals */

/*-----------------------   module CHECK, PICT, CROSS ---------------------*/

  _SHORT   InitSpecl( low_type _PTR low_data, _SHORT n ) ;

  _SHORT   InitSpeclElement( SPECL _PTR specl ) ;


  _SHORT   Mark( low_type _PTR  low_data ,
                _UCHAR mark , _UCHAR code, _UCHAR attr   , _UCHAR other  ,
                _SHORT begin, _SHORT end , _SHORT ipoint0, _SHORT ipoint1 ) ;

  _SHORT   MarkSpecl( low_type _PTR low_data , SPECL _PTR  p_tmpSpecl  ) ;

  _BOOL    NoteSpecl( low_type _PTR  pLowData  ,   SPECL _PTR  pTmpSpecl ,
                      SPECL    _PTR  pSpecl    ,  _SHORT _PTR  pLspecl   ,
                     _SHORT          limSpecl  ) ;

 #if PG_DEBUG

  _VOID  PaintSpeclElement( low_type _PTR  pLowData,  SPECL _PTR  pNewSpecl,
                            SPECL    _PTR  pSpecl  , _SHORT _PTR  pLspecl  );
 #endif

  p_SPECL  LastElemAnyKind ( p_SPECL pSpecl , _UCHAR kind_of_mark  ) ;

  p_SPECL  FirstElemAnyKind ( p_SPECL pSpecl , _UCHAR kind_of_mark ) ;

  _SHORT   Pict( low_type _PTR low_data ) ;

  _SHORT   Surgeon( low_type _PTR pLowData ) ;

  _SHORT   OperateSpeclArray( low_type _PTR  pLowData ) ;

  #define    NO_CONTACT                0x0000
  #define    END_RESTRICTION           0x0001
  #define    ANY_OCCUARANCE            0x0002
  #define    END_INSIDE                0x0004
  #define    IP0_INSIDE                0x0008
  #define    BEG_INSIDE                0x0010
  #define    TOTALY_INSIDE             0x0020
  #define    TOTALY_COVERED            0x0040
  #define    MOD_SKIP                  0x0080

  _SHORT   SpcElemFirstOccArr( low_type _PTR  pLowData, p_INT  pModeWord  ,
                              p_POINTS_GROUP  pTrajectoryCut, _UCHAR mark ) ;

  #define  NREDUCTION              5
  #define  NREDUCTION_FOR_BORDER   0

  _SHORT   Extr( low_type _PTR low_data, _SHORT eps_fy,
                _SHORT eps_fx , _SHORT eps_fxy , _SHORT eps_fyx ,
                _SHORT nMaxReduct , _SHORT extr_axis                     ) ;

  _SHORT   Cross( low_type _PTR low_data ) ;



  _SHORT   Clash( _SHORT _PTR x, _SHORT _PTR y, _SHORT i, _SHORT j,
                  _SHORT of,     _SHORT bf                          ) ;

/***************************************************************************/
/*                module LOW_UTIL                                          */
/***************************************************************************/

  #define    LEFT_OUTSIDE              1
  #define    RIGHT_OUTSIDE             2
  #define    LEFT_SHIFT                3
  #define    RIGHT_SHIFT               4
  #define    INSIDE                    5
  #define    COVERS                    6


  _VOID   SetXYToInitial ( low_type _PTR pLowData ) ;

  _SHORT  LowAlloc( _SHORT _PTR _PTR buffer,
                    _SHORT   num_buffers ,  _SHORT  len_buf ,
                    low_type _PTR pLowData  ) ;

  _SHORT  low_dealloc( _SHORT _PTR _PTR buffer ) ;

  _SHORT  alloc_rastr( _ULONG _PTR _PTR rastr ,
                       _SHORT num_rastrs,_SHORT len_rastr ) ;

  _SHORT  dealloc_rastr( _ULONG _PTR _PTR rastr ) ;

  _BOOL   AllocSpecl ( p_SPECL _PTR ppSpecl, _SHORT nElements ) ;

  _VOID   DeallocSpecl ( p_SPECL _PTR ppSpecl ) ;

  _BOOL   CreateSDS ( low_type _PTR  pLowData , _SHORT nSDS ) ;

  _VOID   DestroySDS( low_type _PTR  pLowData ) ;
  _SHORT  MaxPointsGrown(
                        #ifdef  FORMULA
                          _TRACE trace,
                        #endif  /*FORMULA*/
                            _SHORT nPoints     ) ;
                                               /*   Max # of points        */
                                               /* after "Errorprov" or oth-*/
                                               /* er functions in "x" and  */
                                               /* "y" arrays. nPoints -    */
                                               /* initial value.           */
  _INT  MaxesCount( p_SHORT xyArr, low_type _PTR pLowData ) ;
          /*  Counts (and returns) the total number of   */
                            /* x- or y-maxima in the whole trajectory.     */

  _BOOL  BorderForSpecSymbol ( low_type _PTR pLowData , rc_type _PTR rc );
                                 /*  If the trace looks like some special  */
                            /* symbol (fraction line,"-","=","+"), then    */
                            /* finds borders for it and returns _TRUE,     */
                            /* otherwise does nothing and returns _FALSE.  */

  _LONG  DistanceSquare ( _INT i1, _INT i2, p_SHORT xAr, p_SHORT yAr ) ;
                           /* The square of the distance between           */
                           /* points #i1 and #i2. */

#if  0
#define  PRESERVE_GLOB_EXTR    _TRUE  /*  For usage as parameter       */
                                      /* "bPreserveGlobExtr" in funct- */
                                      /* ion "SmoothXY".               */

  _BOOL    SmoothXY ( p_SHORT x,    p_SHORT y,
                     _INT iLeft,  _INT iRight,
                     _INT nTimes, _BOOL bPreserveGlobExtr );
#endif

  /*  This function computes the square of the distance of the */
  /* point (xPoint,yPoint) to the straight line going through  */
  /* (x1,y1) and (x2,y2).  See figure in the function code.    */
_LONG  QDistFromChord ( _INT x1, _INT y1,
                        _INT x2, _INT y2,
                        _INT xPoint, _INT yPoint );

#define  CURV_MAX    (1000L)
#define  CURV_NORMA  (100L)

_SHORT  CurvMeasure ( p_SHORT x, p_SHORT y,
                      _INT iBeg, _INT iEnd,
                      _INT iMostFar );

  /*   This function computes the distance whose "circle" */
  /* is the 8-angles figure:                              */
_INT  Distance8 ( _INT x1, _INT y1,
                  _INT x2, _INT y2 );

#if  PG_DEBUG
  _VOID  SetNewAttr ( p_SPECL pElem, _UCHAR hght, _UCHAR fb_dir );
                /*  Clears attrs and sets    */
                /* specified height and cir- */
                /* cle direction.            */
#else
  #define  SetNewAttr(el,h,fb)  (el)->attr = (((h)&_umd_) | ((fb)&_fb_))
#endif

#if  (PG_DEBUG || PG_DEBUG_WIN)
  p_SPECL  BadSPECLPtr (_VOID);
  #define  REF(elem)     ((elem)? (elem):BadSPECLPtr())
  #define  CHECK_PTR(p)  {if ((p)==_NULL) BadSPECLPtr();}
#else
  #define  REF(elem)     (elem)
  #define  CHECK_PTR(p)  {}
#endif  /*!(PG_DEBUG || PG_DEBUG_WIN)*/

#define  ANY_CROSSING(pElem)  (   REF(pElem)->mark==CROSS  \
                               || REF(pElem)->mark==HATCH  \
                               || REF(pElem)->mark==STICK )
#define  IU_OR_ID(pElem)      (REF(pElem)->code==_IU_ || REF(pElem)->code==_ID_)
/* #define  SET_XTST_BITS(pElem) {SetBit(pElem,X_XT); SetBit(pElem,X_ST);}*/
#define  NULL_OR_ZZ(pElem) (   (pElem)==_NULL           \
                            || REF(pElem)->code==_ZZZ_  \
                            || REF(pElem)->code==_ZZ_   \
                            || REF(pElem)->code==_Z_    \
                            || REF(pElem)->code==_FF_ )

#define  ANY_BREAK(pElem)  (   REF(pElem)->code==_ZZZ_  \
                            || REF(pElem)->code==_ZZ_   \
                            || REF(pElem)->code==_Z_    \
                            || REF(pElem)->code==_FF_ )
#define ANY_ARC_WITH_TAIL(pElem)  (   REF(pElem)->code==_UUR_  \
                                   || REF(pElem)->code==_UUL_  \
                                   || REF(pElem)->code==_UDR_  \
                                   || REF(pElem)->code==_UDL_)

#define ANY_GAMMA_SMALL(pElem)    (   REF(pElem)->code==_GUs_  \
                                   || REF(pElem)->code==_GDs_  \
                                   || REF(pElem)->code==_Gl_   \
                                   || REF(pElem)->code==_Gr_)

#define ANY_ANGLE(pElem)          (   REF(pElem)->code==_ANl \
                                   || REF(pElem)->code==_ANr    \
                                   || REF(pElem)->code==_AN_UR  \
                                   || REF(pElem)->code==_AN_UL  \
                                  )
#define  XT_OR_ST(pElem)           (   REF(pElem)->code==_XT_ \
                                    || REF(pElem)->code==_ST_)
#define ANY_MOVEMENT(pElem)       (   REF(pElem)->code==_TZ_  \
                                   || REF(pElem)->code==_TS_  \
                                   || REF(pElem)->code==_BL_  \
                                   || REF(pElem)->code==_BR_)
#if  LOW_INLINE
  #define  IsAnyCrossing(e)        ANY_CROSSING(e)
  #define  Is_IU_or_ID(e)          IU_OR_ID(e)
  #define  NULL_or_ZZ_this(el)     NULL_OR_ZZ(el)
  #define  NULL_or_ZZ_after(el)    NULL_or_ZZ_this(REF(el)->next)
  #define  NULL_or_ZZ_before(el)   NULL_or_ZZ_this(REF(el)->prev)
  #define  IsAnyBreak(el)          ANY_BREAK(el)
  #define  IsAnyArcWithTail(el)    ANY_ARC_WITH_TAIL(el)
  #define  IsAnyGsmall(el)         ANY_GAMMA_SMALL(el)
  #define  IsAnyAngle(el)          ANY_ANGLE(el)
  #define  IsXTorST(el)            XT_OR_ST(el)
  #define  IsAnyMovement(el)       ANY_MOVEMENT(el)
#else
  _BOOL  IsAnyCrossing ( p_SPECL pElem ); /*  Checks if the "Elem" has the */
            /* HATCH,CROSS or STICK mark.    */
  _BOOL  IsAnyBreak( p_SPECL pElem );     /*  Checks if the "Elem" is BREAK*/
  _BOOL  Is_IU_or_ID ( p_SPECL pElem );
/*  _VOID  SetXTSTBits ( p_SPECL pElem );*/   /*  Sets both XT and ST bits     */
            /* (frequently used operation).  */
  _BOOL  NULL_or_ZZ_this ( p_SPECL pElem );
  _BOOL  NULL_or_ZZ_after ( p_SPECL pElem );
  _BOOL  NULL_or_ZZ_before( p_SPECL pElem );
  _BOOL  IsAnyArcWithTail(p_SPECL pElem);
  _BOOL  IsAnyGsmall(p_SPECL pElem);
  _BOOL  IsAnyAngle(p_SPECL pElem);
  _BOOL  IsXTorST(p_SPECL pElem);
  _BOOL  IsAnyMovement(p_SPECL pElem);
#endif /*LOW_INLINE*/

p_SPECL  SkipAnglesAfter ( p_SPECL pElem );
p_SPECL  SkipAnglesBefore ( p_SPECL pElem );

p_SPECL  FindStrongElemAfter ( p_SPECL pElem );
p_SPECL  FindStrongElemBefore ( p_SPECL pElem );
_BOOL  IsUpperElem ( p_SPECL pElem );
_BOOL  IsLowerElem ( p_SPECL pElem );

_BOOL  IsStrongElem  ( p_SPECL pElem     );
_BOOL  X_IsBreak     ( p_xrd_el_type pXr );
_BOOL  X_IsStrongElem( p_xrd_el_type pXr );

_INT  iRefPoint( p_SPECL pElem, p_SHORT y );
_UCHAR  HeightInLine ( _SHORT y,                 /*  Calculating height in */
           low_type _PTR pLowData ); /* the line of the point  */
             /* with abs.coord "y".    */
_UCHAR  MidPointHeight ( p_SPECL pElem, low_type _PTR pLowData );
          /*  The height of the middle point */
          /* of the "pElem"                  */
_INT    iMidPointPlato ( _INT iFirst, _INT iToStop, p_SHORT val, p_SHORT y );


_BOOL   GetBoxFromTrace ( _TRACE  trace,
                          _INT iLeft, _INT iRight,
                          p_RECT pRect );
_VOID  GetTraceBox ( p_SHORT xArray, p_SHORT yArray,
                     _INT iLeft, _INT iRight,
                     p_RECT pRect );

_BOOL GetTraceBoxInsideYZone ( p_SHORT x,      p_SHORT y,
                               _INT ibeg,      _INT iend,
                               _SHORT yUpZone, _SHORT yDnZone,
                               p_RECT pRect,
                               p_SHORT ixmax,p_SHORT ixmin,p_SHORT iymax,p_SHORT iymin);
#define  size_cross(jb,je,x,y,pr)  GetTraceBox((x),(y),(jb),(je),(pr))

  /* Values of (*ptRetCod) after "ClosedSquare" worked: */

#define  RETC_OK                      ((_SHORT)0)
#define  RETC_NO_PTS_IN_TRAJECTORY    ((_SHORT)1)
#define  RETC_BREAK_WHERE_SHOULDNT    ((_SHORT)2)

_LONG  ClosedSquare( p_SHORT xTrace, p_SHORT yTrace,
                     _INT iBeg, _INT iEnd, p_SHORT ptRetCod );
_LONG  TriangleSquare( p_SHORT x, p_SHORT y,
                       _INT i1, _INT i2, _INT i3 );
_SHORT  CurvFromSquare( p_SHORT x, p_SHORT y,
                        _INT iBeg, _INT iEnd );
_LONG  LengthOfTraj( p_SHORT xTrace, p_SHORT yTrace,
                     _INT iBeg, _INT iEnd, p_LONG pChord ,p_SHORT ptRetCod );
          /* Calc. angle cos         */
_LONG  cos_pointvect ( _INT xbeg1, _INT ybeg1,
                       _INT xend1, _INT yend1,
                       _INT xbeg2, _INT ybeg2,
                       _INT xend2, _INT yend2 );
_LONG  cos_vect( _INT beg1, _INT end1,  /* beg and end first           */
                 _INT beg2, _INT end2,  /* and second vector's         */
                 _SHORT _PTR x, _SHORT _PTR y);
_LONG  cos_horizline ( _INT beg1, _INT end1,
                       _SHORT _PTR x, _SHORT _PTR y);
_LONG  cos_normalslope ( _INT beg1, _INT end1,
                         _INT slope, _SHORT _PTR x, _SHORT _PTR y );

_UCHAR GetBit (p_SPECL elem,_SHORT bitnum);
_BOOL SetBit (p_SPECL elem, _SHORT bitnum);
_BOOL ClrBit (p_SPECL elem, _SHORT bitnum);

_INT  ixMin ( _INT iStart, _INT iEnd, p_SHORT xArray, p_SHORT yArray );
_INT  ixMax ( _INT iStart, _INT iEnd, p_SHORT xArray, p_SHORT yArray );
_INT  iXYweighted_max_right ( p_SHORT xArray, p_SHORT yArray,
                              _INT iStart, _INT nDepth,
                              _INT xCoef, _INT yCoef );
_INT  iXmax_right ( p_SHORT xArray, p_SHORT yArray,
                    _INT iStart, _INT nDepth );
_INT  iXmin_right ( p_SHORT xArray, p_SHORT yArray,
                    _INT iStart, _INT nDepth );
_INT  iXmax_left ( p_SHORT xArray, p_SHORT yArray,
                   _INT iStart, _INT nDepth );
_INT  iXmin_left ( p_SHORT xArray, p_SHORT yArray,
                   _INT iStart, _INT nDepth );
#define  iYup_right(y,iStart,nDepth)   (iXmin_right((y),(y),(iStart),(nDepth)))
#define  iYdown_right(y,iStart,nDepth) (iXmax_right((y),(y),(iStart),(nDepth)))
#define  iYup_left(y,iStart,nDepth)    (iXmin_left((y),(y),(iStart),(nDepth)))
#define  iYdown_left(y,iStart,nDepth)  (iXmax_left((y),(y),(iStart),(nDepth)))
_BOOL  xMinMax ( _INT ibeg, _INT iend,
                 p_SHORT x, p_SHORT y,
                 p_SHORT pxMin, p_SHORT pxMax );
_BOOL  yMinMax ( _INT ibeg, _INT iend,
                 p_SHORT y,
                 p_SHORT pyMin, p_SHORT pyMax );
_INT   iyMin ( _INT iStart, _INT iEnd, p_SHORT yArray );

_INT   iyMax ( _INT iStart, _INT iEnd, p_SHORT yArray );
_INT   iYup_range ( p_SHORT yArray, _INT iStart, _INT iEnd );
_INT   iYdown_range ( p_SHORT yArray, _INT iStart, _INT iEnd );

_INT   iClosestToXY ( _INT iBeg, _INT iEnd,
                      p_SHORT xAr, p_SHORT yAr,
                      _SHORT xRef, _SHORT yRef );
_INT   iClosestToY( p_SHORT yAr, _INT iBeg, _INT iEnd, _SHORT yVal );

_BOOL  FindCrossPoint ( _SHORT x1, _SHORT y1, _SHORT x2, _SHORT y2,
                        _SHORT x3, _SHORT y3, _SHORT x4, _SHORT y4,
                        p_SHORT pxAnswer, p_SHORT pyAnswer );
_BOOL  is_cross ( _SHORT x1, _SHORT y1, _SHORT x2, _SHORT y2,
                  _SHORT x3, _SHORT y3, _SHORT x4, _SHORT y4 );
_INT   iMostFarFromChord ( p_SHORT xArray, p_SHORT yArray,
                           _INT iLeft, _INT iRight );

   /*  Constants - return values of the "SideExtr"  */
   /* function:                                     */
   /* "NO_SIDE_EXTR" Must be ZERO                   */

#define  NO_SIDE_EXTR              0
#define  SIDE_EXTR_LIKE_1ST        1
#define  SIDE_EXTR_LIKE_2ND        2
#define  SIDE_EXTR_LIKE_1ST_WEAK   3
#define  SIDE_EXTR_LIKE_2ND_WEAK   4

#if  defined(FOR_GERMAN) || defined(FOR_FRENCH)
  #define  SIDE_EXTR_TRACE_FOR_er  5
#endif /*FOR_GERMAN*/

   /*  Constant for usage as "bStrict" argument of "SideExtr": */

#define  STRICT_ANGLE_STRUCTURE    _TRUE
_INT    SideExtr( p_SHORT x, p_SHORT y,
                  _INT iBeg, _INT iEnd,
                  _INT nSlope,
                  p_SHORT xBuf, p_SHORT yBuf,
                  p_SHORT ind_back,
                  p_INT piSideExtr,
                  _BOOL bStrict );

_INT  iMostCurvedPoint( p_SHORT x, p_SHORT y,
                        _INT iBeg, _INT iEnd, _INT nCurvAll );

   /*  "CurrIndex" finds the current index of the point */
   /* with the "ind_old" source index (i.e. on the un-  */
   /* modified trajectory).  Or UNDEF, if this wasn't   */
   /* found.                                            */
_SHORT  CurrIndex ( p_SHORT indBack, _INT ind_old, _INT nIndexes );
_SHORT  SlopeShiftDx ( _SHORT dy, _INT slope );

#define   STRICT_OVERLAP  _TRUE
_BOOL    xHardOverlapRect ( p_RECT pr1, p_RECT pr2, _BOOL bStrict );
_BOOL    yHardOverlapRect ( p_RECT pr1, p_RECT pr2, _BOOL bStrict );
_BOOL    HardOverlapRect ( p_RECT pr1, p_RECT pr2, _BOOL bStrict );

#define   STRICT_IN  _TRUE
_BOOL    SoftInRect ( p_RECT pr1, p_RECT pr2, _BOOL bStrict );

_BOOL  IsRightGulfLikeIn3 ( p_SHORT x, p_SHORT y,
                            _INT iBeg, _INT iEnd,
                            p_INT piGulf );
_INT  brk_right ( p_SHORT yArray,
                  _INT iStart, _INT iEnd );


_INT  brk_left ( p_SHORT yArray,
                 _INT iStart, _INT iEnd );
_INT  nobrk_right ( p_SHORT yArray,
                    _INT iStart, _INT iEnd );
_INT  nobrk_left ( p_SHORT yArray,
                   _INT iStart, _INT iEnd );
  #define    _FIRST         0
  #define    _MEAD          1
  #define    _LAST          2

     _SHORT  NewIndex ( p_SHORT indBack ,  p_SHORT  newY     ,             
                        _SHORT  ind_old ,  _SHORT   nIndexes , _SHORT fl ) ;


    _SHORT   R_ClosestToLine( p_SHORT  xAr,   p_SHORT  yAr,  PS_point_type _PTR  pRef,
                              p_POINTS_GROUP  pLine ,  p_SHORT  p_iClosest ) ;
     _VOID   DefLineThresholds ( p_low_type pLowData ) ;
     _LONG   SquareDistance ( _SHORT  xBeg ,  _SHORT  yBeg,
                              _SHORT  xEnd ,  _SHORT  yEnd  );

   #define   INIT     1
   #define   NOINIT   0

     _SHORT  InitGroupsBorder( low_type _PTR pLowData , _SHORT fl_BoxInit ) ;

     _INT    GetGroupNumber( low_type _PTR  pLowData , _INT  iPoint  )  ;

     _BOOL   HeightMeasure(  _INT iBeg, _INT iEnd, low_type _PTR pLowData ,
                            p_UCHAR  pUpperHeight, p_UCHAR   pLowerHeight ) ;

     _SHORT  IsPointCont( low_type _PTR  pLowData, _INT iPoint, _UCHAR mark );


    /*  Return values of the function "DefineWritingStep": */

    //with bUseMediana == _TRUE
#define  STEP_INDEPENDENT  0
#define  STEP_MEDIANA      1
#define  STEP_COMBINED     2
    //with bUseMediana == _FALSE
#define  STEP_SURE         STEP_INDEPENDENT
#define  STEP_REJECT       STEP_MEDIANA
#define  STEP_UNSURE       STEP_COMBINED
_SHORT  DefineWritingStep( low_type _PTR low_data,
                           p_SHORT pxWrtStep,
                           _BOOL bUseMediana );

  _BOOL  IsInnerAngle ( p_SHORT xArray, p_SHORT yArray,
                       SPECL _PTR pFrst, SPECL _PTR pLast,
                       SPECL _PTR pAngle );
  _INT   CalcDistBetwXr(p_SHORT xTrace,p_SHORT yTrace,
                        _INT ibeg1,_INT iend1,_INT ibeg2,_INT iend2,
                        p_SHORT Retcod);

  _BOOL  CurveHasSelfCrossing( p_SHORT x, p_SHORT y,
                               _INT iBeg, _INT iEnd,
                               p_INT pInd1, p_INT pInd2,
                               _LONG lMinAbsSquare );

#define POINT_ON_BORDER 0
#define POINT_INSIDE    1
#define POINT_OUTSIDE   2
/* in case of moving those two prototypes below, move defines above with them */
_SHORT IsPointInsideArea(p_SHORT pxBorder,p_SHORT pyBorder,_INT NumPntsInBorder,
                         _SHORT xPoint,_SHORT yPoint,p_SHORT position);
_BOOL IsPointOnBorder(p_SHORT pxBorder,p_SHORT pyBorder,_INT Pnt1st,_INT Pnt2nd,
                      _SHORT xPoint,_SHORT yPoint,p_BOOL pbIsCross);

_BOOL GetTraceBoxWithoutXT_ST(p_low_type low_data,_INT ibeg,_INT iend,p_RECT pRect);
_BOOL IsPointBelongsToXT_ST(_INT iPoint,p_SPECL specl);
/***************************************************************************/
/*               module TRANSFRM                                           */
/***************************************************************************/
  _SHORT transfrmN(low_type _PTR low_data);            /*                      */
/***************************************************************************/
/*               module OVER                                               */
/***************************************************************************/
    _SHORT measure_slope(low_type _PTR low_data);   /*  calculation of     */
                                                    /*   slope             */
                                              /*                      */
    _SHORT def_over(low_type _PTR low_data);        /* setting OVR          */
                /*                      */
/***************************************************************************/
/*               module ANGLE                                              */
/***************************************************************************/
    _SHORT angl(low_type _PTR low_data);            /* search for angles    */
                /*                      */
                /*                      */
    _SHORT angle_direction(_SHORT x0,     /* calculate any angle direction  */
                           _SHORT y0,           /* vector of angle direction*/
                           _SHORT slope);           /*        script slope  */
                /*                      */
/***************************************************************************/
/*                module LU_SPECL                                          */
/***************************************************************************/

p_SPECL  NewSPECLElem( low_type _PTR low_data );
_VOID  DelFromSPECLList ( p_SPECL pElem );
_VOID  DelThisAndNextFromSPECLList ( p_SPECL pElem );
_VOID  DelCrossingFromSPECLList ( p_SPECL pElem );
_VOID  SwapThisAndNext ( p_SPECL pElem );
_VOID  Insert2ndAfter1st ( p_SPECL p1st, p_SPECL p2nd );
_VOID  InsertCrossing2ndAfter1st ( p_SPECL p1st, p_SPECL p2nd );
_VOID  Move2ndAfter1st ( p_SPECL p1st, p_SPECL p2nd );
_VOID  MoveCrossing2ndAfter1st ( p_SPECL p1st, p_SPECL p2nd );

#define  ATTACH_2nd_TO_1st(p1,p2)  {if (p1) {(p1)->next=(p2); } if(p2)(p2)->prev=(p1);}
#define  CROSS_IN_TIME(p1,p2)      ( p1 && p2 &&  (p1)->iend >= (p2)->ibeg     \
            && (p2)->iend >= (p1)->ibeg )
#define  FIRST_IN_SECOND(p1,p2)    ( p1 && p2 && (p1)->ibeg >= (p2)->ibeg     \
            && (p1)->iend <= (p2)->iend )

#if  LOW_INLINE
  #define  Attach2ndTo1st(p1,p2)      ATTACH_2nd_TO_1st(p1,p2)
  #define  CrossInTime(p1,p2)         CROSS_IN_TIME(p1,p2)
  #define  FirstBelongsTo2nd(p1,p2)   FIRST_IN_SECOND(p1,p2)
#else
  _VOID  Attach2ndTo1st ( p_SPECL p1st, p_SPECL p2nd );
  _BOOL  CrossInTime ( p_SPECL p1st, p_SPECL p2nd );  /* TRUE if some part */
              /* of trajectory belongs to    */
              /* both elems.                 */
  _BOOL  FirstBelongsTo2nd ( p_SPECL p1st, p_SPECL p2nd ); /* TRUE if all  */
              /* trajectory of the 1st elem  */
              /* is part of that of the 2nd  */
              /* one                         */
#endif  /*LOW_INLINE*/

_VOID  RefreshElem ( p_SPECL pElem,
                     _UCHAR mark, _UCHAR code, _UCHAR attr
#if  !NEW_VERSION
                     , _SHORT bitToSet
#endif  /*NEW_VERSION*/
                   );    /*  Set the fields of "pElem".   */

p_SPECL  FindMarkRight ( p_SPECL pElem, _UCHAR mark ); /* Goes "next"     */
           /* until "mark" is found or end  */
           /* of specl. If pElem->mark==mark*/
           /* returns pElem.                */
p_SPECL  FindMarkLeft ( p_SPECL pElem, _UCHAR mark ); /* Same, but "prev" */

/***************************************************************************/
/*                module CONVERT                                           */
/***************************************************************************/
_SHORT exchange( low_type _PTR low_data,
                 xrdata_type _PTR xrd);

_SHORT form_pseudo_xr_data(low_type _PTR low_data, xrdata_type _PTR xrdata);

/***************************************************************************/
/*                module CIRCLE                                            */
/***************************************************************************/
_SHORT  Circle(low_type _PTR low_data);       /*                           */
                /*                            */


/***************************************************************************/
/*                module frm_word                                          */
/***************************************************************************/

_BOOL  MayBeFrline ( p_SHORT xArray, p_SHORT yArray,
                     _INT iBeg, _INT iEnd,
                     _SHORT xRange );

/*  Possible return values of "chk_sign" function: */

#define  SGN_NOT_SIGN   0  /* CHE:  This MUST be zero !!! */
#define  SGN_SOME       1  /* Some of the possible signs listed */
                           /* below in "#define"'s              */
#define  SGN_PLUS       2
#define  SGN_EQUAL      3

_SHORT  chk_sign ( p_SHORT xArray, p_SHORT yArray,
                   _INT iBeg, _INT iEnd,
                   _SHORT xRange, _SHORT yRange );

/* Definition for "chk_slash" function: */
#define  WHOLE_TRAJECTORY   _TRUE
_BOOL  chk_slash  (p_SHORT xArray,  p_SHORT yArray,
                  _INT iLeft,  _INT iRight,
                  _SHORT yRange, _BOOL bWholeTrj );
_VOID  FindStraightPart  ( p_SHORT xArray, p_SHORT yArray,
                           p_INT piBeg, p_INT piEnd);

_BOOL  delta_interval ( p_SHORT xArray, p_SHORT yArray,
                        _INT iLeft, _INT iRight,
                        _INT nMaxRectRatio,
                        _INT nSlope,
                        p_LONG pldxSum, p_LONG pldySum,
                        p_LONG plNumIntervals,
                        _BOOL bThrowBigAndSmall );
#if  USE_FRM_WORD

  /* Constants for usage as "bIncrementalBreak" parameter values: */
#define  INCREMENTAL_BREAK      _TRUE
#define  NOT_INCREMENTAL_BREAK  (!INCREMENTAL_BREAK)
_SHORT  FrmWordBreak ( _TRACE trace, _INT  nPoints,
           _BOOL bIncrementalBreak,
           p_SHORT pn1stWrdPoints,
           p_SHORT pnFrLinePoints );
_VOID   ResetFrmWordBreak(_VOID);   /*  Should be called before the passing */
            /* the first stroke of the new formula. */
/***************************************************************************/
/*                module LOW_UTIL                                          */
/***************************************************************************/
_INT  brk_left_trace ( PS_point_type _PTR trace,
       _INT iStart, _INT iEnd );
_INT  nobrk_left_trace ( PS_point_type _PTR trace,
         _INT iStart, _INT iEnd );
_INT  brk_right_trace ( PS_point_type _PTR trace,
        _INT iStart, _INT iEnd );
_INT  nobrk_right_trace ( PS_point_type _PTR trace,
          _INT iStart, _INT iEnd );
_SHORT  Xmean_range ( p_SHORT xArray, p_SHORT yArray,
          _INT iStart, _INT iEnd );
_SHORT  Ymean_range ( p_SHORT yArray, _INT iStart, _INT iEnd );
_SHORT  Yup_range ( p_SHORT yArray, _INT iStart, _INT iEnd );
_SHORT  Ydown_range ( p_SHORT yArray, _INT iStart, _INT iEnd );
_VOID   xy_to_trace ( p_SHORT xArray, p_SHORT yArray,
          _INT nPoints, _TRACE trace );
#endif /*USE_FRM_WORD*/

_VOID   trace_to_xy ( p_SHORT xArray, p_SHORT yArray,
          _INT nPoints, _TRACE trace );

/***************************************************************************/
/*                module SPECWIN                                           */
/***************************************************************************/
 _SHORT low_level(PS_point_type _PTR trace,   /* completeness of low level  */
    xrdata_type _PTR xrdata,                  /*                            */
    rc_type _PTR rc );

_INT BaselineAndScale(low_type _PTR pLowData);

_BOOL PrepareLowData(low_type _PTR pLowData,
                     PS_point_type _PTR trace,
                     rc_type _PTR rc,
                     p_SHORT _PTR pbuffer);

_VOID FillLowDataTrace(low_type _PTR pLowData,
                       PS_point_type _PTR trace);

_VOID GetLowDataRect (low_type _PTR pLowData);

_INT AnalyzeLowData(low_type _PTR pLowData,
                    PS_point_type _PTR trace);

/***************************************************************************/
#endif                                        /*        LOW_LEVEL_INCLUDED  */
/***************************************************************************/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\pegrec_p.h ===
/* ************************************************************************** */
/* *   Printfunctions of Pegasus recognizer header                          * */
/* ************************************************************************** */
#ifndef PR_PEGREC_P_H_INCLUDED
#define PR_PEGREC_P_H_INCLUDED

/* ------------------------- Defines ---------------------------------------- */

#ifdef PEGREC_DEBUG

#define PRP_01                                                                  \
                                                                                \
  static prp_num_words_in_rec = 0;                                              \
  void PegDebugPrintf(char * format, ...);

#define PRP_02                                                                  \
                                                                                \
  PegDebugPrintf("Got Stroke! %d points\n", npoints);                           \
  if (npoints == 0) PegDebugPrintf("========================\n", npoints);      \

#define PRP_03                                                                  \
                                                                                \
PegDebugPrintf("Good tentative word! %d points, numbrer %d\n", len, pri->wswi.nword);

#define PRP_04                                                                  \
                                                                                \
PegDebugPrintf("Validated tentative word! %d points, numbrer %d\n", len, pri->wswi.nword);

#define PRP_05                                                                  \
                                                                                \
PegDebugPrintf("Continue Recognition! %d points, word number %d\n", len, pri->wswi.nword);

#define PRP_06                                                                  \
                                                                                \
PegDebugPrintf("Can't Continue Recognition! %d points, word number %d\n", len, pri->wswi.nword);

#define PRP_07                                                                  \
                                                                                \
if (pri->rc.p_xd_data == 0) prp_num_words_in_rec ++;                            \
PegDebugPrintf("Start Recognition! %d points, word number %d, Global word num: %d\n", len, pri->wswi.nword, prp_num_words_in_rec);

#define PRP_08                                                                  \
                                                                                \
PegDebugPrintf("End Recognition! %d return code.\n", er);

#else // ------------------------------------------

#define PRP_01
#define PRP_02
#define PRP_03
#define PRP_04
#define PRP_05
#define PRP_06
#define PRP_07
#define PRP_08

#endif

/* ------------------------- Structures ------------------------------------- */


/* ------------------------- Prototypes ------------------------------------- */



#endif /* PR_PEGREC_H_INCLUDED */
/* ************************************************************************** */
/* *   Head functions of Pegasus recognizer header end                      * */
/* ************************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\polyco.h ===
/* **************************************************************************** */
/* * Get coeffs given xrdata indexes functions header ************************* */
/* **************************************************************************** */

#ifndef POLYCO_HEADER_INCLUDED
#define POLYCO_HEADER_INCLUDED

#include "bitmapco.h"

#define PC_NUM_COEFF      32
#define PC_N_INT_COEFFS   10


_INT GetPolyCo(_INT st, _INT len, p_xrdata_type xrdata, _TRACE trace, p_UCHAR coeff);

#endif /* POLYCO_HEADER_INCLUDED */
/* **************************************************************************** */
/* *  End of All  ************************************************************* */
/* **************************************************************************** */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\peg_util.h ===
/* *************************************************************** */
/* *             Main routine support programs header            * */
/* *************************************************************** */
#ifndef MAIN_UTIL_INCLUDED
#define MAIN_UTIL_INCLUDED

#include "ams_mg.h"
#include "ws.h"
#include "pegrec.h"
#include "vocutilp.h"
#include "dti.h"
#include "triads.h"
#include "precutil.h"


/* ===================== Defines ============================================= */

#define RM_COMBINE_CARRY  0x0001 /* Combine parts of carry-word */
#define PR_TENTATIVELIST_SIZE   10

/* ===================== Structures ========================================== */

typedef struct {
                _SHORT start;
                _SHORT len;
               } stroke_descr_type, _PTR p_stroke_descr_type;

typedef struct {
       p_PS_point_type ink;
                _INT   num_points;
                _INT   alloc_size;
                _INT   num_strokes;
                stroke_descr_type strokes[WS_MAX_STROKES];
               } ink_info_type, _PTR p_ink_info_type;


typedef struct
 {
  _INT             nword;
  _INT             nparts;
  _INT             len;
 } tentative_list_type, * p_tentative_list_type;

typedef struct
 {
  _INT             ok;
  _INT             flags;
  _INT             sp_vs_q;

  rc_type          rc;
  xrdata_type      xrdata;
  RWG_type         rwg;

  _INT             g_stroke_num;

 word_strokes_type w_str[WS_MAX_WORDS];
  ws_results_type  wsr;
 ws_word_info_type wswi;
 ink_info_type     ink_info;
 ws_control_type   wsc;
 CGR_baseline_type baseline;
tentative_list_type tentative_list[PR_TENTATIVELIST_SIZE];
  _INT             num_tentative_words;

tentative_list_type unfinished_data;   // Storage of infinished recognition attr

  _INT             rr_alloc_size;       // Allocated Results buffer
  _INT             rr_filled_size;      // Butes used there
  _INT             rr_num_answers;      // Num of all registered answers
  _INT             rr_num_finished_answers;  // Num of non-tentative answers
  _INT             rr_nparts;           // Number of parts in last recognized and registered answer
  p_UCHAR          recres;

  _INT				main_dict_enabled;
  _INT				new_line_created;

  p_VOID		   user_dict;

  info_func_type   InfoCallBack;
  p_VOID           ICB_param;

  p_dti_descr_type p_dtih;
  tr_descr_type    p_trh;

  #ifdef PEG_RECINT_UNICODE
  UCHR             uans_buf[w_lim];
  #endif

  _INT				nPos;

  void				*pxrc;

  int				cGap;
  int				axGapPos[WS_MAX_WORDS];
  _INT				aGapSpcNetOut[WS_MAX_WORDS];
 } rec_inst_type, _PTR p_rec_inst_type;

/* ===================== Prototypes ========================================== */

_INT   CreateInkInfo(p_PS_point_type ink, _INT npoints, p_ink_info_type ink_info);
_INT   FreeInkInfo(p_ink_info_type ink_info);
_INT   GetInkStrokeLen(_INT n, p_ink_info_type ink_info);
p_PS_point_type GetInkStrokePtr(_INT n, p_ink_info_type ink_info);
_INT   GetInkStrokeCopy(_INT n, p_PS_point_type place_for_stroke, p_ink_info_type ink_info);
_INT   GetNextWordInkCopy(_INT flags, _INT st, p_ws_results_type pwsr, p_PS_point_type place_for_ink, p_ink_info_type ink_info, p_ws_word_info_type wswi, _SHORT *pn_str);

#endif
/* *************************************************************** */
/* *          End of all                                         * */
/* *************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\pws.h ===
/* *************************************************************** */
/* *  Word segmentation algorithm dafinitions & prototypes       * */
/* *************************************************************** */
/* -------------------------------------------------------------- */
/* ---- Private - Word segmentation definitions ------------------------- */
/* -------------------------------------------------------------- */
#ifndef PWS_H_INCLUDED
#define PWS_H_INCLUDED


#include "ws.h"

#define CUT_LINE_POS          3            /* Position of decision line on hist */
#define FL_DIV                8            /* Constant of points filter dist (relative to w.step   */

#define PIK_UP                3            /* Constant of hist pik sensing */
#define PIK_DN                3            /* Constant of hist pik sensing */

#define MIN_LINE_EXTR         3            /* Min number of extr for decision about w.step */

#define MIN_FL                2            /* Min len of filtering distance */
#define MAX_FL               100           /* Max len of filtering distance */
#define V_LIMIT              128           /* Max value of hist (not to overflow uchar) */

#define PIK_STEP_CONST       16            /* Relation between line_h_size and pik step */
#define DEF_SEP_LET_LEVEL    30            /* Average sepletovost' v procentax */

#define HORZ_REDUCT          16            /* Compression  ratio of HORZ array */
#define HIST_REDUCT           4            /* Compression  ratio of HIST arrays */

#define MIN_H_BORD           20            /* Min H of line                  */

//#define DEF_WORD_DIST   (TABLET_DPI/5)   /* Default word distance */
//#define DEF_H_STROKE    (TABLET_DPI/5)   /* Default height of line letters */
//#define MIN_H_STROKE    (DEF_H_STROKE/6) /* Min height of valuable stroke */
//#define PIK_STEP        (DEF_H_STROKE/6) /* Min distance between steps */

#define MAX_LINES        WS_MAX_LINES+1    /* Defaults for memory allocation */
#define MAX_WORDS        WS_MAX_WORDS+1    /* Defaults for memory allocation */
#define MAX_STROKES      WS_MAX_STROKES+1  /* Defaults for memory allocation */
#define TABLET_XS        (WS_TABLET_XS+32) /* Defaults for memory allocation */

#define HORZ_SIZE        (TABLET_XS/HORZ_REDUCT) /* Defaults for memory allocation */
#define HIST_SIZE        (TABLET_XS/HIST_REDUCT) /* Defaults for memory allocation */

#define WS_NEWLINE            1             /* Cur stroke started new line */
#define WS_ALLSENT            2             /* Cur stroke was last stroke at all */

#define HIST_FIELD           0x3F           /* Part of hist byte for value */
#define FL_BODY              0x80           /* Bit flag of body of stroke */

#define ST_FL_JUNK           0x80           /* Stroke flag showing no-pik stroke */
#define ST_FL_NL_GESTURE     0x10           /* Line has leading word split gesture */

#define LN_FL_NL_GESTURE     0x01           /* Line has leading word split gesture */

#define WS_GP_LPUNCT         0x0001         /* Gap flag -- was postprocessed for leading punct */
#define WS_GP_EPUNCT         0x0002         /* Gap flag -- was postprocessed for ending punct */
#define WS_GP_LCAP           0x0004         /* Gap flag -- was postprocessed for capital letter */
//#define WS_GP_UNSURE         0x0008         /* Gap flag -- segm code was unsure about segmenting on this gap */

#define WS_SPNUMEXTRENOUGH      8           /* Line size and pos will be stable after this nuber of extr */

/* -------------------------------------------------------------- */
/* ------------------ Internal structures ----------------------- */
/* -------------------------------------------------------------- */


typedef struct {
                _SHORT st;
                _SHORT end;
                _SHORT top;
                _SHORT a_end;
               } ws_xstrokes_type;

typedef struct {
                _UCHAR st_gap;
                _UCHAR en_gap;
               } ws_xwords_type;

typedef struct {
                _SHORT loc;
                _SHORT lst;
                _SHORT bst;
                _SHORT size;
                _SHORT psize;
                _SHORT blank;
                _SHORT low;
                _UCHAR flags;
                _SCHAR k_sure;
               } ws_gaps_type, _PTR p_ws_gaps_type;

typedef ws_gaps_type    (_PTR ws_gaps_a_type)[XRINP_SIZE];
typedef unsigned char   (_PTR s_hist_a_type)[HIST_SIZE];

typedef struct {
                _SHORT h_bord_history;
                _SHORT inword_dist_history;
                _SHORT inline_dist_history;
                _SHORT slope_history;
                _UCHAR sep_let_history;
               } ws_lrn_type, _PTR p_ws_lrn_type;

typedef struct {
                PS_point_type _PTR stroke;

                _INT   in_x_delay;
                _INT   in_word_dist;
                _INT   in_line_dist;
                _INT   in_flags;
                _INT   sure_level;

                _INT   def_h_bord;
                _INT   def_sep_let_level;

                _INT   stroke_flags;
                _INT   stroke_num_points;
                _INT   stroke_min_x;
                _INT   stroke_max_x;
                _INT   stroke_min_y;
                _INT   stroke_max_y;
                _INT   stroke_dx;
                _INT   stroke_dy;
                _INT   stroke_wx_pos;
                _INT   stroke_wy_pos;
                _INT   stroke_filt_len;
                _INT   stroke_active_st;
                _INT   stroke_active_end;

                _INT   prev_stroke_dx;
                _INT   prev_stroke_dy;

                _INT   line_flags;
                _INT   line_word_dist;
                _INT   line_inword_dist;
                _INT   line_inline_dist;
                _INT   line_h_bord;
                _INT   line_st_stroke;
                _INT   line_st_word;
                _INT   line_start;
                _INT   line_end;
                _INT   line_active_start;
                _INT   line_active_end;
                _INT   line_extr;
                _INT   line_cur_stroke;
                _INT   line_word_len;
                _INT   line_sw_sp;
                _INT   line_bw_sp;
                _INT   line_sep_let_level;
                _INT   line_last_ws_try;
                _INT   line_pik_step;
                _INT   line_ngaps;
                _INT   line_finished;

                _INT   global_num_words;
                _INT   global_cur_stroke;
                _INT   global_cur_line;

                _INT   global_word_dist;
                _INT   global_inword_dist;
                _INT   global_inline_dist;
                _INT   global_sep_let_level;

                _INT   global_num_extr;
                _INT   global_word_len;

                _INT   global_h_bord;
                _INT   global_dy_sum;
                _INT   global_num_dy_strokes;
                _INT   global_line_ave_y_size;

                _INT   global_bw_sp;
                _INT   global_sw_sp;

                _INT   global_slope;
                _LONG  global_slope_dx;
                _LONG  global_slope_dy;

                _INT             s_hist_base;
                _UCHAR           hist[HIST_SIZE];
                s_hist_a_type    s_hist;
                _SHORT           horz[HORZ_SIZE];
                ws_xstrokes_type xstrokes[MAX_STROKES];
                ws_xwords_type   xwords[MAX_WORDS];
                ws_gaps_a_type   gaps;
                _ULONG           gaps_handle;

                // --- debug ---

               _INT    ws_ssp;
               _INT    ws_bsp;
               _INT    ws_inline_dist;
               _INT    ws_word_dist;
               _INT    ws_action;

                // -- NN data --

                _INT   nn_ssp;
                _INT   nn_n_ssp;
                _INT   nn_bsp;
                _INT   nn_n_bsp;
                _INT   nn_sl;
                _INT   nn_inw_dist;
                _INT   nn_npiks;

                _INT   nn_cmp_min;
                _INT   nn_cmp_max;
                _UCHAR (_PTR cmp)[WS_MAX_WORDS];

               } ws_data_type, _PTR p_ws_data_type;


typedef struct {
                _ULONG         hwsd;
                p_ws_data_type pwsd;
                ws_lrn_type    lrn;
                ws_lrn_type    lrn_buf[WS_LRN_SIZE];
               } ws_memory_header_type, _PTR p_ws_memory_header_type;


/* ------------------ Internal function prototypes -------------- */

_INT  InitWSData(p_ws_control_type pwsc, p_ws_memory_header_type _PTR ppwmh);
_INT  ReleaseWSData(p_ws_control_type pwsc, p_ws_memory_header_type _PTR ppwmh);
_INT  UnlockWSData(p_ws_control_type pwsc, p_ws_memory_header_type _PTR ppwmh);
_INT  InitForNewLine(p_ws_data_type pwsd);
_INT  WS_GetStrokeBoxAndSlope(p_ws_data_type pws_data);
_INT  WS_HistTheStroke(p_ws_data_type pws_data);
_INT  WS_NewLine(p_ws_data_type pws_data);
_INT  CheckForSpaceGesture(p_ws_data_type pws_data);
_INT  WS_WriteStrokeHorzValues(p_ws_data_type pws_data);
_INT  WS_AddStrokeToHist(p_ws_data_type pws_data);
_INT  WS_SetLineVars(p_ws_data_type pws_data);
_INT  WS_CalcLineHeight(p_ws_data_type pws_data);
_INT  WS_GetWordDist(p_ws_data_type pws_data);
_INT  WS_CalcGaps(p_ws_data_type pws_data);
_INT  WS_CountPiks(p_ws_data_type pws_data);
_INT  WS_FlyLearn(p_ws_control_type pwsc, p_ws_memory_header_type pwmh, p_ws_data_type pws_data);
_INT  WS_PostprocessGaps(p_ws_data_type pwsd);

#endif // PWS_H_INCLUDED
/* *************************************************************** */
/* *  Word segmentation prototypes END                           * */
/* *************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\precutil.h ===
/*  ****************************************************************************
    File:       RecUtil.h
    Contains:   This file contains the definitions needed for main recognition routine support.
    Written by: ParaGraph Team
    Copyright:   1994 by ParaGraph Int'l, all rights reserved.
    Change History (most recent first):

        <5*>      4/9/96    mbo     change prototype for SetStrokeSureValuesWS()
        <4*>     3/20/96    mbo     New grouping using dictionary
         <4>     8/24/95    DWL     (really mbo) add SetMultiWordMarksWS()
        <2*>      5/3/95    mbo     add func. prototype MakeAndCombRecWordsFromWordGraph()
        <1*>      1/5/95    mbo     new baseline interface
        <1*>     11/22/94   mbo     New today
******************************************************************************** */

#ifndef __REC_UTIL_H_INCLUDED__
#define __REC_UTIL_H_INCLUDED__

#include "ams_mg.h"
#include "ws.h"

/* ===================== Defines ============================================= */

#define RCBF_WSBORD        0x0001 /* Border from WS present flag */
#define RCBF_PREVBORD      0x0002 /* Border from prev line present flag */
#define RCBF_BOXBORD       0x0004 /* Border from external source (box inp) present flag */
#define RCBF_NEWLINE       0x0008 /* Word starts new line flag */
#define RCBF_NEWAREA       0x0010 /* Word is first in new area (new recognition started) flag */

#define WSW_MAX_VALUES      8     /* Max num infos for strokes */

/* ===================== Structures ========================================== */

typedef struct {
                 _SHORT          flags;

                 _SHORT          num_points;
                 p_PS_point_type trace;

                 _SHORT          prv_size;
                 _SHORT          prv_dn_pos;
                 _SHORT          prv_size_sure;
                 _SHORT          prv_pos_sure;

                 _SHORT          ws_size;
                 _SHORT          ws_dn_pos;

                 _SHORT          bx_size;
                 _SHORT          bx_dn_pos;
               } RCB_inpdata_type, _PTR p_RCB_inpdata_type;

typedef struct {
                 _INT            nword; // Number of this word in wsr structure
                 _INT            flags; // Flags of the corresponding wsr entry
                 _INT            slant; // Writing slant up tp that point
                 _INT            wstep; // Writing step up to the point
				 _INT            hbord; // Average size of small letters
                 _UCHAR          s_nums[WSW_MAX_VALUES];
		 _SCHAR		s_surs[WSW_MAX_VALUES];

               } ws_word_info_type, _PTR p_ws_word_info_type;

/* ===================== Prototypes ========================================== */

_INT   SetRCB(p_RCB_inpdata_type p_inp, p_stroka_data p_stroka);
_INT   GetWSBorder(_INT nword, p_ws_results_type wsr, p_INT psize, p_INT ppos, p_INT nl);
_INT   GetInkBox(_TRACE pt, _INT np, p_RECT prect);
_INT   GetAvePos(_TRACE trace, _INT num_points);

_INT   SetMultiWordMarksDash(p_xrdata_type xrdata);
_INT   SetMultiWordMarksWS(_INT level, p_xrdata_type xrdata, p_rc_type rc);
_INT   SetStrokeSureValuesWS(_INT fl_carry, _INT num_word, p_ws_results_type wsr, p_ws_word_info_type wswi);

#endif /* __REC_UTIL_H_INCLUDED__ */

/* ********************* END of Header **************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\stroka1.h ===
#ifndef STROKA1_H_INC
#define STROKA1_H_INC


#include "hwr_sys.h"
#include "ams_mg.h"           
#include "lowlevel.h"
#include "calcmacr.h"
#include "def.h"
#include "low_dbg.h"

#if PG_DEBUG
#include "pg_debug.h"
#endif                                

#define MAX_NUM_EXTR 100
#define NUM_EXTR_IN_SHOULD 10
#define MIN_STR_HEIGHT  12
#define NORM   1
#define HOR_STR  2
#define T_MIN  3
#define PNT    4
#define I_MIN  5
#define S_MIN  6
#define O_MAX  61
#define E_MAX  62
#define E_MIN  63
#define UML    7
#define PUNC   8
#define BEG_MAX 9
#define END_MIN 10
#define BEG_MIN 11
#define END_MAX 12
#define TAIL_MIN 13
#define GAP_LEFT_UP 15
#define GAP_LEFT_DOWN 16
#define GAP_RIGHT_UP 17
#define GAP_RIGHT_DOWN 18
#define GLITCH_UP  20
#define GLITCH_DOWN 30
#define DBL_GLITCH_UP 40
#define DBL_GLITCH_DOWN 50
#define TRP_GLITCH_UP 60
#define TRP_GLITCH_DOWN 70
#define ON_LINE      100
#define SUB_SCRIPT   101
#define SUPER_SCRIPT 102
#define INSIDE_LINE  103
#define NARROW_LINE  104
#define RET_ON_LINE  110
#define NOT_ON_LINE  111
#define TOO_WIDE     1
#define STR_TOO_NARROW  -1
#define COM          201
#define STRT         202
#define HOR          203
#define OPER         204
#define FOUR_TYPE    205
#define SLASH        206
#define L_BRKT       207
#define R_BRKT       208
#define NOT_BRKT     10

#define UP   0
#define DOWN 1

#define USE_WORDSPLIT_PARMS 1
#ifdef FOR_GERMAN
ROM_DATA_EXTERNAL _SCHAR TG1[3][2][2];
ROM_DATA_EXTERNAL _SCHAR TG2[3][2][2];
ROM_DATA_EXTERNAL _SCHAR H1[3][2][2];
ROM_DATA_EXTERNAL _SCHAR H2[3][2][2];
#else
ROM_DATA_EXTERNAL _SCHAR TG1[3][2][2];
ROM_DATA_EXTERNAL _SCHAR TG2[3][2][2];
ROM_DATA_EXTERNAL _SCHAR H1[3][2][2];
ROM_DATA_EXTERNAL _SCHAR H2[3][2][2];
#endif

//const static _LONG TG1=45/*50*/; //01_31
//const static _LONG TGB=35;//50;   02_24
//const static _LONG TGE1=50;
//const static _LONG TGE2=35;//40;   02_17
//const static _LONG H1=32/*40*/;    //01_25b
//const static _LONG HB1=34;//48;     02_17
//const static _LONG HB2=37;//48;     02_23
//const static _LONG HB3=48;
//const static _LONG HE1=50;
//const static _LONG HE2=47;
//const static _LONG D1=57;///*55*/   //01_31
//const static _LONG DB=75; ///*45 40*/   //01_24b
//const static _LONG DB2=55;
//const static _LONG DE1=35;
//const static _LONG DE2=73;///*62 60*/  /*57*/  //02_01
//const static _LONG H2=10;
ROM_DATA_EXTERNAL _SCHAR CS;


  typedef struct
  {
     _SHORT  susp;
     _SHORT  x;
     _SHORT  y;
     _SHORT  i;
     _SHORT  shift;
     p_SPECL pspecl;
  }  EXTR, _PTR p_EXTR ;

_INT extract_all_extr(low_type _PTR D, _UCHAR TYPE, p_EXTR line_extr,
       p_INT pn_all_extr,p_INT pn_extr,p_SHORT pshift);
_INT extract_num_extr(low_type _PTR D, _UCHAR TYPE, p_EXTR line_extr,
                                     p_INT p_all_extr);
_INT classify_strokes(low_type _PTR D,_INT med_ampl,_INT max_ampl,
         _INT n_ampl,p_INT pt_height,p_INT pft_height,p_BOOL psep_let);
_INT classify_num_strokes(low_type _PTR D, p_INT pmed_ampl);
_INT extract_ampl(low_type _PTR D,p_SHORT ampl,p_INT pn_ampl);
_INT calc_mediana(p_SHORT array, _INT n_arg);
_BOOL hor_stroke(p_SPECL cur, p_SHORT x, p_SHORT y, _INT n_str);
_BOOL is_i_point(low_type _PTR D,p_SPECL cur,_RECT stroke_box,
                 _INT med_ampl);
_BOOL is_umlyut(p_SPECL cur, _RECT stroke_box, _INT ibeg_str, _INT iend_str,
                p_SHORT x, p_SHORT y,_INT med_ampl);
_INT curve_com_or_brkt(low_type _PTR D,p_SPECL pend,_INT ibeg_str,
                 _INT iend_str,_INT C_str,_USHORT lmod);
_BOOL com(low_type _PTR D,p_SPECL pend,_INT ibeg_str,_INT iend_str,
       _INT C_str);
_BOOL str_com(_INT ibeg_str,_INT iend_str,p_SHORT x,p_SHORT y,_INT C_str);
_BOOL pnt(_RECT box,_INT med_ampl);
_UCHAR end_punct(low_type _PTR D,p_SPECL cur,_INT med_ampl);
_UCHAR lead_punct(low_type _PTR D);
_VOID sort_extr(p_EXTR extr,_INT n_extr);
_VOID find_gaps_in_line(p_EXTR extr,_INT n_extr,_INT n_allextr,
                        _INT med_ampl,_UCHAR type,_INT x_left,_INT x_right,
                        p_SHORT bord_d,p_SHORT y,_BOOL sl,_BOOL strict);
_VOID find_glitches_in_line(p_EXTR line_extr, _INT n_extr,
   _INT med_ampl, _UCHAR type, _INT x_left, _INT x_right,
   p_SHORT bord_d, p_SHORT x,p_SHORT y,_INT MAX_SHIFT,_BOOL sl,_BOOL strict);
_VOID glitch_to_sub_max(low_type _PTR D,p_EXTR line_max, _INT n_line_max,
                                         _INT mid_ampl,_BOOL gl_down_left);
_VOID glitch_to_inside(p_EXTR extr, _INT n_extr, _UCHAR type, p_SHORT y,
                    _INT mid_ampl,_INT x_left,_INT x_right);
_VOID glitch_to_super_min(p_EXTR line_min, _INT n_line_min,p_SHORT bord_d,
                     _INT max_height,p_SHORT x,p_SHORT y,_BOOL gl_up_left);
_BOOL sub_max_to_line(low_type _PTR D,p_EXTR line_max,p_INT pn_line_max,
                      p_SHORT bord_d,_INT max_dist);
_VOID super_min_to_line(p_EXTR line_min, _INT n_line_min, p_SHORT bord_d,
        _INT max_line_height,_INT mid_line_height, p_INT pn_super);
_INT neibour_susp_extr(p_EXTR extr,_INT n_extr,_UCHAR type,p_SHORT bord_d,
                                         _INT ft_height);
_VOID all_susp_extr(p_EXTR extr,_INT n_extr,_INT n_allextr,_UCHAR type,p_SHORT y,
          _INT base_ampl,_INT base_ampl_sure,_INT max_ampl,
          p_SHORT bord_d,_INT ft_height);
_INT calc_ampl(EXTR extr, p_SHORT y,_UCHAR type);
_VOID spec_neibour_extr(p_EXTR extr,_INT n_extr,_UCHAR type,_INT LINE_POS);
_VOID ret_to_line(p_EXTR extr,_INT n_extr,_INT i,_INT ind);
_BOOL delete_line_extr(p_EXTR line_extr, p_INT pn_extr,_INT MARK);
_BOOL insert_line_extr(low_type _PTR D, p_SPECL cur, p_EXTR extr,
                                                           p_INT pn_extr);
_INT calc_average(p_SHORT array, _INT N);
_SHORT point_of_smooth_bord(_INT cur_point,_INT n_extr,p_EXTR extr,
                            low_type _PTR D,_INT should);
_VOID smooth_d_bord(p_EXTR line_max,_INT n_line_max,low_type _PTR D,
                    _INT should,p_SHORT bord_d);
_VOID smooth_u_bord(p_EXTR line_min,_INT n_line_min,low_type _PTR D,
                    _INT should,p_SHORT bord_u,p_SHORT bord_d);
_BOOL straight_stroke(_INT ibeg, _INT iend, p_SHORT x, p_SHORT y,_INT C);
_INT mid_other(p_EXTR extr,_INT n_extr,_INT i);
_INT sign(_INT a, _INT b);
_BOOL num_bord_correction(p_EXTR extr,p_INT pn_extr,_INT n_allextr,
                          _UCHAR type,_INT med_ampl,p_SHORT bord_d,p_SHORT y);
_BOOL bord_correction(low_type _PTR D,p_EXTR extr,p_INT pn_extr,_INT n_allextr,
               _UCHAR type,_INT step,_INT med_ampl,_INT mid_ampl,
               _INT max_ampl,_INT x_left,_INT x_right,_INT LINE_POS,
               _UCHAR pass,p_SHORT bord_d,_INT max_height,_INT ft_height,
               _BOOL gl_up_left,_BOOL gl_down_left
#if PG_DEBUG
                    ,p_UCHAR pn_call1
#endif
                     );
_VOID del_tail_min(p_EXTR line_min,p_INT pn_line_min,p_SHORT y,
                                        p_SHORT bord_d,_UCHAR pass);
_INT line_pos_mist(low_type _PTR D,_INT med_u_bord,_INT med_d_bord,
                     _INT med_height,_INT n_line_min,_INT n_line_max,
                     p_EXTR line_max,p_INT pUP_LINE_POS,p_INT pDOWN_LINE_POS,
                     p_SHORT bord_u, p_SHORT bord_d, _UCHAR pass);
_BOOL extrs_open(low_type _PTR D,p_SPECL cur,_UCHAR type,_INT num);
_BOOL numbers_in_text(low_type _PTR D,p_SHORT bord_u,p_SHORT bord_d);
_INT fill_i_point(p_SHORT i_point, low_type _PTR D);
_INT calc_med_heights(low_type _PTR D,p_EXTR line_min,p_EXTR line_max,
                       p_SHORT bord_u,p_SHORT bord_d,p_SHORT i_point,
                       _INT n_line_min,_INT n_line_max,_INT n_x,
                 p_INT pmed_height,p_INT pmed_u_bord,p_INT pmed_d_bord);
_BOOL correct_narrow_segments(p_EXTR extr,p_INT pn_extr,p_SHORT bord_opp,
                    _UCHAR type,_INT med_height,_INT max_height);
_BOOL correct_narrow_ends(p_EXTR extr,p_INT pn_extr,p_EXTR extr_opp,
                  _INT n_extr_opp,_INT height,_UCHAR type);
#if PG_DEBUG
_VOID DBG_picture1(p_EXTR line_extr, _INT n_line_extr, _RECT box,
             _INT step, _INT yd, p_UCHAR pn_call);
_VOID DBG_picture2(p_EXTR extr, _INT n_extr, _INT MARK);
_VOID DBG_picture3(low_type _PTR D, p_SHORT bord, p_UCHAR pn_call);
//_VOID save_par(p_EXTR extr,_INT n_extr,_UCHAR type,_INT med_ampl,
//                                    p_SHORT bord_d);
#endif
_BOOL is_defis(low_type _PTR D,_INT n_str);
_VOID SpecBord(low_type _PTR D,p_SHORT bord_d,p_SHORT bord_u,
           p_INT pmed_d_bord,p_INT pmed_u_bord,p_INT pmed_height,
#if PG_DEBUG
           p_UCHAR pn_call3_u,p_UCHAR pn_call3_d,
#endif
           p_INT pn_x,_BOOL defis,p_EXTR line_max,_INT n_line_max);
/***********  AVP functions for filling border values in "rc" **********/
  typedef  _UCHAR cb_type[CB_NUM_VERTEX*2];
  _INT FillRCNB(p_SHORT ip, _INT nip, low_type _PTR D,      /* AVP */
                  p_SHORT bord_u, p_SHORT bord_d);
  _INT  FillRCSpec( cb_type _PTR cb, low_type _PTR D );

#endif // #ifndef STROKA1_H_INC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\sketch.h ===
#ifndef SKETCH_H_INC
#define SKETCH_H_INC

#include "ams_mg.h"

#if /*defined( FOR_GERMAN) ||*/ defined (FOR_FRENCH) || defined(FOR_INTERNATIONAL)

/***************************************************************************/

  _SHORT   Sketch( low_type _PTR  pLowData ) ;

  _SHORT   CreateUmlData ( p_UM_MARKS_CONTROL pUmMarksControl ,
                           _SHORT             nElements     ) ;

  _VOID    DestroyUmlData ( p_UM_MARKS_CONTROL pUmMarkControl ) ;

  _VOID    UmPostcrossModify( low_type _PTR  pLowData ) ;

  _VOID    UmResultMark( low_type _PTR  pLowData ) ;

  _VOID    DestroySpeclElements( low_type _PTR    pLowData ,
                                 _SHORT   iBeg  , _SHORT   iEnd ) ;

/***************************************************************************/
#endif

#endif //#ifndef SKETCH_H_INC
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\snn.h ===
/* *************************************************************************** */
/* *       NN ws programs                                                    * */
/* *************************************************************************** */
#ifndef SNN_HEADER_INCLUDED
#define SNN_HEADER_INCLUDED

#include "ams_mg.h"

// ------------------- Defines -----------------------------------------------

//#define PEGASUS

#define MLP_LEARN_MODE          0
#define MLP_EMULATE_INT         0
#define MLP_BYTE_NET            0

#ifdef SNN_FAT_NET_ON
 #define MLP_FAT_NET            1
#else
 #define MLP_FAT_NET            0
#endif

#ifdef PEGASUS
 #ifndef MLP_PRELOAD_MODE
  #define MLP_PRELOAD_MODE      1
 #endif
 #define MLP_UPSCALE            1
 #define MLP_INT_MODE           1
#else
 #ifndef MLP_PRELOAD_MODE
  #define MLP_PRELOAD_MODE      1
 #endif
 #define MLP_UPSCALE            1
 #define MLP_INT_MODE           1
#endif

#if MLP_FAT_NET
 #define NET_TYPE_ID ".fat"
#else
 #define NET_TYPE_ID ".slim"
#endif

// ------------------- Defines -----------------------------------------------

#ifdef FOR_FRENCH
 #define MLP_ID_STR "MLP.Network.V.4.12.f" NET_TYPE_ID
 #define MLP_NET_NUMOUTPUTS    (92+24)
 #define MLP_NET_SYMCO "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"   \
                       "0123456789@#$%&!?*/+=-(){}[];:~\\<>^|"                  \
                       "  " /*"" until next net, which will do better on these*/ \
                       ""                                           \
                       ""
#elif defined (FOR_GERMAN)
 #define MLP_ID_STR "MLP.Network.V.4.12.g" NET_TYPE_ID
 #define MLP_NET_NUMOUTPUTS    (92+8)
 #define MLP_NET_SYMCO "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"   \
                       "0123456789@#$%&!?*/+=-(){}[];:~\\<>^|"                  \
                       "  " /*"" until next net, which will do better on these*/ \
                       ""                                           \
                       "\""
#elif defined (FOR_INTERNATIONAL)
 #define MLP_ID_STR "MLP.Network.V.4.12.i" NET_TYPE_ID
 #define MLP_NET_NUMOUTPUTS    (92+60)
 #define MLP_NET_SYMCO "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"   \
                       "0123456789@#$%&!?*/+=-(){}[];:~\\<>^|"                  \
                       "  " /*"" until next net, which will do better on these*/ \
                       ""                         \
                       "ݟ"
#else
 #define MLP_ID_STR "MLP.Network.V.4.12.e" NET_TYPE_ID
 #define MLP_NET_NUMOUTPUTS    92
 #define MLP_NET_SYMCO "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"   \
                       "0123456789@#$%&!?*/+=-(){}[];:~\\<>^|"                  \
                       "  " /*"" until next net, which will do better on these*/ 
#endif

#define MLP_COEF_SHARE        96
#define MLP_BMP_SHARE         32
#define MLP_NUM_CFF           32
#define MLP_NUM_BMP         (16*16)

#define MLP_NET_NUMLAYERS      4
#define MLP_NET_NUMINPUTS    288

#define MLP_CELL_MAXINPUTS    32
#define MLP_LAYER_MAXCELLS   (MLP_NET_NUMOUTPUTS*MLP_CELL_MAXINPUTS)

#if MLP_FAT_NET
 #define MLP_PREOUT_STEP       4
#else
 #define MLP_PREOUT_STEP       2
#endif

#define MLP_NET_0L_NUMCELLS  (MLP_NET_NUMINPUTS)
#define MLP_NET_1L_NUMCELLS  (MLP_COEF_SHARE+MLP_BMP_SHARE)
#define MLP_NET_2L_NUMCELLS  (MLP_NET_NUMOUTPUTS*MLP_PREOUT_STEP + (MLP_CELL_MAXINPUTS-MLP_PREOUT_STEP))
#define MLP_NET_3L_NUMCELLS  (MLP_NET_NUMOUTPUTS)
#define MLP_NET_4L_NUMCELLS    0
#define MLP_NET_NUMCELLS     (MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS+MLP_NET_3L_NUMCELLS+MLP_NET_4L_NUMCELLS)
#define MLP_NET_NUMSIGNALS   (MLP_NET_0L_NUMCELLS+MLP_NET_1L_NUMCELLS+MLP_NET_2L_NUMCELLS+MLP_NET_3L_NUMCELLS+MLP_NET_4L_NUMCELLS)

//#define MLP_NET_SYMCO_LONG "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%&*{}"

// ------------------- Structures --------------------------------------------

#if MLP_INT_MODE
 #if MLP_BYTE_NET
  typedef _SCHAR         fint_c;
  typedef _UCHAR         fint_s;
 #else
  typedef _SHORT         fint_c;
  typedef _SHORT         fint_s;
 #endif
  typedef _LONG          flong;
 typedef fint_c *       p_fint_c;
 typedef fint_s *       p_fint_s;
#else
 typedef float          fint_c;
 typedef float          fint_s;
 typedef float          flong;
 typedef fint_c *       p_fint_c;
 typedef fint_s *       p_fint_s;
#endif

typedef struct {
                p_VOID    net;
                fint_s    signals[MLP_NET_NUMSIGNALS];
               } mlp_data_type, * p_mlp_data_type;

// ------------------- Prototypes --------------------------------------------

_INT  InitSnnData(p_UCHAR name, p_mlp_data_type mlpd);
_INT  GetSnnResults(p_UCHAR pCoeff, p_UCHAR answs, p_mlp_data_type mlpd);

int   LoadNetData(p_mlp_data_type mlpd, p_CHAR net_name);
int   SaveNetData(p_mlp_data_type mlpd, p_CHAR net_name, float e);
int   DumpNetData(p_mlp_data_type mlpd, p_CHAR dmp_name, float e);

#endif // SNN_HEADER_INCLUDED
/* *************************************************************************** */
/* *       End of alll                                                       * */
/* *************************************************************************** */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\ws.h ===
/* *************************************************************** */
/* *  Word segmentation algorithm dafinitions & prototypes       * */
/* *************************************************************** */

#ifndef WS_H_INCLUDED
#define WS_H_INCLUDED

/* ---- Public -- Word segmentation definitions ------------------------- */
                                       /* Defines for memory max allocation and array sizes */
#define WS_MAX_LINES           128     /* Max allowed number of lines during the single session */
#define WS_MAX_WORDS           128      /* Max words per session */
#define WS_MAX_STROKES         128     /* Max strokes per session */
#define WS_LRN_SIZE              4     /* Size of memory for learning (in words) */

#define WS_TABLET_XS          8000     /* Max value of x coord from the tablet */
#define WS_TABLET_DPI          400     /* Reference tablet DPI */

#define WS_FL_TENTATIVE       0x01     /* Current (last) word, not segmented yet --  all unattached strokes */
#define WS_FL_FINISHED        0x02     /* Word finished flag -- will not be changed any more */
#define WS_FL_CHANGED         0x04     /* Word changed flag -- word was changed since last flag-reset(by recognition routine) */
#define WS_FL_PROCESSED       0x08     /* Word used flag -- word was captured by calling program -- can't be changed any more */
#define WS_FL_CARRYDASH       0x10     /* Last word on the line has 'carry' dash at the end */
#define WS_FL_NL_GESTURE      0x20     /* Word has leading word split gesture */
#define WS_FL_SPSURE          0x40     /* Size and pos of baseline are reliable for the word */
#define WS_FL_LEARNED         0x80     /* Word was already used for learning */

#define WS_FL_LAST            0x01     /* Input flag -- it is last stroke */
#define WS_FL_FAKE            0x02     /* Input flag -- it is fake stroke */
#define WS_FL_SPGESTURE       0x04     /* Input flag -- do check for space gesture */
#define WS_FL_CLOSE           0x80     /* Input flag -- command to free all memory, forget learning */

#define WS_FLS_UNSURE         0x01     /* Out flag for a stroke -- segm code was unsure about segmenting on this gap */

/* -------------- Word segmentation definitions ------------------------- */

typedef struct {
                _UCHAR     flags;      /* Word flags */
                _UCHAR     line_num;   /* Num line */
                _UCHAR     word_num;   /* Num word in line */
                _UCHAR     seg_sure;   /* Segmentation confidence */
                _UCHAR     sep_let_level; /* Sepletovost up to now */
                _SCHAR     slope;      /* Sepletovost up to now */
                _UCHAR     first_stroke_index; /* Loc of first word stroke in stroke index array */
                _UCHAR     num_strokes; /* Number of strokes assigned to the word */
                _SHORT     word_mid_line; /* Y coord of word middle line */
                _SHORT     ave_h_bord; /* Ave size of word borders */
                _SHORT     word_x_st;  /* X coord of word start */
                _SHORT     word_x_end; /* X coord of word end */
                _SHORT     writing_step; /* Writing step up to now */
               } word_strokes_type, _PTR p_word_strokes_type;

typedef word_strokes_type (_PTR p_word_strokes_array_type)[WS_MAX_WORDS];

typedef struct {
                _UCHAR     num_words;  /* Num of created words */
                _UCHAR     num_finished_words; /* Num of finished words */
                _UCHAR     num_finished_strokes; /* Num of eternally finished strokes */

                p_word_strokes_array_type pwsa;

                _UCHAR     stroke_index[WS_MAX_STROKES];
				_SCHAR		k_surs[WS_MAX_STROKES];
               } ws_results_type, _PTR p_ws_results_type;


typedef struct {
                _INT   num_points;        /* Number of points in current stroke */
                _INT   flags;             /* Last, fake stroke attributes, etc */
                _INT   x_delay;           /* Xdist to the end of line, which if prohibited for split */

                _INT   sure_level;        /* Input sure threshhold for NN segmentation */
                _INT   word_dist_in;      /* Input distance between words -- overwrites internal calculations */
                _INT   line_dist_in;      /* Input distance between lines -- overwrites internal calculations */

//                _INT   tablet_max_x;      /* Horizontal tablet coord range (used for memory allocation) */
                _INT   def_h_line;        /* Average estimated height of small letters in text */

                _ULONG hdata;             /* Handle to internal data storage */

                _UCHAR (_PTR cmp)[WS_MAX_WORDS]; /* Debug cmp array */
               } ws_control_type, _PTR p_ws_control_type;

/* ------------------ Export   function prototypes -------------- */


#endif // WS_H_INCLUDED

/* *************************************************************** */
/* *  Word segmentation prototypes END                           * */
/* *************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\triads.h ===
/* ************************************************************************ */
/* * DTI header file  Created by AVP 3-94. Modified 9-94                  * */
/* ************************************************************************ */

#ifndef TRIADS_H_INCLUDED
#define TRIADS_H_INCLUDED

#include "ams_mg.h"

/* -------------------------- Defines for Triads ----------------------------- */

#define TR_NUMSYMBOLS     40

#define TR_OBJTYPE      "Tr#3"                  /* Object type of current TR */
#define TR_LANG         "Eng."                  /* Object type of current TR */
#define TR_VER          "1.00"                  /* Object type of current TR */
#define TR_ID_LEN          4                    /* Length of ID string in TR */
#define TR_FNAME_LEN      128                   /* Pathname of dti len        */

#define TR_NUMINBYTE       4                    /* Number of triad values in one byte */
#define TR_GETVALUE(ptrd, a, b, c)  (((*(ptrd))[(a)][(b)][(c)/4] >> (((c)%4)*2)) & 0x03) /* Get freq value from triads */


#ifdef FOR_GERMAN

#define DEF_TRIADS_MAPPING                                         \
                                      {                            \
/*   0 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   1 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   2 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   3 */                   0,  0,  1,  0,  0,  0,  0,  0,  0, 40, \
/*   4 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   5 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   6 */                   0,  0,  0,  0,  0,  2,  3,  4,  5,  6, \
/*   7 */                   7, 8,  9,  10, 11, 12, 13, 14, 15, 16, \
/*   8 */                  17, 18, 19, 20, 21, 22, 23, 24, 25, 26, \
/*   9 */                  27,  0,  0,  0,  0,  0,  0,  2,  3,  4, \
/*  10 */                   5,  6,  7,  8,  9, 10, 11, 12, 13, 14, \
/*  11 */                  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, \
/*  12 */                  25, 26, 27,  0,  0,  0,  0,  0,  0,  0, \
/*  13 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  14 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  15 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  16 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  17 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  18 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  19 */                   0,  0,  0,  0,  0,  0, 29,  0,  0,  0, \
/*  20 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  21 */                   0,  0,  0,  0, 30,  0,  0,  0,  0,  0, \
/*  22 */                  31,  0,  0, 32,  0,  0,  0,  0, 29,  0, \
/*  23 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  24 */                   0,  0,  0,  0,  0,  0, 30,  0,  0,  0, \
/*  25 */                   0,  0, 31,  0,  0,  0                  \
                                      }


#elif defined(FOR_SWED)
#error Check coding -- it is MAC now! 
#define DEF_TRIADS_MAPPING                                         \
                                      {                            \
/*   0 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   1 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   2 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   3 */                   0,  0,  1,  0,  0,  0,  0,  0,  0, 40, \
/*   4 */                   0,  0,  0,  0,  0,  0, 99, 99,  0,  0, \
/*   5 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   6 */                   0,  0,  0,  0, 99,  2,  3,  4,  5,  6, \
/*   7 */                   7,  8,  9, 10, 11, 12, 13, 14, 15, 16, \
/*   8 */                  17, 18, 19, 20, 21, 22, 23, 24, 25, 26, \
/*   9 */                  27,  0, 99,  0,  0,  0,  0,  2,  3,  4, \
/*  10 */                   5,  6,  7,  8,  9, 10, 11, 12, 13, 14, \
/*  11 */                  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, \
/*  12 */                  25, 26, 27,  0,  0,  0,  0,  0, 29, 28, \
/*  13 */                  30, 31, 15, 33, 34,  2, 29, 35, 29,  2, \
/*  14 */                  28, 30, 31, 36, 37,  6, 10, 10, 38, 32, \
/*  15 */                  15, 16, 16, 33, 33, 16, 22, 34, 39, 34, \
/*  16 */                   0,  0,  0,  0,  0,  0,  0, 20,  0,  0, \
/*  17 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  18 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  19 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  20 */                   0,  0,  0, 29,  2, 16,  0,  0,  0,  0, \
/*  21 */                   0,  0,  0,  0,  0,  0, 26, 26,  0,  0, \
/*  22 */                   0,  0,  0,  0,  0,  0,  0,  0,  0, 35, \
/*  23 */                  37,  2,  6, 36,  9, 38, 32,  9, 16, 33, \
/*  24 */                   0, 16, 22, 39, 34,  0,  0,  0,  0,  0, \
/*  25 */                   0,  0,  0,  0,  0,  0                  \
                                      }


#elif defined(FOR_FRENCH)

#define DEF_TRIADS_MAPPING                                         \
                                      {                            \
/*   0 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   1 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   2 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   3 */                   0,  0,  1,  0,  0,  0,  0,  0,  0, 40, \
/*   4 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   5 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   6 */                   0,  0,  0,  0,  0,  2,  3,  4,  5,  6, \
/*   7 */                   7,  8,  9, 10, 11, 12, 13, 14, 15, 16, \
/*   8 */                  17, 18, 19, 20, 21, 22, 23, 24, 25, 26, \
/*   9 */                  27,  0,  0,  0,  0,  0,  0,  2,  3,  4, \
/*  10 */                   5,  6,  7,  8,  9, 10, 11, 12, 13, 14, \
/*  11 */                  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, \
/*  12 */                  25, 26, 27,  0,  0,  0,  0,  0,  0,  0, \
/*  13 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  14 */                  41,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  15 */                   0,  0,  0,  0,  0,  0, 41,  0,  0,  0, \
/*  16 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  17 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  18 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  19 */                   0,  0, 29,  0, 35,  0,  0,  0,  0, 30, \
/*  20 */                  36, 31, 37, 28,  0,  0, 38, 32,  0,  0, \
/*  21 */                   0,  0, 33,  0,  0,  0,  0, 34,  0, 39, \
/*  22 */                   0,  0,  0,  0,  0,  0, 35,  0,  0,  0, \
/*  23 */                   0, 30, 36, 31, 37, 28,  0,  0, 38, 32, \
/*  24 */                   0,  0,  0, 29, 33,  0,  0,  0,  0, 34, \
/*  25 */                   0, 39,  0,  0,  0,  0                  \
                                      }


#else  /* !FOR_GERMAN && !FOR_SWED && !FOR_FRENCH */

#define DEF_TRIADS_MAPPING                                         \
                                      {                            \
/*   0 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   1 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   2 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   3 */                   0,  0,  1,  0,  0,  0,  0,  0,  0, 40, \
/*   4 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   5 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*   6 */                   0,  0,  0,  0,  0,  2,  3,  4,  5,  6, \
/*   7 */                   7, 8,  9,  10, 11, 12, 13, 14, 15, 16, \
/*   8 */                  17, 18, 19, 20, 21, 22, 23, 24, 25, 26, \
/*   9 */                  27,  0,  0,  0,  0,  0,  0,  2,  3,  4, \
/*  10 */                   5,  6,  7,  8,  9, 10, 11, 12, 13, 14, \
/*  11 */                  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, \
/*  12 */                  25, 26, 27,  0,  0,  0,  0,  0,  0,  0, \
/*  13 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  14 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  15 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  16 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  17 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  18 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  19 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  20 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  21 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  22 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  23 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  24 */                   0,  0,  0,  0,  0,  0,  0,  0,  0,  0, \
/*  25 */                   0,  0,  0,  0,  0,  0                  \
                                      }
#endif /* FOR_GERMAN etc. */


/* -------------------------- Types definitions ------------------------------ */

typedef _UCHAR  triad_el_type[TR_NUMSYMBOLS/TR_NUMINBYTE];  /* There are *some* tr in byte ! */
typedef triad_el_type triad_type[TR_NUMSYMBOLS][TR_NUMSYMBOLS];
typedef triad_type _PTR p_triad_type;

typedef struct {                                 /* Header of Triads file      */
                _CHAR  object_type[TR_ID_LEN];   /* Type file (now Tr#2)       */
                _CHAR  type[TR_ID_LEN];          /* Type of TR (Eng., )        */
                _CHAR  version[TR_ID_LEN];       /* Version number             */

                _ULONG tr_offset;                /* File offset of TR part    */
                _ULONG tr_len;                   /* Length of TR part of data */
                _ULONG tr_chsum;                 /* Checksum of TR part       */
               } tr_header_type, _PTR p_tr_header_type;

typedef struct {                                 /* TR memory descriptor       */
                _CHAR  tr_fname[TR_FNAME_LEN];   /* File name of loaded TR     */
                _CHAR  object_type[TR_ID_LEN];   /* Type file (now Tr#1)       */
                _CHAR  type[TR_ID_LEN];          /* Type of TR (Eng., ..)      */
                _CHAR  version[TR_ID_LEN];       /* Version number             */

                _ULONG h_tr;                     /* Handle of tr memory       */
               p_UCHAR p_tr;                     /* Pointer to locked tr mem  */
                _ULONG tr_chsum;                 /* CheckSum of tr memory     */
               } tr_descr_type, _PTR p_tr_descr_type;

/* -------------------------- Prototypes ------------------------------------- */

_INT  triads_load(p_CHAR tradsname, _INT what_to_load, p_VOID _PTR tp);
_INT  triads_unload(p_VOID _PTR tp);
_INT  triads_save(p_CHAR fname, _INT what_to_save, p_VOID tp);
_INT  triads_lock(p_VOID tp);
_INT  triads_unlock(p_VOID tp);

/* ---------- Global constants definitions ----------------------------------- */

#ifndef ParaLibs_j_c
    ROM_DATA_EXTERNAL _UCHAR triads_mapping[256];
#endif

/* --------------------------------------------------------------------------- */

#endif //TRIADS_H_INCLUDED
/* ************************************************************************ */
/* * End Of All ...                                                       * */
/* ************************************************************************ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\vocutilp.h ===
/* ************************************************************************* */
/* * Definitions for dictionary functions                                  * */
/* ************************************************************************* */

#ifndef VOCUTILP_INCLUDED

#define VOCUTILP_INCLUDED

#if PS_VOC

#define MAX_VOCPATH 128

typedef struct {
                _ULONG        hvoc;
                _UCHAR        vocname[MAX_VOCPATH];
                p_VOID        hvoc_dir;
               }vocptr_type;

_SHORT    voc_load(p_UCHAR vocname, _VOID _PTR _PTR vp);
_SHORT    voc_save(p_CHAR ptr, vocptr_type _PTR vp);

_BOOL     LockVocabularies( p_VOID vp );
_BOOL     UnlockVocabularies( p_VOID vp );
_SHORT    voc_unload(_VOID _PTR _PTR vp);

_SHORT    add_word(p_UCHAR inp_word, _SHORT stat, vocptr_type _PTR vp);
_SHORT    del_word(p_UCHAR inp_word, vocptr_type _PTR vp);
_INT      tst_word(p_UCHAR inp_word, p_UCHAR stat, vocptr_type _PTR vp);

_USHORT   word_search(p_UCHAR word, p_SHORT attr, vocptr_type _PTR vp);

#endif

#endif  /*  VOCUTILP_INCLUDED.  */

/* ************************************************************************* */
/* * End of all                                                            * */
/* ************************************************************************* */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\ws_p.h ===
/* ************************************************************************* */
/*        Word segmentation routines debug header                            */
/* ************************************************************************* */

#if PG_DEBUG || PG_DEBUG_MAC

#define WS_1                                                               \
                                                                           \
FILE  *f1 = _NULL;                                                         \
extern _SHORT mpr;                                                         \

#define WS_2                                                               \
                                                                           \
  if (mpr == -12)                                                          \
   {                                                                       \
    if (f1 == _NULL) f1 = fopen("c:\\tmp\\hist.xlh","wt");                 \
   }                                                                       \

#define WS_3                                                               \
                                                                           \
    if (f1)                                                                \
     {                                                                     \
      fprintf(f1,"\n");                                                    \
      fprintf(f1,"WS small sp:            %d\n", pwsd->ws_ssp);            \
      fprintf(f1,"WS large sp:            %d\n", pwsd->ws_bsp);            \
      fprintf(f1,"WS inline dist:         %d\n", pwsd->ws_inline_dist);    \
      fprintf(f1,"WS word dist:           %d\n", pwsd->ws_word_dist);      \
      fprintf(f1,"WS action  :            %d\n", pwsd->ws_action);         \
                                                                           \
      fprintf(f1,"NN ssp:                 %d\n", pwsd->nn_ssp);            \
      fprintf(f1,"NN n_ssp:               %d\n", pwsd->nn_n_ssp);          \
      fprintf(f1,"NN bsp:                 %d\n", pwsd->nn_bsp);            \
      fprintf(f1,"NN n_bsp:               %d\n", pwsd->nn_n_bsp);          \
      fprintf(f1,"NN sl:                  %d\n", pwsd->nn_sl);             \
      fprintf(f1,"NN inw_dist:            %d\n", pwsd->nn_inw_dist);       \
      fprintf(f1,"NN npiks:               %d\n", pwsd->nn_npiks);          \
      fprintf(f1,"NN nn_cmp_min:          %d\n", pwsd->nn_cmp_min);        \
      fprintf(f1,"NN nn_cmp_max:          %d\n", pwsd->nn_cmp_max);        \
                                                                           \
     }                                                                     \


#define WS_4                                                               \
                                                                           \
    if (f1)                                                                \
     {                                                                     \
      fprintf(f1,"\n");                                                    \
      fprintf(f1,"Line word dist:         %d\n", pwsd->line_word_dist);    \
      fprintf(f1,"Line inword dist:       %d\n", pwsd->line_inword_dist);  \
      fprintf(f1,"Line inline dist:       %d\n", pwsd->line_inline_dist);  \
      fprintf(f1,"Line num of extr:       %d\n", pwsd->line_extr);         \
      fprintf(f1,"Line betw-word dist:    %d\n", pwsd->line_bw_sp);        \
      fprintf(f1,"Line sep let level:     %d\n", pwsd->line_sep_let_level);\
      fprintf(f1,"Global inword_dist:     %d\n", pwsd->global_inword_dist);\
      fprintf(f1,"Global sep let lev:     %d\n", pwsd->global_sep_let_level);\
      fprintf(f1,"Global betw-word dist:  %d\n", pwsd->global_bw_sp);      \
      fprintf(f1,"\n");                                                    \
      fprintf(f1,"Input X delay:          %d\n", pwsd->in_x_delay);        \
      fprintf(f1,"Input word dist:        %d\n", pwsd->in_word_dist);      \
      fprintf(f1,"Input line dist:        %d\n", pwsd->in_line_dist);      \
      fprintf(f1,"\n");                                                    \
      fprintf(f1,"Pik step:               %d\n", pwsd->line_pik_step);     \
      fprintf(f1,"Current stroke:         %d\n", pwsd->line_cur_stroke);   \
      fprintf(f1,"Line start stroke:      %d\n", pwsd->line_st_stroke);    \
      fprintf(f1,"Line start word:        %d\n", pwsd->line_st_word);      \
      fprintf(f1,"Line H border:          %d\n", pwsd->line_h_bord);       \
      fprintf(f1,"Line start:             %d\n", pwsd->line_start);        \
      fprintf(f1,"Line end:               %d\n", pwsd->line_end);          \
      fprintf(f1,"Line active st:         %d\n", pwsd->line_active_start); \
      fprintf(f1,"Line active end:        %d\n", pwsd->line_active_end);   \
      fprintf(f1,"Line num strokes:       %d\n", pwsd->line_cur_stroke+1); \
      fprintf(f1,"Line word len sum:      %d\n", pwsd->line_word_len);     \
      fprintf(f1,"Line betw word space:   %d\n", pwsd->line_bw_sp);        \
      fprintf(f1,"Line in   word space:   %d\n", pwsd->line_sw_sp);        \
      fprintf(f1,"\n");                                                    \
      fprintf(f1,"Current line:           %d\n", pwsd->global_cur_line);   \
      fprintf(f1,"Global num words:       %d\n", pwsd->global_num_words);  \
      fprintf(f1,"Global word_dist:       %d\n", pwsd->global_word_dist);  \
      fprintf(f1,"Global inword dist:     %d\n", pwsd->global_inword_dist);\
      fprintf(f1,"Global sep let lev:     %d\n", pwsd->global_sep_let_level);\
      fprintf(f1,"Global line ave Y size: %d\n", pwsd->global_line_ave_y_size);\
      fprintf(f1,"Global num extr:        %d\n", pwsd->global_num_extr);   \
      fprintf(f1,"Global word len:        %d\n", pwsd->global_word_len);   \
      fprintf(f1,"Global dy sum:          %d\n", pwsd->global_dy_sum);     \
      fprintf(f1,"Global num dy strokes:  %d\n", pwsd->global_num_dy_strokes);\
      fprintf(f1,"Global betw word space: %d\n", pwsd->global_bw_sp);        \
      fprintf(f1,"Global in   word space: %d\n", pwsd->global_sw_sp);        \
      fprintf(f1,"Global slope:           %d\n", pwsd->global_slope);      \
      fprintf(f1,"\n");                                                    \
                                                                           \
     }                                                                     \


#define WS_5                                                               \
                                                                           \
    if (f1)                                                                \
     {                                                                     \
      for(j = pwsd->line_st_word; j < pwsd->global_num_words; j ++)        \
       {                                                                   \
        _INT p;                                                            \
                                                                           \
        fprintf(f1,"Word: %d  ", (*w_str)[j].word_num);                    \
        fprintf(f1,"SegSure: %d  ", (*w_str)[j].seg_sure);                 \
        fprintf(f1,"SepLetLevel: %d  ", (*w_str)[j].sep_let_level);        \
        fprintf(f1,"WordMidLine: %d  ", (*w_str)[j].word_mid_line);        \
        fprintf(f1,"WordXStart: %d  ", (*w_str)[j].word_x_st);             \
        fprintf(f1,"WordXEnd: %d  ", (*w_str)[j].word_x_end);              \
        fprintf(f1,"WordFlags: %x  ", (*w_str)[j].flags);                  \
        fprintf(f1,"NumStrokes: %d  ", (*w_str)[j].num_strokes);           \
        fprintf(f1,"Strokes: ");                                           \
        p = (*w_str)[j].first_stroke_index;                                \
        for (i = 0; i < (*w_str)[j].num_strokes; i ++)                     \
          fprintf(f1,"%d ", (_INT)pwsr->stroke_index[p+i]);                \
        fprintf(f1,"Stroke sures: ");                                      \
        for (i = 0; i < (*w_str)[j].num_strokes; i ++)                     \
          fprintf(f1,"%2x ", (_INT)pwsr->k_surs[p+i]);                     \
        fprintf(f1,"\n");                                                  \
       }                                                                   \
                                                                           \
      fprintf(f1,"\n Gaps info: Loc, Lst, Bst, Size, Blank, Low, PSize, Flags\n");       \
      for(j = 0; j < pwsd->line_ngaps; j ++)                               \
       {                                                                   \
        fprintf(f1,"\n");                                                  \
        fprintf(f1,"\x09 %4d", (_INT)(*pwsd->gaps)[j].loc);                \
        fprintf(f1,"\x09 %4d", (_INT)(*pwsd->gaps)[j].lst);                \
        fprintf(f1,"\x09 %4d", (_INT)(*pwsd->gaps)[j].bst);                \
        fprintf(f1,"\x09 %4d", (_INT)(*pwsd->gaps)[j].size);               \
        fprintf(f1,"\x09 %4d", (_INT)(*pwsd->gaps)[j].blank);              \
        fprintf(f1,"\x09 %4d", (_INT)(*pwsd->gaps)[j].low);                \
        fprintf(f1,"\x09 %4d", (_INT)(*pwsd->gaps)[j].psize);               \
        fprintf(f1,"\x09 %4d", (_INT)(*pwsd->gaps)[j].flags);               \
       }                                                                   \
                                                                           \
      fprintf(f1,"\n\n");                                                  \
      for (j = 0; j <= HIST_POS(pwsd->line_end); j ++)                     \
       {                                                                   \
        fprintf(f1,"\x09 %4d", (_INT)(pwsd->hist[j] & HIST_FIELD));        \
        fprintf(f1,"\x09 %4d", (_INT)(pwsd->hist[j] >> 6));                \
        if (j < pwsd->line_end/HORZ_REDUCT) fprintf(f1,"\x09 %4d", pwsd->horz[j]); \
         else fprintf(f1,"\x09 N/A");                                      \
        fprintf(f1,"\n");                                                  \
       }                                                                   \
     }                                                                     \
                                                                           \

#define WS_10                                                              \
                                                                           \
  if (f1) {fclose(f1); f1 = _NULL;}                                        \

#define WS_100                                                             \
                                                                           \
  xrexp_nn(pwsd);                                                          \


#else

#define WS_1
#define WS_2
#define WS_3
#define WS_4
#define WS_5
#define WS_10
#define WS_100

#endif

/* ************************************************************************* */
/*        END  OF ALL                                                        */
/* ************************************************************************* */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\xrlv.h ===
/* ************************************************************************* */
/*        Word  corrector module for handwriting recognition program         */
/*        Xrlv header. Created 3/00/96. AVP.                                 */
/* ************************************************************************* */

#ifndef XRLV_HEADER_INCLUDED
#define XRLV_HEADER_INCLUDED

#include "snn.h"
#include "peg_util.h"

// ----------------- Defines ---------------------------------------------------

#define XRLV_ALL_MULTIWORD     0   // Enable multiwording on any location
#define XRLV_LNK_MULTIWORD     0   // Enable multiwording on link location
#define XRLV_SEG_MULTIWORD     1   // Enable multiwording only on designated segmentation locs

#define XRLV_ST_PUNCT_PENL     2
#define XRLV_EN_PUNCT_PENL     2

#define XRLV_NEWWORD_ST_PENL   2   /* Penalty for starting a new word */
#define XRLV_NEWWORD_COEFF     0   /* Runnining penalty for new word coeff */

#define XRLV_NOTFINISHED_PENL  24
                                   /* Alll penaties per XR el, mul by 4*/
#define XRLV_VOC_PENL          0   /* Vocabulary symbol penalty */
#define XRLV_PSX_ST_PENL       3   /* Prefix/Suffix starting symbol penalty */
#define XRLV_PSX_PENL          1   /* Prefix/Suffix symbol penalty */
#define XRLV_LDB_PENL          2   /* Lexical data base symbol penalty */
#define XRLV_TRD_PENL          2   /* Triads symbol penalty */

#define XRLV_CSA_PENL          4   /* Charset Alpha symbol penalty */
#define XRLV_CSN_PENL          3   /* Charset Numbers symbol penalty */
#define XRLV_CSM_PENL          4   /* Charset MATH symbol penalty */
#define XRLV_CSO_PENL          4   /* Charset Other symbol penalty */
#define XRLV_CSP_PENL          4   /* Charset Punctuation symbol penalty */

#define XRLV_MWDP_COEFF        3   /* Penalty for startin a new word */
#define XRLV_MWSP_COEFF        2   /* Multiplier of segm multiword penalty */

#define XRLV_CSA_ID            1   /* Charset Alpha symbol Id */
#define XRLV_CSN_ID            2   /* Charset Numbers symbol Id */
#define XRLV_CSM_ID            3   /* Charset MATH symbol Id */
#define XRLV_CSO_ID            4   /* Charset Other symbol Id */
#define XRLV_CSP_ID            5   /* Charset Punctuation symbol Id */

#define XRLV_VARNUM          256  /* Max number of cells to allocate per position */
#define XRLV_CS_LOC_SHARE      8   /* One eight of all loactions will be devoted to CS */
#define XRLV_ANS_SIZE     (XRLV_VARNUM)
#define XRLV_VOC_SIZE         512
#define XRLV_CS_SIZE          256
#define XRLV_PT_SIZE          16
#define XRLV_ANSW_MAX_LEN   (w_lim)
#define XRLV_PP_INFO_SIZE (DTI_XR_SIZE+2)
#define XRLV_MIN_BUFFERS       2   /* Number of symbol sources in XRLV */

#define XRLV_FLOOR            -50
#define XRLV_INITIAL_WEIGHT   100

#define XRLV_SEP_PENL_V        1
#define XRLV_SEP_PENL_O        4
#define XRLV_F_NCAP_PENL       5
#define XRLV_S_LET_PENL        2

#define XRLV_DICT_STREWARD    (XRLV_CSA_PENL) /*  Reward for dict words to overcome first letter competition */
#define XRLV_VFL_CAP_PENL      2    /* Penalize capitalization of the first letter of dict */

#define XRLV_CACHE_LEN          (DTI_XR_SIZE+4)
#define XRLV_SYMCORR_CACHE_SIZE (DTI_NUMSYMBOLS)

#define XRLV_CACHE_EL_SET     0x01
#define XRLV_CACHE_EL_VBAD    0x02
#define XRLV_CACHE_EL_CBAD    0x04

#define XRLV_DICT_FL_CAP      0x80  /* VocSymSet buf flags / xlv cell flag*/
#define XRLV_SORT_USED        0x40  /* VocSymSet buf flags / xlv cell flag*/

#define XRLV_DICT_PREFIXED    0x01  /* Word had prefix!, xlv cell flag*/
#define XRLV_DICT_STREWARDED  0x02  /* This word has received initial reword, need to subtract, xlv cell flag */

#define XRLV_YIELD_BREAK        2   /* Marker that xrlv data was saved after break by yield */

#define	MAX_LANDING_POS			32
// ----------------- Structures ------------------------------------------------

typedef struct {
                _UCHAR                   nvar;
                _UCHAR                   st;
                _UCHAR                   end;
                _UCHAR                   flags;
                _UCHAR                   mbuf[XRLV_CACHE_LEN];
                _UCHAR                   nvars[XRLV_CACHE_LEN];
               }xrlv_cache_type, _PTR p_xrlv_cache_type;

typedef struct {
                _UCHAR                   sym;
                _UCHAR                   st;             // Pos of parent
                _UCHAR                   np;             // Num of parent
                _UCHAR                   sym_type;       // Type of symbol (for trnp)
                _SHORT                   ppw;            // PostProc penalty
                _SHORT                   boxp;           // Boxes penalty
                _SHORT                   lexp;           // Lex penalty
                _SHORT                   othp;           // Other penalties
                _UCHAR                   nvar;           // Number of sym variant in DTI
                _UCHAR                   nwords;         // Num of voc words in this chain
                _SHORT					 w;              // Sym weight
                _SHORT                   sw;             // Sequence weight (word weight)
                _UCHAR                   source;         // Lexical Source of the symbol
				_USHORT					 iXRScore;		 // XR NNet score
                _UCHAR                   len;            // Length of current word
                _UCHAR                   wlen;           // Length of last voc/ld word
                _UCHAR                   flags;          // Flags of symbol
				_SHORT					 BoxPenalty;
                fw_buf_type              sd;             // Legacy stuff about symbol, to be updated !!
                _UCHAR                   word[XRLV_ANSW_MAX_LEN];// Answer symbols
                _SCHAR                   symw[XRLV_ANSW_MAX_LEN];// Symbols' weight
                _UCHAR                   nvps[XRLV_ANSW_MAX_LEN];// NumVar (4hbit)/ Len (in positions)(4lbit)
               }xrlv_var_data_type, _PTR p_xrlv_var_data_type;

typedef struct {
                _INT                     gw;
                _INT                     min_w_v;
                _INT                     min_w_loc_v;
                _INT                     min_w_c;
                _INT                     min_w_loc_c;
                _INT                     nsym;
                _INT                     nsym_v;
                _INT                     nsym_c;
                _INT                     n_put;
//                _INT                     flags;
                _UCHAR                   nn_weights[256]; // 256 - Weights provided by the net
                xrlv_var_data_type       buf[XRLV_VARNUM];
               }xrlv_var_data_type_array, _PTR p_xrlv_var_data_type_array;

typedef struct {
                _SHORT                   percent;       // Answer percent
                _UCHAR                   num;           // Answer num in last pos buf
                _UCHAR                   vp ;           // Answer voc penalty
               } xrlv_ans_type, _PTR p_xrlv_ans_type;

typedef struct {
                _INT                     pos;          // Current position in development
                _INT                     npos;         // Overall Number of positions
                _INT                     n_real_pos;   // Number of really allocated positions
                _INT                     size_pos;     // Allocated memory for the position
                _INT                     nloc;         // Real Number of cells allocated for the position
                _INT                     nloc_c;       // Real Number of CS cells allocated for the position
                _INT                     nloc_v;       // Real Number of VOC/LD cells allocated for the position

                _INT                     bad_dist;     // Parameters From RC
                _INT                     xrwm;         // RC xrw mode
                _INT                     xrw_cs;       // RC charset select
                _INT                     caps_mode;

                _INT                     self_weight;  // Max weight of Xrdata
                _INT                     init_weight;  // Starting reward value

                _INT                     cs_fbuf_num;  // Number of elements in CS buffer
                _INT                     lp_fbuf_num;  // Number of elements in LP buffer
                _INT                     ep_fbuf_num;  // Number of elements in EP buffer

                p_xrcm_type              xrcm;
                p_rc_type                rc;
                p_xrdata_type            xrdata;

                p_SHORT                  xTrace;
                p_SHORT                  yTrace;
              p_xrlv_var_data_type_array pxrlvs[XRINP_SIZE];
                lex_data_type            vs;
                _UCHAR                   link_index[XRINP_SIZE];
                _UCHAR                   unlink_index[XRINP_SIZE];
                xrlv_ans_type            ans[XRLV_ANS_SIZE];
                _UCHAR                   order[XRLV_VARNUM];
                fw_buf_type              (_PTR fbuf)[XRWD_MAX_LETBUF];
                fw_buf_type              v_fbuf[XRLV_VOC_SIZE];
                fw_buf_type              c_fbuf[XRLV_CS_SIZE];
                fw_buf_type              lp_fbuf[XRLV_PT_SIZE];
                fw_buf_type              ep_fbuf[XRLV_PT_SIZE];
                xrlv_cache_type          cache[XRLV_SYMCORR_CACHE_SIZE];
                mlp_data_type            mlpd;
				_UCHAR					 aXRNetScore[MAX_LANDING_POS][256];
               }xrlv_data_type, _PTR p_xrlv_data_type;

// ----------------- Functions -------------------------------------------------

_INT xrlv(p_rec_inst_type pri);
_INT XrlvDevelopPos(_INT pos, p_xrlv_data_type xd);
_INT XrlvDevelopCell(_INT pos, _INT caps_cnt, _INT penl, p_xrlv_var_data_type pxl, p_xrlv_data_type xd);

#ifdef __cplusplus
extern "C"
{
#endif

_INT XrlvSortXrlvPos(_INT pos, p_xrlv_data_type xd);

#ifdef __cplusplus
}
#endif


_INT XrlvGetNextSymbols(p_xrlv_var_data_type pbp, _INT cap_dupl, p_xrlv_data_type xd);
_INT XrlvAlloc(p_xrlv_data_type _PTR xdd, p_xrdata_type xrdata, p_rc_type rc);
_INT XrlvDealloc(p_xrlv_data_type _PTR xd);
_INT XrlvFreeSomePos(p_xrlv_data_type xd);
_INT XrlvCreateRWG(p_RWG_type rwg, p_xrlv_data_type xd);
_INT XrlvSetLocations(p_xrlv_data_type xd, _INT fl);
//_INT XrlvCreateAnswers(_INT iw, p_xrlv_data_type xd);
_INT XrlvSortAns(p_rec_inst_type pri, p_xrlv_data_type xd);
_INT XrlvCleanAns(p_xrlv_data_type xd);
_INT XrlvCHLXrlvPos(_INT pos, p_xrlv_data_type xd);
_INT XrlvTrimXrlvPos(_INT pos, p_xrlv_data_type xd);
_INT XrlvGuessFutureGws(_INT pos, p_xrlv_data_type xd);
//_INT XrlvAliasXrlvPos(_INT pos, p_xrlv_data_type xd);
_INT XrlvGetSymAliases(_UCHAR sym, _INT nvar, _INT st, _INT end, p_UCHAR buf, p_xrcm_type xrcm);
_INT XrlvPPDXrlvSym(_UCHAR sym, _UCHAR nvar, p_UCHAR buf, p_SHORT x, p_SHORT y, p_rc_type rc);
_INT XrlvGetCharset(p_xrlv_data_type xd);
_INT XrlvGetRwgSymAliases(_INT rwsi, p_RWG_type rwg, p_xrlv_data_type xd);
//_INT XrlvGetRwgSrcIds(p_RWG_type rwg, p_xrlv_data_type xd);
_INT XrlvCheckDictCap(p_xrlv_var_data_type xv, p_xrlv_data_type xd);
_INT XrlvApplyWordEndInfo(_INT pos, p_xrlv_var_data_type xv, p_xrlv_data_type xd);
_INT XrlvNNXrlvPos(_INT pos, p_xrlv_data_type xd);

#endif /* XRLV_HEADER_INCLUDED */
/* ************************************************************************* */
/*        End of header                                                      */
/* ************************************************************************* */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\xrlv_p.h ===
/* ************************************************************************* */
/*        Word  corrector module for handwriting recognition program         */
/*        Xrlv header. Created 3/00/96. AVP.                                 */
/* ************************************************************************* */

#ifndef XRLV_P_HEADER_INCLUDED
#define XRLV_P_HEADER_INCLUDED

// ----------------- XRLV_P.H --------------------------------------------------

#if PG_DEBUG  || PG_DEBUG_MAC || PEGREC_DEBUG

#if PG_DEBUG_MAC
 #include "xrw_deb.h"
 #include <Events.h>
 #ifdef sprintf
  #undef sprintf
 #endif /* sprintf */
 #include <stdio.h>
 #include <stdarg.h>
 _INT avp_dbg_close(_VOID);
 #define time gXrlwTime
 #define TimeTicks xTickCount
 static _ULONG xTickCount(_VOID) { return (TickCount()*1000L/60L);}
 #define XRLV_DEBUG_OUT_F_NAME "xrlv.log"
#elif PEGREC_DEBUG
 #include <windows.h>
 #define TimeTicks xGetTickCount
 static _ULONG xGetTickCount(_VOID) {return GetTickCount();}
#else
 #include <stdio.h>
 #include "pg_debug.h"
 #include "xr_exp.h"
 #define XRLV_DEBUG_OUT_F_NAME "c:\\avp\\xrlv.log"
 _ULONG TimeTicks(_VOID);
#endif


#define  P_XRLV_0                                                               \
                                                                                \
_INT   XrlvPrintAns(p_xrlv_data_type xd);                                       \
_INT   XrlvPrintXrlvPos(_INT npos, p_xrlv_data_type xd);                        \
_INT   XrlvDumpTrace(_INT ii, PS_point_type _PTR trace, p_CHAR name);           \
_ULONG LTime, PTime, WTime, VTime, OTime, ATime, MTime, CTime, NTime, Time, tTime, ttTime, tttTime;    \
_ULONG gLTime=0, gPTime=0, gWTime=0, gVTime=0, gOTime=0, gATime=0, gMTime=0, gCTime=0, gNTime=0, gTime=0;     \
_ULONG Nwords = 0l, Nletters = 0l, Nldchecks = 0l, Nvocchecks = 0l;            \
_ULONG Ncschecks = 0l, Nsptchecks = 0l, Neptchecks = 0l, Ncellstried = 0l, Ncellssaved = 0l;            \
_ULONG NnPolCounts = 0l, NnSymChecks = 0l;                                      \


#define  P_XRLV_1                                                               \
                                                                                \
LTime= PTime= WTime= VTime= OTime= ATime= MTime= CTime = NTime = 0l;            \
Time = ttTime = TimeTicks();

#if PEGREC_DEBUG           
#define  P_XRLV_2                                                               \
 OTime += TimeTicks() - Time;                                                   
#else
#define  P_XRLV_2                                                               \
 OTime += TimeTicks() - Time;                                                   \
 SnnCreateStorage(xd->npos);                                                    \
 Time  = TimeTicks();
#endif                                                                          

#define  P_XRLV_3                                                               \
                                                                                \
Time  = TimeTicks();                                                            \

#define  P_XRLV_3_5                                                             \
                                                                                \
OTime += TimeTicks() - Time;                                                    \
Time  = TimeTicks();                                                            \

#define  P_XRLV_4                                                               \
                                                                                \
PTime += TimeTicks() - Time;                                                    \
Time  = TimeTicks();                                                            \

#if PEGREC_DEBUG                                                                
#define  P_XRLV_5                                                               \
 LTime += TimeTicks() - Time;                                                   
#else
#define  P_XRLV_5                                                               \
 LTime += TimeTicks() - Time;                                                   \
 if (mpr == -6 || mpr == -7) XrlvPrintXrlvPos(xd->pos, xd);                     
#endif


#define  P_XRLV_6                                                               \
                                                                                \
Time   = TimeTicks();                                                           \

#define  P_XRLV_7                                                               \
                                                                                \
WTime += TimeTicks() - Time;                                                    \


#if PEGREC_DEBUG

#ifdef UNICODE

#define  P_XRLV_8                                                               \
{                                                                               \
 _INT  i;                                                                       \
 TCHAR str[256], s[w_lim];                                                      \
 _ULONG gTime,tpl,tpw;                                                          \
                                                                                \
gOTime += OTime; gLTime += LTime; gPTime += PTime; gCTime += CTime; gNTime += NTime; \
gWTime += WTime; gVTime += VTime; gMTime += MTime;                              \
                                                                                \
for (i = 0; i < w_lim; i ++) if ((s[i] = ((RWS_type *)rwg->rws_mem)[i+1].sym) < 32) {s[i] = 0; break;}\
s[w_lim-1] = 0;                                                                  \
Nwords ++; Nletters += i;                                                       \
                                                                                \
wsprintf(str, L"**************** Word: %s ****************\n", s);              \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
Time  = OTime+LTime+PTime+WTime;                                                \
gTime = gOTime + gLTime + gPTime + gWTime;                                      \
tpl   = (Nletters > 0) ? gTime / Nletters : 0l;                                 \
tpw   = (Nwords > 0)   ? gTime / Nwords   : 0l;                                 \
                                                                                \
wsprintf(str, L"\ngWords: %ld, gLetters: %ld", Nwords, Nletters);               \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
wsprintf(str, L"Total Time: %d.%03ds, Time per let: %d.%03ds, Time per wrd: %d.%03ds",  \
       (_INT)(Time/1000), (_INT)(Time%1000), (_INT)(tpl/1000), (_INT)(tpl%1000), (_INT)(tpw/1000), (_INT)(tpw%1000)); \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
wsprintf(str, L"Checks -> Voc: %ld, Ld: %ld, Cs: %ld, Spt: %ld, Ept: %ld",      \
        Nvocchecks, Nldchecks, Ncschecks, Nsptchecks, Neptchecks);              \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
wsprintf(str, L"CellsTried: %ld, CellsSaved: %ld",                              \
        Ncellstried, Ncellssaved);                                              \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
wsprintf(str, L"TracesCoeffed: %ld, SymbolsNetted: %ld",                        \
        NnPolCounts, NnSymChecks);                                              \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
wsprintf(str, L"Word Time: %d.%03ds\n Tpl: %d.%03ds\n Corr: %d.%03ds\n PP: %d.%03ds\n COEFF: %d.%03ds\n NN: %d.%03ds\n Wrd: %d.%03ds\n Voc: %d.%03ds\n Matr: %d.%03ds\n Othr: %d.%03ds\n", \
       (_INT)(Time/1000),  (_INT)(Time%1000),                                   \
       (_INT)(ATime/1000), (_INT)(ATime%1000),                                  \
       (_INT)(LTime/1000), (_INT)(LTime%1000),                                  \
       (_INT)(PTime/1000), (_INT)(PTime%1000),                                  \
       (_INT)(CTime/1000), (_INT)(CTime%1000),                                  \
       (_INT)(NTime/1000), (_INT)(NTime%1000),                                  \
       (_INT)(WTime/1000), (_INT)(WTime%1000),                                  \
       (_INT)(VTime/1000), (_INT)(VTime%1000),                                  \
       (_INT)(MTime/1000), (_INT)(MTime%1000),                                  \
       (_INT)(OTime/1000), (_INT)(OTime%1000)                                   \
       );                                                                       \
                                                                                \
PegDebugPrintf("%s\n", str);                                                    \
}

// _CHAR s[256];                                                                  \
//MessageBox(0,str,L"CalliGrapher",MB_OK);                                        \
//                                                                                \
//for (i = 0; i < 255 && str[i]!= 0; i ++) s[i] = (_CHAR)str[i]; s[i] = 0;        \

#else // UNICODE
#define  P_XRLV_8                                                               \
{                                                                               \
 _INT  i;                                                                       \
 _CHAR str[256], s[w_lim];                                                      \
 _ULONG gTime,tpl,tpw;                                                          \
                                                                                \
gOTime += OTime; gLTime += LTime; gPTime += PTime; gCTime += CTime; gNTime += NTime; \
gWTime += WTime; gVTime += VTime; gMTime += MTime;                              \
                                                                                \
for (i = 0; i < w_lim; i ++) if ((s[i] = ((RWS_type *)rwg->rws_mem)[i+1].sym) < 32) {s[i] = 0; break;}\
s[w_lim-1] = 0;                                                                  \
Nwords ++; Nletters += i;                                                       \
                                                                                \
wsprintf(str, "**************** Word: %s ****************\n", s);               \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
Time  = OTime+LTime+PTime+WTime;                                                \
gTime = gOTime + gLTime + gPTime + gWTime;                                      \
tpl   = (Nletters > 0) ? gTime / Nletters : 0l;                                 \
tpw   = (Nwords > 0)   ? gTime / Nwords   : 0l;                                 \
                                                                                \
wsprintf(str, "\ngWords: %ld, gLetters: %ld", Nwords, Nletters);                \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
wsprintf(str, "Total Time: %d.%03ds, Time per let: %d.%03ds, Time per wrd: %d.%03ds",  \
       (_INT)(Time/1000), (_INT)(Time%1000), (_INT)(tpl/1000), (_INT)(tpl%1000), (_INT)(tpw/1000), (_INT)(tpw%1000)); \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
wsprintf(str, "Checks -> Voc: %ld, Ld: %ld, Cs: %ld, Spt: %ld, Ept: %ld",       \
        Nvocchecks, Nldchecks, Ncschecks, Nsptchecks, Neptchecks);              \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
wsprintf(str, "CellsTried: %ld, CellsSaved: %ld",                               \
        Ncellstried, Ncellssaved);                                              \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
wsprintf(str, "TracesCoeffed: %ld, SymbolsNetted: %ld",                         \
        NnPolCounts, NnSymChecks);                                              \
PegDebugPrintf("%s", str);                                                      \
                                                                                \
wsprintf(str, "Word Time: %d.%03ds\n Tpl: %d.%03ds\n Corr: %d.%03ds\n PP: %d.%03ds\n COEFF: %d.%03ds\n NN: %d.%03ds\n Wrd: %d.%03ds\n Voc: %d.%03ds\n Matr: %d.%03ds\n Othr: %d.%03ds\n", \
       (_INT)(Time/1000),  (_INT)(Time%1000),                                   \
       (_INT)(ATime/1000), (_INT)(ATime%1000),                                  \
       (_INT)(LTime/1000), (_INT)(LTime%1000),                                  \
       (_INT)(PTime/1000), (_INT)(PTime%1000),                                  \
       (_INT)(CTime/1000), (_INT)(CTime%1000),                                  \
       (_INT)(NTime/1000), (_INT)(NTime%1000),                                  \
       (_INT)(WTime/1000), (_INT)(WTime%1000),                                  \
       (_INT)(VTime/1000), (_INT)(VTime%1000),                                  \
       (_INT)(MTime/1000), (_INT)(MTime%1000),                                  \
       (_INT)(OTime/1000), (_INT)(OTime%1000)                                   \
       );                                                                       \
                                                                                \
PegDebugPrintf("%s\n", str);                                                    \
}

#endif // UNICODE
#else
#define  P_XRLV_8                                                               \
{                                                                               \
_INT i, j;                                                                      \
answ_type answ[NUM_RW];                                                         \
p_xrlv_var_data_type_array xlv = xd->pxrlvs[xd->npos-1];                        \
                                                                                \
Time   = OTime+LTime+PTime+WTime;                                               \
                                                                                \
i = xd->pxrlvs[xd->npos-1]->buf[0].len;                                         \
if (i > 0) ATime = Time/i; else ATime = 0l;                                     \
                                                                                \
printw("Word Time: %d.%03ds, Tpl: %d.%03ds, Corr: %d.%03ds, PP: %d.%03ds, COEFF: %d.%03ds, NN: %d.%03ds, Wrd: %d.%03ds, Voc: %d.%03ds, Matr: %d.%03ds, Othr: %d.%03ds\n", \
       (_INT)(Time/1000),  (_INT)(Time%1000),                                   \
       (_INT)(ATime/1000), (_INT)(ATime%1000),                                  \
       (_INT)(LTime/1000), (_INT)(LTime%1000),                                  \
       (_INT)(PTime/1000), (_INT)(PTime%1000),                                  \
       (_INT)(CTime/1000), (_INT)(CTime%1000),                                  \
       (_INT)(NTime/1000), (_INT)(NTime%1000),                                  \
       (_INT)(WTime/1000), (_INT)(WTime%1000),                                  \
       (_INT)(VTime/1000), (_INT)(VTime%1000),                                  \
       (_INT)(MTime/1000), (_INT)(MTime%1000),                                  \
       (_INT)(OTime/1000), (_INT)(OTime%1000)                                   \
       );                                                                       \
                                                                                \
HWRMemSet(answ, 0, sizeof(answ));                                               \
for (i = j = 0; i < NUM_RW && j < xd->pxrlvs[xd->npos-1]->nsym; j ++)           \
 {                                                                              \
  if (xd->ans[j].percent == 0) continue;                                        \
  HWRStrCpy((_STR)answ[i].word, (_STR)xlv->buf[xd->ans[j].num].word);           \
  HWRStrCpy((_STR)answ[i].realword, (_STR)answ[i].word);                        \
  answ[i].stat   = xlv->buf[xd->ans[j].num].sd.attribute;                       \
  answ[i].weight = (xlv->buf[xd->ans[j].num].sw-xd->init_weight)*10;            \
  answ[i].percent= xd->ans[j].percent/10;                                       \
  answ[i].src_id = 0;                                                           \
  answ[i].sources= xlv->buf[xd->ans[j].num].source;                             \
  answ[i].flags  = 1;                                                           \
  i ++;                                                                         \
 }                                                                              \
DbgFillAWData(&answ);                                                           \
                                                                                \
gOTime += OTime; gLTime += LTime; gPTime += PTime; gCTime += CTime; gNTime += NTime; \
gWTime += WTime; gVTime += VTime; gMTime += MTime;                              \
Nwords ++; Nletters += HWRStrLen((_STR)answ[0].word);                           \
                                                                                \
                                                                                \
if (mpr == -8) XrlvPrintAns(xd);                                                \
}
#endif

#if PEGREC_DEBUG                                                            
 #define P_XRLV_A_1                                                              
#else
 #define P_XRLV_A_1  printw( "Xrlv - Allocated: %d bytes.\n", allocated);
#endif

#define P_XRLV_C_1                                                              \
                                                                                \
tTime  = TimeTicks();

#define P_XRLV_C_2                                                              \
                                                                                \
MTime += TimeTicks() - tTime;                                                   \


#define  P_XRLV_C_3                                                             \
                                                                                \
Ncellstried ++;                                                                 \


#define  P_XRLV_C_4                                                             \
                                                                                \
Ncellssaved ++;                                                                 \


#define  P_XRLV_NS_1                                                            \
                                                                                \
tTime  = TimeTicks();                                                           \


#define  P_XRLV_NS_2                                                            \
                                                                                \
Nvocchecks ++;                                                                  \


#define  P_XRLV_NS_3                                                            \
                                                                                \
Nldchecks ++;                                                                   \


#define  P_XRLV_NS_4                                                            \
                                                                                \
Ncschecks ++;                                                                   \


#define  P_XRLV_NS_5                                                            \
                                                                                \
Nsptchecks ++;                                                                  \


#define  P_XRLV_NS_6                                                            \
                                                                                \
Neptchecks ++;                                                                  \


#define  P_XRLV_NS_7                                                            \
                                                                                \
VTime += TimeTicks() - tTime;                                                   \


#define  P_XRLV_NN_1                                                            \
                                                                                \
NnPolCounts ++;                                                                 \
tttTime  = TimeTicks();


#if PEGREC_DEBUG                                                            
#define  P_XRLV_NN_2                                                            \
 CTime += TimeTicks() - tttTime;                                                \
 tttTime  = TimeTicks();
#else
#define  P_XRLV_NN_2                                                            \
 CTime += TimeTicks() - tttTime;                                                \
 SnnFillPosData(pos, st, len, coeff);                                           \
 tttTime  = TimeTicks();
#endif

#define  P_XRLV_NN_3                                                            \
                                                                                \
NnSymChecks ++;


#define  P_XRLV_NN_4                                                            \
                                                                                \
NTime += TimeTicks() - tttTime;


#else // PG_DEBUG -----------------------------

#define  P_XRLV_0
#define  P_XRLV_1
#define  P_XRLV_2
#define  P_XRLV_3
#define  P_XRLV_3_5
#define  P_XRLV_4
#define  P_XRLV_5
#define  P_XRLV_6
#define  P_XRLV_7
#define  P_XRLV_8

#define  P_XRLV_A_1

#define  P_XRLV_C_1
#define  P_XRLV_C_2
#define  P_XRLV_C_3
#define  P_XRLV_C_4

#define  P_XRLV_NS_1
#define  P_XRLV_NS_2
#define  P_XRLV_NS_3
#define  P_XRLV_NS_4
#define  P_XRLV_NS_5
#define  P_XRLV_NS_6
#define  P_XRLV_NS_7

#define  P_XRLV_NN_1
#define  P_XRLV_NN_2
#define  P_XRLV_NN_3
#define  P_XRLV_NN_4

#endif // PG_DEBUG -----------------------------

// ----------------- XRLV_P.H --------------------------------------------------


#endif /* XRLV_P_HEADER_INCLUDED */
/* ************************************************************************* */
/*        End of header                                                      */
/* ************************************************************************* */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\xrword.h ===
/* ************************************************************************* */
/* * Definitions of print expressions for XrWord                           * */
/* ************************************************************************* */

#ifndef XRWORD_INCLUDED
#define XRWORD_INCLUDED

#include "ams_mg.h"
#include "hwr_sys.h"
#include "dti.h"
#include "triads.h"
#include "xr_names.h"

#if EXTERN_VOCABULARY
 #include "ParagraphDictionary.h"
#else
 #include "xrwdict.h"
#endif

/* ----------------------- General Modes definitions --------------------- */

                                                              /* Private caps mode definitions                 */
#define XCM_FL_DEFSIZEp   XCM_FL_DEFSIZE                      /* First letter in accordance with voc/charset   */
#define XCM_FL_TRYCAPSp   XCM_FL_TRYCAPS                      /* Use capitals vars for first letter from voc/cs*/
#define XCM_AL_DEFSIZEp   (XCM_AL_DEFSIZE &~(XCM_FL_DEFSIZE)) /* All letters in accordance with voc/cs         */
#define XCM_AL_TRYCAPSp   (XCM_AL_TRYCAPS &~(XCM_FL_TRYCAPS)) /* Use capitals vars for all letters from voc/cs */
#define XCM_AL_TRYS4Cp    (XCM_AL_TRYS4C &~(XCM_AL_DEFSIZE))  /* Try also small vars for capitals form voc/cs  */
#define XCM_AL_RETC4AVp   XCM_AL_RETC4AV                      /* Return capitalization for all answer variants */

/* ----------------------- General Constants ----------------------------- */

#define PYSTO               0x7FFF                /* For initializaton of shorts */
#define BIG_NUMBER          32767

/* ---------------------- Corr matrix defines ---------------------------- */

#if HWR_SYSTEM == MACINTOSH || HWR_SYSTEM == HWR_WINDOWS
#define ASM_MCORR   OFF
#else
#define ASM_MCORR   OFF
#endif /*HWR_SYSTEM == MACINTOSH ... */

/* FOR German version has to be off */
#ifdef FOR_GERMAN
#define XRMC_SUPPRESSFCAP     OFF                   /* Do not allow capital letters at first pos, if no accenders */
#elif defined(FOR_FRENCH)
#define XRMC_SUPPRESSFCAP     ON                    /* Do not allow capital letters at first pos, if no accenders */
#else
#define XRMC_SUPPRESSFCAP     OFF                   /* Do not allow capital letters at first pos, if no accenders */
#endif /* FOR_GERMAN... */

#define XRMC_FLOOR             0                   /* Empty level of corr */
#define XRMC_BALLANCE_COEFF   50 //45                   /* Middle val of correlation  */
#define XRMC_CONST_CORR      100                   /* Matrix start reward        */
#define XRMC_DEF_CORR_VALUE (12+12+12+12+12 - XRMC_BALLANCE_COEFF)

#define XRMC_SEPLET_PEN        8                  /* Penalty for enforcing separate letter mode */

#define XRMC_USELEARNINF     0x01                 /* xrmcFlag to use learned vexes instead of default    */
#define XRMC_DISABLEON7      0x02                 /* xrmcFlag to disable use of var if its vex eq to 7  */
#define XRMC_DOTRACING       0x04                 /* xrmcFlag Command to create tracing info    */
#define XRMC_CHECKCAPBITS    0x08                 /* xrmcFlag Command to check capitalization bits in xrmc  (flag, internal to xrmc)  */
#define XRMC_DISABLECAPBITS  0x10                 /* xrmcFlag Command to disable use of capitalization bits in xrmc   */
#define XRMC_RESTRICTEDCAP   0x20                 /* xrmcFlag On usage of alt cap letter restrict to only not marked by DTI_CAP_BIT vars   */
#define XRMC_CACHESUSPEND    0x40                 /* xrmcFlag suspend cache usage   */
#define XRMC_CC_SIZE          26                   /* How many symbols are cached */
#define XRMC_CC_START         'a'                  /* Cache Starting symbols */
#define CC_INIT                0                   /* CacheCount commands        */
#define CC_CLOSE               1
#define CC_CLEAR               2
#define CC_CCOUNT              3
#define CC_NCCOUNT             4

#define XRMC_MAX_TRACE_BL     32                  /* Max memory blocks to take */
#define XRMC_TRACE_BL_SIZE  4080                  /* Size of single memory block */

#define XRMC_T_ISTEP         0x01
#define XRMC_T_PSTEP         0x02
#define XRMC_T_CSTEP         0x03

#define GET_XRCM_INP_XR(xrcm) ((*(xrcm)->xrinp)[xrcm->wwc_pos+xrcm->inverse].type)

/* ---------------------- XRWS defines ----------------------------------- */

#define XRWS_MAX_OUT_ANSWERS  32          /* Max number of answres in created RWS */
#define XRWS_VARBUFLEN        ON                   /* Variable len of intermediate vector storage */

#define STAT_QUAL              3          /* Weightyness of statistics  */
#define XRWS_MBUF_SIZE        12          /* XrWord temp buf size       */
#define XRWS_MIN_TAG_W  ((XRMC_CONST_CORR*4)/8) /* Floor of tag weight        */

#define XRWS_VOC_FL_CAPSFLAG 0x80         /* Flag of first letter capitalization */
#define XRWS_VOC_AL_CAPSFLAG 0x40         /* Flag of all  letters capitalization */
#define XRWS_VOCCAPSFLAG     0xC0         /* Flag for testing caps of frst letter*/

#define XRWS_MWORD_MIN         3          /* Minimal Length of XR to attach next word */
#define XRWS_MWORD_LP          8          /* Link penalty for activation of MWORD */

#define XRWS_CHECKPURE      0x0001        /* vs->filter flag for enabling c/n CheckPure filter */

#define XRWS_SSPENALTIES    0x0001        /* clp->flags flag for enabling SymSources penaties */

//#define XRWS_CHAR_WWCPENL(n)   ((n < 4) ? n*6+10 : 40) /* Combined mode char twwc penalty         */
//#define XRWS_DCHAR_WWCPENL(n)  ((n < 4) ? n*6+9  : 38) /* Combined mode char twwc penalty         */
//#define XRWS_TCHAR_WWCPENL(n)  ((n < 4) ? n*6+8  : 38) /* Combined mode char twwc penalty         */
//#define XRWS_LD_WWCPENL(n)     ((n < 4) ? n*6+4  : 34) /* Combined mode lex d twwc penalty         */

#define XRWS_LIMIT_WPENL      20   /* Combined mode char twwc penalty         */
#define XRWS_NOND_WPENL        4  /* Combined mode char twwc penalty         */
#define XRWS_VOC_WPENL         0  /* Combined mode char twwc penalty         */
#define XRWS_CHAR_WPENL        9  /* Combined mode char twwc penalty         */
#define XRWS_DCHAR_WPENL       5  /* Combined mode char twwc penalty         */
#define XRWS_TCHAR_WPENL       4  /* Combined mode char twwc penalty         */
#define XRWS_LD_WPENL          4  /* Combined mode lex d twwc penalty         */
#define XRWS_PUNCT_WPENL       2  /* Combined mode char twwc penalty         */
#define XRWS_GENERIC_WPENL     2  /* Combined mode char twwc penalty         */

#define XRWS_TRPENL(f)    ((3 - (f))) /* Weight triads penalty calculator */

//#define XRWS_CHAR_PENALIZE(w)  ((_INT)(((_LONG)(w))*89/100)-10)/* Ballance between vocabulary & chars in tags */
//#define XRWS_CHAR_PENALIZE(w)  ((_INT)(((_LONG)(w))*89/100)-10)/* Ballance between vocabulary & chars in tags */
//#define XRWS_CHAR_PENALIZE(w)  ((_INT)(((_LONG)(w))*89/100)-10)/* Ballance between vocabulary & chars in tags */
//#define XRWS_DTCHAR_PENALIZE(w) ((_INT)(((_LONG)(w))*97/100)-4)/* Ballance between vocabulary & chars in tags */

#define XRWS_CHAR_ANSWQUAL   300         /* Ballance voc & char answers in (*answr) */
#define XRWS_CHAR_ANSWLEVL    50         /* Answer level for char variants          */

#define XRWS_ESTM_LET_LEN      3         /* Estimated len of letter in XRs */
#define XRWS_XR_W_LEN_ESTM(x) ((x)/(XRWS_ESTM_LET_LEN) + 2) /* Estimated word len from number of XRs   */

#define XRWM_IS_VOC_ONLY(x) (((x) & XRWM_VOC) && ((x) & (XRWM_CS | XRWM_TRIAD | XRWM_LD)) == 0)
#define XRWM_IS_COMBINED(x) (((x) & XRWM_VOC) && ((x) & (XRWM_CS | XRWM_TRIAD | XRWM_LD)) != 0)

#define TagSize              100           /* Max value of tag buf size  */

/* --------------- Defines for punctuation extraction -------------------- */

#define MAX_PUNCT_LEN          9          /* Maximum length of punctuation in xr els */
#define ACCEPT_LEVEL         200          /* WWC weight to deal with (enough for punct) */
#define MAX_PUNCT_SYMBOLS     20          /* How many punct symbols may be */
                                                                
/* ------------------- Symbol filter states ------------------------------ */

#define XRWS_DGT_STATE     (0x01000000l)  /* State of digit charater       */
#define XRWS_CHR_STATE     (0x02000000l)  /* State of non-digit charater   */
#define XRWS_REINIT_STATE  (0x00FFFFFFl)  /* State for restarting triads from middle    */

/* ----------------- Defines for answer word flags ----------------------- */

#define XRWS_F_DIRECT_PASS  0x01        /* Flag that word was recognized from the begining */
#define XRWS_F_INVERSE_PASS 0x02        /* Flag that word was recognized from the end      */
#define XRWS_F_WWC_PASS     0x04        /* Flag that word was recognized from the end      */
#define XRWS_LPUNCT_PRESENT 0x08        /* Flag that word is carrying leading punctuation */
#define XRWS_EPUNCT_PRESENT 0x10        /* Flag that word is carrying ending punctuation */
#define XRWS_F_MULTIWORD    0x20        /* Flag that word is multiword combination */

/* ----------- Symbol Graph definitions ---------------------------------- */

#define RWS_MAX_ELS       256     /* Arbitrary number of elements in graph */
                                  /* Types of RecWordsGraph */
#define RWGT_WORD          1      /* XRWS word graph */
#define RWGT_WORDP         4      /* XRLW post-processed graph */
#define RWGT_SEPLET        2      /* Real sep-let graph */
#define RWGT_ANY           3      /* Some other graph ???? */

#define RWST_SYM           1      /* Types of RecWordsSymbol (Symbol)*/
#define RWST_SPLIT         2      /* Begin division of alternatives  */
#define RWST_JOIN          3      /* End   division of alternatives  */
#define RWST_NEXT          4      /* Begin next alternative          */

#define RWSS_NULL          0      /* Mark of null symbol (terminator of smth else ) */
#define RWSS_PREFIX        1      /* Mark that there is prefix in the beg of branch */
#define RWSS_SUFFIX        1      /* Mark that there is suffix in the end of branch */
#define RWSS_UNIDENTIFIED '_'     /* Mark that there were no variants in this graph column */

#define XRWG_ALST_EMP      0      /* Types of aliases: EmptyVoc*/
#define XRWG_ALST_DS       1      /*DoubleSkip                 */
#define XRWG_ALST_VS       2      /*VocSkip,                   */
#define XRWG_ALST_CR       3      /*Corr,                      */

/* ---------------------- XRW Learn define ------------------------------- */

#define MaxVarGather          80                   /* Vars for let to gather     */
#define XRWL_MAXW            300

#define LDEL_NOVARS            1              /* Defines for cause of var del (learn) */
#define LDEL_NOTUNIQ           2              /* Defines for cause of var del (learn) */



/* ######################### Structures #################################### */

/* ----------- Character filters' handle --------------------------------- */

typedef struct {
                p_VOID        hcfl;
                p_VOID        pcfl;
                _CHAR         cflname[40];
               } cflptr_type, _PTR p_cflptr_type;


/* ----------- Matrix counting ------------------------------------------- */

/* Work area tracing structures */

typedef struct {
                _UCHAR         sym;            /* Symbol itself  */
                _UCHAR         xr;             /* XRP itself  */
                _UCHAR         st;             /* Start (on xrinp) of the xrp vector  */
                _UCHAR         len;            /* Length of xrp vector  */
                _UCHAR         vects[XRINP_SIZE]; /* Direction vectors (Not to its full length !!!)*/
               } xrp_hdr_type, _PTR p_xrp_hdr_type;

typedef struct {
                _UCHAR         sym;            /* Symbol itself  */
                _UCHAR         var_num;        /* Number of variant  */
                _UCHAR         var_len;        /* Number of xr's in the variant  */
                p_xrp_hdr_type xhdrs[DTI_XR_SIZE]; /* Pointers to XRP headers  */
               } var_hdr_type, _PTR p_var_hdr_type;

typedef struct {
                _UCHAR         sym;            /* Symbol itself  */
                _UCHAR         num_vars;       /* Max number of vars in sym  */
                _UCHAR         v_start;        /* Start pos of merging index  */
                _UCHAR         v_end;          /* End position of merging index  */
                p_var_hdr_type vhdrs[DTI_MAXVARSPERLET]; /* Pointers to var headers */
                _UCHAR         merge_vect[XRINP_SIZE]; /* Merging index  */
               } sym_hdr_type, _PTR p_sym_hdr_type;

typedef struct {
                _UCHAR         syms[2];        /* Cap/decap symbols  */
                _INT           v_start;        /* Start pos of merging index  */
                _INT           v_end;          /* End position of merging index  */
                p_sym_hdr_type shdrs[2];       /* Pointers to symbols headers  */
                _UCHAR         merge_vect[XRINP_SIZE]; /* Merging index  */
               } let_hdr_type, _PTR p_let_hdr_type;

typedef struct {
                p_UCHAR       mem[XRMC_MAX_TRACE_BL]; /*  Pointer to allocated memory */
                p_UCHAR       cur_mem;         /*  Current memory pool */
                p_SHORT       ma;
                _INT          ma_loc;
                _INT          cur_block;       /*  Size of allocated memory */
                _INT          mem_used;        /*  Amount of memory used */
               p_let_hdr_type lhdrs[w_lim];    /*  Pointers to letter headers */
               } trace_hdr_type, _PTR p_trace_hdr_type;

/* Trace Results structures */

typedef struct {
                _UCHAR        inp_pos;         /* XrInp position of tr el*/
                _UCHAR        xrp_num;         /* XRP position of tr el */
                _UCHAR        vect;            /* Type of step made */
                _UCHAR        emp;             /* empty now, padding */
               }tr_pos_type, _PTR p_tr_pos_type;

typedef struct {
                _UCHAR        realsym;         /* Real letter used */
                _UCHAR        var_num;         /* Num of used variant */
                _UCHAR        len;             /* Length of real trace for letter */
                _UCHAR        beg;             /* XrInp start of letter */
                _UCHAR        end;             /* XrInp end of letter */
                tr_pos_type   trp[XRINP_SIZE + DTI_XR_SIZE]; /* Trace positions for the letter (Not will be used in full !!)*/
               } letlayout_hdr_type, _PTR p_letlayout_hdr_type;

typedef struct {
                p_UCHAR       mem;             /*  Pointer to allocated memory */
                _INT          mem_size;        /*  Size of allocated memory */
                _INT          mem_used;        /*  Amount of memory used */
         p_letlayout_hdr_type llhs[w_lim];     /*  Pointers to letter headers */
               } wordlayout_hdr_type, _PTR p_wordlayout_hdr_type;


typedef struct {
                _SCHAR        dw;              /* Delta change of weight    */
                _UCHAR        pos;             /* Position of end of letter */
               } xrcm_cc_el_type, _PTR p_xrcm_cc_el_type;

typedef xrcm_cc_el_type  xrcm_cc_pos_type[DTI_NUMSYMBOLS];
typedef xrcm_cc_pos_type xrcm_cc_type[XRINP_SIZE];
typedef xrcm_cc_type _PTR p_xrcm_cc_type;

typedef _SHORT cline_type[XRINP_SIZE];
typedef cline_type _PTR p_cline_type;

typedef struct {
                _UCHAR        st;
                _UCHAR        end;
               }st_end_type, _PTR p_st_end_type;

/* ----------------------------- XRCM -----------------------------------------*/

typedef struct {
                // --------- XRP  Matrix -------------

                _INT          inp_start;               /* One xr inp count range */
                _INT          inp_end;                 /*   */

                p_cline_type  inp_line;                /* Address of source vect  */
                p_cline_type  out_line;                /* Address of output vect (may be the same)  */

                p_xrp_type    xrp;                     /* Address of prototype xr to count */
                xrinp_type    (_PTR xrinp)[XRINP_SIZE];/* Input xr line pointer  */
               p_xrp_hdr_type xrp_htr;                 /* XRP level trace buffer ptr */

                // --------- Var Matrix --------------

                _INT          inverse;                 /* Direction flag  */
                _INT          var_len;                 /* Prototype length */
                _INT          src_st;                  /* Source line valid values range  */
                _INT          src_end;                 /*   */
                _INT          src_pos;                 /* Estimated wwc position  */
                _INT          res_st;                  /* Resulting line valid values range  */
                _INT          res_end;                 /*   */
                _INT          count_mode;              /* Sector or full count of prototype  */
               #if DTI_COMPRESSED
     p_dte_var_header_type    xrpv;                    /* Address of prototype var to count */
               #else
                p_xrp_type    xrpv;
               #endif
               p_var_hdr_type var_htr;                 /* Var level trace buffer ptr */

                // --------- Sym Matrix --------------

                _UCHAR        sym;                     /* Symbol to process  */
                _INT          flags;                   /* Flags for controllin XRMC  */
        p_dte_sym_header_type sfc;                     /* Sym header pointer  */
      #if DTI_COMPRESSED
             p_dte_index_type plt;                     /* RAM/ROM index table with pallettes */
      #endif
                st_end_type   vste[DTI_MAXVARSPERLET]; /* St and end positions of counted variants (inp pos)  */
               p_sym_hdr_type sym_htr;                 /* Sym level trace buffer ptr */
                _UCHAR        vb[DTI_MAXVARSPERLET];   /* Copy of vex buffer */

                _SHORT        svm;                     /* Bit masks of allowed variants */
                // --------- Letter Matrix -----------

                _UCHAR        let;                     /* Letter to process  */
                _INT          cmode;                   /* Capitalization flags for the letter */
                _INT          merge_results;           /* Flag of mixing output line values  */
                _INT          switch_to_best;          /* Flag to change output line to one having best WWC  */
               p_let_hdr_type let_htr;                 /* Let level trace buffer ptr */

                // --------- Word Matrix -------------

                _UCHAR        word[w_lim];             /* Word to count  */
                _INT          trace_end;               /* End pos to start trace from */
                _SHORT        var_mask[w_lim];         /* Bit masks of allowed variants */
                _SHORT        letter_weights[w_lim];   /* Weight of letters in the word */
            p_trace_hdr_type  p_htrace;                /* Pointer to trace memory header */

                // --------- General info ------------

                _INT          caps_mode;               /* Capitalization flags  */
                _INT          corr_mode;               /* Correlation compare mode  */
                _INT          en_ww;                   /* Enabled writing ways  */
                _INT          en_languages;            /* Enabled languages     */
                _INT          bad_amnesty;             /* WWC count constant  */
                _INT          xrinp_len;               /* Inp sequence length  */
                _INT          allocated;               /* Size of xrcm allocation */

                // --------- Results -----------------

                _UCHAR        realsym;                 /* Winning symbol  */
                _UCHAR        wwc_delt;                /* WWC dif betw realsym & sym */

                _UCHAR        nvar_vect[XRINP_SIZE];   /* Vect of var nums for the last sym */
                _INT          v_start;                 /* Global result vector valid values range  */
                _INT          v_end;                   /*   */

                _INT          wc;                      /* Weight at WWC_pos   */
                _INT          wwc;                     /* WWC at wwc_pos  */
                _INT          wwc_pos;                 /* Pos of max WWC  */
                _INT          end_wc;                  /* Corr value at line end  */

                _INT          self_weight;             /* Self weight of inp seq  */

                _INT          cur_ba;                  /* Current bad amnesty */

       p_wordlayout_hdr_type  p_hlayout;               /* Pointer to done word layout header */

                // --------- Pointers to storage -----

                p_cline_type  s_inp_line;              /* Pointer to inp vector  */
                p_cline_type  s_out_line;              /* Pointer to out vector  */
                p_cline_type  s_res_lines[DTI_MAXVARSPERLET];/* Pointers to var in/out vectors  */

                p_SHORT       p_self_corr;             /* Pointer to WWC reference line  */

                _ULONG        cc_size;                 /* Cache size  */
              p_xrcm_cc_type  cc;                      /* CacheCount data buffer  */

             p_dti_descr_type p_dte;                   /* DTE main table pointer*/
               p_dte_vex_type vexbuf;                  /* Allocated VEX buffer  */
               _UCHAR         link_index[XRINP_SIZE];  /* Splits locations and numbers for cache and rest */

                // --------- Debug -------------------

                _INT          cur_let_num;             /* Number of Current letter */
                _INT          cur_alt_num;             /* Num of current alternative (cap/decap)  */
                _INT          cur_var_num;             /* Number of current variant  */

               }xrcm_type, _PTR p_xrcm_type;           /*   */

typedef struct {
                _UCHAR         num_best_alt;     /* Num of lib alt used for recog */
                _UCHAR         xrinp_st;         /* St of corr for alt on xrinp   */
                _UCHAR         xrvoc_st;         /* St of corr on xrvoc           */
               }w_alts_type;

/* ----------- XrWord ---------------------------------------------------- */

typedef signed char punct_buf_type[2][MAX_PUNCT_SYMBOLS][MAX_PUNCT_LEN+2];

typedef struct {
                _INT          weight;
                _INT          trace_pos;
                _INT          mbuf_st;
                _INT          penalty;           /* Cur sequence gathered penalty */
                _INT          ppd_penalty;       /* Set by in-xrws-PPD to qualify the tag */
                _INT          prev_ppd_seg;      /* To what loc prev PPD was counted (xr) */
                _INT          prev_ppd_wsg;      /* To what loc prev PPD was counted (let)*/
                _INT          flags;             /* Word flags */
                _INT          best_count;
                _INT          word_offset;       /* Num let of word's last init    */
                _UCHAR        word[w_lim];
                _UCHAR        realword[w_lim];
                _UCHAR        wwc_delt[w_lim];
                _INT          sym_srcs_mask;
               fw_buf_type    l_sym;
                _SHORT        tagmattr[XRWS_MBUF_SIZE];
               }tag_type, _PTR p_tag_type;

typedef struct {
                _INT          weight;
                _INT          penl;
                _INT          stat;
                _INT          percent;
                _INT          flags;
                _INT          sources;
                _INT          chain_num;
                _INT          src_id;
                _CHAR         word[w_lim];
                _CHAR         realword[w_lim];
                _UCHAR        wwc_delt[w_lim];
               }answ_type, _PTR p_answ_type;


typedef struct {
                p_UCHAR        mem;
                _INT           tag_size;
                _INT           answr_size;
                _INT           cd_mode;
                answ_type      (_PTR answr)[NUM_RW];
                tag_type       (_PTR tags0)[TagSize];
                tag_type       (_PTR tags1)[TagSize];
                punct_buf_type  _PTR punct_buf;
                fw_buf_type    (_PTR fbuf)[XRWD_MAX_LETBUF];
                fw_buf_type    (_PTR fwb)[XRWD_MAX_LETBUF];
                _UCHAR         (_PTR charset)[256];
               }xrw_alloc_type;

typedef struct {
                _INT           lstep;
                _INT           tag_size;
                _INT           flags;
                _INT           cd_mode;
                _INT           caps_mode;
                _INT           fl_cmode;
                _INT           al_cmode;
                _INT           f_last_dict;
                _INT           xrw_max_wlen;
                _INT           xrw_min_wlen;
                _INT           xrw_mode;
                _INT           bad_level;
                _INT           max_finished_tagw;

                p_xrcm_type    xrcm;
                tag_type       (_PTR in_tags)[TagSize];
                tag_type       (_PTR out_tags)[TagSize];
                answ_type      (_PTR answr)[NUM_RW];
                lex_data_type  _PTR vs;
                _UCHAR         st_punct[MAX_PUNCT_SYMBOLS]; /* symbols of ending punctuation */
                _UCHAR         end_punct[MAX_PUNCT_SYMBOLS]; /* symbols of ending punctuation */
                punct_buf_type _PTR punct_buf;
                fw_buf_type    (_PTR fbuf)[XRWD_MAX_LETBUF];
                fw_buf_type    (_PTR fwb)[XRWD_MAX_LETBUF];
               } clp_type, _PTR p_clp_type;

/* ----------- Batch Learning -------------------------------------------- */

#define XRWL_MAXSYMS     12
#define XRWL_LRNSUFFLEV  50

typedef struct {
                xrdata_type   _PTR xrd;
                p_UCHAR        word;
                PS_point_type _PTR trj;
               } xrwlearn_type;

typedef struct {
                _SHORT        class_level;
                _SHORT        min_class_size;
                _SHORT        learn_suff;
                _SHORT        vocvar_reward;
               } xrwlp_type;

typedef struct {
                _WORD         num  : 4;       /* Number of class        */
                _WORD         del  : 4;       /* Reason of deletion     */
                _WORD         best : 1;       /* Best variant of class  */
                _WORD         lib  : 1;       /* Copied from default lib*/
               }xlclass_type;

typedef struct {
                _USHORT       next;           /* Short pointer to next  */
                _USHORT       num;            /* Num of w., where it was found or var_xr num*/
                xlclass_type  xlclass;        /* Class num and flags    */
                _UCHAR        xrd_beg;        /* Beg num of xrdata      */
                _UCHAR        xrd_len;        /* Len of corresp str     */
                _SHORT        maxw;           /* Max corr on ally voc v */
                _SHORT        nvars;          /* Num vars got or belong */
                _UCHAR        var_track;      /* Bit map of ally voc v  */
                _UCHAR        syms[XRWL_MAXSYMS];/* Alien syms          */
               }lv_descr_type;

typedef struct {
                _SHORT        pc_ally;        /* Perc. of ally inp v. got  */
                _SHORT        pc_unique;      /* % of uniquely got ally v. */
                _SHORT        pc_alien;       /* Sum % of got aliens       */
               }libv_info_type;

/* ----------- Punctuation ----------------------------------------------- */

typedef struct {
                _CHAR   stp;            // Starting punc symbol
                _CHAR   lstp;           // Length of start punc cutted
                _INT    wstp;           // Weight of start punc

                _CHAR   enp;
                _CHAR   lenp;
                _INT    wenp;
               } punct_type, _PTR p_punct_type;

/* ----------- Symbol Graph definitions ---------------------------------- */

typedef struct {                  /* Type, defining graph element             */
                _UCHAR  sym;      /* Symbol from the answer                   */
                _UCHAR  realsym;  /* Symbol really used for recognition (Cap) */
                _UCHAR  type;     /* Type of symbol: Normal/Split/Join/Alt    */
                _UCHAR  nvar;     /* Number of prototype used                 */
                _UCHAR  xrd_beg;  /* Num of begining xr-el of XrData, corresponding */
                _UCHAR  xrd_len;  /* Length of XrData string, corresponding   */
                _UINT   weight;   /* Percent of quality of the symbol sequence sym in */
                _UCHAR  lexw;     /* Some lexical penalties by xrw or so      */
                _SCHAR  sidew;    /* Weight for the word by side reasoning    */
                _SCHAR  letw;     /* Weight added by this letter              */
                _SCHAR  src_id;   /* ID of source of appearance of the symbol */
                _SCHAR  ppdw;     /* PPD estimate for the symbol              */
          #if  PG_DEBUG
                _SCHAR  ppd_score;/* The original, non-scaled, ppd score      */ 
          #endif
                _SCHAR  ortow;    /* ORTO estimate for the symbol             */
                _UCHAR  attr;     /* Some attribute (voc attribute)           */
                _UCHAR  d_user;   /* Here can be temp user storage byte       */
               } RWS_type, _PTR p_RWS_type;

typedef struct {                  /* Type, defining PPD element               */
                _UCHAR      alias;/* Number of XrData xr, corresponding to this */
                _UCHAR      type; /* Type of correspondence - VocSkip, InpSkip, Corr */
               } RWG_PPD_el_type, _PTR p_RWG_PPD_el_type;

typedef RWG_PPD_el_type RWG_PPD_type[DTI_XR_SIZE+1]; /* Type, def PPD letter */
typedef RWG_PPD_type _PTR p_RWG_PPD_type;

/* ------------------------ Misc ------ ------------------------------------ */


/* ######################### Prototypes #################################### */

/* ------------------------ XrWord Main ------------------------------------ */
_INT     xrw_algs(p_xrdata_type xrdata, rec_w_type (_PTR rec_words)[NUM_RW], p_RWG_type rwg, rc_type  _PTR rc);
/* -------------------------- XrWordS -------------------------------------- */

_INT     xrws(p_xrdata_type xrdata, p_RWG_type rwg, rc_type  _PTR rc);

_INT     CalculateNextTag(clp_type _PTR clp);
_INT     GetFollowers(lex_data_type _PTR vs, fw_buf_type (_PTR fbuf)[XRWD_MAX_LETBUF], fw_buf_type (_PTR fwb)[XRWD_MAX_LETBUF]);
_INT     GF_TriadSymbolSet(lex_data_type _PTR vs, fw_buf_type (_PTR fwb)[XRWD_MAX_LETBUF]);
_INT     GF_CharsetSymbolSet(lex_data_type _PTR vs, fw_buf_type (_PTR fwb)[XRWD_MAX_LETBUF]);
_INT     GF_PunctSymbolSet(lex_data_type _PTR vs, fw_buf_type (_PTR fwb)[XRWD_MAX_LETBUF]);
_INT     AddSymbolSet(_INT type, fw_buf_type (_PTR fwb)[XRWD_MAX_LETBUF], fw_buf_type (_PTR fbuf)[XRWD_MAX_LETBUF]);
_INT     AskTagLoc(tag_type (_PTR tag)[TagSize], _INT   tag_size, _INT weight, lex_data_type _PTR vs);
_INT     PutInAnsw(_INT iw, _INT penl, lex_data_type  _PTR vs, answ_type (_PTR answ)[NUM_RW]);
_INT     CheckDone(tag_type (_PTR tags)[TagSize], _INT   num_tags, _INT   threshold);
_INT     CapAnswers(_INT caps_mode, answ_type (_PTR answ)[NUM_RW]);
_INT     CheckCapitalization(p_RWG_type rwg, p_rc_type rc);
_INT     CleanGraph(p_RWG_type rwg);
_INT     CheckWeights(answ_type (_PTR answ)[NUM_RW], p_RWG_type rwg);
_INT     SortGraph(_INT (_PTR index)[NUM_RW], p_RWG_type rwg);
_INT     SetWeights(p_RWG_type rwg, answ_type (_PTR answ)[NUM_RW]);
_INT     FillRWG(_INT answer_level, _INT answer_allow, p_RWG_type rwg, answ_type (_PTR answr)[NUM_RW]);
_INT     ZeroTag(tag_type (_PTR tag)[TagSize], _INT   tag_size);
_INT     CleanTags(p_lex_data_type vs, _INT prev_tag_w, _INT bad_dist, _INT tag_size, tag_type (_PTR tags)[TagSize]);
_INT     SortTags(_INT tag_size, tag_type (_PTR tags)[TagSize]);
_INT     SortAnsw(_INT self_w, answ_type (_PTR answ)[NUM_RW], _INT (_PTR index)[NUM_RW]);
_INT     GetAnswAttributes(lex_data_type _PTR vs, answ_type (_PTR answr)[NUM_RW]);
_INT     TriadCheck(_UCHAR sym, p_ULONG state, lex_data_type _PTR vs);
_INT     GetTriadAnswPenalty(lex_data_type _PTR vs);
_INT     CheckPure(_UCHAR sym, p_ULONG state, lex_data_type _PTR vs);
_INT     PunctPreCalc(p_clp_type clp, rc_type _PTR rc);
_INT     PpTags(_INT lstep, p_xrcm_type xrcm, _INT tag_size, tag_type (_PTR tags)[TagSize]);
_INT     AdjustWWC(_INT weight, _INT trace_pos, p_xrcm_type xrcm);
_INT     xrw_mem_alloc(xrw_alloc_type _PTR memptr);
_INT     xrw_mem_dealloc(xrw_alloc_type _PTR memptr);

/* --------------------------  xrSpl  -------------------------------------- */

_INT     xr_spl(p_xrdata_type xrdata, p_RWG_type rwg, rc_type  _PTR rc);

/* --------------------------  XrLet  -------------------------------------- */

_INT     xrlw(p_xrdata_type xrdata, p_RWG_type rwg, rc_type  _PTR rc);

/* -------------------------- XrW_Util ------------------------------------- */

_INT     GetCharset(p_UCHAR charset, _INT   cs_size, rc_type _PTR rc);
_INT     GetBaseBord(p_rc_type rc);
_INT     GetSymBox(_UCHAR sym, _INT st, _INT end, p_xrdata_type xrdata, p_RECT box);

/* --------------------------- xr_mc ------------------------------------*/

_INT     xrmatr_alloc(rc_type _PTR rc, p_xrdata_type xrd, p_xrcm_type _PTR xrcm);
_INT     xrmatr_dealloc(p_xrcm_type _PTR xrcm);
_INT     change_direction(_INT change_to, p_xrcm_type xrcm);
_INT     CacheCount(_INT mode, p_xrcm_type xrcm);
_INT     CountWord(p_UCHAR word, _INT caps_mode, _INT flags, p_xrcm_type xrcm);
_INT     CountLetter(p_xrcm_type xrcm);
_INT     CountSym(p_xrcm_type xrcm);
_INT     CountVar(p_xrcm_type xrcm);
_INT     CountXrC(p_xrcm_type xrcm);
_INT     TCountXrC(p_xrcm_type xrcm);
_INT     MergeVarResults(p_xrcm_type xrcm);
_INT     SetInitialLine(_INT count, p_xrcm_type xrcm);
_INT     SetInpLine(p_SHORT p_line, _INT st, _INT count, p_xrcm_type xrcm);
_INT     SetInpLineByValue(_INT value, _INT st, _INT count, p_xrcm_type xrcm);
_INT     GetOutTB(_SHORT (_PTR tb)[XRWS_MBUF_SIZE], _INT trace_pos, p_xrcm_type xrcm);
_INT     GetOutLine(p_SHORT p_line, _INT st, _INT count, p_xrcm_type xrcm);
_INT     SetOutLine(p_SHORT p_line, _INT st, _INT count, p_xrcm_type xrcm);
_INT     MergeWithOutLine(p_SHORT p_line, _INT st, _INT count, p_xrcm_type xrcm);
_INT     GetFinalWeight(p_xrcm_type xrcm);
_INT     TraceAlloc(_INT wl, p_xrcm_type xrcm);
_INT     TraceDealloc(p_xrcm_type xrcm);
_INT     CreateLayout(p_xrcm_type xrcm);
_INT     FreeLayout(p_xrcm_type xrcm);
p_VOID   TDwordAdvance(_INT size, p_xrcm_type xrcm);
_INT     SetWWCLine(_INT ba, p_xrcm_type xrcm);
_INT     FillLetterWeights(p_SHORT ma, p_xrcm_type xrcm);
_INT     TraceAddAlloc(p_xrcm_type xrcm);

/* --------------------- XrwLearn ---------------------------------------*/

_SHORT   XrwLearn(rc_type _PTR rc, xrwlearn_type (_PTR xrwl)[XRWL_MAXW], xrwlp_type _PTR params);
_SHORT   ExtractLetVariants(rc_type _PTR rc, xrwlearn_type (_PTR xrwl)[XRWL_MAXW], xrwlp_type _PTR params, void _PTR llv);
_SHORT   Analyser(rc_type _PTR prc, xrwlearn_type (*xrwl)[XRWL_MAXW], xrwlp_type *params, void *llv);
_SHORT   MarkDelete(xrwlearn_type (*xrwl)[XRWL_MAXW], xrwlp_type *params, void *llv);
_SHORT   MarkAdd(rc_type _PTR rc, xrwlearn_type (*xrwl)[XRWL_MAXW], xrwlp_type *params, void *llv);
_SHORT   Classificator(_UCHAR ch, rc_type _PTR rc, xrwlearn_type (*xrwl)[XRWL_MAXW], xrwlp_type *params, void *llv);
_SHORT   SameSymCorr(_UCHAR ch, rc_type _PTR rc, xrwlearn_type (*xrwl)[XRWL_MAXW], xrwlp_type *params, void *llv);
_SHORT   OtherSymCorr(_UCHAR sch, _UCHAR och, rc_type _PTR rc, xrwlearn_type (*xrwl)[XRWL_MAXW], xrwlp_type *params, void *llv);
_SHORT   SymMarkDel(_UCHAR ch, xrwlearn_type (*xrwl)[XRWL_MAXW], xrwlp_type *params, void *llv);
_SHORT   LCellToXrData(_UCHAR ch, lv_descr_type _PTR lvci, xrwlearn_type (*xrwl)[XRWL_MAXW], p_dti_descr_type dp, xrdata_type (_PTR xrd)[DTI_XR_SIZE*2]);
_SHORT   LCellToXVB(_UCHAR ch, lv_descr_type _PTR lvci, xrwlearn_type (*xrwl)[XRWL_MAXW], p_dti_descr_type dp, xrinp_type (_PTR xrv_buf)[DTI_XR_SIZE*2]);
_SHORT   CheckResult(p_VOID dp, xrwlearn_type (_PTR xrwl)[XRWL_MAXW], p_VOID llv);
_SHORT   PrepareDT(void _PTR dp, xrwlearn_type (_PTR xrwl)[XRWL_MAXW], void _PTR llv);
_SHORT   ViewELV(void _PTR dp, xrwlearn_type (_PTR xrwl)[XRWL_MAXW], xrwlp_type _PTR params, void _PTR llv);
_SHORT   ViewLR(void _PTR dp, xrwlearn_type (_PTR xrwl)[XRWL_MAXW], xrwlp_type _PTR params, void _PTR llv);
_SHORT   XLAlloc(void _PTR dp, xrwlearn_type (_PTR xrwl)[XRWL_MAXW], xrwlp_type _PTR params, void _PTR _PTR llv);
_SHORT   XLDeAlloc(void _PTR _PTR llv);

/* ----------- Symbol Graph definitions ---------------------------------- */

_INT     xr_rwg(p_xrdata_type xrdata, rec_w_type (_PTR rec_words)[NUM_RW], p_RWG_type rwg, rc_type  _PTR rc);
_INT     create_rwg_ppd(p_xrcm_type xrcm_ext, p_rc_type rc, p_xrdata_type xrd, p_RWG_type rwg);
_INT     create_rwg_ppd_node(p_xrcm_type xrcm_ext, p_rc_type rc, _INT xl, p_xrdata_type xrd, _INT rws_st, _INT rws_end, p_RWG_type rwg);
_INT     FreeRWGMem(p_RWG_type rwg);
_INT     AskPpWeight(p_UCHAR word, _INT start, _INT end, p_RWG_type prwg, p_xrcm_type xrcm);
_INT     fill_RW_aliases(rec_w_type (_PTR rec_words)[NUM_RW], p_RWG_type rwg);
_INT     GetCMPAliases(p_xrdata_type xrdata, p_RWG_type rwg, p_CHAR word, rc_type  _PTR rc);

/* -------------------- Statics -----------------------------------------*/

#if  !defined(ParaLibs_j_c) || (HWR_SYSTEM != MACINTOSH)
ROM_DATA_EXTERNAL _UCHAR let_stat[128];
ROM_DATA_EXTERNAL _INT   xrwd_src_ids[XRWD_N_SRCS];
ROM_DATA_EXTERNAL _UCHAR tr_sym_set[];
ROM_DATA_EXTERNAL _UCHAR ldb_sym_set[];

#endif /* ParaLibs_j_c */
/* -------------------- Library -----------------------------------------*/

#if defined(__cplusplus) && (HWR_SYSTEM == MACINTOSH)
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */
_INT   CountXrAsm(p_xrcm_type xrcm);
_INT   TCountXrAsm(p_xrcm_type xrcm);
#if defined(__cplusplus) && (HWR_SYSTEM == MACINTOSH)
}                       /* End of extern "C" { */
#endif  /* __cplusplus */

/* -------------------- Misc --------------------------------------------*/

//_INT     RecYield(_VOID);
//_VOID    LetXrLength(p_UCHAR min, p_UCHAR max, _INT let, _VALUE hdte);

_INT      xrp_ave_val(p_UCHAR pc, _INT len);


/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
/* +        Here are specific analysis functions prototypes +++++++++++++++++ */
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

_INT  xxx(xrdata_type (_PTR xrdata)[XRINP_SIZE], rec_w_type (_PTR rec_words)[NUM_RW], rc_type  _PTR rc);
_INT  xxx_init(rc_type  _PTR rc);
_INT  xxx_close(char * fname);

_INT  xxx_ha(xrdata_type (_PTR xrdata)[XRINP_SIZE], rec_w_type (_PTR rec_words)[NUM_RW], rc_type  _PTR rc);

void DumpTags(_INT tag_size, tag_type (_PTR tags)[TagSize]);

#endif  /*  XRWORD_INCLUDED.  */

/* ************************************************************************* */
/* * End of all                                                            * */
/* ************************************************************************* */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\xrwdict.h ===
#include "commondict.h"

/* ************************************************************************* */
/* * Definitions for dictionary support for XRW algs                       * */
/* ************************************************************************* */

#ifndef XRWORDDICT_INCLUDED
#define XRWORDDICT_INCLUDED

#define XRWD_SRCID_NOP        0x0000      /* Initial state - can be any       */
#define XRWD_SRCID_VOC        0x0001      /* Sym originates from vocabulary   */
#define XRWD_SRCID_USV        0x0011      /* Sym originates from user dict    */
#define XRWD_SRCID_LD         0x0002      /* Sym originates from lexical DB   */
#define XRWD_SRCID_TR         0x0004      /* Sym originates from charset      */
#define XRWD_SRCID_CS         0x0008      /* Sym originates from charset      */
#define XRWD_SRCID_PT         0x0030      /* Sym originates from punctuation  */
#define XRWD_SRCID_SPT        0x0010      /* Sym originates from spunctuation */
#define XRWD_SRCID_EPT        0x0020      /* Sym originates from epunctuation */
#define XRWD_SRCID_DGT        0x0040      /* Sym is digit                     */
#define XRWD_IS_VOC_ONLY(x) (((x) & XRWD_SRCID_VOC) == (x))

#define XRWD_N_SRCS                5      /* Num of buffer for sym sources    */
#define XRWD_N_VOC                 0      /* Num of buffer for   vocabulary   */
#define XRWD_N_LD                  1      /* Num of buffer for   lexical DB   */
#define XRWD_N_TR                  2      /* Num of buffer for   charset      */
#define XRWD_N_CS                  3      /* Num of buffer for   charset      */
#define XRWD_N_PT                  4      /* Num of buffer for   punctuation  */

#define XRWD_ID_ORDER XRWD_SRCID_VOC, XRWD_SRCID_LD, XRWD_SRCID_TR, XRWD_SRCID_CS, XRWD_SRCID_PT

#define XRWD_MAX_LETBUF          512

#define XRWD_USE_LENLIM          OFF      /* Len limit check support #enabled    */
#define XRWD_LENLIM                1      /* Len limit check enabled flag        */

#define XRWD_NOP                   0      /* Starting state, nothing done yet    */
#define XRWD_INIT                  1      /* Starting state, nothing done yet    */
#define XRWD_MIDWORD               2      /* There is no end of word in block db;*/
#define XRWD_WORDEND               3      /* There is end of word in block db;   */
#define XRWD_BLOCKEND              4      /* There is no tails in block db;      */
#define XRWD_REINIT               10      /* ReStarting state, somwhere in the middle    */
#define XRWD_TO_BE_CONTINUED(x) ((x) == XRWD_INIT || (x) == XRWD_MIDWORD || (x) == XRWD_WORDEND)
#define XRWD_TO_BE_ANSWERED(x)  ((x) == XRWD_BLOCKEND || (x) == XRWD_WORDEND)

#define XRWD_CA_EXACT              0      /* Command for Check Ans to verify exactly */
#define XRWD_CA_INSENS             1      /* Command for Check Ans to verify caps insensitive */

/* -------------------- Srtructures -------------------------------------- */
#if 0
typedef struct {
                _UCHAR         l_status;             /* Word continuation state    */
                _UCHAR         attribute;            /* Word attribute             */
                _UCHAR         chain_num;            /* Num of dictionary in chain */
                _UCHAR         penalty;              /* Penalty for current symbol */
                _ULONG         state;                /* State of sym generator     */
               } sym_src_descr_type, _PTR p_sym_src_descr_type;

typedef struct {
                _UCHAR         sym;                  /* Symbol itself (OS coding)  */
                _UCHAR         penalty;              /* Min penalty of the sym sources */
                _UCHAR         sources;              /* Flags of sym active sources*/
                sym_src_descr_type sd[XRWD_N_SRCS];  /* Sym sources descriptors    */
               } sym_descr_type, _PTR p_sym_descr_type;
#endif


typedef struct {
                _UCHAR		sym;                  /* Symbol itself              */
                _UCHAR		l_status;             /* Word continuation state    */
                _UCHAR		attribute;            /* Word attribute             */
                _UCHAR		chain_num;            /* Num of dictionary in chain */
                _UCHAR		penalty;              /* Source penalty for sym     */
                _UCHAR		cdb_l_status;         /* Delayed status for a codebook entry */
                _USHORT		codeshift;            /* Shift in the codebook      */
                _ULONG		state;                /* State of sym generator     */
				
				LMSTATE		InfLMState;
               } fw_buf_type, _PTR p_fw_buf_type;

typedef struct {
                _UCHAR         sym;                  /* Symbol itself (OS coding)  */
                _UCHAR         penalty;              /* Min penalty of the sym sources */
                _UCHAR         sources;              /* Flags of sym active sources*/
                fw_buf_type    sd[XRWD_N_SRCS];  /* Sym sources descriptors    */
               } sym_descr_type, _PTR p_sym_descr_type;

#if PS_VOC /* ............................................................ */

#include "vocutilp.h"

typedef struct {
                _INT          inverse;         /*  Direct or backward pass */
                _INT          filter;          /* Filter type (old one)    */
                _INT          flags;           /* Flag register directons  */
                _INT          xrw_mode;        /* XRW mode of operation    */
                _INT          dict_flags;      /* Control flags for dict   */

               sym_descr_type l_sym;           /* Last assigned symbol     */

                _INT          src_id;          /* ID of source of verif.   */
//                _INT          src_id_answ;     /* ID of found full word    */
//                _ULONG        attribute;       /* Word attribute           */
//                _ULONG        state;           /* Cur verification state   */

                _INT          xrinp_len;       /* Length of Xr inp seq.    */
                _INT          done_let;        /* Num of letters created   */
                _INT          word_offset;     /* Num let of word's last init    */
                _INT          done_xrlen;      /* Num of Xr els. used      */

                _INT		  main_dict_enabled;	/* Is the dict enabled */

				p_VOID        huserdict;       /* user dict handle       */

                p_VOID        p_tr;            /* Pointer to beg triads        */

                p_UCHAR       charset;         /* Pointer to charset str.  */
                p_UCHAR       lpunct;          /* Pointer to charset str.  */
                p_UCHAR       epunct;          /* Pointer to charset str.  */
                       
                _UCHAR        word[w_lim];     /* Cur word sequence        */
                _UCHAR        realword[w_lim]; /* Cur realword sequence    */
                _UCHAR        wwc_delt[w_lim]; /* Deltas betw sym-realsym in wwc    */
#if USE_LOCATIONS
                _UCHAR        locations[XRINP_SIZE]; /* Positions of xr relative to step in the word */
#endif
                p_VOID         pldbsm;
               } lex_data_type, _PTR p_lex_data_type;

#endif /* PS_VOC ......................................................... */

#if AIRUS_VOC /* ......................................................... */

#define BORLAND /* For Microlytics */

#include "newttype.h"
#include "airustyp.h"
#include "microlyt.h"

#include "vocutila.h"

#define BLOCKEND            3              /* There is no tails in block db;      */
#define WORDEND             2              /* There is end of word in block db;   */
#define MIDWORD             1              /* There is no end of word in block db;*/


typedef struct {
                _INT          inverse;
                _INT          filter;
                _INT          flags;
                _INT          xrw_mode;        /* XRW mode of operation    */
                _INT          dict_flags;      /* Control flags for dict   */

               sym_descr_type l_sym;          /* Last assigned symbol     */

                _INT          src_id;
//                _INT          src_id_answ;     /* ID of found full word    */
//                _ULONG        attribute;
//                _ULONG        state;

                _INT          xrinp_len;
                _INT          done_let;
                _INT          word_offset;     /* Num let of word's last init    */
                _INT          done_xrlen;

                AirusAPtr     p;               /* Airus param block pointer*/
                ParcSpeller _PTR  ps;          /* Microlitycs object       */
                _UCHAR        n_vocs;          /* Number of voc's in chain */
                _ULONG        voc_IDs[MAX_DICT];/* ID codes of current dictionary */

                p_VOID        hld;             /* Character filter pointer */

                p_triad_type  p_tr;           /* Pointer to beg triads        */

                p_UCHAR       charset;
                p_UCHAR       lpunct;          /* Pointer to charset str.  */
                p_UCHAR       epunct;          /* Pointer to charset str.  */
                           //CHE: _UCHARs:
                _UCHAR        word[w_lim];
                _UCHAR        realword[w_lim]; /* Cur realword sequence    */
                _UCHAR        wwc_delt[w_lim]; /* Deltas betw sym-realsym in wwc    */
#if USE_LOCATIONS
                _UCHAR        locations[XRINP_SIZE]; /* Positions of xr relative to step in the word */
#endif
               } lex_data_type, _PTR p_lex_data_type;

#endif /* AIRUS_VOC ..................................................... */

/* -------------------- Proto -------------------------------------------- */

_INT   GF_VocSymbolSet(lex_data_type _PTR vs, fw_buf_type (_PTR fbuf)[XRWD_MAX_LETBUF], p_rc_type prc);
_INT   AssignDictionaries(lex_data_type _PTR vs, rc_type _PTR rc);
_INT   GetWordAttributeAndID(lex_data_type _PTR vs, p_INT src_id, p_INT stat);

#endif

/* ************************************************************************* */
/* *    END OF ALLLLLLLLLLLLL                                              * */
/* ************************************************************************* */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\xr_attr.h ===
/* ************************************************************************* */
/* *   Fill in xr attributes routines                            AVP 1-1996* */
/* ************************************************************************* */

#ifndef XR_ATTR_H_INCLUDED
#define XR_ATTR_H_INCLUDED

/* ************************************************************************* */
/* *   XR features definition table **************************************** */
/* ************************************************************************* */

#define FHR_JUNK  0x00
#define FHR_UPPER 0x01
#define FHR_LOWER 0x02
#define FHR_WILD  0x04
#define FHR_LEFT  0x08
#define FHR_RIGHT 0x10


#define XRM_LOWER 0x01
#define XRM_UPPER 0x02
#define XRM_LEFT  0x04
#define XRM_RIGHT 0x08
#define XRM_WILD  0x10
#define XRM_MVBLE 0x20
#define XRM_LINK  0x40
#define XRM_ENARC 0x80
#define XRM_GAMMA 0x0100

#define XRM_UW  (XRM_UPPER | XRM_WILD)
#define XRM_LW  (XRM_LOWER | XRM_WILD)
#define XRM_ANY (XRM_LW | XRM_UW)

#define XR_MERITS {                                                  \
                               XRM_LINK, /* X_NOCODE 0x00 No code - must be NULL. */ \
                               XRM_LINK, /* X_FF       1 Large space letter break */ \
                               XRM_LINK, /* X_ZZZ      2 Normal break             */ \
                               XRM_LINK, /* X_ZZ       3 Break covered by crossing*/ \
                               XRM_LINK, /* X_Z        4 Break g with left move   */ \
                               XRM_LINK, /* X_ZN       5 Artificialy made pseudo  */ \
                                                                                     \
                              XRM_UPPER, /* X_IU_F     6 Forward maximum          */ \
                              XRM_UPPER, /* X_UU_F     7 Forward upper arc        */ \
                              XRM_UPPER, /* X_UUC_F    8 Forward upper circle arc */ \
                              XRM_UPPER, /* X_UUL_F    9 Forward upper arc with le*/ \
                  XRM_ENARC | XRM_UPPER, /* X_UUR_F   10 Forward upper arc with ri*/ \
                              XRM_UPPER, /* X_IU_BEG  11 Single max (in the beginn*/ \
                              XRM_UPPER, /* X_IU_STK  12 Stick up (up-down move in*/ \
                                                                                     \
                              XRM_UPPER, /* X_IU_B    13 Backward maximum         */ \
                              XRM_UPPER, /* X_UU_B    14 Backward upper arc       */ \
                              XRM_UPPER, /* X_UUC_B   15 Backward upper circle arc*/ \
                  XRM_ENARC | XRM_UPPER, /* X_UUL_B   16 Backward upper arc with l*/ \
                              XRM_UPPER, /* X_UUR_B   17 Backward upper arc with r*/ \
                              XRM_UPPER, /* X_IU_END  18 Single max (in the end)  */ \
                                                                                     \
                              XRM_LOWER, /* X_ID_F    19 Forward minimum          */ \
                              XRM_LOWER, /* X_UD_F    20 Forward lower arc        */ \
                              XRM_LOWER, /* X_UDC_F   21 Forward lower circle arc */ \
                              XRM_LOWER, /* X_UDL_F   22 Forward lower arc with le*/ \
                  XRM_ENARC | XRM_LOWER, /* X_UDR_F   23 Forward lower arc with ri*/ \
                              XRM_LOWER, /* X_ID_END  24 Single min (in the end)  */ \
                              XRM_LOWER, /* X_ID_STK  25 Stick down (down-up move */ \
                                                                                     \
                              XRM_LOWER, /* X_ID_B    26 Backward minimum         */ \
                              XRM_LOWER, /* X_UD_B    27 Backward upper arc       */ \
                              XRM_LOWER, /* X_UDC_B   28 Backward upper circle arc*/ \
                  XRM_ENARC | XRM_LOWER, /* X_UDL_B   29 Backward upper arc with l*/ \
                              XRM_LOWER, /* X_UDR_B   30 Backward upper arc with r*/ \
                              XRM_LOWER, /* X_ID_BEG  31 Single min (in the beginn*/ \
                                                                                     \
                  XRM_RIGHT | XRM_UPPER, /* X_DU_R    32 Double move upper with ri*/ \
                  XRM_RIGHT | XRM_UPPER, /* X_CU_R    33 Circle upper with right e*/ \
                  XRM_LEFT  | XRM_UPPER, /* X_CU_L    34 Circle upper with left en*/ \
                  XRM_LEFT  | XRM_UPPER, /* X_DU_L    35 Double move down with lef*/ \
                  XRM_RIGHT | XRM_LOWER, /* X_DD_R    36 Double move down  with ri*/ \
                  XRM_RIGHT | XRM_LOWER, /* X_CD_R    37 Circle down  with right e*/ \
                  XRM_LEFT  | XRM_LOWER, /* X_CD_L    38 Circle down  with left en*/ \
                  XRM_LEFT  | XRM_LOWER, /* X_DD_L    39 Double move down with lef*/ \
                                                                                     \
                  XRM_GAMMA | XRM_UPPER, /* X_BGU     40 Big gamma up             */ \
                  XRM_GAMMA | XRM_UPPER, /* X_SGU     41 Small gamma up           */ \
                  XRM_GAMMA | XRM_LOWER, /* SX_SGD    42 mall gamma down          */ \
                  XRM_GAMMA | XRM_LOWER, /* X_BGD     43 Big   gamma down         */ \
                                                                                     \
                  XRM_LEFT  | XRM_WILD,  /* X_GL      44 Gamma left               */ \
                              XRM_LEFT,  /* X_AL      45 Angle left               */ \
                  XRM_WILD  | XRM_LEFT,  /* X_BL      46 Braket left              */ \
                  XRM_WILD  | XRM_RIGHT, /* X_BR      47 Braket right             */ \
                              XRM_RIGHT, /* X_AR      48 Angle right              */ \
                  XRM_RIGHT | XRM_WILD,  /* X_GR      49 Gamma right              */ \
                                    0,   /* X_TS      50 Type 'S' X extrema       */ \
                                    0,   /* X_TZ      51 Type 'Z' X extrema       */ \
                                                                                     \
                              XRM_MVBLE, /* X_ST      52 Separate point           */ \
                                    0,   /* X_DF      53 Defis                    */ \
                              XRM_MVBLE, /* X_XT      54 Crossing defis           */ \
                                                                                     \
                                                                                     \
                                    0,   /* X_VS      55 Vertical Stroke          */ \
                                    0,   /* X_SS      56 Slash stroke             */ \
                                    0,   /* X_BSS     57 Back Slash Stroke        */ \
                              XRM_MVBLE, /* X_XT_ST   58 Non-crossing defis       */ \
                              XRM_MVBLE, /* X_UMLAUT  59 Umlaut                   */ \
                              XRM_UPPER, /* X_AN_UR   60 Angle-like upper-right co*/ \
                                    0,   /* X_AN_UL   61 Angle-like upper-left cor*/ \
                                    0,   /* X_CEDILLA 62 Cedilla                  */ \
                                    0                                                \
                                    }

/* ---------------- STRUCTURES ----------------------------------------------- */

typedef struct {
                _INT stp;
                _INT enp;
                _INT blp;
                _INT stx;
                _INT sty;
                _INT enx;
                _INT eny;
               } vect_type, _PTR p_vect_type;

/* ---------------- PROTO ---------------------------------------------------- */

_INT FillXrFeatures(p_xrdata_type xrdata, low_type _PTR low_data);

_INT GetCurSlope(_INT num_points, p_PS_point_type trace);

_INT FillSHR(_INT slope, p_xrdata_type xrdata, low_type _PTR low_data);
_INT FillAH(p_xrdata_type xrdata, low_type _PTR low_data);
_INT FillOrients(_INT slope, p_xrdata_type xrdata, low_type _PTR low_data);

_INT GetAngle(_INT dx, _INT dy);
_INT GetVect(_INT dir, p_vect_type vect, _TRACE trace, _INT trace_len, _INT base);
_INT GetBlp(_INT dir, p_vect_type vect, _INT xrn, p_xrdata_type xrdata);

#endif //XR_ATTR_H_INCLUDED
/************************************************************************** */
/*       End of all                                                         */
/************************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\xrword_p.h ===
/* ************************************************************************* */
/* *           Debug printing include for XRW modules                      * */
/* ************************************************************************* */

#ifndef XRWORD_P_INCLUDED
#define XRWORD_P_INCLUDED

#if PG_DEBUG  || PG_DEBUG_MAC
/* ============================================================ */

  #if PG_DEBUG_MAC
    #include "xrw_deb.h"
  #else
    #include "pg_debug.h"
  #endif /* PG_DEBUG_MAC */


#define printx printw
#define printfw printw

/* ---------------------- XrWordS -------------------------------- */

#define XRW_UTIL_1                                                        \
                                                                          \
  if (look != NOPRINT)                                                           \
    printfw("\n XRWS Alloc: %ld bytes allocated for XRWS\n", size);       \


#define XRWS_S                                                            \
                                                                          \

#define XRWS_0


#define XRWS_1                                                            \
                                                                          \
  if (mpr > -10)                                                          \
   {                                                                      \
    printx("\n");                                                         \
    if (!xrcm->inverse) gprintf(76,24,2,0,"D%2d", lstep);        \
      else gprintf(76,24,4,0,"I%2d",lstep);                      \
   }                                                                      \
  if (look == VOCWPRINT) printx("\n\n  Wordcut %2d, B.A. %d ", lstep, xrcm->cur_ba); \


#define XRWS_2

#define XRWS_3                                                            \
                                                                          \
  if (look == VOCWPRINT)                                                  \
   {                                                                      \
    _SHORT i;                                                             \
    _UCHAR word[w_lim];                                                   \
                                                                          \
    for (i = 0; i < clp.tag_size && (*clp.out_tags)[i].weight != 0; i++)  \
     {                                                                    \
      _INT id = 0;                                                        \
                                                                          \
      memmove(word, (*clp.out_tags)[i].word, (clp.lstep+1));              \
      word[(clp.lstep+1)] = 0;                                            \
      if (xrcm->inverse) strrev((p_CHAR)word);                            \
                                                                          \
      if ((*clp.out_tags)[i].l_sym.sd[XRWD_N_VOC].l_status) id |= XRWD_SRCID_VOC; \
      if ((*clp.out_tags)[i].l_sym.sd[XRWD_N_TR ].l_status) id |= XRWD_SRCID_TR;  \
      if ((*clp.out_tags)[i].l_sym.sd[XRWD_N_CS ].l_status) id |= XRWD_SRCID_CS;  \
      if ((*clp.out_tags)[i].l_sym.sd[XRWD_N_LD ].l_status) id |= XRWD_SRCID_LD;  \
      if ((*clp.out_tags)[i].l_sym.sd[XRWD_N_PT ].l_status) id |= XRWD_SRCID_SPT; \
      printfw("\n%6s dctlv %2x w: %3d cut %2d penl: %2d pw: %2d bc: %2d p: %d:%d:%d:%d:%d srcs %2x:%08x",\
               (p_CHAR)word,                                              \
               id,                                                        \
              (*clp.out_tags)[i].weight,                                  \
              (*clp.out_tags)[i].trace_pos,                               \
              (_INT)(*clp.out_tags)[i].penalty,                           \
              (_INT)(*clp.out_tags)[i].ppd_penalty,                       \
              (_INT)(*clp.out_tags)[i].best_count,                        \
              (*clp.out_tags)[i].l_sym.sd[XRWD_N_VOC].penalty,            \
              (*clp.out_tags)[i].l_sym.sd[XRWD_N_TR ].penalty,            \
              (*clp.out_tags)[i].l_sym.sd[XRWD_N_CS ].penalty,            \
              (*clp.out_tags)[i].l_sym.sd[XRWD_N_LD ].penalty,            \
              (*clp.out_tags)[i].l_sym.sd[XRWD_N_PT ].penalty,            \
              (*clp.out_tags)[i].l_sym.sources,                           \
              ~(*clp.out_tags)[i].sym_srcs_mask                           \
              );                                                          \
     }                                                                    \
    printfw("\n");                                                        \
   }

#define XRWS_4                                                            \
                                                                          \
  if (xrcm->inverse) {if (look != NOPRINT) gprintf(76,24,2,0,"Done");}    \
   else {if(look == VOCWPRINT) printx("\n\n *** Reverse pass ***\n\n");}  \

#define XRWS_5                                                            \
                                                                          \
  DbgFillAWData(answr);                                                   \
                                                                          \


/* ---------------------- XrMc ------------------------------------------ */

#define  XRCM_ALLOC_1                                                     \
                                                                          \
  if (look != NOPRINT)                                                    \
    printfw("\n XrcmAlloc: %ld bytes allocated for XRMC\n", alloc_size);  \

#define COUNT_SYM_1                                                       \
                                                                          \
  if (look == MATRPRINT)                                                  \
   {                                                                      \
    printfw("\n  ");                                                      \
    printfw("\n-------- CountSym: Sym: %c, Var#: %d  ---------", xrcm->sym, v);          \
    printfw("\n  ");                                                      \
   }                                                                      \


#define COUNT_VAR_1                                                       \
                                                                          \
  if (look == MATRPRINT)                                                  \
   {                                                                      \
    _INT       i;                                                         \
                                                                          \
    printfw("\n  ");                                                      \
    for (i = xrcm->src_st;  i < xrcm->src_end + DTI_XR_SIZE && i < xrcm->xrinp_len; i ++) \
     {                                                                    \
      printfw("%3d", i); put_xr((*xrcm->xrinp)[i], 0);                    \
     }                                                                    \
   }                                                                      \

#define COUNT_VAR_2                                                       \
                                                                          \
  if (look == MATRPRINT)                                                  \
   {                                                                      \
    xrinp_type xrv;                                                       \
    _INT       i;                                                         \
                                                                          \
    xrv.type   = (_UCHAR)((xrcm->xrp->type >> 5) | ((xrcm->xrp->penl >> 1) & 0xF8));   \
    xrv.height = (_UCHAR)(1);             \
    xrv.attrib = xrcm->xrp->attr;                                         \
    xrv.penalty= (_UCHAR)(xrcm->xrp->penl & 0x0F);                        \
    xrv.shift  = (_UCHAR)(xrcm->xrp->xsc);                                \
    xrv.depth  = (_UCHAR)(xrcm->xrp->xzc);                                \
    xrv.orient = (_UCHAR)(xrcm->xrp->xoc);                                \
    printfw("\n");                                                        \
    put_xr(xrv, 0);                                                       \
    printfw(" ");                                                         \
    for (i = xrcm->src_st;  i < xrcm->inp_end; i ++)                      \
     {                                                                    \
      _INT col = 7;                                                       \
                                                                          \
      if (xrcm->xrp_htr) col = xrcm->xrp_htr->vects[i - xrcm->xrp_htr->st];\
      if (col == 0) col = 1;                                              \
      if (xrcm->p_hlayout)                                                \
       {                                                                  \
        p_letlayout_hdr_type  plsym = xrcm->p_hlayout->llhs[xrcm->cur_let_num];\
        _INT on_tr = (plsym->realsym == xrcm->sym);                       \
                                                                          \
        if (plsym->var_num != xrcm->cur_var_num) on_tr = 0;               \
                                                                          \
        if (on_tr)                                                        \
         {                                                                \
          _INT t;                                                         \
                                                                          \
          for (t = 0; t < plsym->len; t ++)                               \
           {                                                              \
            if (plsym->trp[t].xrp_num == n && plsym->trp[t].inp_pos == i) \
             /*col += 8; */ col = 14;                                     \
           }                                                              \
         }                                                                \
       }                                                                  \
                                                                          \
      if (i >= xrcm->inp_start) gprintf(0,0,col,0," %3d", (*xrcm->out_line)[i]); \
       else printfw("    ");                                              \
     }                                                                    \
   }                                                                      \


//      if (i >= xrcm->inp_start) printfw(" %3d", (*xrcm->out_line)[i]);    \
//       else printfw("    ");                                              \


#define MERGE_VAR_RES_1                                                   \
                                                                          \
  if (look == MATRPRINT)                                                  \
   {                                                                      \
    printfw("\n\n ======= MergeVarRes ==============================", (_INT)xrcm->wwc, (_INT)xrcm->wwc_pos);   \
    printfw("\n Vexes: ");                                                      \
   }                                                                      \


#define MERGE_VAR_RES_2                                                   \
                                                                          \
//  if (look == MATRPRINT)                                                  \
//   {                                                                      \
//    if (vste[v].end == 0) printfw("V%d: X ", v);                                  \
//   }                                                                      \


#define MERGE_VAR_RES_3                                                   \
                                                                          \
  if (look == MATRPRINT)                                                  \
   {                                                                      \
    printfw("V%d: %d, ", v, vex);                                           \
   }                                                                      \



#define MERGE_VAR_RES_4                                                   \
                                                                          \
  if (look == MATRPRINT)                                                  \
   {                                                                      \
    _INT       i;                                                         \
                                                                          \
    printfw("\n  ");                                                      \
    printfw("\n  ");                                                      \
    for (i = xrcm->v_start; i < xrcm->v_end; i ++)                        \
     {                                                                    \
      printfw("%3d", i); put_xr((*xrcm->xrinp)[i], 0);                    \
     }                                                                    \
    printfw("\n  ");                                                      \
    for (i = xrcm->v_start; i < xrcm->v_end; i ++)                        \
     {                                                                    \
      _INT col = 7;                                                       \
                                                                          \
      if (xrcm->sym_htr) col = xrcm->sym_htr->merge_vect[i] + 1;          \
      if (col > 15) col = 7;                                              \
      if (xrcm->p_hlayout)                                                \
       {                                                                  \
        p_letlayout_hdr_type  plsym = xrcm->p_hlayout->llhs[xrcm->cur_let_num];\
        _INT on_tr = (plsym->realsym == xrcm->word[xrcm->cur_let_num]) ? 1 : 0;\
                                                                          \
        if (on_tr)                                                        \
         {                                                                \
          if (plsym->trp[plsym->len-1].inp_pos == i)                    \
             /*col += 8; */ col = 14;                                     \
         }                                                                \
       }                                                                  \
                                                                          \
      gprintf(0,0,col,0," %3d", (*xrcm->s_out_line)[i]);                  \
     }                                                                    \
    printfw("\n ======= MergeVarRes: wwc: %d, wwc_pos: %d ========", (_INT)xrcm->wwc, (_INT)xrcm->wwc_pos);   \
   }                                                                      \

#define COUNT_LETTER_1                                                    \
                                                                          \
  if (look == MATRPRINT)                                                  \
   {                                                                      \
    _INT       i;                                                         \
                                                                          \
    printfw("\n\n ******** CoutLetterRes: wwc: %d, wwc_pos: %d, realsym %c ********", (_INT)xrcm->wwc, (_INT)xrcm->wwc_pos, xrcm->realsym);   \
    printfw("\n  ");                                                      \
    printfw("\n  ");                                                      \
    for (i = xrcm->v_start; i < xrcm->v_end; i ++)                        \
     {                                                                    \
      printfw("%3d", i); put_xr((*xrcm->xrinp)[i], 0);                    \
     }                                                                    \
    printfw("\n  ");                                                      \
    for (i = xrcm->v_start; i < xrcm->v_end; i ++)                        \
     {                                                                    \
      _INT col = 7;                                                       \
                                                                          \
      if (xrcm->let_htr) col = xrcm->let_htr->merge_vect[i] + 2;          \
      if (col > 15) col = 7;                                              \
      if (xrcm->p_hlayout)                                                \
       {                                                                  \
        p_letlayout_hdr_type  plsym = xrcm->p_hlayout->llhs[xrcm->cur_let_num];\
        _INT on_tr = (plsym->realsym == xrcm->word[xrcm->cur_let_num]) ? 1 : 0;\
                                                                          \
        if (on_tr)                                                        \
         {                                                                \
          if (plsym->trp[plsym->len-1].inp_pos == i)                      \
             /*col += 8; */ col = 14;                                     \
         }                                                                \
       }                                                                  \
      gprintf(0,0,col,0," %3d", (*xrcm->s_out_line)[i]);                  \
     }                                                                    \
   }                                                                      \


//   gprintf(0,0,j,0,"\nAlt %d", sl); \


#else  /* = !PG_DEBUG =================================================== */

#define XRW_UTIL_1

#define XRWS_S
#define XRWS_0
#define XRWS_1
#define XRWS_2
#define XRWS_3
#define XRWS_4
#define XRWS_5
#define XRWS_6

#define XRCM_ALLOC_1
#define COUNT_SYM_1
#define COUNT_VAR_1
#define COUNT_VAR_2
#define MERGE_VAR_RES_1
#define MERGE_VAR_RES_2
#define MERGE_VAR_RES_3
#define MERGE_VAR_RES_4
#define COUNT_LETTER_1


#endif

#endif
/* ************************************************************************* */
/* *           END OF ALLLLL                                               * */
/* ************************************************************************* */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\zctype.h ===
/**************************************************************************
*
*  HWRCTYPE.H                             Created: 16 Jan 1994.
*
*  Here are definitions for Upper-Lower case conversions and ASCII verifications
**************************************************************************/

#ifndef HWR_CTYPE_DEFINED        /*  See #endif in the end of file.  */
#define HWR_CTYPE_DEFINED

/*******************************************************************/

//#define HALF_TABLE 1


//#ifdef __cplusplus
//extern "C" {            /* Assume C declarations for C++ */
//#endif  /* __cplusplus */

int   IsUpper (int n);
int   IsLower (int n);
int   IsPunct (int n);
int   IsAlnum (int n);
int   IsAlpha (int n);
int   IsDigit (int n);

int   ToUpper (int n);
int   ToLower (int n);
char* StrLwr  (char * str);
char* StrUpr (char * str);

//#ifdef __cplusplus
//}                       /* End of extern "C" { */
//#endif  /* __cplusplus */

#endif  /*  HWR_CTYPE_DEFINED  */
/* ************************************************************************** */
/* *           End of All                                                   * */
/* ************************************************************************** */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\angle.cpp ===
#ifndef LSTRIP

#include "hwr_sys.h"
#include "ams_mg.h"                             /*                           */
#include "lowlevel.h"                           /*                           */
#include "lk_code.h"                            /*                           */
#include "def.h"                                /*                           */

#include "calcmacr.h"
#include "low_dbg.h"
                                                /*                           */
#define BASE_ANGLE   4                          /* base for angle measure    */
#define BASE_DIST    6                          /* base for calculaton of    */
                                                /*          hord             */
#define TG_30        (58)
#define TG_45        (100)
#define TG_75        (373)                      /* multiply by 100           */

#if BASE_ANGLE>BASE_DIST                        /*                           */
              #define BASE BASE_ANGLE           /*                           */
#else                                           /*  BASE= MAX( BASE_ANGLE,   */
              #define BASE BASE_DIST            /*             BASE_DIST  )  */
#endif                                          /*                           */
                                                /*                           */
#ifdef  FORMULA
  #define COS_ANGLE   (-60)                     /* level cos of right angles */
  #define LEVEL_DIST  750                       /* level of length hord      */
  #define COS_ANGLE_OLD   (-60)                     /* level cos of right angles */
  #define LEVEL_DIST_OLD  750                       /* level of length hord      */
#else
  #define COS_ANGLE   (-60)                        /* level cos of right angles */
  #define LEVEL_DIST  1000                        /* level of length hord      */
  #define COS_ANGLE_OLD   (0)                        /* level cos of right angles */
  #define LEVEL_DIST_OLD  450                        /* level of length hord      */
#endif
                                                /*     if hord less level ,  */
                                                /*     then to measure angle */
_SHORT store_angle( low_type _PTR D,
                    _SHORT num_max_cos, _SHORT base,
                    _SHORT ibeg, _SHORT iend,
                    /*_SHORT dist,*/ _SHORT cos     );
/*****************************************************************************/
/*         This subroutine finds all angles on traject                       */
/*****************************************************************************/
_SHORT angl(low_type _PTR D)                /*                               */
                                            /*                               */
{                                           /*                               */
  _SHORT i,j,                               /* work indexes                  */
      _PTR flag_wrk,                        /* item address (in flag_array)  */
      _PTR flag_end,                        /* address of end of flag_array  */
      dx, dy,                               /* (dx,dy)-vector of hord        */
      dist,                                 /* square of hord length         */
      flag_angle,                           /* flag: "inside of right angle" */
      flag_dist,                            /* flag: "small hord"            */
      cos,                                  /* cos angle from point to hord  */
      beg,                                  /* index of beginning angle zone */
      max_cos = 0,                          /* cos vertex of angle           */
      num_max_cos=0;                        /* its index                     */
                                            /*                               */
  SPECL near *cur;                          /*  reference to work SPECL item */
  p_SHORT  buf;  /*CHE*/
                                            /*********************************/

  if ( D->ii < 2*BASE+10) return SUCCESS;       /* too little points         */

  DBG_CHK_err_msg(   D->buffers[3].nSize < 2*BASE
                  || D->buffers[3].nSize < D->ii+1,
                  "angl: BAD BufSize");

  buf = D->buffers[3].ptr;  /* CHE: This is the only free buffer at that time! */
  HWRMemSet((p_VOID)buf, 0, D->buffers[3].nSize*sizeof(_SHORT));
                                                /*                           */
  cur = D->specl ;                 /*                           */
  while (cur != _NULL)                          /* loop for prohibit finding */
     { switch ( cur->mark )                     /*    a angle in a stroke    */
           { case STROKE:                       /*               and a dot   */
             case DOT   : for (i= cur->ibeg; i<=cur->iend; i++)
                            buf[i]= ALEF;
           }                                    /*                           */
       cur=cur->next;                           /*                           */
     }                                          /*                           */
                                                /*                           */
  flag_wrk= buf;                      /* initialization item addres*/
  flag_end= buf + D->ii;              /* address of end of array   */
  for (i=0;      i<=2*BASE; i++) *(flag_end--)= ALEF;  /* mark low bound     */
  for (i=0;      i<=2*BASE; i++) *(flag_wrk++)= ALEF;  /* and high bound     */
                                                /*                           */
  flag_wrk= buf +BASE;                          /* initialization item addres*/
  flag_end= buf + D->ii -BASE;                  /* address of end of array   */
  i= BASE;                                      /*                           */
  for (; flag_wrk <= flag_end; flag_wrk++,i++)  /* let's go along the traject*/
      if (D->y[i] == BREAK)                     /* if there is a break,      */
         { *flag_wrk= ALEF;                     /* then write  in its region */
            for (j=1; j<=BASE; j++)             /* a vary big number ALEF    */
                {  *(flag_wrk +j)= ALEF;        /*                           */
                   *(flag_wrk -j)= ALEF;        /*                           */
                 }                              /*                           */
          }                                     /*                           */
  beg=0;                                        /*                           */
  flag_dist=0;   flag_angle=0;                  /* all flags turn off        */
  flag_wrk= buf;                                /* initialization item addres*/
  i=0;                                          /* the same for index        */
  for (; flag_wrk <= flag_end; flag_wrk++, i++) /* let's go along the traject*/
      { if ( (dist=*flag_wrk) !=ALEF)           /* if near break, then       */
          { dx= D->x[i+BASE_DIST]-D->x[i-BASE_DIST];/*calculate vector (dx,dy)*/
            dy= D->y[i+BASE_DIST]-D->y[i-BASE_DIST];/*of hord closed the angle*/
            dist= dx*dx+dy*dy;                  /* storing length of the hord*/
            *flag_wrk=dist;                     /* for debugging             */
           }                                    /*                           */
        if (flag_dist == 0)                     /* out of little hord zone?  */
           { if (dist > LEVEL_DIST) continue;   /* yes,and don't entered into*/
             flag_dist=1;                       /* enter into zone, set flag */
           }                                    /*                           */
        if (flag_dist == 1)                     /* is flag =little hord zone?*/
           { if (dist > LEVEL_DIST)             /* is it now  out of zone?   */
                { flag_dist=0;                  /* yes, set of flag          */
                  j=beg;  beg=0;                /* and clear beg             */
                  if (flag_angle == 0) continue;/* if out of right angle zone*/
          if ( store_angle(D,           /* store all information     */
                                   num_max_cos, /*       about this angle    */
                                   BASE_ANGLE,  /*                           */
                                   j,i-1,/*dist,*/max_cos)          /*                           */
                       != SUCCESS)              /*                           */
                       return UNSUCCESS;        /*                           */
                  flag_angle=0;                 /* set of flag "right angle" */
                }                               /*                           */
             else                               /* if into right angle zone  */
                { cos= (_SHORT)cos_vect(i,i-BASE_ANGLE,   /* calculate cos   */
                                     i,i+BASE_ANGLE,      /* of angle hord   */
                                     D->x,D->y);          /*                 */
                  *flag_wrk=cos-100;                      /* for debugging   */
                  if (flag_angle == 0)          /* out of right angle zone?  */
                     { if (cos < COS_ANGLE) continue; /* yes, and don't enter*/
                       flag_angle= 1;           /* enter into zone, set flag */
                       if (beg == 0) beg=i;     /* store index of zone beg.  */
                       max_cos= cos;            /* set it  for finding max   */
                       num_max_cos=i;           /*                           */
                     }                          /*                           */
                  else                          /* now into right angle zone */
                     { if (cos > max_cos)             /*                     */
                                 { max_cos= cos;      /*                     */
                                   num_max_cos= i;    /*                     */
                                 }                    /*                     */
                       if (cos >=COS_ANGLE) continue; /* and don't exit      */
                       flag_angle= 0;                 /* end of zone, flag of*/
               if ( store_angle( D,      /* store all inform.   */
                                        num_max_cos,  /* about this angle    */
                                        BASE_ANGLE,   /*                           */
                                        beg,i-1,/*dist,*/max_cos)                           /*                     */
                            != SUCCESS)               /*                     */
                            return UNSUCCESS;         /*                     */
                       beg= 0;                  /*                           */
                     }                          /*                           */
                }                               /*                           */
           }                                    /*                           */
      }                                         /*                           */
                                                /*                           */
  return SUCCESS;                               /*                           */
}                                               /*                           */
/*****************************************************************************/
/*         This subroutine store all information about one angle             */
/*****************************************************************************/
_SHORT store_angle(low_type _PTR D,  /*                           */
                _SHORT top, _SHORT base,           /* vertex and base of angle  */
                _SHORT ibeg, _SHORT iend,
    /*_SHORT dist,*/ _SHORT cos )          /*                           */
{ _SHORT x0,y0,p=1;                                 /*                           */
  _SHORT ang_dir;  /*FORMULA*/
                                                /*                           */
 if (ibeg == iend) return SUCCESS;              /*                           */
                                                /*                           */
 x0=(D->x[top+base]+D->x[top-base])/2-D->x[top];/* vector of angle direction */
 y0=(D->y[top+base]+D->y[top-base])/2-D->y[top];/*                           */

 ang_dir = angle_direction(x0,y0,D->slope); /*FORMULA*/


 if  (   ibeg+1 >= iend
      && (   ang_dir == _ANGLE_UP_
          || ang_dir == _ANGLE_DOWN_
         )
     )
   return  SUCCESS;

/*  if((cos >= COS_ANGLE_OLD) && (dist<= LEVEL_DIST_OLD)) */
    if(cos >= COS_ANGLE_OLD)
      p=0;                       /* level of length hord      */
  return ( Mark( D,                       /*                           */
                 (_UCHAR)ANGLE, (_UCHAR)0, (_UCHAR)p,
                 (_UCHAR)(ang_dir ),
                       ibeg, iend, top, UNDEF )
         );                                     /*                           */
}                                               /*                           */
#undef BASE_ANGLE                               /*                           */
#undef BASE_DIST                                /*                           */
                                                /*                           */
/*****************************************************************************/
/*         This subroutine calculate any angle direction                     */
/*****************************************************************************/
_SHORT angle_direction(_SHORT x0, _SHORT y0,    /* vector of angle direction */
                       _SHORT slope)            /* script slope              */
{ _LONG pf, pb;                                 /*                           */
  _SHORT  dir;                                  /*                           */
                                                /* scalar multiplication    */
#if (0)
 pf= (_LONG)(TG_30-slope)*(_LONG)x0 + (_LONG)(TG_30+slope)*(_LONG)y0;
 pb= (_LONG)(TG_30+slope)*(_LONG)x0 + (_LONG)(slope-TG_30)*(_LONG)y0;
#else
 slope = slope;                                 /* 9-6-94-ecc: eliminate unused-var warning */
 pf= (_LONG)(TG_75)*(_LONG)x0/100 + (_LONG)y0;
 pb= (_LONG)(TG_75)*(_LONG)x0/100 - (_LONG)y0;
#endif                                          /* on which quadrant ?       */
 if (pf > 0) { if (pb > 0) dir=_ANGLE_LEFT_;    /* pf > 0      pd > 0        */
               else        dir=_ANGLE_UP_;      /* pf > 0      pd < 0        */
             }                                  /*                           */
 else        { if (pb > 0) dir=_ANGLE_DOWN_;    /* pf < 0      pd > 0        */
               else        dir=_ANGLE_RIGHT_;   /* pf < 0      pd < 0        */
             }                                  /*                           */
 return dir;                                    /*                           */
}                                               /*                           */


#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\inc\xr_names.h ===
/****************************************************************************/
/* This header contains the names of xr_elements. These names are shareble  */
/* between low level and high level (and other stuff too).                  */
/****************************************************************************/

#ifndef XR_NAMES_INCLUDED
#define XR_NAMES_INCLUDED

#include "ams_mg.h"

/*************************************************************************/
/*          XR-names definition as appear in DTE                         */
/*************************************************************************/

#define X_NOCODE 0x00       /* No code - must be NULL.                   */

#define X_FF          1     /* Large space letter break                  */
#define X_ZZZ         2     /* Normal break                              */
#define X_ZZ          3     /* Break covered by crossing                 */
#define X_Z           4     /* Break covered by crossing with left move  */
#define X_ZN          5     /* Artificialy made pseudo break             */

#define X_IU_F        6     /* Forward maximum                           */
#define X_UU_F        7     /* Forward upper arc                         */
#define X_UUC_F       8     /* Forward upper circle arc                  */
#define X_UUL_F       9     /* Forward upper arc with left end           */
#define X_UUR_F      10     /* Forward upper arc with right end          */
#define X_IU_BEG     11     /* Single max (in the beginning)             */
#define X_IU_STK     12     /* Stick up (up-down move in crossing)       */

#define X_IU_B       13     /* Backward maximum                          */
#define X_UU_B       14     /* Backward upper arc                        */
#define X_UUC_B      15     /* Backward upper circle arc                 */
#define X_UUL_B      16     /* Backward upper arc with left end          */
#define X_UUR_B      17     /* Backward upper arc with right end         */
#define X_IU_END     18     /* Single max (in the end)                   */

#define X_ID_F       19     /* Forward minimum                           */
#define X_UD_F       20     /* Forward lower arc                         */
#define X_UDC_F      21     /* Forward lower circle arc                  */
#define X_UDL_F      22     /* Forward lower arc with left end           */
#define X_UDR_F      23     /* Forward lower arc with right end          */
#define X_ID_END     24     /* Single min (in the end)                   */
#define X_ID_STK     25     /* Stick down (down-up move in crossing)     */

#define X_ID_B       26     /* Backward minimum                          */
#define X_UD_B       27     /* Backward upper arc                        */
#define X_UDC_B      28     /* Backward upper circle arc                 */
#define X_UDL_B      29     /* Backward upper arc with left end          */
#define X_UDR_B      30     /* Backward upper arc with right end         */
#define X_ID_BEG     31     /* Single min (in the beginning)             */

#define X_DU_R       32     /* Double move upper with right end          */
#define X_CU_R       33     /* Circle upper with right end               */
#define X_CU_L       34     /* Circle upper with left end                */
#define X_DU_L       35     /* Double move down with left end            */
#define X_DD_R       36     /* Double move down  with right end          */
#define X_CD_R       37     /* Circle down  with right end               */
#define X_CD_L       38     /* Circle down  with left end                */
#define X_DD_L       39     /* Double move down with left end            */

#define X_BGU        40     /* Big gamma up                              */
#define X_SGU        41     /* Small gamma up                            */
#define X_SGD        42     /* Small gamma down                          */
#define X_BGD        43     /* Big   gamma down                          */

#define X_GL         44     /* Gamma left                                */
#define X_AL         45     /* Angle left                                */
#define X_BL         46     /* Braket left                               */
#define X_BR         47     /* Braket right                              */
#define X_AR         48     /* Angle right                               */
#define X_GR         49     /* Gamma right                               */
#define X_TS         50     /* Type 'S' X extrema                        */
#define X_TZ         51     /* Type 'Z' X extrema                        */

#define X_ST         52     /* Separate point                            */
#define X_DF         53     /* Defis                                     */
#define X_XT         54     /* Crossing defis                            */


#define X_VS         55     /* Vertical Stroke                           */
#define X_SS         56     /* Slash stroke                              */

//CHE experiment:
#define  USE_BSS_ANYWAY   1

#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
#define X_BSS        57     /* Back Slash Stroke                         */
#endif /* FOR_GERMAN... */

#define X_XT_ST      58     /* Non-crossing defis                        */

#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
#define X_UMLAUT     59     /* Umlaut                                    */
#endif /* FOR_GERMAN... */

#define X_AN_UR      60     /* Angle-like upper-right corner.            */
#define X_AN_UL      61     /* Angle-like upper-left corner.             */
#if defined(FOR_FRENCH) || defined (FOR_INTERNATIONAL)
#define X_CEDILLA    62     /* Cedilla                                   */
#endif /* FOR_FRENCH */

//#define OVR_FLAG         0x10     /* Flags of Xr elements */
//#define XSTRICT_FLAG     0x20
//#define HSTRICT_FLAG     0x40
#define TAIL_FLAG        0x80

#define END_LETTER_FLAG  0x01
//#define X_SPECIAL_ZZ     0x02
#define X_RIGHT_KREST    0x02
#define END_WORD_FLAG    0x04

#define WS_SEGM_FLAGS    0x70     /* Here are marks allowing multiwording */
#define WS_SEGM_OFFS        4     /* Shift needed to get it as value */
#define WS_SEGM_NOSEG       0     /* Segmentation codes */
#define WS_SEGM_NOSP        1
#define WS_SEGM_HISEG       2

#define WSF_GET(x)    (((x) & WS_SEGM_FLAGS) >> WS_SEGM_OFFS)
#define WSF_SET(x, v) (x &= (_UCHAR)~(WS_SEGM_FLAGS), x |= (_UCHAR)(((v) & (WS_SEGM_FLAGS>>WS_SEGM_OFFS)) << WS_SEGM_OFFS))

#define XR_LINK          X_FF     /* Default between-letter break */
#define XR_SMALL_LINK    X_ZZZ    /* Small clear break */
#define XR_XR_LINK       X_ZZ     /* Break covered by crossing                 */
#define XR_XL_LINK       X_Z      /* Break covered by crossing with left move  */
#define XR_NOBR_LINK     X_ZN     /* Artificialy made pseudo break             */

#define _US1_  1                  /* super uplinear 1                  */
#define _US2_  2                  /* super uplinear 2                  */
#define _UE1_  3                  /*       uplinear 1                  */
#define _UE2_  4                  /*       uplinear 2                  */
#define _UI1_  5                  /*       upper in line 1             */
#define _UI2_  6                  /*       upper in line 2             */
#define _MD_   7                  /*       middle in line              */
#define _DI1_  8                  /*       down in line  1             */
#define _DI2_  9                  /*       down in line  2             */
#define _DE1_  10                 /* underlinear 1                     */
#define _DE2_  11                 /* underlinear 2                     */
#define _DS1_  12                 /* super underlinear 1               */
#define _DS2_  13                 /* super underlinear 2               */

#define _umd_  ((_UCHAR)0x0f)     /* mask for heights                  */


#define DTE_H_CONVERSION 0, _US1_, _US2_, _UE1_, _UE2_, _UI1_, _UI2_,    \
                         _MD_, _DI1_, _DE1_, _DE2_, _DS1_, _DS2_, _MD_,  \
                         _UE1_, _DE2_, _DI2_, _UI2_, _UE1_, _DE2_, _MD_, \
                         _US2_, _UE1_, _DS1_, _MD_, _UI2_

#define H_LINK          _MD_
#define P_LINK            2

#define IS_XR_LINK(xr)      ((xr) == XR_LINK || (xr) == XR_XR_LINK || (xr) == XR_XL_LINK || (xr) == XR_SMALL_LINK || (xr) == XR_NOBR_LINK)
#define IS_CLEAR_LINK(xr)   ((xr) == XR_LINK || (xr) == XR_SMALL_LINK)
#define IS_CROSSED_LINK(xr) ((xr) == XR_XR_LINK || (xr) == XR_XL_LINK)


#define  HEIGHT_MASK          ((_UCHAR)0x0F)
#define  XSHIFT_MASK          ((_UCHAR)0xF0)

#define  LINK_OF(xrd_elem)       ((xrd_elem)->xr.depth)
//            { (xrd)->xr.sh = ((xrd)->xr.sh & HEIGHT_MASK) | (((value)<<4) & XSHIFT_MASK); }
#define  XASSIGN_HEIGHT(xrd,value)   \
            { (xrd)->xr.height = value; }
#define  XASSIGN_XLINK(xrd,value)   \
            { (LINK_OF(xrd))  = value; }

//_INT  is_xr_junk(_UCHAR xr); // From convert.h
//_INT  is_xr_dot(_UCHAR xr);
//_INT  is_xr_sp(_UCHAR xr);

_INT GetXrHT(p_xrd_el_type xrd_el);
_INT GetXrMovable(p_xrd_el_type xrd_el);
_INT IsXrLink(p_xrd_el_type xrd_el);
_INT IsEndedArc(p_xrd_el_type xrd_el);
_INT GetXrMetrics(p_xrd_el_type xrd_el);


#ifdef LSTRIP

    #define       PSEUDO_XR_DEF  53
    #define       PSEUDO_XR_MIN  6
    #define       PSEUDO_XR_MAX  19

#endif


#endif  /*  XR_NAMES_INCLUDED  */

/* ************************************************************************* */
/*        END  OF ALL                                                        */
/* ************************************************************************* */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\arcs.cpp ===
#ifndef LSTRIP
  
  #include  "hwr_sys.h"
  #include  "ams_mg.h"
  #include  "lowlevel.h"
  #include  "calcmacr.h"
  #include  "low_dbg.h"
  #include  "def.h"

  #if       PG_DEBUG
    #include  "pg_debug.h"
  #endif

  #include  "arcs.h"

 #define    L_DER_MIN         10
 #define    L_CR_ZER          14
 #define    L_DER_ZER         21
 #define    L_DER_MID         18

 /**************************************************************************/


  _BOOL     MeadUpperThen( low_type _PTR  pLowData ,
                           p_SPECL        pSpecl0  , p_SPECL pSpecl1 ) ;

  _BOOL     MinLeftThen( low_type _PTR  pLowData ,
                         p_SPECL        pSpecl0  , p_SPECL  pSpecl1  ) ;

  _INT      CrookCalc ( low_type _PTR  pLowData  , p_SHORT  pDer ,
                       _INT iBeg , _INT iEnd    ) ;

  _BOOL     ArcTurnsOK( low_type _PTR  pLowData ,  _ARC_TYPE  typeBordArc ,
                        _INT           iBegArc  ,  _INT       iEndArc     ) ;

  _BOOL     DownStepOK( low_type _PTR  pLowData      ,
                      p_SPECL          pSlashArcDown , p_SPECL  pEndGroup ) ;

 #ifdef     D_ARCS

  _BOOL     NoteArcData( p_ARC_CONTROL pArcControl ,
                         low_type _PTR low_data , p_ARC_DESCR ptmpArcData ) ;

  _VOID     DelArcElem( p_ARC_CONTROL pArcControl , _SHORT iDelElement ) ;

  _INT      Tan( _SHORT x1 , _SHORT y1 , _SHORT x2 , _SHORT y2 ) ;

 #define    NOSHIFT               0
 #define    SHIFT                 1

 #define    P_CR_MIN              20
 #define    P_CR_MAX              150
 #define    P1_A                  250
 #define    P2_A                  35


  _SHORT    ArcsKern( p_LowData low_data, p_ARC_CONTROL pArcControl,
                      _SHORT iInit , _SHORT iStop                    ) ;

 /**************************************************************************/

 #endif

  _BOOL  MeadUpperThen( low_type _PTR  pLowData ,
                        p_SPECL        pSpecl0  , p_SPECL pSpecl1 )
   {
      p_SHORT  yArr    = pLowData->y ;
      _SHORT   yM0 , yM1 ;

         yM0 = (_SHORT) MEAN_OF( (_LONG) ( *(yArr + pSpecl0->ibeg) ) ,
                                 (_LONG) ( *(yArr + pSpecl0->iend) ) ) ;
         yM1 = (_SHORT) MEAN_OF( (_LONG) ( *(yArr + pSpecl1->ibeg) ) ,
                                 (_LONG) ( *(yArr + pSpecl1->iend) ) ) ;

            if  ( yM0 < yM1 )
                return( _TRUE  );
            else
                return( _FALSE );
   }


 /**************************************************************************/

  _BOOL  MinLeftThen( low_type _PTR  pLowData ,
                      p_SPECL        pSpecl0  , p_SPECL pSpecl1 )
   {
      p_SHORT  xArr    = pLowData->x ;
      p_SHORT  yArr    = pLowData->y ;
       _INT    iMin0 , iMin1 ;

         iMin0 = ixMin ( pSpecl0->ibeg, pSpecl0->iend, xArr, yArr ) ;
         iMin1 = ixMin ( pSpecl1->ibeg, pSpecl1->iend, xArr, yArr ) ;

            if  ( xArr[iMin0] < xArr[iMin1] )
                return( _TRUE  );
            else
                return( _FALSE );
   }

 /**************************************************************************/


  _SHORT  SlashArcs( low_type _PTR  pLowData , _INT iBeg , _INT iEnd )
   {
      p_SPECL      pSpecl              =  pLowData->specl     ;
      _SHORT _PTR  xArr                =  pLowData->x         ;
      _SHORT _PTR  yArr                =  pLowData->y         ;
      p_SPECL      pSlashArcDown                              ;
      p_SPECL      pSlashArcUp                                ;
      p_SPECL      pBegGroup                                  ;
      p_SPECL      pEndGroup                                  ;
      SPECL        RecordSpeclElement                         ;
      SPECL _PTR   pRecordSpeclElement =  &RecordSpeclElement ;
      p_SPECL      tmpSpecl                                   ;
      _INT         lenSpecl            =  pLowData->len_specl ;
      _INT         dS_h   ;
      _INT         im     ;

      _SHORT       flagSA = SUCCESS ;

        for  ( im = 0 ;  im < lenSpecl  ;  im++ )
          {
            pSlashArcDown = pSpecl + im ;

              if   ( pSlashArcDown->ibeg > iEnd )
                     break    ;

              if   ( pSlashArcDown->iend < iBeg )
                     continue ;

              if   ( ( pSlashArcDown->mark     != MINYX ) ||
                     ( (pSlashArcDown+1)->mark != MAXYX )     )
                       continue ; /* The staff of elements is not fit ... */
 /*
  #if PG_DEBUG
                     if  ( mpr == 3 )
                         {
                           bioskey( 0 );
                           SolidPaint( xArr , yArr ,
                                       pSlashArcDown->ibeg, pSlashArcDown->iend,
                                       EGA_LIGHTBLUE      , _MEMO             ) ;
                         }
  #endif
 */
            tmpSpecl = pSlashArcDown ;
              while  (     ( tmpSpecl->mark != MAXW )
                       &&  ( tmpSpecl->mark != MINW )
                       &&  ( tmpSpecl->mark != BEG ) )
                           { tmpSpecl = tmpSpecl->prev ;  }

              if   ( tmpSpecl->mark != MINW )
                   continue ;

            pSlashArcUp = pSlashArcDown + 1 ;
            pBegGroup   = tmpSpecl  ;

 /*
  #if PG_DEBUG
                     if  ( mpr == 3 )
                         {
                           bioskey( 0 );
                           SolidPaint( xArr , yArr ,
                                       pSlashArcDown->iend, pSlashArcUp->ibeg,
                                       EGA_MAGENTA        , _MEMO             ) ;
                         }
  #endif
 */
            tmpSpecl = pSlashArcDown ;
              while  (    ( tmpSpecl->mark != MAXYX )
                       && ( tmpSpecl->mark != BEG   ) )
                          { tmpSpecl = tmpSpecl->prev ;  }

              if   ( tmpSpecl->mark != MAXYX )
                     continue ;     /* The staff of elements is not fit ... */

            tmpSpecl    = pSlashArcUp ;
              while  (    ( tmpSpecl->mark != MAXW )
                       && ( tmpSpecl->mark != MINW )
                       && ( tmpSpecl->mark != END ) )
                          { tmpSpecl = tmpSpecl->next ; }

              if   ( tmpSpecl->mark != MAXW )
                   continue  ;    /* The staff of elements is not fit ... */

            pEndGroup = tmpSpecl  ;

            tmpSpecl  = pBegGroup ;
              while  (    ( tmpSpecl->mark !=  MAXW       )
                       && ( tmpSpecl       !=  pEndGroup  ) )
                          { tmpSpecl = tmpSpecl->next ; }

              if   ( tmpSpecl  != pEndGroup  )
                     continue  ;    /* The staff of elements is not fit ... */

              if   ( pSlashArcDown->ipoint0 >= pSlashArcUp->ipoint0 )
                     continue  ;

              if   ( !DownStepOK( pLowData , pSlashArcDown , pEndGroup ) )
                     continue  ;

            dS_h = HWRMathILSqrt( DistanceSquare( pSlashArcDown->ipoint0 ,
                                                  pSlashArcUp->ipoint0   ,
                                                  xArr , yArr ) )        ;

              if  ( dS_h <= DEF_MINLENTH_S )
                    continue ;

              if  (  ArcTurnsOK( pLowData , ARC_DOWN_LEFT ,
                                 pSlashArcDown->ibeg , pSlashArcDown->iend )
                  &&
                     ArcTurnsOK( pLowData , ARC_UP_RIGHT   ,
                                 pSlashArcUp->ibeg   , pSlashArcUp->iend ) )
                 {
                   _INT    Cr  , minH ;
                   _SHORT  Der ;

                     pRecordSpeclElement->other = 0 ;

                     Cr = HWRAbs( CrookCalc( pLowData, &Der,
                                  pBegGroup->ipoint0, pEndGroup->ipoint0 ) ) ;

                     minH = HeightInLine( yArr[pEndGroup->ipoint0] ,
                                                        pLowData ) ;

                     if  ( ( Cr < L_DER_MIN ) && ( Der < L_DER_MIN ) )
                         {
                           continue ;
                         }
                     else  if  ( ( Cr < L_CR_ZER ) && ( Der < L_DER_ZER ) )
                         {
                           if  ( minH < _DE2_ )
                               {
                                 pRecordSpeclElement->other
                                   = pRecordSpeclElement->other | ZERO_PENALTY ;
                               }
                           else
                               {
                                 pRecordSpeclElement->other
                                   = pRecordSpeclElement->other | REGULAR_PENALTY ;
                               }
                         }
                     else  if  ( ( Cr <= L_DER_MID ) || ( Der <= L_DER_MID ) )
                         {
                           pRecordSpeclElement->other
                             = pRecordSpeclElement->other | REGULAR_PENALTY ;
                         }
                     else
                         {
                           pRecordSpeclElement->other
                             = pRecordSpeclElement->other | LARGE_PENALTY ;
                         }


                   pRecordSpeclElement->mark    = SHELF                  ;
                   pRecordSpeclElement->ibeg    = pSlashArcDown->ipoint0 ;
                   pRecordSpeclElement->iend    = pSlashArcUp->ipoint0   ;
                   pRecordSpeclElement->ipoint0 = pBegGroup->ipoint0     ;
                   pRecordSpeclElement->ipoint1 = pEndGroup->ipoint0     ;

#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY

                   pRecordSpeclElement->other
                            = pRecordSpeclElement->other | LETTER_H_STEP ;

#endif /* FOR_GERMAN... */

                     if  ( MarkSpecl( pLowData, pRecordSpeclElement )
                                                       == UNSUCCESS )
                         { flagSA = UNSUCCESS ;  goto  QUIT ;   }
  /*
  #if PG_DEBUG
                     if  ( mpr == 3 )
                         {
                           bioskey( 0 );
                           SolidPaint( xArr , yArr ,
                                       pBegGroup->ibeg , pEndGroup->iend ,
                                       EGA_MAGENTA     , _MEMO             ) ;
                         }
  #endif
  */
                 }

          }

   QUIT:
      return( flagSA ) ;
   }


 /**************************************************************************/


  #define   CR_LIM_SHELF_BORD_SLASH_ARCS     8


  _BOOL   ArcTurnsOK( low_type _PTR  pLowData ,  _ARC_TYPE  typeBordArc ,
                      _INT           iBegArc  ,  _INT       iEndArc       )
    {
       _INT    maxCr, tmpCr ;
       _SHORT  Der          ;
       _SHORT _PTR    yArr  =  pLowData->y ;
       _INT    nK           ;

           if    ( typeBordArc  ==  ARC_DOWN_LEFT )
                 nK = -1 ;
           else  if   ( typeBordArc  ==  ARC_UP_RIGHT )
                      nK = 1 ;
                 else
                       {
                         err_msg( " ArcTurnsOK : Wrong arc type ..." ) ;
                         nK = 0 ;
                       }

         tmpCr = CrookCalc( pLowData, &Der, iBegArc, iEndArc ) ;
         maxCr = HWRMax( nK * tmpCr , -ALEF )  ;

           if   ( yArr[ iBegArc - 1 ]  !=  BREAK )
                {
                  tmpCr = CrookCalc( pLowData, &Der, iBegArc-1, iEndArc ) ;
                  maxCr = HWRMax( nK * tmpCr , maxCr )  ;
                }

           if   ( yArr[ iEndArc + 1 ]  !=  BREAK )
                {
                  tmpCr = CrookCalc( pLowData, &Der, iBegArc, iEndArc+1 ) ;
                  maxCr = HWRMax( nK * tmpCr , maxCr )  ;
                }

           if   (     ( yArr[ iBegArc - 1 ]  !=  BREAK )
                  &&  ( yArr[ iEndArc + 1 ]  !=  BREAK )  )
                {
                  tmpCr = CrookCalc( pLowData, &Der, iBegArc-1, iEndArc+1 ) ;
                  maxCr = HWRMax( nK * tmpCr , maxCr )  ;
                }

  #if PG_DEBUG
              if   ( mpr == 3 )
                {
                 printw("\n maxCr. :  cr = %d" ,  maxCr ) ;
                 bioskey(0) ;
                 CloseTextWindow() ;
                }
  #endif

           if   ( maxCr < CR_LIM_SHELF_BORD_SLASH_ARCS )
                return  _FALSE  ;
           else
                return  _TRUE   ;

    }


 /**************************************************************************/


  _INT  CrookCalc( low_type _PTR  pLowData ,  p_SHORT  pDer ,
                                      _INT iBeg , _INT iEnd  )
    {
       _SDS     tmpSDS                 ;
      p_SDS     pTmpSDS  = &tmpSDS     ;
       _SHORT   xd , yd  ;

             InitElementSDS( pTmpSDS ) ;
             pTmpSDS->ibeg = (_SHORT)iBeg      ;
             pTmpSDS->iend = (_SHORT)iEnd      ;
             iMostFarDoubleSide ( pLowData->x , pLowData->y ,
                                  pTmpSDS     , &xd , &yd   , _TRUE ) ;

             *pDer = pTmpSDS->des.d ;

               if  ( pTmpSDS->des.dL > pTmpSDS->des.dR )
                   return(  pTmpSDS->des.cr )  ;
               else
                   return( -pTmpSDS->des.cr )  ;
    }

 /**************************************************************************/

                                   /*     Another sense of the function :  */
                                   /* 'generalized up-slash arc is OK ...' */


  #define   H_LIM_HEIGHT_STEP                15


  _BOOL   DownStepOK( low_type _PTR  pLowData      ,
                      p_SPECL        pSlashArcDown ,   p_SPECL  pEndGroup  )
    {
       _SHORT _PTR    yArr  =   pLowData->y ;

  #if PG_DEBUG
              if   ( mpr == 3 )
                {
                 printw("\n DY :  dy = %d" ,
                     yArr[pEndGroup->ipoint0] - yArr[pSlashArcDown->iend]  ) ;
                 bioskey(0) ;
                 CloseTextWindow() ;
                }
  #endif

           if   (   ( yArr[pEndGroup->ipoint0] - yArr[pSlashArcDown->iend] )
                  <   CR_LIM_SHELF_BORD_SLASH_ARCS )

                return  _FALSE  ;
           else
                return  _TRUE   ;
    }


 /**************************************************************************/

 #ifdef     D_ARCS

  _SHORT  Prepare_Arcs_Data( p_ARC_CONTROL pArcControl )
    {
      _SHORT  sSize ;
      _SHORT  flag_pa = SUCCESS ;

      pArcControl->arc_buf_Len = LEN_ARC_BUFFER ;
      pArcControl->LenArcData  = 0 ;
      sSize = ( (pArcControl->arc_buf_Len) * sizeof(ARC_DESCR) ) ;

        if  ( ((pArcControl->pArcData) = (p_ARC_DESCR)HWRMemoryAlloc(sSize))
                 == _NULL )
          {
            err_msg( "LOW_UTIL: Not enough memory for Arcs buffer" ) ;
            flag_pa =  UNSUCCESS ;
          }
        else
          { HWRMemSet((p_CHAR)(pArcControl->pArcData), 0, sSize ) ; }

      return  ( flag_pa ) ;
    }

 /**************************************************************************/

  _VOID   Dealloc_Arcs_Data ( p_ARC_CONTROL pArcControl )
    {
      pArcControl->LenArcData  = 0 ;
      pArcControl->arc_buf_Len = 0 ;

        if  ( (pArcControl->pArcData) != _NULL )
          {
              HWRMemoryFree( (pArcControl->pArcData) ) ;
              pArcControl->pArcData = _NULL ;
          }
    }

 /**************************************************************************/

  _BOOL  NoteArcData(  p_ARC_CONTROL pArcControl ,
                       low_type _PTR low_data    , p_ARC_DESCR  ptmpArcData )
   {
      p_SHORT  ind_back = low_data->buffers[2].ptr ;
      _BOOL    flag_note ;

        flag_note = _TRUE ;

          if   ( pArcControl->LenArcData < (pArcControl->arc_buf_Len - 1) )
            {
              p_ARC_DESCR pNew = pArcControl->pArcData +
                                 pArcControl->LenArcData ;
              *pNew = *ptmpArcData ;
              pNew->iBeg = ind_back[ptmpArcData->iBeg] ;
              pNew->iEnd = ind_back[ptmpArcData->iEnd] ;
              ( pArcControl->LenArcData )++ ;
            }
          else
            {
             err_msg(" NoteArcData : ArcData is full , nowhere to write...");
             flag_note = _FALSE ;     goto  QUIT ;
            }

     QUIT: return ( flag_note ) ;
   }

 /**************************************************************************/


  _VOID  DelArcElem( p_ARC_CONTROL pArcControl , _SHORT iDelElement )
    {
      p_ARC_DESCR pArcData = pArcControl->pArcData   ;

         HWRMemCpy( (p_CHAR)( pArcData + iDelElement     ),
                    (p_CHAR)( pArcData + iDelElement + 1 ),
                    ( (pArcControl->LenArcData) - iDelElement ) *
                      sizeof(ARC_DESCR) ) ;

         (pArcControl->LenArcData)-- ;

     QUIT: return ;
   }

 /**************************************************************************/


  _SHORT   Tan( _SHORT x1 , _SHORT y1 , _SHORT x2 , _SHORT y2 )
    {
      _LONG   a  ;
      _SHORT  dx ;
      _SHORT  dy ;

       dx = x1 - x2 ;         dy = y1 - y2 ;

       if    ( dx==0  &&  dy==0 )    {  a = (_LONG)(-ALEF) ;   goto QUIT ; }
       else
         {
           if    (dx != 0)    a = (_LONG)( LONG_BASE * dy ) / dx ;

           if   ((dx == 0) || ( HWRLAbs(a) > MAX_NO_VERT ))  a = ALEF ;
           else  if   ( HWRLAbs(a) < (_LONG)MIN_NO_HOR )  a = 0L ;
         }

    QUIT:
      return( (_SHORT)a ) ;
    }

 /**************************************************************************/

  _SHORT   ArcRetrace( low_type _PTR p_low_data , p_ARC_CONTROL pArcControl )
  {
     _SHORT       ii       = p_low_data->ii ;
    p_SHORT       x        = p_low_data->x  ;
    p_SHORT       y        = p_low_data->y  ;
    p_SHORT       indBack  = p_low_data->buffers[2].ptr ;
    p_ARC_DESCR   pArcData = pArcControl->pArcData      ;
    p_ARC_DESCR   p_tmpArcData ;
    _SHORT        iBeg , iEnd  , iExt ;
    _SHORT        il, jl       ;
    _SHORT        init , fin   ;
    _SHORT        shift_Beg    ;
    _SHORT        shift_End    ;
    _SHORT        old_iBeg     ;
    _SHORT        old_iEnd     ;
    _SHORT        ymid ;

      il = 0 ;
        while  (   ( (p_tmpArcData = (pArcData+il) )->type != ARC_UNKNOWN )
                && ( p_tmpArcData->iEnd < ii ) )
          {
              old_iBeg  = p_tmpArcData->iBeg    ;
              old_iEnd  = p_tmpArcData->iEnd    ;
              iBeg      = NewIndex( indBack, y, old_iBeg, ii, _MEAD ) ;
              iEnd      = NewIndex( indBack, y, old_iEnd, ii, _MEAD ) ;
              shift_Beg = NOSHIFT ;      shift_End = NOSHIFT ;

                for  ( jl = iBeg+1 ;  jl < iEnd ;  jl++  )
                  {
                    if  ( y[jl] == BREAK )
                          {
                            DelArcElem( pArcControl, il ) ;
                              goto  BOTTOM ;
                          }

                  }

                if  ( y[iBeg] == BREAK )
                    { iBeg++ ;     shift_Beg = SHIFT ; }

                if  ( y[iEnd] == BREAK )
                    { iEnd-- ;     shift_End = SHIFT ; }

                      if  ( ( p_tmpArcData->type == ARC_DOWN ) ||
                          (   p_tmpArcData->type == ARC_UP   )    )
                          {
                            ymid = ( y[iBeg] + y[iEnd] ) / 2 ;

                        if   ( shift_Beg == NOSHIFT )
                          {
                            init = NewIndex( indBack, y, old_iBeg-1, ii, _MEAD ) ;
                              if  ( y[init] == BREAK )
                                  init = iBeg ;
                          }
                        else
                          { init = iBeg ; }

                        if   ( shift_End == NOSHIFT )
                          {
                            fin  = NewIndex( indBack, y, old_iEnd+1, ii, _MEAD ) ;
                              if  ( y[fin] == BREAK )
                                  fin = iEnd ;
                          }
                        else
                          { fin = iEnd ; }

                      iExt = iMostFarFromChord( x, y, iBeg, iEnd );
                      iBeg = iClosestToY( y, init, iExt, ymid ) ;
                      iEnd = iClosestToY( y, iExt,  fin, ymid ) ;
                    }

              p_tmpArcData->iBeg = iBeg ;
              p_tmpArcData->iEnd = iEnd ;

   #if PG_DEBUG
                if  ( mpr > 0 )
                    {

                        if  ( ( p_tmpArcData->type == ARC_RIGHT ) ||
                              ( p_tmpArcData->type == ARC_LEFT  )    )
                            {
                              draw_line( x[iBeg], y[iBeg]+2,
                                         x[iEnd], y[iEnd]+2,
                                         COLORC,DOTTED_LINE,THICK_WIDTH ) ;
                              draw_line( x[iBeg], y[iBeg]-2,
                                         x[iEnd], y[iEnd]-2,
                                         COLORC,DOTTED_LINE,THICK_WIDTH ) ;
                              draw_line( x[iBeg], y[iBeg],
                                         x[iEnd], y[iEnd],
                                         COLORMAXN,SOLID_LINE,NORM_WIDTH ) ;
                            }

                        if  ( ( p_tmpArcData->type == ARC_DOWN ) ||
                              ( p_tmpArcData->type == ARC_UP   )    )
                            {
                              draw_line( x[iBeg], y[iBeg]+2,
                                         x[iEnd], y[iEnd]+2,
                                       COLORAN,DOTTED_LINE,THICK_WIDTH ) ;
                              draw_line( x[iBeg], y[iBeg]-2,
                                         x[iEnd], y[iEnd]-2,
                                       COLORAN,DOTTED_LINE,THICK_WIDTH ) ;
                              draw_line( x[iBeg], y[iBeg],
                                         x[iEnd], y[iEnd],
                                       COLORMINN,SOLID_LINE,NORM_WIDTH ) ;
                          }
                  }
   #endif
            il++ ;
            BOTTOM:
          }

   QUIT: return  SUCCESS;
  }

 /**************************************************************************/

  _SHORT  Arcs( low_type _PTR low_data, p_ARC_CONTROL pArcControl )
   {
     _SHORT   stop = low_data->ii - 1 ;
     p_SHORT  y    = low_data->y  ;
     _SHORT  fl_begin   ;
     _SHORT  fl_arcs    ;
     _SHORT  i          ;
     _SHORT  begin, end ;

       fl_begin = 0 ;   fl_arcs = SUCCESS ;   pArcControl->LenArcData = 0 ;

         for  (  i = 0  ;  i <= stop  ;  i++ )
           {
             if  ( y[i] == BREAK )
               {
                 if   ( fl_begin==0 )
                      {  fl_begin = 1 ;     begin = i + 1 ; }
                 else
                   {
                     fl_begin = 0 ;
                     end = --i ;
                       if  ( ArcsKern( low_data, pArcControl, begin,end )
                               != SUCCESS )
                         {
                           fl_arcs = UNSUCCESS;
                           goto  QUIT;
                         }

                       if    ( i+1 == stop )    break ;
                   }
               }
           }
  QUIT:

   #if  PG_DEBUG
/*       if  ( fl_arcs == SUCCESS )
           PaintArcs( low_data, (p_VOID)pArcControl );
       else
         err_msg( "ARCS unsuccess!" );
*/
   #endif /*PG_DEBUG*/

       return( fl_arcs) ;
   }

 /**************************************************************************/


  _SHORT  ArcsKern( p_LowData low_data, p_ARC_CONTROL pArcControl,
                    _SHORT iInit , _SHORT iStop                    )
    {
     p_SHORT    x = low_data->x  ;
     p_SHORT    y = low_data->y  ;
     p_SPECL    pSpecl = low_data->specl     ;
     p_SPECL    pTmp , pPoint, pPrev , pNext ;
     ARC_DESCR  tmpArcData ;
     _SDS       tmpSDS     ;
     _SHORT     flag_arc   ;
     _SHORT     ibeg, iend ;
     _SHORT     tanPrev , tanNext ;
     _SHORT     xd, yd     ;
     _SHORT     signCurv   ;
     _ARC_TYPE   typeArc    ;

       flag_arc = UNSUCCESS ;
         if   ( iInit == iStop )   goto   QUIT ;

       pTmp = pSpecl  ;
         while  (   ( pTmp->next != _NULL )
                 && (    ( (pTmp->next)->mark != BEG   )
                      || ( (pTmp->next)->ibeg != iInit )  )
                )
           {  pTmp = pTmp->next ; }

         if  ( pTmp == _NULL  ||  pTmp->next == _NULL )  goto  QUIT;

         while  ( (pTmp=pTmp->next) != _NULL  &&  pTmp->mark != END )
           {
            if  ( pTmp->mark ==_MAXX  ||  pTmp->mark ==_MINX  ||
                  pTmp->mark == MAXW  ||  pTmp->mark == MINW     )
              {
                pPoint = pTmp ;

               /* Searching appropriate previous element ... */
                pPrev = pPoint ;
                  while  (  ( (pPrev=pPrev->prev) != pSpecl ) &&   /*CHE*/
                            ( pPrev->mark != BEG   ) &&
                            ( pPrev->mark != MINW  ) &&
                            ( pPrev->mark != MAXW  ) &&
                            ( pPrev->mark != _MAXX ) &&
                            ( pPrev->mark != _MINX )
                         ) ;
                  DBG_CHK_err_msg( pPrev == pSpecl,      /*CHE*/
                                   "ARCS: BAD pPrev;" );
                  if  ( pPrev->mark == BEG )           continue ;
                  if  ( pPrev->ibeg == pPoint->ibeg )  continue ;

               /* Searching appropriate next element ......  */
                pNext = pPoint ;
                  while  (  ( (pNext=pNext->next) != _NULL ) &&  /*CHE*/
                            ( pNext->mark != END   ) &&
                            ( pNext->mark != MINW  ) &&
                            ( pNext->mark != MAXW  ) &&
                            ( pNext->mark != _MAXX ) &&
                            ( pNext->mark != _MINX )
                         ) ;
                  DBG_CHK_err_msg( pNext == _NULL,       /*CHE*/
                                   "ARCS: BAD pNext;" );
                  if  ( pNext->mark == END )           continue ;
                  if  ( pNext->iend == pPoint->iend )  continue ;

                  if  ( pPoint->mark ==_MAXX  ||  pPoint->mark ==_MINX )
                    {
                       if  ( pPrev->ibeg == iInit )
                           { ibeg = pPrev->ipoint0 ; }
                       else
                         if   ( pPoint->ibeg <= pPrev->iend )
                              { ibeg = pPoint->ibeg ;  }
                         else
                              { ibeg = MEAN_OF(pPoint->ibeg, pPrev->iend) ; }

                       if  ( pNext->iend == iStop )
                           { iend = pNext->ipoint0 ; }
                       else
                         if   ( pPoint->iend >= pNext->ibeg )
                              { iend = pPoint->iend ;  }
                         else
                              { iend = MEAN_OF(pPoint->iend, pNext->ibeg) ; }

                     tmpSDS.ibeg = ibeg ;            tmpSDS.iend = iend ;
                     iMostFarDoubleSide( x, y, &tmpSDS, &xd, &yd, _TRUE ) ;

                       if  ( tmpSDS.des.cr < P_CR_MIN  )   continue ;
                       if  ( tmpSDS.des.cr > P_CR_MAX  )   continue ;

                     tanPrev = Tan( x[pPoint->ipoint0], y[pPoint->ipoint0],
                                    x[ibeg] , y[ibeg]                      );
                     tanNext = Tan( x[pPoint->ipoint0], y[pPoint->ipoint0],
                                    x[iend] , y[iend]                      );

                       if  ( ( (_LONG)tanPrev * tanNext ) > 0L )  continue ;

                       if (((pNext->mark !=_MAXX && pNext->mark !=_MINX) ||
                          (pNext->iend == iStop)) && (HWRAbs(tanNext) > P1_A))
                            continue ;

                       if (((pPrev->mark !=_MAXX && pPrev->mark !=_MINX) ||
                          (pPrev->ibeg == iInit)) && (HWRAbs(tanPrev) > P1_A))
                            continue ;

                       if  ( pPoint->mark == _MAXX )   typeArc = ARC_RIGHT ;
                       if  ( pPoint->mark == _MINX )   typeArc = ARC_LEFT  ;

                     signCurv = CurvMeasure( x,y,ibeg,iend,tmpSDS.des.imax ) ;
                     tmpArcData.box.bottom = tmpSDS.ymax ;
                     tmpArcData.box.right  = tmpSDS.xmax ;
                     tmpArcData.box.left   = tmpSDS.xmin ;
                     tmpArcData.box.top    = tmpSDS.ymin ;
                     tmpArcData.iBeg       = ibeg   ;
                     tmpArcData.iEnd       = iend   ;
                     tmpArcData.nLength    = tmpSDS.des.s ;
                     tmpArcData.nCurv      = signCurv  ;
                     tmpArcData.type       = typeArc   ;

                       if  ( NoteArcData( pArcControl, low_data,
                                          &tmpArcData ) == _FALSE  )
                           {  flag_arc = UNSUCCESS ;    goto  QUIT ; }
   #if PG_DEBUG
                     if  ( mpr > 0 )
                       {
                           draw_line( x[ibeg], y[ibeg]+2,
                                      x[iend], y[iend]+2,
                                      COLORC,DOTTED_LINE,THICK_WIDTH) ;
                           draw_line( x[ibeg], y[ibeg]-2,
                                      x[iend], y[iend]-2,
                                      COLORC,DOTTED_LINE,THICK_WIDTH) ;
                           draw_line( x[ibeg], y[ibeg],
                                      x[iend], y[iend],
                                      COLORMAXN,SOLID_LINE,NORM_WIDTH ) ;
                      }
   #endif
                    }

            else  if  ( pPoint->mark == MAXW  ||  pPoint->mark == MINW )
                    {
                       if  ( pPrev->ibeg == iInit )
                           { ibeg = pPrev->ipoint0 ; }
                       else
                         if   ( pPoint->ibeg <= pPrev->iend )
                              { ibeg = pPoint->ibeg ;  }
                         else
                              { ibeg = MEAN_OF(pPoint->ibeg, pPrev->iend) ; }

                       if  ( pNext->iend == iStop )
                           { iend = pNext->ipoint0 ; }
                       else
                         if   ( pPoint->iend >= pNext->ibeg )
                              { iend = pPoint->iend ;  }
                         else
                              { iend = MEAN_OF(pPoint->iend, pNext->ibeg) ; }

                       if  ( pPoint->mark == MAXW )
                         {
                           if  ( y[pPoint->ipoint0] <= y[ibeg] ||
                                 y[pPoint->ipoint0] <= y[iend]    )
                               continue  ;

                           if  ( y[ibeg] < y[iend] )
                             ibeg = iClosestToY( y,ibeg,
                                                 pPoint->ipoint0, y[iend] ) ;
                           else
                             iend=iClosestToY( y, pPoint->ipoint0,
                                               iend, y[ibeg]      ) ;
                         }
                       else
                         {
                           if  ( y[pPoint->ipoint0] >= y[ibeg] ||
                                 y[pPoint->ipoint0] >= y[iend]    )
                               continue  ;

                           if  ( y[ibeg] >= y[iend] )
                             ibeg = iClosestToY( y , ibeg ,
                                                pPoint->ipoint0, y[iend] ) ;
                           else
                             iend = iClosestToY( y, pPoint->ipoint0,
                                                 iend, y[ibeg]       ) ;
                         }

                       if  ( ibeg > pPoint->ibeg )  ibeg = pPoint->ibeg ;
                       if  ( iend < pPoint->iend )  iend = pPoint->iend ;

                     tmpSDS.ibeg = ibeg ;       tmpSDS.iend = iend  ;
                     iMostFarDoubleSide( x, y, &tmpSDS, &xd, &yd, _TRUE )  ;

                       if  ( tmpSDS.des.cr < P_CR_MIN  )   continue ;
                       if  ( tmpSDS.des.cr > P_CR_MAX  )   continue ;

                     tanPrev = Tan( x[pPoint->ipoint0], y[pPoint->ipoint0],
                                    x[ibeg] , y[ibeg]                      );
                     tanNext = Tan( x[pPoint->ipoint0], y[pPoint->ipoint0],
                                    x[iend] , y[iend]                      );

                       if  ( ( (_LONG)tanPrev * tanNext ) > 0L )  continue ;

                       if (((pNext->mark != MAXW  &&  pNext->mark != MINW ) ||
                          (pNext->iend == iStop)) && (HWRAbs(tanNext) < P2_A))
                            continue ;

                       if (((pPrev->mark != MAXW  &&  pPrev->mark != MINW ) ||
                          (pPrev->ibeg == iInit)) && (HWRAbs(tanPrev) < P2_A))
                            continue ;

                       if  ( pPoint->mark == MAXW )   typeArc = ARC_DOWN ;
                       if  ( pPoint->mark == MINW )   typeArc = ARC_UP   ;

                     signCurv = CurvMeasure( x,y,ibeg,iend,tmpSDS.des.imax ) ;
                     tmpArcData.box.bottom = tmpSDS.ymax ;
                     tmpArcData.box.right  = tmpSDS.xmax ;
                     tmpArcData.box.left   = tmpSDS.xmin ;
                     tmpArcData.box.top    = tmpSDS.ymin ;
                     tmpArcData.iBeg       = ibeg   ;
                     tmpArcData.iEnd       = iend   ;
                     tmpArcData.nLength    = tmpSDS.des.s ;
                     tmpArcData.nCurv      = signCurv  ;
                     tmpArcData.type       = typeArc   ;

                       if  ( NoteArcData( pArcControl, low_data,
                                          &tmpArcData ) == _FALSE  )
                           {  flag_arc = UNSUCCESS ;    goto  QUIT ; }
   #if PG_DEBUG
                     if  ( mpr > 0 )
                       {
                           draw_line( x[ibeg], y[ibeg]+2,
                                      x[iend], y[iend]+2,
                                      COLORAN,DOTTED_LINE,THICK_WIDTH) ;
                           draw_line( x[ibeg], y[ibeg]-2,
                                      x[iend], y[iend]-2,
                                      COLORAN,DOTTED_LINE,THICK_WIDTH) ;
                           draw_line( x[ibeg], y[ibeg],
                                      x[iend], y[iend],
                                      COLORMINN,SOLID_LINE,NORM_WIDTH ) ;
                      }
   #endif
                    }
              }

            else if  ( pTmp->mark == MAXXY  &&  pTmp->mark == MINXY )
              {

              }

            else if  ( pTmp->mark == MAXYX  &&  pTmp->mark == MINYX )
              {

              }

           }
     flag_arc = SUCCESS;
    QUIT:


     return ( flag_arc) ;
    }

 /**************************************************************************/


  #undef     P_CR_MIN
  #undef     P_CR_MAX
  #undef     P1_A
  #undef     P2_A

  #undef     MAX_NO_VERT
  #undef     MIN_NO_HOR


  #endif /*D_ARCS*/

 /**************************************************************************/

#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\bear.c ===
// bear.c
// ahmad abulkader
// Apr 26, 2000
// Contains some high level functions provided by bear 
// for use by bear customers like Avalanche
// It is not part of bear.dsp

#include <stdlib.h>

#include "common.h"
#include "nfeature.h"
#include "engine.h"
#include "bear.h"
#include "bearp.h"
#include "recdefs.h"
#include "linebrk.h"
#include <recdefs.h>

// This function runs calligrapher either in panel or word mode
// In Panel mode, the purpose is to let callig segment the ink
// In Word mode: calls calligrapher in word mode
// The passed wordmap is used to build the glyph, if NULL the whole glyph in the xrc is used
HRC BearRecognize (XRC *pxrc, GLYPH *pFullGlyph, WORDMAP *pMap, int bWordMode)
{
	HRC			hrc				=	NULL;
	DWORD		flags			=	pxrc->flags;
	GLYPH		*pGlyph			=	NULL,
				*pgl;

#ifdef HWX_TIMING
#include <madTime.h>
	extern void setMadTiming(DWORD, int);
	DWORD	iStartTime, iEndTime;
	
	iStartTime					= GetTickCount();
#endif

	// handle the case of NULL pxrc
	if (!pxrc)
		goto fail;

	// construct glyph
	if (pMap)
		pGlyph	=	GlyphFromWordMap (pFullGlyph, pMap);
	else
		pGlyph	=	pFullGlyph;

	if (!pGlyph)
		goto fail;

	// get the hrc
	hrc = BearCreateCompatibleHRC((HRC)NULL,NULL);
	if (!hrc)
		goto fail;

	if (pxrc->bGuide)
	{
		BearSetGuideHRC(hrc, &pxrc->guide, 0);
	}

	// are we in word mode
	//if (bWordMode)
	//	alc	&= (~ALC_WHITE);
	flags = pxrc->flags;
	if (bWordMode)
		flags |= RECOFLAG_WORDMODE;

	BearSetHwxFlags(hrc, flags);

	BearHwxSetRecogSpeedHRC(hrc, Mad2CalligSpeed(pxrc->iSpeed));

	BearSetCompiledFactoid (hrc, pxrc->pvFactoid);
	BearSetCorrectionContext(hrc, pxrc->szPrefix, pxrc->szSuffix);

	BearSetWordlistHRC (hrc, pxrc->hwl);

	// add ink
	pgl	=	pGlyph;
	while (pgl)
	{
		FRAME *frame = pgl->frame;

		if (BearInternalAddPenInput((BEARXRC *)hrc, RgrawxyFRAME(frame), &frame->iframe, 
			ADDPENINPUT_FRAMEID_MASK, LpframeinfoFRAME(frame)) != HRCR_OK)
		{
			goto fail;
		}
		
		pgl = pgl->next;
	}

	// recognize
	if (BearProcessHRC(hrc,PH_MAX) != HRCR_OK)
		goto fail;

#ifdef HWX_TIMING
	iEndTime = GetTickCount();
	setMadTiming(iEndTime - iStartTime, MM_CALLIG);
	if(bWordMode)
	{
		setMadTiming(iEndTime - iStartTime, MM_CALLIG_WORD);
	}
	else
	{
		setMadTiming(iEndTime - iStartTime, MM_CALLIG_PHRASE);
	}


#endif	
	if (pMap && pGlyph)
		DestroyGLYPH (pGlyph);

	return hrc;
	
fail:

	if (pMap && pGlyph)
		DestroyGLYPH (pGlyph);

	if (hrc)
		BearDestroyHRC (hrc);

	return NULL;
}

//-----------------------------------------------------------
// 
// BearRecoStrings
//
// Ask bear to return a costs for a list of strings
// The list is a standard windows double NULL terminated list
//
//
// RETURNS
//  A newly created BEARXRC. Caller must destroy it
//
//-------------------------------------------------------------
BEARXRC *BearRecoStrings (XRC *pXrc, unsigned char *paStrList)
{
	BEARXRC		*pBearXrc = NULL;

	if (paStrList)
	{
		HWL		hwl;
		HRC		hrc;

		hwl = CreateHWL(NULL, paStrList, WLT_STRING, 0);
		if (NULL == hwl)
		{
			return NULL;
		}
		
		hrc = CreateCompatibleHRC((HRC)pXrc, NULL);
		if (NULL != hrc)
		{
			SetWordlistHRC(hrc, hwl);

			if (   HRCR_OK == SetHwxFactoid(hrc, L"WORDLIST")
				&& TRUE == SetHwxFlags(hrc, RECOFLAG_COERCE))
			{
				pBearXrc = (BEARXRC *)BearRecognize((XRC *)hrc, pXrc->pGlyph, NULL, TRUE);
			}

			DestroyHRC(hrc);
		}
		DestroyHWL(hwl);
	}

	return pBearXrc;
}

// This function calls bear line breaking by passing the strokes
// to Bear in panel mode in the regular manner but then abort before 
// starting the actual recognition
// There is probably some overhead to this approach VS hacking out the actual
// line breaking code from bear, but it probably not noticeable
int BearLineSep(GLYPH *pGlyph, LINEBRK *pLineBrk)
{
	BOOL				bRet		=	FALSE;
	HRC					hrcBear		=	NULL;
	BEARXRC				*pxrcBear	=	NULL;

	// check the glyph
	if (!pGlyph || CframeGLYPH(pGlyph) <= 0)
	{
		goto fail;
	}

	// init the line breaking structure
	memset (pLineBrk, 0, sizeof (*pLineBrk));

	// create a bear xrc
	hrcBear = BearCreateCompatibleHRC ((HRC)NULL, NULL);
	if (!hrcBear)
	{
		goto fail;
	}

	pxrcBear			=	(BEARXRC *)hrcBear;

	// borrow the glyph (we are doing this instead of feeding the ink one stroke at a time using addinkinput)
	pxrcBear->pGlyph	=	pGlyph;
	pxrcBear->cFrames	=	CframeGLYPH (pGlyph);

	// start the bear session
	if (BearStartSession (pxrcBear) != HRCR_OK)
	{
		goto fail;
	}

	// pass the ink
	if (feed (pxrcBear, pxrcBear->pGlyph, pLineBrk) != HRCR_OK)
	{
		goto fail;
	}

	// success
	bRet				=	TRUE;

	// recognize
	BearCloseSession(pxrcBear, FALSE);

fail:

	if (pxrcBear)
	{
		pxrcBear->pGlyph	=	NULL;
	}

	if (hrcBear)
		BearDestroyHRC (hrcBear);

	if (bRet)
	{
		return	pLineBrk->cLine;
	}
	else
	{
		return -1;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\bear.h ===
#ifndef __BEAR_H__

#define __BEAR_H__

#include "common.h"
#include "langmod.h"
#include "nfeature.h"
#include "engine.h"
#include "linebrk.h"

typedef struct tagBEARXRC
{
	GUIDE		guide;
	BOOL		bGuide;

	GLYPH		*pGlyph;
	int			cFrames;

	DWORD		dwLMFlags;
	int			iSpeed;

	BOOL		bEndPenInput;
	BOOL		bProcessCalled;

	int			iProcessRet;

	HWL			hwl;

	ALTERNATES	answer;

	int			cLine;					// # of lines

	void		  *pvFactoid;
	unsigned char *szPrefix;
	unsigned char *szSuffix;

	void		*context;

	int			iScaleNum;
	int			iScaleDenom;
} BEARXRC;


BOOL	InitBear (HINSTANCE hDll);
void	DetachBear ();

HRC BearCreateCompatibleHRC(HRC hrc, HREC hrec);
int BearSetAlphabetHRC(HRC hrc, ALC alc, LPBYTE pbUnused);
int BearDestroyHRC(HRC hrc);
int BearAddPenInputHRC(HRC hrc, POINT *rgPoint, LPVOID lpvUnused, UINT iFrame, STROKEINFO *pSi);
int BearSetScale (HRC hrc, int iInkScaleNum, int iInkScaleDenom);
int BearProcessHRC(HRC hrc, DWORD dwUnused);
int BearHwxGetWordResults(HRC hrc, UINT cAlt, char *buffer, UINT buflen);
int BearSetGuideHRC(HRC hrc, LPGUIDE lpguide,  UINT nFirstVisible);
int BearHwxGetCosts(HRC hrc, UINT cAltMax, int *rgCost);
int BearHwxGetNeuralOutput(HRC hrc, void *buffer, UINT buflen);
int BearHwxGetInputFeatures(HRC hrc, unsigned short *rgFeat, UINT cWidth);
int BearHwxSetAnswer(char *sz);
void * BearHwxGetRattFood(HRC hrc, int *pSize);
int BearHwxProcessRattFood(HRC hrc, int size, void *rattfood);
void BearHwxSetPrivateRecInfo(void *v);
HWL BearCreateHWL(HREC hrec, LPSTR lpsz, UINT uType, DWORD dwReserved);
int BearDestroyHWL(HWL hwl);
int BearSetWordlistCoercionHRC(HRC hrc, UINT uCoercion);
int BearSetWordlistHRC(HRC hrc, HWL hwl);
int BearEnableSystemDictionaryHRC(HRC hrc, BOOL fEnable);
int BearEnableLangModelHRC(HRC hrc, BOOL fEnable);
BOOL BearIsStringSupportedHRC(HRC hrc, unsigned char *sz);
int BearGetMaxResultsHRC(HRC hrc);
int BearSetMaxResultsHRC(HRC hrc, UINT cAltMax);
int BearGetResultsHRC(HRC hrc, UINT uType, HRCRESULT *pResults, UINT cResults);
int BearGetAlternateWordsHRCRESULT(HRCRESULT hrcresult, UINT iSyv, UINT cSyv,
									  HRCRESULT *pResults, UINT cResults);
int BearGetSymbolsHRCRESULT(HRCRESULT hrcresult, UINT iSyv, SYV *pSyv, UINT cSyv);
int BearGetSymbolCountHRCRESULT(HRCRESULT hrcresult);
BOOL BearSymbolToCharacter(SYV *pSyv, int cSyv, char *sz, int *pConv);
BOOL BearSymbolToCharacterW(SYV *pSyv, int cSyv, WCHAR *wsz, int *pConv);
int BearGetCostHRCRESULT(HRCRESULT hrcresult);
int BearDestroyHRCRESULT(HRCRESULT hrcresult);
HINKSET BearCreateInksetHRCRESULT(HRCRESULT hrcresult, unsigned int iSyv, unsigned int cSyv);
BOOL BearDestroyInkset(HINKSET hInkset);
int BearGetInksetInterval(HINKSET hInkset, unsigned int uIndex, INTERVAL *pI);
int BearGetInksetIntervalCount(HINKSET hInkset);
int BearHwxSetRecogSpeedHRC(HRC hrc, int iSpeed);
HRC BearRecognize (XRC *pxrc, GLYPH *pGlyph, WORDMAP *pMap, int bWordMode);
int BearLineSep(GLYPH *pGlyph, LINEBRK *pLineBrk);
int BearSetHwxFactoid (HRC hrc, WCHAR* pwcFactoid);
int BearSetCompiledFactoid(HRC hrc, void *pvFactoid);
int BearSetHwxFlags (HRC hrc, DWORD flags);
int BearSetCorrectionContext(HRC hrc, unsigned char *szPrefix, unsigned char *szSuffix);
BEARXRC *BearRecoStrings(XRC *pXrc, unsigned char *paStrList);
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\beartrn.c ===
#ifdef TRAINTIME_BEAR

#include "common.h"
#include "nfeature.h"
#include "engine.h"
#include "nnet.h"
#include "probcost.h"
#include "charcost.h"
#include "charmap.h"
#include "bear.h"
#include "bearp.h"
#include "pegrec.h"
#include "peg_util.h"
#include "xrwdict.h"
#include "xrword.h"
#include "xrlv.h"
#include "ws.h"
#include "polyco.h"

extern	CGRCTX		g_context;

typedef struct tagDTWNODE
{
	int		iBestPrev;
	int		iBestPathCost;

	int		iNodeCost;

	char	iCh;
	char	iChNoSp;
	BYTE	bCont;

	int		iStrtSeg;
}
DTWNODE;							// structure used in DTW to determine the NN cost of a word


typedef struct tagPALTERNATES
{
	unsigned int cAlt;			// how many (up to 10) actual answers do we have
    unsigned int cAltMax;       // I can use this to say "I only want 4". !!! should be in xrc
	XRCRESULT *apAlt[MAXMAXALT];	// The array of pointers to XRCRESULT structures
} PALTERNATES;

#define	NODE_ALLOC_BLOCK	10		// # of nodes per column to allocate at a time during the DTW

#define TOT_CAND			10						// Total # of cand's entering the aval NN

#if (TOT_CAND > MAXMAXALT)
#error TOT_CAND is greater than MAXMAXALT
#endif

#define	MAD_CAND			5						// How many of them are madcow's
#define	CAL_CAND			(TOT_CAND - MAD_CAND)	// How many of them are callig's


// Number of alternates to generate in Word and panel mode
#define MAX_ALT_WORD		(10)
#define MAX_ALT_PHRASE		(10)

typedef struct tagSHORTWORDMAP
{
	unsigned short start;		// start of the word in the phrase
    unsigned short len;         // len of word in the phrase
    int cStrokes;               // Count of strokes in this word
    int *piStrokeIndex;         // Stroke indexes for this word
} SHORTWORDMAP;					// structure used to save word mapping for training purposes


// It's OK to have globs here since the training DLL is not supposed to be thread safe

unsigned char		g_szInkAnswer[256], g_szAnswer[256], g_szAnsFileName[256], *g_pszWordAnswer[64];
int					g_iAnsPanel, g_iAnsSample, g_cWordAnswer, g_iCurAnsWord;
int					g_aiLineStartStrk[256];
int					g_iPrint;

SHORTWORDMAP		g_aWordMap[256];


int GetInfernosCost (XRC *pxrcInferno, int cmap, WORDMAP *pmap);
extern int	GetSpaceOutput (XRC *pxrc, WORDMAP *pMap);
int WINAPI InfProcessHRC(HRC hrc, int yDev);

int RunXRNet (int cXR, BYTE *pFeat, BYTE *pOutput);

int AddStroke2Mapping (int iCh, int iStrk)
{
	int	i, j, k, iSwap;

	// find the word
	for (i = 0; i < g_cWordAnswer; i++)
	{
		if (g_aWordMap[i].start <= iCh && (g_aWordMap[i].start + g_aWordMap[i].len)> iCh)
			break;
	}

	if (i == g_cWordAnswer)
		return -1;

	// does the stroke already exist in this word map, if not add, add it in pos
	for (j = 0; j < g_aWordMap[i].cStrokes; j++)
	{
		if (g_aWordMap[i].piStrokeIndex[j] == iStrk)
			return i;
		else
		if (g_aWordMap[i].piStrokeIndex[j] > iStrk)
			break;
	}

	// insert this strk at j
	g_aWordMap[i].piStrokeIndex	=	(int *) ExternRealloc (g_aWordMap[i].piStrokeIndex, 
		(g_aWordMap[i].cStrokes + 1) * sizeof (int));

	if (!g_aWordMap[i].piStrokeIndex)
		return -1;

	// shift the list
	g_aWordMap[i].cStrokes++;
	for (k = g_aWordMap[i].cStrokes - 1; k > j; k--)
	{
		iSwap								=	g_aWordMap[i].piStrokeIndex[k];
		g_aWordMap[i].piStrokeIndex[k]		=	g_aWordMap[i].piStrokeIndex[k - 1];
		g_aWordMap[i].piStrokeIndex[k - 1]	=	iSwap;
	}

	g_aWordMap[i].piStrokeIndex[j]	=	iStrk;

	return i;
}

// set up a the HRC for word recognition (Do not allow white space)
static int initWordHRC(XRC *pMainXrc, GLYPH	*pGlyph, HRC *phrc)
{
	int		cFrame;
	HRC		hrc = CreateCompatibleHRC((HRC)pMainXrc, NULL);
	int		iRet = HRCR_OK;
	XRC		*pxrcNew;

	*phrc = (HRC)0;

	if (!hrc)  // don't go to exit as we do not need to destroy an HRC
		return HRCR_MEMERR;

	pxrcNew	=	(XRC *) hrc;

	iRet = SetHwxFlags(hrc, pxrcNew->flags | RECOFLAG_WORDMODE);
	if (iRet != HRCR_OK)
		goto exit;
	
	pxrcNew->answer.cAltMax = MAX_ALT_WORD;

	// build glyph of specific frames inside hrc
	// we later may be able to alter the API to allow additional frames to be
	// added after recognition has already been run

	for ( cFrame = 0 ; pGlyph; pGlyph = pGlyph->next, ++cFrame)
	{
		FRAME *pFrame = pGlyph->frame, *pAddedFrame;
		ASSERT(pFrame);

		if (!pFrame)
		{
			iRet = HRCR_ERROR;
			goto exit;
		}

		iRet = AddPenInputHRC(hrc, RgrawxyFRAME(pFrame), NULL, 0, &(pFrame->info));
		if (iRet != HRCR_OK)
			goto exit;

		// Keep globally allocated frame numbers
		if ( (pAddedFrame = FrameAtGLYPH(((XRC *)hrc)->pGlyph, cFrame)))
		{
			pAddedFrame->iframe = pFrame->iframe;
			pAddedFrame->rect = pFrame->rect;
		}
	}

	*phrc = hrc;
	return HRCR_OK;

exit:
	DestroyHRC(hrc);
	*phrc = (HRC)0;
	return iRet;
}

// set up a the HRC for phrase recognition (Allow white space)
int initPhraseHRC(XRC *pMainXrc, GLYPH *pGlyph, HRC *phrc)
{
	int iRet = HRCR_OK;

	if (HRCR_OK == initWordHRC(pMainXrc, pGlyph, phrc))
	{
		XRC	*pxrcNew	=	(XRC *)(*phrc);

		iRet = SetHwxFlags(*phrc, pxrcNew->flags & ~RECOFLAG_WORDMODE);

		// we want to disable userdict
		iRet = SetHwxFlags(*phrc, pxrcNew->flags | RECOFLAG_COERCE);
		
		pxrcNew->answer.cAltMax = MAX_ALT_PHRASE;
		if (iRet != HRCR_OK)
			goto exit;
	}

	return HRCR_OK;

exit:
	DestroyHRC(*phrc);
	*phrc = (HRC)0;
	return iRet;
}

void SaveGlyph (GLYPH *pGlyph)
{
	FILE	*fp;
	int		cStrk	=	CframeGLYPH (pGlyph);
	GLYPH	*gl;

	fp	= fopen ("glyph.bin", "wb");
	if (!fp)
		return;

	fwrite (&cStrk, 1, sizeof (int), fp);

	for (gl = pGlyph; gl; gl = gl->next)
	{
		fwrite (&gl->frame->info.cPnt, 1, sizeof (int), fp);
		fwrite (gl->frame->rgrawxy, gl->frame->info.cPnt, sizeof (XY), fp);
	}

	fclose (fp);
}

// Run Inferno on a flattened version of the ink in the XRC and return
// the resulting XRC
// Assumes:
//	1) A guide is available
//  2) The ink has been 'guideNormalized'
XRC * getNNAct(BOOL bGuide, GUIDE *lpGuide, GLYPH *pGlyph, int *piYdev,  LINEBRK *pLineBrk)
{
	XRC			*pxrc = NULL;
	HRC			hrc = NULL;
	int			ret;
	RECT		r;
	int			i, j;
	
	GetRectGLYPH (pGlyph, &r);

	ret = initPhraseHRC (NULL, pGlyph, &hrc);
	if (ret != HRCR_OK)
	{
		return NULL;
	}

	pxrc = (XRC *)hrc;

	if (bGuide && lpGuide)
	{
		pxrc->guide	=	*lpGuide;

		// Requires the guide to flatten the ink
		if (GuideLineSep (pxrc->pGlyph, lpGuide, pLineBrk) < 1)
		{
			goto failure;
		}
	}
	else
	{
		if (NNLineSep (pxrc->pGlyph, pLineBrk) < 1)
		{
			goto failure;
		}
	}

	// save iprint
	for (i = j = 0; i < pLineBrk->cLine; i++)
	{
		if (pLineBrk->pLine[i].cStroke && pLineBrk->pLine[i].pGlyph)
		{
			g_aiLineStartStrk[j++]	=	pLineBrk->pLine[i].pGlyph->frame->iframe;
		}
	}

	if (pLineBrk->cLine > 1)
	{
		int		iLine, iFrm;

		int xShift	=	(pLineBrk->pLine[0].rect.right - pLineBrk->pLine[0].rect.left + 
			2*pxrc->guide.cyBase);
		
		// Flatten the ink into one line
		for (iLine = 1; iLine < pLineBrk->cLine; iLine++)
		{
			int		cyBase, cyBox;
			GLYPH	*pGlyph;

			if (bGuide)
			{
				cyBase = pxrc->guide.cyBase;
				cyBox = iLine * pxrc->guide.cyBox;
			}
			else
			{
				RECT	rPrev, rCur;

				GetRectGLYPH(pLineBrk->pLine[iLine].pGlyph, &rCur);
				GetRectGLYPH(pLineBrk->pLine[0].pGlyph, &rPrev);
				cyBase = max((rCur.bottom - rCur.top) / 10, 100);
				cyBox = rCur.bottom - rPrev.bottom;

				ASSERT (cyBase >= 0);
				ASSERT(cyBox >= 0);
			}

			//for (iFrm = 0, pGlyph = pLineBrk->pLine[iLine].pGlyph; NULL != pGlyph iFrm < pLineBrk->pLine[iLine].cStroke; iFrm++, pGlyph = pGlyph->next)
			for (iFrm = 0, pGlyph = pLineBrk->pLine[iLine].pGlyph ; (iFrm < pLineBrk->pLine[iLine].cStroke) ; iFrm++, pGlyph = pGlyph->next)
			{
				int	dx = 0, dy = 0;
				
				ASSERT(NULL != pGlyph);

				if (pGlyph)
				{
					dx	=	xShift - pLineBrk->pLine[iLine].rect.left + cyBase;
					//dy	=	-1 * iLine * pxrc->guide.cyBox;
					dy	=	-cyBox;
					//TranslateFrame (pLineBrk->pLine[iLine].ppFrame[iFrm], dx, dy);
					TranslateFrame (pGlyph->frame, dx, dy);
				}
			}
			
			xShift	+=	(pLineBrk->pLine[iLine].rect.right - pLineBrk->pLine[iLine].rect.left + 
				2 * pxrc->guide.cyBase);
		}
	}

	//SaveGlyph(pxrc->pGlyph);

	*piYdev = YDeviation(pxrc->pGlyph);
	ret = InfProcessHRC(hrc, *piYdev);
	if (HRCR_OK != ret)
	{
		goto failure;
	}

	g_iPrint	=	pxrc->nfeatureset->iPrint;

	return pxrc;

failure:
	if (hrc)
	{
		DestroyHRC(hrc);
	}

	return NULL;
}
// gets the TDNN cost of a specific word. we assue that the XRC still has the NNOuput of this piece of ink
int FindWordBoundries (BOOL bGuide, GUIDE *lpGuide, GLYPH *pGlyph, unsigned char *pszTarget)
{
	XRC			*pxrc;
	int			cSegment;
	int			aActivations[512], cLen;
	int			iCh, iNewCost, i, j, k, cRemainSeg, iBest, iCost, iSpaceCost, iNoSpaceCost;
	int			iNewAct, iContAct, cNoSpaceLen;
	REAL		*pCol;
	NFEATURE	*pFeat, *apFeatArray[256];
	BOOL		bNew, bCont, bSpaceBefore, bFirstSegment;
	unsigned char		*p;
	DTWNODE		**ppNode	=	NULL;
	int			*pcNode		=	NULL;
	int			iRet		=	-1;
	int			yDev		=	-1;
	BOOL		bLineStart;
	LINEBRK		LineBrk;

	memset (&LineBrk, 0, sizeof (LineBrk));

	// remove the spaces
	cNoSpaceLen	=	cLen	=	strlen (pszTarget);

	p	=	pszTarget;
	while ((*p) && (p = strchr (p, ' ')))
	{
		cNoSpaceLen--;
		p++;
	}

	// Get inferno activation on the ink
	pxrc = getNNAct(bGuide, lpGuide, pGlyph, &yDev, &LineBrk);
	if (!pxrc)
	{
		goto exit;
	}

	cSegment = pxrc->nfeatureset->cSegment;
	pFeat =	pxrc->nfeatureset->head;

	// alloc memo and init it
	pcNode	=	(int *) ExternAlloc (cSegment * sizeof (int));
	if (!pcNode)
		goto exit;

	ppNode	=	(DTWNODE **) ExternAlloc (cSegment * sizeof (DTWNODE *));
	if (!ppNode)
		goto exit;

	memset (ppNode, 0, cSegment * sizeof (DTWNODE *));

	// Initialize to max values to guard against unsupporetd characters
	for (i = 0 ; i < sizeof(aActivations) / sizeof(aActivations[0]) ; ++i)
	{
		aActivations[i] = 4096;
	}

	
	// for all segments
	for (i = 0, pCol = pxrc->NeuralOutput; i < cSegment; i++, pCol	+= gcOutputNode, pFeat = pFeat->next)
	{
		int	l;

		apFeatArray[i]	=	pFeat;

		// init column i
		InitColumn (aActivations , pCol);

		pcNode[i]	=	0;
		ppNode[i]	=	NULL;

		bLineStart	=	FALSE;

		// to start a space we have be at the first
		// segment of a stroke
		bFirstSegment	=	IS_FIRST_SEGMENT(pFeat);			

		// for the 1st segment of a stroke
		if (i > 0 && bFirstSegment)
		{
			// is this the 1st stroke of a line
			for (l = 1; l < LineBrk.cLine; l++)
			{
				// if so, inject a high space output
				if	(	LineBrk.pLine[l].cStroke > 0 &&
						LineBrk.pLine[l].pGlyph
					)
				{
					if	(	pFeat->iStroke == LineBrk.pLine[l].pGlyph->frame->iframe ||
							pFeat->iSecondaryStroke == LineBrk.pLine[l].pGlyph->frame->iframe
						)
					{
						iSpaceCost		=	IS_SPACE_NUM * PROB_TO_COST (65535) / IS_SPACE_DEN;
						iNoSpaceCost	=	NOT_SPACE_NUM * PROB_TO_COST (0) / NOT_SPACE_DEN;

						iSpaceCost		=	0;
						iNoSpaceCost	=	65535;

						bLineStart		=	TRUE;

						break;
					}
				}
			}
		}

		// generate the possible nodes at this segment
		if (i == 0)
		{
			pcNode[0]	=	1;

			ppNode[0]	=	(DTWNODE *) ExternAlloc (sizeof (DTWNODE));
			if (!ppNode[0])
				goto exit;

			ppNode[0][0].iCh			=	0;
			ppNode[0][0].iBestPrev		=	-1;
			ppNode[0][0].iBestPathCost	=	0;
			ppNode[0][0].iNodeCost		=	
				NetFirstActivation (aActivations, pszTarget[0]);

			ppNode[0][0].bCont			=	FALSE;
		}
		else
		{
			// # of remaining segments
			cRemainSeg	=	cSegment - i - 1;

			for (j = 0; j < pcNode[i - 1]; j++)
			{
				// are we introducing a new stroke
			
				// check the valididy of starting a new char or continuing
				iCh			=	ppNode[i - 1][j].iCh;

				if (IsVirtualChar (pszTarget[iCh]))
				{
					BYTE	o;

					o			=	BaseVirtualChar(pszTarget[iCh]);
					bCont		=	ContinueChar2Out(o) < 255;
				}
				else
				{
					bCont		=	ContinueChar2Out(pszTarget[iCh]) < 255;
				}

				// continuation
				// we'll only do continuation of this same char
				// only if there are enough segments to hold the rest
				// of the chars
				if	(	!bLineStart && 
						bCont && 
						cRemainSeg >= (cNoSpaceLen - ppNode[i - 1][j].iCh - 1)
					)
				{			
					iNewCost	=	ppNode[i - 1][j].iBestPathCost + 
						ppNode[i - 1][j].iNodeCost;

					// get the score of continuing that char
					iContAct	=	
						NetContActivation (aActivations, pszTarget[iCh]);

					if (bFirstSegment)
						iContAct += iNoSpaceCost;

					// did we have that char before
					for (k = 0; k < pcNode[i]; k++)
					{
						if (ppNode[i][k].iCh	==	iCh)
							break;
					}

					// we have to create a new one
					if (k == pcNode[i])
					{
						if (!(pcNode[i] % NODE_ALLOC_BLOCK))
						{
							ppNode[i]	=	(DTWNODE *) ExternRealloc (ppNode[i], 
								(pcNode[i] + NODE_ALLOC_BLOCK) * sizeof (DTWNODE));

							if (!ppNode[i])
								goto exit;
						}

						pcNode[i]++;

						ppNode[i][k].iCh			=	iCh;
						ppNode[i][k].iBestPrev		=	j;

						ppNode[i][k].iNodeCost		=	iContAct;

						ppNode[i][k].iBestPathCost	=	iNewCost;

						ppNode[i][k].bCont	=	TRUE;
					}
					// is this a better path to the node the we found
					else
					if	( (ppNode[i][k].iBestPathCost + ppNode[i][k].iNodeCost) > 
						  (iContAct + iNewCost)
						)
					{
						ppNode[i][k].iBestPrev		=	j;

						ppNode[i][k].iNodeCost		=	iContAct;

						ppNode[i][k].iBestPathCost	=	iNewCost;

						ppNode[i][k].bCont	=	TRUE;
					}

					
				} // continuation

				bNew		=	TRUE;
			
				// the next char
				if (iCh < (cLen - 1))
				{
					iCh			=	ppNode[i - 1][j].iCh + 1;

					while (pszTarget[iCh] == ' ' && pszTarget[iCh])
						iCh++;

					if (iCh > 1 && pszTarget[iCh - 1] == ' ')
						bSpaceBefore	=	TRUE;
					else
						bSpaceBefore	=	FALSE;

					if (!bSpaceBefore || bFirstSegment)
					{
						iNewCost	=	ppNode[i - 1][j].iBestPathCost + 
							ppNode[i - 1][j].iNodeCost;

						if (bSpaceBefore)
							iNewCost	+=	iSpaceCost;
						else
							iNewCost	+=	iNoSpaceCost;

						// get the score of starting a new char
						iNewAct	=	
							NetFirstActivation (aActivations, pszTarget[iCh]);

						if (bSpaceBefore)
							iNewAct	+=	iSpaceCost;

						// did we have that char before
						for (k = 0; k < pcNode[i]; k++)
						{
							if (ppNode[i][k].iCh	==	iCh)
								break;
						}
						
						// we have to create a new one
						if (k == pcNode[i])
						{
							if (!(pcNode[i] % NODE_ALLOC_BLOCK))
							{
								ppNode[i]	=	(DTWNODE *) ExternRealloc (ppNode[i], 
									(pcNode[i] + NODE_ALLOC_BLOCK) * sizeof (DTWNODE));

								if (!ppNode[i])
									goto exit;
							}

							pcNode[i]++;

							ppNode[i][k].iCh			=	iCh;
							ppNode[i][k].iBestPrev		=	j;

							ppNode[i][k].iNodeCost		=	iNewAct;

							ppNode[i][k].iBestPathCost	=	iNewCost;

							ppNode[i][k].bCont				=	FALSE;
						}
						// is this a better path to the node the we found
						else
						if	( (ppNode[i][k].iBestPathCost + ppNode[i][k].iNodeCost) > 
							  (iNewAct + iNewCost)
							)
						{
							ppNode[i][k].iBestPrev		=	j;
							ppNode[i][k].iNodeCost		=	iNewAct;
							ppNode[i][k].iBestPathCost	=	iNewCost;

							ppNode[i][k].bCont				=	FALSE;
						}

						
					}
				} // next char
			} // j
		} // i > 0

		// no new nodes added ==> fail
		if (!pcNode[i])
			goto exit;

		// get the space and not space cost for the next segment
		iSpaceCost		=	IS_SPACE_NUM * PROB_TO_COST (pCol[BeginChar2Out(' ')]) / IS_SPACE_DEN;
		iNoSpaceCost	=	NOT_SPACE_NUM * PROB_TO_COST (65535 - pCol[BeginChar2Out(' ')]) / NOT_SPACE_DEN;
	} // i

	// let's look at the last segment and back track the optimal solution

	// find the best
	iBest		=	0;
	iNewCost	=	ppNode[cSegment - 1][0].iBestPathCost + 
		ppNode[cSegment - 1][0].iNodeCost;

	for (j = 1; j < pcNode[cSegment - 1]; j++)
	{
		iCost	=	ppNode[cSegment - 1][j].iBestPathCost + 
		ppNode[cSegment - 1][j].iNodeCost;

		if (iNewCost > iCost)
		{
			iNewCost	=	iCost;
			iBest		=	j;
		}	
	}

	iRet	=	iNewCost;

	for (i = cSegment - 1; i >= 0; i--)
	{
		// this cannot happen
		if (pszTarget[ppNode[i][iBest].iCh] == ' ')
		{
			MessageBox (GetActiveWindow(), TEXT("A Space appeared in the DTW"), TEXT("This Should not happen"), MB_OK | MB_ICONERROR);
			return -1;
		}

		if (AddStroke2Mapping (ppNode[i][iBest].iCh, apFeatArray[i]->iStroke) == -1)
		{
			MessageBox (GetActiveWindow(), TEXT("A char was not found in the word mapping"), TEXT("This Should not happen"), MB_OK | MB_ICONERROR);
			return -1;
		}

		if (apFeatArray[i]->iSecondaryStroke > 0)
			AddStroke2Mapping (ppNode[i][iBest].iCh, apFeatArray[i]->iSecondaryStroke);
	
		// featurize for space
		/*
		if (	i > 0 && 
				IS_FIRST_SEGMENT(apFeatArray[i])
			)
		{
			BOOL	bSpc;

			if (ppNode[i][iBest].bCont)
				bSpc	=	FALSE;
			else
			{
				if (!ppNode[i][iBest].iCh)
					bSpc = FALSE;
				else
				if (pszTarget[ppNode[i][iBest].iCh - 1] == ' ')
					bSpc	=	TRUE;
				else
					bSpc	=	FALSE;
			}

			FeaturizeSpace (pxrc, apFeatArray, i, bSpc);
		}
		*/

		iBest	=	ppNode[i][iBest].iBestPrev;
	}

exit:
	FreeLines (&LineBrk);

	// free allocated memory
	if (ppNode)
	{
		for (i = 0; i < cSegment; i++)
		{
			if (ppNode[i])
				ExternFree (ppNode[i]);
		}

		ExternFree (ppNode);
	}

	if (pcNode)
		ExternFree (pcNode);

	if (pxrc)
	{
		DestroyHRC((HRC)pxrc);
	}
	return yDev;
}


int FindMapping (WORDMAP *pMap)
{
	int			i;
	
	for (i = 0; i < g_cWordAnswer; i++)
	{
		if (pMap->cStrokes != g_aWordMap[i].cStrokes)
			continue;

		if (!memcmp (g_aWordMap[i].piStrokeIndex, pMap->piStrokeIndex, pMap->cStrokes * sizeof (pMap->piStrokeIndex[0])))
			return i;
	}

	return -1;
}

int ComputePromptWordMaps (BOOL bGuide, GUIDE *lpGuide, GLYPH *pGlyph)
{
	int		i;
	GLYPH	*pGlyphTmp;
	int		iRet;

	pGlyphTmp = CopyGlyph(pGlyph);
	
	// we need to prepare the word mapping
	for (i = 0; i < g_cWordAnswer; i++)
	{
		g_aWordMap[i].cStrokes		=	0;
		g_aWordMap[i].piStrokeIndex	=	NULL;

		g_aWordMap[i].start	=	g_pszWordAnswer[i]	-	g_szAnswer;
		g_aWordMap[i].len	=	strlen (g_pszWordAnswer[i]);
	}

	iRet = FindWordBoundries (bGuide, lpGuide, pGlyphTmp, g_szInkAnswer);

	DestroyFramesGLYPH(pGlyphTmp);
	DestroyGLYPH(pGlyphTmp);

	return iRet;

}

void FreeWordMaps ()
{
	int	i;

	for (i = 0; i < g_cWordAnswer; i++)
	{
		if (g_aWordMap[i].piStrokeIndex)
		{
			ExternFree (g_aWordMap[i].piStrokeIndex);
			g_aWordMap[i].len	=	0;
		}
	}
}

__declspec(dllexport) int WINAPI HwxSetAnswer(char *sz)
{
	unsigned char	*p;

	strcpy (g_szAnswer, sz);
	strcpy (g_szInkAnswer, sz);

	p	=	sz	+	strlen(sz) + 1;
	strcpy (g_szAnsFileName, p);

	p	+=	strlen(p) + 1;
	g_iAnsPanel	=	*((int *)p);

	p	+=	sizeof(int);
	g_iAnsSample	=	*((int *)p);

	// remove any trailing spaces
	p	=	g_szAnswer + strlen (g_szAnswer) - 1;
	while (p > g_szAnswer && (*p)== ' ')
		p--;

	*(p + 1)	=	'\0';

	// remove any leading spaces
	p	=	g_szAnswer;
	while (p && (*p) == ' ')
		p++;

	// now we need to split the answet into words
	g_cWordAnswer						=	1;
	g_pszWordAnswer[g_cWordAnswer - 1]	=	p;
	for (; *p; p++)
	{
		if ((*p) == ' ' || (*p) == '\t')
		{
			(*p)	=	0;

			g_pszWordAnswer[g_cWordAnswer]	=	p + 1;
			g_cWordAnswer++;
		}
	}

	g_iCurAnsWord	=	0;

	return 0;
}

// gets the TDNN cost of a specific word. we assue that the XRC still has the NNOuput of this piece of ink
int FindStringCost (XRC *pxrc, int iStartStrk, int iEndStrk, unsigned char *pszTarget)
{
	int			aActivations[512], cLen;
	int			iCh, iNewCost, i, j, k, cRemainSeg, iBest, iCost, iPrevSpaceCost;
	int			iNewAct, iContAct, cNoSpaceLen;
	REAL		*pCol;
	NFEATURE	*pFeat	=	pxrc->nfeatureset->head, *apFeatArray[256];
	BOOL		bNew, bCont, bSpaceNext;
	unsigned char		*p;
	DTWNODE		**ppNode	=	NULL;
	int			*pcNode		=	NULL;
	int			iRet		=	-1;
	int			iStartSeg, iEndSeg, cSeg;
	
	// remove the spaces
	cNoSpaceLen	=	cLen	=	strlen (pszTarget);

	p	=	pszTarget;
	while ((*p) && (p = strchr (p, ' ')))
	{
		cNoSpaceLen--;
		p++;
	}

	// determine the 1st and the last segment 
	iStartSeg	=	pxrc->nfeatureset->cSegment;
	iEndSeg		=	-1;
	for (i = 0, pFeat	=	pxrc->nfeatureset->head; i < pxrc->nfeatureset->cSegment; i++, pFeat = pFeat->next)
	{
		if (pFeat->iStroke == iStartStrk || pFeat->iSecondaryStroke == iStartStrk)
			iStartSeg	=	min (iStartSeg, i);

		if (pFeat->iStroke == iEndStrk || pFeat->iSecondaryStroke == iEndStrk)
			iEndSeg		=	max (iEndSeg, i);
	}

	if (iStartSeg == pxrc->nfeatureset->cSegment || iEndSeg == -1 || iEndSeg < iStartSeg)
		return -1;

	// now move to the 1st segment
	pCol	= pxrc->NeuralOutput;
	pFeat	= pxrc->nfeatureset->head;
	for (i = 0; i < iStartSeg; i++)
	{
		pCol	+= gcOutputNode;
		pFeat	= pFeat->next;
	}
	cSeg	=	iEndSeg	- iStartSeg + 1;


	// alloc memo and init it
	pcNode	=	(int *) ExternAlloc (cSeg * sizeof (int));
	if (!pcNode)
		goto exit;

	ppNode	=	(DTWNODE **) ExternAlloc (cSeg * sizeof (DTWNODE *));
	if (!ppNode)
		goto exit;

	memset (ppNode, 0, cSeg * sizeof (DTWNODE *));

	// Initialize to max values to guard against unsupporetd characters
	for (i = 0 ; i < sizeof(aActivations) / sizeof(aActivations[0]) ; ++i)
	{
		aActivations[i] = 4096;
	}

	
	// for all segments
	for (i = 0; i < cSeg; i++, pCol	+= gcOutputNode, pFeat = pFeat->next)
	{
		apFeatArray[i]	=	pFeat;

		// init column i
		InitColumn (aActivations , pCol);

		pcNode[i]	=	0;
		ppNode[i]	=	NULL;

		// generate the possible nodes at this segment
		if (i == 0)
		{
			pcNode[0]	=	1;

			ppNode[0]	=	(DTWNODE *) ExternAlloc (sizeof (DTWNODE));
			if (!ppNode[0])
				goto exit;

			ppNode[0][0].iCh			=	0;
			ppNode[0][0].iBestPrev		=	-1;
			ppNode[0][0].iBestPathCost	=	0;
			ppNode[0][0].iNodeCost		=	
				NetFirstActivation (aActivations, pszTarget[0]);
		}
		else
		{
			// # of remaining segments
			cRemainSeg	=	cSeg - i - 1;

			for (j = 0; j < pcNode[i - 1]; j++)
			{
				// are we introducing a new stroke
			
				// check the valididy of starting a new char or continuing
				iCh			=	ppNode[i - 1][j].iCh;
				bCont		=	ContinueChar2Out(pszTarget[iCh]) < 255;

				// continuation
				// we'll only do continuation of this same char
				// only if there are enough segments to hold the rest
				// of the chars
				if	(bCont && cRemainSeg >= (cNoSpaceLen - ppNode[i - 1][j].iCh - 1))
				{			
					iNewCost	=	ppNode[i - 1][j].iBestPathCost + 
						ppNode[i - 1][j].iNodeCost;

					// get the score of continuing that char
					iContAct	=	
						NetContActivation (aActivations, pszTarget[iCh]);

					// did we have that char before
					for (k = 0; k < pcNode[i]; k++)
					{
						if (ppNode[i][k].iCh	==	iCh)
							break;
					}

					// we have to create a new one
					if (k == pcNode[i])
					{
						if (!(pcNode[i] % NODE_ALLOC_BLOCK))
						{
							ppNode[i]	=	(DTWNODE *) ExternRealloc (ppNode[i], 
								(pcNode[i] + NODE_ALLOC_BLOCK) * sizeof (DTWNODE));

							if (!ppNode[i])
								goto exit;
						}

						pcNode[i]++;

						ppNode[i][k].iCh			=	iCh;
						ppNode[i][k].iBestPrev		=	j;

						ppNode[i][k].iNodeCost		=	iContAct;

						ppNode[i][k].iBestPathCost	=	iNewCost;
					}
					// is this a better path to the node the we found
					else
					if	( (ppNode[i][k].iBestPathCost + ppNode[i][k].iNodeCost) > 
						  (iContAct + iNewCost)
						)
					{
						ppNode[i][k].iBestPrev		=	j;

						ppNode[i][k].iNodeCost		=	iContAct;

						ppNode[i][k].iBestPathCost	=	iNewCost;
					}
				} // continuation

				bNew		=	TRUE;
			
				// the next char
				if (iCh < (cLen - 1))
				{
					iCh			=	ppNode[i - 1][j].iCh + 1;

					while (pszTarget[iCh] == ' ' && pszTarget[iCh])
						iCh++;

					if (iCh > 1 && pszTarget[iCh - 1] == ' ')
						bSpaceNext	=	TRUE;
					else
						bSpaceNext	=	FALSE;
							
					iNewCost	=	ppNode[i - 1][j].iBestPathCost + 
						ppNode[i - 1][j].iNodeCost;

					// get the score of continuing that char
					iNewAct	=	
						NetFirstActivation (aActivations, pszTarget[iCh]);

					if (bSpaceNext)
						iNewAct	+=	iPrevSpaceCost;

					// did we have that char before
					for (k = 0; k < pcNode[i]; k++)
					{
						if (ppNode[i][k].iCh	==	iCh)
							break;
					}
					
					// we have to create a new one
					if (k == pcNode[i])
					{
						if (!(pcNode[i] % NODE_ALLOC_BLOCK))
						{
							ppNode[i]	=	(DTWNODE *) ExternRealloc (ppNode[i], 
								(pcNode[i] + NODE_ALLOC_BLOCK) * sizeof (DTWNODE));

							if (!ppNode[i])
								goto exit;
						}

						pcNode[i]++;

						ppNode[i][k].iCh			=	iCh;
						ppNode[i][k].iBestPrev		=	j;

						ppNode[i][k].iNodeCost		=	iNewAct;

						ppNode[i][k].iBestPathCost	=	iNewCost;
					}
					// is this a better path to the node the we found
					else
					if	( (ppNode[i][k].iBestPathCost + ppNode[i][k].iNodeCost) > 
						  (iNewAct + iNewCost)
						)
					{
						ppNode[i][k].iBestPrev		=	j;
						ppNode[i][k].iNodeCost		=	iNewAct;
						ppNode[i][k].iBestPathCost	=	iNewCost;
					}
				} // next char
			} // j
		} // i > 0

		// no new nodes added ==> fail
		if (!pcNode[i])
			goto exit;

		// get the space activation
		iPrevSpaceCost	=	NetFirstActivation (aActivations, ' ') * 3;

	} // i

	// let's look at the last segment and back track the optimal solution

	// find the best
	iBest		=	0;
	iNewCost	=	ppNode[cSeg - 1][0].iBestPathCost + 
		ppNode[cSeg - 1][0].iNodeCost;

	for (j = 1; j < pcNode[cSeg - 1]; j++)
	{
		iCost	=	ppNode[cSeg - 1][j].iBestPathCost + 
		ppNode[cSeg - 1][j].iNodeCost;

		if (iNewCost > iCost)
		{
			iNewCost	=	iCost;
			iBest		=	j;
		}	
	}

	iRet	=	iNewCost;

exit:
	// free allocated memory
	if (ppNode)
	{
		for (i = 0; i < cSeg; i++)
		{
			if (ppNode[i])
				ExternFree (ppNode[i]);
		}

		ExternFree (ppNode);
	}

	if (pcNode)
		ExternFree (pcNode);

	return iRet;
}

// Get the TDNN cost of a string defined by a group of wordmaps
int GetInfernosCost (XRC *pxrcInferno, int cmap, WORDMAP *pmap)
{
	int	i, iStrtStrk, iEndStrk;
	unsigned char	aszStrng[256];

	if (pmap->cStrokes <= 0 || pmap->alt.cAlt <= 0)
		return 9999999;

	iStrtStrk	=	pmap->piStrokeIndex[0];
	iEndStrk	=	pmap[cmap - 1].piStrokeIndex[pmap[cmap - 1].cStrokes - 1];

	for (i = 0, aszStrng[0] = '\0'; i < cmap; i++, pmap++)
	{
		if (i)
			strcat (aszStrng, " ");

		strcat (aszStrng, pmap->alt.aAlt[0].szWord);
	}

	return FindStringCost (pxrcInferno, iStrtStrk, iEndStrk, aszStrng);
}


BOOL IsCorrectBreak (int iLine, int cStrk, int *piStroke, int *piPrint)
{
	int	iWord, cWordStrk, iStrk, iWordStrk, iStrkOff;

	(*piPrint)	=	g_iPrint;
	iStrkOff	=	g_aiLineStartStrk[iLine];

	for (iWord = 0; iWord < g_cWordAnswer; iWord++)
	{
		cWordStrk	=	0;

		for (iWordStrk = 0; iWordStrk < g_aWordMap[iWord].cStrokes; iWordStrk++)
		{
			for (iStrk = 0; iStrk < cStrk; iStrk++)
			{
				if	(	(iStrkOff + piStroke[iStrk]) == 
						g_aWordMap[iWord].piStrokeIndex[iWordStrk]
					)
				{
					break;
				}
			}

			// found stroke
			if (iStrk < cStrk)
			{
				cWordStrk++;
			}
			// did not find stroke
			else
			{
				// did we get any strokes before, if so exit with failure
				if (cWordStrk > 0)
				{
					return FALSE;
				}
			}
		}
	}

	return TRUE;
}

void SavePrototypeStat (	unsigned char	chChar, 
							unsigned char	chPromptChar, 
							int				iProtoIdx
						)
{
	static FILE *fp	=	NULL;

	if (chPromptChar == 0)
	{
		/*
		char	asz[256];

		sprintf (asz, "File: %s, Panel: %d, Char: %d, Hex: %x",
			g_szAnsFileName,
			g_iAnsPanel,
			g_iAnsSample,
			chPromptChar);

		MessageBox (GetActiveWindow(), asz, "Found it", MB_OK);
		*/

		return;
	}

	if (!fp)
	{
		fp	=	fopen ("protostats.txt", "wt");
		if (!fp)
		{
			return;
		}
	}

	fprintf (fp, "%c %d %s %d %d\n",
		chPromptChar,
		iProtoIdx,
		g_szAnsFileName,
		g_iAnsPanel,
		g_iAnsSample);

	fflush (fp);
}

void SaveSNNData (unsigned char chClass, _UCHAR *pSNNFeat, _UCHAR *pNetOut)
{
	static	FILE	*fp			=	NULL;
	_UCHAR			*pCh,
					*pOut2Char	= (p_UCHAR)MLP_NET_SYMCO;
	int				i,
					iClass;
	BOOL			bRecog;

	// find the output
	pCh		=	strchr (pOut2Char, chClass);
	if (!pCh)
		return;

	iClass	=	pCh - pOut2Char;

	// is this the highest output
	bRecog	=	TRUE;
	for (i = 0; i < MLP_NET_NUMOUTPUTS; i++)
	{
		if (pNetOut[pOut2Char[i]] > pNetOut[chClass])
		{
			bRecog	=	FALSE;
			break;
		}
	}

	// open file if needed
	if (!fp)
	{
		fp	=	fopen ("snnfeat.txt", "wt");
		if (!fp)
		{
			return;
		}
	}

	// write current nets behaviour
	fprintf (fp, "%d\t{", bRecog ? 1 : 0);

	for (i = 0; i < PC_NUM_COEFF + GBM_NCOEFF; i++)
	{
		fprintf (fp, "%d%c", 
			pSNNFeat[i],
			i == (PC_NUM_COEFF + GBM_NCOEFF - 1) ? '}' : ' ');
	}

	fprintf (fp, "\t{%d}\n", iClass);

	fflush (fp);
}

void SaveAsBitMap (FILE *fp, int iVal, int cVal)
{
	int		i	=	cVal, 
			j	=	iVal;
	
	while (i > 1)
	{
		fprintf (fp, "%d", (j % 2) == 1 ? 65535 : 0);

		i	=	i >> 1;
		j	=	j >> 1;

		if (i > 1)
		{
			fprintf (fp, ", ");
		}
	}
}

void SaveXRData (unsigned char chClass, int iXRSt, int cXR, p_xrdata_type xrdata)
{
	static	FILE	*afp[20]			=	{
												NULL, NULL, NULL, NULL, NULL,
												NULL, NULL, NULL, NULL, NULL,
												NULL, NULL, NULL, NULL, NULL,
												NULL, NULL, NULL, NULL, NULL,
											};

	FILE			*fp;

	_UCHAR			*pCh,
					*pOut2Char	= (p_UCHAR)MLP_NET_SYMCO;

	int				i,
					iClass;
	
	// find the output
	pCh		=	strchr (pOut2Char, chClass);
	if (!pCh)
		return;

	iClass	=	pCh - pOut2Char;

	// open file if needed
	if (!afp[cXR - 1])
	{
		char	asz[256];

		sprintf (asz, "xrdata%d.txt", cXR); 
		afp[cXR - 1]	=	fopen (asz, "wt");
		if (!afp[cXR - 1])
		{
			return;
		}
	}

	fp	=	afp[cXR - 1];

	//fprintf (fp, "%c\t%.4x\t%d\t{", 
	//	chClass, chClass, cXR);

	fprintf (fp, "{");

	for (i = 0; i < cXR; i++)
	{
		SaveAsBitMap (fp, (*xrdata->xrd)[i + iXRSt].xr.type, 64);
		fprintf (fp, ", ");

		SaveAsBitMap (fp, (*xrdata->xrd)[i + iXRSt].xr.height, 16);
		fprintf (fp, ", ");

		SaveAsBitMap (fp, (*xrdata->xrd)[i + iXRSt].xr.shift, 16);
		fprintf (fp, ", ");

		SaveAsBitMap (fp, (*xrdata->xrd)[i + iXRSt].xr.depth, 16);
		fprintf (fp, ", ");

		SaveAsBitMap (fp, (*xrdata->xrd)[i + iXRSt].xr.orient, 32);
		fprintf (fp, ", ");

		// save penalty
		fprintf (fp, "%d, ", ((*xrdata->xrd)[i + iXRSt].xr.penalty << 12) - 1);

		// attrib
		fprintf (fp, "%d", ((*xrdata->xrd)[i + iXRSt].xr.attrib & TAIL_FLAG) ? 65535 : 0);

		if (i == (cXR - 1))
		{
			fprintf (fp, "}");
		}
		else
		{
			fprintf (fp, ", ");
		}
	}

	fprintf (fp, "\t{%d}\n", iClass);

	fflush (fp);

}

void SaveCharDetXRData (BOOL bChar, int iXRSt, int cXR, p_xrdata_type xrdata)
{
	static	FILE	*afp[20]			=	{
												NULL, NULL, NULL, NULL, NULL,
												NULL, NULL, NULL, NULL, NULL,
												NULL, NULL, NULL, NULL, NULL,
												NULL, NULL, NULL, NULL, NULL,
											};

	FILE			*fp;
	int				i;
	
	// open file if needed
	if (!afp[cXR - 1])
	{
		char	asz[256];

		sprintf (asz, "xrchardet%d.txt", cXR); 
		afp[cXR - 1]	=	fopen (asz, "wt");
		if (!afp[cXR - 1])
		{
			return;
		}
	}

	fp	=	afp[cXR - 1];

	fprintf (fp, "{"); 

	for (i = 0; i < cXR; i++)
	{
		SaveAsBitMap (fp, (*xrdata->xrd)[i + iXRSt].xr.type, 64);
		fprintf (fp, ", ");

		SaveAsBitMap (fp, (*xrdata->xrd)[i + iXRSt].xr.height, 16);
		fprintf (fp, ", ");

		SaveAsBitMap (fp, (*xrdata->xrd)[i + iXRSt].xr.shift, 16);
		fprintf (fp, ", ");

		SaveAsBitMap (fp, (*xrdata->xrd)[i + iXRSt].xr.depth, 16);
		fprintf (fp, ", ");

		SaveAsBitMap (fp, (*xrdata->xrd)[i + iXRSt].xr.orient, 32);
		fprintf (fp, ", ");

		// save penalty
		fprintf (fp, "%d, ", ((*xrdata->xrd)[i + iXRSt].xr.penalty << 12) - 1);

		// attrib
		fprintf (fp, "%d", ((*xrdata->xrd)[i + iXRSt].xr.attrib & TAIL_FLAG) ? 65535 : 0);

		if (i == (cXR - 1))
		{
			fprintf (fp, "}");
		}
		else
		{
			fprintf (fp, ", ");
		}
	}

	fprintf (fp, "\t{%d}\n", bChar ? 1 : 0);

	fflush (fp);
}

BOOL SavePrototypes (p_rec_inst_type pri, rc_type _PTR prc, p_xrlv_data_type  xd)
{
	p_xrdata_type				xrdata		=	xd->xrdata;

	_INT						i, ixrEnd, cProp, iProp, iCorrProp;

	_UCHAR						iPos, iIdx, cLen, cCorrLen;

	p_xrlv_var_data_type_array	pxrlvs;
	p_xrlv_var_data_type		pNode,
								pCorrNode;

	int							aiXRCorr[256];
	int							iXRSt, iXREnd, cXR;
	BOOL						bRet	=	FALSE;

	// if we are not in word mode, exit
	if ((pri->flags & PEG_RECFL_NSEG) == 0)
	{
		goto exit;
	}	
	
	// look at the last phase of the beam
	iPos	=	xd->npos - 1;
	cProp	=	xd->pxrlvs[iPos]->nsym;
	
	// do we have any proposals
	if (cProp > 0)
	{
		// go thru all the proposals, find out the position of the correct answer
		for (iProp = 0; iProp < cProp; iProp++)
		{
			iPos	=	xd->npos - 1;
			pxrlvs	=	xd->pxrlvs[iPos];

			pNode	=	pxrlvs->buf + xd->order[iProp];

			// found the correct answer
			if (pNode && !strcmp (pNode->word, g_szAnswer))
			{
				// sometimes bear screws up and pNode->len != strlen (pNode->word)
				// so if this happened we will bail out
				if (pNode->len != strlen (pNode->word))
				{
					goto exit;
				}

				break;
			}
		}

		// if we did not find the right answer, abort
		if (iProp == cProp)
		{
			goto exit;
		}

		
		// save the postion and node of the correct answer
		iCorrProp	=	iProp;
		pCorrNode	=	pNode;

		// compute and save the xr ending positions of characters
		// in the node corresponding to the correct answer
		iPos		=	xd->npos - 1;
		iIdx		=	iCorrProp;
		pxrlvs		=	xd->pxrlvs[iPos];
		cCorrLen	=	pxrlvs->buf[xd->order[iIdx]].len;

		while (iPos > 0)
		{
			// sort it
			XrlvSortXrlvPos(iPos, xd);

			pxrlvs		=	xd->pxrlvs[iPos];
			ixrEnd		=	xd->unlink_index[iPos];
			pNode		=	pxrlvs->buf + xd->order[iIdx];
			i			=	pNode->len - 1;

			aiXRCorr[i]	=	ixrEnd;

			// point back to the previous position
			iPos		=	pNode->st;
			iIdx		=	pNode->np;
		}

		// sanity check that we have reached the 1st char
		if (i != 0)
		{
			goto exit;
		}

		// featurize and save
		cLen	=	strlen (g_szAnswer);

		iXRSt		=	0;

		for (i = 0; i < cLen; i++)
		{
			iXREnd		=	aiXRCorr[i];			
			cXR			=	iXREnd - iXRSt + 1;

			SaveXRData (g_szAnswer[i], iXRSt, cXR, xd->xrdata);
			
			iXRSt	=	aiXRCorr[i] + 1;
		}
	}
	
	bRet	=	TRUE;

exit:
	return bRet;
}


void ConstrainLM (BEARXRC *pxrc)
{
	HWL		hwl;

	hwl = CreateHWL (NULL, g_szAnswer, WLT_STRING, 0);
	if (!hwl)
		return;

	BearSetWordlistHRC ((HRC)pxrc, hwl);
	BearSetHwxFactoid ((HRC)pxrc, L"WORDLIST");
	BearSetHwxFlags ((HRC)pxrc, pxrc->dwLMFlags | RECOFLAG_COERCE);
}

void RealeaseWL (BEARXRC *pxrc)
{
	if (pxrc->hwl)
	{
		BearDestroyHWL (pxrc->hwl);

		pxrc->hwl	=	NULL;
	}
}

extern int Convert2BitMap (int iVal, int cVal, BYTE *pFeat);

extern int	GetXRNetScore (unsigned char ch, int iXRSt, int cXR, p_xrdata_type xrdata);


void	AddFileEntry (BOOL bOld, BOOL bNew)
{
	static	FILE	*fp	=	NULL;

	if (!fp)
	{
		fp	=	fopen ("comp.txt", "wt");
		if (!fp)
		{
			return;
		}
	}

	fprintf (fp, "%d %d\n", bOld ? 1 : 0, bNew ? 1 : 0);
	fflush (fp);
}

/*
BOOL EvalXRNet (p_rec_inst_type pri, rc_type _PTR prc, p_xrlv_data_type  xd)
{
	p_xrdata_type				xrdata		=	xd->xrdata;

	_INT						i, 
								cProp, 
								iProp, 
								iCorrProp;

	_UCHAR						**ppOrder	=	NULL, 
								iPos, 
								iIdx, 
								cLen,
								*pszAlt;

	p_xrlv_var_data_type_array	pxrlvs;
	p_xrlv_var_data_type		pNode,
								pFinalNode;

	int							iXRSt, 
								iXREnd, 
								cXR, 
								iBestXRNetScore, 
								iBestXRNetProp;

	BOOL						bRet	=	FALSE;

	int							iXRNetScore;
	int							aiXR[256];

	// if we are not in word mode, exit
	if ((pri->flags & PEG_RECFL_NSEG) == 0)
	{
		goto exit;
	}	
	
	// look at the last phase of the beam
	iPos	=	xd->npos - 1;
	cProp	=	xd->pxrlvs[iPos]->nsym;
	
	// do we have any proposals
	if (cProp > 0)
	{
		// go thru all the proposals, find out the position of the correct answer
		for (iProp = 0; iProp < cProp; iProp++)
		{
			iPos	=	xd->npos - 1;
			pxrlvs	=	xd->pxrlvs[iPos];

			pNode	=	pxrlvs->buf + xd->order[iProp];

			// found the correct answer
			if (pNode && !strcmp (pNode->word, g_szAnswer))
			{
				break;
			}
		}

		// if we did not find the right answer, abort
		if (iProp == cProp)
		{
			goto exit;
		}

		// save the correct proposal
		iCorrProp	=	iProp;

		// save the orders at all positions
		ppOrder	=	(_UCHAR **)ExternAlloc (xd->npos * sizeof (_UCHAR *));
		if (!ppOrder)
			goto exit;

		memset (ppOrder, 0, xd->npos * sizeof (_UCHAR *));

		for (iPos = 0; iPos < xd->npos; iPos++)
		{
			ppOrder[iPos]	=	(_UCHAR *)
				ExternAlloc (xd->pxrlvs[iPos]->nsym * sizeof (_UCHAR));

			if (!ppOrder[iPos])
				goto exit;

			// sort it
			XrlvSortXrlvPos(iPos, xd);

			memcpy (ppOrder[iPos], 
				xd->order,
				xd->pxrlvs[iPos]->nsym * sizeof (_UCHAR));
		}

		iBestXRNetScore	=	-1;

		// go thru all proposals
		// go thru all the proposals
		for (iProp = 0; iProp < cProp; iProp++)
		{
			iPos		=	xd->npos - 1;
			iIdx		=	iProp;
			pxrlvs		=	xd->pxrlvs[iPos];
			cLen		=	pxrlvs->buf[ppOrder[iPos][iIdx]].len;
			pszAlt		=	pxrlvs->buf[ppOrder[iPos][iIdx]].word;
			pFinalNode	=	pxrlvs->buf + ppOrder[iPos][iIdx];

			while (iPos > 0)
			{
				pxrlvs		=	xd->pxrlvs[iPos];
				iXREnd		=	xd->unlink_index[iPos];
				pNode		=	pxrlvs->buf + ppOrder[iPos][iIdx];
				i			=	pNode->len - 1;

				aiXR[i]		=	iXREnd;

				// point back to the previous position
				iPos		=	pNode->st;
				iIdx		=	pNode->np;
			}

			// sanity check that we have reached the 1st char
			if (i != 0)
			{
				goto exit;
			}

			// featurize and save
			iXRSt			=	0;
			iXRNetScore		=	0;
			
			for (i = 0; i < cLen; i++)
			{
				iXREnd		=	aiXR[i];			
				cXR			=	iXREnd - iXRSt + 1;

				iXRNetScore	+=	GetXRNetScore (pszAlt[i], iXRSt, cXR, xd->xrdata);

				iXRSt		=	aiXR[i] + 1;
			}

			iXRNetScore		/=	cLen;

			if (iXRNetScore > iBestXRNetScore)
			{
				iBestXRNetScore	=	iXRNetScore;
				iBestXRNetProp	=	iProp;
			}

			pFinalNode->sw	=	(int)((4 * pFinalNode->sw + iXRNetScore) / 4);
		}

		AddFileEntry (iCorrProp == 0, iBestXRNetScore != -1 && iBestXRNetProp == iCorrProp);
	}
	
	bRet	=	TRUE;

exit:
	// free the order buffers
	if (ppOrder)
	{
		for (iPos = 0; iPos < xd->npos; iPos++)
		{
			if (ppOrder[iPos])
				ExternFree (ppOrder[iPos]);
		}

		ExternFree (ppOrder);
	}

	return bRet;
}
*/

BOOL XRLVTune (p_rec_inst_type pri, rc_type _PTR prc, p_xrlv_data_type  xd)
{
	p_xrdata_type				xrdata		=	xd->xrdata;

	_INT						i, 
								cProp, 
								iProp, 
								iCorrProp;

	_UCHAR						**ppOrder	=	NULL, 
								iPos, 
								iIdx, 
								cLen,
								*pszAlt;

	p_xrlv_var_data_type_array	pxrlvs;
	p_xrlv_var_data_type		pNode,
								pFinalNode;

	BOOL						bRet	=	FALSE;

	int							iTotHMM, 
								iTotOtherPen, 
								iTotLexPen, 
								iTotNN, 
								iTotXRNet,
								iTotBoxPen;

	static	FILE				*fpTune	=	NULL;

	if (!fpTune)
	{
		fpTune	=	fopen ("beartune.txt", "wt");
		if (!fpTune)
		{
			goto exit;
		}
	}

	// if we are not in word mode, exit
	if ((pri->flags & PEG_RECFL_NSEG) == 0)
	{
		goto exit;
	}	
	
	// look at the last phase of the beam
	iPos	=	xd->npos - 1;
	cProp	=	xd->pxrlvs[iPos]->nsym;
	
	// do we have any proposals
	if (cProp > 0)
	{
		// go thru all the proposals, find out the position of the correct answer
		for (iProp = 0; iProp < cProp; iProp++)
		{
			iPos	=	xd->npos - 1;
			pxrlvs	=	xd->pxrlvs[iPos];

			pNode	=	pxrlvs->buf + xd->order[iProp];

			// found the correct answer
			if (pNode && !strcmp (pNode->word, g_szAnswer))
			{
				break;
			}
		}

		// if we did not find the right answer, abort
		if (iProp == cProp)
		{
			goto exit;
		}

		// save the correct proposal
		iCorrProp	=	iProp;
		
		// save the orders at all positions
		ppOrder	=	(_UCHAR **)ExternAlloc (xd->npos * sizeof (_UCHAR *));
		if (!ppOrder)
			goto exit;

		memset (ppOrder, 0, xd->npos * sizeof (_UCHAR *));

		for (iPos = 0; iPos < xd->npos; iPos++)
		{
			ppOrder[iPos]	=	(_UCHAR *)
				ExternAlloc (xd->pxrlvs[iPos]->nsym * sizeof (_UCHAR));

			if (!ppOrder[iPos])
				goto exit;

			// sort it
			XrlvSortXrlvPos(iPos, xd);

			memcpy (ppOrder[iPos], 
				xd->order,
				xd->pxrlvs[iPos]->nsym * sizeof (_UCHAR));
		}
		
		fprintf (fpTune, "%d\t", cProp);
		
		// go thru all the proposals
		for (iProp = 0; iProp < cProp; iProp++)
		{
			iTotHMM			=	
			iTotOtherPen	=
			iTotLexPen		=
			iTotNN			=
			iTotBoxPen		=	
			iTotXRNet		=	0;

			iPos			=	xd->npos - 1;
			iIdx			=	iProp;
			pxrlvs			=	xd->pxrlvs[iPos];
			cLen			=	pxrlvs->buf[ppOrder[iPos][iIdx]].len;
			pszAlt			=	pxrlvs->buf[ppOrder[iPos][iIdx]].word;
			pFinalNode		=	pxrlvs->buf + ppOrder[iPos][iIdx];

			while (iPos > 0)
			{
				pxrlvs			=	xd->pxrlvs[iPos];
				pNode			=	pxrlvs->buf + ppOrder[iPos][iIdx];
				i				=	pNode->len - 1;

				iTotXRNet		+=	pNode->iXRScore;
				iTotHMM			+=	pNode->w;
				iTotNN			+=	pNode->ppw;
				iTotOtherPen	+=	pNode->othp;
				iTotLexPen		+=	pNode->lexp;
				iTotBoxPen		+=	pNode->BoxPenalty;

				// point back to the previous position
				iPos		=	pNode->st;
				iIdx		=	pNode->np;
			}

			fprintf (fpTune, "%d %d %d %d %d %d\t", 
				iTotXRNet,
				iTotHMM,
				iTotNN,
				iTotOtherPen,
				iTotLexPen,
				iTotBoxPen);
		}

		fprintf (fpTune, "\t%d\n", iCorrProp);
		fflush (fpTune);
	}
	
	bRet	=	TRUE;

exit:
	// free the order buffers
	if (ppOrder)
	{
		for (iPos = 0; iPos < xd->npos; iPos++)
		{
			if (ppOrder[iPos])
				ExternFree (ppOrder[iPos]);
		}

		ExternFree (ppOrder);
	}

	return bRet;
}

BOOL SaveCharDetectorSamples (p_rec_inst_type pri, rc_type _PTR prc, p_xrlv_data_type  xd)
{
	p_xrdata_type				xrdata		=	xd->xrdata;

	_INT						i, j, cProp, iProp, iCorrProp;

	_UCHAR						iPos, iIdx, cLen, cCorrLen;

	p_xrlv_var_data_type_array	pxrlvs;
	p_xrlv_var_data_type		pNode,
								pCorrNode;

	BOOL						abCharBreak[256];
	int							iXRSt, iXREnd, cXR;
	BOOL						bRet	=	FALSE,
								bCharBreakEncountered;

	// if we are not in word mode, exit
	if ((pri->flags & PEG_RECFL_NSEG) == 0)
	{
		goto exit;
	}	
	
	// look at the last phase of the beam
	iPos	=	xd->npos - 1;
	cProp	=	xd->pxrlvs[iPos]->nsym;
	
	// do we have any proposals
	if (cProp > 0)
	{
		// go thru all the proposals, find out the position of the correct answer
		for (iProp = 0; iProp < cProp; iProp++)
		{
			iPos	=	xd->npos - 1;
			pxrlvs	=	xd->pxrlvs[iPos];

			pNode	=	pxrlvs->buf + xd->order[iProp];

			// found the correct answer
			if (pNode && !strcmp (pNode->word, g_szAnswer))
			{
				break;
			}
		}

		// if we did not find the right answer, abort
		if (iProp == cProp)
		{
			goto exit;
		}

		// save the postion and node of the correct answer
		iCorrProp	=	iProp;
		pCorrNode	=	pNode;

		// compute and save the xr ending positions of characters
		// in the node corresponding to the correct answer
		iPos		=	xd->npos - 1;
		iIdx		=	iCorrProp;
		pxrlvs		=	xd->pxrlvs[iPos];
		cCorrLen	=	pxrlvs->buf[xd->order[iIdx]].len;

		memset (abCharBreak, 0, sizeof (abCharBreak));

		abCharBreak[0]				=	TRUE;
		abCharBreak[xd->npos - 1]	=	TRUE;

		while (iPos > 0)
		{
			// sort it
			XrlvSortXrlvPos(iPos, xd);

			pxrlvs				=	xd->pxrlvs[iPos];
			abCharBreak[iPos]	=	TRUE;
			pNode				=	pxrlvs->buf + xd->order[iIdx];
			i					=	pNode->len - 1;

			// point back to the previous position
			iPos				=	pNode->st;
			iIdx				=	pNode->np;
		}

		// sanity check that we have reached the 1st char
		if (i != 0)
		{
			goto exit;
		}

		// featurize and save
		cLen	=	strlen (g_szAnswer);

		iXRSt		=	0;

		for (i = 0; i < (xd->npos - 1); i++)
		{
			if (i == 0)
			{
				iXRSt	=	0;
			}
			else
			{
				iXRSt		=	xd->unlink_index[i] + 1;
			}

			bCharBreakEncountered	=	FALSE;

			for (j = i + 1; j < xd->npos; j++)
			{				
				iXREnd		=	xd->unlink_index[j];				
				cXR			=	iXREnd - iXRSt + 1;

				if (cXR > 10)
					continue;

				// both break points are enabled
				if (abCharBreak[i] && abCharBreak[j])
				{
					// if we had encountered a char break already, then this is not one char
					SaveCharDetXRData (!bCharBreakEncountered, iXRSt, cXR, xd->xrdata);
				}
				else
				{
					SaveCharDetXRData (FALSE, iXRSt, cXR, xd->xrdata);
				}

				// have we encountered an intermediate char  break yet
				bCharBreakEncountered	|=	abCharBreak[j];
			}
		}
	}
	
	bRet	=	TRUE;

exit:
	return bRet;
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\bearapi.c ===
// bearapi.c
// Based on Boar.c (Jay Pittman)
// ahmad abulkader
// Apr 26, 2000
// Conatins the implementation of the pen windows style APIs for bear

#include <stdlib.h>
#include <limits.h>

#include "bear.h"
#include "bearp.h"
#include "resource.h"
#include "pegrec.h"
#include "re_api.h"
#include "factoid.h"

//#define SCALE_INK

// Global g_context passed to calligrapher all the time
// We are thread-safe here, because a user could create 2 HRC objects concurrently.
// Here we are using the same g_context all the time, and are openning and closing
// the session.  The g_context can have only 1 session open at a time.
CGRCTX		g_context = NULL;
BOOL LoadSpcNet(HINSTANCE hInst);
void UnLoadSpcNet();

BOOL LoadXRNets(HINSTANCE hInst);
void UnLoadXRNets();


// init bear: create a calligrapher g_context
BOOL InitBear (HINSTANCE hInst)
{
	if (!g_context)
		g_context = CgrCreateContextInternal();			// Creates instance of recognizer data

	if (g_context == _NULL)
		return FALSE;

	if (!LoadSpcNet(hInst))
	{
		return FALSE;
	}

	if (!LoadXRNets(hInst))
	{
		return FALSE;
	}

	return TRUE;
}

// destroys the global calligrapher g_context if it has been created
void DetachBear ()
{
	if (g_context)
	{
		PegRecUnloadDti(g_context);
		CgrCloseContextInternal(g_context);
	}

	g_context	=	NULL;

	UnLoadSpcNet ();
	UnLoadXRNets ();
}

// Creates and initializes a BEARXRC. 
// We do nothing with hrec. Inferno also ignores this parameter
HRC BearCreateCompatibleHRC(HRC hrc, HREC hrec)
{
	BEARXRC	*pxrcOld;
	BEARXRC *pxrc = ExternAlloc(sizeof(BEARXRC));
	
	if (!pxrc)
		return NULL;

	pxrcOld = (BEARXRC *)hrc;
	if (pxrcOld)
	{
		*pxrc		= *pxrcOld;
		pxrc->pvFactoid = CopyCompiledFactoid(pxrc->pvFactoid);
	}
	else
	{
		pxrc->pvFactoid			= NULL;

		// No Guide supplied
		pxrc->bGuide			= FALSE;
		memset(&pxrc->guide, 0, sizeof(GUIDE));
		pxrc->answer.cAltMax	= MAXMAXALT;

		// Default config
		pxrc->hwl				= NULL;
		
		// Default speed
		pxrc->iSpeed			= HWX_DEFAULT_SPEED;

		pxrc->dwLMFlags			= 0;

		pxrc->context			= getContextFromGlobal(g_context);

		if (!pxrc->context)
		{
			ExternFree(pxrc);
			return NULL;
		}
	}
	
	// No ink
	pxrc->pGlyph			= NULL;
	pxrc->cFrames			= 0;


	// Alt list is empty
	pxrc->answer.cAlt		= 0;


	pxrc->bEndPenInput		= FALSE;
	pxrc->bProcessCalled	= FALSE;
	pxrc->iProcessRet		= HRCR_OK;

	memset(&pxrc->answer, 0, sizeof(pxrc->answer));
	pxrc->answer.cAltMax	= MAXMAXALT;

	pxrc->cLine				= 0;

	pxrc->szPrefix			= NULL;
	pxrc->szSuffix			= NULL;

	pxrc->iScaleNum			= 1;
	pxrc->iScaleDenom		= 1;

	return (HRC)pxrc;
}

// sets an HRC alphabet
int BearSetAlphabetHRC(HRC hrc, ALC alc, LPBYTE pbUnused)
{
	BEARXRC *pxrc = (BEARXRC *)hrc;

	if (!pxrc)
		return HRCR_ERROR;

	if (alc & ALC_WHITE)
		pxrc->dwLMFlags &= ~RECOFLAG_WORDMODE;
	else
		pxrc->dwLMFlags |= RECOFLAG_WORDMODE;

	return HRCR_OK;
}

// Destroys an HRC
int BearDestroyHRC(HRC hrc)
{
	BEARXRC *pxrc = (BEARXRC *) hrc;

	if (!pxrc)
		return HRCR_ERROR;

	if (pxrc->pGlyph)
	{
		DestroyFramesGLYPH(pxrc->pGlyph);
		DestroyGLYPH(pxrc->pGlyph);
	}

	ClearALTERNATES(&(pxrc->answer));

	CgrCloseContextInternal(pxrc->context);

	if (pxrc->pvFactoid)
		ExternFree(pxrc->pvFactoid);

	ExternFree(pxrc);

	return HRCR_OK;
}

// This is the exported version of the function. It just turns around and calls the internal 
// implementation of the AddPenInput Bear. It currently passes no OEM data, 
// ahmadab: Oct 16th 2000
int BearAddPenInputHRC(HRC hrc, POINT *rgPoint, LPVOID lpvUnused, UINT iFrame, STROKEINFO *pSi)
{
	return BearInternalAddPenInput((BEARXRC *)hrc, rgPoint, NULL, 0, pSi);
}


int WINAPI BearEndPenInputHRC(HRC hrc)
{
	BEARXRC *pxrc = (BEARXRC *) hrc;

	if (!pxrc)
		return HRCR_ERROR;

	pxrc->bEndPenInput = TRUE;
	return HRCR_OK;
}

#ifdef TRAINTIME_BEAR
void	ConstrainLM (BEARXRC *pxrc);
void	RealeaseWL (BEARXRC *pxrc);
int		ComputePromptWordMaps (BOOL bGuide, GUIDE *lpGuide, GLYPH *pGlyph);
#endif

// Should probably check for a whitespace flag and handle word mode also.
// If we want to support the upper half of 1252 we must turn on CalliGrapher's
// PEG_RECFL_INTL_CS
int BearProcessHRC(HRC hrc, DWORD dwUnsed)
{
	CGR_control_type	ctrl	=	{0};
	BEARXRC				*pxrc	=	(BEARXRC *)hrc;
	int					ret		=	HRCR_ERROR;

	if (!pxrc || !pxrc->pGlyph || CframeGLYPH(pxrc->pGlyph) <= 0)
	{
		goto exit;
	}
	

#ifdef TRAINTIME_BEAR
	ComputePromptWordMaps (pxrc->bGuide, &pxrc->guide, pxrc->pGlyph);
	ConstrainLM (pxrc);
#endif

	ret = BearStartSession (pxrc);
	if (ret != HRCR_OK)
	{
		goto exit;
	}

	ret = feed(pxrc, pxrc->pGlyph, NULL);
	if (ret != HRCR_OK)
	{
		goto exit;
	}

	ret = BearCloseSession (pxrc, TRUE);
	if (ret != HRCR_OK)
	{
		goto exit;
	}

	if (!(pxrc->dwLMFlags & RECOFLAG_WORDMODE))
		ret	= phrase_answer(pxrc);
	else
	{
		// This is here because the SDK version of CalliGrapher that we got
		// in March 1999 sometimes ignores PEG_RECFL_NSEG, and decides the
		// ink was multi-word.
		ret = word_answer(pxrc);

		if (ret == HRCR_ERROR)
			ret = phrase_answer(pxrc);
	}

exit:

#ifdef TRAINTIME_BEAR
	if (pxrc && pxrc->hwl)
	{
		RealeaseWL (pxrc);
	}
#endif

	if (NULL != pxrc)
	{
		pxrc->iProcessRet	= ret;
	}
	return ret;
}	

int BearHwxGetWordResults(HRC hrc, UINT cAlt, char *buffer, UINT buflen)
{
	BEARXRC *pxrc = (BEARXRC *) hrc;

	if (!pxrc || !buffer)
		return -1;

	return (ALTERNATESString(&(pxrc->answer), buffer, buflen, cAlt));
}

int BearSetGuideHRC(HRC hrc, LPGUIDE lpguide,  UINT nFirstVisible)
{
	// currently, we use only yOrigin and cyBox
	BEARXRC *pxrc;
	BOOL bGuide;

	pxrc = (BEARXRC *)hrc;
	if (!pxrc)
	{
		return HRCR_ERROR;
	}

	if (lpguide)
	{
		if ((lpguide->cVertBox <= 0) || (lpguide->cHorzBox <= 0) || (lpguide->cxBox <= 0) || (lpguide->cyBox <= 0))
			bGuide = FALSE;
		else
			bGuide = TRUE;
	}
	else
	{
		bGuide = FALSE;
	}

	if (bGuide)
	{
		if ((lpguide->cxBox < 0) || (((INT_MAX - lpguide->xOrigin) / lpguide->cHorzBox) < lpguide->cxBox) ||
			(lpguide->cyBox < 0) || (((INT_MAX - lpguide->yOrigin) / lpguide->cVertBox) < lpguide->cyBox) ||
			(lpguide->cxBase < 0) || (lpguide->cxBox < lpguide->cxBase) ||
			(lpguide->cyBase < 0) || (lpguide->cyBox < lpguide->cyBase) ||
			(lpguide->cyMid < 0) || (lpguide->cyBase < lpguide->cyMid))
			return HRCR_ERROR;
	}

	pxrc->bGuide = bGuide;
	if (bGuide)
	{
		pxrc->guide = *lpguide;
	}
	else
	{
		memset(&pxrc->guide, 0, sizeof(GUIDE));
	}

	return HRCR_OK;
}

int BearHwxGetCosts(HRC hrc, UINT cAltMax, int *rgCost)
{
	BEARXRC *pxrc = (BEARXRC *) hrc;

	if (!pxrc || !rgCost)
		return -1;

	return ALTERNATESCosts(&(pxrc->answer), cAltMax, rgCost);
}

int BearHwxGetNeuralOutput(HRC hrc, void *buffer, UINT buflen)
{
	return 0;
}

int BearHwxGetInputFeatures(HRC hrc, unsigned short *rgFeat, UINT cWidth)
{
	return 0;
}

int BearHwxSetAnswer(char *sz)
{
	return 0;
}

void * BearHwxGetRattFood(HRC hrc, int *pSize)
{
	return NULL;
}

int BearHwxProcessRattFood(HRC hrc, int size, void *rattfood)
{
	return HRCR_OK;
}

void BearHwxSetPrivateRecInfo(void *v)
{
	return;
}

// This function is not implemented in bear 
HWL BearCreateHWL(HREC hrec, LPSTR lpsz, UINT uType, DWORD dwReserved)
{
	return NULL;
}

int BearDestroyHWL(HWL hwl)
{
	return HRCR_OK;
}

int BearSetWordlistCoercionHRC(HRC hrc, UINT uCoercion)
{
	BEARXRC *pxrc;

	pxrc = (BEARXRC *) hrc;
	if (!pxrc)
		return HRCR_ERROR;
	
	// cannot change settings after calling process
	if (pxrc->bProcessCalled)
		return HRCR_ERROR;
	
	switch(uCoercion)
	{
		case SCH_ADVISE:
		case SCH_NONE:
			pxrc->dwLMFlags = 0;
			break;
		case SCH_FORCE:
			pxrc->dwLMFlags |= RECOFLAG_COERCE;
			break;
		default:
			return HRCR_ERROR;
	}

	return HRCR_OK;
}

int BearSetWordlistHRC(HRC hrc, HWL hwl)
{
	BEARXRC *pxrc	=	(BEARXRC *)hrc;

	if (!pxrc)
		return HRCR_ERROR;

	pxrc->hwl		=	hwl;
	
	return HRCR_OK;
}

int BearEnableSystemDictionaryHRC(HRC hrc, BOOL fEnable)
{
	/*
	BEARXRC *pxrc;

	pxrc = (BEARXRC *) hrc;
	if (!pxrc)
		return HRCR_ERROR;

	pxrc->bMainDict = fEnable;
	*/

	return HRCR_OK;
}

BOOL BearIsStringSupportedHRC(HRC hrc, unsigned char *sz)
{
	return TRUE;
}

int BearGetMaxResultsHRC(HRC hrc)
{
	BEARXRC *pxrc = (BEARXRC *)hrc;

	if (!pxrc)
		return HRCR_ERROR;	

	return pxrc->answer.cAltMax;
}

int BearSetMaxResultsHRC(HRC hrc, UINT cAltMax)
{
	BEARXRC *pxrc;

	if (cAltMax <= 0)
		return HRCR_ERROR;

	pxrc = (BEARXRC *) hrc;
	if (!pxrc)
		return HRCR_ERROR;

	if (cAltMax > MAXMAXALT)
		cAltMax = MAXMAXALT;
	pxrc->answer.cAltMax = cAltMax;

	return HRCR_OK;
}

int BearGetResultsHRC(HRC hrc, UINT uType, HRCRESULT *pResults, UINT cResults)
{
    ALTERNATES *pAlt;

	if (!hrc || !pResults)
		return HRCR_ERROR;

	if (uType == GRH_GESTURE)
		return 0;

	pAlt = &(((BEARXRC *)hrc)->answer);

	if (pAlt->cAlt < cResults)
		cResults = pAlt->cAlt;

	if (cResults)
	{
		XRCRESULT *p = pAlt->aAlt;
		int c = cResults;

		for (; c; c--, pResults++, p++)
			*pResults = (HRCRESULT)p;
	}

	return cResults;
}

int BearGetAlternateWordsHRCRESULT(HRCRESULT hrcresult, UINT iSyv, UINT cSyv,
									  HRCRESULT *pResults, UINT cResults)
{
	XRCRESULT *pRes = (XRCRESULT *)hrcresult;

	if (!pRes || !pResults)
		return HRCR_ERROR;

	if (!(pRes->cWords))
	{
		BEARXRC *pxrc = (BEARXRC *)(pRes->pXRC);

		if ((iSyv != 0) || (cSyv != strlen(pRes->szWord)))
			return 0;
		if (pxrc && (pxrc->answer.aAlt <= pRes) && (pRes < (pxrc->answer.aAlt + pxrc->answer.cAlt)))
			return BearGetResultsHRC((HRC)pxrc, GRH_ALL, pResults, cResults);
		else
			return 0;
	}
	else
		return RCRESULTWords(pRes, iSyv, cSyv, (XRCRESULT **)pResults, cResults);
}

// Does not include null symbol at the end.
int BearGetSymbolsHRCRESULT(HRCRESULT hrcresult, UINT iSyv, SYV *pSyv, UINT cSyv)
{
	if (!cSyv || !hrcresult || !pSyv)
		return 0;

	return RCRESULTSymbols((XRCRESULT *)hrcresult, iSyv, pSyv, cSyv);
}

// Does not include null symbol at the end.

int BearGetSymbolCountHRCRESULT(HRCRESULT hrcresult)
{
	if (!hrcresult)
		return 0;

	return strlen(((XRCRESULT *)hrcresult)->szWord);
}

// These stop after converting a null symbol to the null character.

BOOL BearSymbolToCharacter(SYV *pSyv, int cSyv, char *sz, int *pConv)
{
	if (!pSyv || !sz)
		return FALSE;

	return SymbolToANSI((unsigned char *)sz, pSyv, cSyv, pConv);
}

BOOL BearSymbolToCharacterW(SYV *pSyv, int cSyv, WCHAR *wsz, int *pConv)
{
	if (!pSyv || !wsz)
		return FALSE;

	return SymbolToUnicode(wsz, pSyv, cSyv, pConv);
}

int BearGetCostHRCRESULT(HRCRESULT hrcresult)
{
	if (!hrcresult)
		return 0;

	return ((XRCRESULT *)hrcresult)->cost;
}

// HRCRESULTs are owned by the HRC, which clears them when it is destroyed.

int BearDestroyHRCRESULT(HRCRESULT hrcresult)
{
	return HRCR_OK;
}

HINKSET BearCreateInksetHRCRESULT(HRCRESULT hrcresult, unsigned int iSyv, unsigned int cSyv)
{
	BEARXRC *pxrc;
	XRCRESULT *pres = (XRCRESULT *)hrcresult;

	if (!pres)
		return NULL;
	
	pxrc = (BEARXRC *)pres->pXRC;
	if (!pxrc)
		return NULL;

	if ((pxrc->answer.aAlt <= pres) && (pres < (pxrc->answer.aAlt + pxrc->answer.cAlt)))
		return (HINKSET)mkInkSetPhrase(pxrc->pGlyph, pres, iSyv, cSyv);
	else
	{
		if ((iSyv == 0) && (cSyv == strlen(pres->szWord)))
		{
			XRCRESULT *p = pxrc->answer.aAlt;
			int c = pxrc->answer.cAlt;

			for (; c; c--, p++)
			{
				WORDMAP *pM = findResultInWORDMAP(p, pres);
				if (pM)
					return (HINKSET)mkInkSetWORDMAP(pxrc->pGlyph, pM);
			}
		}
		return NULL;
	}
}

BOOL BearDestroyInkset(HINKSET hInkset)
{
	free((XINKSET *)hInkset);
	return 1;
}

int BearGetInksetInterval(HINKSET hInkset, unsigned int uIndex, INTERVAL *pI)
{
	XINKSET *pInk = (XINKSET *)hInkset;

	if (!pInk || !pI)
		return ISR_ERROR;

	if (5460 < pInk->count)
		return ISR_BADINKSET;

	if (uIndex == IX_END)
	{
		if (!(pInk->count))
			return ISR_BADINDEX;
		*pI = pInk->interval[pInk->count - 1];
	}
	else
	{
		if (pInk->count <= uIndex)
			return ISR_BADINDEX;
		*pI = pInk->interval[uIndex];
	}

	return pInk->count;
}

int BearGetInksetIntervalCount(HINKSET hInkset)
{
	XINKSET *pInk = (XINKSET *)hInkset;

	if (!pInk)
		return ISR_ERROR;

	if ( 5460 < pInk->count )
		return ISR_BADINKSET;

	return pInk->count;
}

// This is the one that should be exported as a penpad compatible API
int BearHwxSetRecogSpeedMad(HRC hrc, int iSpeed)
{
	return BearHwxSetRecogSpeedHRC(hrc, Mad2CalligSpeed(iSpeed));
}

// Set the speed using calligrapher's idea of speed.
int BearHwxSetRecogSpeedHRC(HRC hrc, int iSpeed)
{
	BEARXRC	*pxrc	=	(BEARXRC *)hrc;
	int			iOldSpeed;

	if (!pxrc)
		return -1;

	// no change in speed
	if (iSpeed == pxrc->iSpeed)
		return iSpeed;

	iOldSpeed		= pxrc->iSpeed;
	pxrc->iSpeed	= iSpeed;

	return iOldSpeed;
}

// TBD: Copied from Inferno's hwxapi.c
int BearSetHwxFactoid(HRC hrc, WCHAR* pwcFactoid)
{
	BEARXRC *pxrc = (BEARXRC *) hrc;
	DWORD aFactoidID[3];
	int cFactoid, iFactoid;
	void *pv;

	if (!pxrc)
		return HRCR_ERROR;

	// cannot change settings after calling process
	if (pxrc->bProcessCalled)
		return HRCR_CONFLICT;

	// the default case
	if (!pwcFactoid)
	{
		if (pxrc->pvFactoid)
			ExternFree(pxrc->pvFactoid);
		pxrc->pvFactoid = NULL;
		return HRCR_OK;
	}

	// parse a string
	// for V1 we are only supporting "OR"
	cFactoid = ParseFactoidString(pwcFactoid, 3, aFactoidID);
	if (cFactoid <= 0)
		return HRCR_UNSUPPORTED;
	// are the factoids supported?
	for (iFactoid=0; iFactoid<cFactoid; iFactoid++)
	{
		if (!IsSupportedFactoid(aFactoidID[iFactoid]))
			return HRCR_UNSUPPORTED;
	}
	// for V1 we are actually only supporting three specific OR's
	if (cFactoid == 2)
	{
		// web|wordlist or email|wordlist
		DWORD aAllowed1[2] = {FACTOID_WEB, FACTOID_WORDLIST};
		DWORD aAllowed2[2] = {FACTOID_EMAIL, FACTOID_WORDLIST};

		SortFactoidLists(aFactoidID, 2);
		SortFactoidLists(aAllowed1, 2);
		SortFactoidLists(aAllowed2, 2);
		if ((aFactoidID[0] != aAllowed1[0]) || (aFactoidID[1] != aAllowed1[1]))
		{
			if (aFactoidID[0] != aAllowed2[0])
				return HRCR_UNSUPPORTED;
			if (aFactoidID[1] != aAllowed2[1])
				return HRCR_UNSUPPORTED;
		}
	}
	else if (cFactoid == 3)
	{
		// filename|web|wordlist
		DWORD aAllowed3[3] = {FACTOID_WEB, FACTOID_WORDLIST, FACTOID_FILENAME};
		SortFactoidLists(aFactoidID, 3);
		SortFactoidLists(aAllowed3, 3);
		if (aFactoidID[0] != aAllowed3[0])
			return HRCR_UNSUPPORTED;
		if (aFactoidID[1] != aAllowed3[1])
			return HRCR_UNSUPPORTED;
		if (aFactoidID[2] != aAllowed3[2])
			return HRCR_UNSUPPORTED;
	}
	else if (cFactoid > 3)
		return HRCR_UNSUPPORTED;

	// we will now try to "compile" the factoid list
	pv = CompileFactoidList(aFactoidID, cFactoid);
	if (!pv)
		return HRCR_ERROR;
	if (pxrc->pvFactoid)
		ExternFree(pxrc->pvFactoid);
	pxrc->pvFactoid = pv;
	return HRCR_OK;
}

int BearSetCompiledFactoid(HRC hrc, void *pvFactoid)
{
	BEARXRC	*pxrc	=	(BEARXRC *)hrc;

	if (!pxrc)
		return FALSE;

	if (pvFactoid)
	{
		void *pv = CopyCompiledFactoid(pvFactoid);
		if (!pv)
			return FALSE;
		if (pxrc->pvFactoid)
			ExternFree(pxrc->pvFactoid);
		pxrc->pvFactoid = pv;
	}
	else
	{
		if (pxrc->pvFactoid)
			ExternFree(pxrc->pvFactoid);
		pxrc->pvFactoid = NULL;
	}

	return TRUE;
}

int BearSetHwxFlags(HRC hrc, DWORD flags)
{
	BEARXRC	*pxrc	=	(BEARXRC *)hrc;

	if (!pxrc)
		return FALSE;

	pxrc->dwLMFlags = flags;

	return TRUE;
}

// BearSetCorrectionContext is currently not an exported function.
// Its only used from within Avalanche and simply copies a couple of pointers.
// These pointers are set to NULL in CreateCompatibleHRC time and not destroyed by DestroyHRC.
// Moreover, if we wanted to export this function in Bear, we will have to
// use unicode strings, not 1252.  If we ever come to that point, we probably
// should have another function that takes unicode strings and get exported.
// That function should call the current function.
int BearSetCorrectionContext(HRC hrc, unsigned char *szPrefix, unsigned char *szSuffix)
{
	BEARXRC	*pxrc	=	(BEARXRC *)hrc;

	if (!pxrc)
		return FALSE;

	pxrc->szPrefix = szPrefix;
	pxrc->szSuffix = szSuffix;

	return TRUE;

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\bearp.h ===
#ifndef __BEARP_H__

#define __BEARP_H__

// The bit mask used to indicate that the caller is passing the frameID in the OEM data
// during the call to AddPenInput
#define	ADDPENINPUT_FRAMEID_MASK	0x0001

int Mad2CalligSpeed (int iMadSpeed);
int longest(GLYPH *pGlyph);
int feed(BEARXRC *pxrc, GLYPH *pGlyph, LINEBRK *pLineBrk);
int alternates(ALTERNATES *pAlt, int ans, BEARXRC *pxrc);
int word_answer(BEARXRC *pxrc);
int phrase_answer(BEARXRC *pxrc);
const char *strbool(int flags, int bit);
int BearStartSession (BEARXRC *pxrc);
int BearCloseSession (BEARXRC *pxrc, BOOL bRecognize);
void FreeBearLineInfo (BEARXRC *pxrc);
int BearInternalAddPenInput(BEARXRC *pxrc, POINT *rgPoint, LPVOID lpvData, UINT iFlag, STROKEINFO *pSi);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\bitmapco.cpp ===
/* *************************************************************************** */
/* *     Get bitmap given trace and XrData Range                             * */
/* *************************************************************************** */

#include "ams_mg.h"
#include "hwr_sys.h"

#include "xr_names.h"
#include "bitmapco.h"

// ---------------------- Defines ----------------------------------------------

#define GBM_WINGS               5

#define GBM_ONESHIFT           16
#define GBM_ONESIZE    (1 << GBM_ONESHIFT)
#define GBM_QNUM  ((GBM_XSIZE/GBM_QSX) * (GBM_YSIZE/GBM_QSY))

#define BMGABS(x) (((x) < 0) ? (-(x)) : (x))

// --------------------- Types -------------------------------------------------

// -------------------- Proto --------------------------------------------------

/* *************************************************************************** */
/* *     Get BitMap given trace and XrData Range                             * */
/* *************************************************************************** */
_INT GetSnnBitMap(_INT st, _INT len, p_xrdata_type xrdata, _TRACE trace, p_UCHAR coeff, p_RECT rect, Part_of_letter _PTR parts)
 {
  _INT     i, j, n;
  _UCHAR   map[GBM_XSIZE+2][GBM_YSIZE+2];
  _INT     box_minx, box_miny, box_maxx, box_maxy;
  _INT     dx, dy;
  _INT     cx, cy;
  _INT     fp, ep;
  _INT     x, y, px, py; //, pp;
  _INT     xscale, yscale;
//  _INT     dslant,slant_sh;
  _INT     st_point, en_point;
  _UCHAR   cmarker, pmarker;
  p_UCHAR  pcf;

  if (len < 1) goto err;

  // -------------- Recover in box size half of connecting trace ----------------------

//  if (st && !IsXrLink(&(*xrdata->xrd)[st-1]) && !GetXrMovable(&(*xrdata->xrd)[st]) &&
//            !IsXrLink(&(*xrdata->xrd)[st]) && !GetXrMovable(&(*xrdata->xrd)[st]))
//   {
//    box_minx = box_maxx = ((*xrdata->xrd)[st-1].box_right + (*xrdata->xrd)[st].box_left)/2;
//    box_miny = box_maxy = ((*xrdata->xrd)[st-1].box_up + (*xrdata->xrd)[st].box_down)/2;
//   }
//   else
//   {
//    box_minx = box_miny = 32000;
//    box_maxx = box_maxy = 0;
//   }

//  // -------------- Calculate bounding box of the given xrs ---------------------------

//  for (i = st, pp = 0; i < st+len; i ++)
//   {
//    if (IS_XR_LINK((*xrdata->xrd)[i].xr.type)) {pp = 0; continue;}
//    if (box_minx > (*xrdata->xrd)[i].box_left)   box_minx = (*xrdata->xrd)[i].box_left;
//    if (box_maxx < (*xrdata->xrd)[i].box_right)  box_maxx = (*xrdata->xrd)[i].box_right;
//    if (box_miny > (*xrdata->xrd)[i].box_up)     box_miny = (*xrdata->xrd)[i].box_up;
//    if (box_maxy < (*xrdata->xrd)[i].box_down)   box_maxy = (*xrdata->xrd)[i].box_down;

//    if (pp == 0) pp = (*xrdata->xrd)[i].endpoint;
//     else
//     {
//      n = (*xrdata->xrd)[i].begpoint;
//      for (j = pp; j < n; j ++)
//       {
//        if (trace[j].y < 0) continue;
//        if (box_minx > trace[j].x) box_minx = trace[j].x;
//        if (box_maxx < trace[j].x) box_maxx = trace[j].x;
//       }
//
//      pp = (*xrdata->xrd)[i].endpoint;
//     }
//   }

  // --------------------- Get scale and map bounding box ----------------------

//  dx = box_maxx - box_minx;
//  dy = box_maxy - box_miny;
//  cx = box_minx + dx/2;
//  cy = box_miny + dy/2;

  dx = rect->right - rect->left;
  dy = rect->bottom - rect->top;
  cx = rect->left + dx/2;
  cy = rect->top  + dy/2;

  if (dy == 0 && dx == 0) goto err;

  HWRMemSet(map, 0, sizeof(map));

  xscale = yscale = 0;
  if (dx) xscale = (GBM_ONESIZE * GBM_XSIZE)/(dx + dx/4);
  if (dy) yscale = (GBM_ONESIZE * GBM_YSIZE)/(dy + dy/4);
  if (xscale == 0) xscale = yscale;
  if (yscale == 0) yscale = xscale;
  
//  if (yscale > 2*xscale) yscale = 2*xscale;
//  if (xscale > 2*yscale) xscale = 2*yscale;
  if (xscale > yscale) xscale = yscale; // Make uniform scaling
   else yscale = xscale;

  if (xscale == 0) goto err;

  i = (GBM_ONESIZE * GBM_XSIZE)/(2*xscale);
  box_minx = cx - i;
  box_maxx = cx + i;
  i = (GBM_ONESIZE * GBM_YSIZE)/(2*yscale);
  box_miny = cy - i;
  box_maxy = cy + i;

  // ----------------------- Get trajectory subset for processing --------------

  st_point = (*xrdata->xrd)[st].begpoint;
  en_point = (*xrdata->xrd)[st+len-1].endpoint;

  i = st - GBM_WINGS; if (i < 0) i = 0;
  n = st+len+GBM_WINGS; if (n > xrdata->len) n = xrdata->len;

  fp = ep = (*xrdata->xrd)[i].begpoint;
  for (; i < n; i ++)
   {
    if (fp > (*xrdata->xrd)[i].begpoint) fp = (*xrdata->xrd)[i].begpoint;
    if (ep < (*xrdata->xrd)[i].endpoint) ep = (*xrdata->xrd)[i].endpoint;
   }

  // ----------------------- Paint trajectory on the bitmap --------------------

////  slant  = 30;
//  slant  = (slant*xscale)/yscale;
//  dslant = (slant << GBM_ONESHIFT)/100;
//  slant_sh = dslant*(GBM_YSIZE/2);

  for (i = fp, px = py = 0; i < ep; i ++)
   {
    x = trace[i].x; y = trace[i].y;
    if (y < 0) {px = 0; continue;}
    if (x < box_minx || x >= box_maxx || y < box_miny || y >= box_maxy) {px = 0; continue;}

    y = (((y - box_miny) * yscale + GBM_ONESIZE/2) >> GBM_ONESHIFT);
    x = (((x - box_minx) * xscale + GBM_ONESIZE/2) >> GBM_ONESHIFT);
//    x = (((x - box_minx) * xscale + GBM_ONESIZE/2 - (slant_sh-dslant*y)) >> GBM_ONESHIFT);

    if (x == px && y == py) continue;
    if (x < 0 || x >= GBM_XSIZE || y < 0 || y >= GBM_YSIZE) {px = 0; continue;}

    if (px > 0) // After first point was inited
     {
      _INT iLen;
      _INT sx, sy, xx, yy, xxx, yyy, pxxx, pyyy;

      dx  = BMGABS(x-px); dy = BMGABS(y-py);
      iLen = (dx>dy) ? dx:dy;
      sx  = ((x-px)*256)/iLen;
      sy  = ((y-py)*256)/iLen;

      for (j = 0, cmarker = pmarker = 0x40; j < MAX_PARTS_IN_LETTER && parts[j].iend; j ++)
        if (i >= parts[j].ibeg && i <= parts[j].iend) {cmarker = 0xC0; pmarker = 0x80; break;}

      for (j = pxxx = pyyy = 0, xx = yy = 256; j <= iLen; j++, xx += sx, yy += sy)
       {
        xxx = px+(xx>>8); yyy = py+(yy>>8);
        if (pxxx == xxx && pyyy == yyy) continue;

        map[xxx][yyy]     |= cmarker;
//        map[xxx+1][yyy+1] |= marker;
        map[xxx+1][yyy] |= pmarker;
        map[xxx-1][yyy] |= pmarker;
        map[xxx][yyy+1] |= pmarker;
        map[xxx][yyy-1] |= pmarker;

//        if (xxx < 0 || xxx >= GBM_XSIZE+1 || yyy < 0 || yyy >= GBM_YSIZE+1)
//         xx = 0;
       }
     }

    px = x; py = y;
   }

  // ----------------------- Output coeff string in proper order ---------------

  for (i = 0, pcf = coeff; i < GBM_QNUM; i ++)
   {
    px = (i * GBM_XSIZE/GBM_QSX) % GBM_XSIZE;
    py = (i / GBM_QSX) * (GBM_YSIZE/GBM_QSY);
    for (j = 0; j < (GBM_YSIZE/GBM_QSY); j ++)
     {
      for (n = 0; n < (GBM_XSIZE/GBM_QSX); n ++) *(pcf++) = map[px+n+1][py+j+1];
     }
   }


  return 0;
err:
  return 1;
 }

/* *************************************************************************** */
/* *            End Of Alll                                                  * */
/* *************************************************************************** */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\bearp.c ===
// bearp.c
// Based on Boar.c (Jay Pittman)
// ahmad abulkader
// Apr 26, 2000
// Conatins private functions for bear

#include <limits.h>
#include <string.h>

#include "bear.h"
#include "bearp.h"
#include "pegrec.h"
#include "peg_util.h"
#include "xrwdict.h"
#include "xrword.h"
#include "xrlv.h"
#include "ws.h"

#include "recdefs.h"

extern CGRCTX		g_context;

int Mad2CalligSpeed (int iMadSpeed)
{
	// return Callig's default speed
	if (iMadSpeed == HWX_DEFAULT_SPEED)
		return 0;

	iMadSpeed	=	min (max (iMadSpeed, HWX_MIN_SPEED), HWX_MAX_SPEED);
	iMadSpeed	=	HWX_MIN_SPEED + (HWX_MAX_SPEED - iMadSpeed);

	return (1 + (iMadSpeed * 8 / (HWX_MAX_SPEED - HWX_MIN_SPEED)));
}

int longest(GLYPH *pGlyph)
{
	int max = 0;

	for (; pGlyph; pGlyph = pGlyph->next)
	{
		int len = (signed int)CrawxyFRAME(pGlyph->frame);
		if (max < len)
			max = len;
	}

	return max;
}

// checked was a new line was created after passing the last stroke
BOOL IsNewLineCreated (CGRCTX context)
{
	p_rec_inst_type pri	=	(p_rec_inst_type)context;

	if (!pri)
		return FALSE;

	return pri->new_line_created;
}
// Creates a new line starting with the passed frame
BOOL AddNewLine (BEARXRC *pxrc, FRAME *pFrame, LINEBRK *pLineBrk)
{

	if (pLineBrk)
	{
		pLineBrk->pLine	=	(INKLINE *) ExternRealloc (pLineBrk->pLine, (pLineBrk->cLine + 1) * sizeof (INKLINE));
		
		if (!pLineBrk->pLine)
		{
			return FALSE;
		}
		
		if (!InitLine (pLineBrk->pLine + pLineBrk->cLine))
		{
			return FALSE;
		}
		pLineBrk->cLine++;
	}
	
	return TRUE;
}

// Pass ink to Calligrapher.
// If PlineBrk != NULL means we want to accumulate
// line breaking information
int feed(BEARXRC *pxrc, GLYPH *pGlyph, LINEBRK *pLineBrk)
{
	int					shift = 0, cFrame;
	CGR_point_type		*cgr = NULL;
	RECT				r;
	int					Num, Denom, iFirstFrame = pGlyph->frame->iframe, cTotPnt;
	int					iRet = HRCR_ERROR;
	int					xOrigion, yOrigion;				//New origion
	
	// we know Bear has a limit on the # of strokes, there is no point in passing > max_strokes
	cFrame	=	CframeGLYPH (pGlyph);
	if (cFrame > WS_MAX_STROKES)
	{
		goto exit;
	}
	
	GetRectGLYPH (pGlyph, &r);
	xOrigion	= r.left;
	yOrigion	= r.top;

	if ( (r.right-xOrigion) > 8000 || (r.bottom-yOrigion) > 8000)
	{
		Num		=	max (r.right-xOrigion, r.bottom-yOrigion) / 100;
		Denom	=	79;
	}
	else
	{
		Num		=	1;
		Denom	=	1;
	}

	cgr = (CGR_point_type *)ExternAlloc(longest(pGlyph) * sizeof(CGR_point_type));
	if (cgr == NULL) goto exit;		// added by JAD -- Feb. 12, 2002
	cTotPnt = 0;

	for (; pGlyph; pGlyph = pGlyph->next)
	{
		FRAME *pFrame = pGlyph->frame;
		POINT *pPts = RgrawxyFRAME(pFrame);
		int cPts = (signed int)CrawxyFRAME(pFrame);
		CGR_point_type *p = cgr;
		RECT		frameRect;

		cTotPnt += cPts;

		if (cTotPnt >= BIG_NUMBER)
		{
			goto exit;
		}

		// Check for Over or Under Flows
		// Using the BB of the frame
		RectFRAME(pFrame);
		frameRect = pFrame->rect;

		if (   FALSE == IsSafeForAdd(frameRect.left, -xOrigion)
			|| FALSE == IsSafeForAdd(frameRect.right, -xOrigion)
			|| FALSE == IsSafeForAdd(frameRect.bottom, -yOrigion)
			|| FALSE == IsSafeForAdd(frameRect.top, -yOrigion) )
		{
			goto exit;
		}
		frameRect.left	-= xOrigion;
		frameRect.right	-= xOrigion;
		frameRect.top	-= yOrigion;
		frameRect.bottom -= yOrigion;
		if (   FALSE == IsSafeForMult(frameRect.left, Denom)
			|| FALSE == IsSafeForMult(frameRect.right, Denom)
			|| FALSE == IsSafeForMult(frameRect.bottom, Denom)
			|| FALSE == IsSafeForMult(frameRect.top, Denom) )
		{
			goto exit;
		}
	
		// Do we need to scale
		for (; cPts; cPts--, pPts++, p++)
		{
			short int x = (short int)((pPts->x - xOrigion) * Denom / Num);
			short int y = (short int)((pPts->y - yOrigion) * Denom / Num);

			ASSERT(x >= 0 && x < 8000 && y >= 0 && y < 8000);
			if ((x < 0) || (8000 < x) || (y < 0) || (8000 < y))
			{
				goto exit;
			}

			p->x = x;
			p->y = y;
		}

		if (CgrRecognizeInternal((signed int)CrawxyFRAME(pFrame), cgr, pxrc->context, 1))
		{
			goto exit;
		}

		// if we are in panel mode, we'll monitor the line breaking
		if (pLineBrk)
		{
			int		iLine;
	
			// was a new line added
			if (pFrame->iframe == iFirstFrame || IsNewLineCreated (pxrc->context))
			{
				if (FALSE == AddNewLine (pxrc, pGlyph->frame, pLineBrk))
				{
					goto exit;
				}
			}

			iLine = pLineBrk->cLine - 1;
			ASSERT( iLine >= 0);
				
			// add stroke to line
			if (FALSE == AddNewStroke2Line (pFrame->info.cPnt, pFrame->rgrawxy, pFrame, pLineBrk->pLine + iLine))
			{
				goto exit;
			}	
		}
	}

	pxrc->iScaleNum		=	Num;
	pxrc->iScaleDenom	=	Denom;
	
	iRet = HRCR_OK;
exit:

	ExternFree(cgr);
	return iRet;
}

int alternates(ALTERNATES *pAlt, int ans, BEARXRC *pxrc)
{
	int i;
	XRCRESULT *pRes = pAlt->aAlt;

	int cAlt, cTotAlt = CgrGetAnswersInternal(CGA_NUM_ALTS, ans, 0, pxrc->context);  // Get number of recognition alternatives

	if (MAXMAXALT < cTotAlt)
		cTotAlt = MAXMAXALT;
	

	for (i = cAlt = 0; i < cTotAlt; i++)
	{
		// The string buffer is part of the g_context, will be freed when
		// the pxrc->context is destroyed, and must not be passed to free() itself.
#ifdef UNICODE_INTERFACE
		wchar_t	*wsz = (wchar_t	*)(CgrGetAnswersInternal(CGA_ALT_WORD, ans, i, pxrc->context));
		unsigned char	*sz;

		if (wcslen (wsz) <= 0)
			continue;

		pRes->szWord = ExternAlloc(wcslen(wsz) + sizeof (pRes->szWord[0]));
		ASSERT(pRes->szWord);
		if (!pRes->szWord)
			return HRCR_MEMERR;

		for (sz = pRes->szWord; (*wsz); wsz++, sz++)
			*sz	=	(unsigned char)(*wsz);

		(*sz)	=	'\0';
#else
		unsigned char *sz = (unsigned char *)(CgrGetAnswersInternal(CGA_ALT_WORD, ans, i, pxrc->context));

		if (!sz || strlen (sz) <= 0)
			continue;

		pRes->szWord = ExternAlloc(strlen(sz) + 1);
		ASSERT(pRes->szWord);
		if (!pRes->szWord)
			return HRCR_MEMERR;
		strcpy(pRes->szWord, sz);
#endif

		//pRes->cost = 255 - (int)CgrGetAnswersInternal(CGA_ALT_WEIGHT, ans, i, pxrc->context);
		pRes->cost = CgrGetAnswersInternal(CGA_ALT_WEIGHT, ans, i, pxrc->context);
		pRes->cWords = 0;
		pRes->pMap = NULL;
		pRes->pXRC = pxrc;

		pRes++;
		cAlt++;
	}

	pAlt->cAlt		= cAlt;
	pAlt->cAltMax	= MAXMAXALT;

	return HRCR_OK;
}

int word_answer(BEARXRC *pxrc)
{
	if (1 != CgrGetAnswersInternal(CGA_NUM_ANSWERS, 0, 0, pxrc->context))
		return HRCR_ERROR;

	return alternates(&(pxrc->answer), 0, (void *)pxrc);
}

int phrase_answer(BEARXRC *pxrc)
{
	int			iWord,	
				cWords,
				cTotStrk,
				cAllocFrame;

	XRCRESULT	*pPhrase	=	NULL;
	WORDMAP *pMap;
	int			*pStBase	=	NULL, 
				*pSt, iStrk, cStroke = 0;
	int	iRet	=	HRCR_ERROR;
	
	// Bear can sometimes return zero words
	cWords = CgrGetAnswersInternal(CGA_NUM_ANSWERS, 0, 0, pxrc->context);  // Query how many words resulted
	if (cWords <= 0)
		return HRCR_OK;
	
	pPhrase = pxrc->answer.aAlt;
	pPhrase->cWords = cWords;

	pPhrase->pMap = pMap = ExternAlloc(cWords * sizeof(WORDMAP));
	ASSERT(pMap);
	if (!pMap)
	{
		iRet	=	HRCR_MEMERR;
		goto exit;
	}

	memset (pPhrase->pMap, 0, cWords * sizeof(WORDMAP));
	
	pPhrase->pXRC = (void *)pxrc;
	pxrc->answer.cAlt = 1;
	
	for (iWord = 0; iWord < cWords; iWord++, pMap++)   // For each word across the line
	{
		int ret = alternates(&(pMap->alt), iWord, (void *)pxrc);
		if (ret != HRCR_OK)
		{
			iRet	=	ret;
			goto exit;
		}

		if (pMap->alt.cAlt <= 0)
		{
			pMap->start	=	-1;
			pMap->len	=	0;
		}
		else
		{
			if (!iWord)
				pMap->start = 0;
			else
				pMap->start = pMap[-1].start + pMap[-1].len + 1;

			pMap->len = (unsigned short)strlen(pMap->alt.aAlt[0].szWord);
		}
		
		pMap->cStrokes = CgrGetAnswersInternal(CGA_ALT_NSTR, iWord, 0, pxrc->context);    // Number of strokes in current word
		
		cStroke += pMap->cStrokes;
	}

	// if we do not get the same # of strokes back, we will not accept bear
	if (pxrc->cFrames != cStroke)
	{
		iRet = HRCR_ERROR;
		goto exit;
		/*
		pPhrase->cWords = 0;
		pxrc->answer.cAlt = 0;
		ExternFree(pPhrase->pMap);
		pPhrase->pXRC = NULL;
		pPhrase->pMap = NULL;
		return HRCR_OK;
		*/
	}

	// Prepare the stroke indices (and counts) in each mapping.
	// We have the special situation that the stroke index array for the
	// entire phrase must be a single allocation (from ExternAlloc()), and
	// the start of the buffer must be pointed at by the LAST mapping.
	// ClearALTERNATES() depends upon this to free the buffer correctly.
	
	cAllocFrame		=	(2 * pxrc->cFrames);

	pStBase = pSt = ExternAlloc(cAllocFrame * sizeof(int));
	ASSERT(pStBase);
	if (!(pStBase))
	{
		iRet	=	HRCR_MEMERR;
		goto exit;
	}
		
	cTotStrk	=	0;

	for (iWord = cWords - 1, pMap--; 0 <= iWord; iWord--, pMap--)   // For each word across the line
	{
		int		*pBearStr, cStrokes = pMap->cStrokes;
		
		// The strokes buffer is part of the pxrc->context, will be freed when
		// the pxrc->context is destroyed, and must not be passed to free() itself.
		//                 Pointer to stroke numbers
		pBearStr = (int *)CgrGetAnswersInternal(CGA_ALT_STROKES, iWord, 0, pxrc->context);
		ASSERT(pBearStr);
		pMap->piStrokeIndex = pSt;
		
		pMap->cStrokes = 0;
		
		// now we need to add the 1st frame number of the glyph on these stroke indexes
		for (iStrk = 0; iStrk < cStrokes; iStrk++)
		{
			FRAME		*pFrame;

			pFrame = FrameAtGLYPH (pxrc->pGlyph, pBearStr[iStrk]);
			ASSERT(pFrame);

			if (pFrame)
			{
				// if we exceeded the # of frames we have allocated,
				// then we'll fail
				if (cTotStrk >= cAllocFrame)
				{
					goto exit;
				}

				AddThisStroke(pMap, pFrame->iframe);
				cTotStrk++;
			}
		}
		
		pSt += pMap->cStrokes;
		ASSERT(pSt <= (pStBase + 2 * pxrc->cFrames));
	}
	
	// Contruct the phrase string, and compute the phrase total cost
	{
		int len = 0;
		int cost = 0;
		unsigned char *s;
		
		for (iWord = 0, pMap = pPhrase->pMap; iWord < cWords; iWord++, pMap++)
		{
			if (pMap->alt.cAlt > 0)
			{
				cost += pMap->alt.aAlt[0].cost;
				len += strlen(pMap->alt.aAlt[0].szWord) + 1;
			}
		}
		
		pPhrase->cost = cost;
		pPhrase->szWord = s = (char *)ExternAlloc(len);
		ASSERT(s);

		if (!s)
		{
			iRet	=	HRCR_MEMERR;
			goto exit;
		}
		
		for (iWord = 0, pMap = pPhrase->pMap; iWord < cWords; iWord++, pMap++)
		{
			if (pMap->alt.cAlt <= 0)
				continue;
			
			strcpy(s, pMap->alt.aAlt[0].szWord);
			s = strchr(s, '\0');
			*s = ' ';
			s++;
		}
		s--;
		*s = '\0';
	}
	
	iRet	=	HRCR_OK;

exit:
	if (iRet != HRCR_OK)
	{
		if (pPhrase)
		{
			// free up the alternates we created
			if (pPhrase->pMap)
			{
				for (iWord = 0; iWord < cWords; iWord++)
				{
					ClearALTERNATES (&pPhrase->pMap[iWord].alt);
				}

				ExternFree(pPhrase->pMap);		
			}

			if (pPhrase->szWord)
			{
				ExternFree (pPhrase->szWord);
				pPhrase->szWord	=	NULL;
			}

			pxrc->answer.cAlt = 0;			
		}

		if (pStBase)
		{
			ExternFree (pStBase);
		}
	}

	return iRet;	
}

const char *strbool(int flags, int bit)
{
	return (flags & bit) ? "on" : "off";
}

int BearStartSession (BEARXRC *pxrc)
{
	CGR_control_type	ctrl	=	{0};

	if (!pxrc)
		return HRCR_ERROR;

	
	// Turns off recognition until CgrCloseSession()
	// is called (efficiency hack).
	ctrl.flags |= PEG_RECFL_NCSEG;
	
	// Turns on recognition of international characters
	ctrl.flags |= PEG_RECFL_INTL_CS;	

	// Init the ctrl structure
	ctrl.sp_vs_q = pxrc->iSpeed;	
	
	// If we are processing white-space (panel mode), then we turn off CalliGrapher's
	// NSEG (No Segmentation) flag.
	
	if (!(pxrc->dwLMFlags & RECOFLAG_WORDMODE))
		ctrl.flags &= ~PEG_RECFL_NSEG;
	else
		ctrl.flags |= PEG_RECFL_NSEG;

	// If we are processing only uppercase letters, then we turn on CalliGrapher's
	// CAPSONLY flag.
	
	//if (0 && (pxrc->dwLMFlags & RECOFLAG_UPPERCASE))
	//	ctrl.flags |= PEG_RECFL_CAPSONLY;
	//else
		ctrl.flags &= ~PEG_RECFL_CAPSONLY;

	// If we are processing only digits, then we turn on CalliGrapher's
	// NUMONLY flag.
	
	if (0) //pxrc->alc == ALC_NUMERIC)
		ctrl.flags |= PEG_RECFL_NUMONLY;
	else
		ctrl.flags &= ~PEG_RECFL_NUMONLY;

	// is the main dictionary enabled or not
	ctrl.flags &= (~PEG_RECFL_LANGMODEL_DISABLED);

	if (pxrc->dwLMFlags & RECOFLAG_COERCE)
		ctrl.flags |= PEG_RECFL_COERCE;
	else
		ctrl.flags &= ~PEG_RECFL_COERCE;

	// the word list
	ctrl.h_user_dict	=	(p_VOID) pxrc->hwl;

	// copy factoid from xrc
	ctrl.pvFactoid		=	pxrc->pvFactoid;
	ctrl.szPrefix		=	pxrc->szPrefix;
	ctrl.szSuffix		=	pxrc->szSuffix;

	// Do we want a LM
	ctrl.flags &= (~PEG_RECFL_DICTONLY);

	// create a new recognition session
	if (CgrOpenSessionInternal(&ctrl, pxrc->context))		// Creates 'timeout' session (words written without stopping)
	{
		pxrc->iProcessRet = HRCR_ERROR;
		return HRCR_ERROR;
	}

	return HRCR_OK;
}

int BearCloseSession (BEARXRC *pxrc, BOOL bRecognize)
{
	p_rec_inst_type pri;

	if (CgrCloseSessionInternal(pxrc->context, (void *)pxrc, bRecognize))
		return HRCR_ERROR;

	// scale the gap positions
	pri	 =	(p_rec_inst_type)pxrc->context;
	if (pri && pxrc->iScaleDenom > 0)
	{
		int	iGap;

		for (iGap = 0; iGap < pri->cGap; iGap++)
		{
			// scale back this gap to the glyph co-ordinates
			pri->axGapPos[iGap]	= ((pri->axGapPos[iGap] * pxrc->iScaleNum) / pxrc->iScaleDenom);
		}
	}

	return HRCR_OK;
}

// Add a new stroke to the recognizer glyph

// The new stroke must not exceed 30K points in length, and no coordinate
// is allowed above outside the range of a signed short int.  Also, we
// only allow 1000 strokes.

// If we decide we want to impose limits based on the guide box, we must
// initialize the guide box to be empty when we create the HRC, then check
// for that here, in effect forcing the caller to set the guide box first
// before adding strokes.

// Returns HRCR_ERROR on failure. Creates an xrc->glyph when called with the first frame
int BearInternalAddPenInput (BEARXRC *pxrc, POINT *rgPoint, LPVOID lpvData, UINT iFlag, STROKEINFO *pSi)
{
	XY		*rgXY;
	FRAME	*frame;
	int		cPoint, iFrame;

	// check pointers
	if (!pxrc || !rgPoint || !pSi)
		return HRCR_ERROR;

	// Presently must add all ink before doing process
	if (TRUE == pxrc->bEndPenInput)
	{
		return HRCR_ERROR;
	}

	if (pxrc && rgPoint && pSi && pSi->cPnt > 0)
	{
		if (!IsVisibleSTROKE(pSi))
		{
			return HRCR_OK;
		}

		// Did the caller pass the frame ID and a non-NULL pointer
		if ((iFlag & ADDPENINPUT_FRAMEID_MASK) && (lpvData != NULL))
		{
			iFrame	=	*((int *)lpvData);
		}
		else
		{
			iFrame	=	pxrc->cFrames;
		}

		// This should probably be lower, but we should check the
		// max panel stroke count across all test sets first.
		if (999 < pxrc->cFrames)
		{
			return HRCR_ERROR;
		}

		if (30000 < pSi->cPnt)
		{
			return HRCR_ERROR;
		}


		// make new frame
		frame = NewFRAME();
		if (!frame)
		{
			return HRCR_ERROR;
		}
	
		// allocate space for points
		cPoint	= pSi->cPnt;
		rgXY	= (XY *) ExternAlloc(cPoint * sizeof(XY));
		if (!rgXY)
		{
			DestroyFRAME(frame);
			return HRCR_ERROR;
		}

		frame->info			= *pSi;
		frame->iframe		= iFrame;
		RgrawxyFRAME(frame) = rgXY;

		// create a glyph if we have not created one
		if (!pxrc->pGlyph)
		{
			pxrc->pGlyph = NewGLYPH();
			if (!pxrc->pGlyph)
			{
				DestroyFRAME (frame);
				return HRCR_ERROR;
			}
		}

		// add the frame to the glyph
		if (!AddFrameGLYPH(pxrc->pGlyph, frame))
		{
			DestroyFRAME (frame);
			return HRCR_ERROR;
		}
			
		pxrc->cFrames++;

		// copy points
		for (cPoint=pSi->cPnt; cPoint; cPoint--)
		{
			*rgXY++ = *rgPoint++;
		}

		return HRCR_OK;				
	}

	return HRCR_ERROR;
}


// creates a new segmentation set from bear' RC
// this function is called from Bear at the end of the XRLV (DTW) code 
BOOL BearAddSegCol (rc_type _PTR prc, p_xrlv_data_type  xd)
{
	LINE_SEGMENTATION			*pLineSegm	=	(LINE_SEGMENTATION *)prc->hSeg;
	p_xrdata_type				xrdata		=	xd->xrdata;

	SEG_COLLECTION				*pSegCol;
	_INT						stroke_ids[WS_MAX_STROKES];
	_INT						aStrkStop[WS_MAX_STROKES];
	_INT						i, j, k, ns, cProp, iProp;

	_UCHAR						**ppOrder	=	NULL, 
								iPos, iIdx;

	_TRACE						p_tr;
	p_xrlv_var_data_type_array	pxrlvs;
	p_xrlv_var_data_type		pNode;
	SEGMENTATION				Seg;
	BOOL						bRet	=	FALSE;
	
	// allocations
	if (!pLineSegm)
	{
		pLineSegm	=	(LINE_SEGMENTATION *) ExternAlloc (sizeof (LINE_SEGMENTATION));
		if (!pLineSegm)
			goto exit;

		prc->hSeg	=	(HANDLE)pLineSegm;

		memset (pLineSegm, 0, sizeof (LINE_SEGMENTATION));
	}

	pSegCol			=	AddNewSegCol (pLineSegm);
	if (!pSegCol)
		goto exit;

	// now go thru the alternatives proposed and enumerate all the segmentation possibilities

	// look at the last phase
	iPos	=	xd->npos - 1;
	cProp	=	xd->pxrlvs[iPos]->nsym;

	
	// do we have any proposals
	if (cProp > 0)
	{
		// save the orders at all positions
		ppOrder	=	(_UCHAR **)ExternAlloc (xd->npos * sizeof (_UCHAR *));
		if (!ppOrder)
			goto exit;

		memset (ppOrder, 0, xd->npos * sizeof (_UCHAR *));

		for (iPos = 0; iPos < xd->npos; iPos++)
		{
			ppOrder[iPos]	=	(_UCHAR *)
				ExternAlloc (xd->pxrlvs[iPos]->nsym * sizeof (_UCHAR));

			if (!ppOrder[iPos])
				goto exit;

			// sort it
			XrlvSortXrlvPos(iPos, xd);

			memcpy (ppOrder[iPos], 
				xd->order,
				xd->pxrlvs[iPos]->nsym * sizeof (_UCHAR));
		}

		// go thru all the proposals
		for (iProp = 0; iProp < cProp; iProp++)
		{
			int		ixr, ixrEnd;
			_UCHAR	*pWord;


			// Write down stroke lineout
			for (i = 1, ns = 0, p_tr = prc->trace; i < prc->ii; i ++)
			{
				if (p_tr[i].y < 0) 
				{
					aStrkStop[ns] = i; 
					
					// we already know the # of strokes, we should not exceed them
					if (ns >= prc->n_str)
						goto exit;
					
					stroke_ids[ns++] = p_tr[i].x;
				}
			}

			iPos	=	xd->npos - 1;

			// init the segmentation
			memset (&Seg, 0, sizeof (Seg));
			
			// set the xr indices
			ixrEnd	=	xd->unlink_index[iPos];
			
			while (iPos > 0)
			{
				int	cLen;

				pxrlvs	=	xd->pxrlvs[iPos];
				
				if (iPos == (xd->npos - 1))
				{
					pNode	=	pxrlvs->buf + ppOrder[iPos][iProp];
				}
				else
				{
					pNode	=	pxrlvs->buf + ppOrder[iPos][iIdx];
				}

				pWord	=	pNode->word;
				cLen	=	strlen ((const char *)pWord);

				// point back to the previous position
				iPos	=	pNode->st;
				iIdx	=	pNode->np;

				// are we at beginning of a word
				// Can't remember why we check for (pWord[cLen - 1] != ' ')
				// but it is not harmful
				if	(	cLen > 2 &&
						pWord[cLen - 1] != ' ' &&
						pWord[cLen - 2] == ' '
					)
				{
					WORD_MAP	*pMap;

					// add a new word map to the segmentation
					pMap = AddNewWordMap (&Seg);
					if (!pMap)
						goto exit;

					// determine the starting xr
					ixr	=	xd->unlink_index[iPos] + 1;

					// map xr range to strokes
					for (i = ixr; i <= ixrEnd; i++) 
					{
						j = (*xrdata->xrd)[i].begpoint;

						// Find which stroke the xr belongs to
						for (k = 0; k < ns; k ++) 
						{
							if (stroke_ids[k] < 0)
								continue;

							if	(	j < aStrkStop[k] &&
									(k == 0 || j > aStrkStop[k - 1])
								)
							{
								if (!AddNewStroke (pMap, stroke_ids[k]))
									goto exit;

								stroke_ids[k] = -1;

								break;
							}
						}
					}

					// update the value of ixrEnd
					ixrEnd		=	xd->unlink_index[iPos];
				}
			}

			// we reached the end or rather the beginning
			{
				WORD_MAP	*pMap;

				// add a new word map to the segmentation
				pMap = AddNewWordMap (&Seg);
				if (!pMap)
					goto exit;

				ixr		=	0;

				// add all the remaining strokes to the remaining word
				for (k = 0; k < ns; k ++) // Find which stroke the xr belongs to
				{
					if (stroke_ids[k] < 0)
						continue;

					if (!AddNewStroke (pMap, stroke_ids[k]))
						goto exit;

					stroke_ids[k] = -1;
				}

			}

			// reverse words
			ReverseSegmentationWords (&Seg);

			// is it a new segmentation or not
			if (!AddNewSegmentation (pLineSegm, pSegCol, &Seg, TRUE))
				goto exit;

			// free it 
			FreeSegmentationWordMaps (&Seg);
			FreeSegmentation (&Seg);

			// that's it we've have enough segmentations
			if (pSegCol->cSeg >= MAX_SEG)
			{
				bRet	=	TRUE;
				goto exit;
			}
		}	
	}
	// if not assume it is just one word
	else
	{
		WORD_MAP	*pMap;

		// init the segmentation
		memset (&Seg, 0, sizeof (Seg));

		// add a new word map to the segmentation
		pMap = AddNewWordMap (&Seg);
		if (!pMap)
			goto exit;

		// find the stroke Ids
		for (i = 1, ns = 0, p_tr = prc->trace; i < prc->ii; i ++)
		{
			if (p_tr[i].y < 0) 
			{
				aStrkStop[ns] = i; 
				
				// we already know the # of strokes, we should not exceed them
				if (ns >= prc->n_str)
					goto exit;
				
				stroke_ids[ns++] = p_tr[i].x;
			}
		}

		// add all the remaining strokes to the remaining word
		for (k = 0; k < ns; k ++) // Find which stroke the xr belongs to
		{
			if (stroke_ids[k] < 0)
				continue;

			if (!AddNewStroke (pMap, stroke_ids[k]))
				goto exit;

			stroke_ids[k] = -1;
		}

		// is it a new segmentation or not
		if (!AddNewSegmentation (pLineSegm, pSegCol, &Seg, TRUE))
			goto exit;

		// free it as it is the same as an old one
		FreeSegmentationWordMaps (&Seg);
		FreeSegmentation (&Seg);

		// that's it we've have enough segmentations
		if (pSegCol->cSeg >= MAX_SEG)
		{
			bRet	=	TRUE;
			goto exit;
		}
	}

	bRet	=	TRUE;

exit:
	// free the order buffers
	if (ppOrder)
	{
		for (iPos = 0; iPos < xd->npos; iPos++)
		{
			if (ppOrder[iPos])
				ExternFree (ppOrder[iPos]);
		}

		ExternFree (ppOrder);
	}

	return bRet;
}

// Frees bear multseg Info
void FreeBearSegmentation (rc_type _PTR prc)
{
	LINE_SEGMENTATION		*pBearLineSegm	=	(LINE_SEGMENTATION *)prc->hSeg;

	if (pBearLineSegm)
	{
		FreeLineSegm (pBearLineSegm);

		ExternFree (pBearLineSegm);
	}

	prc->hSeg		=	NULL;
}

int GetBearSpaceOutBetweenGlyph		(	BEARXRC	*pxrc, 
										GLYPH	*pLineGlyph, 
										GLYPH	*pLeftGlyph, 
										GLYPH	*pRightGlyph
									)
{
	int					iRet			=	-1,
						xMin, 
						xMax,
						iGap;
	RECT				rectLine,
						rectLeft,
						rectRight;

	p_rec_inst_type		pri;

	if (!pxrc)
	{
		return -1;
	}

	pri				=	(p_rec_inst_type)pxrc->context;

	// get the line bbox
	GetRectGLYPH (pLineGlyph, &rectLine);


	GetRectGLYPH (pLeftGlyph, &rectLeft);
	GetRectGLYPH (pRightGlyph, &rectRight);

	// find the leftmost and rightmost x relative to the left of the line
	xMin	=	min (rectLeft.right, rectRight.left) - rectLine.left;
	xMax	=	max (rectLeft.right, rectRight.left) - rectLine.left;

	// now search the gap information in bear's xrc
	for (iGap = 0; iGap < pri->cGap; iGap++)
	{
		if (xMin <= pri->axGapPos[iGap] && pri->axGapPos[iGap] <= xMax)
		{
			//iRet	=	max (iRet, 65535 * pri->aGapSpcNetOut[iGap] / 200);			
			iRet	=	max (iRet, pri->aGapSpcNetOut[iGap]);
		}
	}

	return iRet;
}

int	GetNewWordMapBearSpaceOut (BEARXRC *pxrc, GLYPH *pLineGlyph, WORD_MAP *pLeftMap, WORD_MAP *pRightMap)
{
	int					iRet			=	-1;						
	GLYPH				*pLeftGlyph		=	NULL, 
						*pRightGlyph	=	NULL;

	if (!pxrc)
	{
		goto exit;
	}

	// create the left and right glyphs
	pLeftGlyph	=	GlyphFromNewWordMap (pLineGlyph, pLeftMap);
	if (!pLeftGlyph)
	{
		goto exit;
	}

	pRightGlyph	=	GlyphFromNewWordMap (pLineGlyph, pRightMap);
	if (!pRightGlyph)
	{
		goto exit;
	}

	iRet	=	GetBearSpaceOutBetweenGlyph (pxrc, pLineGlyph, pLeftGlyph, pRightGlyph);

exit:
	if (pLeftGlyph)
	{
		DestroyGLYPH (pLeftGlyph);
	}

	if (pRightGlyph)
	{
		DestroyGLYPH (pRightGlyph);
	}

	return iRet;
}

int GetWordMapBearSpaceOut (BEARXRC *pxrc, GLYPH *pLineGlyph, WORDMAP *pLeftMap, WORDMAP *pRightMap)
{
	int					iRet			=	-1;						
	GLYPH				*pLeftGlyph		=	NULL, 
						*pRightGlyph	=	NULL;

	if (!pxrc)
	{
		goto exit;
	}

	// create the left and right glyphs
	pLeftGlyph	=	GlyphFromWordMap (pLineGlyph, pLeftMap);
	if (!pLeftGlyph)
	{
		goto exit;
	}

	pRightGlyph	=	GlyphFromWordMap (pLineGlyph, pRightMap);
	if (!pRightGlyph)
	{
		goto exit;
	}

	iRet	=	GetBearSpaceOutBetweenGlyph (pxrc, pLineGlyph, pLeftGlyph, pRightGlyph);

exit:
	if (pLeftGlyph)
	{
		DestroyGLYPH (pLeftGlyph);
	}

	if (pRightGlyph)
	{
		DestroyGLYPH (pRightGlyph);
	}

	return iRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\calccell.cpp ===
/* **************************************************************************** */
/* **************************************************************************** */
/* *                  AVP 1996                                                * */
/* **************************************************************************** */

#include "snn.h"
#define USE_ASM   0

#if !MLP_PRELOAD_MODE
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <math.h>
// #include <fstream.h>
#endif

//#include "ams_mg.h"
#include "mlp.h"

#if USE_ASM
 #if defined( _WIN32_WCE ) && (defined( _SH3_ ) || defined ( _MIPS_ ))
  #ifdef __cplusplus
   extern "C" { void __asm(const char *, ...); }
  #else
   extern void __asm(const char *,...);
  #endif
#endif
#endif  //USE_ASM

#if MLP_UNROLL_CYCLES && HWR_SYSTEM == HWR_EPOC32
// ARM WARNING!!! The following macro definitions rely on the fact that
// pointers 'signals' and 'weights' are aligned to 4 byte boundary each.

 #define DECLARE_SIGNAL_ITERATION_VARS(insignals, inweights)   \
   register signed long  *ppi     = (signed long*)(insignals); \
   register signed long  *weights = (signed long*)(inweights); \
   register signed long  pp, ww

 #define CELL_SIGNAL_ITERATION(i, v)                           \
   pp = ppi[(i)];                                              \
   ww = weights[(i)];                                          \
   (v) += (pp >> 16) * (ww >> 16);                             \
   (v) += ((pp << 16) >> 16) * ((ww << 16) >> 16)

#endif /* HWR_EPOC32 */

/* **************************************************************************** */
/* *         Calc cell output                                                 * */
/* **************************************************************************** */
fint_s CountCellSignal(_INT nc, p_mlp_data_type mlpd)
 {
  _INT    i;
  flong   v;
  p_mlp_net_type net = (p_mlp_net_type)mlpd->net;
  p_mlp_cell_type cell = &(net->cells[nc]);
#ifndef DECLARE_SIGNAL_ITERATION_VARS
  fint_s  *ppi = &(mlpd->signals[cell->inp_ind]);
  fint_c  *weights = cell->weights;
#else
  DECLARE_SIGNAL_ITERATION_VARS(&(mlpd->signals[cell->inp_ind]), cell->weights);
#endif

  v  = FINT_C_OF(cell->bias) x_UPCO_S;

#if MLP_UNROLL_CYCLES

#if MLP_CELL_MAXINPUTS != 32
 #error "Can't unroll this net configuration!"
#endif

 #if defined(_SH3_) && USE_ASM
  __asm(
        "mov.l  @R4,R0    \n"
        "lds    R0, MACL  \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "mac.w  @R5+,@R6+ \n"
        "sts    MACL,R0   \n"
        "mov.l  R0,@R4",
        &v,
        ppi,
        weights
       );

 #elif USE_ASM && 0 //_MIPS_

  __asm(
        "lw     $8, 0(%0) \n"
        "mtlo   $8        \n"

        "lw     $8, 0(%1) \n"
        "lw     $9, 0(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8, 2(%1) \n"
        "lw     $9, 2(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8, 4(%1) \n"
        "lw     $9, 4(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8, 6(%1) \n"
        "lw     $9, 6(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8, 8(%1) \n"
        "lw     $9, 8(%2) \n"
        "madd16 $8, $9    \n"

        "lw     $8,10(%1) \n"
        "lw     $9,10(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,12(%1) \n"
        "lw     $9,12(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,14(%1) \n"
        "lw     $9,14(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,16(%1) \n"
        "lw     $9,16(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,18(%1) \n"
        "lw     $9,18(%2) \n"
        "madd16 $8, $9    \n",
        &v,
        ppi,
        weights
       );

  __asm(
        "lw     $8,20(%1) \n"
        "lw     $9,20(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,22(%1) \n"
        "lw     $9,22(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,24(%1) \n"
        "lw     $9,24(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,26(%1) \n"
        "lw     $9,26(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,28(%1) \n"
        "lw     $9,28(%2) \n"
        "madd16 $8, $9    \n"

        "lw     $8,30(%1) \n"
        "lw     $9,30(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,32(%1) \n"
        "lw     $9,32(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,34(%1) \n"
        "lw     $9,34(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,36(%1) \n"
        "lw     $9,36(%2) \n"
        "madd16 $8, $9    \n"
        "lw     $8,38(%1) \n"
        "lw     $9,38(%2) \n"
        "madd16 $8, $9    \n"

        "mflo   $8        \n"
        "sw     $8, 0(%0)",
        &v,
        ppi,
        weights
       );
 #elif defined(DECLARE_SIGNAL_ITERATION_VARS)

  CELL_SIGNAL_ITERATION(0, v);
  CELL_SIGNAL_ITERATION(1, v);
  CELL_SIGNAL_ITERATION(2, v);
  CELL_SIGNAL_ITERATION(3, v);
  CELL_SIGNAL_ITERATION(4, v);
  CELL_SIGNAL_ITERATION(5, v);
  CELL_SIGNAL_ITERATION(6, v);
  CELL_SIGNAL_ITERATION(7, v);
  CELL_SIGNAL_ITERATION(8, v);
  CELL_SIGNAL_ITERATION(9, v);
  CELL_SIGNAL_ITERATION(10, v);
  CELL_SIGNAL_ITERATION(11, v);
  CELL_SIGNAL_ITERATION(12, v);
  CELL_SIGNAL_ITERATION(13, v);
  CELL_SIGNAL_ITERATION(14, v);
  CELL_SIGNAL_ITERATION(15, v);

 #else // Unknown -- C code
  v += FINT_S_OF(ppi[0])  * FINT_C_OF(weights[0])  + FINT_S_OF(ppi[1])  * FINT_C_OF(weights[1])  +
       FINT_S_OF(ppi[2])  * FINT_C_OF(weights[2])  + FINT_S_OF(ppi[3])  * FINT_C_OF(weights[3])  +
       FINT_S_OF(ppi[4])  * FINT_C_OF(weights[4])  + FINT_S_OF(ppi[5])  * FINT_C_OF(weights[5])  +
       FINT_S_OF(ppi[6])  * FINT_C_OF(weights[6])  + FINT_S_OF(ppi[7])  * FINT_C_OF(weights[7])  +
       FINT_S_OF(ppi[8])  * FINT_C_OF(weights[8])  + FINT_S_OF(ppi[9])  * FINT_C_OF(weights[9])  +
       FINT_S_OF(ppi[10]) * FINT_C_OF(weights[10]) + FINT_S_OF(ppi[11]) * FINT_C_OF(weights[11]) +
       FINT_S_OF(ppi[12]) * FINT_C_OF(weights[12]) + FINT_S_OF(ppi[13]) * FINT_C_OF(weights[13]) +
       FINT_S_OF(ppi[14]) * FINT_C_OF(weights[14]) + FINT_S_OF(ppi[15]) * FINT_C_OF(weights[15]);

   v+= FINT_S_OF(ppi[16]) * FINT_C_OF(weights[16]) + FINT_S_OF(ppi[17]) * FINT_C_OF(weights[17]) +
       FINT_S_OF(ppi[18]) * FINT_C_OF(weights[18]) + FINT_S_OF(ppi[19]) * FINT_C_OF(weights[19]) +
       FINT_S_OF(ppi[20]) * FINT_C_OF(weights[20]) + FINT_S_OF(ppi[21]) * FINT_C_OF(weights[21]) +
       FINT_S_OF(ppi[22]) * FINT_C_OF(weights[22]) + FINT_S_OF(ppi[23]) * FINT_C_OF(weights[23]) +
       FINT_S_OF(ppi[24]) * FINT_C_OF(weights[24]) + FINT_S_OF(ppi[25]) * FINT_C_OF(weights[25]) +
       FINT_S_OF(ppi[26]) * FINT_C_OF(weights[26]) + FINT_S_OF(ppi[27]) * FINT_C_OF(weights[27]) +
       FINT_S_OF(ppi[28]) * FINT_C_OF(weights[28]) + FINT_S_OF(ppi[29]) * FINT_C_OF(weights[29]) +
       FINT_S_OF(ppi[30]) * FINT_C_OF(weights[30]) + FINT_S_OF(ppi[31]) * FINT_C_OF(weights[31]);
  #endif // SH3

#else
  for (i = 0; i < MLP_CELL_MAXINPUTS; i += 4, weights += 4, ppi += 4)
   {
    v += FINT_S_OF(ppi[0]) * FINT_C_OF(weights[0]) +
         FINT_S_OF(ppi[1]) * FINT_C_OF(weights[1]) +
         FINT_S_OF(ppi[2]) * FINT_C_OF(weights[2]) +
         FINT_S_OF(ppi[3]) * FINT_C_OF(weights[3]);
   }
#endif

  i = ((v x_DNCO_C) * (MLP_EXPTABL_SIZE/MLP_EXPTABL_MAX)) x_DNCO_S;

  if (i >= 0)
   {
    if (i >= MLP_EXPTABL_SIZE) return net->exp_tabl[MLP_EXPTABL_SIZE-1];
     else return net->exp_tabl[i];
   }
   else
   {
//    i = -i;
    if (i <= -MLP_EXPTABL_SIZE) return (fint_s)(MLP_MAX_INT_S - net->exp_tabl[MLP_EXPTABL_SIZE-1]);
     else return (fint_s)(MLP_MAX_INT_S - net->exp_tabl[-i]);
   }
 }
/* **************************************************************************** */
/* *        End OF all                                                        * */
/* **************************************************************************** */
//
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\breaks.cpp ===
#ifndef LSTRIP

/* **************************************************************************/
/* The treatment of trajectorial private perforated parts                   */
/* **************************************************************************/

#include "hwr_sys.h"
#include "ams_mg.h"
#include "lowlevel.h"
#include "lk_code.h"
#include "def.h"
#include "low_dbg.h"
#include "calcmacr.h"

#if PG_DEBUG
#include "pg_debug.h"
#endif

#define  EPS_KILL_CLOSE_MAX_MIN             15 /* was 200 */
#define  EPS_KILL_HIGH_CLOSE_MAX_MIN        25 /* was (EPS_KILL_CLOSE_MAX_MIN * 3) */
#define  MIN_COS_CONVERT_BEGEND_TO_STROKE   92
#define  MIN_DYtoDX_RATIO_CONV_TO_ST        2
#define  MAX_DYtoDX_RATIO_CONV_TO_XT        MIN_DYtoDX_RATIO_CONV_TO_ST
#define  DX_X_TRANSFER                      50

#define MIDDLE_STR MEAN_OF(STR_UP,STR_DOWN)

_SHORT conv_top_elem_to_ST(p_low_type low_data);
_SHORT del_close_MAX_MIN(p_low_type low_data);
_SHORT placement_XT_ST(p_low_type low_data);
_SHORT Placement_XT_With_HATCH(p_SPECL p_XT_ST,p_SPECL nxt,p_low_type low_data);
_BOOL DoubleXT(p_SPECL p_XT_ST,p_low_type low_data);
p_SPECL FindClosestUpperElement(p_SPECL specl,_SHORT Ipoint);
_SHORT Placement_XT_WO_HATCH_AND_ST(p_SPECL p_XT_ST,p_low_type low_data);
_BOOL IsUpperElemByTimeOK(p_SPECL pUpper,p_SPECL p_XT_ST,p_low_type low_data);
_SHORT Placement_XT_CUTTED(p_SPECL p_XT_ST,p_low_type low_data);

_SHORT Put_XT_ST(p_low_type low_data,p_SPECL pWhereTo,p_SPECL p_XT_ST,
                 _BOOL bFoundWhereTo);
_SHORT SortXT_ST(p_low_type low_data);
_SHORT FindDelayedStroke(p_low_type low_data);
_SHORT CheckStrokesForDxTimeMatch(p_low_type low_data);
_SHORT del_ZZ_HATCH( p_SPECL specl);

_BOOL  punctuation(p_low_type low_data,
           p_SPECL pNearChecked, p_SPECL pToCheck);
_VOID insert_drop(p_SPECL cur,p_low_type low_data);
_BOOL FindQuotes(p_SPECL p_XT_ST,p_low_type low_data);
_VOID PutLeadingQuotes(p_low_type low_data,p_SPECL p1stQuote,p_SPECL p2ndQuote);
_VOID PutTrailingQuotes(p_low_type low_data,p_SPECL p_XT_ST);
_BOOL IsStick(p_SPECL p1st,p_SPECL p2nd);

_VOID change_last_IU_height(p_low_type low_data);
_SHORT make_different_breaks(p_low_type low_data);
_INT GetDxBetweenStrokes(p_low_type low_data,
                         _INT prv_stroke_beg,_INT prv_stroke_end,
                         _INT nxt_stroke_beg_cutted,_INT nxt_stroke_end);
_BOOL is_X_crossing_XT(p_SPECL pToCheck,p_low_type low_data,p_UCHAR fl_ZZ);
_SHORT placement_X(p_low_type low_data);
_SHORT FindMisplacedParentheses(p_low_type low_data);
_VOID  AdjustZZ_BegEnd (p_low_type low_data );     /*CHE*/
_VOID  redirect_sticks(p_low_type low_data);

#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
_SHORT find_umlaut(p_low_type low_data);
_BOOL IsPartOfTrajectoryInside(p_low_type low_data,
                               p_SPECL pBeg,p_SPECL pEnd);
_BOOL IsExclamationOrQuestionSign(p_low_type low_data,
                                  p_SPECL pBeg,p_SPECL pEnd);
#if defined(FOR_FRENCH)
_SHORT find_numero(p_low_type low_data);
#endif /* FOR_FRENCH */

#endif /* FOR_GERMAN... */
_BOOL SecondHigherFirst(p_low_type low_data,
                        p_SPECL cur,p_SPECL prv,p_SPECL nxt,
                        _INT prv_stroke_beg,_INT prv_stroke_end,
                        _INT nxt_stroke_beg,_INT nxt_stroke_end);

#if defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
_SHORT find_angstrem(p_low_type low_data);
#endif /* FOR_SWED */
p_SPECL GetNextNonWeakElem(p_SPECL pEl);
_SHORT InsertBreakBeforeRightKrest(p_low_type low_data);

_SHORT CheckSequenceOfElements(p_low_type low_data);

_SHORT xt_st_zz(p_low_type low_data) /* low_level data                 */
{
 p_SPECL  specl = low_data->specl;      /*  The list of special points on */
                    /* the trajectory                 */

 DBG_ChkSPECL(low_data);
 conv_top_elem_to_ST(low_data);
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
 if( low_data->rc->enabled_languages & (EL_GERMAN | EL_FRENCH | EL_SWEDISH) )
  find_umlaut(low_data);
#endif /* FOR_GERMAN */
#if defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
 if( low_data->rc->enabled_languages & EL_SWEDISH )
   find_angstrem(low_data);
#endif /* FOR_SWED */
#if defined(FOR_FRENCH)
 if(low_data->rc->enabled_languages & EL_FRENCH)
  find_numero(low_data);
#endif /* FOR_FRENCH */
 redirect_sticks(low_data);
 DBG_ChkSPECL(low_data);
 FindDelayedStroke(low_data);
 DBG_ChkSPECL(low_data);
 placement_XT_ST(low_data);
 DBG_ChkSPECL(low_data);
 InsertBreakBeforeRightKrest(low_data);
 DBG_ChkSPECL(low_data);
 FindDArcs(low_data);  /*CHE*/
 DBG_ChkSPECL(low_data);
 /*if  ( low_data->rc->rec_mode != RECM_FORMULA )*/  /*CHE*/
 if(low_data->rc->lmod_border_used == LMOD_BORDER_TEXT)
  del_close_MAX_MIN(low_data);
 SortXT_ST(low_data);
 placement_X(low_data);
 FindMisplacedParentheses(low_data);
 del_ZZ_HATCH(specl);
 CheckStrokesForDxTimeMatch(low_data);
 DBG_ChkSPECL(low_data);
 change_last_IU_height(low_data);
 make_different_breaks(low_data);
 AdjustZZ_BegEnd(low_data);     /*CHE*/
 CheckSequenceOfElements(low_data);
 DBG_final_print(specl);

 return SUCCESS;
}  /***** end of xt_st_zz *****/

/* **************************************************************************/
       /*  Auxiliary function: */

#define  CONV_TO_DOT(el,attr)  {RefreshElem((el),DOT,_ST_,(attr)); (el)->other=0;}

#if  LOW_INLINE
  #define  ConvertToDot(el,attr)   CONV_TO_DOT((el),(attr))
#else  /*!LOW_INLINE*/

_VOID  ConvertToDot ( p_SPECL pElem, _UCHAR attr );

_VOID  ConvertToDot ( p_SPECL pElem, _UCHAR attr )
{
  CONV_TO_DOT(pElem,attr);
}

#endif  /*!LOW_INLINE*/

/* **************************************************************************/
/* Convert top elements to POINTs                                           */
/* **************************************************************************/
_SHORT conv_top_elem_to_ST(p_low_type low_data)
{
  p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                        /* the trajectory                 */
  p_SHORT x=low_data->x,                /* x;y co-ordinates               */
          y=low_data->y;
  _SHORT dx,dy;                                      /* difference on x,y   */
  _UCHAR hghtCur,                                    /* the heights         */
//         hghtPrv,
         hghtNxt;
  p_SPECL  cur,                                      /* indexs              */
           nxt,                                      /*    on               */
           prv;                                      /*      elements       */
  _RECT  box;

 cur=specl;
 while(cur!=_NULL)                                   /* go on the list      */
  {
    nxt=cur->next; prv=cur->prev;
    hghtCur = HEIGHT_OF(cur);
    if(nxt!=_NULL) hghtNxt = HEIGHT_OF(nxt);

    /*  If this is high "_I..." between breaks: */
    if(Is_IU_or_ID(cur) && (hghtCur<=_UE2_) &&
       (prv->code==_ZZZ_) && NULL_or_ZZ_this(nxt)
      )
     ConvertToDot(cur,_US2_);
      /*  If there are two successive high "_I..."'s   */
      /* of different types between breaks:            */
    if(nxt!=_NULL &&
       (cur->code==_IU_ && nxt->code==_ID_ ||
        cur->code==_ID_ && nxt->code==_IU_)  &&
       (hghtCur<=_UE2_) && (hghtNxt<=_UE2_) && (prv->code==_ZZZ_) &&
       NULL_or_ZZ_after(nxt))
     {
       p_SPECL wrk=nxt->next;
       size_cross(cur->ibeg,nxt->iend,x,y,&box);
       dx=DX_RECT(box);
       dy=DY_RECT(box);
       if (   (wrk==_NULL || (wrk->next)->code!=_ST_ || HEIGHT_OF(wrk->next)<_MD_)
           && dx*MIN_DYtoDX_RATIO_CONV_TO_ST <= dy )
        {
          cur->iend=nxt->iend;
          ConvertToDot ( cur, MidPointHeight(cur,low_data) );
          DelFromSPECLList (nxt);
        }
     }
#if 0
       /*  Convert some elements to _ST_, if they are */
       /* very high (i.e. if the whole trajectory of  */
       /* them lies higher than upper border line):   */
    else /*CHE*/
    if (cur->code==_O_ || cur->code==_ANl || cur->code==_GD_)
     {
       yMinMax (cur->ibeg,cur->iend,y,&box.top,&box.bottom);
       hghtPrv = HEIGHT_OF(prv);
       if(box.bottom<STR_UP)
        switch ((_SHORT) prv->code)
         {
           case _ZZZ_: if ( NULL_or_ZZ_this(nxt) )
                        {
                          ConvertToDot (cur,_US2_);
                          break;
                        }
                      if( Is_IU_or_ID(nxt) &&
                         (hghtNxt<=_UI1_) &&
                          NULL_or_ZZ_after(nxt) )
                       {
                         ConvertToDot (cur,_US2_);
                         cur->iend=nxt->iend;
                         DelFromSPECLList (nxt);
                         break;
                       }
           case _IU_:
           case _ID_: if((prv->prev)->code==_ZZZ_ && hghtPrv<=_UI1_)
                       {
                         if ( NULL_or_ZZ_this(nxt) )
                          {
                            ConvertToDot (cur,_US2_);
                            cur->ibeg=prv->ibeg;
                            DelFromSPECLList (prv);
                            break;
                          }
                          else  /*CHE*/
                          if( Is_IU_or_ID(nxt) &&
                              hghtNxt <= _UI1_  &&
                              NULL_or_ZZ_after(nxt) )
                           {
                             ConvertToDot (cur,_US2_);
                             cur->ibeg=prv->ibeg;
                             cur->iend=nxt->iend;
                             DelFromSPECLList (prv);
                             DelFromSPECLList (nxt);
                             break;
                           }
                       }
           default:   break;
         }
     }
#endif
    cur=cur->next;
  }
return SUCCESS;
}  /***** end of conv_top_elem_to_ST *****/

/****************************************************************************/
/* Delete the coincided maximums and minimums                               */
/****************************************************************************/
_SHORT del_close_MAX_MIN(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;        /*  The list of special points on */
                                          /* the trajectory                 */
  p_SHORT x=low_data->x,
          y=low_data->y;     /* x;y co-ordinates and the quantity of points */
  _LONG   eps;
  p_SPECL cur,                                       /* indexes             */
          nxt;
  _SHORT Retcod,ibeg2,iend2;

 cur=specl;
 while(cur->next!=_NULL)                             /* go on the list      */
  {
    _BOOL IsBreak=_FALSE;
    nxt=cur->next;
    switch ( (_SHORT)cur->code )
     {
       case _IU_:
                 if(cur->mark!=BEG && cur->mark!=END ||
                    (cur->other & MIN_MAX_CUTTED)    ||
                    (cur->other & WAS_REDIRECTED)
                   )
                  break;
                 while(nxt!=_NULL && nxt->code!=_IU_ && nxt->code!=_UU_)
                  {
                    if(IsAnyBreak(nxt))
                     IsBreak=_TRUE;
                    else if(nxt->code!=_ID_ && !IsXTorST(nxt) ||
                            HEIGHT_OF(nxt)>_DI2_
                           )
                     goto NEXT_STEP;
                    nxt=nxt->next;
                  }
                 if(cur->mark==END                  &&
                    !((cur->prev)->mark==BEG      &&
                      ((cur->prev)->code==_ID_  ||
                       (cur->prev)->code==_UDR_ ||
                       (cur->prev)->code==_UDL_
                      )
                     )
                   )
                  goto NEXT_STEP;
                 if(nxt!=_NULL && (nxt->mark==MINW || nxt->mark==BEG) && nxt->next!=_NULL)
                  {
                    _INT DistIU,DistID=ALEF;
                    p_SPECL pID1st=cur->next;
                    _BOOL   IsID1st=(pID1st->code==_ID_);
                    #define DX_MIN_TO_BE_GLUED 10

                    if(nxt->code==_IU_ && (nxt->other & WAS_REDIRECTED))
                     goto NEXT_STEP;
                    if(HEIGHT_OF(nxt->next)>_DE1_)
                     goto NEXT_STEP;
                    if((IsBreak || nxt->code==_UU_ && CLOCKWISE(nxt)) &&
                        IsID1st && HEIGHT_OF(pID1st)<=_MD_)
                     goto NEXT_STEP;
                    if(nxt->code==_UU_ && CLOCKWISE(nxt) &&
                       x[nxt->iend]-x[nxt->ibeg]>DX_MIN_TO_BE_GLUED)
                     goto NEXT_STEP;
                    if(IsBreak)
                     {
                       #define CURV_STRAIGHT 5
                       p_SPECL wrk=nxt->next;
                       _INT iXMinCur,iXMinNxt;

                       if(nxt->code==_UU_)
                        goto NEXT_STEP;
                       if(wrk->code!=_ID_ && wrk->code!=_UD_)
                        goto NEXT_STEP;
                       iXMinCur=ixMin(cur->ibeg,nxt->ibeg-1,x,y);
                       iXMinNxt=ixMin(nxt->ibeg,wrk->iend,x,y);
                       if(iXMinCur==-1 || iXMinNxt==-1)
                        goto NEXT_STEP;
                       if(x[iXMinNxt]<x[iXMinCur])
                        {
                          if(wrk->mark==END &&
                             HWRAbs(CurvMeasure(x,y,nxt->ibeg,wrk->iend,-1))>CURV_STRAIGHT
                            )
                           goto NEXT_STEP;
                          if(wrk->mark!=END && wrk->next!=_NULL          &&
                             x[MEAN_OF(nxt->ibeg,wrk->ibeg)]<
                             x[MEAN_OF(cur->ibeg,pID1st->ibeg)] &&
                             HWRAbs(CurvMeasure(x,y,nxt->ibeg,(wrk->next)->iend,-1))>CURV_STRAIGHT
                            )
                           goto NEXT_STEP;
                        }
                       if(IsID1st)
                        DistID=Distance8(x[pID1st->ipoint0],y[pID1st->ipoint0],
                                         x[wrk->ipoint0],y[wrk->ipoint0]);
                     }
                    if(HEIGHT_OF(cur)<=_US2_ ||
                       HEIGHT_OF(nxt)<=_US2_ )
                     eps=EPS_KILL_HIGH_CLOSE_MAX_MIN;
                    else
                     eps=EPS_KILL_CLOSE_MAX_MIN;
                    if(nxt->code==_UU_)
                     ibeg2=iend2=nxt->ipoint0;
                    else
                     {
                       ibeg2=nxt->ibeg;
                       iend2=nxt->iend;
                     }
                    DistIU=CalcDistBetwXr(x,y,cur->ibeg,cur->iend,
                                              ibeg2,iend2,&Retcod);
                    if(DistIU<eps && DistIU<ONE_THIRD(DistID))
                     {
                       p_SPECL wrk=nxt->prev,prv=cur->prev;
                       while(IsXTorST(wrk))
                        wrk=wrk->prev;
                       DelFromSPECLList(cur);
                       while(IsXTorST(prv))
                        {
                          prv=prv->prev;
                          SwapThisAndNext(prv->next);
                        }
//                       (cur->next)->mark=BEG;
                       if(IsAnyBreak(wrk))
                        {
                          if((cur->next)->mark==END)
                           (cur->next)->mark=BEG;
                          DelFromSPECLList(wrk);
                          nxt->mark=MINW;
                          SET_CLOCKWISE(nxt);
                        }
                     }
                  }
         break;
       case _ID_:
                 if(cur->mark!=END                ||
                    (cur->prev)->mark!=BEG        ||
                    (cur->other & MIN_MAX_CUTTED) ||
                    (cur->other & WAS_REDIRECTED)
                   ) 
                  break;
                 while(nxt!=_NULL && nxt->code!=_ID_)
                  {
                    if(!IsAnyBreak(nxt) && nxt->code!=_IU_)
                     goto NEXT_STEP;
                    nxt=nxt->next;
                  }
                 if(nxt!=_NULL && nxt->mark==END)
                  {
                    _INT DistID,DistIU;
                    p_SPECL pIU1st=cur->prev,
                            pIU2nd=nxt->prev;

                    if(nxt->other & WAS_REDIRECTED)
                     goto NEXT_STEP;

                    eps=EPS_KILL_CLOSE_MAX_MIN;
                    DistIU=Distance8(x[pIU1st->ipoint0],y[pIU1st->ipoint0],
                                     x[pIU2nd->ipoint0],y[pIU2nd->ipoint0]);
                    DistID=CalcDistBetwXr(x,y,cur->ibeg,cur->iend,
                                          nxt->ibeg,nxt->iend,&Retcod);
                    if(DistID<eps && DistID<ONE_THIRD(DistIU))
                     {
                       if((nxt->prev)->mark==BEG)
                        {
                          (nxt->prev)->mark=END;
                          DelFromSPECLList(nxt);
                          if(IsAnyBreak(cur->next))
                           {
                             DelFromSPECLList(cur->next);
                             cur->mark=MAXW;
                             SET_COUNTERCLOCKWISE(cur);
                           }
                        }
                       else
                        DelFromSPECLList(cur);
                     }
                  }
                 break;
     }
NEXT_STEP:
    cur=cur->next;
  }
return SUCCESS;
}  /***** end of del_close_MAX_MIN *****/

/****************************************************************************/
/* This function finds "numero" sign - point like circle (may be underlined)*/
/****************************************************************************/
#if defined (FOR_FRENCH)

_SHORT find_numero(p_low_type low_data)
{
 p_SPECL cur=low_data->specl;
 p_SHORT x=low_data->x,y=low_data->y;

 while(cur!=_NULL)
  {
    /* look at all upper points, except the first one */
    if(cur->code==_ST_ && cur->ibeg!=1 && HEIGHT_OF(cur)<=_MD_)
     {
       _RECT rWrk,rST;
       _INT  ibegST=cur->ibeg,iendST=cur->iend;
       GetTraceBox(x,y,ibegST,iendST,&rST);
       /* calculate bounding box of the part of trajectory before ST */
       GetTraceBoxWithoutXT_ST(low_data,1,ibegST-2,&rWrk);
       /* check x-crossing */
       if(rST.left>rWrk.right)
        {
          /* calculate bounding box of the part of trajectory after ST */
          GetTraceBoxWithoutXT_ST(low_data,iendST+2,low_data->ii-2,&rWrk);
          /* check x-crossing */
          if(rST.right<rWrk.left)
           {
             p_SPECL nxt=cur->next,prv=cur->prev;
             _BOOL   IsPrvXT=(prv->code==_XT_),
                     IsNxtXT=nxt!=_NULL && (nxt->code==_XT_),
                     IsPrvXTOK=_FALSE,IsNxtXTOK=_FALSE;
             _RECT   rXT;
             /* check presence of underline for previous elem */
             if(IsPrvXT && HEIGHT_OF(prv)>=HEIGHT_OF(cur) ||
                IsNxtXT && HEIGHT_OF(nxt)>=HEIGHT_OF(cur))
              {
                if(IsPrvXT)
                 {
                   GetTraceBox(x,y,prv->ibeg,prv->iend,&rXT);
                   if(xHardOverlapRect(&rXT,&rST,!STRICT_OVERLAP))
                    IsPrvXTOK=_TRUE;
                 }
                if(IsNxtXT)
                 {
                   GetTraceBox(x,y,nxt->ibeg,nxt->iend,&rXT);
                   if(xHardOverlapRect(&rXT,&rST,!STRICT_OVERLAP))
                    IsNxtXTOK=_TRUE;
                 }
              }
             /* if underline exists - it's numero */
             if(IsPrvXTOK!=IsNxtXTOK)
              {
                if(IsPrvXTOK)
                 prv->other=PROCESSED;
                else
                 nxt->other=PROCESSED;
                cur->other=PROCESSED;
                if(IsPrvXTOK)
                 {
                   insert_drop(cur,low_data);
                   SwapThisAndNext(prv);
                 }
                else
                 insert_drop(nxt,low_data);
              }
             /* still try to detect numero sign for standalone ST */
             else
               {
                 /* if selfcrossing exists - it's numero */
                 #define MIN_SQR_TO_BE_NUMERO 200
                 if(CurveHasSelfCrossing(x,y,ibegST,iendST,_NULL,_NULL,MIN_SQR_TO_BE_NUMERO))
                  {
                    cur->other=PROCESSED;
                    insert_drop(cur,low_data);
                  }
               }
           }
        }
     }
    cur=cur->next;
  }

 return SUCCESS;

} /* end of find_numero */

#endif /* FOR_FRENCH */

/* **************************************************************************/
/* Transfer of points and strokes on their places                           */
/* **************************************************************************/
_SHORT placement_XT_ST(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x;                /* x co-ordinate                  */
 p_SPECL  cur,                         /* elements of list               */
          nxt,
          p_XT_ST;

 DBG_ChkSPECL(low_data);

 specl->attr=_UI2_; x[0]=ALEF;
 /* First, mark all _XT_s and _ST_s as "not touched yet": */
 for  ( cur=specl;cur!=_NULL;cur=cur->next )
  {
   if(IsXTorST(cur) && (cur->other & PROCESSED))
    continue;
   if(cur->code==_XT_)
    {
      if(cur->other & CUTTED)
       {
         p_SPECL pHatch=cur->next;
         cur->other=CUTTED | NOT_PROCESSED;
         /* delete HATCHes after "cutted" stroke */
         while(pHatch!=_NULL && pHatch->mark==HATCH)
          {
            if(pHatch->ibeg>cur->iend)
             DelThisAndNextFromSPECLList(pHatch);
            pHatch=(pHatch->next)->next;
          }
       }
      else
       cur->other=NOT_PROCESSED;
      cur->ipoint0=cur->ipoint1=0;
    }
   else if(cur->code==_ST_)
    {
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
      if(cur->other & ST_UMLAUT)
       cur->other=ST_UMLAUT | NOT_PROCESSED;
#if defined(FOR_FRENCH) || defined (FOR_INTERNATIONAL)
      else if(cur->other & ST_CEDILLA)
       {
         if(cur->other & CEDILLA_END)
          cur->other=(ST_CEDILLA | CEDILLA_END) | NOT_PROCESSED;
         else
          cur->other=ST_CEDILLA | NOT_PROCESSED;
       }
#endif /* FOR_FRENCH */
#if defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
      else if(cur->other & ST_ANGSTREM)
       cur->other=ST_ANGSTREM | NOT_PROCESSED;
#endif /* FOR_SWED */
      else
       cur->other=NOT_PROCESSED;
#else  /* ! FOR_GERMAN... */       /*CHE*/
      cur->other=NOT_PROCESSED;
#endif /* ! FOR_GERMAN... */
      cur->ipoint1=0;
    }
  }

 DBG_ChkSPECL(low_data);

      /* Process all _XT_s and _ST_s: */
cur=specl;
while(cur!=_NULL)                                   /* go on the list      */
 {
   nxt=cur->next;
   if(IsXTorST(cur) && (cur->other & PROCESSED)==0)
    {
      p_XT_ST = cur;
      p_XT_ST->other |= PROCESSED;                  /* mark it as "touched" */
      if(p_XT_ST->code==_XT_ && (p_XT_ST->other & CUTTED))
       Placement_XT_CUTTED(p_XT_ST,low_data);
      else if(p_XT_ST->code==_XT_ && DoubleXT(p_XT_ST,low_data))
            ; /* nothing */
      else if(p_XT_ST->code==_XT_ && nxt!=_NULL &&  /*if there is HATCH    */
         nxt->mark==HATCH)                          /* after the stroke    */
       Placement_XT_With_HATCH(p_XT_ST,nxt,low_data);
      else
       {
         p_SPECL prv=p_XT_ST->prev;
         /* here we'll try to find double quotes */
         if(FindQuotes(p_XT_ST,low_data))
          nxt=prv->next;
         else
          Placement_XT_WO_HATCH_AND_ST(p_XT_ST,low_data);
       }
    }
   if(nxt==_NULL) break;
   cur=nxt;
 }
specl->attr=0; x[0]=0;

DBG_ChkSPECL(low_data);

return SUCCESS;
}  /***** end of placement_XT_ST *****/

/* **************************************************************************/
/* Transfer strokes with crossing on their places                           */
/* **************************************************************************/
_SHORT Placement_XT_With_HATCH(p_SPECL p_XT_ST,p_SPECL pHatch,
                               p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on   */
                                       /* the trajectory                   */
 p_SHORT x=low_data->x,                /* x;y co-ordinates                 */
         y=low_data->y;
 p_SPECL wrk,                          /* elements of list                 */
         pBeforeHatch,
         pAfterHatch,
         pNearHatch,
         pLastHatch,
         pWhereTo;                     /* where to put _XT_(_ST_)          */
 _BOOL   bFoundWhereTo=_FALSE,         /* If good HATCH for _XT_ found     */
         bNextHatchUsed;               /* If the "next" elem of HATCH      */
                                       /* used in considerations (i.e. the */
                                       /* first part of the HATCH crossing)*/
 _INT    xMid_XT_ST,
         dnum,dnummin,                 /* difference in points             */
         istart,istop;
 _UCHAR  hghtNearHatch,
         hghtWhereTo;                  /* the heights                      */
 _SHORT  NumHatch=0;

  /* mark, that it has crossing */
  p_XT_ST->other |= WITH_CROSSING;
  pLastHatch=pWhereTo=specl;
  while(pHatch!=_NULL && pHatch->mark==HATCH)
   {
      /* Took the non-XT_ST part of the HATCH: */
     if(pHatch->ibeg<=p_XT_ST->iend)               /* upper          */
      {                                            /* element,       */
        pHatch=pHatch->next;
        bNextHatchUsed=_TRUE;
      }
     else
      bNextHatchUsed=_FALSE;
     NumHatch++;
     if(NumHatch==1)
      p_XT_ST->ipoint0=MID_POINT(pHatch);
     else if(NumHatch==2)
      p_XT_ST->ipoint1=MID_POINT(pHatch);
     else
      p_XT_ST->ipoint0=p_XT_ST->ipoint1=0;

     istart=pHatch->ibeg;
     while(y[--istart]!=BREAK);
     istop=pHatch->iend;
     while(y[++istop]!=BREAK);
     /*  Find the left closest to the chozen part of the HATCH */
     /* elem, located on the trajectory between the closest    */
     /* BREAK and the beginning of the HATCH:                  */

     pNearHatch=wrk=pBeforeHatch=specl;         /* transfer          */
     dnummin=ALEF;                              /* to the nearest    */
     while(wrk!=_NULL)                          /* which has HATCH   */
      {
        if(wrk->ibeg>istart && pHatch->ibeg>=wrk->ibeg &&
           wrk->code!=_XT_  && wrk->code!=_ST_         &&
           !IsAnyBreak(wrk) && wrk->mark!=HATCH        &&
           wrk->mark!=ANGLE && wrk->mark!=SHELF)
         {
           dnum=HWRAbs(pHatch->ibeg-wrk->ibeg);
           if(dnum<=dnummin)
            { dnummin=dnum; pBeforeHatch=wrk; }
           bFoundWhereTo=_TRUE;
         }
        wrk=wrk->next;
      }

     /*  Find the right closest to the chozen part of the HATCH */
     /* elem, located on the trajectory between the closest     */
     /* BREAK and the beginning of the HATCH:                   */

     wrk=pAfterHatch=specl;                   /* transfer            */
     dnummin=ALEF;                            /* to the nearest      */
     while(wrk!=_NULL)                        /* which has HATCH     */
      {
        if(wrk->ibeg<istop  && pHatch->ibeg<wrk->ibeg &&
           wrk->code!=_XT_  && wrk->code!=_ST_        &&
           !IsAnyBreak(wrk) && wrk->mark!=HATCH       &&
           wrk->mark!=ANGLE && wrk->mark!=SHELF)
         {
           dnum=HWRAbs(pHatch->ibeg-wrk->ibeg);
           if(dnum<=dnummin)
            { dnummin=dnum; pAfterHatch=wrk; }
           bFoundWhereTo=_TRUE;
         }
        wrk=wrk->next;
      }

     /*  Choose elem, where to move _XT_: */
     {
      #define SIDE_GAMMA(el) ((el)->code==_Gl_ || (el)->code==_Gr_)
      /* if upper before - OK */
      if(IsUpperElem(pBeforeHatch))
       pNearHatch=pBeforeHatch;
      /* if lower or nothing before */
      else if(IsLowerElem(pBeforeHatch) || pBeforeHatch==specl)
       {
         /* if upper after - OK */
         if(IsUpperElem(pAfterHatch))
          pNearHatch=pAfterHatch;
         /* if nothing after - special case "I" */
         else if(pAfterHatch==specl)
          pNearHatch=pBeforeHatch->prev;
         /* if lower after and nothing before - "deleted" upper element */
         else if(IsLowerElem(pAfterHatch) && pAfterHatch->next!=_NULL)
          pNearHatch=pAfterHatch->next;
         /* if side gamma after - choose element after */
         else if(SIDE_GAMMA(pAfterHatch))
          pNearHatch=pAfterHatch;
       }
      /* if side gamma before */
      else if(SIDE_GAMMA(pBeforeHatch))
       {
         /* if upper after - OK */
         if(IsUpperElem(pAfterHatch))
          pNearHatch=pAfterHatch;
         /* if lower or nothing after - choose element before */
         else if(IsLowerElem(pAfterHatch) || pAfterHatch==specl)
          pNearHatch=pBeforeHatch;
         /* if side gamma after - choose highest element */
         else if(SIDE_GAMMA(pAfterHatch))
               if(HEIGHT_OF(pBeforeHatch) < HEIGHT_OF(pAfterHatch))
                pNearHatch=pBeforeHatch;
               else
                pNearHatch=pAfterHatch;
       }
     }
     if(pWhereTo==specl || pWhereTo==_NULL)
      {
        pWhereTo=pNearHatch;
        pLastHatch=pHatch;
      }
     else
      {
        if(pNearHatch==_NULL)
         break;
        xMid_XT_ST=x[MID_POINT(p_XT_ST)];
        hghtNearHatch = HEIGHT_OF(pNearHatch);
        hghtWhereTo = HEIGHT_OF(pWhereTo);
        /* to that, where the middle is closer.                 */
        if(HWRAbs(x[MID_POINT(pLastHatch)]-xMid_XT_ST) >=
           HWRAbs(x[MID_POINT(pHatch)]-xMid_XT_ST)
          )
         {
           pWhereTo=pNearHatch;               /* to the stroke middle*/
           pLastHatch=pHatch;
         }
      }
     if ( !bNextHatchUsed )
      pHatch=pHatch->next;
     pHatch=pHatch->next;
   }

 DBG_ChkSPECL(low_data);

 Put_XT_ST(low_data,pWhereTo,p_XT_ST,bFoundWhereTo);

 DBG_ChkSPECL(low_data);

 return SUCCESS;

} /* end of Placement_XT_With_HATCH */

/* **************************************************************************/
/* This function checks situation with "double t"                           */
/* **************************************************************************/
_BOOL DoubleXT(p_SPECL p_XT_ST,p_low_type low_data)
{
 _BOOL bret=_FALSE;
 p_SPECL pXT=p_XT_ST+1; /* next element after XT, STROKE in the past */
 p_SHORT x=low_data->x;

 if(pXT->ipoint0!=UNDEF && pXT->ipoint1!=UNDEF)
  {
    p_SPECL specl=low_data->specl,
            pWhereToReal;
    _SHORT  ipointReal,ipointFake;

    if(HWRAbs(x[MID_POINT(p_XT_ST)]-x[pXT->ipoint0]) >
       HWRAbs(x[MID_POINT(p_XT_ST)]-x[pXT->ipoint1])  )
     {
       ipointReal=pXT->ipoint1;
       ipointFake=pXT->ipoint0;
     }
    else
     {
       ipointReal=pXT->ipoint0;
       ipointFake=pXT->ipoint1;
     }
    pWhereToReal=FindClosestUpperElement(specl,ipointReal);
    if(pWhereToReal!=specl)
     {
       p_SPECL pWhereToFake=FindClosestUpperElement(specl,ipointFake);
       if(pWhereToFake!=specl)
        {
		   // mrevow May 2000 Fixes raid bug 4395
		  p_SPECL pFakeXT =  NewSPECLElem(low_data);
		  if (pFakeXT)
		  {
			  p_XT_ST->other |= WITH_CROSSING;
			  HWRMemCpy(pFakeXT,p_XT_ST,sizeof(SPECL));
			  Insert2ndAfter1st(p_XT_ST,pFakeXT);
			  Move2ndAfter1st(pWhereToReal->prev,p_XT_ST);
			  Move2ndAfter1st(pWhereToFake->prev,pFakeXT);
			  pFakeXT->other |= FAKE;
			  bret=_TRUE;
		  }
        }
     }
  }

 return bret;

} /* end of DoubleXT */

/* **************************************************************************/
/* This program finds closest upper element before given point              */
/* **************************************************************************/
p_SPECL FindClosestUpperElement(p_SPECL specl,_SHORT Ipoint)
{
 p_SPECL cur=specl->next;

 while(cur!=_NULL &&
       (IsXTorST(cur) || cur->mark==HATCH || cur->ibeg<=Ipoint)
      )
  cur=cur->next;
 if(cur==_NULL)
  return(specl);
 while(cur!=specl)
  {
    cur=cur->prev;
    if(IsUpperElem(cur) && cur->ibeg<=Ipoint)
     break;
  }

 return(cur);

} /* end of FindClosestUpperElement */



/* **************************************************************************/
/* Transfer strokes without crossing and dots on their places               */
/* **************************************************************************/
_SHORT Placement_XT_WO_HATCH_AND_ST(p_SPECL p_XT_ST,p_low_type low_data)
{
 p_SPECL specl = low_data->specl;      /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,                /* x;y co-ordinates               */
         y=low_data->y;
 p_SPECL wrk,                          /* elements of list               */
         pWhereTo;                     /* where to put _XT_(_ST_)        */
 _BOOL   bFoundWhereTo=_FALSE;         /* If element for _XT_(_ST_) found*/
 _UCHAR  hghtWrk;                      /* height of element              */
 _SHORT  slope=low_data->slope;        /* inclination                    */
 _INT    iMid_XT_ST,iMid_wrk,
         xMid_XT_ST,
         xMid_wrk;
 _BOOL   bIsCedilla=_FALSE;
 _INT    ds,dsmin;

#if defined(FOR_FRENCH) || defined (FOR_INTERNATIONAL)
  bIsCedilla=p_XT_ST->code==_ST_ && (p_XT_ST->other & ST_CEDILLA);
  if(bIsCedilla && (p_XT_ST->other & CEDILLA_END)==0)
   {
     if(IsAnyBreak(p_XT_ST->prev))
      SwapThisAndNext(p_XT_ST->prev);
     return SUCCESS;
   }
#endif /* FOR_FRENCH */
  iMid_XT_ST=MID_POINT(p_XT_ST);
  if(bIsCedilla)
   if(p_XT_ST->ipoint0!=UNDEF)
    xMid_XT_ST=x[p_XT_ST->ipoint0];
   else
    xMid_XT_ST=MEAN_OF(x[p_XT_ST->ibeg],x[p_XT_ST->iend]);
  else
   xMid_XT_ST=x[iMid_XT_ST];
  if(p_XT_ST->code==_ST_)
   {
#if defined (FOR_SWED) || defined (FOR_GERMAN) || defined (FOR_INTERNATIONAL)
     if( low_data->rc->enabled_languages & (EL_GERMAN | EL_SWEDISH) )
      {
        p_SPECL pCloseST=p_XT_ST->next;
        if(pCloseST!=_NULL &&
           pCloseST->code==_ST_ &&
           (pCloseST->other & PROCESSED)==0
          )
         {
           _SHORT  WrStep=low_data->width_letter,
                   dxShift;
           _SHORT  dxSTs=xMid_XT_ST-x[MID_POINT(pCloseST)];
           _SHORT  Sign_dxSTs=(dxSTs >=0 ? 1 : -1);

           if(HWRAbs(dxSTs)<=ONE_HALF(WrStep))
            dxShift=-ONE_HALF(dxSTs);
           else if(HWRAbs(dxSTs)>=THREE_HALF(WrStep))
            dxShift=0;
           else if(HWRAbs(dxSTs)<=THREE_FOURTH(WrStep))
            dxShift=-Sign_dxSTs*ONE_HALF(WrStep);
           else
            dxShift=Sign_dxSTs*(ONE_THIRD(HWRAbs(dxSTs))-ONE_HALF(WrStep));
//           xMid_XT_ST+=p_XT_ST->ipoint1;
//           xMid_XT_ST+=dxShift;
           p_XT_ST->ipoint1+=dxShift;
           xMid_XT_ST+=p_XT_ST->ipoint1;
           pCloseST->ipoint1=-dxShift;
         }
        else
           xMid_XT_ST+=p_XT_ST->ipoint1;
      }
#endif /* FOR_SWED */
     if(!bIsCedilla)
      xMid_XT_ST-=SlopeShiftDx(MEAN_OF(STR_UP,STR_DOWN)-y[iMid_XT_ST],slope);
   }
  /*  Find elem, where to move _XT_ or _ST_ */
  pWhereTo=specl;
  wrk=specl->next;
  dsmin=ALEF;
  while(wrk->next!=_NULL)
   {
     _BOOL bIsApst_ll,bIsST_higher;

     bIsApst_ll=bIsST_higher=_FALSE;
     hghtWrk = HEIGHT_OF(wrk);
     if(IsAnyBreak(wrk)                            ||
        IsXTorST(wrk)                              ||
        wrk->mark==HATCH                           ||
        !bIsCedilla                              &&
        IsAnyBreak(wrk->next)                    &&
        (hghtWrk > _UI1_                        ||
         (hghtWrk==_UI1_ && p_XT_ST->code==_ST_)
        )                                          
       )
      goto NXT;
     iMid_wrk= (wrk->code==_IU_ && (wrk->other & WAS_REDIRECTED)) ?
               MID_POINT(wrk->next) : MID_POINT(wrk);
     xMid_wrk=x[iMid_wrk];
     if(p_XT_ST->code==_ST_)
      xMid_wrk-=SlopeShiftDx(MEAN_OF(STR_UP,STR_DOWN)-y[iMid_wrk],slope);
     if(p_XT_ST->code==_ST_ && !bIsCedilla)
      {
        if(y[iMid_XT_ST] < y[iMid_wrk])
         bIsST_higher=_TRUE;
        if(!bIsST_higher        &&
           hghtWrk<=_UI1_       &&
           wrk->prev!=specl     &&
           xMid_wrk>xMid_XT_ST  &&
           (wrk->code==_GU_ ||
            wrk->code==_IU_ &&
            (wrk->mark==STICK && CLOCKWISE(wrk) ||
             wrk->mark==BEG)
           )
          )
         bIsApst_ll=_TRUE;
      }
     /* find element, closest on x */
     {
       _BOOL bIsFor_ST_OK=(   wrk->code==_GU_ || wrk->code==_IU_
                      /*|| wrk->code==_Gl_ */ || wrk->code==_GUs_
                           || wrk->code==_UU_ || wrk->code==_UUR_
                           || wrk->code==_UUL_ || wrk->code==_DUR_
                           || wrk->code==_UUC_ || wrk->code==_CUR_
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                           ||    (low_data->rc->enabled_languages & (EL_GERMAN | EL_FRENCH | EL_SWEDISH))
                              && (wrk->code==_CUL_ || wrk->code==_DUL_)
#endif /* FOR_GERMAN... */
#if defined (FOR_GERMAN) || defined (FOR_FRENCH)
                           ||    (low_data->rc->enabled_languages & (EL_GERMAN | EL_FRENCH))
                              && low_data->rc->lmod_border_used != LMOD_BORDER_NUMBER
                              && (wrk->code==_BSS_ && HEIGHT_OF(wrk)<=_MD_)  //ayv
#endif /* FOR_GERMAN... */
#if defined (FOR_FRENCH) || defined (FOR_INTERNATIONAL)
                           ||    (low_data->rc->enabled_languages & EL_FRENCH)
                              && wrk->code==_Gr_
#endif /* FOR_FRENCH */
                          );
       _BOOL bIsFor_XT_OK=(   wrk->code==_UUR_ || wrk->code==_UU_
                           || wrk->code==_UUL_ || wrk->code==_GU_
                           || wrk->code==_IU_ || wrk->code==_UUC_
                           || wrk->code==_Gl_ || wrk->code==_GUs_
#if defined (FOR_SWED) || defined (FOR_INTERNATIONAL) || defined (FOR_GERMAN) || defined (FOR_FRENCH)
                           ||    (low_data->rc->enabled_languages & (EL_GERMAN | EL_FRENCH | EL_SWEDISH))
                              && (   wrk->code==_CUR_ || wrk->code==_DUR_
                                  || wrk->code==_CUL_ || wrk->code==_DUL_)
#endif /* FOR_SWED... */
#if defined (FOR_FRENCH) || defined (FOR_INTERNATIONAL)
                           ||    (low_data->rc->enabled_languages & EL_FRENCH)
                              && wrk->code==_Gr_
#endif /* FOR_FRENCH */
#if defined (FOR_GERMAN) || defined (FOR_FRENCH)
                           ||    (low_data->rc->enabled_languages & (EL_GERMAN | EL_FRENCH))
                              && low_data->rc->lmod_border_used != LMOD_BORDER_NUMBER
                              && wrk->code==_BSS_   //ayv
#endif /* FOR_GERMAN... */
                           ||    (wrk->code==_Gr_ || wrk->code==_DUR_)
                              && HEIGHT_OF(wrk)<HEIGHT_OF(p_XT_ST)
                          );
       _BOOL bIsForCedillaOK=(   wrk->code==_UD_
                              || wrk->code==_UDR_
                              || wrk->code==_UDC_
                              || wrk->code==_ID_ && wrk->mark==END
                             );
     if(   (   p_XT_ST->code == _ST_
            && (bIsST_higher || bIsApst_ll)
            && bIsFor_ST_OK
            && hghtWrk <= _DI2_
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
            && (   (   (low_data->rc->enabled_languages == EL_ENGLISH)
                    && IsUpperElemByTimeOK(wrk,p_XT_ST,low_data) //CHE May 14,98
                   )
                || (   (low_data->rc->enabled_languages & (EL_GERMAN | EL_FRENCH | EL_SWEDISH))
                    && wrk->iend<p_XT_ST->ibeg
                   )
               )
#else
            && IsUpperElemByTimeOK(wrk,p_XT_ST,low_data)
#endif /* FOR_GERMAN... */
           )
        ||
           (   p_XT_ST->code == _XT_                    /* upper element */
            && bIsFor_XT_OK
            && hghtWrk <= _UI2_
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
            && (   (   (low_data->rc->enabled_languages == EL_ENGLISH)
                    && IsUpperElemByTimeOK(wrk,p_XT_ST,low_data) //CHE May 14,98
                   )
                || (   (low_data->rc->enabled_languages & (EL_GERMAN | EL_FRENCH | EL_SWEDISH))
                    && wrk->iend<p_XT_ST->ibeg
                   )
               )
#else
            && IsUpperElemByTimeOK(wrk,p_XT_ST,low_data)
#endif /* FOR_GERMAN... */
           )
        ||
           (   bIsCedilla
            && bIsForCedillaOK
            && hghtWrk >= _DI1_
            && wrk->iend<p_XT_ST->ibeg
           )
       )
      {
        #define MIN_DX_LENGTH_OF_STROKE DY_STR
        _INT dy=0;
        if(p_XT_ST->code==_XT_ &&
           HWRAbs(x[p_XT_ST->ibeg]-x[p_XT_ST->iend])>MIN_DX_LENGTH_OF_STROKE)
         {
           _SHORT yDnXT,yUpXT,yUpWrk,yDnWrk;
           yMinMax(p_XT_ST->ibeg,p_XT_ST->iend,y,&yUpXT,&yDnXT);
           yMinMax(wrk->ibeg,wrk->iend,y,&yUpWrk,&yDnWrk);
           if(yUpWrk-yDnXT>0)
            dy=yUpWrk-yDnXT;
         }
        ds=TWO(HWRAbs(xMid_wrk-xMid_XT_ST))+dy;
        if(ds<=dsmin)
         {
           p_SPECL wrk_prv=wrk->prev;
           dsmin=ds;
           if(!bIsCedilla                 &&
              bIsApst_ll                  &&
              (wrk_prv->code==_ID_ ||
               wrk_prv->code==_UDL_)      &&
              wrk_prv->prev==p_XT_ST
             )
            pWhereTo=wrk_prv;
           else
            pWhereTo=wrk;
         }
        bFoundWhereTo=_TRUE;
      }
     }
     if(p_XT_ST->code==_ST_ && !bIsCedilla && !bIsST_higher &&
        IsUpperElem(wrk)
       )
      {
        _BOOL bIsDownElNxt=(wrk->next!=_NULL && IsLowerElem(wrk->next) && HEIGHT_OF(wrk->next)>=_MD_);
        _BOOL bIsDownElPrv=(wrk->prev!=specl && IsLowerElem(wrk->prev) && HEIGHT_OF(wrk->prev)>=_MD_);
        p_SPECL pDownEl=_NULL;

        if(bIsDownElNxt)
         pDownEl=wrk->next;
        else if(bIsDownElPrv)
         pDownEl=wrk->prev;
        if(pDownEl!=_NULL)
         {
           _INT iBeg=(bIsDownElNxt ? MID_POINT(wrk) : MID_POINT(wrk->prev)),
                iEnd=(bIsDownElNxt ? MID_POINT(wrk->next) : MID_POINT(wrk));
           _INT iClosest=iClosestToY(y,iBeg,iEnd,y[iMid_XT_ST]);

           if(iClosest!=-1)
            if(x[iClosest]<x[iMid_XT_ST])
             {
               pWhereTo=specl;
               dsmin=ALEF;
             }
            else
             break;
         }
      }

NXT: wrk=wrk->next;
   }

  if(bIsCedilla && pWhereTo!=_NULL)
   {
     p_SPECL nxt;
     Move2ndAfter1st(pWhereTo,p_XT_ST);
     nxt=p_XT_ST->next;
     if(pWhereTo->code==_UD_ && nxt!=_NULL &&
        !(nxt->code==_IU_ && NULL_or_ZZ_after(nxt))
       )
      insert_drop(p_XT_ST,low_data);
   }
  else
   Put_XT_ST(low_data,pWhereTo,p_XT_ST,bFoundWhereTo);

 DBG_ChkSPECL(low_data);

  return SUCCESS;

} /* end of Placement_XT_WO_HATCH_AND_ST */

_BOOL IsUpperElemByTimeOK(p_SPECL pUpper,p_SPECL p_XT_ST,p_low_type low_data)
{

  if(p_XT_ST->iend<pUpper->ibeg)
  {
    p_SPECL cur=p_XT_ST->next;
    while(cur!=NULL && !(IsUpperElem(cur) || cur->code==_Gl_))
     cur=cur->next;
    if(cur!=pUpper)
     return _FALSE;
  }

  return _TRUE;

} /* end of IsUpperElemByTimeOK */

/* **************************************************************************/
/* This function gets next "non-weak" element                               */
/* **************************************************************************/
p_SPECL GetNextNonWeakElem(p_SPECL pEl)
{
  p_SPECL nxt=pEl->next;
  while(nxt!=_NULL &&
        (IsAnyAngle(nxt) || IsAnyMovement(nxt) || nxt->code==_BSS_ || nxt->code==_XT_))
   nxt=nxt->next;

  return nxt;

} /* end of GetNextNonWeakElem */

/* **************************************************************************/
/* Put _XT_ or _ST_ on the right place                                      */
/* **************************************************************************/
_SHORT Put_XT_ST(p_low_type low_data,p_SPECL pWhereTo,p_SPECL p_XT_ST,
                 _BOOL bFoundWhereTo)
{
  DBG_ChkSPECL(low_data);

  if (   pWhereTo != _NULL
      && (   p_XT_ST->code==_XT_ && (p_XT_ST->other & CUTTED)
          || !punctuation(low_data,pWhereTo,p_XT_ST)
         )
      && pWhereTo != low_data->specl
      && bFoundWhereTo
//      && p_XT_ST != pWhereTo->prev
     )
   {
     p_SPECL pMoveAfter=pWhereTo->prev;
     p_SHORT x=low_data->x,y=low_data->y;
#if defined(FOR_FRENCH)
     _BOOL bInsertExtraBreak=_FALSE;
     if(!NULL_or_ZZ_after(pWhereTo) && p_XT_ST->code==_ST_ &&
        (p_XT_ST->other & ST_UMLAUT)==0 && (p_XT_ST->other & ST_CEDILLA)==0)
      {
        _SHORT xMin,xMax,xMinST;
        xMinMax(p_XT_ST->ibeg,p_XT_ST->iend,x,y,&xMin,&xMax);
        xMinST=xMin;
        xMinMax(pWhereTo->ibeg,pWhereTo->iend,x,y,&xMin,&xMax);
        if(xMinST>xMax)
         {
           p_SPECL nxt=GetNextNonWeakElem(pWhereTo);
           if(nxt!=_NULL && nxt->next!=_NULL)
            {
              nxt=nxt->next;
              if(IsAnyBreak(nxt))
               {
                 pMoveAfter=nxt;
                 pMoveAfter->code=_FF_;
                 pMoveAfter->other |= NO_PENALTY;
                 if(p_XT_ST->mark!=DOT)
                  bInsertExtraBreak=_TRUE;
               }
              else
               {
                 p_SPECL pTip=nxt;
                 nxt=nxt->next;
                 xMinMax(pTip->ibeg,pTip->iend,x,y,&xMin,&xMax);
                 if(nxt!=_NULL && IsAnyBreak(nxt) &&
                    (HEIGHT_OF(pTip)>_UI2_ || xMinST>xMax)
                   )
                  {
                    pMoveAfter=nxt;
                    pMoveAfter->code=_FF_;
                    pMoveAfter->other |= NO_PENALTY;
                    if(p_XT_ST->mark!=DOT)
                     bInsertExtraBreak=_TRUE;
                  }
               }
            }
         }
      }
#elif 1 /*!defined(FOR_GERMAN)*/
     if(p_XT_ST->code==_XT_)
      {
        _SHORT xMin,xMax,xMidXT,iX_Max;
        p_SPECL nxt=GetNextNonWeakElem(pWhereTo);
        xMinMax(p_XT_ST->ibeg,p_XT_ST->iend,x,y,&xMin,&xMax);
        xMidXT=MEAN_OF(xMin,xMax);
        if(NULL_or_ZZ_this(nxt))
         iX_Max=(_SHORT)ixMax(pWhereTo->ibeg,pWhereTo->iend,x,y);
        else
         iX_Max=(_SHORT)iClosestToY(y,MID_POINT(pWhereTo),MID_POINT(nxt),y[MID_POINT(p_XT_ST)]);
        if(iX_Max>0)
         {
           if(xMidXT>x[iX_Max])
            {
              p_XT_ST->other|=RIGHT_KREST;
              if(NULL_or_ZZ_this(nxt))
               pMoveAfter=pWhereTo;
              else
               {
                 p_SPECL pLow=nxt;
                 nxt=pLow->next;
                 while(nxt!=_NULL && nxt->code==_XT_)
                  nxt=nxt->next;
                 if(NULL_or_ZZ_this(nxt))
                  pMoveAfter=pLow;
                 else
                  {
                    p_SPECL pTip=nxt;
                    nxt=nxt->next;
                    while(nxt!=_NULL && nxt->code==_XT_)
                     nxt=nxt->next;
                    if(NULL_or_ZZ_this(nxt))
                     pMoveAfter=pTip;
                    else
                     pMoveAfter=pLow;
                  }
               }
              if(pMoveAfter!=_NULL && pMoveAfter->next!=_NULL)
               {
                 if(   IsAnyCrossing(pMoveAfter)
                    && IsAnyCrossing(pMoveAfter->next)
                    && pMoveAfter->ibeg > pMoveAfter->next->ibeg )
                  {
                   pMoveAfter = pMoveAfter->next;
                  }
               }
            }
         }
      }
#endif /* FOR_FRENCH... */

     DBG_ChkSPECL(low_data);

     if(pMoveAfter!=p_XT_ST)
      Move2ndAfter1st(pMoveAfter,p_XT_ST);

     DBG_ChkSPECL(low_data);

#if defined(FOR_FRENCH)
     if(bInsertExtraBreak)
      insert_drop(p_XT_ST,low_data);
#endif /* FOR_FRENCH */
   }

     DBG_ChkSPECL(low_data);

  return SUCCESS;

} /* end of Put_XT_ST */

/* **************************************************************************/
/* Insert break before "right" krest (or group of them)                     */
/* **************************************************************************/
_SHORT InsertBreakBeforeRightKrest(p_low_type low_data)
{
 p_SPECL cur=low_data->specl;

 while(cur!=_NULL)
  {
    if(cur->code==_XT_ && (cur->other & RIGHT_KREST))
     {
       p_SPECL pBeg=cur;
       while(cur!=_NULL && cur->code==_XT_ && (cur->other & RIGHT_KREST))
        cur=cur->next;
       if(NULL_or_ZZ_this(cur))
        {
          p_SPECL pBreak=NewSPECLElem(low_data);
          if(pBreak!=_NULL)
           {
             pBreak->code=_Z_;
             pBreak->mark=DROP;
             pBreak->attr=_MD_;
             pBreak->other=NO_PENALTY;
             pBreak->ibeg=pBeg->prev->iend;
             pBreak->iend=pBeg->ibeg;
             Insert2ndAfter1st(pBeg->prev,pBreak);
           }
        }
     }
    if(cur==_NULL)
     break;
    cur=cur->next;
  }

 return SUCCESS;

} /* end of InsertBreakBeforeRightKrest */

/* **************************************************************************/
/* Transfer cutted strokes on their places                                  */
/* **************************************************************************/
_SHORT Placement_XT_CUTTED(p_SPECL p_XT_ST,p_low_type low_data)
{
 p_SPECL cur=p_XT_ST;
 _INT    iCross=(p_XT_ST+1)->ipoint0,nStroke,iBegStr,iEndStr;

 p_XT_ST->other |= WITH_CROSSING;
 nStroke=GetGroupNumber(low_data,iCross);
 iBegStr=low_data->pGroupsBorder[nStroke].iBeg;
 iEndStr=low_data->pGroupsBorder[nStroke].iEnd;
 while(cur!=low_data->specl)
  {
    cur=cur->prev;
    if(IsUpperElem(cur)   && cur->ibeg<=iCross &&
       cur->ibeg>=iBegStr && cur->ibeg<=iEndStr
      )
     break;
  }
 if(cur!=low_data->specl)
  Put_XT_ST(low_data,cur,p_XT_ST,_TRUE);
 else
  {
    cur=p_XT_ST;
    while(cur!=low_data->specl)
     {
       cur=cur->prev;
       if(IsUpperElem(cur)   && cur->ibeg>=iCross &&
          cur->ibeg>=iBegStr && cur->ibeg<=iEndStr
         )
        break;
     }
    Put_XT_ST(low_data,cur,p_XT_ST,_TRUE);
  }

 DBG_ChkSPECL(low_data);

 return SUCCESS;

} /* end of Placement_XT_CUTTED */

/* **************************************************************************/
/* Sort _XT_ and _ST_ according to the height                               */
/* **************************************************************************/
_SHORT SortXT_ST(p_low_type low_data)
{
 p_SPECL cur=low_data->specl,
         wrk,pBeg,pEnd,pBefore;
 p_SHORT y=low_data->y;
 _SHORT  numXT_ST,numXT;
 _BOOL   all_done;

 while(cur!=_NULL)
  {
    if(cur->code==_XT_)
     {
       /* we'll count the number of XT, ST elements, going in sequence */
       numXT_ST=numXT=0;
       pBeg=pEnd=cur;
       while(pEnd!=_NULL && IsXTorST(pEnd))
        {
          numXT_ST++;
          if(pEnd->code==_XT_)
           numXT++;
          pEnd=pEnd->next;
        }
       if(numXT_ST>1)
        {
          /* if it is a group of this elements, at first move all
             ST elements in the beginning of this group */
          for(wrk=pBeg->next;wrk!=pEnd;wrk=wrk->next)
           if(wrk->code==_ST_)
            Move2ndAfter1st(cur->prev,wrk);
          pBefore=cur->prev;
          if(numXT>1)
           {
             do
              {
                all_done=_TRUE;
                pBeg=pBefore->next;
                for(pEnd=wrk=pBeg->next;
                    wrk!=_NULL && wrk->code==_XT_;
                    wrk=wrk->next)
                 pEnd=wrk;
                for(wrk=pBeg;
                    wrk!=_NULL && wrk!=pEnd && wrk->code==_XT_;
                    wrk=wrk->next)
//                 if(HEIGHT_OF(wrk)>HEIGHT_OF(wrk->next))
                 if(y[MID_POINT(wrk)] > y[MID_POINT(wrk->next)])
                  {
                    SwapThisAndNext(wrk);
                    all_done=_FALSE;
                  }
              }
             while(!all_done);
             /* shift cur to the last XT_ST element among group */
             cur=pEnd;
           }
        }
     }
    cur=cur->next;
  }

 return SUCCESS;

} /* end of SortXT_ST */


// This function checks whether a cross is not a spec linked list
// ahmadab
int CrossInList(p_SPECL  pList, p_SPECL pCross)
{
	while (pList)
	{
		if (pList == pCross || pList == pCross->next)
			return 1;

		pList	=	pList->next;
	}

	return 0;
}

/****************************************************************************/
/* This program finds delayed strokes and makes _XT_ instead of them        */
/****************************************************************************/
_SHORT FindDelayedStroke(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,                   /* x;y co-ordinates               */
         y=low_data->y;
 p_SPECL cur,pCross;

  for(cur=specl;cur!=_NULL;cur=cur->next)
   {
     /* try to find BEG (but not the first stroke */
     if(cur->mark!=BEG || cur->ibeg==1)
      continue;
     { p_SPECL wrk=cur,pBeg=cur,pEnd=_NULL;

       /* here we'll try to find sequence of elements, which could be stroke,
          described above. pBeg, pEnd - pointers to beg and end elements */
       while(!NULL_or_ZZ_this(wrk) &&
             (IsAnyMovement(wrk) || IsAnyAngle(wrk) || wrk->code==_DF_ ||
              HEIGHT_OF(wrk)<=_MD_ &&
              (Is_IU_or_ID(wrk) || IsAnyArcWithTail(wrk) ||
               wrk->code==_UU_  || wrk->code==_UD_)
             )
            )
        {
          if(wrk->mark!=END)
           wrk=wrk->next;
          else
           {
             pEnd=wrk;
             break;
           }
        }
       /* if stroke, suspected to be delayed, found */
       if(pEnd!=_NULL)
        {
          _RECT BoxOfStroke,BoxPrev;
          _INT  xRightStr,xRightPrv;
          /* compare x-shift and place in sequence of strokes */
          GetTraceBox(x,y,pBeg->ibeg,pEnd->iend,&BoxOfStroke);
          GetTraceBox(x,y,0,pBeg->ibeg-1,&BoxPrev);
          xRightStr=BoxOfStroke.right;
          xRightPrv=BoxPrev.right;
#ifdef FOR_GERMAN
          /* because of yen */
          xRightStr-=SlopeShiftDx(MIDDLE_STR-y[ixMax(pBeg->ibeg,pEnd->iend,x,y)],low_data->slope);
          xRightPrv-=SlopeShiftDx(MIDDLE_STR-y[ixMax(0,pBeg->ibeg-1,x,y)],low_data->slope);
#endif /* FOR_GERMAN */
          /* if left-shift relatively previous stroke - then make X_XT_ST */
          if(xRightStr+low_data->width_letter<xRightPrv)
           {
             pBeg->code=_XT_;
             pBeg->attr=HeightInLine(YMID_RECT(BoxOfStroke),low_data);
             pBeg->other=0;
             pBeg->iend=pEnd->iend;
             Attach2ndTo1st(pBeg,pEnd->next);
             /* if it crossed with the other stroke - restore Cross and
                                                      mark it as "HATCH" */
             if(find_CROSS(low_data,pBeg->ibeg,pBeg->iend,&pCross) &&
                !CrossInTime(pBeg,pCross->next) &&
				!CrossInList(low_data->specl, pCross)
               )
              {
				// we want to make s
                pCross->mark=(pCross->next)->mark=HATCH;
                InsertCrossing2ndAfter1st(pBeg,pCross);
              }
           }
        }
     }
   }

 return SUCCESS;

} /* end of FindDelayedStroke */

/****************************************************************************/
/* This function checks strokes for dx<->time matching                      */
/****************************************************************************/
_SHORT CheckStrokesForDxTimeMatch(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,
         y=low_data->y;                                 /* x;y co-ordinates */
 _INT    NumStrokes=low_data->lenGrBord;
 _INT    slope=low_data->slope;
 _INT    iBegStr;
 p_SPECL pBeg,pEnd=specl->next,cur;
 _BOOL   bIsStrXT_ST=_FALSE;
 _INT    ixMaxPrv,ixMaxStr,xPrvRightSlope,xStrRightSlope,xShift;

 if(NumStrokes==1 || low_data->StepSure==STEP_MEDIANA)
  goto ret;
 /* let's find the last stroke: pBeg, pEnd - first and last elements */
 while(pEnd->next!=_NULL)
  pEnd=pEnd->next;
 while(IsAnyBreak(pEnd))
  pEnd=pEnd->prev;
 if(pEnd->code == _XT_ && (pEnd->other & RIGHT_KREST))
  goto ret;
 iBegStr=low_data->pGroupsBorder[GetGroupNumber(low_data,pEnd->ibeg)].iBeg;
 pBeg=pEnd;
 while(pBeg!=specl && pBeg->ibeg>=iBegStr)
  pBeg=pBeg->prev;
 pBeg=pBeg->next;
 if(pBeg!=pEnd)
  {
    /* pBeg should point to the continuous part of the stroke,
       not to the delayed strokes inside (placed before) */
    while(pBeg!=_NULL && (IsAnyBreak(pBeg) || IsXTorST(pBeg)))
     pBeg=pBeg->next;
    if(pBeg==_NULL)
     goto ret;
  }
 else if(IsXTorST(pBeg))
  {
    if(pBeg->code==_ST_ && (pBeg->other & (ST_QUOTE | ST_APOSTR)))
     goto ret;
    bIsStrXT_ST=_TRUE;
  }
 /* try to find previous "strong" element */
 cur=pBeg->prev;
 while(cur!=specl && (IsAnyBreak(cur) || IsXTorST(cur)))
  cur=cur->prev;
 if(cur==specl)
  goto ret;

 //CHE: for "T" with the upper thing first etc.:
 if  ( pEnd->iend-pBeg->ibeg > ONE_FOURTH(low_data->ii) )
  goto ret;

 ixMaxStr=ixMax(pBeg->ibeg,pEnd->iend,x,y);
 xStrRightSlope=x[ixMaxStr]-SlopeShiftDx(MIDDLE_STR-y[ixMaxStr],slope);
 ixMaxPrv=ixMax(0,cur->iend,x,y);
 xPrvRightSlope=x[ixMaxPrv]-SlopeShiftDx(MIDDLE_STR-y[ixMaxPrv],slope);
 if(bIsStrXT_ST && HEIGHT_OF(pBeg)>=_MD_)
  /* more shift for"!" and "?" */
  xShift=THREE(low_data->width_letter);
 else
  xShift=TWO(low_data->width_letter);
 /* if left-shift relatively previous stroke - delete stroke */
 if(xStrRightSlope+xShift<xPrvRightSlope)
  {
    if(bIsStrXT_ST)
     DelFromSPECLList(pBeg);
    else
     {
       for(cur=pBeg;cur!=pEnd;cur=cur->next)
        DelFromSPECLList(cur);
       DelFromSPECLList(cur);
     }
    if(IsAnyBreak(pBeg->prev) && NULL_or_ZZ_this(pEnd->next))
     DelFromSPECLList(pBeg->prev);
  }

ret:
 return SUCCESS;

} /* end of CheckStrokesForDxTimeMatch */

/****************************************************************************/
/* Placement elements of X, when the half of it was written in the end      */
/****************************************************************************/
_SHORT placement_X(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,
         y=low_data->y;                                 /* x;y co-ordinates */
 p_SPECL cur,                                           /* indexes of       */
         prv,                                           /*   elements       */
         pBreak,
         wcur,
         wrk;
  _SHORT xLeft, xRight;
  _INT dx,dnum,dnummin;

 wcur=cur=specl;
 while(cur->next!=_NULL)                             /* go on the list      */
  cur=cur->next;
 if((cur=FindMarkLeft(cur,END))==_NULL)
  return SUCCESS;
 prv=cur->prev;
 if((prv->code==_IU_ || prv->code==_UUL_ && CLOCKWISE(prv) ||
     prv->code==_UUR_ && COUNTERCLOCKWISE(prv)) &&
     prv->mark==BEG && HEIGHT_OF(prv)<=_MD_ &&
    (cur->code==_ID_ || cur->code==_UDL_ && CLOCKWISE(cur) ||
     cur->code==_UDR_ && COUNTERCLOCKWISE(cur)) && HEIGHT_OF(cur)>=_MD_)
  {
    p_SPECL pCross;
    wrk=prv->prev;
    while(wrk!=_NULL && (IsAnyBreak(wrk) || IsXTorST(wrk) || wrk->mark==HATCH))
     wrk=wrk->prev;
    if(wrk==_NULL) return SUCCESS;
    pBreak=wrk->next;
    xMinMax(0,wrk->iend,x,y,&xLeft,&xRight);
    dx=xRight-DX_X_TRANSFER;
    if(x[prv->ibeg]<dx && x[cur->iend]<dx &&
       x[(prv->ibeg+cur->iend)/2]<dx &&
       find_CROSS(low_data,prv->ibeg,cur->iend,&pCross))
     {
       _SHORT i_cross=(pCross->next)->iend;
       if((wrk->prev)->ibeg<=i_cross && wrk->iend>=i_cross)
        return SUCCESS;
       dnummin=ALEF;
       while(wrk!=_NULL)
        {
          if(wrk->code==_UD_ && HEIGHT_OF(wrk)>=_MD_ &&
             COUNTERCLOCKWISE(wrk) &&
             (dnum=HWRAbs(wrk->ibeg-i_cross))<dnummin)
           {
             dnummin=dnum;
             wcur=wrk;
           }
          wrk=wrk->prev;
        }
       if(wcur!=specl && (wrk=NewSPECLElem(low_data))!=_NULL)
        {
          pBreak->code=_Z_;
          Move2ndAfter1st(wcur,pBreak);
          Move2ndAfter1st(pBreak,prv);
          Move2ndAfter1st(prv,cur);
          Insert2ndAfter1st(cur,wrk);
          wrk->code=_FF_;
          wrk->mark=DROP;
          wrk->attr=_MD_;
          wrk->other=FF_PUNCT;
          wrk->ibeg=cur->iend;
          wrk->iend=cur->iend;
        }
     }
  }

  return SUCCESS;

} /* end of placement_X */

/****************************************************************************/
/* This program finds misplaced parentheses and puts them into its place    */
/****************************************************************************/
_SHORT FindMisplacedParentheses(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,                   /* x;y co-ordinates               */
         y=low_data->y;
 p_SPECL cur;

  for(cur=specl->next;cur!=_NULL;cur=cur->next)
   {
     /* try to find appropriate sequence of elements */
     p_SPECL prv=cur->prev;
     if(cur->mark==BEG && HEIGHT_OF(cur)<_MD_ &&
        (cur->code==_IU_ || cur->code==_UUR_) &&
        (IsAnyBreak(prv) || IsXTorST(prv) || prv->mark==HATCH)
       )
      { p_SPECL nxt=cur->next;
        if(nxt!=_NULL && nxt->mark==END && NULL_or_ZZ_after(nxt) &&
           (nxt->code==_ID_ || nxt->code==_UDR_) && HEIGHT_OF(nxt)>_MD_
          )
         {
           _RECT BoxOfStroke,BoxPrev;
           /* compare x-shift */
           GetTraceBox(x,y,cur->ibeg,nxt->iend,&BoxOfStroke);
           GetTraceBox(x,y,0,cur->ibeg-1,&BoxPrev);
           /* if left-shift relatively previous stroke -
              place sequence into it place */
           if(BoxOfStroke.right+TWO(low_data->width_letter)<BoxPrev.right &&
              BoxOfStroke.left<BoxPrev.left
             )
            { p_SPECL pBreak=cur->prev;
              while(pBreak!=_NULL && !IsAnyBreak(pBreak))
               pBreak=pBreak->prev;
              if(pBreak==_NULL)
               break; 
              pBreak->code=_FF_;
              Move2ndAfter1st(specl,pBreak);
              Move2ndAfter1st(specl,cur);
              Move2ndAfter1st(cur,nxt);
              break;
            }
         }
      }
   }

 return SUCCESS;

} /* end of FindMisplacedParentheses */


/****************************************************************************/
/* Find cross for placement part of X-letter                                */
/****************************************************************************/
_BOOL find_CROSS(p_low_type low_data,_SHORT ibeg,_SHORT iend,
                 p_SPECL _PTR pCross)
{
 p_SPECL  specl = low_data->specl;        /*  The list of special points on */
                                          /* the trajectory                 */
  _SHORT l_specl=low_data->len_specl;     /* the quantity of special points */
  _SHORT  i;                                         /*    counters         */
  _UCHAR fl_nxt=1;                                   /* the flag of CROSS   */

   for(i=0;i<l_specl;i++)
      if(specl[i].mark==CROSS)
       {
         if(fl_nxt==1                                     &&
            specl[i].ibeg>=ibeg && specl[i].iend<=iend    &&
            (specl[i+1].ibeg>iend || specl[i+1].iend<ibeg)
           )
          {
            *pCross=&specl[i];
            return _TRUE;
          }
         if(fl_nxt==1) fl_nxt=2;
         else          fl_nxt=1;
       }

  return _FALSE;

} /***** end of find_CROSS *****/

/****************************************************************************/
/* Find upper parts of trajectory and transfering them into umlauts         */
/****************************************************************************/
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)

#define NUM_ELEM_IN_UMLAUT 5
_SHORT find_umlaut(p_low_type low_data)
{
 p_SPECL cur=low_data->specl;
 p_SHORT y=low_data->y;                               /* y co-ordinates  */

 while(cur!=_NULL)
  {
    if(cur->mark==BEG && cur->ibeg!=1) /* don't check the 1-st stroke */
     {
       _SHORT NumElemInUmlaut=0,NumUpperElemInUmlaut=0;
       p_SPECL pBeg=cur,pEnd=_NULL,wrk=cur;

       while(!NULL_or_ZZ_this(wrk) &&
             (wrk->code==_TS_  || wrk->code==_TZ_ ||
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
              wrk->code==_BSS_ ||
#endif /* FOR_GERMAN... */
              IsAnyAngle(wrk) ||
              HEIGHT_OF(wrk)<=_UI1_ &&
              (Is_IU_or_ID(wrk) || IsAnyArcWithTail(wrk) ||
               wrk->code==_UU_  || wrk->code==_UD_)
             )
            )
        {
          if(wrk->code!=_TS_  && wrk->code!=_TZ_ &&
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
             wrk->code!=_BSS_ &&
#endif /* FOR_GERMAN... */
             !IsAnyAngle(wrk))
           NumElemInUmlaut++;
          if(HEIGHT_OF(wrk)<=_UE1_)
           NumUpperElemInUmlaut++;
          if(wrk->mark!=END)
           wrk=wrk->next;
          else
           {
             pEnd=wrk;
             break;
           }
        }
       if(pEnd!=_NULL)
        {
          _SHORT prv_stroke_beg=(_SHORT)brk_left(y,pBeg->ibeg-2,0);
          p_SPECL pBreak=pBeg->prev,
                  prv=pBreak->prev,
                  pCross;

          prv_stroke_beg++;
          if(NumElemInUmlaut<=NUM_ELEM_IN_UMLAUT                  &&
             NumUpperElemInUmlaut>=NumElemInUmlaut/2              &&
             !find_CROSS(low_data,pBeg->ibeg,pEnd->iend,&pCross)  &&
             !IsPartOfTrajectoryInside(low_data,pBeg,pEnd)        &&
             !IsExclamationOrQuestionSign(low_data,pBeg,pEnd)     &&
             (prv_stroke_beg!=1      ||
              IsAnyBreak(pBreak)   &&
              prv!=low_data->specl &&
              !SecondHigherFirst(low_data,pBreak,prv,pBeg,
                                 prv_stroke_beg,pBreak->ibeg,
                                 pBeg->ibeg,pEnd->iend)
             )
            )
           {
             _SHORT ymin,ymax;
             yMinMax(pBeg->ibeg,pEnd->iend,y,&ymin,&ymax);
             pBeg->attr=HeightInLine(MEAN_OF(ymin,ymax),low_data);
#if defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
             pBeg->code=_ST_;
             pBeg->other=ST_UMLAUT;
             pBeg->iend=pEnd->iend;
             Attach2ndTo1st(pBeg,pEnd->next);
#else  /* FOR_GERMAN */
             pBeg->code=_ST_;
             pBeg->iend=pEnd->iend;
             pEnd=pEnd->next;
             wrk=pBeg;
             if(NumElemInUmlaut>2)
              {
                pBeg->other=ST_UMLAUT;
                if(!IsXTorST(pBeg->prev))
                 {
                   if(!(pEnd!=_NULL && IsAnyBreak(pEnd) &&
                        pEnd->next!=_NULL && IsXTorST(pEnd->next)
                       )
                     )
                    {
                      wrk=pBeg->next;
                      HWRMemCpy(wrk,pBeg,sizeof(SPECL));
                      wrk->prev=pBeg;
                    }
                 }
              }
             Attach2ndTo1st(wrk,pEnd);
#endif /* FOR_GERMAN... */
           }
        }
     }
    cur=cur->next;
  }

 return SUCCESS;

} /* end of find_umlaut */

/* **************************************************************************/
/* To determine, is something inside of trajectory supposed to be umlaut    */
/* **************************************************************************/
_BOOL IsPartOfTrajectoryInside(p_low_type low_data,
                               p_SPECL pBeg,p_SPECL pEnd)
{
  _BOOL bret=_FALSE;
  _RECT Rect;
  _SHORT xUmlautLeft,xUmlautRight,yUmlautBottom;
  p_SPECL cur=(low_data->specl)->next;

  GetTraceBox(low_data->x,low_data->y,pBeg->ibeg,pEnd->iend,&Rect);
  xUmlautLeft  =Rect.left;
  xUmlautRight =Rect.right;
  yUmlautBottom=Rect.bottom;

  while(cur!=_NULL && cur!=pBeg)
   {
     if(!IsAnyBreak(cur) && cur->code!=_ST_ && cur->code!=_XT_)
      {
        GetTraceBox(low_data->x,low_data->y,cur->ibeg,cur->iend,&Rect);
        if(Rect.left  >=xUmlautLeft  &&
           Rect.right <=xUmlautRight &&
           Rect.bottom<yUmlautBottom   )
         {
           bret=_TRUE;
           break;
         }
      }
     cur=cur->next;
   }

  if(bret==_FALSE)
   {
     cur=pEnd->next;
     while(cur!=_NULL)
      {
        if(!IsAnyBreak(cur) && cur->code!=_ST_ && cur->code!=_XT_)
         {
           GetTraceBox(low_data->x,low_data->y,cur->ibeg,cur->iend,&Rect);
           if(Rect.left  >=xUmlautLeft  &&
              Rect.right <=xUmlautRight &&
              Rect.bottom<yUmlautBottom   )
            {
              bret=_TRUE;
              break;
            }
         }
        cur=cur->next;
      }
    }

  return bret;

} /* end of IsPartOfTrajectoryInside */

/* **************************************************************************/
/* This function prevents conversion punctuation signs into umlauts         */
/* **************************************************************************/
_BOOL IsExclamationOrQuestionSign(p_low_type low_data,
                                  p_SPECL pBeg,p_SPECL pEnd)
{
 _BOOL bret=_FALSE;
 p_SPECL pAfter=pEnd->next;

 if(pAfter!=_NULL && IsAnyBreak(pAfter) &&
    pAfter->next!=_NULL && IsXTorST(pAfter->next) &&
    (pAfter->next)->next==_NULL)
   bret=_TRUE;
 else
  {
    _SHORT xLeft,xRight,xUmlautLeft,xUmlautRight;
    xMinMax(pBeg->ibeg,pEnd->iend,low_data->x,low_data->y,
            &xUmlautLeft,&xUmlautRight);
    xMinMax(0,pBeg->ibeg-1,low_data->x,low_data->y,
            &xLeft,&xRight);
    if(xLeft>xUmlautRight || xRight<xUmlautLeft)
     bret=_TRUE;
  }

 return bret;

} /* end of IsExclamationOrQuestionSign */

#endif /* FOR_GERMAN... */

/* **************************************************************************/
/* Delete unnecessary breaks and HATCH and UD_f                             */
/* **************************************************************************/
_SHORT del_ZZ_HATCH( p_SPECL specl)
{
  p_SPECL cur,                                       /* indexes             */
          nxt;                                       /*   on elements       */

 for(cur=specl;cur!=_NULL;cur=cur->next)
  if(cur->mark==HATCH)
   {
     /* delete HATCH        */
     DelCrossingFromSPECLList(cur);
     cur=cur->next;
	 if (!cur)
	 {
		 break;
	 }

   }

 for(cur=specl;cur!=_NULL && cur->next!=_NULL;cur=cur->next)
  if(cur->mark==DROP)
   {
     nxt=cur->next;
     if(IsAnyBreak(nxt))
      switch((_SHORT)cur->code)
       {
         case _FF_:
                    /* always keep "strong" break */
                    DelFromSPECLList(nxt);
                    break;
         case _Z_:
                    /* always delete "left" break */
                    DelFromSPECLList(cur);
                    break;
         default:
                    /* always keep "strong" break */
                    if(nxt->code==_FF_)
                     DelFromSPECLList(cur);
                    else
                     DelFromSPECLList(nxt);
       }
   }

 return SUCCESS;

}  /***** end of del_ZZ_HATCH *****/

/****************************************************************************/
/*             Analizing of punctuation                                     */
/****************************************************************************/

#define  MAX_DX_ELEMS_NOT_PUNCTN          110
#define  MIN_DX_ELEM_TO_ENDWORD_PUNCTN    10
#define  XT_TO_ST_END                     30
//#define  MIN_PTS_IN_S_FOR_APOSTRS         6
#define  MIN_DX_SINGLE_STROKE_TO_APS      60

_BOOL  punctuation(p_low_type low_data,
                   p_SPECL pNearChecked, p_SPECL pToCheck)
{
#ifdef  FORMULA
  return  _FALSE;
#else
 rc_type _PTR rc=low_data->rc;
 _INT x_cur;
 p_SHORT x=low_data->x,                                /* x;y co-ordinates  */
         y=low_data->y;
 _SHORT xLeft, xRight;
 _RECT   boxToCheck;
 _SHORT  pToCheck_ibeg = pToCheck->ibeg;
 _SHORT  pToCheck_iend = pToCheck->iend;
 _UCHAR  hghtToCheck,fl_ZZ;
 p_SPECL prv,                                        /* indexs              */
         nxt;                                        /*   on elements       */

#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
     if(pToCheck->code==_ST_ && (pToCheck->other & ST_UMLAUT))
      return _FALSE;
#endif /* FOR_GERMAN... */
     if(rc->low_mode & LMOD_BOX_EDIT)
      return _FALSE;

     if  (!(rc->low_mode & LMOD_CHECK_PUNCTN) &&
           (low_data->rc->lmod_border_used != LMOD_BORDER_NUMBER ) /*CHE*/
         )
#if !defined (FOR_GERMAN)
/* Eric *****/
      {
       if(   (low_data->rc->enabled_languages & (/*EL_SWEDISH | */ EL_GERMAN))==0
          && pToCheck->code==_ST_ && pToCheck->ipoint1==0
         )
        return(RestoreApostroph(low_data,pToCheck));
       else
        return _FALSE;
      }
/************/
#else /* FOR_GERMAN... */
       return _FALSE;
#endif /* FOR_GERMAN... */

   /* if  (rc->rec_mode==RECM_FORMULA) */
    if  ( low_data->rc->lmod_border_used == LMOD_BORDER_NUMBER )
     {
       _SHORT l_specl=0;
       p_SPECL cur=low_data->specl;

       while(cur!=_NULL)
        {
          l_specl++;
          cur=cur->next;
        }
       if(l_specl<4)
        return _FALSE;
     }
#if !defined (FOR_GERMAN)
    else
     {
/* Eric *****/
       if(   (low_data->rc->enabled_languages & (/*EL_SWEDISH | */ EL_GERMAN))==0
          && pToCheck->code==_ST_ && pToCheck->ipoint1==0
         )
        if(RestoreApostroph(low_data,pToCheck))
         return _TRUE;
/************/
     }
#endif /* FOR_GERMAN */

     nxt=pToCheck->next; prv=pToCheck->prev;
     xMinMax(0,low_data->ii-1,x,y,&xLeft,&xRight);

     /*  Check for leading punctuation: */

     if((xLeft==x[pToCheck_ibeg] || xLeft==x[pToCheck_iend]) &&
        (prv->prev==_NULL) && (nxt != _NULL))
      {
        if(pToCheck->code==_ST_)
         {
           if(nxt->code!=_ST_ && nxt->code!=_XT_)
            insert_drop(pToCheck,low_data);
           if(nxt->code==_XT_ && nxt->next!=_NULL)
            {
              xMinMax(nxt->iend+1,low_data->ii-1,x,y,&xLeft,&xRight);
              if(x[nxt->iend]>xLeft)
               insert_drop(pToCheck,low_data);
            }
           return _TRUE;
         }
        if(pToCheck->code==_XT_ && nxt->mark!=HATCH &&
           HEIGHT_OF(pToCheck)<=_UI2_)
         {
           xMinMax(pToCheck_iend+1,low_data->ii-1,x,y,&xLeft,&xRight);
           if(x[(pToCheck_ibeg+2*pToCheck_iend)/3] <= xLeft &&
              HEIGHT_OF(pToCheck)>_UI1_)
            {
              insert_drop(pToCheck,low_data);
              return _TRUE;
            }
         }
      }

         /*  Check for ending punctuation: */

     size_cross(pToCheck_ibeg,pToCheck_iend,x,y,&boxToCheck);
     x_cur = XMID_RECT(boxToCheck);
     hghtToCheck = HEIGHT_OF(pToCheck);
     if(pToCheck->code==_ST_)
      {
        /* decimal point or regular dot */
        if(hghtToCheck>=_MD_)
         {
           insert_drop(pToCheck,low_data);
           return _TRUE;
         }
        /* apostrof sign check */
        if(hghtToCheck<=_UE2_ &&
           (nxt==_NULL || (nxt->code==_ST_) && (nxt->next==_NULL)))
         {
           if  (   pToCheck->prev == _NULL
                || pToCheck_ibeg == 1
               )           /* CHE: for single-xr trajectory. */
             return  _TRUE;
#if defined (FOR_GERMAN) || defined (FOR_FRENCH)
//          if( low_data->rc->enabled_languages & (EL_GERMAN | EL_FRENCH) )
           if(nxt==_NULL && (prv->code!=_ST_ || HEIGHT_OF(prv)>_UI1_))
            return _FALSE;
#endif /* FOR_FRENCH... */
           xMinMax(0,pToCheck_ibeg-1,x,y,&xLeft,&xRight);
           if(xRight<x[pToCheck_ibeg] && xRight<x[pToCheck_iend])
                return _TRUE;
           else return _FALSE;
         }
      }
     /* ending dash or colon */
     else if(pToCheck->code==_XT_ && nxt==_NULL &&
             (xRight==x[pToCheck_iend] || xRight==x[pToCheck_ibeg]))
           {
             if(pToCheck->attr>_UI1_ &&
                HWRAbs(x[pToCheck_ibeg]-x[pToCheck_iend])<=XT_TO_ST_END)
              {
                pToCheck->code=_ST_;
                return _TRUE;
              }
             if(hghtToCheck>_UI1_ && hghtToCheck<=_DI2_)
              {
                if  (   pToCheck->prev == _NULL
                     || pToCheck_ibeg == 1
                    )           /* CHE: for single-xr trajectory. */
                  return  _TRUE;
                xMinMax(0,pToCheck_ibeg-1,x,y,&xLeft,&xRight);
                if (xRight < x_cur-MIN_DX_ELEM_TO_ENDWORD_PUNCTN)
                 return _TRUE;
              }
           }
/*          else return _FALSE; */
     if(pToCheck->code==_XT_ &&
        (nxt==_NULL || nxt!=_NULL && nxt->mark!=HATCH) &&
        !is_X_crossing_XT(pToCheck,low_data,&fl_ZZ))
      {
        if(fl_ZZ) insert_drop(pToCheck,low_data);
        return _TRUE;
      }
     if(pToCheck->code==_XT_ && nxt!=_NULL && nxt->mark==HATCH)
      return _FALSE;                           /*CHE - y[MID_POINT(pToCheck)]*/
     x_cur -= SlopeShiftDx((MEAN_OF(STR_UP,STR_DOWN) - YMID_RECT(boxToCheck)),
                           low_data->slope);
     xRight = low_data->box.right;
     if(pNearChecked == low_data->specl) return _TRUE;

#if 0  &&  !defined (FOR_GERMAN) && !defined (FOR_FRENCH)

     /*  Check for ApostrofS: */

     if  (   pToCheck->code == _ST_
          && DY_RECT(boxToCheck) > ONE_HALF(DY_STR)
          && TWO(DX_RECT(boxToCheck)) < DY_RECT(boxToCheck)
          && pToCheck_iend < low_data->ii - MIN_PTS_IN_S_FOR_APOSTRS
          && HeightInLine(boxToCheck.bottom,low_data) >= _UE2_
         )  {

       /*  Check, if the _ST_ is the next to last stroke: */

       _INT  iLastNextStrk;
       for  ( iLastNextStrk=pToCheck_iend+1;
          iLastNextStrk<low_data->ii && y[iLastNextStrk]==BREAK;
          iLastNextStrk++ );
       for  ( ;
          iLastNextStrk<low_data->ii && y[iLastNextStrk]!=BREAK;
          iLastNextStrk++ );
       if  ( iLastNextStrk >= low_data->ii-2 )  {

         /*  Check, if the _ST_ isn't the next to first tall */
         /* and thin stroke:                                 */

     _INT  iLastPrevStrk, iFrstPrevStrk;
     for  ( iLastPrevStrk=pToCheck_ibeg-1;
    iLastPrevStrk>0 && y[iLastPrevStrk]==BREAK;
    iLastPrevStrk-- );
     for  ( iFrstPrevStrk = iLastPrevStrk;
        iFrstPrevStrk>0 && y[iFrstPrevStrk]!=BREAK;
        iFrstPrevStrk-- );
     if  (   iFrstPrevStrk > 3
          || HWRAbs(x[iLastPrevStrk] - x[iFrstPrevStrk])
            > MIN_DX_SINGLE_STROKE_TO_APS
         )  {

           /*  Check, if the _ST_ is close enough to the */
           /* last stroke:                               */

       _SHORT  xMinLastStrk, xMaxLastStrk;
       xMinMax (pToCheck_iend+2,iLastNextStrk-1,x,y,
                &xMinLastStrk,&xMaxLastStrk);
       if  ( (xMinLastStrk - boxToCheck.right)
           < DX_RECT(boxToCheck)
           )  {

           /*  Check, if the curvity of the _ST_ isn't very large: */

         _SHORT nCurvity = CurvMeasure(x,y,pToCheck_ibeg,pToCheck_iend,0);
         if  ( HWRAbs(nCurvity) < ONE_NTH( CURV_NORMA, 6 ) )  {
           DBG_err_msg("PUNCT.: ApostrS _ST_ found.");
           return  _TRUE;  /* Yes, this should be apostrof */
         }
       }
     }
       }
     }

#endif

     /*  Check for too close _X(S)T_ within word: */

#if 0 /* ndef FOR_GERMAN */
     if ( (x_cur-x[MID_POINT(pNearChecked)] <= MAX_DX_ELEMS_NOT_PUNCTN) &&
      (xRight-x_cur > MIN_DX_ELEM_TO_ENDWORD_PUNCTN) )
#endif
       return _FALSE;

#if 0 /* ndef FOR_GERMAN */
    return _TRUE;
#endif

#endif /*!FORMULA*/
} /* end of punctuation */

/****************************************************************************/
/*             Insert DROPs after punctuation                               */
/****************************************************************************/
_VOID insert_drop(p_SPECL cur,p_low_type low_data)
{
 p_SPECL  pDrop;

  if(cur->next==_NULL)
   return;
  if(IsAnyBreak(cur->next))
   {
     (cur->next)->code=_FF_;
     (cur->next)->other=FF_PUNCT;
   }
  else
   {
	 pDrop = NewSPECLElem(low_data);		// MR: 25 APril 2000 Fix hanging bugs Raid 4060, 4061
	 if (pDrop)
	 {
		 pDrop->mark=DROP;
		 pDrop->code=_FF_;
		 pDrop->attr=_MD_;
		 pDrop->other=FF_PUNCT;
		 pDrop->ibeg=cur->iend;
		 if(cur->iend+2<low_data->ii)
			 pDrop->iend=cur->iend+2;
		 else
			 pDrop->iend=cur->iend;
		 Insert2ndAfter1st (cur,pDrop);
	 }
   }
 return;
} /* end of insert_drop */

/****************************************************************************/
/* This program finds double quotation sign and puts quotes into its place  */
/****************************************************************************/
_BOOL FindQuotes(p_SPECL p_XT_ST,p_low_type low_data)
{
 _BOOL   bret=_FALSE;
 p_SHORT x=low_data->x,
         y=low_data->y;   /* x;y co-ordinates */
 p_SPECL nxt=p_XT_ST->next;
 _SHORT  xLeftQuote,xRightQuote,xLeftAfter,xRightAfter,xLeftBefore,xRightBefore;

 /* take into account only relatively high elements */
 if(HEIGHT_OF(p_XT_ST)>_UI2_)
  goto ret;

 /* the easiest case - pair of xr-elements, both of them - XT or ST on
    the apropriate heights */
 if(   nxt!=_NULL
    && IsXTorST(nxt)
    && HEIGHT_OF(nxt)<=_UI2_
    && (nxt->other & PROCESSED)==0
    && (nxt->next==_NULL || (nxt->next)->mark!=HATCH)
   )
  {
    xMinMax(p_XT_ST->ibeg,nxt->iend,x,y,&xLeftQuote,&xRightQuote);
    xMinMax(nxt->iend+1,low_data->ii-1,x,y,&xLeftAfter,&xRightAfter);
    xMinMax(1,p_XT_ST->ibeg-1,x,y,&xLeftBefore,&xRightBefore);
    /* check leading quotes */
    if(xRightQuote<xLeftBefore && xRightQuote<xLeftAfter)
     {
       PutLeadingQuotes(low_data,p_XT_ST,nxt);
       bret=_TRUE;
       goto ret;
     }
    /* check trailing quotes */
    if(xLeftQuote>xRightBefore && xLeftQuote>xRightAfter)
     {
       PutTrailingQuotes(low_data,p_XT_ST);
       bret=_TRUE;
       goto ret;
     }
  }

 /* the hotest case - one of xr-elements is XT or ST,
                      another one - some kind of stick */
 /* check stick after */
 if(nxt!=_NULL && IsStick(nxt,nxt->next) &&
    HEIGHT_OF(nxt)<=_UI2_ && HEIGHT_OF(nxt->next)<=_UI2_)
  {
    p_SPECL p2nd=nxt->next;
    xMinMax(p_XT_ST->ibeg,p2nd->iend,x,y,&xLeftQuote,&xRightQuote);
    xMinMax(p2nd->iend+1,low_data->ii-1,x,y,&xLeftAfter,&xRightAfter);
    xMinMax(1,p_XT_ST->ibeg-1,x,y,&xLeftBefore,&xRightBefore);
    /* check leading quotes */
    if(xRightQuote<xLeftBefore && xRightQuote<xLeftAfter)
     {
       /* modify stick and delete unnecessary part of it */
       nxt->iend=p2nd->iend;
       nxt->other=0;
       DelFromSPECLList(p2nd);
       PutLeadingQuotes(low_data,p_XT_ST,nxt);
       bret=_TRUE;
       goto ret;
     }
    /* check trailing quotes */
    if(xLeftQuote>xRightBefore && xLeftQuote>xRightAfter)
     {
       /* modify stick and delete unnecessary part of it */
       nxt->iend=p2nd->iend;
       nxt->other=0;
       DelFromSPECLList(p2nd);
       PutTrailingQuotes(low_data,p_XT_ST);
       bret=_TRUE;
       goto ret;
     }
  }
 /* check stick before */
 { p_SPECL prv=p_XT_ST->prev,p1st,p2nd;
   if(!IsAnyBreak(prv))
    goto ret;
   p2nd=prv->prev; p1st=p2nd->prev;
   if(IsStick(p1st,p2nd) && HEIGHT_OF(p1st)<=_UI2_ && HEIGHT_OF(p2nd)<=_UI2_)
    {
      xMinMax(p1st->ibeg,p_XT_ST->iend,x,y,&xLeftQuote,&xRightQuote);
      xMinMax(p_XT_ST->iend+1,low_data->ii-1,x,y,&xLeftAfter,&xRightAfter);
      xMinMax(1,p1st->ibeg-1,x,y,&xLeftBefore,&xRightBefore);
      /* check leading quotes */
      if(xRightQuote<xLeftBefore && xRightQuote<xLeftAfter)
       {
         /* modify stick and delete unnecessary part of it */
         p1st->iend=p2nd->iend;
         p1st->other=0;
         DelThisAndNextFromSPECLList(p2nd);
         PutLeadingQuotes(low_data,p_XT_ST,p1st);
         bret=_TRUE;
         goto ret;
       }
      /* check trailing quotes */
      if(xLeftQuote>xRightBefore && xLeftQuote>xRightAfter)
       {
         /* modify stick and delete unnecessary part of it */
         p1st->iend=p2nd->iend;
         p1st->other=0;
         DelThisAndNextFromSPECLList(p2nd);
         SwapThisAndNext(p1st);
         PutTrailingQuotes(low_data,p_XT_ST);
         bret=_TRUE;
         goto ret;
       }
    }
 }

ret:
 DBG_ChkSPECL(low_data);

 return bret;

} /* end of FindQuotes */

/****************************************************************************/
/* Put leading quotes on its place                                          */
/****************************************************************************/
_VOID PutLeadingQuotes(p_low_type low_data,p_SPECL p1stQuote,p_SPECL p2ndQuote)
{
  p_SPECL specl=low_data->specl;
  p1stQuote->other |= (PROCESSED | ST_QUOTE);
  p2ndQuote->other |= (PROCESSED | ST_QUOTE);
  p1stQuote->code=p2ndQuote->code=_ST_;
  Move2ndAfter1st(specl,p1stQuote);
  Move2ndAfter1st(p1stQuote,p2ndQuote);
  insert_drop(p2ndQuote,low_data);

} /* end of PutLeadingQuotes */

/****************************************************************************/
/* Put trailing quotes on its place                                         */
/****************************************************************************/
_VOID PutTrailingQuotes(p_low_type low_data,p_SPECL p_XT_ST)
{
 p_SPECL specl=low_data->specl;
 p_SPECL nxt=p_XT_ST->next,
         last;

  for(last=specl;last->next!=_NULL;last=last->next);
  p_XT_ST->other |= (PROCESSED | ST_QUOTE);
  nxt->other |= (PROCESSED | ST_QUOTE);
  p_XT_ST->code=nxt->code=_ST_;
  if(last!=nxt)
   {
     Move2ndAfter1st(last,p_XT_ST);
     Move2ndAfter1st(p_XT_ST,nxt);
   }
  else
   last=p_XT_ST->prev;
  insert_drop(p_XT_ST,low_data);
  Move2ndAfter1st(last,p_XT_ST->next);
  if(IsAnyBreak(last))
   DelFromSPECLList(last);

} /* end of PutTrailingQuotes */

/****************************************************************************/
/* Check pair of elements suspected to be stick                             */
/****************************************************************************/
#define IsBegEndElement(pEl) (Is_IU_or_ID(pEl) || IsAnyArcWithTail(pEl))
_BOOL IsStick(p_SPECL p1st,p_SPECL p2nd)
{
  return (p1st!=_NULL && p1st->mark==BEG && IsBegEndElement(p1st) &&
          p2nd!=_NULL && p2nd->mark==END && IsBegEndElement(p2nd)
         );

} /* end of IsStick */

/****************************************************************************/
/*    Search crossing between XT and other elements (I mean X-coordinates)  */
/****************************************************************************/
#ifndef FOR_FRENCH
#define DETECT_UNDERSCORE
#endif /* FOR_FRENCH */
_BOOL is_X_crossing_XT(p_SPECL pToCheck,p_low_type low_data,p_UCHAR fl_ZZ)
{
 p_SHORT x=low_data->x,
     y=low_data->y;   /* x;y co-ordinates */
 _SHORT xLeft, xRight;
 _SHORT xmin_XT,xmax_XT,
        xXTibeg=x[pToCheck->ibeg],
        xXTiend=x[pToCheck->iend],
        prviend,nxtibeg;
 p_SPECL prv,
         nxt;
#if defined(FOR_FRENCH) || defined(DETECT_UNDERSCORE)
 _BOOL  bWasCrossPrv=_FALSE,
        bWasCrossNxt=_FALSE;
 _SHORT DxPrv,DxNxt;
 if((low_data->rc->low_mode & LMOD_SEPARATE_LET)           &&
    (low_data->rc->lmod_border_used != LMOD_BORDER_NUMBER) &&
    HEIGHT_OF(pToCheck)<=_US2_
   )
  return _TRUE;
#endif /* FOR_FRENCH */

   if(xXTibeg>xXTiend)
    {
      xmax_XT=xXTibeg;
      xmin_XT=xXTiend;
    }
   else
    {
      xmax_XT=xXTiend;
      xmin_XT=xXTibeg;
    }
   prv=pToCheck->prev;
   if(prv->code==_XT_)
    {
      prviend=prv->ibeg-1;
      prv=prv->prev;
    }
   else
    prviend=pToCheck->ibeg-1;
   if(prv != NULL && prv->prev!=_NULL)
    {
      xMinMax(0,prviend,x,y,&xLeft,&xRight);
      if(xRight>xmin_XT)
#if defined(FOR_FRENCH) || defined(DETECT_UNDERSCORE)
       {
         bWasCrossPrv=_TRUE;
         DxPrv=xRight-xmin_XT;
       }
#else
       return _TRUE;
#endif /* FOR_FRENCH */
    }
   *fl_ZZ=0;
   if((nxt=pToCheck->next)==_NULL)
    {
//    if(prv->code==_XT_) return _FALSE;
//    else                return _TRUE;
#if defined(FOR_FRENCH) || defined(DETECT_UNDERSCORE)
      if(bWasCrossPrv)
       return _TRUE;
      else
#endif /* FOR_FRENCH */
       return _FALSE;
    }
   if(nxt->code==_XT_)
    {
      if(nxt->next!=_NULL && (nxt->next)->mark==HATCH)
       return _TRUE;
      nxtibeg=nxt->iend+1;
      nxt=nxt->next;
    }
   else
    {
      nxtibeg=pToCheck->iend+1;
      *fl_ZZ=1;
    }
   if(nxt!=_NULL)
    {
      xMinMax(nxtibeg,low_data->ii-1,x,y,&xLeft,&xRight);
      if(xLeft<xmax_XT)
#if defined(FOR_FRENCH) || defined(DETECT_UNDERSCORE)
       {
         bWasCrossNxt=_TRUE;
         DxNxt=xmax_XT-xLeft;
       }
#else
       return _TRUE;
#endif /* FOR_FRENCH */
    }
#if defined(FOR_FRENCH) || defined(DETECT_UNDERSCORE)
   /* here I'll try to separate "clitics" */
   if(bWasCrossPrv || bWasCrossNxt)
    {
      _SHORT yTop,yBottom;
      yMinMax(pToCheck->ibeg,pToCheck->iend,y,&yTop,&yBottom);
      if(   yTop<STR_UP
#if !defined(DETECT_UNDERSCORE)
         || HEIGHT_OF(pToCheck)>_DI2_
#endif /* DETECT_UNDERSCORE */
        )
       return _TRUE;
      else
       {
         _SHORT dx=xmax_XT-xmin_XT;
         if(bWasCrossPrv && !bWasCrossNxt && DxPrv>ONE_FOURTH(dx) ||
            bWasCrossNxt && !bWasCrossPrv && DxNxt>ONE_FOURTH(dx) ||
            bWasCrossPrv && bWasCrossNxt &&
            (DxPrv>ONE_FOURTH(dx) || DxNxt>ONE_FOURTH(dx))
           )
          return _TRUE;
       }
    }
#endif /* FOR_FRENCH */
   return _FALSE;

} /* end of is_X_crossing_XT */

/****************************************************************************/
/*             Change height of the last IU                                 */
/****************************************************************************/

#define NUM_XR_MAX_FOR_DOWN 10

_VOID change_last_IU_height(p_low_type low_data)
{
 p_SPECL  cur=low_data->specl,
          prv;
 p_SHORT  x=low_data->x,
          y=low_data->y;
 _SHORT num_xr=0,xmin,xmax;

  while(cur->next != _NULL)
   {
     num_xr++;
     cur=cur->next;
   }
  if(cur->mark==DROP) cur=cur->prev;
  prv=cur->prev;
  if(   num_xr>NUM_XR_MAX_FOR_DOWN
     && cur->mark==END
     && cur->code==_IU_
     && HEIGHT_OF(cur) < _UI1_
     && cur->attr == HEIGHT_OF(cur)
     && prv->code==_UD_
     && COUNTERCLOCKWISE(prv)
    )
   {
     xMinMax(0,cur->ibeg-1,x,y,&xmin,&xmax);
     if(xmax<=x[cur->ibeg] && xmax<=x[cur->iend])
      ASSIGN_HEIGHT(cur,_UI1_);
   }

 return;
} /* end of change_last_IU_height */

/****************************************************************************/
/*****  Different breaks processing                                      ****/
/****************************************************************************/
#define  MIN_WIDTH_LET (DY_STR/4)
_SHORT make_different_breaks(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                       /* the trajectory                 */
 p_SHORT x=low_data->x,                /* x,y - co-ordinates             */
         y=low_data->y;
 p_SPECL cur,
         prv,
         nxt,
         wrk;
 _INT   prv_stroke_beg,prv_stroke_end,
        nxt_stroke_beg,nxt_stroke_end,
        nxt_stroke_beg_cutted,dx,
        DxAverage,DxSum=0,NumZZZ=0,DxSumFF=0,NumFF=0;

    if(low_data->width_letter==0) return SUCCESS;
    cur=specl->next;
    while(cur!=_NULL)
     {
       if(cur->code==_ZZZ_)
        {
          _BOOL bIsXT=_FALSE;
          p_SPECL pXT;
          /* init field ipoint0 - here it will be dx for this break
             (if I leave it as _ZZZ_ */
          cur->ipoint0=ALEF;
          prv=cur->prev;
          while(IsXTorST(prv))
           {
             if(//(low_data->rc->low_mode & LMOD_SEPARATE_LET) &&
                prv->code==_XT_ && (prv->other & CUTTED) == 0 &&
                (prv->other & FAKE) == 0 &&
                (prv+1)->ipoint0!=UNDEF && (prv+1)->ipoint1!=UNDEF)
              {
                bIsXT=_TRUE;
                pXT=prv;
              }
             prv=prv->prev;
           }
          if(prv->code==0)
           { cur=cur->next; continue; }
          nxt=cur->next;
          while(nxt!=_NULL && IsXTorST(nxt))
           {
             if(//(low_data->rc->low_mode & LMOD_SEPARATE_LET) &&
                nxt->code==_XT_ && (nxt->other & CUTTED) == 0 &&
                (nxt->other & FAKE) == 0 &&
                (nxt+1)->ipoint0!=UNDEF && (nxt+1)->ipoint1!=UNDEF)
              {
                bIsXT=_TRUE;
                pXT=nxt;
              }
             /* CHE: for good breaks in "!" and "?": */
           /**/
             if(nxt->code==_ST_ && nxt->next==_NULL)
               break;
            /**/
             nxt=nxt->next;
           }
          if(nxt==_NULL)
           { cur=cur->next; continue; }
          /* CHE: for good breaks in "!" and "?": */
        /**/
          if(nxt->code==_ST_ && nxt->next==_NULL)
           {
             if(HEIGHT_OF(nxt)>_MD_)  // Only for low points
              {
                _INT  iPrv;
                _INT  i1stInStrk;
                if(IsAnyBreak(prv) || prv==specl)
                  iPrv=cur->ibeg;
                else
                  iPrv=prv->iend;
                i1stInStrk=brk_left(y,iPrv,0) + 1;
                iPrv=iYdown_range(y,i1stInStrk,iPrv);
                if(   iPrv != ALEF  /* i.e. all is OK with "iYdown..." */
                   && x[nxt->ibeg]-x[iPrv]
                          < HWRMax(low_data->width_letter,MIN_WIDTH_LET)
                   && y[nxt->ibeg] > y[iPrv]
                   && x[nxt->ibeg]-x[iPrv] < FOUR_THIRD(y[nxt->ibeg]-y[iPrv])
                  )
                 cur->code=_ZZ_;
              }
             break;  // No more XRs
           }
         /**/
          if(/*(low_data->rc->low_mode & LMOD_SEPARATE_LET) &&*/ !bIsXT)
           {
             for(wrk=prv;
                 wrk!=_NULL && !IsAnyBreak(wrk) && wrk->code!=_XT_;
                 wrk=wrk->prev);
             if(wrk==_NULL || IsAnyBreak(wrk) || (wrk->other & CUTTED) ||
                (wrk->other & FAKE) ||
                (wrk+1)->ipoint0==UNDEF || (wrk+1)->ipoint1==UNDEF)
              bIsXT=_FALSE;
             else
              {
                bIsXT=_TRUE;
                pXT=wrk;
              }
           }
          prv_stroke_end=prv_stroke_beg=prv->iend;
          while(y[--prv_stroke_beg]!=BREAK);
          prv_stroke_beg++;
          nxt_stroke_beg_cutted=nxt_stroke_end=nxt_stroke_beg=nxt->ibeg;
          while(y[++nxt_stroke_end]!=BREAK);
          nxt_stroke_end--;
          if((low_data->rc->low_mode & LMOD_SEPARATE_LET) &&
             (nxt->code==_UDL_ || nxt->code==_ID_)        &&
             (HEIGHT_OF(nxt)>_MD_)
            )
           {
             p_SPECL wrkSpecl=nxt->next;
             while(wrkSpecl!=_NULL && IsXTorST(wrkSpecl))
              wrkSpecl=wrkSpecl->next;
             if(wrkSpecl!=_NULL && !IsAnyBreak(wrkSpecl) && wrkSpecl->mark!=END)
              {
                nxt_stroke_beg_cutted=nxt->iend;
                while(y[nxt_stroke_beg_cutted]!=BREAK &&
                      y[nxt_stroke_beg_cutted]>STR_UP &&
                      nxt_stroke_beg_cutted<=wrkSpecl->ibeg)
                 nxt_stroke_beg_cutted++;
                nxt_stroke_beg_cutted--;
              }
           }

          dx=GetDxBetweenStrokes(low_data,prv_stroke_beg,prv_stroke_end,
                                 nxt_stroke_beg_cutted,nxt_stroke_end);
          if(/*(low_data->rc->low_mode & LMOD_SEPARATE_LET) &&*/ bIsXT)
           {
             _BOOL bIsIpoint0InsidePrv=(pXT+1)->ipoint0<=prv_stroke_end &&
                                       (pXT+1)->ipoint0>=prv_stroke_beg;
             _BOOL bIsIpoint0InsideNxt=(pXT+1)->ipoint0<=nxt_stroke_end &&
                                       (pXT+1)->ipoint0>=nxt_stroke_beg;
             _BOOL bIsIpoint1InsidePrv=(pXT+1)->ipoint1<=prv_stroke_end &&
                                       (pXT+1)->ipoint1>=prv_stroke_beg;
             _BOOL bIsIpoint1InsideNxt=(pXT+1)->ipoint1<=nxt_stroke_end &&
                                       (pXT+1)->ipoint1>=nxt_stroke_beg;

             if(bIsIpoint0InsidePrv && bIsIpoint1InsideNxt ||
                bIsIpoint0InsideNxt && bIsIpoint1InsidePrv   )
              {
                cur->code=_ZZ_;
                cur=cur->next;
                continue;
              }
           }
          if(prv_stroke_beg==1 &&
             SecondHigherFirst(low_data,cur,prv,nxt,
                               prv_stroke_beg,prv_stroke_end,
                               nxt_stroke_beg,nxt_stroke_end)
            )
           {
             cur->code=_Z_;
             cur->other=Z_UP_DOWN;
           }
          else
           {
             if(dx>ONE_NTH(5*low_data->width_letter,12))
              cur->code = _FF_;
             if((low_data->rc->low_mode & LMOD_SEPARATE_LET) &&
                (dx<=ONE_NTH(low_data->width_letter,7))
               )
              {
                cur->code=_ZZ_;
                cur->other=SPECIAL_ZZ;
              }
           }
#if PG_DEBUG
          if(mpr>=4 && mpr<=MAX_GIT_MPR)
           {
             _RECT  box;
             box.left  = x[prv_stroke_end];
             box.right = x[nxt_stroke_beg_cutted];
             box.top   = y[prv_stroke_end];
             box.bottom= y[nxt_stroke_beg_cutted];
             printw("\n break=%d ",dx);
             dbgAddBox(box, EGA_BLACK, EGA_MAGENTA, SOLID_LINE);
             brkeyw("\n I'm waiting");
           }
#endif
          if(cur->code==_ZZZ_ || cur->code==_FF_)
           {
             cur->ipoint0=(_SHORT)dx;
             DxSum+=dx;
             if(cur->code==_FF_)
              {
                DxSumFF+=dx;
                NumFF++;
              }
             NumZZZ++;
           }
        }
       cur=cur->next;
     }

    if(//(low_data->rc->low_mode & LMOD_SEPARATE_LET) &&
       NumZZZ>=1)
     {
       cur=specl->next;
       while(cur!=_NULL)
        {
          if(cur->code==_ZZZ_ && (dx=cur->ipoint0)!=ALEF && NumZZZ>1)
           {
             DxAverage=(DxSum-dx)/(NumZZZ-1);
#if PG_DEBUG
             if(mpr>=4 && mpr<=MAX_GIT_MPR)
              {
                printw("\n Dx=%d DxAverage=%d ",dx,DxAverage);
                brkeyw("\n I'm waiting");
              }
#endif
             if(dx<=ONE_FOURTH(DxAverage))
              {
                cur->code=_ZZ_;
                cur->other=SPECIAL_ZZ;
              }
           }
          else if(cur->code==_FF_              &&
                  (dx=cur->ipoint0)!=ALEF      &&
                  (cur->other & FF_PUNCT)==0   &&
                  (cur->other & FF_CUTTED)==0  &&
                  (cur->other & NO_PENALTY)==0
                 )
           {
             if(NumFF==1 && dx<=ONE_HALF(low_data->width_letter))
              cur->code=_ZZZ_;
             else if(NumFF>1)
              {
                DxAverage=(DxSumFF-dx)/(NumFF-1);
#if PG_DEBUG
                if(mpr>=4 && mpr<=MAX_GIT_MPR)
                 {
                   printw("\n Dx=%d DxAverage=%d ",dx,DxAverage);
                   brkeyw("\n I'm waiting");
                 }
#endif
                if(dx<=ONE_HALF(DxAverage) ||
                   (dx<=TWO_THIRD(DxAverage) && dx<=ONE_HALF(low_data->width_letter)))
                 cur->code=_ZZZ_;
              }
           }
          cur=cur->next;
        }
     }

  return SUCCESS;
} /***** end of make_different_breaks *****/

#undef  MIN_WIDTH_LET

/****************************************************************************/
/*****  This function calculates dx between 2 strokes using slant        ****/
/****************************************************************************/
#define  ONE_THIRD_STR ONE_THIRD(DY_STR)
_INT GetDxBetweenStrokes(p_low_type low_data,
                         _INT prv_stroke_beg,_INT prv_stroke_end,
                         _INT nxt_stroke_beg_cutted,_INT nxt_stroke_end)
{
 p_SHORT x=low_data->x,                /* x,y - co-ordinates             */
         y=low_data->y;
 _SHORT ixmax,ixmin,iymax,iymin;
 _INT   right,right1,right2,left,left1,left2,
        dx,slope=low_data->slope;
 _RECT  str1,str2;
 _BOOL  IsUpRight,IsDownRight,IsUpLeft,IsDownLeft,no_right2,no_left2;
          if(GetTraceBoxInsideYZone(x,y,prv_stroke_beg,prv_stroke_end,
                                    STR_UP,STR_UP+ONE_THIRD_STR,
                                    &str1,&ixmax,&ixmin,&iymax,&iymin)
            )
           {
             right1=str1.right-SlopeShiftDx(MEAN_OF(STR_UP,STR_DOWN)-y[ixmax],
                                            slope);
             IsDownRight=_FALSE;
             IsUpRight=_TRUE;
           }
          else
           right1=ELEM;
          if(GetTraceBoxInsideYZone(x,y,prv_stroke_beg,prv_stroke_end,
                                    STR_UP+ONE_THIRD_STR,STR_DOWN-ONE_THIRD_STR,
                                    &str1,&ixmax,&ixmin,&iymax,&iymin)
            )
           {
             right=str1.right-SlopeShiftDx(MEAN_OF(STR_UP,STR_DOWN)-y[ixmax],
                                           slope);
             if( right > right1 )
              {right2=right1; right1=right; IsUpRight=IsDownRight=_FALSE;}
             else
              right2=right;
           }
          else
           right2=ELEM;
          if(GetTraceBoxInsideYZone(x,y,prv_stroke_beg,prv_stroke_end,
                                    STR_DOWN-ONE_THIRD_STR,STR_DOWN,
                                    &str1,&ixmax,&ixmin,&iymax,&iymin)
            )
           {
             right=str1.right-SlopeShiftDx(MEAN_OF(STR_UP,STR_DOWN)-y[ixmax],
                                           slope);
             if( right > right1 )
              {right2=right1; right1=right; IsDownRight=_TRUE; IsUpRight=_FALSE;}
             else if ( right > right2 )
              right2=right;
           }
          else
           right=ELEM;
          if( right1 == ELEM )
           {
             no_right2=_TRUE;
             if( y[prv_stroke_beg] <= STR_UP )
              { IsUpRight=_TRUE; IsDownRight=_FALSE; }
             else
              { IsUpRight=_FALSE; IsDownRight=_TRUE; }
             ixmax=(_SHORT)ixMax(prv_stroke_beg,prv_stroke_end,x,y);
             if(ixmax!=-1)
              right1=x[ixmax]-SlopeShiftDx(MEAN_OF(STR_UP,STR_DOWN)-y[ixmax],
                                           slope);
             else
              {
                GetTraceBox(x,y,prv_stroke_beg,prv_stroke_end,&str1);
                right1=str1.right;
              }
           }
          else if ( right2 == ELEM ) no_right2=_TRUE;
          else                       no_right2=_FALSE;
          if(GetTraceBoxInsideYZone(x,y,nxt_stroke_beg_cutted,nxt_stroke_end,
                                    STR_UP,STR_UP+ONE_THIRD_STR,
                                    &str2,&ixmax,&ixmin,&iymax,&iymin)
            )
           {
             left1=str2.left-SlopeShiftDx(MEAN_OF(STR_UP,STR_DOWN)-y[ixmin],
                                            slope);
             IsDownLeft=_FALSE;
             IsUpLeft=_TRUE;
           }
          else
           left1=ALEF;
          if(GetTraceBoxInsideYZone(x,y,nxt_stroke_beg_cutted,nxt_stroke_end,
                                    STR_UP+ONE_THIRD_STR,STR_DOWN-ONE_THIRD_STR,
                                    &str2,&ixmax,&ixmin,&iymax,&iymin)
            )
           {
             left=str2.left-SlopeShiftDx(MEAN_OF(STR_UP,STR_DOWN)-y[ixmin],
                                           slope);
             if( left < left1 )
              {left2=left1; left1=left; IsUpLeft=IsDownLeft=_FALSE;}
             else
              left2=left;
           }
          else
           left2=ALEF;
          if(GetTraceBoxInsideYZone(x,y,nxt_stroke_beg_cutted,nxt_stroke_end,
                                    STR_DOWN-ONE_THIRD_STR,STR_DOWN,
                                    &str2,&ixmax,&ixmin,&iymax,&iymin)
            )
           {
             left=str2.left-SlopeShiftDx(MEAN_OF(STR_UP,STR_DOWN)-y[ixmin],
                                           slope);
             if( left < left1 )
              {left2=left1; left1=left; IsDownLeft=_TRUE; IsUpLeft=_FALSE;}
             else if ( left < left2 )
              left2=left;
           }
          else
           left=ALEF;
          if( left1 == ALEF )
           {
             no_left2=_TRUE;
             if( y[nxt_stroke_beg_cutted] <= STR_UP )
              { IsUpLeft=_TRUE; IsDownLeft=_FALSE; }
             else
              { IsUpLeft=_FALSE; IsDownLeft=_TRUE; }
             if(nxt_stroke_end==low_data->ii-2 && IsDownLeft)
              ixmin=(_SHORT)nxt_stroke_beg_cutted;
             else
              ixmin=(_SHORT)ixMin(nxt_stroke_beg_cutted,nxt_stroke_end,x,y);
             if(ixmin!=-1)
              left1=x[ixmin]-SlopeShiftDx(MEAN_OF(STR_UP,STR_DOWN)-y[ixmin],
                                           slope);
             else
              {
                GetTraceBox(x,y,nxt_stroke_beg_cutted,nxt_stroke_end,&str2);
                left1=str2.left;
              }
           }
          else if ( left2 == ALEF ) no_left2=_TRUE;
          else                      no_left2=_FALSE;

          if     (no_right2 && no_left2)                dx=left1-right1;
          else if(IsUpRight && IsDownLeft && no_right2) dx=left2-right1;
          else if(IsUpRight && IsDownLeft && no_left2)  dx=left1-right2;
          else if(IsUpRight && IsDownLeft)
        dx=MEAN_OF(left1-right1,HWRMin(left1-right2,left2-right1));
          else if(IsDownRight && IsUpLeft && no_right2) dx=left2-right1;
          else if(IsDownRight && IsUpLeft && no_left2)  dx=left1-right2;
          else if(IsDownRight && IsUpLeft)
        dx=MEAN_OF(left1-right1,HWRMin(left1-right2,left2-right1));
          else                                          dx=left1-right1;

 return(dx);

} /* end of GetDxBetweenStrokes */
#undef  ONE_THIRD_STR
/****************************************************************************/
/*****  This program finds situation, when 1 stroke below 2-nd (P,D,B)   ****/
/****************************************************************************/
#define CURV_FOR_PRV_TO_BE_STRAIGHT 5
#define CURV_FOR_NXT_TO_BE_CURVE    10
#define MAX_NUM_ELEM_IN_PRV         4
#define MAX_NUM_ELEM_IN_NXT         6

_BOOL SecondHigherFirst(p_low_type low_data,
                        p_SPECL cur,p_SPECL prv,p_SPECL nxt,
                        _INT prv_stroke_beg,_INT prv_stroke_end,
                        _INT nxt_stroke_beg,_INT nxt_stroke_end)
{
  _BOOL bret=_FALSE;
  p_SHORT x=low_data->x,                /* x,y - co-ordinates             */
          y=low_data->y;
  _RECT str1,str2;

  GetTraceBox(x,y,prv_stroke_beg,prv_stroke_end,&str1);
  GetTraceBox(x,y,nxt_stroke_beg,nxt_stroke_end,&str2);
  if(HeightInLine(str2.top,low_data) <=_UE2_ &&
     str2.left<=str1.right                   &&
     str2.right>str1.right                   &&
     str2.top<=str1.top)
   {
     _BOOL IsIbegFound=_FALSE;
     _INT  i,j,NxtUpperIbeg,NxtUpperIend;
     _INT  CurvPrv,CurvNxt;
     p_SPECL specl=low_data->specl,wrk;
     _INT  num_elem;

     while(prv!=specl && prv->mark!=BEG)
      prv=prv->prev;
     if(prv==specl) goto ret;
     while(nxt!=_NULL && nxt->mark!=END)
      nxt=nxt->next;
     if(nxt==_NULL) goto ret;
     for(num_elem=0,wrk=prv;wrk!=cur;wrk=wrk->next)
      if(Is_IU_or_ID(wrk)  ||
         wrk->code==_UUL_  || wrk->code==_UU_ ||
         wrk->code==_UDL_  || wrk->code==_UD_   )
       num_elem++;
      else
       goto ret;
     if(num_elem>MAX_NUM_ELEM_IN_PRV)
      goto ret;
     for(num_elem=0,wrk=cur->next;wrk!=nxt->next;wrk=wrk->next)
      if(Is_IU_or_ID(wrk)  ||
         wrk->code==_UUL_  || wrk->code==_UU_ ||
         wrk->code==_UDL_  || wrk->code==_UD_   )
       num_elem++;
      else if(wrk->code==_BR_ || wrk->code==_BL_ ||
              IsAnyAngle(wrk))
       continue;
      else
       goto ret;
     if(num_elem>MAX_NUM_ELEM_IN_NXT)
      goto ret;

     CurvPrv=CurvMeasure(x,y,prv_stroke_beg,prv_stroke_end,-1);
#if PG_DEBUG
     if(mpr>=4 && mpr<=MAX_GIT_MPR)
      printw("\n CurvPrv=%d",CurvPrv);
#endif
     if(HWRAbs(CurvPrv)>=CURV_FOR_PRV_TO_BE_STRAIGHT)
      goto ret;
     CurvNxt=CurvMeasure(x,y,nxt_stroke_beg,nxt_stroke_end,-1);
#if PG_DEBUG
     if(mpr>=4 && mpr<=MAX_GIT_MPR)
      printw("\n CurvNxt=%d",CurvNxt);
#endif
     if(HWRAbs(CurvNxt)<CURV_FOR_NXT_TO_BE_CURVE)
      goto ret;
     for(i=nxt_stroke_beg;i<=nxt_stroke_end;i++)
      {
        if(!IsIbegFound && y[i]<=str1.top)
         {
           NxtUpperIbeg=i;
           IsIbegFound=_TRUE;
         }
        if(IsIbegFound && y[i]<=str1.top)
         NxtUpperIend=i;
      }
     for(i=NxtUpperIbeg;i<=NxtUpperIend;i++)
      for(j=prv_stroke_beg;j<=prv_stroke_end;j++)
       if(x[j]==x[i])
        {
          bret=_TRUE;
          goto ret;
        }
   }

ret:
  return bret;

} /* end of SecondHigherFirst */

/****************************************************/

/*  This function adjusts "ibeg" and "iend" of all inner */
/* break-elements so that they didn't begin or end on    */
/* the moveable elements (i.e. _ST_, _XT_):              */

_VOID  AdjustZZ_BegEnd ( p_low_type low_data )     /*CHE*/
{
  p_SHORT  y     = low_data->y;
  p_SPECL  specl = low_data->specl;
  p_SPECL  cur;
  p_SPECL  prvNotST, nxtNotST;
  _SHORT   iBegNew, iEndNew;


  DBG_CHK_err_msg( specl==_NULL,
                   "AdjZZ: BAD ->specl." );

  for  ( cur = specl->next;
         cur != _NULL;
         cur = cur->next )  { /*10*/

    if  (   cur->prev == specl
         || cur->next == _NULL
         || !IsAnyBreak(cur) )
      continue;

     /*  Here "cur" is some break within word.    */
     /* Find closest prev. and next elements that */
     /* are not _ST_ or _XT_:                     */

    for  ( prvNotST = cur->prev;
           prvNotST != _NULL  &&  prvNotST != specl;
           prvNotST = prvNotST->prev )  {
      if  (   !IsXTorST(prvNotST)
           || prvNotST->prev==_NULL
           || prvNotST->prev==specl
           || IsAnyBreak(prvNotST->prev)
          )
        break;
    }

    for  ( nxtNotST = cur->next;
           nxtNotST != _NULL;
           nxtNotST = nxtNotST->next )  {
      if  (   !IsXTorST(nxtNotST)
           || nxtNotST->next==_NULL
           || IsAnyBreak(nxtNotST->next)
          )
        break;
    }

         /*  Set "ibeg" and "iend" according to the found elements: */

    iBegNew = cur->ibeg;
    iEndNew = cur->iend;

    if  (   prvNotST != _NULL
         && prvNotST != specl
         //&& prvNotST->mark == END
         //&& y[prvNotST->iend + 1] == BREAK
        )  {
      iBegNew = prvNotST->iend;
      while ( (iBegNew+1)<low_data->ii  &&  y[iBegNew+1] != BREAK )
        iBegNew++;
    }
    if  (   nxtNotST != _NULL
         //&& nxtNotST->mark == BEG
         //&& y[nxtNotST->ibeg - 1] == BREAK
        )  {
      iEndNew = nxtNotST->ibeg;
      while ( iEndNew>0  &&  y[iEndNew-1] != BREAK )
        iEndNew--;
    }

    //if  ( iBegNew < iEndNew )
    {
      cur->ibeg = iBegNew;
      cur->iend = iEndNew;
    }

  } /*10*/

} /*AdjustZZ_BegEnd*/

/****************************************************************************/
/*****  This program finds pairs ID(BEG)->IU(END) and change codes       ****/
/****************************************************************************/
//CHE: Don't redirect curved lines:

#define  MAX_CURV_TO_REDIRECT  2

_VOID  redirect_sticks(p_low_type low_data)
{
  p_SPECL  cur=low_data->specl,
           nxt;
  _UCHAR   height;
  p_SHORT  x = low_data->x; //CHE
  p_SHORT  y = low_data->y;

  while(cur->next!=_NULL)
   {
     _BOOL bIsValidBeg,bIsValidEnd;
     bIsValidBeg=cur->mark==BEG                       &&
                 cur->code==_ID_                      &&
                 (cur->other & WAS_STICK_OR_CROSS)==0 &&
                 (cur->other & MIN_MAX_CUTTED)==0     &&
                 (cur->prev)->mark!=BEG;
     nxt=cur->next;
     bIsValidEnd=nxt->mark==END &&
                 nxt->code==_IU_ &&
                 (nxt->other & MIN_MAX_CUTTED)==0 &&
                 (nxt->next==_NULL || (nxt->next)->mark!=END);
     if(  bIsValidBeg && bIsValidEnd
        &&    //CHE
        ! (   HWRAbs( CurvMeasure( x, y,
                                   cur->ipoint0, nxt->ipoint0, -1 ) )
                  > MAX_CURV_TO_REDIRECT
           && HWRAbs(x[nxt->ipoint0]-x[cur->ipoint0])
                >= ONE_THIRD( HWRAbs(y[cur->ipoint0]-y[nxt->ipoint0]) )
          )
       )
      {
        height=HEIGHT_OF(cur);
        cur->code=_IU_;
        ASSIGN_HEIGHT(cur,HEIGHT_OF(nxt));
        nxt->code=_ID_;
        ASSIGN_HEIGHT(nxt,height);
        cur->other |= WAS_REDIRECTED;
        nxt->other |= WAS_REDIRECTED;
      }
     cur=cur->next;
   }

} /* end of redirect_sticks */

/****************************************************************************/
/* Find upper parts of trajectory and transfering them into angstrem        */
/****************************************************************************/
#if defined (FOR_SWED) || defined (FOR_INTERNATIONAL)

_SHORT find_angstrem(p_low_type low_data)
{
 p_SPECL cur=(low_data->specl)->next;
 p_SPECL pBeg,pEnd,wrk,wrk_prv;
 p_SHORT x=low_data->x;                               /* x co-ordinates  */
 p_SHORT y=low_data->y;                               /* y co-ordinates  */
 _SHORT  stroke_beg, stroke_end;
 _SHORT  prv_stroke_beg, prv_stroke_end;
 _SHORT  xc_str, yc_str;
 _SHORT  WrStep=low_data->width_letter;
 _RECT   box_str, box_prv_str;

 while(cur!=_NULL)
  {
    if( (cur->mark==BEG || (cur->prev)->mark == DROP) && cur->code!=_ST_ )
     {
       for( wrk=cur;
            wrk!=_NULL &&
            (wrk->code==_XT_ || wrk->mark==HATCH || wrk->mark==DROP);
            wrk=wrk->next );

       if( wrk==_NULL ) break;

       pBeg=wrk;
       stroke_beg=brk_left(y,pBeg->ibeg,0)+1;

       for( wrk_prv=wrk;
            wrk!=_NULL && wrk->mark!=END && wrk->mark!=DROP;
            wrk_prv=wrk,wrk=wrk->next );

       if( wrk==_NULL || wrk->mark!=END ) wrk=wrk_prv;

       pEnd=wrk;
       stroke_end=brk_right(y,pEnd->iend,low_data->ii-1)-1;

       for( wrk=cur->prev;
            wrk->code==_ST_ || wrk->code==_XT_ || wrk->mark==DROP;
            wrk=wrk->prev );
       prv_stroke_beg=brk_left(y,wrk->ibeg-2,0)+1;
       prv_stroke_end=wrk->ibeg-2;

       if( prv_stroke_beg >= 1 )           /* don't check the 1-st stroke */
        {
          p_SPECL pCross;
          GetTraceBox(x,y,prv_stroke_beg,prv_stroke_end,&box_prv_str);
          GetTraceBox(x,y,stroke_beg,stroke_end,&box_str);
          xc_str=(box_str.right+box_str.left)/2;
          yc_str=(box_str.bottom+box_str.top)/2;

          if(    yc_str < STR_UP
              && box_str.bottom < STR_UP+ONE_THIRD(DY_STR)
              && yc_str < box_prv_str.top
              && xc_str < box_prv_str.right+TWO_THIRD(WrStep)
              && (box_str.bottom-box_str.top)+
                 (box_str.right-box_str.left) < 3*WrStep
              && !IsExclamationOrQuestionSign(low_data,pBeg,pEnd)
              && !find_CROSS(low_data,pBeg->ibeg,pEnd->iend,&pCross)
            )
           {
             pBeg->code=_ST_;
             pBeg->attr=HeightInLine(YMID_RECT(box_str),low_data);
             pBeg->other=ST_ANGSTREM|ST_UMLAUT;
             pBeg->mark=BEG;
             pBeg->ibeg=stroke_beg;
             pBeg->iend=stroke_end;
             Attach2ndTo1st(pBeg,pEnd->next);
             if( (cur->prev)->mark==DROP )
                (cur->prev)->code=_ZZZ_;
             if(pBeg->next!=_NULL && (pBeg->next)->mark==DROP)
                (pBeg->next)->code=_ZZZ_;
             pEnd=pBeg;
           }
        }
       cur=pEnd;
     }
    cur=cur->next;
  }

 return SUCCESS;

} /* end of find_angstrem */

#endif /* FOR_SWED */

/****************************************************************************/
/* Find upper parts of trajectory and transfering them into angstrem        */
/****************************************************************************/
_SHORT CheckSequenceOfElements(p_low_type low_data)
{
  p_SPECL cur=low_data->specl,
          nxt;

  while(cur!=_NULL && cur->next!=_NULL)
   {
     nxt=cur->next;
     switch (cur->code)
      {
        case _GU_:
                   if(nxt->code==_GU_ && CrossInTime(cur,nxt))
                    {
                      DelFromSPECLList(nxt);
                      cur=nxt;
                    }
                   break;
        case _GD_:
                   if(nxt->code==_GD_ && CrossInTime(cur,nxt))
                    {
                      DelFromSPECLList(nxt);
                      cur=nxt;
                    }
                   break;
        case _UDC_:
                   if(CLOCKWISE(cur)                         &&
                      (nxt->code==_DDL_ || nxt->code==_CDL_) &&
                      CrossInTime(cur,nxt)
                     )
                    {
                      DelFromSPECLList(nxt);
                      cur=nxt;
                    }
                   break;
        case _UUC_:
        case _UU_:
                   if((nxt->code==_GU_ || nxt->code==_CUL_) &&
                      CrossInTime(cur,nxt))
                    DelFromSPECLList(cur);
                   break;
        case _CUL_:
                   if(nxt->code==_CUL_)
                    {
                      DelFromSPECLList(nxt);
                      cur=nxt;
                    }
                   break;
        case _CUR_:
                   if(nxt->code==_CUR_)
                    DelFromSPECLList(cur);
                   break;
#if defined(FOR_GERMAN) || defined(FOR_FRENCH)
        case _Gr_:
                   { p_SPECL prv=cur->prev;
                     if(prv->code==_ID_ && CrossInTime(cur,prv))
                      prv->code=_UD_;
                   }
                   break;
#endif /* FOR_GERMAN... */
        case _IU_:
                   if(cur->mark==CROSS && nxt->code==_IU_)
                    if(cur->iend-cur->ibeg>nxt->iend-nxt->ibeg)
                     DelFromSPECLList(cur);
                    else
                     {
                       DelFromSPECLList(nxt);
                       cur=nxt;
                     }
                   break;
        case _ID_:
                   if(cur->mark==CROSS && nxt->code==_ID_)
                    if(cur->iend-cur->ibeg>nxt->iend-nxt->ibeg)
                     DelFromSPECLList(cur);
                    else
                     {
                       DelFromSPECLList(nxt);
                       cur=nxt;
                     }
                   break;
      }
     cur=cur->next;
   }

 return SUCCESS;

} /* end of CheckSequenceOfElements */

/***************************************************************************/
#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\check.cpp ===
#ifndef LSTRIP
  /**************************************************************************/

  #include  "hwr_sys.h"
  #include  "ams_mg.h"
  #include  "lowlevel.h"
  #include  "calcmacr.h"
  #include  "low_dbg.h"
  #include  "def.h"

#ifdef  FORMULA
  #include "frm_con.h"

  #ifdef  FRM_WINDOWS
    #include "edit.h"
    #undef   PG_DEBUG
    #define  PG_DEBUG  (FRM_DEBUG && !FOR_EDIT)
  #endif

#endif /*FORMULA*/

  #if PG_DEBUG
  #include "pg_debug.h"
  #endif

  /*----------------------------------------------------------------------*/

  extern   const CONSTS  const1 ;

  /*----------------------------------------------------------------------*/

  typedef  struct
       {
         _SHORT  iBeg    ;
         _SHORT  iEnd    ;
         _SHORT  eps     ;
         _SHORT  wX      ;
         _SHORT  wY      ;
         _SHORT  wXY     ;
         _UCHAR  MaxName ;
         _UCHAR  MinName ;
       }
         _ENVIRONS  ;

  typedef  _ENVIRONS _PTR   p_ENV ;

  /*----------------------------------------------------------------------*/

  _SHORT   BigExtr( low_type _PTR low_data, _SHORT  begin, _SHORT end,
                    _SHORT   extr_axis ,    _SHORT  eps_fy             ) ;

  void     RedrawExtr( p_LowData low_data,  p_SPECL pTmp , _UCHAR mark ) ;

  _SHORT   DirectExtr( low_type _PTR  pLowData  , p_ENV   pEnvExtr ,
                       SPECL    _PTR  pTmpSpecl , _SHORT  k            ) ;

  _SHORT   ArcsKern  ( p_LowData low_data, _SHORT ibeg,   _SHORT iend  ) ;

  p_SPECL  LastElemAnyKindFor  ( p_SPECL pSpecl , _UCHAR kind_of_mark  ) ;

  p_SPECL  FirstElemAnyKindFor ( p_SPECL pSpecl , _UCHAR kind_of_mark  ) ;


 /**************************************************************************/



  _SHORT  InitSpecl( low_type _PTR  pLowData  , _SHORT n )
    {
     p_SPECL  pSpecl    = pLowData->specl ;
     _SHORT   flag_init ;

       flag_init = SUCCESS ;

       HWRMemSet( (p_VOID)pSpecl , 0 , sizeof(SPECL)*n ) ;
       HWRMemSet( (p_VOID)pLowData->pAbsnum, 0 ,
                  sizeof(_SHORT)*(pLowData->rmAbsnum)  ) ;

       pLowData->len_specl      = 1          ;
       pLowData->lenabs         = 0          ;
       pSpecl->prev             = _NULL      ;
       pSpecl->next             = pSpecl + 1 ;
       pSpecl->mark             = EMPTY      ;
       pSpecl->ipoint0          = UNDEF      ;
       pSpecl->ipoint1          = UNDEF      ;
       pLowData->LastSpeclIndex = 0          ;

     return( flag_init)    ;
    }

 /**************************************************************************/

  _SHORT  InitSpeclElement( SPECL _PTR pSpecl )
    {
     _SHORT  flag_Init ;

       flag_Init = SUCCESS ;

         if  ( pSpecl != _NULL )
             {
               HWRMemSet( (p_VOID)pSpecl , 0 , sizeof(SPECL) ) ;
               pSpecl->prev        = _NULL      ;
               pSpecl->next        = _NULL      ;
               pSpecl->mark        = EMPTY      ;
               pSpecl->ipoint0     = UNDEF      ;
               pSpecl->ipoint1     = UNDEF      ;
             }
         else
             {
               flag_Init = UNSUCCESS ;
               err_msg ( " InitSpeclElement : Try to init emty SPECL element ..." ) ;
             }

     return( flag_Init) ;
    }
 /**************************************************************************/

  #define      LIM_RED_EPS_Y      1
  #define      MIN_RED_EPS_Y      2

  _SHORT  Extr( low_type _PTR pLowData  , _SHORT eps_fy    , _SHORT eps_fx ,
                _SHORT eps_fxy          , _SHORT eps_fyx   ,
                _SHORT nMaxReduct       , _SHORT extr_axis                  )
   {
     p_POINTS_GROUP  pGroupsBorder = pLowData->pGroupsBorder ;
     _INT            lenGrBord     = pLowData->lenGrBord     ;
    p_SHORT          pAbsnum       = pLowData->pAbsnum       ;
     _INT            lenAbs        = pLowData->lenabs        ;
    p_SPECL          pSpecl        = pLowData->specl         ;
     _INT            old_lenSpecl  = pLowData->len_specl     ;

    p_SPECL          tmpSpecl      ;
     _INT            il , im       ;
     _INT            stAbsnum      ;
     _INT            iBeg, iEnd    ;

     _BOOL           fl0           ;

       if   ( lenGrBord <= 0 )
         {
           err_msg( " Extr : GroupsBorder EMPTY ! " ) ;
           il = 0 ;
             goto   ERR ;
         }

       for  ( il = 0 , stAbsnum = 0  ;  il < lenGrBord  ;  il++ )
            {
              iBeg = ( pGroupsBorder + il )->iBeg ;
              iEnd = ( pGroupsBorder + il )->iEnd ;
              fl0  = _TRUE ;

                for  ( im = stAbsnum  ;  im < lenAbs  ;  im++ )
                     {
                       tmpSpecl = pSpecl + *(pAbsnum + im)  ;

                        if  (  ( iBeg == tmpSpecl->ibeg )  &&
                               ( iEnd == tmpSpecl->iend )     )
                            {
                              stAbsnum = im ;
                              fl0 = _FALSE  ;     break ;
                            }
                     }

                if  ( fl0 == _FALSE )
                    continue ;

                if  ( Mark( pLowData , BEG , 0, 0, 0,
                            (_SHORT)iBeg     , (_SHORT)iBeg, (_SHORT)iBeg, (_SHORT)iBeg  ) == UNSUCCESS )
                          goto  ERR  ;

                if  ( extr_axis & Y_DIR )
                    {
                      _INT     epsred       ;
                      _INT     nReduct = 0  ;

                     p_SHORT  pLenSpecl    = &(pLowData->len_specl) ;
                      _INT    old_lenSpeclLocal = *pLenSpecl ;

                       while  (    ( old_lenSpeclLocal == *pLenSpecl )
                                && ( nReduct      <= nMaxReduct ) )
                          {
                            nReduct++ ;
                            epsred = eps_fy / nReduct ;

                             if  ( epsred <= LIM_RED_EPS_Y )
                                 {
                                   epsred  = MIN_RED_EPS_Y  ;
                                   nReduct = nMaxReduct + 1 ;
                                 }

                             if  ( BigExtr( pLowData, (_SHORT)iBeg, (_SHORT)iEnd,
                                            Y_DIR,    (_SHORT)epsred        )
                                                      == UNSUCCESS  )
                                 goto ERR ;
                          }
                    }

                if  ( extr_axis & X_DIR )
                    {
                      if  ( BigExtr( pLowData, (_SHORT)iBeg, (_SHORT)iEnd,
                                     X_DIR,    eps_fx )   == UNSUCCESS )
                          goto  ERR  ;
                    }

                if  ( extr_axis & XY_DIR )
                    {
                      if  ( BigExtr( pLowData, (_SHORT)iBeg, (_SHORT)iEnd,
                                     XY_DIR  , eps_fxy     ) == UNSUCCESS )
                          goto  ERR ;
                    }

                if  ( extr_axis & ( XY_DIR | YX_DIR ) )
                    {
                      if  ( BigExtr( pLowData, (_SHORT)iBeg,  (_SHORT)iEnd,
                                     YX_DIR  , eps_fyx     ) == UNSUCCESS )
                          goto  ERR ;
                    }

                if  ( Mark( pLowData, END  ,  0, 0 , 0,
                            (_SHORT)iEnd    , (_SHORT)iEnd ,  (_SHORT)iEnd , (_SHORT)iEnd  ) == UNSUCCESS )
                          goto  ERR ;
            }

//   QUIT:
     return   SUCCESS   ;

   ERR :

       pLowData->iBegBlankGroups = (_SHORT)il           ;
       pLowData->len_specl       = (_SHORT)old_lenSpecl ;
       err_msg( " Extr : SPECL overflow , part of LowLevel info lost ..." ) ;

     return   UNSUCCESS ;

   }

 /**************************************************************************/

  #define    WX0          2                    /*  Weights corresponding   */
                                               /*  by two directions of YX */
  #define    WX1          1                    /*  scanning .              */

 /*     This "define" in the same time the meaning of the next "define"    */

  #define   Z(i)         ( wx * x[i]  + wy * y[i] ) / wxy


 /*------------------------------------------------------------------------*/


 /*     That "define" is the way of calculation of the previous "define"   */
 /*     when wx and wy are either 0 or +-1 :                               */

  #define   V(i)         (  (  ((wx==0)? 0:((wx>0)? x[(i)]:(-x[(i)])))      \
                          + ((wy==0)? 0:((wy>0)? y[(i)]:(-y[(i)]))) ) / wxy \
                         )


 /*------------------------------------------------------------------------*/


  _SHORT  BigExtr( low_type _PTR pLowData , _SHORT iBeg , _SHORT iEnd ,
                   _SHORT   extr_axis     , _SHORT eps                )
   {
     p_SPECL    pSpecl     = pLowData->specl         ;
     p_SPECL    maxTmp     , minTmp   , pLastElement ;
     SPECL      tmpSpecl   ;

     _SHORT     flagExtr   = SUCCESS  ;
     _INT       k          ;

     _ENVIRONS  envExtr    ;
    p_ENV       pEnvExtr   = &envExtr ;


       envExtr.iBeg = iBeg ;
       envExtr.iEnd = iEnd ;
       envExtr.eps  = eps  ;


         if  ( extr_axis == Y_DIR )
             {
               envExtr.MaxName = MAXW  ;      envExtr.wX =  0 ;
               envExtr.MinName = MINW  ;      envExtr.wY =  1 ;
             }
         else  if  ( extr_axis == X_DIR )
             {
               envExtr.MaxName = _MAXX ;      envExtr.wX =  1 ;
               envExtr.MinName = _MINX ;      envExtr.wY =  0 ;
             }
         else  if  ( extr_axis == XY_DIR )
             {
               envExtr.MaxName = MAXXY ;      envExtr.wX =  1 ;
               envExtr.MinName = MINXY ;      envExtr.wY =  1 ;
             }

         else  if  ( extr_axis != YX_DIR )
             {
               err_msg( " BigExtr : Illegal extremum flag ... " ) ;
               flagExtr = UNSUCCESS ;
                 goto  QUIT ;
             }

   /*---------------------------------------------------------------------*/
   /*                   Search for big extremums                          */
   /*---------------------------------------------------------------------*/

       if  ( extr_axis != YX_DIR )
           {
            p_SHORT       x         = pLowData->x       ;
            p_SHORT       y         = pLowData->y       ;
             _INT         epsLocal  = pEnvExtr->eps     ;
             _INT         wx        = pEnvExtr->wX      ;
             _INT         wy        = pEnvExtr->wY      ;
             _INT         wxy   ;
             _UCHAR       MaxName   = pEnvExtr->MaxName ;
             _UCHAR       MinName   = pEnvExtr->MinName ;

              SPECL _PTR  pTmpSpecl = &tmpSpecl         ;
             _UCHAR       prevMark  = EMPTY             ;

             _INT         extV  , maxV , minV           ;
             _INT         iOpen , iClose                ;
             _INT         jMax  , jMin                  ;
             _INT         j     ;


             envExtr.wXY = HWRAbs( envExtr.wX ) + HWRAbs( envExtr.wY ) ;

             if  ( envExtr.wXY == 0 )
                 {
                   err_msg( " BigExtr : Wrong XY-weights ... "       ) ;
                   flagExtr = UNSUCCESS ;
                     goto  QUIT ;
                 }

             InitSpeclElement( pTmpSpecl ) ;
             wxy      = pEnvExtr->wXY      ;
             prevMark = ( pLowData->specl + pLowData->len_specl - 1 )->mark ;

             for  ( k = iBeg  ;  k <= iEnd  ;  k++ )
               {
   /*---------------------------------------------------------------------*/
   /*                 Preliminary search of extremums                     */
   /*---------------------------------------------------------------------*/

                 if  (     (  ( V(k) >= V(k+1) )  &&  ( V(k) >= V(k-1) )  )
                       ||  (  ( V(k) <= V(k+1) )  &&  ( V(k) <= V(k-1) )  )
                       ||  ( k == iBeg )  ||   ( k == iEnd ) )
                     {
                       extV = V(k) ;

                       j = k ;
                         while  ( (HWRAbs(extV - V(j)) < epsLocal) && (j >= iBeg)                                                               )  j-- ;
                       iOpen = j+1 ;

                       j = k ;
                         while  ( (HWRAbs(extV - V(j)) < epsLocal) && (j <= iEnd)                                                               )  j++ ;
                       iClose  = j-1 ;
                     }
                 else
                     {
                       continue  ;
                     }

   /*---------------------------------------------------------------------*/
   /*                         Search for maximums                         */
   /*---------------------------------------------------------------------*/

                 if  (   (  (     ( iOpen != iBeg )
                              &&  ( V(iOpen-1)    < extV )
                              &&  ( ( V(iClose+1) < extV ) || (iClose == iEnd)                                                                )  )
                       ||
                            (     ( iClose != iEnd)
                              &&  ( V(iClose+1)   < extV )
                              &&  ( ( V(iOpen-1)  < extV ) || (iOpen  == iBeg)                                                                )  )  )
                       &&
                         ( prevMark != MaxName )  )
                     {
                         maxV = extV ;        jMax = k ;
                         for  ( j = iOpen  ;  j <= iClose  ;  j++ )
                              {
                                if  ( V(j) > maxV )
                                    { jMax = j ;   maxV = V(j) ;  }
                              }

                         for  ( j = jMax ;
                                V(j) == maxV  &&  j <= iEnd  ;
                                j++    ) ;
                         jMax = MEAN_OF( jMax , (j-1) ) ;

                         if  ( jMax != k )
                           {
                             j = jMax ;
                               while  ( ( maxV-V(j) < epsLocal ) && (j >= iBeg) )                                                                  j-- ;
                             iOpen  = j+1 ;

                             j = jMax ;
                               while  ( ( maxV-V(j) < epsLocal ) && (j <= iEnd) )                                                                  j++ ;
                             iClose = j-1 ;
                           }

                       InitSpeclElement( pTmpSpecl ) ;
                       pTmpSpecl->ibeg    = (_SHORT)iOpen   ;
                       pTmpSpecl->iend    = (_SHORT)iClose  ;
                       pTmpSpecl->ipoint0 = (_SHORT)jMax    ;
                       pTmpSpecl->ipoint1 = UNDEF   ;
                       pTmpSpecl->mark    = MaxName ;
                       prevMark           = MaxName ;
                     }

   /*---------------------------------------------------------------------*/
   /*                         Search for minimums                         */
   /*---------------------------------------------------------------------*/

                 else  if
                     (   (  (     ( iOpen != iBeg )
                              &&  ( V(iOpen-1)    > extV )
                              &&  ( ( V(iClose+1) > extV ) || (iClose == iEnd)                                                                 )  )
                       ||
                            (     ( iClose != iEnd)
                              &&  ( V(iClose+1)   > extV )
                              &&  ( ( V(iOpen-1)  > extV ) || (iOpen  == iBeg)                                                                 )  )  )
                       &&
                         ( prevMark != MinName )  )
                     {
                         minV = extV ;        jMin = k ;
                         for  ( j = iOpen  ;  j <= iClose  ;  j++ )
                              {
                                if  ( V(j) < minV )
                                    { jMin = j ;   minV = V(j) ;  }
                              }

                         for  ( j = jMin  ;
                                V(j) == minV  &&  j <= iEnd  ;
                                j++     ) ;
                         jMin = MEAN_OF( jMin , (j-1) ) ;

                         if  ( jMin != k )
                           {
                             j = jMin ;
                               while  ( ( V(j)-minV < epsLocal ) && (j <= iEnd) )                                                                   j++ ;
                             iClose = j-1 ;

                             j = jMin ;
                               while  ( ( V(j)-minV < epsLocal ) && (j >= iBeg) )                                                                   j-- ;
                             iOpen = j+1 ;
                           }

                       InitSpeclElement( pTmpSpecl ) ;
                       pTmpSpecl->ibeg    = (_SHORT)iOpen   ;
                       pTmpSpecl->iend    = (_SHORT)iClose  ;
                       pTmpSpecl->ipoint0 = (_SHORT)jMin    ;
                       pTmpSpecl->ipoint1 = UNDEF   ;
                       pTmpSpecl->mark    = MinName ;
                       prevMark           = MinName ;
                     }


                 if  ( tmpSpecl.mark != EMPTY )
                     {
                         if  ( MarkSpecl( pLowData, &tmpSpecl )
                                                 == UNSUCCESS )
                             { flagExtr = UNSUCCESS  ;    goto  QUIT ; }

                       k = tmpSpecl.iend             ;
                       InitSpeclElement( pTmpSpecl ) ;
                     }
               }
           }
       else
           {
             envExtr.MaxName = MAXYX ;
             envExtr.MinName = MINYX ;           envExtr.wY = -1 ;

               for  ( k = iBeg  ;  k <= iEnd  ;  k++ )
                 {
                   envExtr.wX =  WX1 ;
                   envExtr.wXY = HWRAbs( envExtr.wX ) + HWRAbs( envExtr.wY );

                   DirectExtr( pLowData , pEnvExtr , &tmpSpecl , (_SHORT)k ) ;

                     if  ( tmpSpecl.mark == EMPTY )
                         {
                           envExtr.wX  = WX0 ;
                           envExtr.wXY = HWRAbs( envExtr.wX ) +
                                         HWRAbs( envExtr.wY ) ;
                           DirectExtr( pLowData, pEnvExtr, &tmpSpecl, (_SHORT)k  ) ;
                         }

                     if  (    ( tmpSpecl.mark != EMPTY )
                           &&
                              ( tmpSpecl.iend >= k     ) )
                         {
                             if  ( MarkSpecl( pLowData, &tmpSpecl )
                                                     == UNSUCCESS )
                                 { flagExtr = UNSUCCESS ;   goto  QUIT ; }

                              if  ( tmpSpecl.iend >= k )
                                    k = tmpSpecl.iend  ;
                         }
                 }
           }

   /*---------------------------------------------------------------------*/
   /*                  Increasing extremums borders                       */
   /*---------------------------------------------------------------------*/

      pLastElement = pSpecl + pLowData->len_specl - 1 ;

      maxTmp       = LastElemAnyKindFor( pLastElement , envExtr.MaxName ) ;
      minTmp       = LastElemAnyKindFor( pLastElement , envExtr.MinName ) ;

        if  ( ( maxTmp != _NULL  &&  maxTmp->iend < iEnd )  &&
              ( minTmp != _NULL  &&  minTmp->iend < iEnd )     )
            {
              if  ( maxTmp->iend > minTmp->iend )
                  {
                    maxTmp->iend = (_SHORT)iEnd  ;
 #if PG_DEBUG
                    RedrawExtr( pLowData , maxTmp , envExtr.MaxName  ) ;
 #endif
                  }

              else
                  {
                    minTmp->iend = (_SHORT)iEnd  ;
 #if PG_DEBUG
                    RedrawExtr( pLowData , minTmp , envExtr.MinName  ) ;
 #endif
                  }
            }


      maxTmp = FirstElemAnyKindFor( pLastElement  , envExtr.MaxName  ) ;
      minTmp = FirstElemAnyKindFor( pLastElement  , envExtr.MinName  ) ;

        if  ( ( maxTmp != _NULL  &&  maxTmp->ibeg > iBeg )  &&
              ( minTmp != _NULL  &&  minTmp->ibeg > iBeg )     )
            {
              if  ( maxTmp->ibeg < minTmp->ibeg )
                  {
                    maxTmp->ibeg = (_SHORT)iBeg ;
 #if PG_DEBUG
                    RedrawExtr( pLowData , maxTmp , envExtr.MaxName ) ;
 #endif
                  }
              else
                  {
                    minTmp->ibeg = (_SHORT)iBeg  ;
 #if PG_DEBUG
                    RedrawExtr( pLowData , minTmp , envExtr.MinName ) ;
 #endif
                  }
            }

    QUIT:  return( flagExtr ) ;
   }


 /**************************************************************************/


  _SHORT  DirectExtr( low_type _PTR  pLowData , p_ENV   pEnvExtr ,
                      SPECL    _PTR  pTmpSpecl, _SHORT  k         )
   {
     p_SHORT  x           = pLowData->x       ;
     p_SHORT  y           = pLowData->y       ;

     _INT     iBeg        = pEnvExtr->iBeg    ;
     _INT     iEnd        = pEnvExtr->iEnd    ;
     _INT     eps         = pEnvExtr->eps     ;
     _INT     wx          = pEnvExtr->wX      ;
     _INT     wy          = pEnvExtr->wY      ;
     _INT     wxy         = pEnvExtr->wXY     ;
     _UCHAR   MaxName     = pEnvExtr->MaxName ;
     _UCHAR   MinName     = pEnvExtr->MinName ;

     _UCHAR   prevMark    ;
     _SHORT   flagDirExtr = SUCCESS           ;

     _INT     extZ  , maxZ   , minZ           ;
     _INT     iOpen , iClose ;
     _INT     jMax  , jMin   ;
     _INT     j     ;


       prevMark    = ( pLowData->specl + pLowData->len_specl - 1 )->mark ;
       InitSpeclElement( pTmpSpecl ) ;

   /*---------------------------------------------------------------------*/
   /*                 Preliminary search of extremums                     */
   /*---------------------------------------------------------------------*/

       if  (     (  ( Z(k) >= Z(k+1) )  &&  ( Z(k) >= Z(k-1) )  )
             ||  (  ( Z(k) <= Z(k+1) )  &&  ( Z(k) <= Z(k-1) )  )
             ||  ( k == iBeg )  ||   ( k == iEnd ) )
           {
             extZ = Z(k) ;

             j = k ;
               while  ( (HWRAbs(extZ - Z(j)) < eps) && (j >= iBeg) )  j-- ;
             iOpen = j+1 ;

             j = k ;
               while  ( (HWRAbs(extZ - Z(j)) < eps) && (j <= iEnd) )  j++ ;
             iClose  = j-1 ;
           }
       else
           {
             goto  QUIT  ;
           }

   /*---------------------------------------------------------------------*/
   /*                         Search for maximums                         */
   /*---------------------------------------------------------------------*/

       if  (   (  (     ( iOpen != iBeg )
                    &&  ( Z(iOpen-1)    < extZ )
                    &&  ( ( Z(iClose+1) < extZ ) || (iClose == iEnd) )  )
             ||
                  (     ( iClose != iEnd)
                    &&  ( Z(iClose+1)   < extZ )
                    &&  ( ( Z(iOpen-1)  < extZ ) || (iOpen  == iBeg) )  )  )
             &&
               ( prevMark != MaxName )  )
           {
             maxZ = extZ ;     jMax = k ;
               for  ( j = iOpen  ;  j <= iClose  ;  j++ )
                    {
                      if  ( Z(j) > maxZ )
                          { jMax = j ;   maxZ = Z(j) ;  }
                    }

               for  ( j = jMax  ;  Z(j) == maxZ  &&  j <= iEnd  ;  j++ ) ;
             jMax = MEAN_OF( jMax , (j-1) ) ;

               if  ( jMax != k )
                 {
                   j = jMax ;
                     while  ( ( maxZ-Z(j) < eps ) && (j >= iBeg) )   j-- ;
                   iOpen  = j+1 ;

                   j = jMax ;
                     while  ( ( maxZ-Z(j) < eps ) && (j <= iEnd) )   j++ ;
                   iClose = j-1 ;
                 }

             pTmpSpecl->ibeg    = (_SHORT)iOpen   ;
             pTmpSpecl->iend    = (_SHORT)iClose  ;
             pTmpSpecl->ipoint0 = (_SHORT)jMax    ;
             pTmpSpecl->ipoint1 = UNDEF   ;
             pTmpSpecl->mark    = MaxName ;
           }

   /*---------------------------------------------------------------------*/
   /*                         Search for minimums                         */
   /*---------------------------------------------------------------------*/

       else
       if  (   (  (     ( iOpen != iBeg )
                    &&  ( Z(iOpen-1)    > extZ )
                    &&  ( ( Z(iClose+1) > extZ ) || (iClose == iEnd) )  )
             ||
                  (     ( iClose != iEnd)
                    &&  ( Z(iClose+1)   > extZ )
                    &&  ( ( Z(iOpen-1)  > extZ ) || (iOpen  == iBeg) )  )  )
             &&
               ( prevMark != MinName )  )
           {
             minZ = extZ ;     jMin = k ;
               for  ( j = iOpen  ;  j <= iClose  ;  j++ )
                    {
                      if  ( Z(j) < minZ )
                          { jMin = j ;   minZ = Z(j) ;  }
                    }

               for  ( j = jMin  ;  Z(j) == minZ  &&  j <= iEnd  ;  j++ ) ;
             jMin = MEAN_OF( jMin , (j-1) ) ;

               if  ( jMin != k )
                 {
                   j = jMin ;
                     while  ( ( Z(j)-minZ < eps ) && (j <= iEnd) )   j++ ;
                   iClose = j-1 ;

                   j = jMin ;
                     while  ( ( Z(j)-minZ < eps ) && (j >= iBeg) )   j-- ;
                   iOpen = j+1 ;
                 }

             pTmpSpecl->ibeg    = (_SHORT)iOpen   ;
             pTmpSpecl->iend    = (_SHORT)iClose  ;
             pTmpSpecl->ipoint0 = (_SHORT)jMin    ;
             pTmpSpecl->ipoint1 = UNDEF   ;
             pTmpSpecl->mark    = MinName ;
           }


    QUIT:  return( flagDirExtr ) ;
   }


 /**************************************************************************/


#if PG_DEBUG
  void  RedrawExtr( p_LowData low_data, p_SPECL pTmp , _UCHAR mark )
   {
     p_SHORT  x = low_data->x ;
     p_SHORT  y = low_data->y ;

      if  (mpr > 0)
        {
              _SHORT  color ;

              switch( mark )
                {
                  case  MINW   : color = COLORMIN  ;    break ;
                  case  MAXW   : color = COLORMAX  ;    break ;
                  case  _MINX  : color = COLORT    ;    break ;
                  case  _MAXX  : color = COLORMAXN ;    break ;
                  case  MINXY  : color = COLORMIN  ;    break ;
                  case  MAXXY  : color = COLORMAX  ;    break ;
                  case  MINYX  : color = COLORT    ;    break ;
                  case  MAXYX  : color = COLORMAXN ;    break ;
                }
           draw_arc( color, x,y, pTmp->ibeg, pTmp->iend );
        }
     return ;
    }
#endif

 /**************************************************************************/


  p_SPECL  LastElemAnyKindFor ( p_SPECL pSpecl , _UCHAR kind_of_mark )
   {
       DBG_CHK_err_msg( pSpecl == _NULL, "LastAnyK: BAD pSpecl");

       for ( ;
             pSpecl!=_NULL ;
             pSpecl=pSpecl->prev )
           {
               if  ( pSpecl->mark == BEG )
                   {
                     pSpecl = _NULL;
                       break;
                   }
               if  ( pSpecl->mark == kind_of_mark )
                     break;
           }

       return  ( pSpecl ) ;

   }


 /**************************************************************************/

  p_SPECL  FirstElemAnyKindFor ( p_SPECL pSpecl , _UCHAR kind_of_mark )
   {
     p_SPECL  pTmp , pFirst ;

       DBG_CHK_err_msg( pSpecl == _NULL, "1stAnyK: BAD pSpecl");

       pTmp = pSpecl ;     pFirst = _NULL ;
         while  ( pTmp->mark != BEG )
           {
               if  ( pTmp->mark == kind_of_mark )
                   { pFirst = pTmp ; }

             pTmp = pTmp->prev ;
           }

    return ( pFirst ) ;
   }

 /**************************************************************************/


  _SHORT  Mark( low_type _PTR  pLowData,
                _UCHAR mark  , _UCHAR code, _UCHAR  attr   , _UCHAR other,
                _SHORT begin , _SHORT end , _SHORT ipoint0, _SHORT ipoint1 )
    {
      _SHORT _PTR   pLspecl   = &(pLowData->len_specl) ;
      _SHORT _PTR   pLenAbs   = &(pLowData->lenabs)    ;
     p_SPECL        pSpecl    = pLowData->specl  ;
      _INT          iMarked   = *pLspecl ;
     p_SPECL        pMrkSpecl = pSpecl + iMarked ;
       SPECL        tmpSpecl  ;


      tmpSpecl.mark    = mark    ;
      tmpSpecl.code    = code    ;
      tmpSpecl.attr    = attr    ;
      tmpSpecl.other   = other   ;
      tmpSpecl.ibeg    = begin   ;
      tmpSpecl.iend    = end     ;
      tmpSpecl.ipoint0 = ipoint0 ;
      tmpSpecl.ipoint1 = ipoint1 ;

         if  ( NoteSpecl( pLowData , &tmpSpecl  ,
                          ( SPECL _PTR ) pSpecl ,
                          pLspecl  , SPECVAL    ) == _FALSE  )
               goto  RET_UNSUCC ;

       pMrkSpecl->prev          = pSpecl + pLowData->LastSpeclIndex  ;
       pMrkSpecl->next          = (p_SPECL) _NULL ;
       ( pSpecl+pLowData->LastSpeclIndex )->next = pMrkSpecl ;
       pLowData->LastSpeclIndex = (_SHORT)iMarked ;

       switch( mark )
         {
           case  DOT    :
           case  STROKE :
           case  SHELF  :

             if  ( (*pLenAbs) < ( pLowData->rmAbsnum - 1 ) )
                 {
                   *( pLowData->pAbsnum + *pLenAbs ) = (_SHORT)iMarked ;
                   (*pLenAbs)++ ;
                 }
             else
                 {
                   err_msg( "Absnum is full , nowhere to write..." ) ;
                     goto  RET_UNSUCC;
                 }

           default :  break ;
         }

       return  SUCCESS ;

     RET_UNSUCC:
       return  UNSUCCESS ;

    }

 /**************************************************************************/

  _SHORT  MarkSpecl( low_type _PTR pLowData, SPECL _PTR  p_tmpSpecl )
    {
      _SHORT _PTR  pLspecl   = &(pLowData->len_specl) ;
      _SHORT _PTR  pLenAbs   = &(pLowData->lenabs)    ;
      _SHORT       iMarked   = *pLspecl               ;
     p_SPECL       pSpecl    = pLowData->specl        ;
     p_SPECL       pMrkSpecl = pSpecl + iMarked       ;


         if  ( NoteSpecl( pLowData , p_tmpSpecl ,
                          ( SPECL _PTR ) pSpecl ,
                          pLspecl  , SPECVAL    ) == _FALSE  )
               goto  RET_UNSUCC    ;

       pMrkSpecl->prev                 = pSpecl + pLowData->LastSpeclIndex ;
       pMrkSpecl->next                 = (p_SPECL) _NULL   ;
       (pSpecl+pLowData->LastSpeclIndex)->next = pMrkSpecl ;
       pLowData->LastSpeclIndex        = (_SHORT)iMarked   ;

       switch( p_tmpSpecl->mark )
         {
           case  DOT    :
           case  STROKE :
           case  SHELF  :

             if  ( (*pLenAbs) < ( pLowData->rmAbsnum - 1 ) )
                 {
                   *( pLowData->pAbsnum + *pLenAbs ) = (_SHORT)iMarked ;
                   (*pLenAbs)++ ;
                 }
             else
                 {
                   err_msg( "Absnum is full , nowhere to write..." ) ;
                     goto  RET_UNSUCC;
                 }

           default :  break ;
         }

       return  SUCCESS ;

     RET_UNSUCC:
       return  UNSUCCESS ;
    }

 /**************************************************************************/


  _BOOL  NoteSpecl( low_type _PTR  pLowData  ,   SPECL _PTR  pTmpSpecl ,
                    SPECL    _PTR  pSpecl    ,  _SHORT _PTR  pLspecl   ,
                   _SHORT          limSpecl  )
  {
     p_SHORT        ind_Back  = pLowData->buffers[2].ptr            ;
     SPECL  _PTR    pNew      = ( SPECL _PTR ) (pSpecl + *pLspecl ) ;
    _UCHAR          mark      = pTmpSpecl->mark                     ;
    _INT            iPoint0   = pTmpSpecl->ipoint0                  ;
    _INT            iPoint1   = pTmpSpecl->ipoint1                  ;
    _BOOL           flagNote  = _TRUE ;

         if   ( *pLspecl < limSpecl-1 )
          {
            pNew->mark  = mark  ;
            pNew->code  = pTmpSpecl->code  ;
            pNew->attr  = pTmpSpecl->attr  ;
            pNew->other = pTmpSpecl->other ;

              if  ( ( mark == SHELF  )  ||
                    ( mark == DOT    )  ||
                    ( mark == STROKE )     )
                {
                      pNew->ibeg    = ind_Back[pTmpSpecl->ibeg] ;
                      pNew->iend    = ind_Back[pTmpSpecl->iend] ;

                        if  ( iPoint0 != UNDEF )
                              pNew->ipoint0 = ind_Back[iPoint0] ;
                        else
                              pNew->ipoint0 = (_SHORT)iPoint0  ;

                        if  ( iPoint1 != UNDEF )
                              pNew->ipoint1 = ind_Back[iPoint1] ;
                        else
                              pNew->ipoint1 = (_SHORT)iPoint1  ;
                }
              else
                {
                  pNew->ibeg    = pTmpSpecl->ibeg ;
                  pNew->iend    = pTmpSpecl->iend ;
                  pNew->ipoint0 = (_SHORT)iPoint0  ;
                  pNew->ipoint1 = (_SHORT)iPoint1  ;
                }

            (*pLspecl)++ ;
  #if PG_DEBUG
                  if  ( mpr > 0 )
                        PaintSpeclElement( pLowData , pTmpSpecl ,
                                           pSpecl   , pLspecl   ) ;
  #endif
          }
        else
          {
                flagNote = _FALSE  ;
                err_msg( " NoteSpecl: SPECL is full, nowhere to write...") ;
          }

   return( flagNote ) ;
   }

 /**************************************************************************/

 #if PG_DEBUG
  _VOID  PaintSpeclElement( low_type _PTR  pLowData,  SPECL _PTR  pNewSpecl,
                            SPECL    _PTR  specl   , _SHORT _PTR  pLspecl  )
          {
            _SHORT _PTR  x = pLowData->x              ;
            _SHORT _PTR  y = pLowData->y              ;
            _SHORT       begin   = pNewSpecl->ibeg    ;
            _SHORT       end     = pNewSpecl->iend    ;
            _SHORT       ipoint0 = pNewSpecl->ipoint0 ;
            _SHORT       ipoint1 = pNewSpecl->ipoint1 ;
            _UCHAR       mark    = pNewSpecl->mark    ;
            _SHORT       start , stop                 ;
            _SHORT       color                        ;

            if  ( mpr != 3 )
              {
               switch( mark )
                 {
                   case  MINW   : color = COLORMIN  ;    break ;
                   case  MAXW   : color = COLORMAX  ;    break ;
                   case  _MINX  : color = COLORT    ;    break ;
                   case  _MAXX  : color = COLORMAXN ;    break ;

                   case  SHELF  : color = COLORSH   ;
                     if  ( ( ipoint0 != UNDEF ) && ( ipoint1 != UNDEF ) )
                       draw_line( x[ipoint0] ,    y[ipoint0] ,
                                  x[ipoint1] ,    y[ipoint1] ,
                                  EGA_LIGHTBLUE , SOLID_LINE , 3 );
                         break  ;

                   case  STROKE : color = COLORT    ;
                     if  ( ( ipoint0 != UNDEF ) && ( ipoint1 != UNDEF ) )
                       draw_line( x[ipoint0],    y[ipoint0] ,
                                  x[ipoint1],    y[ipoint1] ,
                                  EGA_LIGHTBLUE, SOLID_LINE , 3 );
                         break  ;

                   case  CROSS  : color = COLORC   ;
                     if  (  specl[*pLspecl-1].other == CIRCLE_NEXT )
                         {
                            stop = end ;
                            start = specl[*pLspecl-2].ibeg    ;
                         }
                         break  ;

                   case  STICK  : color = COLORC   ;    break ;
                   case  HATCH  : color = COLORC   ;    break ;
                   case  ANGLE  : color = COLORAN  ;    break ;
                   default      : goto    QUIT     ;
                 }
              }
            else
              {
               switch( mark )
                 {
                   case  MINXY  : color = COLORMIN  ;    break ;
                   case  MAXXY  : color = COLORMAX  ;    break ;
                   case  MINYX  : color = COLORT    ;    break ;
                   case  MAXYX  : color = COLORMAXN ;    break ;
                   case  SHELF  : color = COLORSH   ;    break ;
                   case  STROKE : color = COLORT    ;    break ;
                   case  DOT    : color = COLORP    ;    break ;

                   case  CROSS  : color = COLOR     ;
                     if  ( specl[*pLspecl-1].other == CIRCLE_NEXT )
                         {
                           color = COLORC ;
                           stop  = end ;
                           start = specl[*pLspecl-2].ibeg      ;
                         }
                                                         break ;

                   case  STICK  : color = COLOR    ;     break ;
                   case  HATCH  : color = COLOR    ;     break ;

                   default :  goto  QUIT ;
                 }
              }
            if  ( ( specl[*pLspecl-1].other != CIRCLE_FIRST ) &&
                  ( specl[*pLspecl-1].other != CIRCLE_NEXT  )     )
                                      draw_arc( color ,x,y, begin,end ) ;

            if  ( specl[*pLspecl-1].other == CIRCLE_NEXT )
                {
                  draw_line( x[start], y[start], x[stop], y[stop],
                             COLORC,SOLID_LINE,NORM_WIDTH             ) ;
                  draw_line( x[start], y[start]+1, x[stop], y[stop]+1,
                             COLORAN,DOTTED_LINE,THICK_WIDTH          ) ;
                  draw_line( x[start], y[start]-1, x[stop], y[stop]-1,
                             COLORAN,DOTTED_LINE,THICK_WIDTH          ) ;
                }
    QUIT: return ;
          }
 #endif


 /**************************************************************************/
#endif  //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\circle.cpp ===
#ifndef LSTRIP


#include  "hwr_sys.h"
#include  "ams_mg.h"
#include  "lowlevel.h"
#include  "const.h"
#include  "lk_code.h"

#if PG_DEBUG
//#include  <stdio.h>
#include  "pg_debug.h"
#endif

#include  "def.h"


#define    TGVERT          8
#define BACK_CIRCLE 0
#define FORW_CIRCLE 1




#define  take_iext(p_cur)  ((p_cur)->ipoint0)

_SHORT look_like_circle(p_SPECL cur, p_SPECL prev,p_SPECL next,
      _SHORT _PTR y );
_SHORT  work_with_circle(low_type _PTR low_data, _SHORT yhigh,
       p_SPECL specl,p_SPECL cur,
       p_SPECL prev,p_SPECL next);
_SHORT  work_with_back_circle(low_type _PTR low_data,_SHORT yhigh,
                              p_SPECL specl, p_SPECL cur,
                              p_SPECL prev,p_SPECL next);
_SHORT  work_with_forw_circle(low_type _PTR low_data,_SHORT yhigh,
                               p_SPECL specl, p_SPECL cur,
                               p_SPECL prev,p_SPECL next);
_SHORT  make_circle(low_type _PTR low_data,
         p_SPECL specl, _SHORT imin,_SHORT jmin);
_SHORT  Orient00( p_SPECL  cur, p_SPECL prev,
                 _SHORT _PTR x , _SHORT _PTR y);
  _SHORT  Clash_my( _SHORT _PTR x , _SHORT _PTR y , _SHORT slope, _SHORT yhigh,
                    p_SPECL cur ,p_SPECL prev,p_SPECL next,
        _SHORT _PTR p_imin , _SHORT _PTR p_jmin,
                    _SHORT forw_circle);
_SHORT  Ruler0( _SHORT _PTR x , _SHORT _PTR y ,_SHORT slope, p_SPECL cur ,
           p_SPECL prev,p_SPECL next , _SHORT yhigh,
    _SHORT _PTR x_max , _SHORT _PTR y_max ,
                _SHORT _PTR p_h , _SHORT _PTR p_l ,
                _SHORT _PTR k_1, _SHORT _PTR k_2,
                 _SHORT dir_type);
_SHORT  circle_type( _SHORT _PTR x , _SHORT _PTR y , p_SPECL cur ,
                     p_SPECL prev,p_SPECL next,
                    _SHORT yhigh, _SHORT h, _SHORT l,
                    _SHORT _PTR SA , _SHORT _PTR SB,
                    _SHORT _PTR k_1, _SHORT _PTR k_2);
_SHORT is_isolate_circle(p_SPECL prev,p_SPECL next);
_SHORT is_forw_isolate_circle(p_SPECL prev,p_SPECL next,_SHORT _PTR x );
_SHORT is_e_circle(p_SPECL cur,p_SPECL prev,_SHORT _PTR x,_SHORT _PTR y,
                    _SHORT yhigh, _SHORT h, _SHORT l);
_SHORT is_g_circle(p_SPECL cur,p_SPECL prev,p_SPECL next,
          _SHORT _PTR x,_SHORT _PTR y,
       _SHORT h, _SHORT l);
_SHORT is_b_circle(p_SPECL prev,p_SPECL next,_SHORT _PTR x,_SHORT _PTR y,
                   _SHORT h);
_SHORT  is_d_circle( _SHORT _PTR x ,_SHORT _PTR y ,p_SPECL cur ,
               p_SPECL prev,p_SPECL next,
                     _SHORT _PTR rend ,_SHORT h, _SHORT l);
_SHORT is_min_right_side(_SHORT _PTR y ,p_SPECL cur ,
                          p_SPECL next,_SHORT h,_SHORT _PTR rend );
_SHORT is_min_in_left_side(_SHORT _PTR x ,_SHORT _PTR y ,p_SPECL cur ,
          p_SPECL prev,
                           _SHORT _PTR lbeg, _SHORT h, _SHORT l );
_SHORT end_min_has_right_point(_SHORT _PTR x ,_SHORT _PTR y ,
                                p_SPECL cur,p_SPECL prev, _SHORT _PTR lend);
_SHORT find_right_part_beg(_SHORT _PTR x ,_SHORT _PTR y ,
                            p_SPECL cur,p_SPECL prev,p_SPECL next,
                           _SHORT l);
_SHORT control_line_high(_SHORT _PTR y, p_SPECL cur,p_SPECL prev,p_SPECL next);
_SHORT vozvrat_move(_SHORT _PTR x,_SHORT _PTR y,p_SPECL cur,
         p_SPECL prev,p_SPECL next,
                    _SHORT yhigh, _SHORT h, _SHORT l);
_SHORT is_vert_min(_SHORT _PTR x, _SHORT _PTR y, p_SPECL cur);


_BOOL is_narrow_prev(_SHORT _PTR x, _SHORT _PTR y,
                      p_SPECL prev,p_SPECL cur);

_SHORT  Circle( low_type _PTR low_data){
     p_SPECL specl=low_data->specl;
     _SHORT _PTR y = low_data->y;
     _SHORT ymin  = low_data->box.top;
     _SHORT  iret;
     _SHORT lin_up;
      p_SPECL prev, next;
      p_SPECL cur;
     _SHORT yhigh;

    iret = SUCCESS ;
                        /* the height of superlinear  */
    if(ymin<LIN_UP-DLT)
       lin_up=ymin;
    else
       lin_up=LIN_UP;
    yhigh = STR_UP-(STR_UP-lin_up)/2;


   cur=(p_SPECL )specl[0].next;
   while(cur != _NULL)
   {

        if   (cur->mark == MAXW) {
          prev = cur->prev;
          if(prev->mark == ANGLE) prev = prev->prev;
          next = cur->next;
          if(next->mark == ANGLE) next = next->next;
          if(look_like_circle(cur,prev,next,y)){
       if((iret = work_with_circle(low_data,yhigh,specl,
                 cur,prev,next)) != SUCCESS)
        break;
          }
        }

        cur = cur->next;
   }

    return(iret);
}

_SHORT look_like_circle(p_SPECL cur,
      p_SPECL prev,p_SPECL next,
      _SHORT _PTR y ){

      if   (next->mark != MINW ) return(_FALSE) ;
      if   (prev->mark != MINW ) return(_FALSE) ;

      if (y[cur->ibeg] < y[prev->ibeg] || y[cur->ibeg] < y[next->ibeg])
    return(_FALSE);

       if(y[cur->ibeg] < STR_UP )          /* cur is too high*/
    return(_FALSE);
       if(y[cur->ibeg] > STR_DOWN )
    return(_TRUE);                 /* for this moment !!!*/
       if(y[cur->ibeg] - STR_UP < STR_DOWN - y[cur->ibeg])
    return(_FALSE);

      return(_TRUE);
}

_SHORT  work_with_circle(low_type _PTR low_data,_SHORT yhigh,
        p_SPECL specl,
       p_SPECL cur,p_SPECL prev,p_SPECL next){
     _SHORT _PTR x = low_data->x;
     _SHORT _PTR y = low_data->y;
_SHORT iret;



  if( Orient00( cur,prev, x, y ) )
          return(SUCCESS);


        if   (x[cur->iend] <= x[cur->ibeg] ){
         iret = work_with_forw_circle(low_data,yhigh,specl,cur,
              prev,next);
   }
   else{
         iret = work_with_back_circle(low_data,yhigh,specl,cur,
              prev,next);
   }
   return(iret);
 }

_SHORT  work_with_back_circle(low_type _PTR low_data,_SHORT yhigh,
                              p_SPECL specl, p_SPECL cur,p_SPECL prev,p_SPECL next){
     _SHORT _PTR x = low_data->x;
     _SHORT _PTR y = low_data->y;
        _SHORT imin,jmin, iret;


        if(!Clash_my( x, y, low_data->slope,yhigh,cur,prev,next, &imin, &jmin,BACK_CIRCLE))
               return(SUCCESS);

/*        if(!control_line_high(y,cur,prev,next,imin,jmin))
               return(SUCCESS);*/

        iret = make_circle(low_data,specl,imin,jmin);

        return(iret);

}


_SHORT  work_with_forw_circle(low_type _PTR low_data,_SHORT yhigh,
                              p_SPECL specl, p_SPECL cur,p_SPECL prev,p_SPECL next){
     _SHORT _PTR x = low_data->x;
     _SHORT _PTR y = low_data->y;
        _SHORT imin,jmin, iret;

      if(!is_forw_isolate_circle(prev,next,x))
               return(SUCCESS);

        if(!Clash_my( x, y, low_data->slope,yhigh,cur,prev,next, &imin, &jmin,FORW_CIRCLE ))
               return(SUCCESS);

/*        if(!control_line_high(y,cur,prev,next,imin,jmin))
               return(SUCCESS);*/

        iret = make_circle(low_data,specl,imin,jmin);

        return(iret);

}

/*  returns 1 if it does not suit
    else returns 0
*/
_SHORT  Orient00( p_SPECL cur, p_SPECL prev,
     _SHORT _PTR x , _SHORT _PTR y){

      _SHORT h,l;


       l = (_SHORT)HWRAbs(x[cur->iend] - x[cur->ibeg]) ;
       h = (_SHORT)HWRAbs(y[cur->iend] - y[prev->ibeg]) ;
       if(h > l * 13) return(1);   /* too narrow*/
/*       if(l > h * 3) return(1); */  /* too wide*/

       if   (l <= 6)   return(1);
       if(l > h * 2)   return(1);   /* too wide*/
            /* end control*/


       return(0);

}


  _SHORT  Clash_my( _SHORT _PTR x , _SHORT _PTR y ,  _SHORT slope, _SHORT yhigh,
                    p_SPECL cur ,p_SPECL prev,p_SPECL next,
                    _SHORT _PTR p_imin , _SHORT _PTR p_jmin,
                    _SHORT forw_circle)
    {
      _SHORT  i , j ,a,b;
      _SHORT  lbeg , lend ;
      _SHORT  rbeg , rend ;
      _SHORT  dx , dy ,dx1;
      _SHORT  rmin, lmin ;
      _LONG rmin_s , r_s ;
      _LONG ris_radius,ris_radius_min, d_radius;
      _SHORT lris_radius,rris_radius;
      _SHORT d_circle = _TRUE, d_rend, d_rmin, d_lmin;
      _SHORT dy_dist;
      _SHORT h,l;
      _SHORT k_1, k_2;
      _SHORT dx_slope = 0;
      _SHORT old_rbeg;

  d_rmin = d_lmin = d_rend = 0;
  if(!Ruler0(x,y,slope,cur,prev,next,yhigh,&a,&b,&h,&l,&k_1,&k_2,forw_circle))
         return(0);

      lend = 0;
  if(forw_circle){
     lbeg = prev->ibeg ;
     rend = next->iend;
     d_circle = _FALSE;
  }
  else{
     is_min_in_left_side(x,y,cur,prev,&lbeg,h,l);

     if(!is_d_circle(x,y,cur,prev,next,&rend,h,l)){
        d_circle = _FALSE;
     }
     else{
        d_rend = next->iend;
        a = l/3;
     }

     if(!d_circle && !is_min_right_side(y,cur,next,h,&rend)){
        rend = next->iend;
     }

    if(is_b_circle(prev,next,x,y,h)){
     lend = cur->ibeg;
     lbeg = (prev->iend+cur->ibeg)/2;
     a = l*2/5;

    }
  }

       if(!lend){
           if(forw_circle ||
              !end_min_has_right_point(x,y,cur,prev,&lend))
              lend = prev->iend ;
        }

        rbeg = find_right_part_beg(x,y,cur,prev,next,l);
  if(y[next->ibeg] < y[prev->ibeg] &&
          y[prev->ibeg] - y[next->ibeg] > h/4){
          old_rbeg = (cur->iend + next->ibeg ) /2;
  }
  else{
          old_rbeg = (cur->iend + 2*next->ibeg ) /3;
  }

  lmin = lend;    rmin = rbeg;
  rmin_s = ALEF;
  lris_radius = lend;
  rris_radius = rend;
  d_radius = ris_radius = ris_radius_min = ALEF;

        for ( i = lbeg ; i <= lend  ; i++ )

        {
                       for  ( j = rbeg ; j <= rend ; j++ )
             {
                    dx1 = x[j]-x[i] ;
                    dy = y[j]-y[i];
                    if(slope > 0) dx_slope = SlopeShiftDx( dy, slope );
                    else dx_slope = 0;
                    dx = (_SHORT)HWRAbs(dx1 + dx_slope);
                    dy = (_SHORT)HWRAbs(dy);

#if(0)
                                                /* for picture only*/
                    if(dx < dx_ris){ dx_ris = dx;
                                     lris = i;
                                     rris = j;
                                    }
#endif

                    ris_radius = (_LONG)dx1*dx1 +
                                 (_LONG)dy*dy;

         if(d_circle && j<d_rend){
      if(ris_radius < d_radius){
               d_radius = ris_radius;
               d_rmin = j;
               d_lmin = i;
                        }
                     }
                     if(ris_radius < ris_radius_min){
                                    ris_radius_min = ris_radius;
                                    lris_radius = i;
                                    rris_radius = j;
                   }

                    if(dx < a){

                dy_dist = b+k_1*(a-dx)/k_2;
                        if(dy_dist >= h*9/10) dy_dist = h*9/10;
                        if(dy < dy_dist){
                           r_s = (_LONG)dx1*dx1 + (_LONG)dy*dy ;
                           if   ( r_s < rmin_s )
                           {      lmin=i;
                                  rmin=j;
                                  rmin_s = r_s ;
                           }
                        }
                     }
              }

         }

         dx = x[lmin]-x[rmin];
         dy = y[lmin]-y[rmin];
         if(slope > 0) dx_slope = SlopeShiftDx( dy, slope );
         else          dx_slope = 0;
         dx = (_SHORT)HWRAbs(dx + dx_slope);
         dy = (_SHORT)HWRAbs(dy);

#if PG_DEBUG
          if  (mpr > 0){ /*draw_line( x[lris], y[lris],
                                   x[rris], y[rris],
                                   COLORMAX, SOLID_LINE, NORM_WIDTH) ;*/
                         draw_line( x[lris_radius], y[lris_radius],
                                   x[rris_radius], y[rris_radius],
                                   COLORMAX, SOLID_LINE, NORM_WIDTH) ;
          }
#endif


    *p_imin = lris_radius ;     *p_jmin = rris_radius ;
     if(d_circle){
        if(d_lmin)  *p_imin = d_lmin ;
        if(d_rmin)  *p_jmin = d_rmin ;
     }

/*         if(d_circle && dx <= 1 && dy <= 1) return(0);*/

         if(dx < a && dy < b + k_1*(a-dx)/k_2){
#if PG_DEBUG
          if(mpr==1){
            printw("lmin=%d\n",lmin);
            if(rmin < old_rbeg){
              dy = y[cur->iend] - y[next->ibeg];
             rbeg = cur->iend + (next->ibeg-cur->iend) /4;
              printw("old rbeg=%d,new=%d,rmin=%d;dy=%d\n",old_rbeg,rbeg,rmin,
                      (y[rmin] - y[next->ibeg])*10/dy);
            }
          }
#endif
            return(1);

        }
         return(0);
}



_SHORT  Ruler0( _SHORT _PTR x , _SHORT _PTR y ,_SHORT slope, p_SPECL cur ,
        p_SPECL prev,p_SPECL next,_SHORT yhigh,
             _SHORT _PTR x_max , _SHORT _PTR y_max ,
             _SHORT _PTR p_h , _SHORT _PTR p_l ,
             _SHORT _PTR k_1, _SHORT _PTR k_2,
             _SHORT dir_type)
{
      _SHORT  h ;
      _SHORT  l ;
      _SHORT  a , b ;
      _SHORT SA;
      _SHORT SB;

      _SHORT i_pnt_4,i_pnt_2;
       l = (_SHORT)HWRAbs(x[cur->iend] - x[cur->ibeg]) ;
       i_pnt_4 = cur->ibeg - (cur->ibeg - prev->iend)/4;
       i_pnt_2 = cur->ibeg - (cur->ibeg - prev->iend)/2;

       if(x[i_pnt_2] < x[prev->ibeg] &&
          (x[i_pnt_4] < x[cur->ibeg] && x[cur->iend] > x[cur->ibeg] ||
          x[i_pnt_4] > x[cur->ibeg] && x[cur->iend] < x[cur->ibeg]))
       l = (_SHORT)HWRAbs(x[cur->iend] - x[i_pnt_4]) ;
       h = (_SHORT)HWRAbs(y[cur->iend] - y[prev->ibeg]) ;

       *k_1 = 7; *k_2 =4;

       if(dir_type == BACK_CIRCLE){
        if(!circle_type(x ,y , cur ,prev,next,yhigh,h,l,  &SA, &SB, k_1,k_2))
           return(0);
       }
       else{
          SA = 40;
          SB = 20;
          *k_2 = 7;
       }
       if( SA > 35)
           a = l*SA / 100 + h /10;
       else if( SA > 30)
           a = l*SA / 100 + h /12;
       else
           a = l*SA / 100;

       b = h*SB / 100 ;


       *x_max = a; *y_max = b;
       *p_h = h; *p_l = l;

       return(1);
}

/* If right duga ends with min*/
_SHORT is_min_right_side(  _SHORT _PTR y ,p_SPECL cur ,
                          p_SPECL next,_SHORT h, _SHORT _PTR rend ){
         p_SPECL right;

   right = next->next;

   if(right->mark == ANGLE)
      right = right->next;

   if(right->mark != MAXW )
              return(0);

   if(y[cur->ibeg] < y[right->ibeg]) /* right min is lower then
                                              cur*/
              return(0);

   if(y[cur->ibeg] - y[right->ibeg] <h/3 ) /* right min is too low*/
              return(0);


/*         if(y[left->ibeg]<( y[cur->ibeg]+y[cur->iend])/2 &&
     (  x[right->ibeg] > x[(cur->left)->ibeg] <
        HWRAbs(x[cur->ibeg] - x[cur->iend])/3 ||
        y[left->ibeg]- y[prev->ibeg] <
        (y[cur->iend] - y[prev->ibeg])/3 ))

         {*/

        if(y[cur->iend] - y[right->iend] < h/2)
         *rend = (next->iend + right->iend)/2;
           else
         *rend = right->iend;
              return(1);
/*         }

   return(0);*/
}





/* If left duga ends with min*/
_SHORT is_min_in_left_side(_SHORT _PTR x ,_SHORT _PTR y ,p_SPECL cur ,
                            p_SPECL prev,
                           _SHORT _PTR lbeg, _SHORT h, _SHORT l ){

         p_SPECL left;
         _SHORT iret;

         _SHORT i_pnt_3,i_pnt_6;
         _SHORT i;

   *lbeg = prev->ibeg ;
   left = prev->prev;
   if(left->mark == ANGLE)
      left = left->prev;

   if(left->mark != MAXW )
              return(0);



         BEGIN_BLOCK
           iret = 0;
     if( x[left->ibeg] >= x[cur->ibeg] &&
         (x[left->ibeg] - x[prev->ibeg])*2 < l*3){
                  iret = 1;
                  BLOCK_EXIT;
           }

     if( x[left->ibeg] < x[cur->ibeg] &&
         x[left->ibeg] > x[prev->ibeg] ){
                  iret = 1;
                  BLOCK_EXIT;
           }


     if( x[left->ibeg] < x[prev->ibeg] &&
         (x[prev->ibeg] - x[left->ibeg] < l/3 ||
    y[left->ibeg]- y[prev->ibeg] < h/3)){
                  iret = 1;
                  BLOCK_EXIT;
           }
         END_BLOCK;

      if(iret &&
           y[left->ibeg] < y[cur->ibeg]){ /* too low*/
      if(y[left->ibeg] - y[prev->ibeg] > h*2/5)
      *lbeg = (left->ibeg+prev->ibeg)/2;
      else if(x[left->ibeg] < x[prev->ibeg])
      *lbeg = (left->ibeg+prev->ibeg)/2;
               else
      *lbeg = left->ibeg;
              return(1);
         }

         else if(x[prev->ibeg-1] >= x[prev->ibeg]){

          iret = _TRUE;
          i_pnt_6 = prev->ibeg - (prev->ibeg - left->iend)/6;
          i_pnt_3 = prev->ibeg - (prev->ibeg - left->iend)/3;

          if(x[i_pnt_3] >= x[prev->ibeg])
            *lbeg = i_pnt_3;
          else if(x[i_pnt_6] >= x[prev->ibeg])
            *lbeg = i_pnt_6;

          else{
                for(i=prev->ibeg-1;i>i_pnt_6;i--){
                    if(x[i] < x[prev->ibeg])
                       break;

                    *lbeg = i;
                }



          }
#if PG_DEBUG
          if(mpr==1)
              printw("old lbeg=%d,new=%d",prev->ibeg,*lbeg);
#endif
        }
        else
             iret = _FALSE;

   return(iret);
}



_SHORT find_right_part_beg(_SHORT _PTR x ,_SHORT _PTR y ,
                            p_SPECL cur,p_SPECL prev,p_SPECL next,
                           _SHORT l){

      _SHORT i_pnt_4;
      _SHORT dy,dy_4;
      _SHORT i;

       dy = y[cur->iend] - y[next->ibeg];

       if(x[next->iend] - x[prev->ibeg] > l){
          i_pnt_4 = next->ibeg - (next->ibeg-cur->iend) /4;
          for(i=i_pnt_4;i>cur->iend;i--){

             dy_4 = y[i] - y[next->ibeg];

             if(dy_4*4 > dy)
                return(i);
          }
       }

       i_pnt_4 = cur->iend + (next->ibeg-cur->iend) /4;


       dy_4 =  y[i_pnt_4] - y[next->iend];

       if(dy_4*5 <= 3*dy)
          return(i_pnt_4);

       for(i=i_pnt_4;i<next->ibeg;i++){

           dy_4 = y[i] - y[next->iend];

           if(dy_4*5 <= 3*dy)
             return(i);

       }
           return(i);
 }
/* If left duga has more right point then min_end*/
_SHORT end_min_has_right_point(_SHORT _PTR x ,_SHORT _PTR y ,
                                p_SPECL cur,p_SPECL prev, _SHORT _PTR lend){

      _SHORT i_pnt_3,i_pnt_6;
      _SHORT i;

       if(x[prev->iend+1] < x[prev->iend])
          return(_FALSE);


       i_pnt_6 = prev->iend + (cur->ibeg - prev->iend)/6;
       i_pnt_3 = prev->iend + (cur->ibeg - prev->iend)/3;

       if(x[i_pnt_3] >= x[prev->ibeg])
            *lend = i_pnt_3;
       else if(x[i_pnt_6] >= x[prev->ibeg])
            *lend = i_pnt_6;

       else{
          for(i=prev->iend+1;i<i_pnt_6;i++){
              if(x[i] < x[prev->iend])
                 break;

              *lend = i;
          }

       }

   return(_TRUE);
}

_SHORT is_forw_isolate_circle(p_SPECL prev,p_SPECL next,
                              _SHORT _PTR x ){
     p_SPECL end, begin;

     begin = prev->prev;
     if(begin->mark != BEG && begin->mark != 0){
  begin = begin->prev;
  if(begin->mark != BEG && begin->mark != 0)
           return _FALSE;
     }

     end = next->next;
     if(end->mark != END && end != _NULL){
  end = end->next;
  if(end->mark != END && end != _NULL)
     return _FALSE;
     }



/*     if( prev->prev->mark != BEG && ((prev->prev)->prev)->mark != BEG) return(0);
      if( next->next->mark != END && next->next->next->mark != END ) return(0);
*/
    if(x[prev->ibeg] < x[next->iend]) return(0); /* cross may exist*/

        return(1);
}

_SHORT control_line_high(_SHORT _PTR y, p_SPECL cur,p_SPECL prev,p_SPECL next){
       _SHORT y00,y1,y2;

       y00 = (y[cur->ibeg] + y[cur->iend])/2;

       y1 = (y[prev->ibeg] + y[prev->iend])/2;
       y2 = (y[next->ibeg] + y[next->iend])/2;

       y1 = y00 - y1;
       y2 = y00 - y2;

       if(y1<=0 || y2 <=0) return (0);

/*       y0 = (y2>y1) ? y2 : y1;   */ /* max*/
/*       y00 = (y2>y1) ? y1 : y2; */  /*min */

       if(y1*2 < y2 *5 )
         return(1);
       else
          return(0);
}

/* For d-circles for backword circle
*/
_SHORT  is_d_circle( _SHORT _PTR x ,_SHORT _PTR y ,p_SPECL cur ,
          p_SPECL prev,p_SPECL next,
              _SHORT _PTR rend ,_SHORT h, _SHORT l){

         p_SPECL right;
   _SHORT iend,ibeg,i,x_right,iret;

      right = next->next;
   if(right->mark == ANGLE) right = right->next;

   if(right->mark != MAXW)
          return(0);

   if(x[next->ibeg] < x[next->iend])
          return(0);
         if(is_vert_min(x,y,prev))
                      return(0);
#if(0)
   if((x[next->ibeg] - x[next->iend]) * 3 >
        (x[cur->iend] - x[next->ibeg]) *2)  /* too wide*/
          return(0);
#endif

      if(y[prev->ibeg]<= y[next->ibeg] /* right max is too low*/
         || y[prev->ibeg] -y[next->ibeg] <= h/8)
        return(0);


      if(x[prev->ibeg] < x[prev->iend]) /* wrong left max direction*/
                return(0);

                                                /* too far from cur*/
       if(HWRAbs(y[right->ibeg] -y[cur->ibeg])*2 > h)
                return(0);

      *rend = right->ibeg;

      iend = right->ibeg ;
     ibeg = next->iend ;

      x_right = x[next->ibeg];
/*            if(next->next->mark == ANGLE && x_right > x[next->next->iend])
    x_right = x[next->next->iend];*/

    iret = 0;
     for(i=ibeg;i<iend;i++){
         if (x[i] < x_right) iret = 1;
    if( x[cur->ibeg] - x[i] > l/4 ) return(0);
     }

   return(iret);
}


_SHORT  make_circle(low_type _PTR low_data,
                     p_SPECL specl, _SHORT imin,_SHORT jmin)
{
#if  PG_DEBUG
     _SHORT _PTR x = low_data->x;
     _SHORT _PTR y = low_data->y;
#endif
        _SHORT ii;

          UNUSED(specl);

          if(imin < jmin){ ii= imin;
                           imin = jmin;
                           jmin = ii;
                          }
             if   ( Mark( low_data, CROSS, 0, 0,CIRCLE_FIRST,
                        imin, imin, imin, UNDEF ) == UNSUCCESS )
                        return(UNSUCCESS);

             if   ( Mark( low_data, CROSS, 0, 0,CIRCLE_NEXT,
                              jmin, jmin, jmin, UNDEF ) == UNSUCCESS )
                        return(UNSUCCESS);
#if PG_DEBUG
          if  (mpr > 0) draw_line( x[jmin], y[jmin],
                                   x[imin], y[imin],
                                   COLORC, SOLID_LINE, NORM_WIDTH) ;
#endif


               return(SUCCESS);

}



_SHORT  circle_type( _SHORT _PTR x , _SHORT _PTR y , p_SPECL cur ,
                    p_SPECL prev,p_SPECL next,
                    _SHORT yhigh, _SHORT h, _SHORT l,
        _SHORT _PTR SA , _SHORT _PTR SB,
                    _SHORT _PTR k_1, _SHORT _PTR k_2){


             _SHORT iret, line_high;

       *SA = 40;
       *SB = 40;

       if(h > l * 5){   /* too narrow*/
          if(!control_line_high(y,cur,prev,next))
             return(0);

       if(is_isolate_circle(prev,next) &&
          x[prev->ibeg] > x[prev->iend]&&    /* left element to right*/
          x[next->ibeg] > x[next->iend]){      /* and right element to left*/ /* !!!*/
          *SA = 30;
          *SB = 20;
          *k_1 = 1; *k_2 = 2;
       }
       else{
          *SA = 20;
          *SB = 20;
          *k_1 = 1; *k_2 = 2;
       }
          return(1);
       }

       if(is_e_circle(cur,prev,x,y,yhigh,h,l) ){   /* look like e or l or b - GAMMA presence*/
#if PG_DEBUG
          if(mpr==1){
            printw("e_circle:=%d-%d-%d\n",prev->ibeg,cur->ibeg,next->ibeg);
          }
#endif

          if(!control_line_high(y,cur,prev,next))
             return(0);

          *SA = 20;
          *SB = 20;
          *k_1 = 1; *k_2 = 2;
          return(1);
       }
     if(is_g_circle(cur,prev,next,x,y,h,l) ){   /* look like G */

          *SA = 20;
    *SB = 20;
          *k_1 = 1; *k_2 = 2;
          return(1);
       }

                     /* change SA - max for dx*/
       if(is_isolate_circle(prev,next)){
    if( x[prev->ibeg] > x[prev->iend]&&    /* left element to right*/
        x[next->ibeg] > x[next->iend]      /* and right element to left*/ /* !!!*/
             )
                    *SA  = 60;
#if(0)
    else if( x[prev->ibeg] > x[prev->iend] ||    /* left element to right*/
       x[next->ibeg] < x[next->iend]      /*or right element to left*/
                 )
                     *SA  = 60;
#endif
          else;
       }

         /* change SB - max for dy*/
      line_high = control_line_high(y,cur,prev,next);
      iret =  vozvrat_move(x,y,cur,prev,next,yhigh,h,l);
      *SA = 35;
      if(iret==1){

                *SB = 70;
                *SA = 20; /* 50*/
      }
      else if(iret==2){      /* can be ce or something like that*/

                *SB = 40;
                *SA = 20; /*40*/
      }
      else if(iret==3){      /* can be Ce or something like that*/

                *SB = 40;
                *SA = 20;
      }
      else if(iret==4){      /* no tail*/
            iret = line_high;
                *SA = 40;
      }
      else if(iret==44){      /* no tail, but narrow left*/
            iret = line_high;
                *SA = 30;
      }
      else if(iret==13){       /* look like co*/

                *SA = 10;
                *SB = 20;
      }
      else
        iret = line_high;

      return(iret);
}

_SHORT is_isolate_circle(p_SPECL prev,p_SPECL next){

   p_SPECL beg, end;

   beg = prev->prev;
   if(beg->mark == BEG);
   else if(beg->mark == ANGLE && (beg->prev)->mark == BEG);
   else return(_FALSE);

   end = next->next;
   if(end->mark == END);
   else if(end->mark == ANGLE && (end->next)->mark == END);
   else return (_FALSE);

/*   if(prev->prev->mark == BEG || ( prev->prev->mark == ANGLE &&
      prev->prev->prev->mark == BEG))
            left_isolate = _TRUE;
   if(next->next->mark == END || ( next->next->mark == ANGLE &&
  next->next->next->mark == END))
            right_isolate = _TRUE;

   return(left_isolate & right_isolate);
*/

    return(_TRUE);
}


/* Look like "b"*/

_SHORT is_b_circle(p_SPECL prev,p_SPECL next,
                  _SHORT _PTR x,_SHORT _PTR y,_SHORT h ){
      p_SPECL tail;

      tail = next->next;
      if (tail->mark == ANGLE) tail = tail->next;

      if(tail->mark  != END &&
   (tail->mark  != MAXW || (tail->next)->mark != END))
        return(_FALSE);

      if(x[next->ibeg] <= x[next->iend]) return(_FALSE);

      if(y[next->ibeg] <= y[prev->ibeg]) return(_FALSE);
      if(y[next->ibeg] - y[prev->ibeg] < h/3) return(_FALSE);

      if(tail->mark==END) return(1);

      if(x[tail->iend]>x[next->iend]) return(_FALSE);
      return(_TRUE);
}
/* Look like "G"*/

_SHORT is_g_circle(p_SPECL cur,p_SPECL prev,p_SPECL next,
                    _SHORT _PTR x,_SHORT _PTR y,
                   _SHORT h, _SHORT l){
      p_SPECL tail;
   _SHORT dx,dy,y_h,y_l,i;
                     /* we'd include check
                      on stroka */

    if(is_vert_min(x,y,prev)||
     x[prev->ibeg] < x[prev->iend])   /* left min don't suit*/
     return(_FALSE);

      tail = next->next;
    y_h = y[cur->ibeg] - h*2/3;
      y_l = y[cur->ibeg] - h/4;
             /* no mov after circle, but it can be G*/
    if(tail->mark  == END){
    if(is_vert_min(x,y,next))    /* right min don't suit*/
         return(_FALSE);
     if(x[next->iend]<x[next->ibeg]) /* it is left-oriented*/
      return(_FALSE);
                     /* analize this stroke*/
     for(i = next->iend; i> cur->iend; i--){
       if(x[i] < x[i-1]) break;
                    /* we'd also analize change on Y*/
     }
     if(i == cur->iend)            /* no change direction in x*/
      return(_FALSE);

     if(x[i] - x[prev->ibeg] >l/6)  /* right is too far*/
      return(_FALSE);

     if(y[i] < y_h || y[i] > y_l)   /* left part is too high
                       or too low*/
      return(_FALSE);

     dx = x[next->iend] - x[i];     /* orientation of stroke*/
     dy = (_SHORT)HWRAbs(y[next->iend] - y[i]);
     if(dy > dx)
       return(_FALSE);

     return(_TRUE);
    }
    else{                           /* we have tail elem*/
      if (tail->mark == ANGLE) tail = tail->next;
      if(tail->mark  != MAXW) return(_FALSE);
/*      if((tail->next)->mark == END) return(_FALSE);*/

      if(x[next->ibeg] < x[next->iend]) return(_FALSE); /* not G at all*/
      if(y[next->iend] < y_h || y[next->iend] > y_l)   /* left part is too high
                                                        or too low*/
           return(_FALSE);

      if(y[tail->ibeg] >= y_l+h/8)     /* tail is too low*/
           return(_FALSE);

      dx = -x[next->iend] + x[next->ibeg];
      if(dx *3 < l) return(_FALSE);            /* right min is too narrow*/

#if(0)
      i_tail = tail->ibeg;
      i_next = next->iend;
      i = i_next+(i_tail - i_next)/2;
      j = i_tail;
      dx = x[j] - x[i];
      dy = y[j] - y[i];
      if(dx < dy) return(_FALSE);            /* vertical move*/
#endif

      return(_TRUE);
    }
}

/* Have vozvrat movement at the end of a or g or q*/

_SHORT vozvrat_move(_SHORT _PTR x,_SHORT _PTR y,p_SPECL cur,
                    p_SPECL prev,p_SPECL next,
                    _SHORT yhigh,
                    _SHORT h, _SHORT l){
      p_SPECL tail,end;
      _SHORT dx;

      tail = next->next;
      if (tail->mark == ANGLE) tail = tail->next;
      if(tail->mark == END || tail->ibeg-1 <= next->iend ){
         if((prev->prev)->mark != BEG &&
             is_narrow_prev( x, y,prev,cur)){

             return(44);   /* left min is too narrow - for "w"*/
         }
         else
          return(4); /* no mov after circle*/
      }

      end = tail->next;
      if (end->mark == ANGLE) end = end->next;


                         /* if it is too high - no vozvrat -Ci etc*/
      if(y[take_iext(prev)]<=yhigh || y[take_iext(prev)] - yhigh < h/6 )
    return (3);

      if( y[tail->ibeg] < y[next->ibeg])     /* tail is higher */
     return(_FALSE);

      if(y[cur->ibeg] - y[tail->ibeg] > h/2) /* tail is very high*/
     return(4);

      if( y[prev->ibeg] - y[next->ibeg] > h/6 ) /* right part is too high*/
     return(_FALSE);

      if(end->mark == MINW &&
    x[tail->iend] > x[tail->ibeg] &&
    x[end->ibeg] > x[end->iend] &&
     x[end->iend] <= x[tail->iend] &&
     HWRAbs(y[tail->iend] - y[prev->iend]) < h/4)


/*           x[tail->ibeg] - x[cur->iend] <
     x[end->iend] -  x[next->iend] )*/

      return(13);


      if(y[cur->ibeg] - y[tail->ibeg] > h/4) /* tail is upper then cur*/
     return(_FALSE);                   /* - may be G*/

      if(x[next->iend] < x[cur->ibeg]) /* next is more left then cur*/
     return(_FALSE);

      if(x[next->iend] - x[cur->ibeg] < x[next->iend] - x[cur->iend])
        /* next is more left then we need*/
     return(_FALSE);



          /* right min is too wide and too right*/
   dx = (_SHORT)HWRAbs(x[next->iend] - x[next->ibeg]);
     if(dx *5 >= l*2 ){
        if(!(x[next->iend] > x[next->ibeg] &&
             x[next->ibeg] > x[next->ibeg+1]))
        return(2);
     }
      else{
         if(is_narrow_prev( x, y,prev,cur) &&
            end->mark != END){

#if PG_DEBUG
          if(mpr==1){
             draw_line( x[prev->iend], y[prev->iend],
                        x[prev->ibeg], y[prev->ibeg],
                        COLORMAX, SOLID_LINE, NORM_WIDTH) ;
             printw("NARROW PREV=%d\n",prev->ibeg);
          }
#endif

             return(2);   /* left min is too narrow - for "w"*/
         }
       }


        if(y[next->ibeg] - y[prev->ibeg] > h/3 + 5) /* right is low */
    return(1);
        else{
#if PG_DEBUG
          if(mpr==1)
          printw("YES!!!");
#endif
               return(_FALSE);
         }

}

/* look like e or l or b - GAMMA presence
*/
_SHORT is_e_circle(p_SPECL cur,p_SPECL prev,
                   _SHORT _PTR x,_SHORT _PTR y,
                   _SHORT yhigh, _SHORT h, _SHORT l){

          p_SPECL left;
         _SHORT i,j, ibeg_left,iend_left,ibeg_right,iend_right,
    dx,dx_min,dy, i0, j0;

                                  /*    Only for backword circles*/
   if(x[cur->ibeg] > x[cur->iend]) return(0);


   left = prev->prev;             /* it is left part of e-gamma*/
   if(left->mark == ANGLE) left = left->prev;

   if(left->mark != MAXW )
        return(0);

   if(x[left->ibeg]>x[cur->iend])        /* too right*/
      return(0);


                                  /*    Wrong direction for prev and left*/
   if(x[prev->ibeg] < x[prev->iend]) return(0);
   if(x[left->ibeg] > x[prev->ibeg]) return(0);


   ibeg_left = prev->iend;     /* left part of gamma  */
   iend_left = cur->ibeg;

                                    /* right part of gamma  */
   if((left->prev)->mark != BEG &&
      x[(left->prev)->iend] < x[left->ibeg])
      ibeg_right = (left->ibeg+(left->prev)->iend)/2;
         else
      ibeg_right = left->ibeg;

   iend_right = prev->ibeg;


   i = i0 = iend_left;
   j = j0 = ibeg_right;
   dx_min = l;
   while(i> ibeg_left && j < iend_right){
       while (y[i] > y[j] && i > ibeg_left) i--;

         dx =  x[j] - x[i];
         if(dx >= 0 && dx < dx_min){
         dx_min = dx;
         i0 = i;
         j0 = j;
         }
         j++;
      }

#if(0)
         for(j=ibeg_right; j<iend_right; j++){
            for(i=ibeg_left; i<iend_left; i++){
                 dx = ( x[j] - x[i]);
                 if(dx < dx_min){
                                   dx_min = dx;
                                   i0 = i;
                                   j0 = j;
                 }

            }
         }
#endif

                        /* right and left part of gamma not close*/
         if( dx_min * 4 > l)
             return(0);

                       /* gamma is too narrow*/
        dx = x[(j0 +iend_right)/2] - x[(i0 +ibeg_left)/2];
        if(dx<0 || dx*5<l ||
          (y[take_iext(prev)] - yhigh > h/6 && dx*4 < l))
                 return (0);


   dy = y[cur->ibeg] - y[i0] + 5;   /* cross is too low*/
         if( dy < 0 ) return(0);
         else return(1);
}





_SHORT is_vert_min(_SHORT _PTR x, _SHORT _PTR y, p_SPECL cur){
       _SHORT i2,i4,i3_4;
       _SHORT y0, dx, dy;

              if(cur->iend - cur->ibeg < 5) return(_TRUE);
              i2 =   (cur->ibeg+cur->iend)/2;
              i4 =   (i2+cur->iend)/2;
              i3_4 = (cur->ibeg+i2)/2;

              if(x[cur->ibeg] > x[cur->iend]) /* left move*/
                 y0 = y[cur->ibeg];
              else
                 y0 = y[cur->iend];

              if(y[i2] < y0 || y[i4] < y0 || y[i3_4] < y0)
                         return(_FALSE);

              dx = (_SHORT)HWRAbs(x[cur->ibeg] - x[cur->iend]);
              dy = (_SHORT)HWRAbs(y[cur->ibeg] - y[cur->iend]);

              if(dx > dy ) return(_FALSE);
              else return(_TRUE);
}

_BOOL is_narrow_prev(_SHORT _PTR x, _SHORT _PTR y,
                      p_SPECL prev,p_SPECL cur){

       _SHORT i,i_found;
       _SHORT dx0,dy0,dx,dy;

       i_found = prev->ibeg;
       for(i=prev->iend-1;i>prev->ibeg;i--){

           if(x[i]<x[i+1]){
              i_found = i-1;
              break;
           }

       }

       dx0 = x[i_found]    - x[prev->iend];
       dy0 = y[prev->iend] - y[i_found];

       dx  = x[prev->iend] - x[cur->ibeg];
       dy  = y[cur->iend]  - y[prev->iend] ;


       if(dx0 < 1 || dx0 < dx/10)
          return(_TRUE);

       if(!dx)
          return(_FALSE);


       if((_LONG)(dy0*10)/dx0 < (_LONG)(dy*10)/dx)
          return(_FALSE);

       else
          return(_TRUE);

}

#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\commondict.h ===
#ifndef __COMMONDICT__

#define __COMMONDICT__

#include <common.h>
#include "langmod.h"

#include "ams_mg.h"
#include "xrwdict.h"

#ifdef __cplusplus
extern "C"
{
int		InfernoGetNextSyms	(p_fw_buf_type pCurrent, p_fw_buf_type pChildren, _UCHAR chSource, p_VOID pVoc, p_rc_type prc);
BOOL	InfernoCheckWord	(unsigned char *pWord, unsigned char *pStatus, unsigned char *pAttr, p_VOID pVoc);
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\countxr.cpp ===
/* ************************************************************************* */
/*        Correlation matrix internal loops                                  */
/* ************************************************************************* */
/* * Created 12/4/1995  AVP  Last modification date 5/03/1996               * */
/* ************************************************************************* */

#include "bastypes.h"
#include "xrword.h"

#if ASM_MCORR
/* ************************************************************************* */
/*       Count correlation of one XR (may be assembler!)                     */
/* ************************************************************************* */
_INT CountXrAsm(p_xrcm_type xrcm)
{
  _SHORT        i;
  _SHORT        ppic;
  _SHORT        pp;
  _SHORT        vm;//, vpp, vpi;
  _SHORT _PTR   en;
  _SHORT _PTR   lp;
  _SHORT _PTR   lc;
  p_xrp_type    xrp;

  _UCHAR        cx, scr;
  _SHORT        vc;
  p_xrinp_type  pxrinp;


  i      = (_SHORT)xrcm->inp_start;      /* 0x00 0 */
  lp     = *(xrcm->inp_line) + i;  /* 0x08 8 */
  pxrinp = *(xrcm->xrinp) + i;  /* 0x14 20  */
  lc     = *(xrcm->out_line);    /* 0x0C 12  */
  en     = lc + xrcm->inp_end;   /* 0x04 4 */
  lc    += i;

  xrp = xrcm->xrp;        /* 0x10 16  */
  pp  = xrp->penl;

  ppic = vm = 0;
  while(lc < en)
  {
    vc = (_SHORT)(ppic - XRMC_BALLANCE_COEFF);
    ppic = *lp++;       /* lp += 0x02 */

    //vpp = ppic -  pp;
    //vpi = vm - pxrinp->p;   /* 0x02 2 */
    vm = (_SHORT)(ppic - pp > vm - pxrinp->penalty ? ppic - pp : vm - pxrinp->penalty);

    if( (pxrinp->attrib & TAIL_FLAG) == 0  &&
      (xrp->attr & TAIL_FLAG) != 0
      )
      goto mix;

    cx  = xrp->xtc[pxrinp->type >> 1];          /* 0x04 4 */
    cx  = (pxrinp->type & 1) ? (_UCHAR)(cx & 0x0F) : (_UCHAR)(cx >> 4);
    if (cx == 0) goto mix;

    scr = xrp->xhc[pxrinp->height >> 1];        /* 0x24 36  */
    scr = (pxrinp->height & 1) ? (_UCHAR)(scr & 0x0F) : (_UCHAR)(scr >> 4);
//    if (scr == 0) goto mix;
    vc += cx;
    vc += scr;

    scr = xrp->xsc[pxrinp->shift >> 1];         /* 0x2C 44  */
    scr = (pxrinp->shift & 1) ? (_UCHAR)(scr & 0x0F) : (_UCHAR)(scr >> 4);
    vc += scr;

    scr = xrp->xzc[pxrinp->depth >> 1];         /*   */
    scr = (pxrinp->depth & 1) ? (_UCHAR)(scr & 0x0F) : (_UCHAR)(scr >> 4);
    vc += scr;

    scr = xrp->xoc[pxrinp->orient >> 1];        /*   */
    scr = (pxrinp->orient & 1) ? (_UCHAR)(scr & 0x0F) : (_UCHAR)(scr >> 4);
    vc += scr;

  mix:

    //vm  = (vpp > vpi) ? vpp : vpi;
    vm  = (vm  > vc)  ? vm : vc;

    *lc++ = vm;
    pxrinp++;       /* pxrinp += 0x04 */
  }
  *lc = 0;

  return 0;
}

/* ************************************************************************* */
/*       Count correlation of one XR (may be assembler!)                     */
/* ************************************************************************* */
_INT TCountXrAsm(p_xrcm_type xrcm)
{
  _SHORT        i;
  _SHORT        ppic;
  _SHORT        vpp, vpi;
  _SHORT        pp;
  _SHORT        vm;
  _SHORT _PTR   en;
  _SHORT _PTR   lp;
  _SHORT _PTR   lc;
  p_UCHAR         tv;
  p_xrp_type    xrp;

  _UCHAR        cx, scr, t;
  _SHORT        vc;
  p_xrinp_type  pxrinp;


  i      = (_SHORT)(xrcm->inp_start);                  /* 0x00 0 */
  lp     = *(xrcm->inp_line) + i;              /* 0x08 8 */
  pxrinp = *(xrcm->xrinp) + i;              /* 0x14 20  */
  lc     = *(xrcm->out_line);                /* 0x0C 12  */
  en     = lc + xrcm->inp_end;               /* 0x04 4 */
  lc    += i;

  xrp = xrcm->xrp;                    /* 0x10 16  */
  pp  = xrp->penl;
  tv  = xrcm->xrp_htr->vects;               /* 0x18 24  ; 0x04  4 */

  ppic = vm = 0;
  while(lc < en)
  {
    vc   = (_SHORT)(ppic - XRMC_BALLANCE_COEFF);
    ppic = *lp++;                   /* lp += 0x02 */

    vpp  = (_SHORT)(ppic -  pp);
    vpi  = (_SHORT)(vm - pxrinp->penalty);             /* 0x02 2 */

    if( (pxrinp->attrib & TAIL_FLAG) == 0  &&
      (xrp->attr & TAIL_FLAG) != 0
      )
      goto mix;

    cx  = xrp->xtc[pxrinp->type >> 1];          /* 0x04 4 */
    cx  = (pxrinp->type & 1) ? (_UCHAR)(cx & 0x0F) : (_UCHAR)(cx >> 4);
    if (cx == 0) goto mix;

    scr = xrp->xhc[pxrinp->height >> 1];        /* 0x24 36  */
    scr = (pxrinp->height & 1) ? (_UCHAR)(scr & 0x0F) : (_UCHAR)(scr >> 4);
//    if (scr == 0) goto mix;
    vc += cx;
    vc += scr;

    scr = xrp->xsc[pxrinp->shift >> 1];         /* 0x2C 44  */
    scr = (pxrinp->shift & 1) ? (_UCHAR)(scr & 0x0F) : (_UCHAR)(scr >> 4);
    vc += scr;

    scr = xrp->xzc[pxrinp->depth >> 1];         /*   */
    scr = (pxrinp->depth & 1) ? (_UCHAR)(scr & 0x0F) : (_UCHAR)(scr >> 4);
    vc += scr;

    scr = xrp->xoc[pxrinp->orient >> 1];        /*   */
    scr = (pxrinp->orient & 1) ? (_UCHAR)(scr & 0x0F) : (_UCHAR)(scr >> 4);
    vc += scr;

  mix:

    if (vpp > vpi) {vm = vpp; t = XRMC_T_PSTEP;} else {vm = vpi; t = XRMC_T_ISTEP;}
    if (vc  > vm)  {vm = vc;  t = XRMC_T_CSTEP;}

    *lc++ = vm;
    *tv++ = (_UCHAR)t;
    pxrinp++;                     /* pxrinp += 0x04 */
  }
  *lc = 0;

  return 0;
}
#endif /* #if ASM_MCORR */
/* ************************************************************************* */
/* ************************************************************************* */
/*        END  OF ALL                                                        */
/* ************************************************************************* */
/* ************************************************************************* */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\convert.cpp ===
#ifndef LSTRIP


/************************************************************************** */
/* Modules for convertion of low level structure to internal xrword format  */
/************************************************************************** */

#include "hwr_sys.h"
#include "ams_mg.h"
#include "lowlevel.h"
#include "lk_code.h"
#include "calcmacr.h"

#include "low_dbg.h"
#include "dti.h"
#include "def.h"

#include "xr_attr.h"

#if PG_DEBUG
#include <stdio.h>
#include "pg_debug.h"
#endif

#define  SHOW_DBG_SPECL  0

#define  SOME_PENALTY         ((_UCHAR)5)
#define  MAXPENALTY           ((_UCHAR)18)

_SHORT  check_xrdata(xrd_el_type _PTR xrd, p_low_type low_data);
_BOOL  AdjustSlashHeight( p_low_type low_data, xrd_el_type _PTR xrd );
_SHORT PutZintoXrd(p_low_type low_data,
					xrd_el_type _PTR xrd,
                   xrd_el_type _PTR xrd_i_p1,
                   xrd_el_type _PTR xrd_i_m1,
                   xrd_el_type _PTR xrd_i,
                   _UCHAR lp,_SHORT i,p_SHORT len);

_VOID  AssignInputPenaltyAndStrict(p_SPECL cur, xrd_el_type _PTR xrd_elem);

_SHORT MarkXrAsLastInLetter(xrd_el_type _PTR xrd,p_low_type low_data,p_SPECL elem);

#if  SHOW_DBG_SPECL
  _SHORT  fspecl_local ( low_type _PTR pLowData );
#endif

/* ************************************************************************ */
/**              Converter to Xr format                                   * */
/* ************************************************************************ */

/************************************************************************** */
/*       Receiving of input word and customizing it                         */
/************************************************************************** */
/************************************************************************** */
/*    Extracting codes from SPECL array and print picture                   */
/************************************************************************** */
#ifndef LSTRIP
_SHORT exchange(low_type _PTR low_data, xrdata_type _PTR xrdata)
 {
  p_SPECL            spec  = low_data->specl;
  PS_point_type _PTR trace = low_data->p_trace;
  _SHORT i,num_elem;
  xrd_el_type _PTR xrd = &(*xrdata->xrd)[0];
  xrd_el_type _PTR xrd_num_elem;
  _UCHAR xr_code = X_NOCODE;
  _UCHAR fb, height;
  p_SPECL cur;
  _RECT box;
  _UCHAR lp = SOME_PENALTY;
  _SHORT _PTR xp=low_data->x,
         _PTR yp=low_data->y,
         _PTR pos=low_data->buffers[2].ptr;

#if PG_DEBUG
  _UCHAR xrstr[XRINP_SIZE];
  _UCHAR attrstr[XRINP_SIZE];
  _BOOL  bShowXRs = _FALSE;

  if ( mpr > 1 && look == CSTMPRINT) /* View xr extraction mode */
       printw ("\n Received codes & attributes \n");
  if  ( mpr==2 )  {
    printw( "\n" );
    printw( "Breaks\' numbers(orig):" );
    for  ( i=0;  i<low_data->rc->ii;  i++ )  {
      if  ( trace[i].y == BREAK )
        printw( " %d;", i );
    }
  }
  if  ( mpr==2 )  {
    _CHAR  szDBG[40] = "";
    InqString( "\nShow final XRs? ", szDBG );
    if  ( szDBG[0]=='Y'  ||  szDBG[0]=='y' )
      bShowXRs = _TRUE;
    else
      bShowXRs = _FALSE;

  }
#endif


/* TEMPORARY FOR EXPERIMENTS */
#if defined (FOR_GERMAN) || defined (FOR_FRENCH)
  cur=(p_SPECL)&spec[0];
  while( cur != _NULL )
   {
     if(cur->code==_BSS_)
      cur->attr=_MD_;
     cur=cur->next;
   }
#endif /* FOR_GERMAN... */

  num_elem = 0;
  xrd_num_elem = &xrd[num_elem];
  xrd_num_elem->xr.type     = X_FF;
  xrd_num_elem->xr.attrib   = 0;
  xrd_num_elem->xr.penalty  = SOME_PENALTY;
  XASSIGN_HEIGHT( xrd_num_elem, _MD_ );
  XASSIGN_XLINK( xrd_num_elem,            (_UCHAR)LINK_LINE );  //DX_UNDEF_VALUE );
  MarkXrAsLastInLetter(xrd_num_elem,low_data,spec);
      /* Some calculations for proper ibeg-iend pos. in 1st _FF_: */
  xrd_num_elem->hotpoint=xrd_num_elem->begpoint  = 1; /* Write location of elem */
  for  ( cur=spec->next;
         cur!=_NULL;
         cur=cur->next )  {
    if  (   !IsXTorST(cur)
         || cur->next==_NULL
         || IsAnyBreak(cur->next)
        )
      break;
  }

  if  ( cur == _NULL )
    xrd_num_elem->endpoint  = 1;
  else  {
    xrd_num_elem->endpoint  = cur->ibeg;
    while ( xrd_num_elem->endpoint>0  &&  yp[xrd_num_elem->endpoint-1] != BREAK )
      xrd_num_elem->endpoint--;
  }

  xrd_num_elem->box_left  = HWRMin( xp[1], xp[xrd_num_elem->endpoint]);
  xrd_num_elem->box_up    = HWRMin( yp[1], yp[xrd_num_elem->endpoint]);
  xrd_num_elem->box_right = HWRMax( xp[1], xp[xrd_num_elem->endpoint]);
  xrd_num_elem->box_down  = HWRMax( yp[1], yp[xrd_num_elem->endpoint]);

  num_elem ++;
  xrd_num_elem ++;

  cur=spec->next;

  if ((cur != _NULL) && (cur->code==_ZZ_ || cur->code==_ZZZ_ || cur->code==_Z_))
        cur = cur->next;

  while (cur != _NULL) /* Cycle for extracting of xr's */
   {
    xr_code=cur->code;
    height =cur->attr & _umd_;
    fb     =cur->attr & _fb_;

    xrd_num_elem->hotpoint=0;  //just in case...

    switch ((_SHORT)xr_code)
     {
      case _IU_ : switch ((_SHORT)cur->mark)
                   {
                     case BEG: xr_code=X_IU_BEG;
                               break;
                     case END: xr_code=X_IU_END;
                               break;
                     default:  if(fb==_f_)
                                if(cur->mark==STICK ||
                                   cur->mark==CROSS && COUNTERCLOCKWISE(cur+1)
                                  )
                                 xr_code=X_IU_STK;
                                else
                                 xr_code=X_IU_F;
                               else
                                xr_code=X_IU_B;
                   }
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _ID_ : switch ((_SHORT)cur->mark)
                   {
                     case BEG: xr_code=X_ID_BEG;
                               break;
                     case END: xr_code=X_ID_END;
                               break;
                     default:  if(fb==_b_)
                                if(cur->mark==STICK /*&&
                                   !(cur->next!=_NULL &&
                                     (cur->next)->code==_IU_ &&
                                     NULL_or_ZZ_after(cur->next)
                                    )*/
                                  )
                                 xr_code=X_ID_STK;
                                else
                                 xr_code=X_ID_F;
                               else
                                xr_code=X_ID_B;
                   }
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _DF_ : xr_code=X_DF;
                  xrd_num_elem->hotpoint=0;
                  break;
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
      case _BSS_: xr_code=X_BSS;
                  xrd_num_elem->hotpoint=0;
                  break;
#endif /* FOR_GERMAN... */

      case _ST_ :
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || defined (FOR_SWED) || defined (FOR_INTERNATIONAL)
                  if(cur->other & ST_UMLAUT)
                   xr_code=X_UMLAUT;
                  else
#endif /* FOR_GERMAN... */
#if defined(FOR_FRENCH) || defined (FOR_INTERNATIONAL)
                  if(cur->other & ST_CEDILLA)
                   xr_code=X_CEDILLA;
                  else
#endif /* FOR_FRENCH */
                   xr_code=X_ST;
//                  xrd_num_elem->hotpoint=pos[MID_POINT(cur)];
                  xrd_num_elem->hotpoint = 0;
                  break;

      case _XT_ : if(cur->other & WITH_CROSSING)
                   xr_code=X_XT;
                  else
                   xr_code=X_XT_ST;
                  xrd_num_elem->hotpoint=0;
                  break;
      case _ANl : xr_code=X_AL;
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _ANr : xr_code=X_AR;
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _GU_ : xr_code=X_BGU;
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _GD_ : xr_code=X_BGD;
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _GUs_: xr_code=X_SGU;
                  xrd_num_elem->hotpoint=cur->ipoint0!=UNDEF ? pos[cur->ipoint0] : 0;
                  break;
      case _GDs_: xr_code=X_SGD;
                  xrd_num_elem->hotpoint=cur->ipoint0!=UNDEF ? pos[cur->ipoint0] : 0;
                  break;
      case _Gl_ : xr_code=X_GL;
                  xrd_num_elem->hotpoint=0;
                  break;
      case _Gr_ : xr_code=X_GR;
                  xrd_num_elem->hotpoint=0;
                  break;
      case _UU_ : if(fb==_f_) xr_code=X_UU_F;
                  else        xr_code=X_UU_B;
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _UD_ : if(fb==_f_) xr_code=X_UD_B;
                  else        xr_code=X_UD_F;
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _UUC_: if(fb==_f_) xr_code=X_UUC_F;
                  else        xr_code=X_UUC_B;
                  xrd_num_elem->hotpoint=cur->ipoint0!=UNDEF ? pos[cur->ipoint0] : 0;
                  break;
      case _UDC_: if(fb==_f_) xr_code=X_UDC_B;
                  else        xr_code=X_UDC_F;
                  xrd_num_elem->hotpoint=cur->ipoint0!=UNDEF ? pos[cur->ipoint0] : 0;
                  break;
      case _UUR_: if(fb==_f_) xr_code=X_UUR_F;
                  else        xr_code=X_UUR_B;
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _UUL_: if(fb==_f_) xr_code=X_UUL_F;
                  else        xr_code=X_UUL_B;
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _UDR_: if(fb==_f_) xr_code=X_UDR_B;
                  else        xr_code=X_UDR_F;
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _UDL_: if(fb==_f_) xr_code=X_UDL_B;
                  else        xr_code=X_UDL_F;
                  xrd_num_elem->hotpoint=pos[cur->ipoint0];
                  break;
      case _DUR_: xr_code=X_DU_R;
                  xrd_num_elem->hotpoint=cur->ipoint1!=UNDEF ? pos[cur->ipoint1] : 0;
                  break;
      case _CUR_: xr_code=X_CU_R;
                  xrd_num_elem->hotpoint=cur->mark!=CROSS && cur->ipoint1!=UNDEF ? pos[cur->ipoint1] : 0;
                  break;
      case _CUL_: xr_code=X_CU_L;
                  xrd_num_elem->hotpoint=cur->mark!=CROSS && cur->ipoint1!=UNDEF ? pos[cur->ipoint1] : 0;
                  break;
      case _DUL_: xr_code=X_DU_L;
                  xrd_num_elem->hotpoint=cur->ipoint1!=UNDEF ? pos[cur->ipoint1] : 0;
                  break;
      case _DDR_: xr_code=X_DD_R;
                  xrd_num_elem->hotpoint=cur->ipoint1!=UNDEF ? pos[cur->ipoint1] : 0;
                  break;
      case _CDR_: xr_code=X_CD_R;
                  xrd_num_elem->hotpoint=cur->mark!=CROSS && cur->ipoint1!=UNDEF ? pos[cur->ipoint1] : 0;
                  break;
      case _CDL_: xr_code=X_CD_L;
                  xrd_num_elem->hotpoint=cur->mark!=CROSS && cur->ipoint1!=UNDEF ? pos[cur->ipoint1] : 0;
                  break;
      case _DDL_: xr_code=X_DD_L;
                  xrd_num_elem->hotpoint=cur->ipoint1!=UNDEF ? pos[cur->ipoint1] : 0;
                  break;
      case _Z_:   if(cur->next!=_NULL) xr_code=X_Z;
                  else                 xr_code=X_FF;
                  xrd_num_elem->hotpoint=0;
                  break;
      case _ZZ_ : if(cur->next!=_NULL) xr_code=X_ZZ;
                  else                 xr_code=X_FF;
                  xrd_num_elem->hotpoint=0;
                  break;
      case _ZZZ_: if(cur->next!=_NULL) xr_code=X_ZZZ;
                  else                 xr_code=X_FF;
                  xrd_num_elem->hotpoint=0;
                  break;
      case _FF_:  xr_code=X_FF;
                  xrd_num_elem->hotpoint=0;
                  break;
      case _TS_:  xr_code=X_TS;
                  xrd_num_elem->hotpoint=0;
                  break;
      case _TZ_:  xr_code=X_TZ;
                  xrd_num_elem->hotpoint=0;
                  break;
      case _BR_:  xr_code=X_BR;
                  xrd_num_elem->hotpoint=0;
                  break;
      case _BL_:  xr_code=X_BL;
                  xrd_num_elem->hotpoint=0;
                  break;

      case _AN_UR: xr_code = X_AN_UR;
                   //xrd_num_elem->hotpoint=pos[MID_POINT(cur)];
                   xrd_num_elem->hotpoint=0;
                   break;
      case _AN_UL: xr_code = X_AN_UL;
                   //xrd_num_elem->hotpoint=pos[MID_POINT(cur)];
                   xrd_num_elem->hotpoint=0;
                   break;

         default: err_msg("CONVERT: Unknown code");
                  goto NXT;
     }

    xrd_num_elem->xr.type    = xr_code;
    xrd_num_elem->xr.height  = height;
    xrd_num_elem->xr.attrib  = 0;
    //xrd_num_elem->xr.penalty     = SOME_PENALTY;

    /* all experiments for input penalties and stricts */
    AssignInputPenaltyAndStrict( cur, xrd_num_elem );

//    if(cur->code==_ZZ_ && (cur->other & SPECIAL_ZZ))
//     xrd_num_elem->xr.attrib |= X_SPECIAL_ZZ;
    if(cur->code==_XT_ && (cur->other & RIGHT_KREST))
     xrd_num_elem->xr.attrib |= X_RIGHT_KREST;
    xrd_num_elem->begpoint = cur->ibeg;      /* Write location of elem */
    xrd_num_elem->endpoint = cur->iend;

// GIT
   GetLinkBetweenThisAndNextXr(low_data,cur,xrd_num_elem);
   MarkXrAsLastInLetter(xrd_num_elem,low_data,cur);

#if  PG_DEBUG
    if  ( mpr==2 && bShowXRs )  {
      _SHORT  color = EGA_LIGHTGRAY;
      if  ( IsUpperElem( cur ) )
        color = COLORMAX;
      else  if  ( IsLowerElem( cur ) )
        color = COLORMIN;
      else  if  ( IsAnyBreak( cur ) )
        color = EGA_DARKGRAY;
      OpenTextWindow( 4 );
      printw( "\nXrBox: \"%s\";  ibeg:iend: %d:%d (%d:%d;hot==%d)",
              code_name[cur->code],
              (int)cur->ibeg, (int)cur->iend,
              (int)pos[cur->ibeg], (int)pos[cur->iend],
              (int)xrd_num_elem->hotpoint );
      size_cross(xrd_num_elem->begpoint,xrd_num_elem->endpoint,xp,yp,&box);
      printw( "\n       Box(scaled)(L,R;T,B): %d,%d; %d,%d",
              (int)box.left, (int)box.right,
              (int)box.top, (int)box.bottom );
      GetBoxFromTrace( trace,
                       pos[xrd_num_elem->begpoint],
                       pos[xrd_num_elem->endpoint],
                       &box );
      printw( "\n       Box(~real) (L,R;T,B): %d,%d; %d,%d",
              (int)box.left, (int)box.right,
              (int)box.top, (int)box.bottom );
      if  ( xrd_num_elem->xr.type!=X_FF )  {
        draw_arc( color, xp, yp,
                  xrd_num_elem->begpoint, xrd_num_elem->endpoint );
        if  ( xrd_num_elem->hotpoint != 0 )  {
          _INT  i1 = NewIndex ( pos, yp, xrd_num_elem->hotpoint,
                                low_data->ii, _FIRST );
          _INT  i2 = NewIndex ( pos, yp, xrd_num_elem->hotpoint,
                                low_data->ii, _LAST );

          if  ( i1==UNDEF )  i1 = i2;
          if  ( i2==UNDEF )  i2 = i1;
          if  ( i1 != UNDEF )  {
            _INT  x1,y1, x2,y2;
            x1 = xp[i1];
            y1 = yp[i1];
            x2 = xp[i2];
            y2 = yp[i2];
            if  ( i1==i2 )  {x1--; x2++;}
            draw_line( x1, y1, x2, y2, COLLIN, SOLID_LINE, 3);
          }
        }
        else  if  ( !IsAnyBreak( cur ) ) {
          _INT iMid = MEAN_OF( cur->ibeg, cur->iend );
          draw_line( xp[iMid]-1, yp[iMid], xp[iMid]+1, yp[iMid],
                     YELLOW, SOLID_LINE, 3);
          xrd_num_elem->hotpoint = pos[iMid]; //!!!!
          printw( "\n       New hotpoint: %d", (int)xrd_num_elem->hotpoint );
        }
      }
      if  ( xrd_num_elem->xr.type!=X_FF )
        dbgAddBox(box, EGA_BLACK, color, SOLID_LINE);
      brkeyw("\n Press any key to continue ...");
      draw_arc( EGA_WHITE, xp, yp,
                xrd_num_elem->begpoint, xrd_num_elem->endpoint );
      CloseTextWindow();
    }
#endif

    if  ( xrd_num_elem->hotpoint == 0  &&  !IsAnyBreak( cur ) )  {
      _INT iMid = MEAN_OF( cur->ibeg, cur->iend );
      xrd_num_elem->hotpoint = pos[iMid]; //!!!!
    }

    num_elem ++;
    xrd_num_elem ++;
    if (num_elem > XRINP_SIZE - 3) break;

NXT:
    cur = cur->next;
   }                                               /* End of cycle */

  if(xr_code != X_FF)
   {
    xrd_num_elem->xr.type     = X_FF;
    XASSIGN_HEIGHT( xrd_num_elem, _MD_ );
    XASSIGN_XLINK( xrd_num_elem,          (_UCHAR)LINK_LINE );  //DX_UNDEF_VALUE );
    xrd_num_elem->xr.orient =    (_UCHAR)LINK_LINE;
    xrd_num_elem->xr.penalty      = lp;
    xrd_num_elem->xr.attrib      = 0;
    MarkXrAsLastInLetter(xrd_num_elem,low_data,spec);
    i = (xrd_num_elem-1)->endpoint;
    xrd_num_elem->begpoint  = i; /* Write location of elem */
    xrd_num_elem->endpoint  = i;
    xrd_num_elem->hotpoint  = pos[i];
    xrd_num_elem->box_left  = xp[i];
    xrd_num_elem->box_up    = yp[i];
    xrd_num_elem->box_right = xp[i];
    xrd_num_elem->box_down  = yp[i];
    num_elem ++;
    xrd_num_elem ++;
  }
 else
  {
   if ( num_elem > 2 )
    {
     i = (xrd_num_elem-2)->endpoint;
     (xrd_num_elem-1)->begpoint  = i; /* Write location of elem */
     (xrd_num_elem-1)->endpoint  = i;
     (xrd_num_elem-1)->hotpoint  = pos[i];
    }
  }

  HWRMemSet((p_VOID)xrd_num_elem, 0, sizeof(xrd_el_type));


/************************************************************************** */
/*       Tails near ZZ and BCK                                              */
/************************************************************************** */

  for (i = 0; i < XRINP_SIZE && xrd[i].xr.type != 0; i ++)
   {
    if(X_IsBreak(&xrd[i]))
     {
      if(i > 0)
       {
         xrd[i-1].xr.attrib |= TAIL_FLAG;
         if  ( i > 1 ) //skip all right-brought _XTs:
          {
            _INT  iRealTail;
            for  ( iRealTail=i-1;
                      iRealTail>0
                   && (xrd[iRealTail].xr.type == X_XT || xrd[iRealTail].xr.type == X_XT_ST)
                   && (xrd[iRealTail].xr.attrib & X_RIGHT_KREST);
                   iRealTail-- )
            ;
            if  ( iRealTail>0  &&  iRealTail < i-1 )
             xrd[iRealTail].xr.attrib |= TAIL_FLAG;
          }
       }
      xrd[i+1].xr.attrib |= TAIL_FLAG;
#if  1  /*ndef  FOR_GERMAN*/
         /* Double-tailing: */
      if (   (   xrd[i+1].xr.type == X_IU_BEG
              || xrd[i+1].xr.type == X_UUL_F
              || xrd[i+1].xr.type == X_UUR_B
              || xrd[i+1].xr.type == X_GL
              || xrd[i+1].xr.type == X_SGU
             )
          && (   xrd[i+2].xr.type == X_UD_F
              || (   xrd[i+2].xr.type == X_AL
                  && xrd[i+3].xr.type == X_UD_F
                 )
             )
         )
       {
        _INT  iNext   = (xrd[i+2].xr.type==X_AL)? (i+3):(i+2);
        _INT  dHeight =   (_INT)(xrd[iNext].xr.height)
                        - (_INT)(xrd[i+1].xr.height);
        if  ( dHeight>=0 && (i==0 || dHeight<=3) ) /* 1st tail may be high */
          xrd[iNext].xr.attrib |= TAIL_FLAG;
       }
#endif /*FOR_GERMAN*/
     }

   }

/************************************************************************** */
/*       Transform x and y in tablet coordinates                            */
/************************************************************************** */

  for (i = 0; i < XRINP_SIZE && xrd[i].xr.type != 0; i ++)
   {
    xrd_num_elem = &xrd[i];
    xrd_num_elem->begpoint  = pos[xrd_num_elem->begpoint]; /* Write location of elem */
    xrd_num_elem->endpoint  = pos[xrd_num_elem->endpoint];
    /*CHE: for one-point xrs to be extended by one point: */
    if  (   !X_IsBreak(xrd_num_elem)
         && xrd_num_elem->begpoint == xrd_num_elem->endpoint
        )  {
      DBG_CHK_err_msg(   xrd_num_elem->begpoint<1
                      || xrd_num_elem->begpoint>=low_data->rc->ii-1,
                      "Conv: BAD begpoint." );
      if  ( trace[xrd_num_elem->begpoint-1].y == BREAK )  {
        if  ( trace[xrd_num_elem->begpoint+1].y != BREAK )
          xrd_num_elem->endpoint++;
      }
      else  if  ( trace[xrd_num_elem->begpoint+1].y == BREAK )
        xrd_num_elem->begpoint--;
      else  {
        switch( xrd_num_elem->xr.type )  {
          case  X_IU_BEG:
          case  X_ID_BEG:
          case  X_UUL_F:
          case  X_UUR_B:
          case  X_UDL_F:
          case  X_UDR_B:
                  xrd_num_elem->endpoint++;
                  break;

          case  X_IU_END:
          case  X_ID_END:
          case  X_UUL_B:
          case  X_UUR_F:
          case  X_UDL_B:
          case  X_UDR_F:
                  xrd_num_elem->begpoint--;
                  break;

          case  X_IU_STK:
          case  X_ID_STK:
                  if  ( X_IsBreak(xrd_num_elem-1) )
                    xrd_num_elem->endpoint++;
                  break;

        }
      }
    }
    GetBoxFromTrace( trace,
                     xrd_num_elem->begpoint, xrd_num_elem->endpoint,
                     &box );
    xrd_num_elem->box_left  = box.left;
    xrd_num_elem->box_up    = box.top;
    xrd_num_elem->box_right = box.right;
    xrd_num_elem->box_down  = box.bottom;
   }
  check_xrdata(xrd,low_data);

#if PG_DEBUG
  if (mpr > -6)
   {

    for (i = 0; i < XRINP_SIZE && xrd[i].xr.type != 0; i ++)
     {
         xrstr[i]   = xrd[i].xr.type;
         attrstr[i] = xrd[i].xr.attrib | (xrd[i].xr.height);
     }

    xrstr[i]   = 0;
    attrstr[i] = 0;

    printw("\n");
    for (i = 0; i < XRINP_SIZE && xrd[i].xr.type != 0; i ++) {
      put_xr(xrd[i].xr, 2);
   }

   }
#endif

//  AdjustSlashHeight( low_data, xrd );  /* see comments below, at the func. definition */


  //CHE: Paint xrs:
  #if  PG_DEBUG
   {
//      _VOID  PaintXrbuf( xrdata_type _PTR xrbuf );
//      if  ( mpr == -4 )  {
//        PaintXrbuf( xrd );
//        brkeyw( "\nPress a key to continue ..." );
//      }
   }
  #endif  /*PG_DEBUG*/

  for (num_elem=0; num_elem<XRINP_SIZE && xrd[num_elem].xr.type!=0; num_elem++);
  xrdata->len = num_elem;

 FillXrFeatures(xrdata, low_data);

#if PG_DEBUG
  if (mpr == -4  ||  mpr == -5  ||  mpr == -15)
   {
//    printw("\nSlope: %d, %d, Bord size: %d, Mid line: %d.", slope, low_data->slope, bord, mid_line);
    printw("\n S:");
    for (i = 0; i < xrdata->len; i ++) printw("%2d ", (*xrdata->xrd)[i].xr.shift);
    printw("\n L:");
    for (i = 0; i < xrdata->len; i ++) printw("%2d ", (*xrdata->xrd)[i].xr.depth);
    printw("\n O:");
    for (i = 0; i < xrdata->len; i ++) printw("%2d ", (*xrdata->xrd)[i].xr.orient);
    printw("\n H:");
    for (i = 0; i < xrdata->len; i ++) printw("%2d ", (*xrdata->xrd)[i].xr.height);
    printw("\n X: ");
    for (i = 0; i < xrdata->len; i ++)
     {
      put_xr((*xrdata->xrd)[i].xr, 4);
      printw("  ");
     }
   }
#endif /* PG_DEBUG */

#if  SHOW_DBG_SPECL
 fspecl_local(low_data);
#endif


  return SUCCESS;
}

#endif //LSTRIP



/************************************************************************** */
/*  This function recounts input penalties and strict attributes            */
/************************************************************************** */

#define PENALTY_FOR_FAKE_STROKE                 ((_UCHAR)2)
#define ADD_PENALTY_FOR_CUTTED_STROKE           ((_UCHAR)6)
#define ADD_PENALTY_FOR_STROKE_WITH_1_CROSSING  ((_UCHAR)6)
#define ADD_PENALTY_FOR_GAMMAS_US_DS            ((_UCHAR)6)

#define DHEIGHT_FOR_LITTLE_PENALTY       ((_UCHAR)6)
#define DHEIGHT_FOR_BIG_PENALTY          ((_UCHAR)12)
#define ADD_PENALTY_FOR_LITTLE_DHEIGHT   ((_UCHAR)4)
#define ADD_PENALTY_FOR_BIG_DHEIGHT      ((_UCHAR)8)
#define ADD_PENALTY_FOR_ANGLE            ((_UCHAR)1)
#define ADD_PENALTY_FOR_LARGE_H_MOVE     ((_UCHAR)8)


ROM_DATA_EXTERNAL  _UCHAR  penlDefX[XR_COUNT];
ROM_DATA_EXTERNAL  _UCHAR  penlDefH[XH_COUNT];

_VOID  AssignInputPenaltyAndStrict(p_SPECL cur, xrd_el_type _PTR xrd_elem)
{

  _UCHAR  height = (xrd_elem->xr.height);


       /*  For angle-like elements ("side extrs") don't do    */
       /* any processing except taking the value from "other" */
       /* field:                                              */

  if  ( cur->code==_AN_UR  ||  cur->code==_AN_UL )  {
    xrd_elem->xr.penalty = cur->other;
    return;
  }

  if  (   (cur->code==_ANl  ||  cur->code==_ANr)
       && cur->ipoint1 != UNDEF
      )  {
    xrd_elem->xr.penalty = (_UCHAR)cur->ipoint1;
    return;
  }
       /*  Same thing for S- and Z- arcs: */

  if  ( cur->code==_TS_  ||  cur->code==_TZ_ )  {
    xrd_elem->xr.penalty = cur->other;
     return;
   }

       /*  Special treatment for some peculiar cases: */

  if(   (cur->code==_FF_ || cur->code==_Z_)
     && ((cur->other & FF_CUTTED) || (cur->other & NO_PENALTY))
    )
   {
     xrd_elem->xr.penalty = 0;
     return;
   }

  if(cur->code==_XT_ && (cur->other & FAKE))
   {
     xrd_elem->xr.penalty = PENALTY_FOR_FAKE_STROKE;
     return;
   }
  if((Is_IU_or_ID(cur) || IsAnyArcWithTail(cur)) &&
     (cur->other & MIN_MAX_CUTTED)
    )
   {
     xrd_elem->xr.penalty = 0;
     return;
   }

       /*  Regular treatment: */
  if  ( xrd_elem->xr.type<XR_COUNT  &&  height<XH_COUNT )  {
    xrd_elem->xr.penalty =   penlDefX[xrd_elem->xr.type];

  if  (   cur->code != _ST_
       && !IsAnyAngle( cur )
#ifdef  FOR_GERMAN
       && xrd_elem->xr.type != X_XT_ST
#endif
      )
    xrd_elem->xr.penalty += penlDefH[height];
  }
  else  {
    err_msg( "BAD xr or h in ..Penalty..." );
    xrd_elem->xr.penalty = 0;
  }


  if(cur->code==_XT_)
   {
     if(cur->other & CUTTED)
       xrd_elem->xr.penalty += ADD_PENALTY_FOR_CUTTED_STROKE;

     /* if it was the only crossing */
     else if((cur->other & WITH_CROSSING) &&
             cur->ipoint0!=0              &&
             cur->ipoint1==0
            )
        xrd_elem->xr.penalty += ADD_PENALTY_FOR_STROKE_WITH_1_CROSSING;
   }

  else
  if((cur->code==_GU_ && HEIGHT_OF(cur)<=_US2_) ||
     (cur->code==_GD_ && HEIGHT_OF(cur)>=_DS1_)
    )
   {
     xrd_elem->xr.penalty += ADD_PENALTY_FOR_GAMMAS_US_DS;
   }

#if defined (FOR_GERMAN)
  if(cur->code==_BSS_)
   if(cur->other & ZERO_PENALTY)
    xrd_elem->xr.penalty = 0;
   else if(cur->other & LARGE_PENALTY)
    xrd_elem->xr.penalty += ADD_PENALTY_FOR_LARGE_H_MOVE;
#endif /* FOR_GERMAN */

       /*  Now recount penalty basing on Lossev's idea about */
       /* non-covered parts of trj:                          */

   if  (   !IsAnyBreak(cur)
        && !IsXTorST(cur)
        && cur->prev->code != _NO_CODE  //i.e. this is not the 1st elem.
       )
    { /*40*/
      p_SPECL  pPrev, pNext;

      for  ( pPrev=cur->prev;
             pPrev!=_NULL  &&  pPrev->code!=_NO_CODE;
             pPrev=pPrev->prev )  {
        if  ( !IsXTorST(pPrev) )
          break;
      }
      for  ( pNext=cur->next;
             pNext!=_NULL;
             pNext=pNext->next )  {
        if  ( !IsXTorST(pNext) )
          break;
      }

      if  (   pPrev != _NULL
           && pNext != _NULL
           && pPrev->code != _NO_CODE
           && ( !IsAnyBreak(pPrev)  ||  !IsAnyBreak(pNext) )
          )
      {
        _SHORT  dHgtSum    = 0;
        _UCHAR  addPenalty = 0;

        if  ( !IsAnyBreak(pPrev) )
          dHgtSum += (_SHORT)HWRAbs(HEIGHT_OF(cur) - HEIGHT_OF(pPrev));
        if  ( !IsAnyBreak(pNext) )
          dHgtSum += (_SHORT)HWRAbs(HEIGHT_OF(cur) - HEIGHT_OF(pNext));

        if  ( dHgtSum >= DHEIGHT_FOR_BIG_PENALTY )
          addPenalty += ADD_PENALTY_FOR_BIG_DHEIGHT;
        else  if  ( dHgtSum >= DHEIGHT_FOR_LITTLE_PENALTY )
          addPenalty += ADD_PENALTY_FOR_LITTLE_DHEIGHT;

        if  ( IsAnyAngle(cur) )
          addPenalty = HWRMin( addPenalty, ADD_PENALTY_FOR_ANGLE );

        xrd_elem->xr.penalty += addPenalty;

        if  ( xrd_elem->xr.penalty > MAXPENALTY )
          xrd_elem->xr.penalty = MAXPENALTY;
      }
    } /*40*/

} /* end of AssignInputPenaltyAndStrict */

/************************************************************************** */
/*       Check sequence in xrdata                                           */
/************************************************************************** */
_SHORT  check_xrdata(xrd_el_type _PTR xrd, p_low_type low_data)
 {
  _SHORT i,len,dxo,dxne1,dyo,duo;
  _UCHAR lp = SOME_PENALTY;
  xrd_el_type _PTR  xrd_i;     /*CHE*/
  xrd_el_type _PTR  xrd_i_m1;
  xrd_el_type _PTR  xrd_i_p1;
  PS_point_type _PTR trace = low_data->p_trace;


  for (len = 0; len < XRINP_SIZE && xrd[len].xr.type != 0; len ++);

  if (len >= XRINP_SIZE-2) goto err;

  for (i = 4; i < len && len < XRINP_SIZE; i ++)
   {

    xrd_i = &xrd[i];       /*CHE*/
    xrd_i_m1 = xrd_i - 1;
    xrd_i_p1 = xrd_i + 1;

                                     /* ------ Put split after 'O_b' ------ */
    if(xrd[i-2].xr.type == X_UDC_F &&                                  /* O_b */
       (xrd_i->xr.type == X_IU_F || xrd_i->xr.type == X_UU_F) &&    /* IU || UU */
        !X_IsBreak(xrd_i_p1))
     {
       _RECT box;
       GetBoxFromTrace( trace, xrd[i-3].begpoint,xrd_i_m1->endpoint, &box );
//       size_cross(xrd[i-3].begpoint,xrd_i_m1->endpoint,xp,yp,&box);
       if(box.left   ==ALEF ||
          box.right  ==ELEM ||
          box.top    ==ALEF ||
          box.bottom ==ELEM
         )
        continue;
       dxo  = DX_RECT(box);                           /* Dx for 'o'   */
       dyo  = DY_RECT(box);                           /* Dy for 'o'   */
       duo  = box.top;                                /* Up for 'o'   */
       dxne1= xrd_i->box_right - box.right;           /* Dx to next el*/
     }
    else continue;
    if(dxne1 > dxo/4                         &&
       xrd_i->box_up > (_SHORT)(duo - dyo/3) &&
       xrd_i->box_up < (_SHORT)(duo + dyo/3)
      )
     if(PutZintoXrd(low_data,xrd,xrd_i_p1,xrd_i_m1,xrd_i,lp,i,&len)!=SUCCESS)
      break;
   }

#if (0)
  /* Temporary: insert pseudobreak before X_DU_R */
  for (i = 3; i < len && len < XRINP_SIZE; i ++)
   {
     xrd_i    = &xrd[i];
     xrd_i_m1 = xrd_i - 1;
     xrd_i_p1 = xrd_i + 1;
     if(xrd_i->xr.type != X_DU_R)
      continue;
     if(PutZintoXrd(low_data,xrd,xrd_i_p1,xrd_i_m1,xrd_i,lp,i,&len)!=SUCCESS)
      break;
     i++;
   }
#endif

  /* Insert pseudobreak after X_DF */
  for (i = 3; i < len-3 && len < XRINP_SIZE; i ++)
   {
     xrd_i    = &xrd[i];
     xrd_i_p1 = xrd_i + 1;
     if(xrd_i->xr.type     != X_DF     ||
        X_IsBreak(xrd_i_p1)            ||
        xrd_i_p1->xr.type  == X_UUR_F  ||
        xrd_i_p1->xr.type  == X_UDR_F  ||
        xrd_i_p1->xr.type  == X_IU_END ||
        xrd_i_p1->xr.type  == X_ID_END
       )
      continue;
     if(((xrd_i+1)->xr.type == X_UU_F || (xrd_i+1)->xr.type == X_UD_F) &&
        ((xrd_i+2)->xr.type == X_IU_END || (xrd_i+2)->xr.type == X_ID_END)
       )
      continue;
     if(PutZintoXrd(low_data,xrd,xrd_i_p1+1,xrd_i,xrd_i_p1,lp,i,&len)!=SUCCESS)
      break;
     i++;
   }

  return 0;
err:
  return 1;
 }

/************************************************************************/
/*   Put pseudobreak into xrdata                                        */
/************************************************************************/
_SHORT PutZintoXrd(p_low_type low_data,
				   xrd_el_type _PTR xrd,
                   xrd_el_type _PTR xrd_i_p1,
                   xrd_el_type _PTR xrd_i_m1,
                   xrd_el_type _PTR xrd_i,
                   _UCHAR lp,_SHORT i,p_SHORT len)
{
  _SHORT ibeg=xrd_i_m1->endpoint,iend=xrd_i->begpoint;
  _RECT box;
  PS_point_type _PTR trace=low_data->p_trace;

  if(ibeg>iend)
   SWAP_SHORTS(ibeg,iend);

  if (xrd_i_p1 - xrd + (*len-i+1)>= XRINP_SIZE)
	  return UNSUCCESS;

  HWRMemCpy((p_VOID)xrd_i_p1, (p_VOID)xrd_i,
            sizeof(xrd_el_type)*(*len-i+1));
  xrd_i->xr.type     = XR_NOBR_LINK;
  XASSIGN_HEIGHT( xrd_i, _MD_ );
  XASSIGN_XLINK( xrd_i, (_UCHAR)LINK_LINE );   //DX_UNDEF_VALUE );
  xrd_i->xr.orient = (_UCHAR)LINK_LINE;
  xrd_i->xr.penalty= lp;
  xrd_i->xr.attrib = 0;
  MarkXrAsLastInLetter(xrd_i,low_data,low_data->specl);
  xrd_i->hotpoint=xrd_i->begpoint  = ibeg;
  xrd_i->endpoint  = iend;
  GetBoxFromTrace(trace,ibeg,iend,&box);
  xrd_i->box_left  = box.left;
  xrd_i->box_up    = box.top;
  xrd_i->box_right = box.right;
  xrd_i->box_down  = box.bottom;

  (*len)++;

  if(*len >= XRINP_SIZE-1)
   return UNSUCCESS;

  return SUCCESS;

} /* end of PutZintoXrd */

/************************************************************************/
/* This function marks xr's as possible last in letter for use in XRLW  */
/************************************************************************/
#define MARK_XR_AS_LAST_IN_LETTER(xrd) { (xrd)->xr.attrib |= END_LETTER_FLAG; }
_SHORT MarkXrAsLastInLetter(xrd_el_type _PTR xrd,p_low_type low_data,p_SPECL elem)
{
  p_SPECL specl=low_data->specl,
          nxt=elem->next,
          prv=elem->prev;
  _UCHAR  code=elem->code,mark=elem->mark,NxtCode;

  /* BREAK or special case - mark as end of letter (EOL) */
  if(elem==specl || IsAnyBreak(elem))
   {
     MARK_XR_AS_LAST_IN_LETTER(xrd)
     return SUCCESS;
   }

  /* don't allow EOL after BREAK */
  if(NULL_or_ZZ_after(elem))
   return SUCCESS;

  NxtCode=nxt->code;
     //CHE:
  if(   code==_XT_ && (elem->other & RIGHT_KREST)
     && NxtCode==_XT_ && (nxt->other & RIGHT_KREST)
    )
   {
     MARK_XR_AS_LAST_IN_LETTER(xrd)
     return SUCCESS;
   }

  /* don't allow EOL after BREAK, except elem: ST, ST_XT and after _Z_ */
  if(prv==specl || IsAnyBreak(prv))
   {
     if(   (code==_ST_ || code==_XT_ /*&& (elem->other & WITH_CROSSING)==0*/ ) && nxt!=_NULL
        ||    prv->code==_Z_
           && (   !NULL_or_ZZ_after(nxt) && (Is_IU_or_ID(elem) || IsAnyArcWithTail(elem))
               || NULL_or_ZZ_after(nxt)  && (code==_IU_ || code==_UUL_)
              )
       )
      MARK_XR_AS_LAST_IN_LETTER(xrd)
     return SUCCESS;
   }

#if defined (FOR_FRENCH) /*forgerman */
  if(code==_UD_ && COUNTERCLOCKWISE(elem) && NULL_or_ZZ_after(nxt))
   {
     MARK_XR_AS_LAST_IN_LETTER(xrd)
     return SUCCESS;
   }
#endif /* FOR_FRENCH */

  /* don't allow EOL before elem following by BREAK, except spec. cases above */
  if(NULL_or_ZZ_after(nxt))
   return SUCCESS;

  /* xr's, which are potentially EOL */
  if(   code==_GD_  || code==_GDs_ || code==_Gl_
     || code==_DDL_ || code==_CDL_ || code==_CUL_ || code==_DUL_
     || code==_UD_  && COUNTERCLOCKWISE(elem)
     || code==_UDC_ || mark==SHELF || code==_AN_UL
     || code==_ST_  || code==_XT_
     || code==_ID_
#if defined(FOR_FRENCH) || defined(FOR_GERMAN)
     || code==_ANl && mark==0 /* CHE's angles */
#endif /* FOR_FRENCH ... */
    )
   {
     /* check small pair among them to prevent ending of letter on them */
     _BOOL IsSmallPair=_FALSE;
     if(code==_GD_ || code==_UDC_ && CLOCKWISE(elem))
      {
        p_SPECL p1st=nxt,p2nd=nxt->next;
        if(p1st->code==_UU_ || p1st->code==_UUC_ || p1st->code==_IU_)
         {
           while(!NULL_or_ZZ_this(p2nd) && !IsStrongElem(p2nd))
            p2nd=p2nd->next;
           if(p2nd!=_NULL && NULL_or_ZZ_after(p2nd) &&
              (p2nd->code==_ID_ || p2nd->code==_UDL_ || p2nd->code==_UDR_
                                || p2nd->code==_DDL_ || p2nd->code==_DDR_
              )
             )
            {
              p_SHORT x=low_data->x, y=low_data->y;
              _RECT   BoxOfPair;
              GetTraceBox(x,y,p1st->ibeg,p2nd->iend,&BoxOfPair);
              if(XMID_RECT(BoxOfPair)>TWO(YMID_RECT(BoxOfPair)))
               IsSmallPair=_TRUE;
            }
         }
      }
     if(!IsSmallPair)
      MARK_XR_AS_LAST_IN_LETTER(xrd)
     return SUCCESS;
   }
  /* xr's, before which is potentially EOL */
  if(   NxtCode==_DUR_ || NxtCode==_CUR_
     || NxtCode==_GU_  || NxtCode==_GUs_ || NxtCode==_Gr_
     || NxtCode==_DF_  || NxtCode==_AN_UR || IsXTorST(nxt)
//ayv 05/02/96
#if defined(FOR_FRENCH)
     || NxtCode==_BSS_
#endif /* FOR_FRENCH */
    )
   {
     MARK_XR_AS_LAST_IN_LETTER(xrd)
     return SUCCESS;
   }
  if(   prv->code==_UDC_       && COUNTERCLOCKWISE(prv)
//     || prv->prev->code==_UDC_ && COUNTERCLOCKWISE(prv->prev)
     || nxt->next->code==_UDC_ && COUNTERCLOCKWISE(nxt->next)
     || prv->code==_GU_
#if defined (FOR_FRENCH) /*forgerman */
     || code==_UU_ && NxtCode==_UDC_ && COUNTERCLOCKWISE(nxt)
#endif /* FOR_FRENCH */
    )
   {
     MARK_XR_AS_LAST_IN_LETTER(xrd)
     return SUCCESS;
   }
#if 0
  /* mark ID's far from BREAKs as EOL */
  if(code==_ID_ && elem->mark!=CROSS && COUNTERCLOCKWISE(elem))
   {
     p_SPECL wrk=prv->prev;
     _INT i=0;
     while(wrk!=specl && !IsAnyBreak(wrk) && i<2)
      {
        wrk=wrk->prev;
        i++;
      }
     if(i==2)
      {
        MARK_XR_AS_LAST_IN_LETTER(xrd)
        return SUCCESS;
      }
   }
#endif /* if 0 */

 /* check special combination with angles to put EOL */
 if((code==_UU_ || code==_IU_ && (mark==MINW || mark==STICK)) && CLOCKWISE(elem))
  {
    if(prv->code==_ANl)
     MARK_XR_AS_LAST_IN_LETTER(xrd-1)
    if(nxt->code==_ANr)
     MARK_XR_AS_LAST_IN_LETTER(xrd)
    return SUCCESS;
  }
 if((code==_UD_ || code==_ID_ && (mark==MINW || mark==STICK)) && COUNTERCLOCKWISE(elem))
  {
    if(prv->code==_ANl)
     MARK_XR_AS_LAST_IN_LETTER(xrd-1)
    if(nxt->code==_ANr)
     MARK_XR_AS_LAST_IN_LETTER(xrd)
    return SUCCESS;
  }

 return SUCCESS;

} /* end of MarkXrAsLastInLetter */

/***************************************************************/

#if  SHOW_DBG_SPECL

#include <stdio.h>

p_CHAR  MarkName_local ( _UCHAR mark )
{
  typedef  struct  {
    p_CHAR  name;
    _UCHAR  mark;
  } MARK_NAME;

  static MARK_NAME  mark_name[] = {
                    {"MIN"    ,  MINW},
                    {"MINN"   ,  MINN},
                    {"MAX"    ,  MAXW},
                    {"MAXN"   ,  MAXN},
                                    {"_MINX"  ,  _MINX},
                                    {"_MAXX"  ,  _MAXX},
                                    {"MINXY"  ,  MINXY},
                                    {"MAXXY"  ,  MAXXY},
                                    {"MINYX"  ,  MINYX},
                                    {"MAXYX"  ,  MAXYX},
                    {"SHELF"  ,  SHELF},
                    {"CROSS"  ,  CROSS},
                    {"STROKE" ,  STROKE},
                    {"DOT"    ,  DOT},
                    {"STICK"  ,  STICK},
                    {"HATCH"  ,  HATCH},
                                /*  {"STAFF"  ,  STAFF},  */
                    {"ANGLE"  ,  ANGLE},
                                /*  {"BIRD"   ,  BIRD},   */
                    {"BEG"    ,  BEG},
                    {"END"    ,  END},
                    {"DROP"   ,  DROP}
                                  };
  #define  NMARKS (sizeof(mark_name)/sizeof(*mark_name))

  static _CHAR szBad[] = "-BAD-MARK-";
  _SHORT  i;

  for  ( i=0;
         i<NMARKS;
         i++ )  {
    if  ( mark_name[i].mark == mark )
      return  mark_name[i].name;
  }

  return  szBad;

} /*MarkName*/


_SHORT  fspecl_local ( low_type _PTR pLowData )
{
  p_SPECL   specl = pLowData->specl;
  p_SPECL   pElem;
  //_HTEXT  f;
  //_WORD   ret;
  FILE      *f;
  int       ret;
  static _CHAR   fName[] = "spc._0";
  _SHORT    iLastChar;
  _LONG     lBitSum=0;

static _CHAR *code_name[] =               /* codes                            */
  {"_NO_CODE",                     /*       are described              */
   "_ZZ_", "_UU_", "_IU_", "_GU_", /*                      here        */
   " _O_", "_GD_", "_ID_", "_UD_", /*                                  */
   "_UUL_","_UUR_","_UDL_","_UDR_",/*                                  */
   "_XT_", "_ANl", "_DF_ ", "_ST_",/*                                  */
   "_ANr","_ZZZ_","_Z_","_FF_",    /*                                  */
   "_DUR_","_CUR_","_CUL_","_DUL_",/*                                  */
   "_DDR_","_CDR_","_CDL_","_DDL_",/*                                  */
   "_GUs_","_GDs_","_Gl_","_Gr_",  /*                                  */
   "_UUC_","_UDC_",                /*                                  */
   "_TS_", "_TZ_", "_BR_", "_BL",
   "_BSS", "_AN_UR", "_AN_UL",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED",
   "NO NAME DEFINED"
  };                               /*                                  */
static _CHAR *dist_name[] =               /* heights and directions           */
  {"   ", "US1_", "US2_", "UE1_", "UE2_", "UI1_", "UI2_",
   "MD_", "DI1_", "DI2_", "DE1_", "DE2_", "DS1_", "DS2_",
   "   ", "   ",
   "f_  ","fUS1_","fUS2_","fUE1_","fUE2_","fUI1_","fUI2_",
   "fMD_","fDI1_","fDI2_","fDE1_","fDE2_","fDS1_","fDS2_",
   "   ", "   ",
   "b_  ","bUS1_","bUS2_","bUE1_","bUE2_","bU1_","bU2_",
   "bMD_","bDI1_","bDI2_","bDE1_","bDE2_","bDS1_","bDS2_"
  };                               /*                                  */

          /* Adjust fName: */

  iLastChar = HWRStrLen(fName) - 1;
  if  ( ++(fName[iLastChar]) > '9' )
    fName[iLastChar] = '0';

          /* Real work: */

  if  ( (f = fopen(fName,"wt")) == _NULL )
  //HWRTextOpen(fName,HWR_TEXT_RDWR,HWR_TEXT_TRUNC)) == _NULL )
    return  (-1);

//  if  ( (ret=ChkSPECL(pLowData)) != CHK_OK )  {
//    fprintf (f,"\nBAD specl !!! ChkSPECL ret code == %d\n",ret);
//    //HWRTextPrintf (f,"\nBAD specl !!! ChkSPECL ret code == %d\n",ret);
//    goto  EXIT;
//  }

  for  ( pElem=specl->next;
         pElem;
         pElem=pElem->next )  { /*10*/

    ret = /*HWRTextPrintf*/
          fprintf
            (f,"\nMark:%6s Code:%5s Hght:%4s Attr:%3d beg-end:%6d-%d; BitSum:%5ld",
             (p_CHAR)MarkName_local((int)pElem->mark),
             (p_CHAR)(pElem->code? code_name[pElem->code]:" --- "),
             (p_CHAR)dist_name[HEIGHT_OF(pElem)],
             pElem->attr,
             pElem->ibeg, pElem->iend,
             lBitSum);

    if  ( ret == EOF/*HWR_TEXT_EOF*/ )
      break;

  } /*10*/

 EXIT:
  fclose (f);
  //HWRTextClose (f);
  return  (_SHORT)(fName[iLastChar] - '0');

} /*fspecl*/
/**************************************************/

#endif /* SHOW_DBG_SPECL */

/************************************************************************** */
/*       End of all                                                         */
/************************************************************************** */

#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\commondict.c ===
#include <stdlib.h>
#include <common.h>
#include "bear.h"
#include "langmod.h"
#include "sysdict.h"
#include "commondict.h"

#include "ams_mg.h"
#include "xrwdict.h"

#include "factoid.h"
#include <udict.h>

int getCyBase(void *pvXrc, p_SHORT u, p_SHORT d)
{
	BEARXRC	*pXrc;
	int		iRet = 0;

	pXrc = (BEARXRC *)pvXrc;

	if (pXrc && pXrc->bGuide)
	{
		*d = (short)(pXrc->guide.yOrigin + pXrc->guide.cyBase);
		*u = *d - (short)(pXrc->guide.cyBase / 3);
		iRet = 1;
	}

	return iRet;
}

int ExpandOneState(LMSTATE *pState, LMINFO *pLMInfo, unsigned char *szSuffix, p_fw_buf_type pChildren)
{
	LMCHILDREN lmchildren;
	int cChildren, j;

	InitializeLMCHILDREN(&lmchildren);
	cChildren = GetChildrenLM(pState, pLMInfo, NULL, &lmchildren);

	for (j=0; j<cChildren; j++)
	{
		unsigned char ch = NthChar(lmchildren, j);
		LMSTATE state = NthState(lmchildren, j);

		// init the new structure
		memset (pChildren + j, 0, sizeof (pChildren[0]));

		// set the state to -1, we no longer need it, This was callig internal state
		// Do not set to zero. Zero indicates init state
		pChildren[j].state			=	-1;

		// copy the child symbol
		pChildren[j].sym				=	(int)ch;

		// make a copy of our state
		pChildren[j].InfLMState		=	state;

		// hacking calligrapher's penalty-per-character
		if (IsDictState(state))
		{
			if (NthBUpcasedFL(lmchildren, j))
				pChildren[j].penalty = 2;  // penalty for upcasing the first letter from dictionary
			else
				pChildren[j].penalty = 0;
		}
		else
			pChildren[j].penalty = 2;  // penalty for not being in the dictionary


		// we want to determine the wordend flags of this child
		if (IsValidLMSTATE(&state, pLMInfo, szSuffix))
		{
			if (HasChildrenLMSTATE(&state, pLMInfo))
				pChildren[j].l_status	=	XRWD_WORDEND;
			else
				pChildren[j].l_status	=	XRWD_BLOCKEND;
		}
		else
			pChildren[j].l_status	=	XRWD_MIDWORD;

		// get the unigram tag
		pChildren[j].attribute	=  NthCalligTag(lmchildren, j);
	}
	DestroyLMCHILDREN(&lmchildren);

	return cChildren;
}

// Given the current state, generate the children and thier states
int InfernoGetNextSyms(p_fw_buf_type pCurrent, p_fw_buf_type pChildren, _UCHAR chSource, p_VOID pVoc, p_rc_type prc)
{
	LMSTATE				InitState, *pState;
	LMSTATELIST			lmstatelist;
	LMSTATENODE		   *plmstatenode;
	LMINFO				LMInfo;
	int cTotalChildren = 0;
	void *pvFactoid;
	unsigned char *szPrefix, *szSuffix;
	
	if (prc)
	{
		pvFactoid = prc->pvFactoid;
		szPrefix = prc->szPrefix;
		szSuffix = prc->szSuffix;
	}
	else
	{
		pvFactoid = NULL;
		szPrefix = NULL;
		szSuffix = NULL;
	}


	ASSERT (chSource == XRWD_SRCID_VOC);

	if (chSource != XRWD_SRCID_VOC)
		return 0;
	
	InitializeLMINFO(&LMInfo, LMINFO_FIRSTCAP|LMINFO_ALLCAPS, (HWL)pVoc, pvFactoid);
	
	// are we in an init state
	// YES
	if (pCurrent == 0 || pCurrent->state == 0)
	{
		if (szPrefix)
		{
			InitializeLMSTATELIST(&lmstatelist, NULL);
			ExpandLMSTATELIST(&lmstatelist, &LMInfo, szPrefix, FALSE);
			pState = NULL;
		}
		else
		{
			InitializeLMSTATE(&InitState);
			pState = &InitState;
		}
	}
	// NO
	else
	{
		pState = &pCurrent->InfLMState;
	}

	if (pState)
		return ExpandOneState(pState, &LMInfo, szSuffix, pChildren);

	plmstatenode = lmstatelist.head;

	while (plmstatenode)
	{
		int cChildren;

		cChildren = ExpandOneState(&plmstatenode->lmstate, &LMInfo, szSuffix, pChildren);
		pChildren += cChildren;
		cTotalChildren += cChildren;

		plmstatenode = plmstatenode->next;
	}
	DestroyLMSTATELIST(&lmstatelist);
	return cTotalChildren;
}

// converts tag dword value to calligrapher unigram
#define	TAG2CALLIGUNIGRAM(x)	(x >> 16)

// Find out whether a word is a valid one or not. If valid return calligrapher's status and attribute
BOOL InfernoCheckWord (unsigned char *pWord, unsigned char *pStatus, unsigned char *pAttr, p_VOID pVoc)
{
	TRIESCAN	triescan;

	if (pVoc)
	{
		// Must be User dictionary
		wchar_t		*pwWord, *pwTag;
		int		iLen = strlen((char *)pWord) + 1, iRet;
		
		pwWord = (wchar_t *)malloc(iLen * sizeof(*pwWord));
		if (pwWord)
		{
			MultiByteToWideChar(1252, 0, pWord, iLen, pwWord, iLen);
			iRet = UDictFindWord(pVoc, pwWord, &pwTag);

			free(pwWord);

			if (udWordFound == iRet)
			{
				return TRUE;
			}
		}
		return FALSE;
	}

	if (!TrieFindWord (pWord, &triescan))
		return FALSE;

	// If we got here, we match all the characters, is this a valid end of word?
	if (triescan.wFlags & TRIE_NODE_VALID) 
	{
		// We found the word, save tag value if any 
		if (triescan.wFlags & TRIE_NODE_TAGGED)
			*pAttr	=	(unsigned char) TAG2CALLIGUNIGRAM(triescan.aTags[TRIE_UNIGRAM_TAG].dwData);
		else
			*pAttr	=	(unsigned char) 0;

		// we want to know if this word has children or not
		if (triescan.wFlags & TRIE_NODE_DOWN)
			*pStatus	=	XRWD_WORDEND;
		else
			*pStatus	=	XRWD_BLOCKEND;

		return TRUE;
	} 
	else 
		return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\cross.cpp ===
#ifndef LSTRIP

  #include  "ams_mg.h"
  #include  "hwr_sys.h"
  #include  "lowlevel.h"
  #include  "const.h"
  #include  "calcmacr.h"
  #include  "low_dbg.h"

  #if PG_DEBUG
    #include "pg_debug.h"
    #include  "def.h"
  #endif

  _SHORT  Grab( low_type _PTR   pLowData    ,  _USHORT        uFlagWord ,
                p_POINTS_GROUP  pLastGrBord , p_POINTS_GROUP  pPrevGrBord ) ;

  _UCHAR  DrawEnds( low_type _PTR  pLowData, p_SHORT piBeg, p_SHORT pjEnd ) ;


  _SHORT  AnyCrosCont( low_type _PTR  pLowData ,
                      _INT iPoint ,  _INT jPoint , p_INT p_jNew ) ;

  _VOID   Clash( low_type _PTR   pLowData     ,   _USHORT  uFlagWord ,
                 p_POINTS_GROUP  pPrevGrBord  ,
                 p_SPECL         pLastCrossBr ,  p_SPECL   pPrevCrossBr ) ;

  _SHORT  ChkMrgCrs( low_type _PTR  pLowData     ,  p_SHORT  pModWord ,
                     p_SPECL        pLastCrossBr ,  p_SPECL  pPrevCrossBr ) ;

 #if PG_DEBUG

  _VOID  PaintCross( low_type _PTR  pLowData , _UCHAR  mark ,
                    _SHORT     iCrossBeg     , _SHORT  iCrossEnd ,
                    _SHORT     jCrossBeg     , _SHORT  jCrossEnd ) ;

  _VOID  DrawStr( low_type _PTR  pLowData    ,
                  p_POINTS_GROUP pLastGrBord , p_POINTS_GROUP pPrevGrBord ) ;

 #endif


 /*------------------------------------------------------------------------*/

  #define    CLEAR_FLAG_WORD           uFlagWord = 0x0000    ;

  #define    PROXIMITY_ON              uFlagWord = uFlagWord |  0x0001 ;
  #define    NO_PROXIMITY              uFlagWord = uFlagWord & ~0x0001 ;
  #define    IS_PROXIMITY              ( uFlagWord &  0x0001 )
  #define    IS_NO_PROXIMITY           ( !IS_PROXIMITY       )

  #define    OPEN_CROSS                uFlagWord = uFlagWord |  0x0002 ;
  #define    CLOSE_CROSS               uFlagWord = uFlagWord & ~0x0002 ;
  #define    IS_CROSS_OPENED           ( uFlagWord &  0x0002 )
  #define    IS_CROSS_CLOSED           ( !IS_CROSS_OPENED    )

  #define    BREAK_BETWEEN_ON          uFlagWord = uFlagWord |  0x0004 ;
  #define    NO_BREAK_BETWEEN          uFlagWord = uFlagWord & ~0x0004 ;
  #define    IS_BREAK_BETWEEN          ( uFlagWord &  0x0004 )
  #define    IS_NO_BREAK_BETWEEN       ( !IS_BREAK_BETWEEN   )

  #define    SEPARATE_LETTERS_ON       uFlagWord = uFlagWord |  0x0008 ;
  #define    SEPARATE_LETTERS_OFF      uFlagWord = uFlagWord & ~0x0008 ;
  #define    IS_SEPARATE_LETTERS       ( uFlagWord &  0x0008 )
  #define    IS_NO_SEPARATE_LETTERS    ( !IS_SEPARATE_LETTERS)

  #define    LAST_STROKE_ON            uFlagWord = uFlagWord |  0x0010 ;
  #define    LAST_STROKE_OFF           uFlagWord = uFlagWord & ~0x0010 ;
  #define    IS_LAST_STROKE            ( uFlagWord &  0x0010 )
  #define    IS_NO_LAST_STROKE         ( !IS_LAST_STROKE     )

  #define    PREV_STROKE_ON            uFlagWord = uFlagWord |  0x0020 ;
  #define    PREV_STROKE_OFF           uFlagWord = uFlagWord & ~0x0020 ;
  #define    IS_PREV_STROKE            ( uFlagWord &  0x0020 )
  #define    IS_NO_PREV_STROKE         ( !IS_PREV_STROKE     )

 /**************************************************************************/

  ROM_DATA_EXTERNAL CONSTS  const1 ;
  ROM_DATA_EXTERNAL _SHORT  nbcut0, nbcut1, nbcut2 ;
  ROM_DATA_EXTERNAL _SHORT  eps0[], eps1[], eps2[] , eps3[] ;


 /*------------------------------------------------------------------------*/

  _SHORT  Cross( low_type _PTR pLowData )
   {
    p_POINTS_GROUP   pGroupsBorder = pLowData->pGroupsBorder ;
     _INT            lenGrBord     = pLowData->lenGrBord     ;
     _INT            fl_Cross      = SUCCESS                 ;

    p_POINTS_GROUP   pLastGrBord   , pPrevGrBord             ;
    p_RECT           pLastBox      , pPrevBox                ;
     _INT            iLastGr       , jPrevGr                 ;
     _INT            iBeg          , jBeg                    ;
     _USHORT         uFlagWord                               ;


       for  ( iLastGr = 0 ; iLastGr < lenGrBord ;  iLastGr++ )
         {
           CLEAR_FLAG_WORD

           pLastGrBord = pGroupsBorder + iLastGr ;
           iBeg = pLastGrBord->iBeg ;

             if  ( IsPointCont( pLowData , iBeg , DOT ) != UNDEF )
                 { continue ; }

           pLastBox = &(pLastGrBord->GrBox) ;

             if  ( IsPointCont( pLowData , iBeg , STROKE ) != UNDEF )
                 { LAST_STROKE_ON }

             for  ( jPrevGr = iLastGr ; jPrevGr >= 0 ;  jPrevGr-- )
               {
                 PREV_STROKE_OFF
                 pPrevGrBord = pGroupsBorder + jPrevGr ;
                 jBeg = pPrevGrBord->iBeg ;

                   if  ( IsPointCont( pLowData , jBeg , DOT ) != UNDEF )
                       { continue ; }

                   if  ( IsPointCont( pLowData , jBeg , STROKE ) != UNDEF )
                       { PREV_STROKE_ON }

                   if  ( IS_LAST_STROKE && IS_PREV_STROKE )
                       { continue ; }

                   if  ( jPrevGr == iLastGr )
                       { NO_BREAK_BETWEEN }
                   else
                       {
                         pPrevBox = &(pPrevGrBord->GrBox) ;

                           if  (   ( pLastBox->right  < pPrevBox->left - nbcut0 )
                                || ( pPrevBox->right  < pLastBox->left - nbcut0 )
                                || ( pLastBox->bottom < pPrevBox->top  - nbcut0 )
                                || ( pPrevBox->bottom < pLastBox->top  - nbcut0 ) )
                               {
                                 continue ;
                               }

                         BREAK_BETWEEN_ON
                       }

                   #if PG_DEBUG

                     if   ( mpr == 3 )
                          {
                            DrawStr( pLowData , pLastGrBord , pPrevGrBord ) ;
                          }
                   #endif


                   if  ( Grab( pLowData    , uFlagWord ,
                               pLastGrBord , pPrevGrBord ) == UNSUCCESS )
                       { fl_Cross = UNSUCCESS ;   goto  QUIT ; }
               }
         }

   QUIT: return( (_SHORT)fl_Cross ) ;
   }

 /*------------------------------------------------------------------------*/

  _UCHAR  DrawEnds( low_type _PTR  pLowData, p_SHORT piBeg, p_SHORT pjEnd )
    {
      p_SHORT  X    = pLowData->x ;
      p_SHORT  Y    = pLowData->y ;
       _INT    dX , dY            ;
       _UCHAR  mark               ;
       _LONG   R0                 ;
       _INT    rThreshold         ;
       _INT    r0 , r1            ;
       _INT    il , jl            ;

        il = *piBeg  ;
        jl = *pjEnd  ;

           if  ( il < jl )
               {
                 err_msg(" Wrong inexes ... " ) ;
                   goto  MARK ;
               }

        dX  = X[il] - X[jl] ;
        dY  = Y[il] - Y[jl] ;
        R0  = (_LONG)dX*dX + (_LONG)dY*dY ;

        rThreshold = eps3[ ( (il - jl) < LENTH_E ) ? (il - jl) : LENTH_E-1 ];

          if  ( R0 > rThreshold )
              {
                mark = CROSS ;
                  goto QUIT  ;
              }

        r1 = r0 = (_INT)R0 ;

           while  ( r1 <= r0 )
             {
               r0 = r1 ;
               il--    ;

                 if  ( il <= jl )
                       break ;

               dX  = X[il] - X[jl] ;
               dY  = Y[il] - Y[jl] ;
               r1  = dX*dX + dY*dY ;
             }


           if   ( il > jl )
                {
                  r1 = r0  ;
                  il++     ;

                    while  ( ( r1 <= r0 ) || ( r1 <= rThreshold ) )
                      {
                        r0 = r1  ;
                        il--     ;
                        jl++     ;

                          if  ( il <= jl )
                                break  ;

                        dX = X[il] - X[jl] ;
                        dY = Y[il] - Y[jl] ;
                        r1 = dX*dX + dY*dY ;
                        rThreshold = eps3[ ( (il - jl) < LENTH_E ) ?
                                             (il - jl) : LENTH_E-1 ]   ;
                      }
                }

         MARK:

           if   ( jl  >=  il )
                {
                  mark =  STICK  ;

                    if   ( jl > il )
                         { *piBeg  = ( il + jl ) / 2 ; }
                    else
                         { *piBeg  = (_SHORT)il ; }

                 *pjEnd  =  *piBeg - 1  ;
                }
           else
                {  mark = CROSS ;  }

    QUIT: return ( mark )  ;
    }

 /*------------------------------------------------------------------------*/

  _SHORT  AnyCrosCont( low_type _PTR  pLowData ,
                      _INT iPoint ,  _INT jPoint , p_INT p_jNew )
    {
       _SHORT  lenSpecl   = pLowData->len_specl            ;
      p_SPECL  pEndSpecl  = pLowData->specl + lenSpecl - 1 ;
      p_SHORT  Y          = pLowData->y                    ;
       _SHORT  retFlag    = SUCCESS                        ;
      p_SPECL  pTmpSpecl                                   ;
       _INT    jl , jNew                                   ;

        jNew = UNDEF ;

          if   ( ( iPoint < 0 ) || ( iPoint >= pLowData->ii ) )
               {
                 err_msg(" IsPointCont : iPoint is out of range ..." ) ;
                   retFlag = UNSUCCESS ;
                   goto  QUIT ;
               }
          else  if  ( Y[iPoint] == BREAK )
               {
                 err_msg(" IsPointCont : Point iPoint is BREAK ..." ) ;
                 retFlag = UNSUCCESS ;
                   goto  QUIT ;
               }

          if   ( ( jPoint < 0 ) || ( jPoint >= pLowData->ii ) )
               {
                 err_msg(" IsPointCont : jPoint is out of range ..." ) ;
                 retFlag = UNSUCCESS ;
                   goto  QUIT ;
               }
          else  if  ( Y[jPoint] == BREAK )
               {
                 err_msg(" IsPointCont : Point jPoint is BREAK ..." ) ;
                 retFlag = UNSUCCESS ;
                   goto  QUIT ;
               }

          for  ( jl = 0 ;  jl < lenSpecl ;  jl += 2 )
               {
                 pTmpSpecl = pEndSpecl - jl ;

                   if  (    ( pTmpSpecl->mark != CROSS )
                         && ( pTmpSpecl->mark != HATCH )
                         && ( pTmpSpecl->mark != STICK ) )
                            { break ; }

                   if  (    ( pTmpSpecl->ibeg <= jPoint )
                         && ( pTmpSpecl->iend >= jPoint )
                         && ( (pTmpSpecl - 1)->ibeg <= iPoint )
                         && ( (pTmpSpecl - 1)->iend >= iPoint )  )
                            {
                              jNew = pTmpSpecl->ibeg ;
                            }
               }

    QUIT:  *p_jNew = jNew ;

    return( retFlag ) ;
    }

/*-------------------------------------------------------------------------*/

  _SHORT  ChkMrgCrs( low_type _PTR  pLowData     ,  p_SHORT  pModWord ,
                     p_SPECL        pLastCrossBr ,  p_SPECL  pPrevCrossBr )
    {
      _SHORT  lenSpecl   = pLowData->len_specl            ;
     p_SPECL  pEndSpecl0 = pLowData->specl + lenSpecl - 1 ;
      _UCHAR  mark1      = pLastCrossBr->mark             ;
      _UCHAR  mark0      = pEndSpecl0->mark               ;
      _SHORT  retFlag    = SUCCESS                        ;

       *pModWord = NO_CONTACT ;

         if  (   ( ( mark0 == HATCH ) && ( mark1 != HATCH ) )
              || ( ( mark1 == HATCH ) && ( mark0 != HATCH ) ) )
             { goto  QUIT ; }

        if  (   ( mark0 == CROSS )
             || ( mark0 == STICK )
             || ( mark0 == HATCH ) )
            {
             p_SPECL  pEndSpecl1 = pEndSpecl0 - 1 ;
              _INT    iBeg1 = pLastCrossBr->ibeg  ;
              _INT    iEnd1 = pLastCrossBr->iend  ;
              _INT    jBeg1 = pPrevCrossBr->ibeg  ;
              _INT    jEnd1 = pPrevCrossBr->iend  ;
              _INT    iBeg0 = pEndSpecl1->ibeg    ;
              _INT    iEnd0 = pEndSpecl1->iend    ;
              _INT    jBeg0 = pEndSpecl0->ibeg    ;
              _INT    jEnd0 = pEndSpecl0->iend    ;

                *pModWord   = UNDEF ;

                if  (   (iEnd0 < iBeg1) || (iEnd1 < iBeg0)
                     || (jEnd0 < jBeg1) || (jEnd1 < jBeg0) )
                    {
                      *pModWord = NO_CONTACT ;
                        goto  QUIT ;
                    }

                if  ( ( mark0 != STICK ) && ( mark1 != STICK ) )
                    {
                      *pModWord = MOD_SKIP ;
                      pEndSpecl0->ibeg = HWRMin( jBeg1, jBeg0 ) ;
                      pEndSpecl0->iend = HWRMax( jEnd1, jEnd0 ) ;
                      pEndSpecl1->ibeg = HWRMin( iBeg1, iBeg0 ) ;
                      pEndSpecl1->iend = HWRMax( iEnd1, iEnd0 ) ;
                    }
                else  if  ( ( mark0 == STICK ) && ( mark1 != STICK ) )
                    {
                      *pModWord = MOD_SKIP ;
                      pEndSpecl1->iend = HWRMax( iEnd1, iEnd0 ) ;
                      pEndSpecl0->ibeg = HWRMin( jBeg1, jBeg0 ) ;
                    }
                else  if  ( ( mark0 != STICK ) && ( mark1 == STICK ) )
                    {
                      *pModWord = MOD_SKIP     ;
                      pEndSpecl1->ibeg = (_SHORT)iBeg1 ;
                      pEndSpecl0->iend = (_SHORT)jEnd1 ;
                      pEndSpecl1->iend = HWRMax( iEnd1, iEnd0 )   ;
                      pEndSpecl0->ibeg = HWRMin( jBeg1, jBeg0 )   ;
                      pEndSpecl0->mark = pEndSpecl1->mark = STICK ;
                    }
                else  if  ( ( mark0 == STICK ) && ( mark1 == STICK ) )
                    {
                      if  ( ( iBeg1 == iBeg0 ) && ( jEnd1 == jEnd0 ) )
                          {
                           *pModWord = MOD_SKIP ;
                            pEndSpecl1->iend = HWRMax( iEnd1, iEnd0 ) ;
                            pEndSpecl0->ibeg = HWRMin( jBeg1, jBeg0 ) ;
                          }
                      else
                          {
                           *pModWord = NO_CONTACT ;
                            pLastCrossBr->iend = HWRMax( iEnd1, iEnd0 ) ;
                          }
                    }
            }

    QUIT: return( retFlag ) ;
    }

/*-------------------------------------------------------------------------*/

 #if PG_DEBUG

  _VOID  PaintCross( low_type _PTR  pLowData , _UCHAR  mark  ,
                    _SHORT     iCrossBeg     , _SHORT  iCrossEnd ,
                    _SHORT     jCrossBeg     , _SHORT  jCrossEnd )
          {
            _SHORT _PTR  X = pLowData->x   ;
            _SHORT _PTR  Y = pLowData->y   ;
            _UCHAR           MarkName[6]   ;

              if   ( mpr == 3 )
                   {
                     switch( mark )
                       {
                         case  CROSS  : HWRStrCpy( MarkName , "CROSS" );  break ;
                         case  STICK  : HWRStrCpy( MarkName , "STICK" );  break ;
                         case  HATCH  : HWRStrCpy( MarkName , "HATCH" );  break ;

                         default : err_msg(" PaintCross : Wrong mark ..." ) ;
                                     goto  QUIT ;
                       }

                      draw_arc( COLORC, X, Y,
                                iCrossBeg, iCrossEnd ) ;

                      draw_arc( COLORMIN , X, Y,
                                jCrossBeg, jCrossEnd ) ;

                      printw("\n mark = %s" , MarkName ) ;

                      printw("\n iCrossBeg = %d    iCrossEnd = %d " ,
                                 iCrossBeg ,       iCrossEnd ) ;

                      printw("\n jCrossBeg = %d    jCrossEnd = %d " ,
                                 jCrossBeg ,       jCrossEnd ) ;

                      brkeyw("\n ... ") ;

                      draw_arc( COLOR , X, Y,
                                iCrossBeg, iCrossEnd ) ;

                      draw_arc( COLOR , X, Y,
                                jCrossBeg, jCrossEnd ) ;
                   }

          QUIT : return ;
          }


 /*------------------------------------------------------------------------*/

  _VOID  DrawStr( low_type _PTR   pLowData    ,
                  p_POINTS_GROUP  pLastGrBord , p_POINTS_GROUP  pPrevGrBord )
    {
     p_SHORT  X = pLowData->x ;
     p_SHORT  Y = pLowData->y ;

       draw_arc( COLORMAX , X, Y,
                 pLastGrBord->iBeg, pLastGrBord->iEnd ) ;

       draw_arc( COLORMAXN , X, Y,
                 pPrevGrBord->iBeg, pPrevGrBord->iEnd ) ;

       printw("\n *** \n") ;
       printw("\n iBegLastStroke = %d    iEndLastStroke = %d ",
                  pLastGrBord->iBeg ,    pLastGrBord->iEnd ) ;

       printw("\n jBegPrevStroke = %d    jEndPrevStroke = %d ",
                  pPrevGrBord->iBeg ,    pPrevGrBord->iEnd ) ;

       brkeyw("\n ... ") ;

       draw_arc( COLOR , X, Y,
                 pLastGrBord->iBeg, pLastGrBord->iEnd ) ;

       draw_arc( COLOR , X, Y,
                 pPrevGrBord->iBeg, pPrevGrBord->iEnd ) ;

     QUIT : return ;
    }

 /*------------------------------------------------------------------------*/

 #endif


 /*------------------------------------------------------------------------*/

   #define    RAT_HORD0(X)   ( ((X)*10) >> 5 )
   #define    RAT_HORD1(X)   ( (X) >> 2 )

   #define    S_CUT_B        135
   #define    S_CUT_P        144

   #define    NN_CUT_C       12
   #define    NN_CUT_B       10

   #define    N_STOP_C       30
   #define    N_STOP_B       10


  _SHORT  Grab( low_type _PTR   pLowData    ,  _USHORT        uFlagWord ,
                p_POINTS_GROUP  pLastGrBord , p_POINTS_GROUP  pPrevGrBord )
    {
     p_SHORT  X         = pLowData->x       ;
     p_SHORT  Y         = pLowData->y       ;
      _INT    iBeg      = pLastGrBord->iBeg ;
      _INT    iEnd      = pLastGrBord->iEnd ;
      _INT    jBeg      = pPrevGrBord->iBeg ;
      _INT    jEnd      = pPrevGrBord->iEnd ;
       SPECL  LastCrossBr , PrevCrossBr     ;
      _INT    Limit , nnCut , nnCon , nSCon ;
      _SHORT  fl_Grab   = SUCCESS  ;
      _INT    il , jl              ;
      _INT    dX , dY , dr , dij   ;
      _INT    jStep, iStep , jNew  ;
      const _SHORT _PTR  Eps0    ;
      _SHORT  ModWord ;
      _LONG   dR      ;


       if  ( IS_PREV_STROKE || IS_LAST_STROKE )
           {
             nnCut = NN_CUT_C ;
             nnCon = 0        ;
             Eps0  = &eps2[0] ;  // Prefix bug fix; added by JAD. Feb 18, 2002;
								 // This is perhaps not necessary.
           }
       else if  ( IS_BREAK_BETWEEN )
           {
             Eps0  = &eps2[0] ;
             nnCut = NN_CUT_B ;
             nnCon = N_STOP_B ;
           }
       else
           {
               if  ( ( iBeg = iBeg + const1.lz0 + 1 ) >= iEnd )
                   { goto  QUIT ; }

             Eps0  = &eps0[0] ;
             nnCut = NN_CUT_C ;
             nnCon = N_STOP_C ;
           }

       if  ( IS_PREV_STROKE || IS_LAST_STROKE )
           {
            nSCon = S_CUT_B ;
           }
       else
           {
            nSCon = Eps0[LENTH_E-1] ;
           }

       for ( il = iBeg , iStep = ALEF ;  il <= iEnd ;  il += iStep )
         {
           NEXT0:

           CLOSE_CROSS
           NO_PROXIMITY

           if  ( IS_NO_BREAK_BETWEEN )
               {
                 jEnd = il - const1.lz0 - 1 ;
               }

           for ( jl = jEnd, jStep = 1, iStep = ALEF ;  jl >= jBeg ;  jl -= jStep )
             {
               dX  = X[il] - X[jl] ;
               dY  = Y[il] - Y[jl] ;
               dR  = (_LONG)dX*dX + (_LONG)dY*dY ;
               dr  = HWRILSqrt( dR ) ;
               dij = il - jl ;

                 if  ( dij > nnCon )
                     {
                       if  ( dR > nSCon )
                           {
                             jStep = HWRMax( 1 , RAT_HORD0( dr - nnCut )  ) ;
                             iStep = HWRMax( HWRMin( iStep, jStep-1 ) , 1 ) ;

                                 if  (    ( jl - jStep < jBeg )
                                       && ( jl != jBeg ) )
                                     {
                                       jStep = jl - jBeg ;
                                     }

                               continue ;
                           }
                     }
                 else
                     {
                       Limit = *( Eps0 + dij ) ;

                         if  ( dR > Limit )
                             {
                               Limit = HWRISqrt( Limit ) ;
                               jStep = HWRMax( 1 , RAT_HORD1( dr - Limit ) ) ;
                               iStep = HWRMax( HWRMin( iStep, jStep-1 ), 1 ) ;

                                 if  (    ( jl - jStep < jBeg )
                                       && ( jl != jBeg ) )
                                     {
                                       jStep = jl - jBeg ;
                                     }

                                 continue ;
                             }
                     }

                 if  ( AnyCrosCont( pLowData, il, jl, &jNew ) == UNSUCCESS )
                     {
                       fl_Grab = UNSUCCESS ;
                         goto  QUIT ;
                     }
                 else  if  ( jNew != UNDEF )
                     {
                       jStep = iStep = 1   ;
                       jl    = jNew        ;

                         continue ;
                     }

               PROXIMITY_ON
               OPEN_CROSS

                 if  ( IS_NO_BREAK_BETWEEN )
                     {
                       jEnd = il - const1.lz1 - 1 ;
                     }

               InitSpeclElement( &LastCrossBr ) ;
               InitSpeclElement( &PrevCrossBr ) ;

                 if  ( IS_NO_BREAK_BETWEEN )
                     {
                       jEnd = il - 1  ;
                     }

               LastCrossBr.ibeg = LastCrossBr.iend = (_SHORT)il ;
               PrevCrossBr.ibeg = PrevCrossBr.iend = (_SHORT)jl ;
               LastCrossBr.ipoint0 = (_SHORT)iEnd    ;
               LastCrossBr.ipoint1 = ALEF    ;
               PrevCrossBr.ipoint0 = (_SHORT)jl      ;
               PrevCrossBr.ipoint1 = (_SHORT)jBeg    ;

               Clash( pLowData    , uFlagWord    ,
                      pPrevGrBord , &LastCrossBr , &PrevCrossBr ) ;

                 if  ( IS_LAST_STROKE || IS_PREV_STROKE )
                     {
                       PrevCrossBr.mark = HATCH ;
                     }
                 else  if  ( IS_BREAK_BETWEEN )
                     {
                       PrevCrossBr.mark = CROSS ;
                     }
                 else
                     {
                       PrevCrossBr.mark = DrawEnds( pLowData,
                                   &LastCrossBr.ibeg, &PrevCrossBr.ipoint0 ) ;

                         if  ( PrevCrossBr.mark == STICK )
                             {
                               PrevCrossBr.iend = PrevCrossBr.ipoint0 ;
                             }
                     }

               LastCrossBr.mark = PrevCrossBr.mark ;

               ChkMrgCrs( pLowData, &ModWord, &LastCrossBr, &PrevCrossBr ) ;

                 if  ( (ModWord == NO_CONTACT) || (ModWord == UNDEF) )
                     {
                      #if PG_DEBUG

                        if  ( ModWord == UNDEF )
                            { err_msg( " Grab: Wrong cross check ..." ) ; }

                        if  ( mpr == 3 )
                            {
                              PaintCross( pLowData  , PrevCrossBr.mark ,
                                   LastCrossBr.ibeg , LastCrossBr.iend ,
                                   PrevCrossBr.ibeg , PrevCrossBr.iend ) ;
                            }
                      #endif

                       LastCrossBr.ipoint1 = UNDEF  ;
                       LastCrossBr.ipoint0 = UNDEF  ;

                         if  ( MarkSpecl( pLowData, &LastCrossBr )
                                                    == UNSUCCESS )
                             { fl_Grab = UNSUCCESS  ;  goto  QUIT ; }

                       PrevCrossBr.ipoint0 = UNDEF  ;
                       PrevCrossBr.ipoint1 = UNDEF  ;

                         if  ( MarkSpecl( pLowData, &PrevCrossBr )
                                                    == UNSUCCESS )
                             { fl_Grab = UNSUCCESS ;  goto  QUIT ; }
                     }

                 #if PG_DEBUG

                   if  ( ( ModWord == MOD_SKIP ) &&  ( mpr == 3 ) )
                       {
                         p_SPECL  pEndSpecl0 =
                                  pLowData->specl + pLowData->len_specl - 1 ;

                         p_SPECL  pEndSpecl1 = pEndSpecl0 - 1 ;

                         printw("\n Redraw Cross ...") ;

                         PaintCross( pLowData  , pEndSpecl0->mark ,
                              pEndSpecl1->ibeg , pEndSpecl1->iend ,
                              pEndSpecl0->ibeg , pEndSpecl0->iend ) ;
                       }
                 #endif


               CLOSE_CROSS



                 if  (    ( LastCrossBr.iend >= iEnd ) 
                       && ( PrevCrossBr.ibeg <= jBeg ) )
                     { goto  QUIT ;   }
                 else
                     {
                       jStep = 1 ;
                       iStep = ALEF ;

                         if  ( PrevCrossBr.ibeg > jBeg )
                             {
                               jl = PrevCrossBr.ibeg ;
                             }
                         else
                             {
                               il++ ;
                                 goto  NEXT0 ;
                             }
                     }
             }

         }

    QUIT: return( fl_Grab ) ;
    }


 /*------------------------------------------------------------------------*/

   #define   GET_LIMIT     if  ( IS_PREV_STROKE || IS_LAST_STROKE )                                 \
                               {                                                                    \
                                 Limit = S_CUT_P ;                                                  \
                               }                                                                    \
                           else  if  ( IS_BREAK_BETWEEN )                                           \
                               {                                                                    \
                                 Limit = FIVE_FOURTH( eps2[ (dij < LENTH_E) ? dij : LENTH_E-1 ] ) ; \
                               }                                                                    \
                           else                                                                     \
                               {                                                                    \
                                 Limit = eps1[ (dij < LENTH_E) ? dij : LENTH_E-1 ] ;                \
                               }

  _VOID   Clash( low_type _PTR   pLowData     ,   _USHORT  uFlagWord ,
                 p_POINTS_GROUP  pPrevGrBord  ,
                 p_SPECL         pLastCrossBr ,  p_SPECL   pPrevCrossBr )
    {
     _SHORT _PTR   X = pLowData->x                   ;
     _SHORT _PTR   Y = pLowData->y                   ;
     _LONG         dR                                ;
     _INT          iCrossBeg = pLastCrossBr->ibeg    ;
     _INT          iCrossEnd = pLastCrossBr->iend    ;
     _INT          iEnd      = pLastCrossBr->ipoint0 ;
     _INT          dRMin     = pLastCrossBr->ipoint1 ;
     _INT          jCrossBeg = pPrevCrossBr->ibeg    ;
     _INT          jCrossEnd = pPrevCrossBr->iend    ;
     _INT          jkMin     = pPrevCrossBr->ipoint0 ;
     _INT          jBeg      = pPrevCrossBr->ipoint1 ;
     _INT          jEnd      = pPrevGrBord->iEnd     ;
     _INT          iTmpEnd   = iCrossEnd + 1         ;
     _INT          jl = MEAN_OF( jCrossBeg , jCrossEnd ) ;
     _INT          ik , jk , dij , dRbeg             ;
     _INT          dX , dY ;
     _INT          Limit   ;

        dRbeg = HWRILSqrt( DistanceSquare( iCrossBeg, jkMin, X, Y ) ) ;
        dij   = iCrossBeg - jl ;
        GET_LIMIT

          for ( ik  = iCrossBeg , dR = dRbeg ;  ik <= iTmpEnd ; ik++ )
            {
              NO_PROXIMITY

              for  ( jk   = jl   ;
                   ( jk  <= jEnd ) &&
                   ( (dR <= Limit) || (jk <= jCrossEnd + const1.dlt0) )
                   ; jk++ )
                {
                  dij = ik - jk ;

                    if  ( IS_NO_BREAK_BETWEEN && ( dij <= const1.lz1 ) )
                        { continue ; }

                  dX = X[ik] - X[jk] ;
                  dY = Y[ik] - Y[jk] ;
                  dR = (_LONG)dX*dX + (_LONG)dY*dY ;

                  GET_LIMIT

                    if  ( dR <= Limit )
                        {
                          PROXIMITY_ON
                          jCrossEnd = HWRMax( jCrossEnd , jk ) ;

                            if  ( (ik == iCrossBeg) && (dR <= dRMin) )
                                {
                                  jkMin = jk ;
                                  dRMin = dR ;
                                }

                          jk = jCrossEnd ;
                        }
                }


              for  ( jk   = jl ,   dR = dRbeg ;
                   ( jk  >= jBeg ) &&
                   ( (dR <= Limit) || (jk >= jCrossBeg - const1.dlt0) )
                   ; jk-- )
                {
                  dij = ik - jk ;

                    if  ( IS_NO_BREAK_BETWEEN && ( dij <= const1.lz1 ) )
                        { continue ; }

                  dX  = X[ik] - X[jk] ;
                  dY  = Y[ik] - Y[jk] ;
                  dR  = (_LONG)dX*dX + (_LONG)dY*dY ;

                  GET_LIMIT

                    if  ( dR <= Limit )
                        {
                          PROXIMITY_ON
                          jCrossBeg = HWRMin( jCrossBeg , jk ) ;

                            if  ( (ik == iCrossBeg) && (dR <= dRMin) )
                                {
                                  jkMin = jk ;
                                  dRMin = dR ;
                                }

                          jk = jCrossBeg ;
                        }
                }

              if  ( IS_PROXIMITY )
                  {
                    if  ( ik >= iCrossEnd )
                      {
                        iCrossEnd = ik ;
                        iTmpEnd   = HWRMin( ik + 1 , iEnd ) ;
                      }
                  }

              if  ( IS_NO_PROXIMITY || ( ik == iEnd ) )
                  {
                    break ;
                  }
            }

        pLastCrossBr->ibeg    = (_SHORT)iCrossBeg ;
        pLastCrossBr->iend    = (_SHORT)iCrossEnd ;
        pLastCrossBr->ipoint1 = (_SHORT)dRMin     ;
        pPrevCrossBr->ibeg    = (_SHORT)jCrossBeg ;
        pPrevCrossBr->iend    = (_SHORT)jCrossEnd ;
        pPrevCrossBr->ipoint0 = (_SHORT)jkMin     ;

//    QUIT : 
     return ;
    }

 /*------------------------------------------------------------------------*/

 #endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\cross_g.cpp ===
/****************************************************************************/
/* The treatment of the crossings - the construction of circles and sticks  */
/****************************************************************************/

#include "hwr_sys.h"
#include "ams_mg.h"
#include "def.h"
#include "lowlevel.h"
#include "lk_code.h"
#include "calcmacr.h"
#include "low_dbg.h"

#if PG_DEBUG
#include "pg_debug.h"
#include "wg_stuff.h"
#endif


#define  MIN_SLOPE_TO_BE_ARC_UP  75
#define  MIN_SLOPE_TO_BE_ARC_DN  70 /*MIN_SLOPE_TO_BE_ARC_UP*/
#define  MIN_USEFUL_CROSS_SIZE   800
#define  GAMMA_THICK             30
#define  GAMMA_TOO_THIN          12

#define  NUM_POINTS_IU_UDL       15

#define COS_FOR_SIDE_GAMMA 70


#ifndef LSTRIP



typedef struct {
                 p_SPECL    pCross;
                 p_low_type low_data;
                 p_SPECL    pIUD_break;
                 _LONG      coss;
                 _RECT      CrossBox;
                 _SHORT     xd;
                 _SHORT     yd;
                 _INT       delta_gamm;
                 _INT       xPseudoCross;
                 _INT       yPseudoCross;
                 _INT       PointsRatioInCrossArea;
                 _INT       xBoxCenter;
                 _INT       yBoxCenter;
                 _INT       xRatioPseudoCross;
                 _INT       yRatioPseudoCross;
               } CrossInfoType, _PTR pCrossInfoType;

_BOOL  EndIUIDNearStick ( p_SPECL pIUID, p_SPECL pStick, p_SHORT x, p_SHORT y );
_VOID  CheckHorizSticks ( p_SPECL specl,
                          p_SHORT x, p_SHORT y );
_SHORT analize_sticks(p_low_type low_data);
_SHORT analize_circles(p_low_type low_data);
_SHORT del_inside_circles(p_low_type low_data);

_BOOL is_DDL(p_SPECL pTOCheck,p_SPECL wmin,p_low_type low_data);
_INT  GetMaxDxInGamma(_INT ibeg_cross,_INT iend_cross,_INT itop_cross,
                      p_SHORT x,p_SHORT y,_UCHAR code,
                      p_INT ibeg_max,p_INT iend_max);
_VOID check_IU_ID_in_crossing(p_SPECL _PTR p_IU_ID,p_SHORT x,p_SHORT y);
p_SPECL cross_little(p_SPECL cur
#if PG_DEBUG
                     ,p_SPECL nxt,p_SHORT x,p_SHORT y
#endif /* PG_DEBUG */
                    );

_VOID count_cross_box(p_SPECL cur,p_SHORT x,p_SHORT y,
                      p_RECT pbox,p_SHORT xd,p_SHORT yd);
_BOOL Isgammathin(pCrossInfoType pCrossInfo,p_SPECL wcur);
#if PG_DEBUG
_VOID dbg_print_crossing(pCrossInfoType pCrossInfo);
#endif /* PG_DEBUG */
_BOOL IsOutsideOfCrossing(p_SPECL cur,p_SPECL prv,p_SPECL nxt,
                          p_low_type low_data,
                          p_SPECL _PTR wrk,p_SPECL _PTR wcur,p_BOOL pbPrvSwap);
_VOID CheckInsideCrossing(p_SPECL cur,p_SPECL prv,p_SHORT pnum_arcs);
_BOOL IsDUR(p_SPECL pCrossing,p_SPECL wmin,p_SPECL wmax,p_low_type low_data);
_BOOL IsShapeDUR(p_SPECL p1stUp,p_SPECL p2ndUp,p_SPECL pLowUD,p_SPECL wmax,p_low_type low_data);

_VOID Decision_GU_or_O_(pCrossInfoType pCrossInfo);
_BOOL IsEndOfStrokeInsideCross(pCrossInfoType pCrossInfo);
_VOID  FillCrossInfo(p_low_type low_data,p_SPECL pCross,pCrossInfoType pCrossInfo);
_SHORT CheckSmallGamma(pCrossInfoType pCrossInfo);

/****************************************************************************/
_SHORT  lk_cross(p_low_type low_data) /* parsing of elements` crossings  */
{

#if PG_DEBUG
 if (mpr>4 && mpr<=MAX_GIT_MPR)
 {
   _INT  ydist = DY_RECT(low_data->box);

   printw("\n====  ydist=%d  ===============",ydist);
   printw("\ndimension of small circles o_little=%d",
           low_data->o_little);
 }
#endif

 analize_sticks(low_data);
 analize_circles(low_data);
 del_inside_circles(low_data);

return SUCCESS;
}  /***** end of lk_cross *****/

/*==========================================================================*/
/*==========================================================================*/
/*====              the first passage - the parsing of sticks            ===*/
/*==========================================================================*/
/*==========================================================================*/

/*  This function returns _TRUE, if ending MAX near STICK */
/* converted to some arc:                                 */

_BOOL  EndIUIDNearStick ( p_SPECL pIUID, p_SPECL pStick, p_SHORT x, p_SHORT y )
{
  _SHORT   iStickTop, iStickVeryBeg, iStickVeryEnd;

  DBG_CHK_err_msg( !Is_IU_or_ID(pIUID) || y[pIUID->iend+1]!=BREAK,
                   "EndIUIDNrStck: BAD elem");

     /*  If MAX lies ~within ~horiz.STICK, then this MAX shouldn't */
     /* produce code. Instead, the STICK should become arc         */
     /* (_UDL_,_UDR_,_UUL_,UUR_).                                  */

  if  (   pStick != _NULL
       && pStick->mark == STICK
       && pIUID->ibeg >= pStick->ibeg /*CHE*/
      )  { /*10*/
    pStick = pStick->prev;
    iStickTop     = pStick->ibeg;
    iStickVeryBeg = pStick->next->ibeg;
    iStickVeryEnd = pStick->iend;
    DBG_CHK_err_msg(    !pStick || pStick->mark!=STICK
                     || y[iStickTop]==BREAK  || y[iStickVeryEnd]==BREAK
                     || !pStick->prev,
                     "EndIUIDNrStck: BAD Stick");
    if  (   MID_POINT(pIUID) < iStickVeryEnd
         && ONE_HALF(HWRAbs(x[iStickVeryEnd] - x[iStickTop]))
                   > HWRAbs(y[iStickVeryEnd] - y[iStickTop])
        )  { /*20*/

      _INT     iBetween, iRefForDir;
      p_SPECL  pPrev; //, pToDel;
      _UCHAR   code;
      /*_UCHAR fb; */

         /*  Find closest elem with beginning before STICK. */
         /* Then find the middle point between this elem    */
         /* and the tip of STICK:                           */

      for  ( pPrev=pStick->prev;
             pPrev!=_NULL;
             pPrev=pPrev->prev )  {
        if  ( IsAnyCrossing(pPrev) )
          continue;
        if  (   IsAnyAngle(pPrev)
             && HWRAbs( y[pPrev->iend] - y[iStickVeryBeg] ) < ONE_EIGHTTH(DY_STR)
            )
          continue;
        if  ( pPrev->ibeg < iStickVeryBeg )  break;
      }
      if  ( pPrev==_NULL || pPrev->prev==_NULL )
        return  _FALSE;    /* there was nothing before */
      iBetween   = MEAN_OF( MID_POINT(pPrev), iStickVeryBeg );
      if  ( pPrev->iend > iStickVeryBeg )  { /* go out of crossing farther away */
        p_SPECL  pPrevPrev;
        for  ( pPrevPrev=pPrev->prev;
               pPrevPrev!=_NULL;
               pPrevPrev=pPrevPrev->prev )  {
          if  ( IsAnyCrossing(pPrevPrev) )
            continue;
          if  (   IsAnyAngle(pPrevPrev)
               && HWRAbs( y[pPrevPrev->iend] - y[iStickVeryBeg] ) < ONE_EIGHTTH(DY_STR)
              )
            continue;
          if  ( pPrevPrev->iend <= iStickVeryBeg )  break;
        }
        if  ( pPrevPrev!=_NULL && pPrevPrev->prev!=_NULL )  {
          pPrev = pPrevPrev;
          iBetween = MEAN_OF( MID_POINT(pPrev), iStickVeryBeg );
        }
      }
      iRefForDir = iMostFarFromChord( x, y, iBetween, iStickTop );
      if  ( x[iRefForDir] == x[iStickTop] )
        iRefForDir = MEAN_OF( iBetween, iRefForDir );

          /*  Find out what elem this arc should be: */

      if  ( y[iBetween] > y[iStickTop] )  { /*upper arc*/
        if  ( x[iRefForDir] < x[iStickTop] )  {
          code = _DUR_; /*_UUR_;   fb = _f_;*/
        }
        else  {
          code = _DUL_; /*_UUL_; fb = _b_;*/
        }
      }
      else  { /*lower arc*/
        if  ( x[iRefForDir] < x[iStickTop] )  {
          code = _DDR_; /*_UDR_;      fb = _b_;*/
        }
        else  {
          code = _DDL_; /*_UDL_;      fb = _f_;*/
        }
      }

          /*  Write down the new info into elem: */

      /* DBG_err_msg("Arc made from MAX-END"); */
#if 0
      pIUID->code = code;
      pIUID->ibeg = iStickVeryBeg;
      pIUID->iend = pStick->next->iend;
      pIUID->ipoint1 = UNDEF; /*For Guitman not to try to cut double-moves*/
      /* ASSIGN_CIRCLE_DIR(pIUID,fb); */
      DelCrossingFromSPECLList(pStick);

         /*  Del the elem that could be prevoiusly extracted */
         /* from the crossing:                               */

      if  (   (   (pToDel=pIUID->prev) != _NULL
               && pToDel->code != _NO_CODE
               && CrossInTime(pToDel,pIUID)
              )
           || (   (pToDel=pIUID->next) != _NULL
               && pToDel->code != _NO_CODE
               && CrossInTime(pToDel,pIUID)
              )
          )
        DelFromSPECLList(pToDel);
#else
      pStick->code = code;
#endif /* if 0 */

      return  _TRUE;

    } /*20*/
  } /*10*/

  return  _FALSE;

} /*EndIUIDNearStick*/
/*********************************************/


_VOID  CheckHorizSticks ( p_SPECL specl,
                          p_SHORT x, p_SHORT y )
{
  p_SPECL  pElem, pPrev;

  for  ( pElem=specl->next;
         pElem;
         pElem=pElem->next )  { /*10*/

    if  (   Is_IU_or_ID(pElem)
         && y[pElem->iend+1] == BREAK
         && (pPrev=pElem->prev) != _NULL
        )  {
         p_SPECL  pStick;

         for  ( pStick=pPrev;
                pStick!=_NULL && pStick->mark!=BEG;
                pStick=pStick->prev
              )  {
           if  ( pStick->mark == STICK ) {

             if  ( CrossInTime( pStick->prev, pElem ) )  {
               EndIUIDNearStick( pElem, pStick, x, y );
               break;
             }

             pStick = pStick->prev;

           }
         }
    }

  } /*10*/

} /*CheckHorizSticks*/
/*********************************************/


_SHORT analize_sticks(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,                /* x, y - co-ordinates            */
         y=low_data->y;
 p_SPECL cur,                 /* the index of the current element        */
         prv,                 /*           of the previous element       */
         nxt,                 /*           of the next element           */
         wmin,                /*           of min                        */
         wmax,                /*           of max                        */
         wcur;                /*           of working element            */
 _SHORT num_uu,num_ud,
        num_iu,num_id;        /* the number of maximums and minimums     */
 _SHORT  iExtr, iCurBeg;
 _LONG coss;                  /* the cosine of crossing angle            */
 _UCHAR fb;                   /* round of circle direction               */
 _SHORT slope=low_data->slope;


//CheckHorizSticks( specl, x, y );

cur=specl;
while ( cur != _NULL)
 {
   if (cur->mark == STICK )                          /* if crossing         */
    {                                                /*    is stick         */
      /* analyse min and max number */
      prv= cur->prev; nxt= cur->next;
      /* min and max number  */
      num_uu = 0; num_ud = 0; num_iu=0; num_id=0;

      DBG_ShowElemsGT5(cur,nxt,x,y,GT5_SHOWBEGEND,_NULL);

      iCurBeg=cur->ibeg;
      wcur=cur;
      wcur = FindMarkRight (wcur,END);
      if(wcur!=_NULL && Is_IU_or_ID(wcur) && EndIUIDNearStick(wcur,nxt,x,y))
       {
         SetNewAttr(cur,HeightInLine(y[cur->ibeg],low_data),0);
         goto prt_dbg_info;
       }
      if(wcur!=_NULL           &&
         cur->iend==wcur->iend &&
         DistanceSquare(iCurBeg,wcur->iend,x,y)<MIN_USEFUL_CROSS_SIZE
        )
       {
         cur=cross_little(cur
#if PG_DEBUG
         ,nxt,x,y
#endif /* PG_DEBUG */
         );
         wcur->other|=WAS_INSIDE_STICK;
         goto NEXT;
       }
      if(prv->mark==CROSS)
       prv=prv->prev;
      /* still inside the crossing */
      while ( (prv->ibeg >= nxt->ibeg) && (prv != specl) )
       {
         switch (prv->mark)
          {
            case MINW:
                    wmin = prv;                      /* remember the last   */
                    if(prv->code==_IU_) num_iu++;
                    else                num_uu++;    /* count minimums      */
                    DBG_BlinkShowElemGT5(prv,x,y,COLORMIN);
                    break;
            case MAXW:
                    wmax = prv;                      /* remember the last   */
                    if(prv->code==_ID_) num_id++;
                    else                num_ud++;    /* count maximums      */
                    DBG_BlinkShowElemGT5(prv,x,y,COLORMAX);
                    break;
            case BEG:
                    if(nxt->ibeg!=prv->ibeg ||
                       DistanceSquare(nxt->iend,prv->ibeg,x,y) >= MIN_USEFUL_CROSS_SIZE
                      )
                     goto STICKS;
                    else
                     {
                       cur=cross_little(cur
#if PG_DEBUG
                       ,nxt,x,y
#endif /* PG_DEBUG */
                       );
                       if(num_id==1 || num_ud==1)
                        wmax->other|=WAS_INSIDE_STICK;
                       if(num_iu==1 || num_uu==1)
                        wmin->other|=WAS_INSIDE_STICK;
                       if(num_iu==0 && num_uu==0 && num_id==0 && num_ud==0 &&
                          Is_IU_or_ID(prv))
                        prv->other|=WAS_INSIDE_STICK;
                       goto NEXT;
                     }
          }
         prv= prv->prev;
         if(prv->mark==CROSS) prv=prv->prev;
       }
STICKS:
      /* if it is something unusual   */
      if(num_iu==1 && num_id==1 && num_uu==0 &&
         num_ud==0)
       {
         if(IsDUR(cur,wmin,wmax,low_data))
          goto prt_dbg_info;
         SET_CLOCKWISE(wmin);
         SET_COUNTERCLOCKWISE(wmax);
         cur=cross_little(cur
#if PG_DEBUG
         ,nxt,x,y
#endif /* PG_DEBUG */
         );
         goto NEXT;
       }
      /* if it is empty     */
      if(num_iu==0 && num_id==0 && num_uu==0 &&
         num_ud==0)
       {
         if(IsDUR(cur,_NULL,_NULL,low_data))
          goto prt_dbg_info;
         if(x[cur->ibeg]>x[cur->iend])
              cur->code=_Gr_;//_ANr;
         else cur->code=_Gl_;//_ANl;
         cur->attr=HeightInLine(y[cur->ibeg], low_data);
       }
      else
       {
         if((num_iu==1 || num_uu==1) &&
             num_id==0 && num_ud==0)                /* upper element    */
          {
            if(is_DDL(cur,wmin,low_data))
             goto prt_dbg_info;
            iExtr=extremum(wmin->mark,wmin->ibeg,wmin->iend,y);/*search for extremum point*/
/*            coss=cos_normalslope(iExtr,
                                 x[wmin->ibeg]<x[wmin->iend]?wmin->ibeg:wmin->iend,
                                 slope,x,y);
*/
            coss=cos_normalslope(cur->ibeg,
                                 cur->ibeg+ONE_THIRD(cur->iend-cur->ibeg)
                                 /*MID_POINT(cur)*/,slope,x,y);
            #if PG_DEBUG
               if(mpr>5 && mpr<=MAX_GIT_MPR) printw("\n cos=%ld ",coss);
            #endif
            /* according to the slope */
            {
              _INT min_slope_to_be_arc_up=MIN_SLOPE_TO_BE_ARC_UP;

              if(HEIGHT_OF(wmin)<=_UE2_)
               min_slope_to_be_arc_up+=10;
              if(HWRAbs((_SHORT)coss)>=min_slope_to_be_arc_up)
               {
                 fb=0x00;
                 if(num_uu==1 && wmin->iend>cur->iend)
                  cur->code=_DUL_;
                 else if(x[iExtr]>=x[nxt->ibeg])
                  cur->code=_DUR_;
                 else
                  cur->code=_DUL_;
               }
              else
               {
                 fb=CIRCLE_DIR(wmin);
                 cur->code=_IU_;
               }
              SetNewAttr(cur,HeightInLine(y[cur->ibeg],low_data),fb);
            }
          }
         else if((num_id==1 || num_ud==1) && num_iu==0 && num_uu==0)
          {
            if(IsDUR(cur,_NULL,wmax,low_data))
             goto prt_dbg_info;
            DBG_CHK_err_msg( cur->mark != STICK,
                             "anl_stk: BAD MAX-STICK" );
            coss=cos_normalslope(cur->ibeg,
                                 cur->ibeg+ONE_THIRD(cur->iend-cur->ibeg)
                                 /*MID_POINT(cur)*/,slope,x,y);
         /*CHE
            coss=cos_normalslope(iExtr,
                                     x[wmax->iend]>x[wmax->ibeg]?wmax->iend:wmax->ibeg,
                                     slope,x,y);
         */
            #if PG_DEBUG
              if(mpr>5 && mpr<=MAX_GIT_MPR) printw("\n cos=%ld ",coss);
            #endif
            /* according to the slope */
            if(HWRAbs((_SHORT)coss)>=MIN_SLOPE_TO_BE_ARC_DN)
             {
               fb=0x00;
               /* if(x[iExtr]<=x[wmax->ibeg]) */
               if(x[cur->ibeg]<=x[nxt->ibeg])
                cur->code=_DDL_;
               else
                cur->code=_DDR_;
             }
            else
             {
               fb=CIRCLE_DIR(wmax);
               cur->code=_ID_;                /* otherwise -it`s the stick*/
             }
            SetNewAttr(cur,HeightInLine(y[cur->ibeg],low_data),fb);
          }
         else if(num_uu==1 && num_ud==1)
          {
            _INT DxWmin=HWRAbs(x[wmin->ibeg]-x[wmin->iend]);
            _INT DxWmax=HWRAbs(x[wmax->ibeg]-x[wmax->iend]);
            if(DxWmin>DxWmax && IsDUR(cur,wmin,wmax,low_data) ||
               DxWmin<DxWmax && is_DDL(cur,wmin,low_data))
             goto prt_dbg_info;
          }
         else if(num_uu==2 && num_id+num_ud==1 ||
                 num_uu==1 && num_id==1) /* upper element */
          {
            if(IsDUR(cur,wmin,wmax,low_data) || CLOCKWISE(wmin))
             goto prt_dbg_info;
            if(HWRAbs(y[MID_POINT(wmin)]-y[MID_POINT(wmax)])>
               THREE_FOURTH(DY_STR))
             {
               cur->code=_ID_;
               SetNewAttr(cur,HeightInLine(y[wmax->ipoint0],low_data),
                              CIRCLE_DIR(wmax));
               if((nxt->next)->code==_UU_ &&
                  CIRCLE_DIR(wmin)==CIRCLE_DIR(nxt->next))
                wmin->code=_IU_;
             }
            else
             {
               cur->code=_DUL_;
               SetNewAttr(cur,HeightInLine(y[wmin->ipoint0],low_data),0);
             }
          }
         else if(num_ud==1 && num_iu==1)  /* low or side element */
          {
            if(is_DDL(cur,wmin,low_data))
             goto prt_dbg_info;
            coss=cos_normalslope(cur->ibeg,cur->iend,slope,x,y);
            #if PG_DEBUG
              if (mpr>5 && mpr<=MAX_GIT_MPR)
               printw("\n cos=%ld%%",coss);
            #endif /* PG_DEBUG */
            if(HWRAbs(coss)>COS_FOR_SIDE_GAMMA)
             {
               if(x[cur->iend]>x[cur->ibeg])
                cur->code=_Gl_;
               else
                cur->code=_Gr_;
               SetNewAttr(cur,HEIGHT_OF(wmin),0);
             }
          }
       }

prt_dbg_info:
      DBG_ShowElemsGT5(cur,nxt,x,y,GT5_SHOWNAMEATTR,_NULL);

      /* delete interiors of crossings */
      prv=cur->prev;
      if(cur->code==_NO_CODE)
       {
         DelCrossingFromSPECLList(cur);
         cur=prv;
         goto NEXT;
       }
      if(prv->mark==CROSS)
       prv=prv->prev;
      /* still inside the crossings and to the beginning */
      while((prv->ibeg >= nxt->ibeg) &&
            (prv->mark != BEG) && (prv!=_NULL) )
       {
         if((prv->mark!=CROSS) &&
            (!(cur->code==_IU_ && (prv->code==_ID_ || prv->code==_UD_) ||
               cur->code==_ID_ && (prv->code==_IU_ || prv->code==_UU_)
              )
            )
           )
          DelFromSPECLList (prv);
         prv=prv->prev;
         if(prv->mark==CROSS) prv=prv->prev;
       }
/*  if(prv->mark==CROSS)
      prv=prv->next;
*/
      /* pull into the elements which jut out the arcs */
      wcur=prv->next;
      if(cur->code==_DUR_)
       {
         if((prv->code==_UU_) && (prv->iend>=nxt->ibeg))
          prv=prv->prev;
         if((prv->mark==BEG) && (prv->code==_ID_) &&
            (prv->iend>=nxt->ibeg))
          prv=prv->prev;
         Attach2ndTo1st (prv,wcur);
       }
      if((cur->code==_DDL_) && (prv->code==_UD_) &&
         (prv->iend>=nxt->ibeg-2))
       {
         prv=prv->prev;
         Attach2ndTo1st (prv,wcur);
       }

      /* try to restore angle "under" STICK */
      if(cur->code==_IU_ || cur->code==_DUR_)
       Restore_AN(low_data,cur,NOT_RESTORED | WAS_DELETED_BY_STICK,2);

      /* determine the beginning of crossing,
         delete the second element of crossing */
      nxt = cur->next;
      cur->ipoint0=cur->ibeg;
      switch ((_SHORT)cur->code)
       {
         case _IU_:
                     if(num_iu==1 && num_id==0 && num_uu==0 && num_ud==0)
                      cur->ipoint0=wmin->ipoint0;
                     cur->ibeg = nxt->ibeg;
                     break;
         case _ID_:
                     if(num_id==1 && num_iu==0 && num_uu==0 && num_ud==0)
                      cur->ipoint0=wmax->ipoint0;
                     cur->ibeg = nxt->ibeg;
                     break;
         case _DUR_:
         case _DUL_:
         case _DDL_:
                     cur->ipoint1=nxt->iend;
         default:
                     cur->ibeg = nxt->ibeg;
       }
      nxt = nxt->next;
      Attach2ndTo1st(cur,nxt);

      /* pull into the elements which jut out the arcs */
      if((cur->code==_DUR_) && (nxt->code==_UU_) &&
         CrossInTime (cur,nxt) )
       {
         nxt=nxt->next;
         Attach2ndTo1st(cur,nxt);
       }
      if(cur->code==_DDL_ && Is_IU_or_ID(nxt) && nxt->mark==END &&
         CrossInTime(cur,nxt) && cur->iend>=nxt->iend)
       DelFromSPECLList(nxt);
#if 0
      if(cur->code==_DDL_)
       {
         if((nxt->code==_UD_) && CrossInTime(cur,nxt))
          nxt=nxt->next;
         if((nxt->code==_IU_) && (nxt->mark==END) && CrossInTime(cur,nxt))
          nxt=nxt->next;
         Attach2ndTo1st(cur,nxt);
       }
#endif /* if 0 */
      if(Is_IU_or_ID(cur))
       check_IU_ID_in_crossing(&cur,x,y);
    }

NEXT:
   cur=cur->next;
 }

#if PG_DEBUG
 if(mpr>5 && mpr<=MAX_GIT_MPR) brkeyw("\n I'm waiting");
#endif

return SUCCESS;

}  /***** end of analize_sticks *****/

/****************************************************************************/
/* This program deletes little crossing                                     */
/****************************************************************************/
p_SPECL cross_little(p_SPECL cur
#if PG_DEBUG
                     ,p_SPECL nxt,p_SHORT x,p_SHORT y
#endif /* PG_DEBUG */
                    )
{
  DBG_ShowElemsGT5(cur,nxt,x,y,GT5_SHOWMSG,"\n cross small");
  DelCrossingFromSPECLList(cur);

  return(cur->next);

} /* end of cross_little */

/*==========================================================================*/
/*==========================================================================*/
/*====              the second passage - parsing of circles              ===*/
/*==========================================================================*/
/*==========================================================================*/
_SHORT analize_circles(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,                /* x, y - co-ordinates            */
         y=low_data->y;
 p_SPECL cur,               /* the index of the current element        */
         prv,               /*           of the previous element       */
         nxt,               /*           of the next element           */
         wmin,              /*           of min                        */
         wmax,              /*           of max                        */
         wcur,              /*           of working element            */
         pIUD_break;
 _INT i,j,k,                     /* counters                             */
      num_uu_break,num_ud_break,
      num_iu_break,num_id_break,
      num_uu,num_ud,
      num_iu,num_id;             /* the number of maximums and minimums     */
 _SHORT yd,xd;                      /* dimensions of circle on x, y         */
 _LONG coss;                     /* the cosine of crossing angle            */
 _BOOL  bConvert_to_Gs;  /*FORMULA*/
 _BOOL  bConvert_GD_to_O_;
 _BOOL  bConvert_GU_to_O_;
 _UCHAR fb;                      /* round of circle direction               */
 _INT delta_gamm,ibeg_max,iend_max;
 _BOOL  bWasSTICK_IU;
 CrossInfoType CrossInfo;

cur=specl;
while ( cur != _NULL)
{ if ((cur->mark == CROSS) && (cur->code==_NO_CODE))     /* if it`s crossing    */
 {
/****************************************************************************/
/*****               analizing number min and max                        ****/
/****************************************************************************/
  prv= cur->prev; nxt= cur->next;                   /* prv-previous elements*/
  wmin=wmax=pIUD_break=_NULL;
  num_uu = 0; num_ud = 0; num_iu=0; num_id=0;        /* min and max number  */
  num_uu_break=0; num_ud_break=0;
  num_iu_break=0; num_id_break=0;
  fb= 0x00;

  bWasSTICK_IU=_FALSE;
  DBG_ShowElemsGT5(cur,nxt,x,y,GT5_SHOWBEGEND,_NULL);

  cur->other=0;
  if(prv->mark==CROSS && prv->code!=_NO_CODE)
         if(nxt->ibeg<=prv->iend &&
            cur->iend>=(prv->prev)->iend)
           goto NEXT_1;
   else prv=prv->prev;
  else
   {
     while(prv->mark==STICK)
        if(nxt->ibeg<=prv->ibeg &&
           cur->iend>=prv->iend)
         goto NEXT_1;
        else prv=prv->prev;
     if(prv->mark==CROSS)
      if(prv->code!=_NO_CODE &&
         nxt->ibeg<=prv->iend &&
         cur->iend>=(prv->prev)->iend)
           goto NEXT_1;
      else prv=prv->prev;
   }
      /* still inside the crossings*/
  while ( (prv->ibeg >= nxt->ibeg) && (prv != specl) )
       {
        switch (prv->mark)
        { case MINW:
                    if(prv->iend>=cur->ibeg ||
                       prv->ibeg<=nxt->iend)
                     { if(prv->code==_IU_)
                         num_iu_break++;
                       else
                         num_uu_break++;             /*minimum, got into    */
                       break;                        /* the crossing        */
                     }

                    DBG_BlinkShowElemGT5(prv,x,y,COLORMIN);

                    wmin = prv;                      /* remember the last   */
                    if(prv->code==_IU_) num_iu++;    /* count the sticks up */
                    else
                     {
                       num_uu++;                        /* count the arcs up   */
                       if ( fb!=0x00 && fb!=CIRCLE_DIR(prv) )
                        goto NEXT_1;
                       fb= CIRCLE_DIR(prv);    /* direction of round  */
                     }
                    break;
          case MAXW: if(prv->iend>=cur->ibeg || /* maximum, got into the crossing */
                       prv->ibeg<=nxt->iend)
                     {
                       if(prv->code==_ID_)
                        num_id_break++;
                       else
                        num_ud_break++;
                       pIUD_break=prv;
                       break;
                     }

                    DBG_BlinkShowElemGT5(prv,x,y,COLORMAX);

                    wmax = prv;                      /* remember the last   */
                    if(prv->code==_ID_)            /* count the sticks down */
                     num_id++;
                    else                             /*count the arcs down  */
                     {
                       num_ud++;
                       if( fb!=0x00 &&
                           fb!=CIRCLE_DIR(prv) )
                         goto NEXT_1;
                       fb= CIRCLE_DIR(prv); /* the direction of round */
                     }
                    break;
          case BEG: /* verification on BEG - is crossing good */
                    if((prv+1)->mark==STICK)
                     break;
                    wcur=prv->prev;
                    while(wcur->mark==HATCH || wcur->mark==BEG)
                      wcur=wcur->prev;
                    if(   (IsAnyBreak(wcur) || IsXTorST(wcur))
                       && (nxt->ibeg<=wcur->ibeg)
                      )
                     {
#if PG_DEBUG
                       if(mpr>4 && mpr<=MAX_GIT_MPR)
                        printw("\n cross bad: ibeg=%d, iend=%d, ibeg=%d, iend=%d",
                               cur->ibeg,cur->iend,nxt->ibeg,nxt->iend);
#endif /* PG_DEBUG */
                           goto NEXT_1;
                     }
                    goto NUM;
          case DROP:
#if PG_DEBUG
                       if(mpr>4 && mpr<=MAX_GIT_MPR)
                        printw("\n cross bad: ibeg=%d, iend=%d, ibeg=%d, iend=%d",
                               cur->ibeg,cur->iend,nxt->ibeg,nxt->iend);
#endif /* PG_DEBUG */
                           goto NEXT_1;
        }
        prv= prv->prev;
        /* if one crossing is inside the other it is bad */
        if( (prv->mark==CROSS && prv->code!=_NO_CODE) ||
            (prv->mark==STICK) )
         {
           if(nxt->ibeg<=prv->ibeg)
            if(prv->mark==STICK && prv->code==_IU_)
             bWasSTICK_IU=_TRUE;
            else
             goto NEXT_1;
           prv=prv->prev;
         }
        if((prv->mark==CROSS) && (prv->code==_NO_CODE))
          prv=prv->prev;
       }
NUM:if ((num_uu==0) && (num_ud==0) &&                /* if the crossing     */
        (num_iu==0) && (num_id==0))                /* is empty then suppose */
        {
          if(bWasSTICK_IU)
           goto NEXT_1;
          /* no absolutely empty crossings allowed */
          if(num_uu_break==0 && num_ud_break==0 && num_iu_break==0 && num_id_break==0)
           goto NEXT_1;
          /* no small gammas on Katia's (special) circles */
          if(nxt->other==CIRCLE_NEXT)
           goto NEXT_1;
          FillCrossInfo(low_data,cur,&CrossInfo);
          xd=CrossInfo.xd; yd=CrossInfo.yd;
          cur->attr=HeightInLine(YMID_RECT(CrossInfo.CrossBox),low_data);
        /* if the crossing is big */
        if(   (xd>low_data->o_little && xd<TWO(yd))
           || yd>low_data->o_little)
         {
          if(num_uu_break+num_ud_break==0)
           {
             if(num_iu_break==1)
              {
                cur->code=nxt->code=_GUs_;
                cur->attr = HeightInLine(CrossInfo.CrossBox.top,low_data);
              }
             if(num_id_break==1)
              {
                cur->code=nxt->code=_GDs_;
                cur->attr = HeightInLine(CrossInfo.CrossBox.bottom,low_data);
              }
           }
          else if(num_uu_break+num_ud_break<=3 /*&&
                  num_iu_break+num_id_break==0*/)
           {
             if(pIUD_break!=_NULL && IsDUR(cur,_NULL,pIUD_break,low_data))
              goto NEXT_1;
             prv=cur->prev;
             while(prv!=_NULL && prv->code!=_UU_ &&
                   prv->code!=_UD_)
               prv=prv->prev;
             if(prv!=_NULL &&
                (num_uu_break+num_ud_break==2 || yd>xd ||
                 yd>=THREE_FOURTH(DY_STR) &&
                 xd>=THREE_FOURTH(DY_STR)
                )
               )
              {
                cur->code=nxt->code=_O_;            /* the circle          */
                ASSIGN_CIRCLE_DIR(cur,CIRCLE_DIR(prv));
              }
           }
         }
         if(cur->code==0)
          CheckSmallGamma(&CrossInfo);
#if PG_DEBUG
        dbg_print_crossing(&CrossInfo);
#endif
        goto NEXT_1;
      }
          if(bWasSTICK_IU && (fb==0 || fb==_f_))
           goto NEXT_1;
           /* checking forward-backward moving in p,s,k */
           {
           _BOOL bCircleType=_FALSE;
           if(num_uu==1 && num_ud==1 && HEIGHT_OF(wmin)<=_UI1_)
            bCircleType=_TRUE;
           if((num_iu+num_uu==1) &&
              !bCircleType       &&
              /* && num_id==0 && num_uu==0 && num_ud==1 */
              is_DDL(cur,wmin,low_data))
            {
              nxt->code=cur->code;
              goto NEXT_1;
            }
           }
           /* checking forward-backward moving in a,c,d,g,o,q */
//           if(num_uu==1 && num_id==1 && num_ud_break==0 &&
//              IsDUR(cur,wmin,wmax,low_data)
           {
             p_SPECL pLow=_NULL;
             if((num_id==1 && num_id_break==0) ||
                (num_ud==1 && num_ud_break==0)
               )
              pLow=wmax;
             else if((num_id==0 && num_id_break==1) ||
                     (num_ud==0 && num_ud_break==1)
                    )
              pLow=pIUD_break;
             if(pLow!=_NULL && HEIGHT_OF(pLow)<=_DI2_ &&
                IsDUR(cur,wmin,pLow,low_data))
              {
                nxt->code=cur->code;
                goto NEXT_1;
              }
           }
           if( ((num_uu+num_ud==1) &&                /* gamma               */
                (num_iu+num_id==0)) ||               /*     or              */
               ((num_uu+num_ud==0) &&                /*       stick         */
                (num_iu+num_id==1))  )
           {
           if ((num_ud==1) || (num_id==1) && !bWasSTICK_IU)
              cur->code=_GD_;                        /* gamma down          */
           else if(bWasSTICK_IU)
            goto NEXT_1;
           if ((num_uu==1) || (num_iu==1))
             cur->code=_GU_;                         /* gamma up            */
           if(cur->iend-cur->ibeg==1)
                i=cur->iend;
           else i=MID_POINT(cur);
           if(nxt->iend-nxt->ibeg==1)
                j=nxt->ibeg;
           else j=MID_POINT(nxt);
           /* filling out all nessesary info about crossing */
           FillCrossInfo(low_data,cur,&CrossInfo);
           CrossInfo.pIUD_break=pIUD_break;
           xd=CrossInfo.xd; yd=CrossInfo.yd;
           /* count cosine of crossing angle  */
           coss=cos_vect(cur->ibeg,i,j,nxt->iend,x,y);
           CrossInfo.coss=coss;
           if (cur->code==_GU_)
            wcur=wmin;
           else
            wcur=wmax;
           cur->ipoint0=wcur->ipoint0;
           /* k - middle of the extremum of  gamma */
           k = MID_POINT(wcur);
           cur->attr=HeightInLine(y[k], low_data);
           if(bWasSTICK_IU && HEIGHT_OF(cur)>_DI2_)
            {
              cur->code=nxt->code=0;
              goto NEXT_1;
            }
           i = MID_POINT(nxt);
           j = MID_POINT(cur);
           delta_gamm=GetMaxDxInGamma(i,j,k,x,y,cur->code,
                                            &ibeg_max,&iend_max);
           CrossInfo.delta_gamm=delta_gamm;
           /* save for future use in the next part of crossing */
           nxt->ipoint0 = (_SHORT)(ibeg_max-nxt->ibeg + ((cur->iend-iend_max)<<8));
           nxt->ipoint1 = (_SHORT)delta_gamm;
#if PG_DEBUG
           dbg_print_crossing(&CrossInfo);
#endif

           if(Isgammathin(&CrossInfo,wcur))
            {
              if(bWasSTICK_IU)
               cur->code=nxt->code=0;
              goto NEXT_1;

            }
/*           if(delta_gamm<GAMMA_THICK)
        if(cur->code==_GU_) SetBit(cur,X_IU);
            else                SetBit(cur,X_ID);
*/

           if(cur->code==_GU_ && wmin->code==_IU_)
             {
               cur->other |= NO_ARC;
               wmin->code=_UU_;
               if(x[iend_max]>x[ibeg_max]) fb=_f_;
               else                        fb=_b_;
               ASSIGN_CIRCLE_DIR(wmin,fb);
             }
           else if(cur->code==_GD_ && wmax->code==_ID_)
             {
               cur->other |= NO_ARC;
               wmax->code=_UD_;
               if(x[iend_max]>x[ibeg_max]) fb=_b_;
               else                        fb=_f_;
               ASSIGN_CIRCLE_DIR(wmax,fb);
             }
           bConvert_GD_to_O_=(cur->code==_GD_ && HEIGHT_OF(cur)<_DS1_ &&
                              (fb==_f_ && coss>OCOS ||
                               fb==_b_ &&
                               (HEIGHT_OF(cur)>_MD_ && (cur->other & NO_ARC)==0 ||
                                delta_gamm>GAMMA_THICK)));
           if(cur->code==_GU_          && COUNTERCLOCKWISE(wcur) &&
              HEIGHT_OF(wcur)<_DI1_    && HEIGHT_OF(wcur)>_US2_  &&
              (cur->other & NO_ARC)==0 && delta_gamm>MEAN_OF(GAMMA_THICK,GAMMA_TOO_THIN)
             )
            Decision_GU_or_O_(&CrossInfo);
           bConvert_GU_to_O_=(cur->code==_O_);
           if(bConvert_GU_to_O_)
            cur->other |= WAS_CONVERTED_FROM_GU;
           if  ( bConvert_GD_to_O_ || bConvert_GU_to_O_)
            {
              cur->code=_O_;                     /* turn into the circle    */
              SetNewAttr(cur,HeightInLine(YMID_RECT(CrossInfo.CrossBox),low_data),fb);
            }
           goto OLITTLE;
           }
           if((num_uu==1) && (num_ud==1) && (num_iu+num_id==0))
            {
              cur->code=nxt->code=_O_;
              /* filling out all nessesary info about crossing */
              FillCrossInfo(low_data,cur,&CrossInfo);
              xd=CrossInfo.xd; yd=CrossInfo.yd;
              SetNewAttr(cur,HeightInLine(YMID_RECT(CrossInfo.CrossBox),low_data),fb);
#if PG_DEBUG
              dbg_print_crossing(&CrossInfo);
#endif
              goto OLITTLE;
            }
           else goto NEXT_1;

/*****************************************************************************/
/*****              Is the arc small?                                    *****/
/****************************************************************************/
OLITTLE:;

#ifdef  FORMULA
  { _SHORT  o_lit_FRM = ONE_HALF(low_data->o_little);
    bConvert_to_Gs = (   xd>o_lit_FRM
                      && xd>=TWO(yd)
                      && yd<o_lit_FRM );
  }
#else
  bConvert_to_Gs = (   xd>low_data->o_little
                    && xd>=TWO(yd)
                    && yd<low_data->o_little );
#endif /*FORMULA*/

  if ( bConvert_to_Gs )
   CheckSmallGamma(&CrossInfo);
  else if(xd<low_data->o_little && yd<low_data->o_little)
        {
          if(cur->code==_GU_)
           {
             cur->code=_GUs_;
             SetNewAttr(cur,HeightInLine(CrossInfo.CrossBox.top,low_data),fb);
             cur->other |= WAS_CONVERTED_FROM_GAMMA;
           }
          else if(cur->code==_GD_)
           {
             cur->code=_GDs_;
             SetNewAttr(cur,HeightInLine(CrossInfo.CrossBox.bottom,low_data),fb);
             cur->other |= WAS_CONVERTED_FROM_GAMMA;
           }
        }
       else
        {
          if(cur->code==_GU_)
              SetNewAttr(cur,HeightInLine(CrossInfo.CrossBox.top,low_data),fb);
          else if(cur->code==_GD_)
              SetNewAttr(cur,HeightInLine(CrossInfo.CrossBox.bottom,low_data),fb);
        }
  nxt->code=cur->code;

 NEXT_1:
  DBG_ShowElemsGT5(cur,nxt,x,y,GT5_SHOWNAMEATTR,_NULL);
  cur=cur->next;                          /* move on the list    */
 }
 cur=cur->next;
}

#if PG_DEBUG
  if(mpr>5 && mpr<=MAX_GIT_MPR) brkeyw("\n I'm waiting");
#endif

return SUCCESS;
}  /***** end of analize_circles *****/

/****************************************************************************/
/* This program finds max width in gammas                                   */
/****************************************************************************/
_INT GetMaxDxInGamma(_INT ibeg_cross,_INT iend_cross,_INT itop_cross,
                       p_SHORT x,p_SHORT y,_UCHAR code,
                       p_INT ibeg_max,p_INT iend_max)
{
_INT b,f,dy,ytop=y[itop_cross],dxmax=0;
_INT ind_pre=itop_cross,ind_aft=itop_cross;

 if(code==_GU_)
  {
    for(dy=1;dy<HWRMin(y[ibeg_cross],y[iend_cross])-ytop;dy++)
     {
       for(b=itop_cross-1;y[b]<ytop+dy;b--);
       for(f=itop_cross+1;y[f]<ytop+dy;f++);
       if(HWRAbs(x[f]-x[b])>dxmax)
        {
          dxmax=HWRAbs(x[f]-x[b]);
          ind_pre = b;
          ind_aft = f;
        }
     }
  }
 else
  {
    for(dy=1;dy<ytop-HWRMax(y[ibeg_cross],y[iend_cross]);dy++)
     {
       for(b=itop_cross-1;y[b]>ytop-dy;b--);
       for(f=itop_cross+1;y[f]>ytop-dy;f++);
       if(HWRAbs(x[f]-x[b])>dxmax)
        {
          dxmax=HWRAbs(x[f]-x[b]);
          ind_pre = b;
          ind_aft = f;
        }
     }
  }
#if PG_DEBUG
          if(mpr>4 && mpr<=MAX_GIT_MPR)
                draw_line(x[ind_pre],y[ind_pre],x[ind_aft],y[ind_aft],
                          COLOR,SOLID_LINE,NORM_WIDTH);
#endif

  *ibeg_max=ind_pre;
  *iend_max=ind_aft;
  return(dxmax);
} /* end of GetMaxDxInGamma */


#endif //#ifndef LSTRIP



/****************************************************************************/
/* This program decides, is that crossing circle or gamma up                */
/****************************************************************************/
#if !PG_DEBUG

#define DX_RATIO_FOR_GU                   ONE_THIRD(100)
#define DY_RATIO_FOR_GU                   (ONE_FOURTH(100)+ONE_EIGHTTH(100))
#define DX_RATIO_FOR_O                    TWO_THIRD(100)
#define DY_RATIO1_FOR_O                   ONE_FOURTH(100)
#define DY_RATIO2_FOR_O                   (100-ONE_EIGHTTH(100))
#define RATIO1_POINTS_IN_CROSS_TO_BE_O    55
#define RATIO2_POINTS_IN_CROSS_TO_BE_O    70
#define DLT_GAMM_TO_BE_O                  TWO(GAMMA_THICK)

#else

LOW_DBG_INFO_TYPE LowDbgInfo=
                   {
                     ONE_THIRD(100),
                     (ONE_FOURTH(100)+ONE_EIGHTTH(100)),
                     TWO_THIRD(100),
                     ONE_FOURTH(100),
                     (100-ONE_EIGHTTH(100)),
                     55,
                     70,
                     TWO(GAMMA_THICK)
                   };

#define DX_RATIO_FOR_GU                   LowDbgInfo.DxRatioForGU
#define DY_RATIO_FOR_GU                   LowDbgInfo.DyRatioForGU
#define DX_RATIO_FOR_O                    LowDbgInfo.DxRatioForO
#define DY_RATIO1_FOR_O                   LowDbgInfo.DyRatio1ForO
#define DY_RATIO2_FOR_O                   LowDbgInfo.DyRatio2ForO
#define RATIO1_POINTS_IN_CROSS_TO_BE_O    LowDbgInfo.Ratio1PointsInCrossToBeO
#define RATIO2_POINTS_IN_CROSS_TO_BE_O    LowDbgInfo.Ratio2PointsInCrossToBeO
#define DLT_GAMM_TO_BE_O                  LowDbgInfo.DltGammToBeO

#endif /* PG_DEBUG */

#ifndef LSTRIP


_VOID Decision_GU_or_O_(pCrossInfoType pCrossInfo)
{
  p_SPECL pCross=pCrossInfo->pCross,
          pIUD_break=pCrossInfo->pIUD_break,
          nxt=pCross->next;
  _INT    XRatio=pCrossInfo->xRatioPseudoCross,
          YRatio=pCrossInfo->yRatioPseudoCross,
          IRatio=pCrossInfo->PointsRatioInCrossArea,
          DltGamm=pCrossInfo->delta_gamm;
  p_low_type low_data=pCrossInfo->low_data;
  p_SHORT y=low_data->y;
  _BOOL   IsBegBreak=y[nxt->ibeg-1]==BREAK,
          IsEndBreak=y[pCross->iend+1]==BREAK;

  /* XCross, YCross - x,y coordinates of "crossing point" (pseudocross)
     XRatio - ratio of two segments: 1-st from the left to the XCross,
                                     2-nd - max x-width of crossing area
     YRatio - ratio of two segments: 1-st from the top to the YCross,
                                     2-nd - max y-width of crossing area */
  /* Decision will be made - see picture below */
  /*  .
     / \
   Y  |
      |______________
  1/4 |             |
      |__________ O |
  1/8 |____     |   |
      |    |    |   |
      |    | ?  |   |
      | GU |    |   |
      |    |    |___|
      |    |        | 1/8   X
      ----------------------->
       1/3       1/3                           */

  if(   IsBegBreak && IsEndBreak
     ||    (   IsBegBreak && DltGamm>DLT_GAMM_TO_BE_O
            || IsEndBreak || IsEndOfStrokeInsideCross(pCrossInfo))
        && pIUD_break!=_NULL && pIUD_break->code==_UD_ && CrossInTime(nxt,pIUD_break)
    )
   pCross->code=_O_;
  else if(IRatio>RATIO2_POINTS_IN_CROSS_TO_BE_O && DltGamm>DLT_GAMM_TO_BE_O)
   pCross->code=_O_;
  else if(XRatio<DX_RATIO_FOR_GU && YRatio>DY_RATIO_FOR_GU)
   pCross->code=_GU_;
  else if(YRatio<DY_RATIO1_FOR_O || YRatio<DY_RATIO2_FOR_O &&
                                    XRatio>DX_RATIO_FOR_O    )
   pCross->code=_O_;
  else /* we can't decide, so we'll take into consideration the number
          of points in crossing:
          IRatio - ratio of number of points in 2 crossing elements and
                            number of points in crossing area */
   {
     if(IRatio>RATIO1_POINTS_IN_CROSS_TO_BE_O &&
        (HEIGHT_OF(pCross)>_UE1_ || DltGamm>DLT_GAMM_TO_BE_O)
       )
      pCross->code=_O_;
   }

  return;

} /* end of Decision_GU_or_O_ */

/****************************************************************************/
/* This function checks end of stroke to be inside crossing                 */
/****************************************************************************/
_BOOL IsEndOfStrokeInsideCross(pCrossInfoType pCrossInfo)
{
  p_SPECL pCross=pCrossInfo->pCross,
          nxt=pCross->next;
  p_low_type low_data=pCrossInfo->low_data;
  p_SHORT x=low_data->x,
          y=low_data->y;
  _INT    ibeg=MID_POINT(nxt),
          iend=MID_POINT(pCross),
          NumPntsInBorder=iend-ibeg+1;
  _SHORT  iLastInStroke=low_data->pGroupsBorder[GetGroupNumber(low_data,ibeg)].iEnd,
          pos;
  _BOOL   bret=_FALSE;

  if(IsPointInsideArea(&x[ibeg],&y[ibeg],NumPntsInBorder,
                       x[iLastInStroke],y[iLastInStroke],&pos)==SUCCESS &&
     pos!=POINT_OUTSIDE
    )
   bret=_TRUE;

 return bret;

} /* end of IsEndOfStrokeInsideCross */

/****************************************************************************/
/* This program prints debug info about crossings                           */
/****************************************************************************/
#if PG_DEBUG
_VOID dbg_print_crossing(pCrossInfoType pCrossInfo)
{
  p_SHORT x=pCrossInfo->low_data->x,     /* x, y - co-ordinates            */
          y=pCrossInfo->low_data->y;
  p_SPECL pCross=pCrossInfo->pCross,
          nxt=pCross->next;
  static _CHAR gamma[]= "Gamma";
  static _CHAR circle[]="Circle";
  static _CHAR sgamma[]="Small gamma";
  p_CHAR element_name={0};
  _SHORT color;
  p_RECT box=&(pCrossInfo->CrossBox);

  switch(pCross->code)
   {
     case _GU_:
     case _GD_:
                 element_name=gamma;
                 color=COLORGAM;
                 break;
     case _O_:
                 element_name=circle;
                 color=COLORCIRCLE;
                 break;
     case _GUs_:
     case _GDs_:
     case _Gr_:
     case _Gl_:
                 element_name=sgamma;
                 color=COLORSMALLGAM;
                 break;
   }

  if (mpr>4 && mpr<=MAX_GIT_MPR)
   {
     draw_arc(color,x,y,nxt->ibeg,pCross->iend);
     printw("\n%s %s",element_name,code_name[pCross->code]);
     printw(" ibeg=%4d iend=%4d ibeg=%4d iend=%4d",
              pCross->ibeg,pCross->iend,nxt->ibeg,nxt->iend);
     /* printing angle cos, size and thickness  */
     printw("\n cos=%ld%%",pCrossInfo->coss);
     printw("   size yd=%d xd=%d",pCrossInfo->yd,pCrossInfo->xd);
     printw("   delta=%d",pCrossInfo->delta_gamm);
     printw("\n   Ratio of points in Cross area %d",pCrossInfo->PointsRatioInCrossArea);
     printw("\n Box: xl=%d, xr=%d, yt=%d, yb=%d",box->left,box->right,box->top,box->bottom);
     printw("\n PseudoCrossPoint: x=%d, y=%d",pCrossInfo->xPseudoCross,
                                              pCrossInfo->yPseudoCross);
     printw("    BoxCenterPoint: x=%d, y=%d",pCrossInfo->xBoxCenter,
                                             pCrossInfo->yBoxCenter);
     printw("\n  Ratio : dx=%d, dy=%d",pCrossInfo->xRatioPseudoCross,
                                       pCrossInfo->yRatioPseudoCross);
     brkeyw("\nPress key ...");
   }

} /* end of dbg_print_crossing */
#endif /* PG_DEBUG */

/****************************************************************************/
/* This program fills out info about crossing                               */
/****************************************************************************/
_VOID  FillCrossInfo(p_low_type low_data,p_SPECL pCross,pCrossInfoType pCrossInfo)
{
  p_SHORT x=low_data->x,
          y=low_data->y;
  p_SPECL nxt=pCross->next;

  HWRMemSet(pCrossInfo,0,sizeof(CrossInfoType));
  pCrossInfo->pCross=pCross;
  pCrossInfo->low_data=low_data;
  count_cross_box(pCross,x,y,&(pCrossInfo->CrossBox),
                  &(pCrossInfo->xd),&(pCrossInfo->yd));
  pCrossInfo->xPseudoCross=MEAN_OF(x[MID_POINT(pCross)],x[MID_POINT(nxt)]);
  pCrossInfo->yPseudoCross=MEAN_OF(y[MID_POINT(pCross)],y[MID_POINT(nxt)]);
  pCrossInfo->PointsRatioInCrossArea=(pCross->iend-pCross->ibeg+1+
                                      nxt->iend-nxt->ibeg+1       )*100/
                                     (pCross->iend-nxt->ibeg+1);
  pCrossInfo->xBoxCenter=MEAN_OF(pCrossInfo->CrossBox.right,
                                 pCrossInfo->CrossBox.left);
  pCrossInfo->yBoxCenter=MEAN_OF(pCrossInfo->CrossBox.bottom,
                                 pCrossInfo->CrossBox.top);
  if(pCrossInfo->xd!=0)
   pCrossInfo->xRatioPseudoCross=(_INT)(100l*(pCrossInfo->xPseudoCross-pCrossInfo->CrossBox.left)/
                                        (pCrossInfo->xd)
                                       );
  if(pCrossInfo->yd!=0)
   pCrossInfo->yRatioPseudoCross=(_INT)(100l*(pCrossInfo->yPseudoCross-pCrossInfo->CrossBox.top)/
                                        (pCrossInfo->yd)
                                       );
  return;

} /* end of FillCrossInfo */

/****************************************************************************/
/* This program counts bounding boxes                                       */
/****************************************************************************/
_VOID count_cross_box(p_SPECL cur,p_SHORT x,p_SHORT y,
                      p_RECT pbox,p_SHORT xd,p_SHORT yd)
{
  p_SPECL nxt=cur->next;

   /* counting bounding box */
   size_cross(MID_POINT(nxt),MID_POINT(cur),x,y,pbox);
   /* size of crossing*/
   *xd= DX_RECT(*pbox);
   *yd= DY_RECT(*pbox);

} /* end of count_cross_box */

/****************************************************************************/
/* This program checks small gammas                                         */
/****************************************************************************/
_SHORT CheckSmallGamma(pCrossInfoType pCrossInfo)
{
  p_SPECL pCross=pCrossInfo->pCross,
          nxt=pCross->next;
  _INT    imid=MEAN_OF(MID_POINT(pCross),MID_POINT(nxt));
  _SHORT  slope=pCrossInfo->low_data->slope;
  p_SHORT x=pCrossInfo->low_data->x,
          y=pCrossInfo->low_data->y;
  _LONG   coss;

  coss=cos_pointvect((_SHORT)pCrossInfo->xPseudoCross,
                     (_SHORT)pCrossInfo->yPseudoCross,
                     x[imid],
                     y[imid],
                     (_SHORT)pCrossInfo->xPseudoCross,
                     (_SHORT)pCrossInfo->yPseudoCross,
                     (_SHORT)(pCrossInfo->xPseudoCross+100),
                     (_SHORT)(pCrossInfo->yPseudoCross+slope)
                    );
#if PG_DEBUG
  if (mpr>4 && mpr<=MAX_GIT_MPR)
   printw("\n Small Gammas, cos=%ld%%",coss);
#endif /* PG_DEBUG */

  if(pCrossInfo->yPseudoCross>y[imid])
   if(HWRAbs(coss)<COS_FOR_SIDE_GAMMA)
    pCross->code=_GUs_;
   else if(coss<0)
    pCross->code=_Gl_;
   else
    pCross->code=_Gr_;
  else
   if(HWRAbs(coss)<COS_FOR_SIDE_GAMMA)
    pCross->code=_GDs_;
   else if(coss<0)
    pCross->code=_Gl_;
   else
    pCross->code=_Gr_;

  nxt->code=pCross->code;

 return SUCCESS;

} /* end of CheckSmallGamma */

/****************************************************************************/
/* This program checks thin gammas                                          */
/****************************************************************************/
_BOOL Isgammathin(pCrossInfoType pCrossInfo,p_SPECL wcur)
{
  p_SPECL cur=pCrossInfo->pCross,
          nxt=cur->next;
  _BOOL   bret=_FALSE;
  p_low_type low_data=pCrossInfo->low_data;
  p_SHORT x=low_data->x;
  p_SHORT y=low_data->y;
  _INT    delta_gamm=pCrossInfo->delta_gamm;
  _SHORT  yd=pCrossInfo->yd;

  if (cur->code==_GU_ /*&& wcur->code==_IU_*/)
   {
     _BOOL IsHeightOK=(HEIGHT_OF(wcur)<=_UE1_);
     if(delta_gamm<=GAMMA_TOO_THIN && wcur->code==_IU_    ||
        (CLOCKWISE(wcur)                                &&
         (yd<THREE_FOURTH(DY_STR) && wcur->code==_IU_ ||
          IsHeightOK && delta_gamm<=GAMMA_THICK       ||
          delta_gamm<MEAN_OF(GAMMA_TOO_THIN,GAMMA_THICK)
         )                                              &&
         !is_cross(x[nxt->ibeg],y[nxt->ibeg],
                   x[nxt->iend],y[nxt->iend],
                   x[cur->ibeg],y[cur->ibeg],
                   x[cur->iend],y[cur->iend])
        )
       )
      {                                    /*CHE*/
       _UCHAR  fbIU = (x[nxt->ibeg] < x[cur->iend])? _f_:_b_;
       cur->code=nxt->code=_IU_;
       ASSIGN_CIRCLE_DIR(cur,fbIU);
       /* save direction of extremum inside gamma for future use */
       ASSIGN_CIRCLE_DIR(nxt,CIRCLE_DIR(wcur));
       bret=_TRUE;
      }
   }
if (cur->code==_GD_)
 /* cross low than extremum */
 if (y[cur->iend] > y[MID_POINT(wcur)] &&
     x[cur->iend] < x[MID_POINT(wcur)])
  {
    _SHORT ymin,ymax;
    yMinMax(nxt->ibeg,cur->iend,y,&ymin,&ymax);
    SetNewAttr(cur,HeightInLine(ymin,low_data),(_UCHAR)_f_);
    cur->code=nxt->code=_DUR_;
    bret=_TRUE;
  }
 else
  {
    _BOOL bIs_cross=is_cross(x[nxt->ibeg],y[nxt->ibeg],
                             x[nxt->iend],y[nxt->iend],
                             x[cur->ibeg],y[cur->ibeg],
                             x[cur->iend],y[cur->iend]
                            );
    _INT  ibeg_cross,iend_cross;
    _BOOL IsSpecialRorO=_FALSE;
#ifdef FOR_GERMAN
     #define MIN_WIDTH_TO_BE_R 20
     IsSpecialRorO=delta_gamm<MIN_WIDTH_TO_BE_R &&
                   COUNTERCLOCKWISE(wcur)       &&
                   HEIGHT_OF(wcur)>=_DI1_       &&
                   HEIGHT_OF(wcur)<=_DE1_;
#endif /* FOR_GERMAN */
    if(bIs_cross)
     {
       ibeg_cross=nxt->ibeg;
       iend_cross=cur->iend;
     }
    else
     {
       ibeg_cross=MID_POINT(nxt);
       iend_cross=MID_POINT(cur);
     }
    if(IsSpecialRorO                                            ||
//       wcur->code==_ID_                                       &&
       (delta_gamm<=GAMMA_TOO_THIN                           ||
        delta_gamm<=GAMMA_THICK &&
        (low_data->rc->low_mode & LMOD_SMALL_CAPS)           ||
        (!bIs_cross && COUNTERCLOCKWISE(wcur)              &&
         (yd<=ONE_HALF(DY_STR) && delta_gamm<GAMMA_THICK ||
          delta_gamm<MEAN_OF(GAMMA_TOO_THIN,GAMMA_THICK)
         )
        )
       )
      )
     {                                       /*CHE*/
       _UCHAR  fbID = (x[ibeg_cross] < x[iend_cross])? _b_:_f_;
       if(wcur->code==_UD_ && delta_gamm>GAMMA_TOO_THIN &&
          (low_data->rc->low_mode & LMOD_SMALL_CAPS)==0
         )
        {
          cur->other |= TOO_NARROW;
          bret=_FALSE;
        }
       else
        {
          cur->code=nxt->code=_ID_;
          ASSIGN_CIRCLE_DIR(cur,fbID);
          ASSIGN_CIRCLE_DIR(nxt,fbID);
          cur->other=1;
          bret=_TRUE;
        }
     }

  }

 return bret;

} /* end_of_Isgammathin */

/*==========================================================================*/
/*==========================================================================*/
/*====            delete the interiors of circles                        ===*/
/*==========================================================================*/
/*==========================================================================*/
#define MUST_BE_KILLED 111
_SHORT del_inside_circles(p_low_type low_data)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT x=low_data->x,                /* x, y - co-ordinates            */
         y=low_data->y;
p_SPECL cur,               /* the index of the current element        */
        prv,               /*           of the previous element       */
        nxt,               /*           of the next element           */
        wrk,               /*           of working element            */
        wcur;              /*           of working element            */
 _BOOL bPrvSwap;
 _SHORT num_arcs;

 cur=specl;
 while(cur!=_NULL)
   {
     if (cur->mark == CROSS)                         /* if it`s crossing    */
      switch ( (_SHORT) cur->code )
       {
         case _NO_CODE:                              /* if crossing is empty*/
          prv= cur->prev; nxt= cur->next;
          prv = FindMarkLeft (prv,BEG);
          if(prv!=_NULL)
           wcur=prv->prev;
          else
           wcur=prv;
          while(wcur!=_NULL && (IsXTorST(wcur) || wcur->mark==HATCH))
           wcur=wcur->prev;
          /* if here is break in crossing and we continued */
          /* writing on the left of the break, then code - Z,
          /* else - ZZ */
          if( (wcur!=_NULL)        &&
              (wcur->code==_ZZZ_ ||
               wcur->code==_ZZ_  ||
               wcur->code==_Z_
              )                    &&
              (nxt->ibeg<=wcur->ibeg)
            )
           {
             if(wcur->code==_ZZZ_)
              if(x[cur->ibeg]-x[prv->ibeg]>=0)
               wcur->code=_Z_;
              else
               wcur->code=_ZZ_;
             /* try to restore deleted angle */
             Restore_AN(low_data,cur,NOT_RESTORED | WAS_DELETED_BY_CROSS,2);
           }
          /* delete crossing */
          cur= cur->prev;
          DelCrossingFromSPECLList (cur->next);
          break;

         default:
          bPrvSwap=_FALSE;
          num_arcs=0;
          prv=cur->prev;
          wcur=nxt=cur->next;
          if(prv->mark==CROSS)
           prv=prv->prev;
          /* still inside the crossing and before the previous crossing */
          /* and before the beginning */
          while(prv->ibeg >= nxt->ibeg                    &&
                prv->mark != BEG                          &&
                prv != specl                              &&
                (prv->mark != CROSS                    ||
                 prv->mark==CROSS && prv->code==_NO_CODE
                )
               )
           {
             if(!IsOutsideOfCrossing(cur,prv,nxt,low_data,
                                     &wrk,&wcur,&bPrvSwap) &&
                !IsInnerAngle(x,y,nxt,cur,prv)
               )
              CheckInsideCrossing(cur,prv,&num_arcs);
             if(bPrvSwap)
              prv=wrk;
             else
              prv=prv->prev;
             bPrvSwap=_FALSE;
             if(prv->mark==CROSS)
              prv=prv->prev;
           }

             if((prv->mark==CROSS)&&(prv->code==_NO_CODE))
               prv=prv->next;
          {
           p_SPECL wrkLocal=cur->prev,
                   pNxt=nxt->next;
           _UCHAR code=wrkLocal->code;
           /* try to restore deleted angle */
           if(!(   code==_ANl && CrossInTime(wrkLocal,cur)
                || pNxt->code==_ANl && CrossInTime(pNxt,cur)
               )
             )
            if(     cur->code==_O_
                 && COUNTERCLOCKWISE(cur)
                 && !(    (code==_UU_ || code==_UUC_ || code==_IU_)
                       && COUNTERCLOCKWISE(wrkLocal)
                     )
               ||   (   cur->code==_GU_
                     ||    cur->code==_GUs_
                        && (cur->other & WAS_CONVERTED_FROM_GAMMA)
                    )
                 && CLOCKWISE(cur)
                 && !(   (code==_UD_ || code==_UDC_ || code==_ID_)
                      && CLOCKWISE(wrkLocal)
                     )
               ||   cur->code==_IU_
                 && CLOCKWISE(cur)
                 && CLOCKWISE(wcur)
              )
             Restore_AN(low_data,cur,NOT_RESTORED | WAS_DELETED_BY_CROSS,2);
          }
          /* save real beg of the 2-nd part of CROSS   */
          /* if it isn't double moving - because of PP */
          if(cur->code!=_DUR_ && cur->code!=_DDL_)
           cur->ipoint1=cur->ibeg;
             /* determine the beginning of CROSS */
             cur->ibeg = nxt->ibeg;
             /* delete the second element of crossing */
             DelFromSPECLList(nxt);
             /* check IU_ID */
             if(Is_IU_or_ID(cur))
              check_IU_ID_in_crossing(&cur,x,y);
             break;
           }
     cur = cur->next;                                /* move on the list    */
   }
#if PG_DEBUG
  if(mpr>5 && mpr<=MAX_GIT_MPR) brkeyw("\n I'm waiting");
#endif

return SUCCESS;
}  /***** end of del_inside_circles *****/

/****************************************************************************/
/* This program restores angles deleted because of intersection with CROSS  */
/****************************************************************************/
_VOID Restore_AN(p_low_type low_data,p_SPECL pCross,
                 _UCHAR RestoreMask,_SHORT NumCr)
{
 p_SPECL  specl = low_data->specl;     /*  The list of special points on */
                                       /* the trajectory                 */
 p_SHORT y=low_data->y;                /* y - co-ordinates               */
 _SHORT l_specl=low_data->len_specl;   /* the quantity of special points */
 p_SPECL wcur,nxt=pCross;
 _SHORT  i;                            /* counter                        */

  for(i=0;i<l_specl;i++)
   if(specl[i].mark==ANGLE                        &&
      (specl[i].other & RestoreMask)==RestoreMask &&
      (!(pCross->iend<specl[i].ibeg ||
         pCross->ibeg>specl[i].iend)))
     {
       wcur=(p_SPECL)&specl[i];
       if((wcur->other & _ANGLE_DIRECT_)!=_ANGLE_LEFT_)
        continue;
       else
        wcur->code=_ANl;
       wcur->attr=HeightInLine(y[wcur->ipoint0],low_data);
       wcur->other ^=NOT_RESTORED;
       if(pCross->code!=_NO_CODE)
        wcur->other |= INSIDE_CIRCLE;
       if(NumCr==2)
        nxt=pCross->next;
       Insert2ndAfter1st(nxt,wcur);
       break;
     }

  return;

} /* end of Restore_AN */

/****************************************************************************/
/* This program checks, is element outside the Crossing                     */
/****************************************************************************/
_BOOL IsOutsideOfCrossing(p_SPECL cur,p_SPECL prv,p_SPECL nxt,
                          p_low_type low_data,
                          p_SPECL _PTR wrk,p_SPECL _PTR wcur,p_BOOL pbPrvSwap)
{
  _BOOL bret=_FALSE;
  _BOOL bIsGD_or_O=(cur->code==_GD_ || cur->code==_O_);
  _BOOL bIsMINcorrect=(prv->mark==MINW                  &&
                       (nxt->next==_NULL              ||
                        (((nxt->next)->code==_ID_ ||
                          (nxt->next)->code==_UD_
                         )                          &&
                         MidPointHeight(nxt->next,low_data) >=_DI1_
                        )
                       )
                      );
  _BOOL bIsSpecCurOrPrev=((Is_IU_or_ID(cur) ||
//                           cur->code==_GUs_ || cur->code==_Gl_ ||
                           IsAnyGsmall(cur) ||
                           cur->code==_GU_  || cur->code==_GD_
                          )                                       &&
                          (prv->mark==MAXW  || prv->mark==MINW ||
                           prv->mark==STICK || prv->mark==SHELF
                          )
                         );
  _SHORT iend_del;

  if (   Is_IU_or_ID(cur)
      || cur->code==_GU_
      || cur->code==_GD_
      || (cur->code==_O_ && COUNTERCLOCKWISE(cur))
      || cur->code==_GUs_ && prv->code==_UD_
      || cur->code==_GDs_ && prv->code==_UU_
     )
   iend_del=cur->ibeg;
  else
   iend_del=cur->iend;

  if(prv->iend >= iend_del                    &&
     (bIsSpecCurOrPrev                     ||
      cur->code==_O_ && prv->mark==SHELF   ||
      bIsGD_or_O  &&
      (prv->mark==STICK || bIsMINcorrect)
     )
#if defined (FOR_GERMAN) || defined (FOR_FRENCH) || USE_BSS_ANYWAY
     || prv->code==_BSS_ &&
        (cur->code==_GU_ && COUNTERCLOCKWISE(cur) || cur->code==_GUs_ || cur->code==_Gl_)
#endif /* FOR_GERMAN... */
    )
   {
     /* put it after crossing */
     prv->other |= OUTSIDE_CIRCLE;
     *wrk=prv->prev;
//     Move2ndAfter1st(*wcur,prv);
     Move2ndAfter1st(nxt,prv);
     *wcur=prv;
     *pbPrvSwap=_TRUE;
     bret=_TRUE;
   }

  return bret;

} /* end of IsOutsideOfCrossing */

/****************************************************************************/
/* This program checks element outside the Crossing                         */
/****************************************************************************/
_VOID CheckInsideCrossing(p_SPECL cur,p_SPECL prv,p_SHORT pnum_arcs)
{
   if(Is_IU_or_ID(cur) || IsAnyGsmall(cur) ||
      cur->code==_DDL_ || cur->code==_DUR_ ||
      cur->code==_GU_ && COUNTERCLOCKWISE(cur) ||
      cur->code==_GD_ && CLOCKWISE(cur) ||
      IsAnyAngle(prv) ||
      prv->code==_ID_
     )
    {
      if(     (cur->code==_GU_ || cur->code==_IU_ || cur->code==_GUs_)
           && (prv->code==_ID_ || prv->code==_UD_ || prv->code==_UDC_)
         ||   (cur->code==_GD_ || cur->code==_ID_ || cur->code==_GDs_)
           && (prv->code==_IU_ || prv->code==_UU_ || prv->code==_UUC_)
        )
       prv->other |= INSIDE_CIRCLE;
      else if(!(cur->code==_O_ && prv->code==_ID_ && CrossInTime(prv,cur->next)))
       DelFromSPECLList(prv);
    }
   else
    {
      if(prv->code==_UU_ || prv->code==_UD_)
       if(*pnum_arcs>=2)
        ;
//        DelFromSPECLList(prv);
       else
        if(!CrossInTime(prv,cur) && CIRCLE_DIR(prv)==CIRCLE_DIR(cur))
         {
           (*pnum_arcs)++;
           if(prv->code==_UU_)
            prv->code=_UUC_;
           if(prv->code==_UD_)
            prv->code=_UDC_;
         }
      prv->other |= INSIDE_CIRCLE;
    }

  return;

} /* end of CheckInsideCrossing */

/****************************************************************************/
/* This program finds situation like "B" - see picture and comments in      */
/* low_util.c in function IsRightGulfLikeIn3                                */
/****************************************************************************/
_BOOL IsInnerAngle(p_SHORT x,p_SHORT y,p_SPECL nxt,p_SPECL cur,p_SPECL pAN)
{
 _BOOL bret=_FALSE;

 if(pAN->code==_ANl && (pAN->other & _ANGLE_DIRECT_)==_ANGLE_LEFT_ &&
    (cur->code==_GU_ || cur->code==_O_) && CLOCKWISE(cur)          &&
    !CrossInTime(cur,pAN) && !CrossInTime(nxt,pAN)
   )
  { _INT   iStart=nxt->iend,iEnd=cur->ibeg,
           iymin=iyMin(iStart,iEnd,y),
           iymax=iyMax(iStart,iEnd,y),
           iGulf;
    if(iymin!=-1 && iymax!=-1 && iymin<iymax &&
       IsRightGulfLikeIn3(x,y,iymin,iymax,&iGulf)
      )
     {
       pAN->other |= (INSIDE_CIRCLE | INNER_ANGLE);
       bret=_TRUE;
     }
  }

  return(bret);

} /* end of IsInnerAngle */

/****************************************************************************/
/* This program finds special DDL's                                         */
/****************************************************************************/

_BOOL is_DDL(p_SPECL pToCheck,p_SPECL wmin,p_low_type low_data)
{
  p_SHORT x=low_data->x,
          y=low_data->y;
  p_SPECL wcur,
          prv,
          nxt;
  _BOOL   bfl_DDL=_FALSE;

  nxt=pToCheck->next;
  wcur=nxt->next;
  while(wcur!=_NULL &&
        (wcur->mark==CROSS || wcur->mark==SHELF || IsAnyAngle(wcur))
       )
   wcur=wcur->next;

  if (wcur == NULL)
	  return _FALSE;

  if((wcur->code==_UD_ && COUNTERCLOCKWISE(wcur) ||
      wcur->code==_ID_ && wcur->mark==END &&
      x[wcur->ibeg]<x[wcur->iend]
     )                                             &&
     wcur->ibeg<=pToCheck->iend+NUM_POINTS_IU_UDL
    )
   bfl_DDL=_TRUE;
  else
   {
     wcur=pToCheck->prev;
     if(wcur->code==_UD_ && COUNTERCLOCKWISE(wcur))
      bfl_DDL=_TRUE;
   }
  if(bfl_DDL)
   {
     _BOOL bIswminright=_TRUE;
     _BOOL bIs8=_FALSE;
     _BOOL bIsPrvOK;
     _SHORT yPrv;
     prv=wmin->prev;
     while(prv->mark==CROSS || IsAnyAngle(prv))
      prv=prv->prev;
     bIsPrvOK=prv->code==_UD_ &&
              CLOCKWISE(prv)  &&
              prv->iend>=nxt->ibeg-NUM_POINTS_IU_UDL;
     yPrv=y[MID_POINT(prv)];
     if(bIsPrvOK                   &&
        wmin->code==_UU_           &&
        COUNTERCLOCKWISE(wmin)     &&
        HEIGHT_OF(wmin)<_MD_       &&
        HWRAbs(y[MID_POINT(wmin)]-yPrv)>TWO_THIRD(DY_STR))
      {
        p_SPECL wrk=prv->prev;
        if(wrk!=_NULL && wrk->mark==BEG && wrk->code==_IU_)
         bIs8=_TRUE;
      }
     if(low_data->rc->rec_mode!=RECM_FORMULA)
      bIswminright=x[MID_POINT(prv)]>x[MID_POINT(wmin)];

     if(bIsPrvOK                                           &&
        bIswminright                                       &&
        HWRAbs(y[MID_POINT(wcur)]-yPrv)<TWO_THIRD(DY_STR)  &&
#if defined(FOR_FRENCH)
        HWRAbs(y[MID_POINT(wcur)]-y[MID_POINT(wmin)])<TWO_THIRD(DY_STR)  &&
#endif /* FOR_FRENCH */
        !bIs8
       )
      {
        _SHORT ymin,ymax;
        pToCheck->code=_DDL_;  /* stick will be DDL */
        yMinMax(nxt->ibeg,pToCheck->iend,low_data->y,&ymin,&ymax);
        SetNewAttr(pToCheck,HeightInLine(ymax,low_data),(_UCHAR)_f_);
        return _TRUE;
      }
   }
   return _FALSE;
} /* end of is_DDL */

/****************************************************************************/
/* This program finds special DUR's                                         */
/****************************************************************************/
_BOOL IsDUR(p_SPECL pCrossing,p_SPECL wmin,p_SPECL wmax,p_low_type low_data)
{
 _BOOL bret=_FALSE;
 _BOOL bDURpresent=_FALSE;
 p_SPECL nxt=pCrossing->next;
 p_SHORT x=low_data->x;
 p_SHORT y=low_data->y;

 if(pCrossing->mark==STICK &&
    HeightInLine(y[pCrossing->ibeg],low_data)<=_DI2_)
  {
    if(wmin!=_NULL && wmax!=_NULL)
     {
       _BOOL bUpper1st=wmin->ibeg<wmax->ibeg;
       _BOOL IsWminOK=bUpper1st ? CLOCKWISE(wmin) : COUNTERCLOCKWISE(wmin) && wmin->code!=_IU_;
       if(IsWminOK)
        {
          p_SPECL cur=bUpper1st ? SkipAnglesAfter(wmax) : SkipAnglesBefore(wmax);
          if(bUpper1st)
           while(cur!=_NULL && (IsAnyCrossing(cur) || IsAnyAngle(cur)))
            cur=cur->next;
          else
           while(cur!=_NULL && (IsAnyCrossing(cur) || IsAnyAngle(cur)))
            cur=cur->prev;
          if(cur!=_NULL                                                    &&
             (cur->code==_UU_ || cur->code==_IU_ && HEIGHT_OF(wmax)<_DI2_) &&
             (bUpper1st ? COUNTERCLOCKWISE(cur) : CLOCKWISE(cur))          &&
             HWRAbs(y[wmin->ipoint0]-y[cur->ipoint0])<ONE_HALF(DY_STR)
            )
           {
             DelFromSPECLList(cur);
             bDURpresent=_TRUE;
           }
        }
     }
    else if(wmin==_NULL && wmax==_NULL)
     {
       p_SPECL pUU=SkipAnglesBefore(pCrossing);
       if(pUU!=_NULL && pUU->code==_UU_ && CLOCKWISE(pUU) &&
          CrossInTime(pUU,nxt))
        bDURpresent=_TRUE;
     }
    else if(wmin==_NULL && wmax!=_NULL)
     {
       p_SPECL pUU1st=SkipAnglesBefore(wmax);
       if(pUU1st!=_NULL && pUU1st->code==_UU_ && CLOCKWISE(pUU1st)
          /* && CrossInTime(pUU1st,nxt)*/)
        {
          p_SPECL pUU2nd=SkipAnglesAfter(wmax);
          while(pUU2nd!=_NULL && (IsAnyCrossing(pUU2nd) || IsAnyAngle(pUU2nd)))
           pUU2nd=pUU2nd->next;
          if(pUU2nd!=_NULL && (pUU2nd->code==_IU_ || pUU2nd->code==_UU_) &&
             COUNTERCLOCKWISE(pUU2nd) &&
             y[wmax->ipoint0]-y[pUU1st->ipoint0]<DY_STR && 
             y[wmax->ipoint0]-y[pUU2nd->ipoint0]<DY_STR //was:TWO_THIRD(DY_STR)
            )
           {
             p_SPECL pLowUD=pUU2nd->next;
             while(   pLowUD!=_NULL
                   && (IsAnyCrossing(pLowUD) || IsAnyAngle(pLowUD)))
              pLowUD=pLowUD->next;
             if(   pLowUD!=_NULL
                && pLowUD->code==_UD_
                && COUNTERCLOCKWISE(pLowUD)
                && IsShapeDUR(pUU1st,pUU2nd,pLowUD,wmax,low_data)
               )
              {
                DelFromSPECLList(pUU2nd);
                bDURpresent=_TRUE;
              }
           }
        }
     }
  }
 else if(pCrossing->mark==CROSS)
  {
    // prefix bug fix; added by JAD; Feb 18, 2002
    if (wmax == _NULL) return _FALSE;

    p_SPECL p1stUp=wmax->prev;
    while(   p1stUp!=_NULL
          && (IsAnyCrossing(p1stUp) || IsAnyAngle(p1stUp)))
     p1stUp=p1stUp->prev;
    if(   p1stUp!=_NULL
       && (p1stUp->code==_IU_ || p1stUp->code==_UU_))
     {
       p_SPECL p2ndUp=wmax->next;
       while(   p2ndUp!=_NULL
             && (IsAnyCrossing(p2ndUp) || IsAnyAngle(p2ndUp)))
        p2ndUp=p2ndUp->next;
       if(   p2ndUp!=_NULL
          && (p2ndUp->code==_IU_ || p2ndUp->code==_UU_)
          && CLOCKWISE(p1stUp)
          && COUNTERCLOCKWISE(p2ndUp)
          && HWRAbs(y[p1stUp->ipoint0]-y[p2ndUp->ipoint0])<ONE_HALF(DY_STR)
         )
        {
          p_SPECL pLowUD=p2ndUp->next;
          while(   pLowUD!=_NULL
                && (IsAnyCrossing(pLowUD) || IsAnyAngle(pLowUD)))
           pLowUD=pLowUD->next;
          if(   pLowUD!=_NULL
             && pLowUD->code==_UD_
             && COUNTERCLOCKWISE(pLowUD)
             && (y[pLowUD->ipoint0]-y[p1stUp->ipoint0])>ONE_THIRD(DY_STR)
             && (y[pLowUD->ipoint0]-y[p2ndUp->ipoint0])>ONE_THIRD(DY_STR)
             && (y[pLowUD->ipoint0]-y[wmax->ipoint0])>ONE_FOURTH(DY_STR)
             && IsShapeDUR(p1stUp,p2ndUp,pLowUD,wmax,low_data)
            )
           {
             if(!(wmax->code==_UD_ && COUNTERCLOCKWISE(wmax)))
              DelFromSPECLList(p1stUp);
             DelFromSPECLList(p2ndUp);
             bDURpresent=_TRUE;
           }
        }
     }
  }
 if(bDURpresent)
  {
    _SHORT ymin,ymax;
    if(pCrossing->mark==CROSS && wmax->code==_UD_ && COUNTERCLOCKWISE(wmax))
     pCrossing->code=_Gr_;
    else
     pCrossing->code=_DUR_;
    yMinMax(nxt->ibeg,pCrossing->iend,y,&ymin,&ymax);
    SetNewAttr(pCrossing,HeightInLine(ymin,low_data),(_UCHAR)_f_);
    bret=_TRUE;
  }

 return bret;

} /* end of IsDUR */

/****************************************************************************/
/* This program checks shape of DUR                                         */
/****************************************************************************/
_BOOL IsShapeDUR(p_SPECL p1stUp,p_SPECL p2ndUp,p_SPECL pLowUD,p_SPECL wmax,p_low_type low_data)
{
 p_SHORT x=low_data->x, y=low_data->y;
 _SHORT  xmin,xmax,
         xmin_wmax=x[wmax->ibeg]<x[wmax->iend] ? x[wmax->ibeg] : x[wmax->iend];

  xMinMax(p2ndUp->iend+1,pLowUD->ibeg-1,x,y,&xmin,&xmax);

  return(xmin<x[p2ndUp->iend] && xmin<xmin_wmax && xmin<x[p1stUp->iend]);

} /* end of IsShapeDUR */

/****************************************************************************/
/* This program checks min and max in CROSS                                 */
/****************************************************************************/
_VOID check_IU_ID_in_crossing(p_SPECL _PTR p_IU_ID,p_SHORT x,p_SHORT y)
{
  p_SPECL cur=(*p_IU_ID),
          prv,
          nxt;

  nxt=cur->next;
  while(nxt!=_NULL && nxt->mark==CROSS)
   nxt=nxt->next;
  if(nxt==_NULL) return;
  prv=cur->prev;
  while(prv!=_NULL && prv->mark==CROSS)
   prv=prv->prev;
  if(prv==_NULL) return;
  if(y[cur->ibeg-1]==BREAK)
   {
     if(nxt->code==_UU_  || nxt->code==_UD_  ||
        nxt->code==_UDC_ || nxt->code==_UUC_ ||
        Is_IU_or_ID(nxt) && nxt->mark!=END
       )
      {
        if(CLOCKWISE(nxt)) ASSIGN_CIRCLE_DIR(cur,_b_);
        else               ASSIGN_CIRCLE_DIR(cur,_f_);
      }
     else
      {
        cur->mark=BEG;
        cur->other |= WAS_STICK_OR_CROSS;
      }
   }
  else if(y[cur->iend+1]==BREAK)
   {
          if(prv->code==_UU_  || prv->code==_UD_  ||
             prv->code==_UDC_ || prv->code==_UUC_ ||
             Is_IU_or_ID(prv) && prv->mark!=BEG
            )
           {
             if(CLOCKWISE(prv)) ASSIGN_CIRCLE_DIR(cur,_b_);
             else               ASSIGN_CIRCLE_DIR(cur,_f_);
           }
          else
           {
             cur->mark=END;
             cur->other |= WAS_STICK_OR_CROSS;
           }
   }
  else if(cur->other==0)
   {
          if(x[cur->ibeg]<x[cur->iend])
           if(cur->code==_IU_) ASSIGN_CIRCLE_DIR(cur,_f_);
           else                ASSIGN_CIRCLE_DIR(cur,_b_);
          else
           if(cur->code==_IU_) ASSIGN_CIRCLE_DIR(cur,_b_);
           else                ASSIGN_CIRCLE_DIR(cur,_f_);
   }
 return;

} /* end of check_IU_ID_in_crossing */


#endif //#ifndef LSTRIP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\dllmain.c ===
#include <windows.h>
#include "bear.h"

int InitRecognition(HINSTANCE hInst);

BOOL WINAPI DllMain(HANDLE hDll, DWORD dwReason, LPVOID lpReserved)
{
	if (dwReason == DLL_PROCESS_ATTACH)
	{
		// Init inferno's LM
		if (!InitRecognition(hDll))
			return FALSE;

		if (!InitBear(hDll))
			return FALSE;
	}
	else
	if (dwReason == DLL_PROCESS_DETACH)
		DetachBear();
    
	return((int)TRUE);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\dscr.cpp ===
#include <common.h>
  #include  "dscr.h"
  #include  "hwr_sys.h"


 /***********  Internal Finction Prototype  *****************************/
 _WORD  TraceToOdata ( p_ODATA  pOdata,
                       p_POINT  pTrace, _WORD  nPoint , _WORD nFiltr );

 _ULONG NormCoeffs   ( _WORD Ord  , p_LONG pX, p_LONG pY );

 _VOID  ApprOdata    ( _WORD Sam  , p_ODATA    pOdata ,
                       _WORD Resam, p_ARDATA   pARdata,
                       _WORD Ord  , p_POINT    pCoeffs, 
                       _WORD nItr , p_LONG     pLam   , p_LONG  pErr );
 /***********************************************************************/

 _WORD  TraceToOdata3D ( p_ODATA3D  pOdata,
                         p_3DPOINT  pTrace, _WORD  nPoint , _WORD nFiltr );

 _ULONG NormCoeffs3D   ( _WORD Ord  , p_LONG pX, p_LONG pY, p_LONG pZ );

 _VOID  ApprOdata3D    ( _WORD Sam  , p_ODATA3D    pOdata ,
                         _WORD Resam, p_ARDATA3D   pARdata,
                         _WORD Ord  , p_3DPOINT    pCoeffs, 
                         _WORD nItr , p_LONG       pLam   , p_LONG  pErr );

//extern _ULONG ttTime, OTime;
//_ULONG ttttt;
//#include <windows.h>
//void PegDebugPrintf(char * format, ...);

 /***********************************************************************/
 /* _WORD TraceToOdata ( p_ODATA  pOdata,                               */
 /*                      p_POINT  pTrace, _WORD  nPoint, _WORD nFiltr ) */
 /* Purpose: Convert input trajectory (pTrace, nPoints)                 */
 /*          into internal format and store it to Odata Array           */
 /* Return : 0 on error, otherwise number of point converted and stored */
 /***********************************************************************/

 _WORD TraceToOdata ( p_ODATA  pOdata, p_POINT  pTrace,
                       _WORD   nPoint,  _WORD   nFiltr )
  {
    _WORD   i, j, n, l,  m;
    _LONG   Xmin, Xmax, dx;
    _LONG   Ymin, Ymax, dy;
   p_ODATA  pTmpOd;

     pTmpOd = pOdata;
     for( i = n = j = 0; i < nPoint; i++, pTrace++ )
      {
        if ( pTrace->y == -1 )
         {
           if ( n )
           {
             for ( l = 0; l < nFiltr; l++ )
             {
               pTmpOd -= n;
               Xmin    = pTmpOd->x;
               Ymin    = pTmpOd->y;
               pTmpOd  ++;
               for ( m = 1; m < n; m++, pTmpOd++ )
                {
                 Xmax = pTmpOd->x;
                 Ymax = pTmpOd->y;
                 pTmpOd->x = (Xmin + Xmax) >> 1;
                 pTmpOd->y = (Ymin + Ymax) >> 1;
                 Xmin = Xmax;
                 Ymin = Ymax;
                }
               pTmpOd->x = Xmin;
               pTmpOd->y = Ymin;
               pTmpOd++;
               n++;
               j++;
             }
         
           if ( (pTrace+1)->y == -1 )
             break;
          }
          n = 0;
          continue;
         }

        pTmpOd->x = (_LONG) pTrace->x << 10;
        pTmpOd->y = (_LONG) pTrace->y << 10;
        pTmpOd++;
        j++;
        n++;
      }

     if ( j == 0 )
       return  0;

      // Find Box
     pTmpOd = pOdata;
     Xmin = Xmax = pTmpOd->x;
     Ymin = Ymax = pTmpOd->y;
     pTmpOd++;
     for ( i = 1; i < j; i++, pTmpOd++ )
     {
        dx = pTmpOd->x;
        dy = pTmpOd->y;
        if ( dx > Xmax ) Xmax = dx;
        if ( dx < Xmin ) Xmin = dx;
        if ( dy > Ymax ) Ymax = dy;
        if ( dy < Ymin ) Ymin = dy;
     }

     dx  =  ( Xmin + Xmax ) >> 1;
     dy  =  ( Ymin + Ymax ) >> 1;

     Xmax = ( Xmax - Xmin );
     Ymax = ( Ymax - Ymin );

     // * Fit Into Box * //
     if ( Xmax > Ymax )
       Ymax = Xmax;
     else
       Xmax = Ymax;

     if ( Xmax < 4096 )
       return 0;

     Xmax >>= 10;
     Ymax >>= 10;

     pTmpOd = pOdata;
     for( i = 0; i < j; i++, pTmpOd++ )
      {
        pTmpOd->x = (( pTmpOd->x - dx) << 5 ) / Xmax;
        pTmpOd->y = (( pTmpOd->y - dy) << 5 ) / Ymax;
      }

     pOdata->dx = 0L;
     pOdata->dy = 0L;
     pOdata->s  = 0L;
     pOdata->r  = 0L;
     pTmpOd = pOdata;
     pOdata++;

     for( i = 1; i < j; i++, pOdata++ )
      {
        Xmin = dx = pOdata->x - pTmpOd->x;
        Ymin = dy = pOdata->y - pTmpOd->y;

        if (dx == 0 && dy == 0 )
         continue;

        if (dx < 0 ) dx = -dx;
        if (dy < 0 ) dy = -dy;

        pTmpOd++;

        if ( dx == 0  )
        {
          pTmpOd->s = dy;
        } else {
          if ( dy == 0  )
          {
            pTmpOd->s = dx;
          } else {
            if ( dx == dy )
            {
              pTmpOd->s = ( dx * 46341L ) >> 15;
            } else {
              pTmpOd->s = SQRT32 ( (_ULONG) dx * (_ULONG) dx+
                                   (_ULONG) dy * (_ULONG) dy );
            }
          }
        }

        if ( pTmpOd->s < 256L )
         {
           pTmpOd--;
           continue;
         }
                   
        pTmpOd->x  = pOdata->x;
        pTmpOd->y  = pOdata->y;          
        pTmpOd->dx = Xmin;
        pTmpOd->dy = Ymin;
        pTmpOd->r  = (pTmpOd-1)->r + pTmpOd->s;
      }

      pOdata -= j;
      j = (_WORD) ( pTmpOd - pOdata );

      return j + 1;

  } // End of function TraceToOdata;



 _WORD TraceToOdata3D ( p_ODATA3D  pOdata, p_3DPOINT  pTrace,
                         _WORD     nPoint,  _WORD     nFiltr )
  {
    _WORD     i, j, n, l,  m;
    _LONG     Xmin, Xmax, dx;
    _LONG     Ymin, Ymax, dy;
    _LONG     Zmin, Zmax, dz;

   p_ODATA3D  pTmpOd;

     pTmpOd = pOdata;
     for( i = n = j = 0; i < nPoint; i++, pTrace++ )
      {
        if ( pTrace->y == -1 )
         {
           if ( n )
           {
             for ( l = 0; l < nFiltr; l++ )
             {
               pTmpOd -= n;
               Xmin    = pTmpOd->x;
               Ymin    = pTmpOd->y;
               Zmin    = pTmpOd->z;

               pTmpOd  ++;
               for ( m = 1; m < n; m++, pTmpOd++ )
                {
                 Xmax = pTmpOd->x;
                 Ymax = pTmpOd->y;
                 Zmax = pTmpOd->z;

                 pTmpOd->x = (Xmin + Xmax) >> 1;
                 pTmpOd->y = (Ymin + Ymax) >> 1;
                 pTmpOd->z = (Zmin + Zmax) >> 1;

                 Xmin = Xmax;
                 Ymin = Ymax;
                 Zmin = Zmax;
                }

               pTmpOd->x = Xmin;
               pTmpOd->y = Ymin;
               pTmpOd->z = Zmin;
               pTmpOd++;
               n++;
               j++;
             }

           if ( (pTrace+1)->y == -1 )
             break;
          }
          n = 0;
          continue;
         }

        pTmpOd->x = (_LONG) pTrace->x << 10;
        pTmpOd->y = (_LONG) pTrace->y << 10;
        pTmpOd->z = (_LONG) pTrace->z << 10; // ??????

        pTmpOd++;
        j++;
        n++;
      }

     if ( j == 0 )
       return  0;

      // Find Box
     pTmpOd = pOdata;
     Xmin = Xmax = pTmpOd->x;
     Ymin = Ymax = pTmpOd->y;
     Zmin = Zmax = pTmpOd->z;

     pTmpOd++;

     for ( i = 1; i < j; i++, pTmpOd++ )
     {
        dx = pTmpOd->x;
        dy = pTmpOd->y;
        dz = pTmpOd->z;

        if ( dx > Xmax ) Xmax = dx;
        if ( dx < Xmin ) Xmin = dx;

        if ( dy > Ymax ) Ymax = dy;
        if ( dy < Ymin ) Ymin = dy;

        if ( dz > Zmax ) Zmax = dz;
        if ( dz < Zmin ) Zmin = dz;
     }

     dx  =  ( Xmin + Xmax ) >> 1;
     dy  =  ( Ymin + Ymax ) >> 1;
     dz  =  ( Zmin + Zmax ) >> 1;

     Xmax = ( Xmax - Xmin );
     Ymax = ( Ymax - Ymin );
     Zmax = ( Zmax - Zmin );

     // * Fit Into Box * //
     if ( Xmax < Ymax ) Xmax = Ymax;

     if ( Xmax < 4096 )
       return 0;

     Xmax >>= 10;
     Zmax >>= 10; if (Zmax < 1) Zmax = 1;

     pTmpOd = pOdata;
     for( i = 0; i < j; i++, pTmpOd++ )
      {
        pTmpOd->x = (( pTmpOd->x - dx) << 5 ) / Xmax;
        pTmpOd->y = (( pTmpOd->y - dy) << 5 ) / Xmax;
        pTmpOd->z = (( pTmpOd->z - dz) << 5 ) / Zmax;
      }

     pOdata->dx = 0L;
     pOdata->dy = 0L;
     pOdata->dz = 0L;
     pOdata->s  = 0L;
     pOdata->r  = 0L;
     pTmpOd = pOdata;
     pOdata++;

     for( i = 1; i < j; i++, pOdata++ )
      {
        Xmin = dx = pOdata->x - pTmpOd->x;
        Ymin = dy = pOdata->y - pTmpOd->y;
        Zmin = dz = pOdata->z - pTmpOd->z;

        if (dx == 0 && dy == 0 && dz == 0 )
         continue;

        if (dx < 0 ) dx = -dx;
        if (dy < 0 ) dy = -dy;
        if (dz < 0 ) dz = -dz;

        pTmpOd++;

        pTmpOd->s = SQRT32 ( (_ULONG) dx * (_ULONG) dx+
                             (_ULONG) dy * (_ULONG) dy+
                             (_ULONG) dz * (_ULONG) dz );
        if ( pTmpOd->s < 256L )
         {
           pTmpOd--;
           continue;
         }

        pTmpOd->x  = pOdata->x;
        pTmpOd->y  = pOdata->y;
        pTmpOd->z  = pOdata->z;

        pTmpOd->dx = Xmin;
        pTmpOd->dy = Ymin;
        pTmpOd->dz = Zmin;

        pTmpOd->r  = (pTmpOd-1)->r + pTmpOd->s;
      }

      pOdata -= j;
      j = (_WORD) ( pTmpOd - pOdata );

      return j + 1;

  } // End of function TraceToOdata3D;


 /************************************************************************/
 /* Purpose : Calculate Approximation of the curve                       */
 /************************************************************************/

 #define  NEXT_ADATA(Ptr)   ((p_LONG) ((p_UCHAR)Ptr+sizeof(_ARDATA)))
 #define  NEXT_ADATA3D(Ptr) ((p_LONG) ((p_UCHAR)Ptr+sizeof(_ARDATA3D)))

 #define     MAX_ORDER     16
 #define     MAX_RESAM     32

 _VOID  ApprOdata3D ( _WORD Sam  ,  p_ODATA3D   pOdata ,
                      _WORD Resam,  p_ARDATA3D  pARdata,
                      _WORD Ord  ,  p_3DPOINT   pCoeffs,
                      _WORD nItr ,  p_LONG      pLam   , p_LONG  pErr )
  {
   _WORD   i, j;
   _WORD   k,Sh;
   _LONG    Lam;
   _LONG    Err=0;
  p_LONG   pAR ;
  p_LONG   pD  ;
   _LONG   CfsX  [MAX_ORDER];
   _LONG   CfsY  [MAX_ORDER];
   _LONG   CfsZ  [MAX_ORDER];
   _LONG   TrfBuf[MAX_RESAM];

	ASSERT((Resam == 16) || (Resam == 32)); // JPittman: always 32 in only caller

    if ( Resam == 16 )  Sh = 3;
    if ( Resam == 32 )  Sh = 4;

    ResetParam3D ( Resam, pARdata, pOdata[Sam-1].r );
    for ( i = 0; i < nItr; i++ )
     {
      Lam = Repar3D ( Sam, pOdata, Resam, pARdata );

      for ( k = 0; k < 3; k++ ) // Dim
       {
         pD   =  TrfBuf;
         if ( k == 0 ) pAR  =  &pARdata->Rx;
         if ( k == 1 ) pAR  =  &pARdata->Ry;
         if ( k == 2 ) pAR  =  &pARdata->Rz;

         for( j = 0; j < Resam; j++,pD++,pAR = NEXT_ADATA3D(pAR)) *pD = *pAR;

         // Forward Transform
         if ( Resam == 16 ) FDCT16 ( TrfBuf );
         if ( Resam == 32 ) FDCT32 ( TrfBuf );

         // Cut Coefficient
         pD  = TrfBuf; *pD >>= Sh+1;  pD ++;
         for( j = 1  ; j < Ord  ; j++, pD ++)  *pD >>= Sh;
         for( j = Ord; j < Resam; j++, pD ++)  *pD   =  0;

         if ( i == nItr-1 )
          { // Save Coefficient
            pD     = TrfBuf;
            if ( k == 0 ) pAR = CfsX;
            if ( k == 1 ) pAR = CfsY;
            if ( k == 2 ) pAR = CfsZ;
            for( j = 0; j < Ord; j++) *pAR++ = * pD++;
          }
      }  // End of k;

    } // End of i

    // MAR Temporaly
    Lam = 0;
    // MAR

    (_VOID) NormCoeffs3D ( Ord, CfsX, CfsY, CfsZ ); // MAR ????

    // Return Coefficient
    for ( i = 0; i < Ord; i++, pCoeffs++ )
     {
       pCoeffs->x = (_SHORT) (CfsX[i] >> 8);
       pCoeffs->y = (_SHORT) (CfsY[i] >> 8);
       pCoeffs->z = (_SHORT) (CfsZ[i] >> 8); // MAR ????
     }

   if ( pLam  ) *pLam = Lam;
   if ( pErr  ) *pErr = Err;
 } // End of ApprOdata3D


 /*******************************************************************/
 /* Purpose: Normalize the set of coefficients                      */
 /*******************************************************************/

_ULONG  NormCoeffs ( _WORD Ord, p_LONG pX, p_LONG pY )
  {
    _WORD   i;
    _LONG   X, Y;
    _ULONG  S = 0L;

    pX++; pY++;
    for ( i = 1; i < Ord; i++, pX++, pY++ )
     {
       X =*pX;
       Y =*pY;
       S += X*X + Y*Y;
     }

    pX -= Ord;
    pY -= Ord;

    S = SQRT32 (S) >> 5;

    for ( i = 0; i < Ord; i++, pX++, pY++ )
     {
       *pX =  (*pX << 10) / (_LONG) S;
       *pY =  (*pY << 10) / (_LONG) S;
     }

    return  S;
  }

_ULONG  NormCoeffs3D ( _WORD Ord, p_LONG pX, p_LONG pY, p_LONG pZ )
  {
    _WORD   i;
    _LONG   X,Y,Z;
    _ULONG  S = 0L;

    pX++; pY++; pZ++;
    for ( i = 1; i < Ord; i++, pX++, pY++, pZ++ )
     {
       X =*pX;
       Y =*pY;
       Z =*pZ;
       S += X*X + Y*Y + Z*Z;
     }

    pX -= Ord;
    pY -= Ord;
    pZ -= Ord;

    S = SQRT32 (S) >> 5;

    for ( i = 0; i < Ord; i++, pX++, pY++, pZ++ )
     {
       *pX =  (*pX << 10) / (_LONG) S;
       *pY =  (*pY << 10) / (_LONG) S;
       *pZ =  (*pZ << 10) / (_LONG) S;
     }
    return  S;
  }
       
/*****************************************************************************/
/*  MarkTails: Mark small tails to be deleted by CutTails                               */        
/*****************************************************************************/
       
_BOOL MarkTails ( _WORD m_nPnt, p_POINT m_pPnt, p_POINT m_pThk ) 
 {         
  _INT    i,j;         
  _WORD   idx1 ;
  _WORD   idx2 ;
  _WORD   nPnt ;
 p_POINT  pPnt ;
 p_POINT  pThk ;
 p_POINT  pCurr;      
 p_POINT  pPrev;
 p_POINT  pNext;

   if ( m_nPnt   < 8  )
     return _FALSE;

   if ( m_pPnt == _NULL || m_pThk == _NULL ) 
     return _FALSE;                   

   nPnt = m_nPnt - 2; // Skip First Break
   pPnt = m_pPnt + 1; // Skip First Break
   pThk = m_pThk + 1; // Skip First Break
            
   pCurr =  pPnt ;                 
   for ( i = 0; i < (_INT) nPnt; i++ )
   {                  
     j = 0;
     do {
        j++;
        idx1  = (nPnt + (i-j)) % nPnt;
        idx2  = (nPnt + (i+j)) % nPnt;
        pPrev = pCurr + idx1;
        pNext = pCurr + idx2;
      } while ( pPrev->x == pNext->x && pPrev->y == pNext->y && j <= 4 );       
                               
     if ( j == 1 )                          
        continue;
                 
     if ( j >  4 ) 
        continue;
        
     while ( --j >= 0 )      
      {
       idx1  = (nPnt + (i-j)) % nPnt;
       idx2  = (nPnt + (i+j)) % nPnt;
       pThk[idx1].y  =  1;           
       pThk[idx2].y  =  1;
      } 
   }
   
  return _TRUE; 
} // End of MarkTails ();

_WORD CutTails ( _WORD m_nPnt, p_POINT m_pPnt, p_POINT m_pThk ) 
 {
  _WORD    i,j; 
  _BOOL   fSkip   = _FALSE;
 p_POINT  pNewTrc = m_pPnt;
 p_POINT  pNewThk = m_pThk;
 p_POINT  pOldTrc = m_pPnt;
 p_POINT  pOldThk = m_pThk;

   for ( i = j = 0; i < m_nPnt + 1; i++, pOldTrc++, pOldThk++ ) 
   { // For All Points            
    if ( m_pThk[i].y )
        continue;
        
    if ( pOldTrc->y != -1 )
     if ( (pNewTrc-1)->x == pOldTrc->x && 
          (pNewTrc-1)->y == pOldTrc->y  )
         continue;
         
    pNewTrc->x = pOldTrc->x;
    pNewTrc->y = pOldTrc->y; 
    pNewThk->x = pOldThk->x;
    pNewThk->y = pOldThk->y; 
    pNewTrc++;
    pNewThk++;
    j++;
   }                            
 
   m_nPnt  = j  -  1;
      
   if ( m_pPnt[1].x == m_pPnt[m_nPnt - 2].x && 
        m_pPnt[1].y == m_pPnt[m_nPnt - 2].y  )
    {                                          
       pNewTrc = m_pPnt + m_nPnt - 2;
       pNewThk = m_pThk + m_nPnt - 2;
       
       pNewTrc->x =  0; 
       pNewTrc->y = -1;       
       pNewThk->x =  0; 
       pNewThk->y =  0;       
       
       pNewTrc++;
       pNewThk++;       
       
       pNewTrc->x =  0; 
       pNewTrc->y = -1;
       pNewThk->x =  0; 
       pNewThk->y =  0;
       
       m_nPnt--;
    }    
    
   return m_nPnt; 
} // End of CutTails 
       
       
       
       
 /****************************************************************/
 /* Purpose : Convert trace to dct representation                */
 /****************************************************************/

 _BOOL _FPREFIX Trace3DToDct ( _WORD nTrace, p_3DPOINT pTrace ,
                               _WORD  Order, p_3DPOINT pCoeffs,
                               _WORD  nItr ,  _WORD  nFiltrItr,
                              p_LONG  pLam , p_LONG  pErr     ,
                               _BOOL  fCutTails )
  {
     _WORD      Sam;
     _WORD      Resam;
     _BOOL      fRet    = _TRUE;
    p_3DPOINT   pThk    = _NULL;
    p_3DPOINT   pPnt    = _NULL;
    p_ODATA3D   pOdata  = _NULL;
    p_ARDATA3D  pARdata = _NULL;

	ASSERT(2 < nTrace);

    if ( Order > 16 || Order < 4 )
      return _FALSE;

    nTrace = nTrace;
    pTrace = pTrace;
    Resam = 32;

    pOdata  = (p_ODATA3D) HWRMemoryAlloc (nTrace*sizeof(_ODATA3D) + (Resam+1)*sizeof(_ARDATA3D));
    if ( pOdata == _NULL ) {fRet = _FALSE; goto Exit;}

    pARdata = (p_ARDATA3D)((p_UCHAR)pOdata + nTrace*sizeof(_ODATA3D));

    Sam = TraceToOdata3D ( pOdata, pTrace, nTrace, nFiltrItr );

    if ( Sam < 2 ) {fRet = _FALSE; goto Exit;}

// ttTime  = GetTickCount();

    ApprOdata3D( Sam, pOdata, Resam, pARdata, Order, pCoeffs, nItr, pLam, pErr );

// ttttt = GetTickCount() - ttTime;
// OTime += ttttt;

// PegDebugPrintf("NPoints %d, Sam %d, Order %d, NItr %d Time: %d\n", (int)nTrace, (int)Sam, (int)Order, (int)nItr, ttttt);

   Exit:

    if ( pThk    ) (_VOID) HWRMemoryFree ( pThk    );
    if ( pPnt    ) (_VOID) HWRMemoryFree ( pPnt    );
    if ( pOdata  ) (_VOID) HWRMemoryFree ( pOdata  );

    return  fRet;
  }
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\div_let.cpp ===
#include "hwr_sys.h"
#include "ams_mg.h"
#include "div_let.h"
#include "lowlevel.h"
#include "low_dbg.h"
#include "xr_names.h"

/*************************************************************************/
/* This program gets information about beginning and ending each letter  */
/* in the answer (I mean numbers of points in corresponding trajectory). */
/* Input: xrdata and rec_words for this variant of answer.               */
/* Output: pointer on structure with all nessesary information           */
/* Return code: SUCCESS - everything is OK, after using data it's        */
/* nessesary to free memory in output structure                          */
/*              UNSUCCESS - memory problems, function can't work         */
/*************************************************************************/

#if defined (FOR_GERMAN) || defined (FOR_SWED)
#define  X_IsLikeXTST(pxrd)  (   (pxrd)->xr.type==X_ST        \
                              || (pxrd)->xr.type==X_XT        \
                              || (pxrd)->xr.type==X_XT_ST     \
                              || (pxrd)->xr.type==X_UMLAUT  )
#elif defined (FOR_FRENCH)    /* !defined(FOR_GERMAN) */
#define  X_IsLikeXTST(pxrd)  (   (pxrd)->xr.type==X_ST        \
                              || (pxrd)->xr.type==X_XT        \
                              || (pxrd)->xr.type==X_XT_ST     \
                              || (pxrd)->xr.type==X_CEDILLA   \
                              || (pxrd)->xr.type==X_UMLAUT  )
#elif defined (FOR_INTERNATIONAL)
#define  X_IsLikeXTST(pxrd)  (   (pxrd)->xr.type==X_ST        \
                              || (pxrd)->xr.type==X_XT        \
                              || (pxrd)->xr.type==X_XT_ST     \
                              || (pxrd)->xr.type==X_CEDILLA   \
                              || (pxrd)->xr.type==X_UMLAUT  )
#else                        /* !defined(FOR_GERMAN) && !defined(FOR_FRENCH)*/
#define  X_IsLikeXTST(pxrd)  (   (pxrd)->xr.type==X_ST        \
                              || (pxrd)->xr.type==X_XT        \
                              || (pxrd)->xr.type==X_XT_ST  )
#endif  /* FOR_GERMAN and FOR_FRENCH */

/*  Auxiliary function: */

static  _VOID  UpdateBegEnd ( pPart_of_letter pCurPart,
                              xrdata_type _PTR  xrd );

static  _VOID  UpdateBegEnd ( pPart_of_letter pCurPart,
                              xrd_el_type _PTR  xrd )
{
  DBG_CHK_err_msg( pCurPart==_NULL, "conn_trj...: BAD pCurPart");
  if  ( xrd->begpoint < pCurPart->ibeg )
    pCurPart->ibeg = xrd->begpoint;
  if  ( xrd->endpoint > pCurPart->iend )
    pCurPart->iend = xrd->endpoint;
}

#if !defined PEGASUS || defined PSR_DLL // AVP -- save space

_SHORT connect_trajectory_and_answers(xrd_el_type _PTR xrdata,
                                      rec_w_type _PTR rec_word,
                                      pOsokin_output pOutputData)
{ _SHORT i,j,ibeg_xr,iend_xr,num_parts,all_parts;
  pPart_of_letter pParts;
//  _WORD memory=w_lim*MAX_PARTS_IN_LETTER*sizeof(Part_of_letter);

  if  ( rec_word[0].linp[0] == 0 )  /* i.e. no letters info */
    return  UNSUCCESS;

//  if((pOutputData->pParts_of_letters=(pPart_of_letter)HWRMemoryAlloc(memory))==_NULL)
//    goto err;
  pParts=pOutputData->Parts_of_letters;
  HWRMemSet((p_VOID)pParts,0,sizeof(pOutputData->Parts_of_letters));
  HWRMemSet((p_VOID)pOutputData->num_parts_in_letter,0,w_lim);

  /* i means number of letter in word */
  /* all_parts - number of all parts of all letters in word */
  for(iend_xr=0,all_parts=0,i=0;rec_word->word[i];i++)
   {
        /* num_parts - number of parts of given letter in word */
        /* ibeg_xr, iend_xr - number of 1-st and last xr_element in letter */
     ibeg_xr=iend_xr+1;
     iend_xr=ibeg_xr+rec_word->linp[i]-1;
     if(all_parts>=(w_lim-1)*MAX_PARTS_IN_LETTER)
      goto err;
     if(connect_trajectory_and_letter(xrdata,ibeg_xr,iend_xr,
                                      &num_parts,pParts) !=SUCCESS)
      goto err;
     pOutputData->num_parts_in_letter[i]=(_UCHAR)num_parts;
     pParts+=num_parts;
     all_parts+=num_parts;
   }

  /*Check result*/
  all_parts=0;
  for(i=0;rec_word->word[i]!=0;i++)
   {
     for(j=0;j < pOutputData->num_parts_in_letter[i];j++)
      {
        if(pOutputData->Parts_of_letters[all_parts].ibeg >
               pOutputData->Parts_of_letters[all_parts].iend)
         goto err;
        all_parts++;
      }
   }

  return SUCCESS;

  err:
//   if(pOutputData->pParts_of_letters!=_NULL)
//    HWRMemoryFree(pOutputData->pParts_of_letters);
//   pOutputData->pParts_of_letters=_NULL;
   return UNSUCCESS;

} /* end of connect_trajectory_and_answers */

#endif // 0

/*************************************************************************/
/* This program gets information about the beginning and ending of the   */
/* single letter (I mean numbers of points in corresponding trajectory). */
/* Input: xrdata, index of xr_beg and xr_end for this letter             */
/* Output: pointer on structure with parts of letter and number of parts */
/* Return code: SUCCESS - everything is OK,                              */
/*              UNSUCCESS - memory problems, function can't work         */
/*************************************************************************/
_SHORT connect_trajectory_and_letter(xrd_el_type _PTR xrdata,
                                     _SHORT ibeg_xr, _SHORT iend_xr,
                                     p_SHORT n_parts,pPart_of_letter pParts)
{
 _SHORT j,num_parts;
 _BOOL bNewStroke;
 pPart_of_letter pCurPart = _NULL;
 xrd_el_type _PTR  xrd_j;

  for(num_parts=0,bNewStroke=_TRUE,j=ibeg_xr;j<=iend_xr;j++)
   {
     xrd_j = &xrdata[j];
     /* if break in letter - new stroke begins */
     if(X_IsBreak(xrd_j) || xrd_j->xr.type==X_ZN)
      {
        if(!bNewStroke)
         bNewStroke=_TRUE;
      }
     /* if XT or ST element - write this element as another
        part, but see coments CHE below */
     else if( X_IsLikeXTST(xrd_j) )
      {
          /*CHE:  Check whether this XR is the doubled one: */
        if  ( j > ibeg_xr )  {
          _INT  jPrev;
          for  ( jPrev=ibeg_xr;  jPrev<j;  jPrev++ )  {
            if  (   xrdata[jPrev].xr.type == xrd_j->xr.type
                 && xrdata[jPrev].begpoint == xrd_j->begpoint
                 && xrdata[jPrev].endpoint == xrd_j->endpoint
                )
              break;
          }
          if  ( jPrev < j )  //i.e. this XR is the doubled one
            continue;
        }

        if(!bNewStroke)
         if ( X_IsLikeXTST(xrd_j - 1) )
          bNewStroke = _TRUE;
        pCurPart = &pParts[num_parts++];
        if(num_parts>MAX_PARTS_IN_LETTER)
         goto err;
        pCurPart->ibeg = xrd_j->begpoint;
        pCurPart->iend = xrd_j->endpoint;
        if  ( !bNewStroke )  {
        /*CHE:  Don't do new part if the _ST_(_XT_) appears
                within codes sequence for one and the same stroke.
        */
          Part_of_letter  partTmp = *pCurPart;
          DBG_CHK_err_msg( num_parts < 2,
                           "connect...: BAD num_parts" );
          *pCurPart = pParts[num_parts-2];
          pParts[num_parts-2] = partTmp;
        }
      }
     /* if other xr_element and new stroke begins - write new
        part, if it's the old one - update beg and end */
     else
      {
        if(bNewStroke)
         {
           pCurPart = &pParts[num_parts++];
           if(num_parts>MAX_PARTS_IN_LETTER)
            goto err;
           pCurPart->ibeg = xrd_j->begpoint;
           pCurPart->iend = xrd_j->endpoint;
           bNewStroke=_FALSE;
         }
        else
         UpdateBegEnd( pCurPart, xrd_j );
      }
   }

 *n_parts=num_parts;

 return SUCCESS;

 err:
  return UNSUCCESS;

} /* end of connect_trajectory_and_letter */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\dct.cpp ===
#include    "bastypes.h"

  #define    _2C1_8_H      0x8A
  #define    _2C1_8_L      0x8B
  #define      C2_8_H      0xB5
  #define      C2_8_L      0x04
  #define    _2C3_8_H      0x14E
  #define    _2C3_8_L      0x7A

  #define    _2C01_16_H    0x82
  #define    _2C01_16_L    0x81
  #define    _2C03_16_H    0x99
  #define    _2C03_16_L    0xF1
  #define    _2C05_16_H    0xE6
  #define    _2C05_16_L    0x64
  #define    _2C07_16_H    0x290
  #define    _2C07_16_L    0x1B

  #define    _2C01_32_H    0x80
  #define    _2C01_32_L    0x9E
  #define    _2C03_32_H    0x85
  #define    _2C03_32_L    0x2C
  #define    _2C05_32_H    0x91
  #define    _2C05_32_L    0x23
  #define    _2C07_32_H    0xA5
  #define    _2C07_32_L    0x96
  #define    _2C09_32_H    0xC9
  #define    _2C09_32_L    0xC4
  #define    _2C11_32_H    0x10F
  #define    _2C11_32_L    0x88
  #define    _2C13_32_H    0x1B8
  #define    _2C13_32_L    0xF2
  #define    _2C15_32_H    0x519
  #define    _2C15_32_L    0xE4

  #define    _2C01_64_H    0x80
  #define    _2C01_64_L    0x27
  #define    _2C03_64_H    0x81
  #define    _2C03_64_L    0x66
  #define    _2C05_64_H    0x83
  #define    _2C05_64_L    0xf4
  #define    _2C07_64_H    0x87
  #define    _2C07_64_L    0xf2
  #define    _2C09_64_H    0x8d
  #define    _2C09_64_L    0x98
  #define    _2C11_64_H    0x95
  #define    _2C11_64_L    0x3b
  #define    _2C13_64_H    0x9f
  #define    _2C13_64_L    0x5c
  #define    _2C15_64_H    0xac
  #define    _2C15_64_L    0xc0
  #define    _2C17_64_H    0xbe
  #define    _2C17_64_L    0x99
  #define    _2C19_64_H    0xd6
  #define    _2C19_64_L    0xdf
  #define    _2C21_64_H    0xf8
  #define    _2C21_64_L    0xfa
  #define    _2C23_64_H    0x12b
  #define    _2C23_64_L    0x60
  #define    _2C25_64_H    0x17b
  #define    _2C25_64_L    0xf2
  #define    _2C27_64_H    0x20e
  #define    _2C27_64_L    0xca
  #define    _2C29_64_H    0x368
  #define    _2C29_64_L    0x59
  #define    _2C31_64_H    0xa30
  #define    _2C31_64_L    0xa4

ROM_DATA _LONG   _2C32 [] =
  {
   0x8027L, 0x8166L, 0x83F4L, 0x87F2L, 0x8D98L, 0x953BL, 0x9F5CL, 0xACC0L,
   0xBE99L, 0xD6DFL, 0xF8FAL, 0x12b60L,0x17BF2L,0x20ECAL,0x36859L,0xa30A4L
  };

   /************************************************************************/

  _VOID  FDCT4 ( p_LONG  x );
  _VOID  FDCT8 ( p_LONG  x );
  _VOID  FDCT16( p_LONG  x );
  _VOID  FDCT32( p_LONG  x );
  
  /************************************************************************/
  /*         4-point Forward Discrete Cosine Transform                    */
  /************************************************************************/

  _VOID  FDCT4 ( p_LONG  x )
   {
    _LONG  x0, x1, x2, x3, a0;

     //  Stage  0, reordering
     x0 = x[0];
     x1 = x[1];
     x2 = x[3];
     x3 = x[2];
     //  Stage  1, Butterflys and Rotations
     a0  = x0 + x2;
     x2  = x0 - x2;
     x0  = a0;
     a0  = x1 + x3;
     x3  = x1 - x3;
     x1  = a0;
     x2  =  ((x2 * _2C1_8_H) >> 8) + ((x2 * _2C1_8_L) >> 16);
     x3  =  ((x3 * _2C3_8_H) >> 8) + ((x3 * _2C3_8_L) >> 16);
     //  Stage 2,  Butterfly and Rotation
     a0  = x0 + x1;
     x1  = x0 - x1;
     x0  = a0;
     a0  = x2 + x3;
     x3  = x2 - x3;
     x2  = a0;
     x1  =  ((x1 * C2_8_H) >> 8) + ((x1 * C2_8_L) >> 16);
     x3  =  ((x3 * C2_8_H) >> 8) + ((x3 * C2_8_L) >> 16);
     //  Stage  3, back reordering
     x[0] = x0;   x[1] = x2 + x3;
     x[2] = x1;   x[3] = x3;
   }  //  End of FDCT4

   

 /************************************************************************/
 /*    8 - Point  Forward  Discrete  Cosine  Transform                   */
 /************************************************************************/

 _VOID   FDCT8  ( p_LONG  x )
  {
    _LONG  x0, x1, x2, x3, x4;

    //  Stage  1, reordering, butterflys and rotations
    x1    =  x0 = x[0];
    x4    =  x[7];
    x0   +=  x4;       //  x0 = x[0] + x[7];
    x1   -=  x4;       //  x1 = x[0] - x[7];
    x2    =  x3 = x[3];
    x4    =  x[4];
    x2   +=  x4;       //  x2 = x[3] + x[4];
    x3   -=  x4;       //  x3 = x[3] - x[4];
    x[0]  =  x0;
    x[3]  =  x2;
    x0    =  ((x1 * _2C01_16_H) >>  8);
    x0   +=  ((x1 * _2C01_16_L) >> 16);
    x[4]  =    x0;
    x0    =  ((x3 * _2C07_16_H) >>  8);
    x0   +=  ((x3 * _2C07_16_L) >> 16);
    x[7]  =    x0;

    x1    =  x0 = x[1];
    x4    =  x[6];
    x0   +=  x4;       //  x0 = x[1] + x[6];
    x1   -=  x4;       //  x1 = x[1] - x[6];
    x2    =  x3 = x[2];
    x4    =  x[5];
    x2   +=  x4;       //  x2 = x[2] + x[5];
    x3   -=  x4;       //  x3 = x[2] - x[5];
    x[1]  =  x0;
    x[2]  =  x2;
    x0    =  ((x1 * _2C03_16_H) >>  8);
    x0   +=  ((x1 * _2C03_16_L) >> 16);
    x[5]  =    x0;
    x0    =  ((x3 * _2C05_16_H) >>  8);
    x0   +=  ((x3 * _2C05_16_L) >> 16);
    x[6]  =    x0;

    //  Stage  2, 2 x four point FDCT
    FDCT4 ( x     );
    FDCT4 ( x + 4 );

    //  Stage  3, Second reordering
    x0    =  x[7];
    x1    =  x[6];
    x[6]  =  x[3];     //  x[6] = x'[3]
    x0   +=  x1  ;     //  x0   = x'[6] + x'[7];
    x2    =  x[5];
    x[5]  =  x0  ;     //  x[5] = x'[6] + x'[7];
    x0    =  x[4];     //
    x[4]  =  x[2];     //  x[4] = x'[2];
    x1   +=  x2  ;     //  x1   = x'[5] + x'[6];
    x[3]  =  x1  ;     //  x[3] = x'[5] + x'[6];
    x[2]  =  x[1];     //  x[2] = x'[1];
    x0   +=  x2  ;     //  x0   = x'[4] + x'[5];
    x[1]  =  x0  ;     //  x[1] = x'[4] + x'[5];
  }  // End of  FDCT8 ( p_LONG  x )

 
 /************************************************************************/
 /*   16 - Point  Forward  Discrete  Cosine  Transform                   */
 /************************************************************************/

 _VOID   FDCT16 (p_LONG  x)
  {
   //  Stage  1, reordering, butterflys and rotations
   {
      _LONG  x0, x1, x2, x3, x4;
       x1    =  x0 = x[0];
       x4    =  x[15];
       x0   +=  x4;       //  x0 = x[0] + x[15];
       x1   -=  x4;       //  x1 = x[0] - x[15];
       x2    =  x3 = x[7];
       x4    =  x[8];
       x2   +=  x4;       //  x2 = x[7] + x[8];
       x3   -=  x4;       //  x3 = x[7] - x[8];
       x[0]  =  x0;
       x[7] =  x2;
       x0    =  ((x1 * _2C01_32_H) >>  8);
       x0   +=  ((x1 * _2C01_32_L) >> 16);
       x[8]  =    x0;
       x0    =  ((x3 * _2C15_32_H) >>  8);
       x0   +=  ((x3 * _2C15_32_L) >> 16);
       x[15] =    x0;

       x1    =  x0 = x[1];
       x4    =  x[14];
       x0   +=  x4;       //  x0 = x[1] + x[14];
       x1   -=  x4;       //  x1 = x[1] - x[14];
       x2    =  x3 = x[6];
       x4    =  x[9];
       x2   +=  x4;       //  x2 = x[6] + x[9];
       x3   -=  x4;       //  x3 = x[6] - x[9];
       x[1]  =  x0;
       x[6]  =  x2;
       x0    =  ((x1 * _2C03_32_H) >>  8);
       x0   +=  ((x1 * _2C03_32_L) >> 16);
       x[9]  =    x0;
       x0    =  ((x3 * _2C13_32_H) >>  8);
       x0   +=  ((x3 * _2C13_32_L) >> 16);
       x[14] =    x0;

       x1    =  x0 = x[2];
       x4    =  x[13];
       x0   +=  x4;       //  x0 = x[2] + x[13];
       x1   -=  x4;       //  x1 = x[2] - x[13];
       x2    =  x3 = x[5];
       x4    =  x[10];
       x2   +=  x4;       //  x2 = x[5] + x[10];
       x3   -=  x4;       //  x3 = x[5] - x[10];
       x[2]  =  x0;
       x[5]  =  x2;
       x0    =  ((x1 * _2C05_32_H) >>  8);
       x0   +=  ((x1 * _2C05_32_L) >> 16);
       x[10] =    x0;
       x0    =  ((x3 * _2C11_32_H) >>  8);
       x0   +=  ((x3 * _2C11_32_L) >> 16);
       x[13] =    x0;

       x1    =  x0 = x[3];
       x4    =  x[12];
       x0   +=  x4;       //  x0 = x[3] + x[12];
       x1   -=  x4;       //  x1 = x[3] - x[12];
       x2    =  x3 = x[4];
       x4    =  x[11];
       x2   +=  x4;       //  x2 = x[4] + x[11];
       x3   -=  x4;       //  x3 = x[4] - x[11];
       x[3]  =  x0;
       x[4]  =  x2;
       x0    =  ((x1 * _2C07_32_H) >>  8);
       x0   +=  ((x1 * _2C07_32_L) >> 16);
       x[11] =    x0;
       x0    =  ((x3 * _2C09_32_H) >>  8);
       x0   +=  ((x3 * _2C09_32_L) >> 16);
       x[12] =    x0;
    }  // End of stage  1;

    //  Stage  2, 2 x 8-point FDCT
    FDCT8 ( x     );
    FDCT8 ( x + 8 );

    //  Stage  3, additional summarization
    {
      _LONG  x0, x1;
      _INT   x2;
     p_LONG  pX;

       pX    =  x + 8;
       x0    =  *pX  ;
       x2    =  7;
       do {
          x1  = *(pX + 1);
          x0 +=  x1 ;
         *pX  =  x0 ;
          x0  =  x1 ;
          pX ++;
          x2 --;
        } while ( x2 > 0 );
    }  //  End of Stage 3;

    //  Stage  4, second reordering
    {
      _LONG  x0, x1;
      _INT   i0, i1;
       for ( i0 = 1; i0 < 8; i0 += 2 )
        {
          i1 = i0;
          x1 = x[i1];
          do {
            i1  <<=  1;
            if ( i1 > 15 ) i1 -= 15;
            x0    =  x[i1];
            x[i1] =  x1;
            x1    =  x0;
          }  while ( i1!=i0 );
        }
    } //  End of Stage 4;

  } // End of FDCT16 (p_LONG  x);



 
 /************************************************************************/
 /*   32 - Point  Forward  Discrete  Cosine  Transform                   */
 /************************************************************************/

 _VOID   FDCT32 (p_LONG  x)
  {
    //  Stage  1, reordering
    {
      _LONG  x0, x1;
      _INT   i0, i1;
      i0 = 16;
      i1 = 31;
      do {
        x0    = x[i0];
        x1    = x[i1];
        x[i0] = x1;
        x[i1] = x0;
        i0++;
        i1--;
       } while ( i0 < i1 );
    }

    //  Stage  2, butterflys and rotations
    {
      _LONG  x0, x1, x2;
      _INT   i0;

      i0  =  0;
      do {
         x0     =  x[i0];
         x2     =  x0;
         x1     =  x[i0 + 16];
         x0    +=  x1;
         x2    -=  x1;
         x[i0]  =  x0;
         x0     = _2C32[i0];
         x1     =  x0;
         x0   >>=   8;
         x1    &=0xFF;
         x0    =  ((x2 * x0) >>  8);
         x1    =  ((x2 * x1) >> 16);
         x0   +=   x1;
         x[i0 + 16] = x0;
         i0++;
       } while ( i0 < 16);
    }

    //  Stage  3, 2 x 16-point FDCT
    FDCT16 ( x      );
    FDCT16 ( x + 16 );

    //  Stage  4, additional summarization
    {
      _LONG  x0, x1;
      _INT   x2;
     p_LONG  pX;

       pX    =  x + 16;
       x0    =  *pX  ;
       x2    =  15;
       do {
          x1  = *(pX + 1);
          x0 +=  x1 ;
         *pX  =  x0 ;
          x0  =  x1 ;
          pX ++;
          x2 --;
        } while ( x2 > 0 );
    }  //  End of Stage 3;

    //  Stage  5, second reordering
    {
      _LONG  x0, x1;
      _INT   i0, i1;
       for ( i0 = 1; i0 < 6; i0 += 2 )
        {
          i1 = i0;
          x1 = x[i1];
          do {
            i1  <<=  1;
            if ( i1 > 31 ) i1 -= 31;
            x0    =  x[i1];
            x[i1] =  x1;
            x1    =  x0;
          }  while ( i1!=i0 );
        }

       for ( i0 = 30; i0 > 25; i0 -= 2 )
        {
          i1 = i0;
          x1 = x[i1];
          do {
            i1  <<=  1;
            if ( i1 > 31 ) i1 -= 31;
            x0    =  x[i1];
            x[i1] =  x1;
            x1    =  x0;
          }  while ( i1!=i0 );
        }
    } //  End of Stage 4;

  } // End of FDCT32 (p_LONG  x);
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\dtiimgcf.cpp ===
// **************************************************************************
// *    DTI file as C file                                                  *
// **************************************************************************

#include "ams_mg.h"  
#include "dti.h"  

// ****   DTI body   ********************************************************
ROM_DATA _ULONG img_dti_body[22187] =  
 {  
0x00015AA8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x24852481, 0x24D424A9, 0x25542521, 0x264B25F7, 0x26672658, 0x26C32676, 0x26FB26DA, 
0x271A2708, 0x27712722, 0x280127A0, 0x28982846, 0x295E2923, 0x2A4829DB, 0x2AAD2A9E, 0x2AE42ADA, 
0x2AF62AEC, 0x2B592B30, 0x2C4D2BF4, 0x2CAF2C75, 0x2E172D52, 0x2F1E2E75, 0x2FEA2F84, 0x306D3030, 
0x311330C6, 0x31603133, 0x31F731AB, 0x32813238, 0x32DD32AF, 0x338C3321, 0x33D833AF, 0x33FF33F5, 
0x341C340D, 0x34220000, 0x357934F4, 0x362C35A1, 0x375036B3, 0x380B3799, 0x38BF3879, 0x39933968, 
0x3A4C3A01, 0x3B253AA1, 0x3C263B85, 0x3D073C7E, 0x3DA23D2D, 0x3E713DCF, 0x3F2C3ECC, 0x3F5A3F3C, 
0x3F7B3F6A, 0x407D3FAB, 0x41BA4170, 0x42B04251, 0x43C24333, 0x45374447, 0x46AC45BC, 0x476746F1, 
0x48F44827, 0x4A8149B4, 0x4C0E4B41, 0x4CD84C71, 0x4DD34D49, 0x4E754DFB, 0x4EE34EB1, 0x4F514F1F, 
0x504B0000, 0x51BC5099, 0x53B052F4, 0x541853E4, 0x00000000, 0x54915430, 0x000054EA, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x551D0000, 
0x56455609, 0x00005698, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x060C0C44, 0x22800802, 0x00800000, 0x00008080, 0x00C000A0, 0x00000006, 0x00000000, 
0x00000000, 0x40400000, 0x00000000, 0x00000000, 0x00000200, 0x00000002, 0x00000400, 0x00000000, 
0x00006202, 0x00000026, 0x020C0000, 0x0C000A02, 0x0002020C, 0xA0000800, 0xA0000000, 0x2080A0C0, 
0x00008020, 0x00000404, 0x20004040, 0x20200806, 0x00000624, 0x00002406, 0x00000000, 0x00000000, 
0x0000000A, 0x020C0C64, 0x00A00200, 0xC0004000, 0x000080A0, 0x00006000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0A02062, 0x000040B0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000B0100, 0x00020000, 
0x00000000, 0x00000042, 0x60800000, 0x60C0C020, 0x00000080, 0x64800000, 0xC4C00080, 0x0002446C, 
0x60000200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0020A000, 0x00200000, 
0x00006060, 0x90200062, 0x000040C0, 0x00000000, 0x00020000, 0x08000000, 0x000A0000, 0x00080A00, 
0x0C0A0000, 0x00000000, 0x04040000, 0x04040000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000024, 0x00000000, 0x00000000, 0x00000000, 0x8A000000, 0x0CC0068C, 0x0080A60A, 
0xC0800000, 0x00000000, 0x2000010A, 0x40400000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000042, 0x00000000, 0x10000000, 0x00000000, 0x80000000, 0x00C000A0, 0x00002000, 
0xC0200000, 0x00001000, 0x20000000, 0x00000000, 0x00000200, 0x0C000003, 0x00000000, 0x00000000, 
0x00000001, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0x0C000000, 0x0A0A020A, 0x02020C08, 
0x08020002, 0x00000000, 0x06060606, 0x0A0A0000, 0x00000604, 0x00000406, 0x00C00000, 0x00C00000, 
0x00000000, 0x00000024, 0x00000000, 0x00000000, 0x00000000, 0x0B000000, 0x0C00040C, 0x0000060C, 
0x00000200, 0x00000000, 0x02010000, 0x02262000, 0x00000020, 0x00002000, 0x002000C0, 0x00A00000, 
0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x02000000, 0x00050000, 0x00020400, 
0x0C040000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000064, 0x00000000, 0x00000000, 0x00000000, 0x5A000000, 0x404CC6CC, 0x00202600, 
0x0C000000, 0x00000000, 0x02000000, 0x00200000, 0x00000000, 0x00000000, 0x00000000, 0x00001000, 
0x00000000, 0x00000082, 0x60800000, 0x80A00040, 0xC0C06080, 0x0080C000, 0x00000000, 0x00000000, 
0x00000000, 0x0000C0C0, 0x00000000, 0x0020A080, 0x40006000, 0x00008080, 0x000C0100, 0x080A0000, 
0x00000080, 0x00000026, 0x090C0000, 0x0C000A02, 0x0002020C, 0xA0000800, 0xA0000070, 0x2080A0C0, 
0x00008030, 0x00010404, 0x20004040, 0x20200806, 0x00000624, 0x00002406, 0x00000000, 0x00000000, 
0x0000000A, 0x00000061, 0xC0A00000, 0x00A0A080, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000050, 0x00000000, 0x00002010, 0x00000000, 0x00000010, 0x0003000B, 0x0B0C0000, 
0x000020B0, 0x00000080, 0x20800000, 0x0040A040, 0xC0C06080, 0x008000C0, 0x00000000, 0x00000000, 
0x00000000, 0xC0C00000, 0x00000000, 0x0000A080, 0x00408080, 0x00000000, 0x00000000, 0x00000000, 
0x00008000, 0x00000062, 0x00000000, 0x00000000, 0x00000000, 0x28000000, 0x200C0000, 0xC0A82AA0, 
0x0C08C080, 0x00000000, 0xC2A00000, 0x84A40000, 0x000080A0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000026, 0x0C0A0000, 0x0A000C06, 0x0000000A, 0x40000000, 0x90000010, 0x002040C0, 
0x00008000, 0x0A0A0000, 0x00000000, 0x00020604, 0x00000002, 0x00000002, 0x00000000, 0x00000000, 
0x0000000A, 0x00000042, 0x00200000, 0x00200000, 0x00002020, 0x00C00040, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000100, 0x000B0001, 0x00000000, 0x00000500, 
0x00000000, 0x00000026, 0x0C0A0000, 0x000C0106, 0x0000000A, 0x000A0000, 0x01000001, 0x00000000, 
0x00000000, 0x00000A0A, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00C08060, 0x00800000, 
0x00000A02, 0x00000022, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00CC0260, 0x06640000, 
0x00000000, 0x00000066, 0xB2C80000, 0x60A0A030, 0x202424C8, 0x0A822008, 0x00000000, 0x00000600, 
0x00000000, 0x66606080, 0x02000000, 0x0608A8A2, 0x00086B4A, 0x01004040, 0x00000000, 0x00000000, 
0x00007470, 0x00000066, 0x00000000, 0x40000000, 0x00C04000, 0x0A00C000, 0x0A0A080C, 0x00000400, 
0x00000000, 0x00002040, 0x00000000, 0x00004060, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 
0x00000000, 0x00000044, 0x6C880000, 0x62CC0225, 0x00000088, 0x66880000, 0xCC020088, 0x000044B6, 
0x06000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0022AA00, 0x00220000, 
0x00000666, 0x0C050066, 0x2030010C, 0xA0000000, 0x60C0A040, 0x0000C010, 0x00000000, 0x00000000, 
0x00000000, 0x000080A0, 0x00000000, 0x00000020, 0x00000000, 0x00007000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0xA1A030A0, 0x2C85C096, 
0xA0300C42, 0x00000000, 0x6C646060, 0xA2A40000, 0x00006244, 0x00004060, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x21BC0000, 0xBC00A720, 0x002050BC, 0x00008700, 0x00000000, 0x00000000, 
0x00000000, 0x00004040, 0x00000000, 0x00008260, 0x00006040, 0x00004060, 0x00000000, 0x00001000, 
0x00000004, 0x00000066, 0x0C240000, 0x00040402, 0x00000020, 0x40000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00202000, 0x0020B040, 0x00000000, 0x00000000, 0x00000000, 
0x00000404, 0x00000086, 0x8CC20000, 0xC004A81C, 0x304040C0, 0x00307020, 0x00000000, 0x00000000, 
0x00000000, 0x02000040, 0x00000000, 0x0000C7C5, 0x00004010, 0x00001030, 0x00000000, 0x00000000, 
0x00000242, 0x00000066, 0x20400000, 0xB0000000, 0x60C0A090, 0x0A00C000, 0x00000502, 0x01030A08, 
0x00000606, 0x000080A0, 0x08080808, 0x0A0C0020, 0x0000060A, 0x00008606, 0x00000000, 0x00000000, 
0x00000000, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x40000000, 0x404020B0, 0x00000000, 
0x00000000, 0x00000000, 0x00000010, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0xA0C00000, 0xB0A0A020, 0x202020C0, 0x02802000, 0x000A0000, 0x00030600, 
0x0B060000, 0x60608080, 0x02000000, 0x0000A0A0, 0x00005040, 0x00004040, 0x00000000, 0x00000000, 
0x00008080, 0x00000064, 0x0C0C0000, 0x0C000C04, 0x0002050C, 0x00000800, 0x00000000, 0x80420000, 
0x000020C0, 0x00000004, 0x00000000, 0x00000A07, 0x00000202, 0x00000202, 0x00000000, 0x00000700, 
0x0000000B, 0x00000024, 0x00000000, 0x00000000, 0x01000000, 0x00000000, 0x00400000, 0x00000000, 
0x20000000, 0x05010000, 0x00000000, 0x00000402, 0x00000505, 0x00000000, 0x00C00060, 0x00C00000, 
0x00000300, 0x060C0C64, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80602040, 
0x002020C0, 0x00000000, 0x20000000, 0xC0800000, 0x00000050, 0x00000000, 0x00000400, 0x00000000, 
0x00000000, 0x00000084, 0x00000000, 0x00000000, 0x00000000, 0x6A000000, 0x004C062B, 0x80606680, 
0x4B02C0A0, 0x00000000, 0xA6CA0000, 0x50806000, 0x000080A0, 0x00000010, 0x00000000, 0x00000000, 
0x00000000, 0x60200060, 0x90800060, 0x00000020, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60200000, 0x00000000, 0x00002000, 0x00007060, 0x00000000, 0x00002000, 0x00000000, 
0x0000B000, 0xC0903068, 0x000040C0, 0x00000000, 0x00000000, 0x06000000, 0x04000200, 0x0C0C080A, 
0x00000C06, 0x00000000, 0x08000000, 0x0C0C0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00008000, 0x00000066, 0x02880000, 0x00000000, 0x00040488, 0x0A020008, 0x00000009, 0x00000700, 
0x00000000, 0x06000040, 0x02000040, 0x06488822, 0x80080A0A, 0xA040A0C0, 0x00000000, 0x0000A000, 
0x000004A0, 0x00000041, 0x00000000, 0x00000000, 0x00000000, 0x40000000, 0xC00000C0, 0x00000040, 
0x00000000, 0x00000000, 0x00004040, 0x00010100, 0x00000001, 0x00000100, 0x0003000C, 0x0B090000, 
0x00000000, 0x00000062, 0xC0A00000, 0x00A0A080, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x10000000, 0x00102000, 0x00001020, 0x00000000, 0x0000000C, 0x02067000, 
0x00009090, 0x00000046, 0xC0C00000, 0xC000C040, 0x002030C0, 0x00008000, 0x00000000, 0x00200000, 
0x00000000, 0x00000040, 0x06000000, 0x0000A070, 0x00002B26, 0x00002020, 0x00000000, 0x00000000, 
0x00000070, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0xC00040C0, 0x002060C0, 
0x00003020, 0x00000000, 0x20200000, 0x20600000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xB0800066, 0x00002080, 0x00000000, 0x00000000, 0x0C000000, 0x0A00020C, 0x02020C08, 
0x00000002, 0x00000000, 0x02000004, 0x080A0000, 0x00000604, 0x00000406, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x050C0000, 0x0CC00500, 0x0000000C, 0x00800200, 0xC0000000, 0x00000060, 
0x00000000, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00202000, 0x00000000, 
0x00006064, 0x00000048, 0x2A880000, 0x008A000C, 0x02028288, 0x00C800A0, 0x80000000, 0x00000080, 
0x00000000, 0x40400C0C, 0x00000000, 0x00000A08, 0x04000600, 0x00000808, 0x00000000, 0x00000000, 
0x00006204, 0x03000006, 0x0000000C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000A0, 0x00000000, 0x00000000, 
0x00000010, 0x00000035, 0x00000300, 0x00000000, 0x00000000, 0x08000000, 0x0A00010A, 0x0000030A, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60000000, 0x00000000, 0x00006100, 
0x00000000, 0x00000066, 0x2C860000, 0x07000606, 0x00404088, 0xA0200080, 0x00000000, 0x00006000, 
0x00000000, 0x60000000, 0x20000000, 0x00000000, 0x008000A0, 0x60000000, 0x00000000, 0x00000000, 
0x00004000, 0x00000060, 0x00000000, 0x00000000, 0x0C000000, 0xC0000000, 0xA0A050A0, 0x2020C0B0, 
0x80204020, 0x000C0000, 0x80606060, 0xA0A00000, 0x00006040, 0x00004060, 0x00000000, 0x00000000, 
0x00000000, 0x00000082, 0x60800000, 0x90002040, 0xC0C08080, 0x0080C000, 0x00000000, 0x00000000, 
0x00000000, 0x0000C0C0, 0x00000000, 0x00408080, 0x40006600, 0x0C008087, 0x00000000, 0x00000000, 
0x00000086, 0xA0C0B066, 0x00088040, 0x00000000, 0x00000008, 0x00000000, 0x00000040, 0x00000000, 
0x00000000, 0x00000004, 0x00000004, 0x02080802, 0x08000000, 0x00000A0C, 0x00004000, 0x00000100, 
0x00000009, 0x00000044, 0x02080000, 0x0C000A00, 0x00000808, 0x80000A00, 0x00B06080, 0x0020A000, 
0xC0000020, 0x04040000, 0x20000000, 0x60600000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000600, 0x00000066, 0x8AA80000, 0xC000B020, 0x002060A8, 0x00008000, 0x00000000, 0x00000000, 
0x00000000, 0x60000024, 0x00000004, 0x02088862, 0x08000040, 0x00002A00, 0x00000000, 0x00000000, 
0x000000A4, 0x00000062, 0x20600000, 0xC0008000, 0x2080A0A0, 0x0A00B000, 0x0B000208, 0x0204080C, 
0x00000600, 0x20000060, 0x00000006, 0x00068060, 0x00000022, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0x00200000, 0x00000000, 0x00000020, 0x04000000, 0x06000002, 0x080A080C, 
0x00000B02, 0x00000000, 0x06000000, 0x00262000, 0x20000004, 0x000042B0, 0x00000000, 0x00001000, 
0x00000010, 0x00000028, 0x0A0A0000, 0x04000C0C, 0x00200608, 0x80080000, 0x00A00080, 0x0080C000, 
0xC0A00000, 0x0C0C0000, 0x40400000, 0x40400A08, 0x00040808, 0x00000000, 0x00000000, 0x00000000, 
0x00000800, 0x00000006, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0C070008, 
0x00000C02, 0x00000000, 0x0C040000, 0x06040000, 0x00000208, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000006, 0x000B0000, 0x0C000400, 0x0001020C, 0x00000300, 0x00000000, 0x00000000, 
0x00000000, 0x00000100, 0x00000000, 0x00000505, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000004, 0x00000046, 0x07070000, 0x00000701, 0x00000001, 0x60000000, 0x00C000C0, 0x00001000, 
0x40000000, 0x00000005, 0x00400000, 0x00000100, 0x00000000, 0x00000407, 0x00000200, 0x00000000, 
0x0000000A, 0x00000060, 0x00800000, 0xC0008000, 0x000000C0, 0x00008000, 0x00000000, 0x00000000, 
0x00000000, 0x00303000, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000040, 0x00000004, 0x02080000, 0x00080000, 0x000A0808, 0x000C000C, 0x00000000, 0x00000000, 
0x00000000, 0x04040000, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 
0x00000600, 0xB0602064, 0x000040C0, 0x00000000, 0x00000000, 0x07000000, 0x0C00040C, 0x00000608, 
0x00000200, 0x00000000, 0x02020000, 0x02040000, 0x00000000, 0x00000600, 0x00000000, 0x00000000, 
0x00000000, 0x00000064, 0x86880000, 0x090C0C22, 0x00000028, 0x06030000, 0x0C0C0008, 0x00000403, 
0x08000000, 0x60100000, 0x00000000, 0x00002000, 0x00008060, 0x00000000, 0x00022A00, 0x00020000, 
0x0000C606, 0x00000066, 0x4CC40000, 0xC00CA000, 0x000040C4, 0x00066000, 0x05000000, 0x00000004, 
0x00000000, 0x00000004, 0x00000000, 0x00006060, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000440, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0x08000000, 0x0B000208, 0x02020A0C, 
0x00000602, 0x00000000, 0x02000004, 0x080A0000, 0x00002604, 0xC0200426, 0x00000000, 0x0000A000, 
0x00000000, 0x00000060, 0x20800000, 0xA0009020, 0x002020A0, 0x00008000, 0x00000000, 0x00000000, 
0x00000000, 0x00004040, 0x00000000, 0x00008060, 0x00006040, 0x00004060, 0x00000000, 0x00000000, 
0x00000080, 0x00000064, 0x02080000, 0x00080000, 0x00000808, 0x500C000A, 0x0000A030, 0x00303000, 
0x00000000, 0x02010000, 0x00000000, 0x10300000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000500, 0x00000062, 0x00200000, 0x00000000, 0x00000020, 0x40000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00202000, 0x0020C040, 0x00000000, 0x000C0000, 0x00040000, 
0x0000C000, 0x00000048, 0x90840000, 0x00000060, 0x00101065, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x0000080A, 0x00006000, 0x00000700, 0x00000000, 0x00000000, 
0x00000000, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x0B000000, 0x0C00040C, 0x0400060C, 
0x00000702, 0x00000000, 0x02020002, 0x02060000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000024, 0x02000800, 0x00000000, 0x00000000, 0x23000000, 0x40000008, 0x0010A0C0, 
0x00001000, 0x00000000, 0x00000000, 0x00000000, 0x00000200, 0x00000002, 0x00000400, 0x00000200, 
0x00000202, 0x00000086, 0x20800000, 0x0540A0B0, 0xC0CC6480, 0x00800CC0, 0x00000000, 0x00000000, 
0x00000000, 0xC0C00204, 0x00000000, 0x0000A080, 0x00408080, 0x00000200, 0x00000000, 0x00000000, 
0x00008000, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000040C0, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000006, 0x02080000, 0x06000000, 0x00040408, 0x0A020008, 0x00000000, 0x00000600, 
0x04000000, 0x06000000, 0x02000000, 0x06080802, 0x0008080A, 0x00000000, 0x00000000, 0x00000000, 
0x00000400, 0x00000066, 0x00000000, 0x0A000A00, 0x00000008, 0x30000200, 0x8050C0C0, 0x00202000, 
0x00000000, 0x00000000, 0x00000000, 0x00300200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0xC1400000, 0x5000C000, 0x00000040, 0x00000000, 0x00000B0A, 0x00000000, 
0x00000000, 0x40400000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000040, 0x00000026, 0x20020000, 0x00000020, 0x00000002, 0x00000000, 0x00002040, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00020200, 0x02000000, 0x0000040C, 0x0080C000, 0x00200000, 
0x0000404C, 0x00000024, 0x00080000, 0x020C0000, 0x00000008, 0xC0090000, 0xAC401060, 0x2080C4C9, 
0xB0208020, 0x00000000, 0x20004040, 0x90900000, 0x00000020, 0x00002000, 0x00000000, 0x00000000, 
0x00000006, 0x00000060, 0x00000000, 0x20000000, 0x50C04000, 0x0000C040, 0x00000000, 0x00000000, 
0x00000000, 0x00003000, 0x00000000, 0x00000000, 0x00080C03, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x20900000, 0xC000A020, 0x00202090, 0x07008000, 0x02000004, 0x0C0A040A, 
0x00000C08, 0x00404040, 0x0C0A0000, 0x080A8060, 0x0000684A, 0x00004060, 0x00000000, 0x00000000, 
0x000000A0, 0x00000060, 0xC0C00000, 0x9000C020, 0x002020B0, 0x00005000, 0x00000000, 0x00000000, 
0x00000000, 0x00004080, 0x00000000, 0x00008060, 0x00006040, 0x00004060, 0x00000000, 0x00000000, 
0x000000A0, 0x00000066, 0x00000000, 0x00000000, 0x00000000, 0x02000000, 0x05000040, 0x8C6A464C, 
0x00202CC8, 0x00000000, 0x2C0A0000, 0xC88A0000, 0x0000088A, 0x00000000, 0x00000000, 0x00004000, 
0x00000000, 0x0C0A0746, 0x6080030B, 0x60C0C010, 0x00000080, 0x60900000, 0xC0C00080, 0x00003060, 
0x20000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000A000, 0x00000000, 
0x00006060, 0x00000042, 0x00000000, 0x00C00000, 0x00000000, 0x06800010, 0x92000002, 0x00020460, 
0x00000200, 0x00000000, 0x0C000000, 0x00000000, 0x00000608, 0x00000000, 0x0000A000, 0x00000000, 
0x00006060, 0x00000020, 0x00000000, 0x00B00000, 0x00000040, 0x00A00000, 0xC0000000, 0x000020A0, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x000C0000, 0x0C000400, 0x0000000C, 0xB0000200, 0x40C06090, 0x0050B0C0, 
0xC0202010, 0x00000000, 0x30000000, 0x70700200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000004, 0xB0300066, 0x000040C0, 0x00000000, 0x00000000, 0x0A000000, 0x0C000C0C, 0x0002060A, 
0x00000000, 0x00000000, 0x00000200, 0x00020000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00008000, 0x00000066, 0x0C0A0000, 0x0A000C0A, 0x00000109, 0xC0000100, 0xA0A050A0, 0x2030C080, 
0xA0200050, 0x0A0A0000, 0x70606060, 0xA0A20604, 0x00006045, 0x00004062, 0x00000000, 0x00000000, 
0x0000000A, 0x00000063, 0xA0C00000, 0xA0A0A020, 0x202020C0, 0x02806000, 0x00000004, 0x00000000, 
0x00000000, 0x60606080, 0x00000000, 0x0000A0A0, 0x00006040, 0x000A4042, 0x00000000, 0x00000900, 
0x00008080, 0x00000024, 0x00000000, 0x80007000, 0x00000000, 0x88001000, 0x00CC0048, 0x0080A200, 
0xCC820000, 0x00000000, 0x22000000, 0x40400000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0x20C00000, 0xC000A020, 0x002020C0, 0x06008000, 0x04000100, 0x040C0A08, 
0x00000409, 0x00000040, 0x02000004, 0x09088060, 0x00006032, 0x00004260, 0x00000000, 0x00000000, 
0x000000A0, 0x00000040, 0x00000000, 0x00C00020, 0x00000080, 0x00C00010, 0xA0000000, 0x000040A0, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000060, 0xA0800000, 0x00400040, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000080, 0x00000084, 0x6A880000, 0x96AC0C41, 0xC0C06098, 0x0688C000, 0x0C0C000A, 0x00000406, 
0x06000000, 0x0000C0C0, 0x00010000, 0x0020A080, 0x40006000, 0x30008080, 0x00020A00, 0x00027000, 
0x00000686, 0x00000086, 0x70900000, 0x0040A040, 0xC0C06090, 0x009000C0, 0x00000000, 0x00000000, 
0x00000000, 0xC0C00000, 0x00000000, 0x0000A0A0, 0x00488980, 0x03000006, 0x00000000, 0x00000000, 
0x00008006, 0x00000040, 0x60800000, 0x60C0C000, 0x00000080, 0x60802000, 0xC0C00080, 0x00004060, 
0x60000000, 0x00000000, 0x00000000, 0x00000000, 0x00004000, 0x00000000, 0x0020A000, 0x00200000, 
0x00000000, 0x00000046, 0xCACC0000, 0xC60ACA42, 0x452424CC, 0x00088200, 0x00000000, 0x00200000, 
0x00000000, 0x06695848, 0x00000000, 0x0000AA6A, 0x00002624, 0x00002424, 0x00000000, 0x00000000, 
0x00000888, 0x00000060, 0x20800000, 0x00000000, 0x00404080, 0xA0200080, 0x00000000, 0x00106000, 
0x00000000, 0x60200000, 0x20000000, 0x60808020, 0x0080C090, 0x10100000, 0x00000000, 0x00000000, 
0x0000C000, 0x00000003, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000106, 0x00000000, 0x00000000, 
0x00000007, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0600000, 
0xA0C00030, 0x00000000, 0x00002020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000040, 0x00200000, 0x00800000, 0x00002020, 0x00C00040, 0x80000000, 0x00000020, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x60000000, 0x00804080, 0x00004000, 
0x80000000, 0x00000000, 0x20000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x60800000, 0x80C0C020, 0x00000080, 0x62800000, 0xC2C000A0, 0x0C0A426B, 
0xA0000C08, 0x00000000, 0x0A0A0000, 0x07080000, 0x00000808, 0x00000000, 0x0080A000, 0x00200000, 
0x00006060, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x05000000, 0x0000000C, 
0x00000900, 0x00000000, 0x01000101, 0x02020000, 0x00000002, 0x00000100, 0x00000000, 0x00000000, 
0x00000000, 0x00000042, 0x00000000, 0x00600000, 0x00000060, 0x00600020, 0x60000000, 0x00004080, 
0x00000000, 0x00000000, 0x00000000, 0x00200000, 0x00000000, 0x00000000, 0x000C6006, 0x000C0000, 
0x00000000, 0x00000066, 0x00000000, 0x00000000, 0xC0B04000, 0x05001010, 0x000A0B09, 0x00000000, 
0x05000000, 0x00000000, 0x000C0000, 0x00000010, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60C0C046, 0x2000B020, 0x00000000, 0x00000000, 0x02000000, 0x09000A66, 0x00000009, 
0x00000000, 0x00000000, 0x00000C00, 0x00000000, 0x00001000, 0x00000020, 0x00004000, 0x00000000, 
0x00000000, 0x00000026, 0x090C0000, 0x0D000900, 0x0003060C, 0x80040600, 0x90000060, 0x005080C0, 
0x00006000, 0x01000003, 0x00000000, 0x00400808, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000064, 0xC0800000, 0x4006C080, 0x00000041, 0x00080004, 0x00000000, 0x00000000, 
0x00000000, 0x40400000, 0x00000000, 0x00206040, 0x00000050, 0x00000000, 0x00000000, 0x00000000, 
0x00000040, 0x00000040, 0x60800000, 0x00C00020, 0x00000080, 0x60A00000, 0xC0000080, 0x00004090, 
0x40000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00209000, 0x00200000, 
0x00006060, 0x00000064, 0xCCA80000, 0x660CCC68, 0x00000048, 0x06081000, 0x0C0C0008, 0x00000406, 
0x06000000, 0x40400000, 0x00000000, 0x00000000, 0x00000030, 0x00000000, 0x00020A00, 0x00027000, 
0x00000746, 0x00000006, 0x0C040000, 0x04000C08, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x04040000, 0x00000000, 0x00000504, 0x00306000, 0x00000000, 0x00000000, 0x00000000, 
0x00200004, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000C0008, 0x07090000, 
0x00000000, 0x00000086, 0x22880000, 0x40002000, 0x50040488, 0x0A020008, 0x00000000, 0x02020600, 
0x00000002, 0x46405050, 0x0C000000, 0x0608B8D2, 0x00090A2A, 0x0000A000, 0x00000000, 0x00000800, 
0x00002420, 0x00000064, 0x26C00000, 0x700C6000, 0x606030C0, 0x00080000, 0x0C000008, 0x0000000C, 
0x00000000, 0x80A08080, 0x00000000, 0x0000C0B0, 0x00000080, 0x00000000, 0x00020A00, 0x00020000, 
0x00002626, 0x00000086, 0x258C0000, 0x40042700, 0xC000008C, 0x00020000, 0x00000000, 0x00000000, 
0x00000000, 0x40404043, 0x00000000, 0x0000A7C5, 0x00000023, 0x0000A103, 0x00000000, 0x00000300, 
0x00002224, 0x00000060, 0x20C00000, 0xC000A020, 0x002020C0, 0x00008000, 0x00000000, 0x00000000, 
0x00000000, 0x00804040, 0x00000000, 0x00008060, 0x00006040, 0x00004060, 0x00000000, 0x00000000, 
0x000000A0, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0C000000, 
0x020C000C, 0x00000000, 0x00000000, 0x08838000, 0x00000080, 0x00008000, 0x000000C0, 0x00600000, 
0x00000000, 0x00000022, 0x00000000, 0x00000000, 0x00000000, 0xA9000000, 0x009C0404, 0x1479BB00, 
0xCC680014, 0x00000000, 0x64000000, 0x67760000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x79AC0000, 0x00800086, 0x0270828A, 0x00700090, 0x00000000, 0x00000000, 
0x00000000, 0x66000006, 0x00000000, 0x0000A8A8, 0x000000A4, 0x00000401, 0x00000000, 0x00000000, 
0x00006001, 0x00000065, 0xCA8B0000, 0x0C000B80, 0x0000002A, 0x00000800, 0x00000000, 0x00000000, 
0x00000000, 0x01000002, 0x00000000, 0x00000301, 0x00000000, 0x000000A2, 0x00000000, 0x00000000, 
0x000000A4, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x08000000, 0x0000030C, 0x00000000, 0x00000000, 
0x00000000, 0x00000024, 0x02060000, 0x00072000, 0x00000606, 0x00090008, 0x00200000, 0x00000000, 
0x00000000, 0x04040000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00C00000, 0x00C00000, 
0x00000500, 0x00000066, 0x03050000, 0xAA000200, 0x36AC9A45, 0x0000CC00, 0x00000000, 0x00000000, 
0x00000000, 0x0000189C, 0x00000000, 0x00002614, 0x00000020, 0x00002800, 0x00000000, 0x00000000, 
0x00000000, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 0x40000000, 0x8C9A42C0, 
0x0A0CC006, 0x00000000, 0x00000A0A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000068, 0x20A00000, 0x00006020, 0x000000A0, 0x00000000, 0x00000000, 0x02000002, 
0x00000C04, 0x80808080, 0x040C0000, 0x0002C000, 0x00000284, 0x06002000, 0x00000000, 0x00000000, 
0x00002020, 0x00000066, 0x00070000, 0x00000000, 0x04050207, 0x40000000, 0x4040C0C0, 0x80A0A000, 
0x00000080, 0x00000405, 0x00000005, 0x02280703, 0x0A000000, 0x00000A0C, 0x00000000, 0x00000000, 
0x00000004, 0x00000028, 0x81070000, 0x00A00A21, 0x04020608, 0x0005000A, 0xA00020A0, 0x00000000, 
0x00000000, 0x1C0A0000, 0x02000000, 0x00000805, 0x00000919, 0x00000000, 0x0080C000, 0x00202000, 
0x00004640, 0x00000046, 0x888C0000, 0x0CC00C00, 0x0000208C, 0x54C00A60, 0xC00C0008, 0x004254B0, 
0x0A0A6000, 0x00000000, 0x04000040, 0x00000000, 0x00000008, 0x00008000, 0x00000200, 0x00060000, 
0x00006000, 0x00000066, 0x00000000, 0x00000000, 0x00000000, 0xAA000000, 0x00008486, 0x0B28BC88, 
0x000066CB, 0x00000000, 0xCA888888, 0xABCC0000, 0x000087BA, 0x00006666, 0x00000000, 0x00000000, 
0x00000000, 0x00000084, 0x02020000, 0x000C0C01, 0x00000002, 0x00020000, 0x0C0C0002, 0x00000000, 
0x00004000, 0x00000000, 0xC0400000, 0x00500000, 0x00002060, 0x00000000, 0x00000400, 0x00000000, 
0x00000000, 0x10100084, 0x00000010, 0x20000000, 0x00000000, 0x60000000, 0x00200010, 0x00606000, 
0x3000A000, 0x00000000, 0xC0A00000, 0x40842000, 0x000C8CAA, 0x00060000, 0x00000000, 0x00000900, 
0x00000000, 0x00000080, 0x00200000, 0x00000000, 0xC000C0C0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x0000A0C0, 0x00000000, 0x00004000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x00000000, 0x84000200, 0x00C09000, 0x0000C000, 0x00000000, 0x00080000, 
0x080A0000, 0x00002070, 0x00000008, 0x00565000, 0x00000030, 0x00009800, 0x00000000, 0x00000000, 
0x00000000, 0x00000010, 0x00000000, 0x00000000, 0x00000000, 0xB0000000, 0x00000030, 0x0000C000, 
0x00000000, 0x00000000, 0x40000000, 0x00000000, 0x0040C000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000064, 0x08040000, 0x0A0C0C00, 0x60C0A004, 0x04A200C0, 0x0C0C0008, 0x00020400, 
0x0A020000, 0xA0A00000, 0x04000000, 0x00000000, 0x00000008, 0x00000000, 0x00000400, 0x00060000, 
0x00000000, 0x00000060, 0xC0100000, 0x00C00060, 0x00000000, 0x00300000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00001000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00001000, 0x00000066, 0x00040000, 0x02000000, 0x00000004, 0x40000000, 0x00000000, 0x00004020, 
0x00000000, 0x02020202, 0x20202020, 0x40C00C04, 0x00000042, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000068, 0xC0A20000, 0x00000080, 0x0C000042, 0x00000700, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000A0C, 0x0000000A, 0x004004C0, 0x00000000, 0x00008000, 
0x000000A0, 0x00000020, 0x00000000, 0x0A000800, 0x00000004, 0x00000800, 0x00000000, 0x00000000, 
0x00000000, 0x02000000, 0x00000000, 0x00000404, 0x70000004, 0x000030C0, 0x00000000, 0x00000000, 
0x00000080, 0x00000063, 0x80610000, 0x00030050, 0x0A070442, 0x000A000A, 0x00000000, 0x20000000, 
0x00003000, 0x810B0000, 0x50000000, 0x7080C080, 0x0000A0C0, 0x00000000, 0x00000000, 0x00000000, 
0x00006000, 0x00000006, 0x0C0A0000, 0x000C0206, 0x0000000A, 0x700A0004, 0x0A086078, 0x70707008, 
0x07000060, 0x00000A0A, 0x00000000, 0x40500000, 0x00000230, 0x00003000, 0x00000002, 0x00000000, 
0x00000A02, 0x00000066, 0x02080000, 0x00000000, 0x00040408, 0x8A020008, 0x00000044, 0x8263C840, 
0x002020C8, 0x06000000, 0x2C000000, 0xC6880802, 0x00090A2A, 0x00000000, 0x00000000, 0x00000800, 
0x00000400, 0x00000062, 0x08470000, 0x00000002, 0x00000040, 0x06000000, 0x00606247, 0x00000000, 
0x00000000, 0x00000080, 0x00000080, 0x00B03020, 0x00000000, 0x0000C0A0, 0x00000B00, 0x00000300, 
0x00000440, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xB0808040, 
0x000090B0, 0x00000000, 0xC0400000, 0xC0900000, 0x00002040, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000004, 0x0C0A0000, 0x000C0006, 0x0005020A, 0x000C000B, 0x00000000, 0x00000000, 
0x00000000, 0x0A0A0000, 0x00000000, 0x00000A09, 0x00040A0A, 0x00000000, 0x00000000, 0x00000000, 
0x00000600, 0x00000048, 0xC0060000, 0x00000046, 0x04060606, 0x0004000A, 0x000040C0, 0x00000000, 
0x00000000, 0x0C0A0000, 0x06000000, 0x00000808, 0x00000C0A, 0x00000000, 0x0020A000, 0x00200000, 
0x00006860, 0x00000000, 0x00000000, 0x00000000, 0x40B08040, 0x066000C0, 0x000A0104, 0x04060600, 
0x0C0A0001, 0xA0000000, 0x07000007, 0x070A6040, 0x000000C4, 0x00000400, 0x00000000, 0x00000000, 
0x00000000, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 0x00003000, 0xA0C0A000, 
0x80A0A000, 0x00000000, 0x60606060, 0x40500000, 0x00006040, 0x00004060, 0x00000000, 0x00000000, 
0x00000000, 0x00000008, 0x82680000, 0x04800200, 0x0A060108, 0xA0A00008, 0xC000B0C0, 0x000000A0, 
0x00000000, 0x08040400, 0x00000000, 0x00000A0C, 0x0000000A, 0x00000200, 0x00008000, 0x00000000, 
0x00000202, 0x00000052, 0x60900000, 0x70004020, 0x200010B0, 0x08002000, 0x06000208, 0x02070A06, 
0x00000202, 0x10101040, 0x02000004, 0x0C0BB0C0, 0x00000046, 0x00004600, 0x00000000, 0x00000000, 
0x00000010, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000047, 0x70800000, 0x00C00010, 0x00000000, 0x7A800000, 0xC0000386, 0x08071A80, 
0x00000007, 0x00000000, 0x0A030000, 0x080B0100, 0x0000070A, 0x00000100, 0x00009000, 0x00000000, 
0x00006060, 0x00000044, 0x06080000, 0x000C0C02, 0x00000008, 0xC6080000, 0x8C407098, 0x2080B4B9, 
0x00008040, 0x00000000, 0x40303050, 0xB0A00000, 0x00000010, 0x00001000, 0x00020A00, 0x00020000, 
0x00000606, 0x00000006, 0x02000000, 0x08000702, 0x00020200, 0x00000600, 0x00000000, 0x00000000, 
0x00000000, 0x00000404, 0x00000000, 0x00000606, 0x00000604, 0x00000406, 0x00000000, 0x00000000, 
0x00000000, 0x00000060, 0xC0A00000, 0x00C00070, 0x00000030, 0x50B00000, 0x90001060, 0x00000080, 
0x00003000, 0x00008000, 0x00300000, 0x00000000, 0x00000000, 0x00000000, 0x00001000, 0x00000000, 
0x00003030, 0x00000060, 0x80800000, 0x00000020, 0x00000020, 0x00000000, 0x00600000, 0x00000000, 
0xA0400000, 0x60000000, 0x00000000, 0x00002000, 0x00008060, 0x00000000, 0x00002000, 0x00000000, 
0x0000C000, 0x00000020, 0xB0000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x70000000, 0x00000000, 0x00000000, 0x00009000, 
0x00000000, 0x00000066, 0xCCA80000, 0x00C408AC, 0x000000A6, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x08000000, 0x00000000, 0x00000506, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000202, 0x00000060, 0xC0800000, 0x00C00000, 0x00000040, 0x00400000, 0x00000000, 0x00000000, 
0x00000000, 0x00000040, 0x00000000, 0x00003020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00004000, 0x00000026, 0x0C0A0000, 0x000C0006, 0x0000000A, 0xA00A0000, 0xA08010A0, 0x2080A0C0, 
0xC0608020, 0x0000000A, 0x20004040, 0x20200302, 0x00000220, 0x00002000, 0x00000000, 0x00000000, 
0x00000A02, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 0x00C00080, 0x0080A000, 
0xC08000A0, 0x00000000, 0x40000000, 0xA0A00000, 0x00000070, 0x00004000, 0x00000000, 0x00000000, 
0x00000000, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00A04060, 0x0020A080, 
0xC0A06060, 0x00000000, 0x90808080, 0xA0C00000, 0x000060A0, 0x00006060, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0xC2A20000, 0x00A0A090, 0x00020250, 0x0B020000, 0x00000000, 0x00000A00, 
0x00000000, 0x06000000, 0x0A000000, 0x06080402, 0x000C0C0A, 0x03030000, 0x00000000, 0x00000500, 
0x00000400, 0x00000068, 0xC0C20000, 0x00A3A280, 0x0C0C00C2, 0x0005000C, 0x00000000, 0x00000000, 
0x00000000, 0x0C0C0060, 0x00000000, 0x00008472, 0x00000202, 0x00000030, 0x00000000, 0x00004000, 
0x0000A2A0, 0x00000086, 0x00000000, 0x00000000, 0x0C0C0300, 0x60000103, 0xC000B0A0, 0x00606070, 
0x00500000, 0x00000000, 0x0000C0A0, 0x40800608, 0x00000007, 0x00006060, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000050, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00000000, 0x20C09000, 
0x40202000, 0x00000000, 0x00000000, 0x50A00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000008, 0x02060000, 0x00080000, 0x0C0A0706, 0x000B000C, 0x00000000, 0x00000000, 
0x00000000, 0x040C0000, 0x00000000, 0x00000808, 0x00000808, 0x00000000, 0x00000000, 0x00000000, 
0x00000600, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000026, 0x80700000, 0x00000020, 0x0C0C0000, 0x60000000, 0x000060A0, 0x00000000, 
0x00000000, 0x000B0000, 0x00000000, 0x00000007, 0x00000000, 0x00000040, 0x0000C000, 0x00003000, 
0x00004040, 0x00000082, 0x00200000, 0x20400000, 0x90C00050, 0x0620C000, 0x08000000, 0x0806060C, 
0x00000C0A, 0x0000C0C0, 0x090C0004, 0x07044080, 0x0000000A, 0x00002220, 0x00000000, 0x00000000, 
0x00000020, 0x00000048, 0xC0A00000, 0x00C00040, 0x00000080, 0x00800000, 0x800040C0, 0x0C0C2284, 
0x00000C00, 0x00000000, 0x02000000, 0x09090000, 0x00000000, 0x00000000, 0x0020A000, 0x00200000, 
0x00000090, 0x00000004, 0x06080000, 0x000C0002, 0x00000008, 0x06080000, 0x0C000008, 0x0206080C, 
0x06000602, 0x00000000, 0x02000004, 0x02020000, 0x00000002, 0x00000200, 0x00020A00, 0x00020000, 
0x00000000, 0x00000028, 0x00060000, 0x080A0000, 0x00000606, 0xB0000C00, 0x40C01030, 0x1090C0B0, 
0xC0802030, 0x00000A0C, 0x20000000, 0x70700805, 0x00000000, 0x00000808, 0x00000000, 0x00000000, 
0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000086, 0xA8A30400, 0x5000C0C1, 0x00006080, 0x09000000, 0x0000080B, 0x00000400, 
0x00000000, 0x20C00000, 0x00000000, 0x0000A080, 0x00006000, 0x00006060, 0x00000000, 0x00000000, 
0x00000040, 0x00000008, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000100, 
0x00000000, 0x00000000, 0x03000000, 0x0C080000, 0x00000203, 0x00000400, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000006, 0x00020000, 0x08000400, 0x020C0804, 0x00000C00, 0x00000000, 0x00000000, 
0x00000000, 0x00000208, 0x00000000, 0x00000608, 0x00000006, 0x00000404, 0x00000000, 0x00000000, 
0x00000000, 0x00000086, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 0x00000000, 0x0C0C9A60, 
0x000A0A08, 0x00000000, 0x40404040, 0xC0A00000, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000006, 0x0C0A0000, 0x000C0000, 0x00000004, 0x00040006, 0x00000000, 0x00000000, 
0x00000000, 0x00000004, 0x00000000, 0x00000201, 0x00000400, 0x00000000, 0x00000000, 0x00000000, 
0x00000800, 0x00000066, 0x00000000, 0x00000000, 0x0000B0B0, 0x00000000, 0x00000000, 0x0580B000, 
0x00000080, 0x00000000, 0xC0A00000, 0xA0A0A0A0, 0x00B0C8C0, 0x00090002, 0x00000000, 0x0000C000, 
0x00000000, 0x00000026, 0x0C0A0000, 0x0B000C06, 0x0000000A, 0x80000300, 0x000000B0, 0x00000000, 
0x00000000, 0x0A0A0000, 0x00000000, 0x00000000, 0x7070A000, 0x00000000, 0x00000000, 0x00009000, 
0x00000000, 0x00000066, 0x9B2A0000, 0x000020C0, 0x0000000B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000008, 0x00000000, 0x05050707, 0x0A0A0000, 0x00000C0B, 0x00000000, 0x00000C00, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000006, 0x060A0000, 0x08000600, 0x0000000A, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x08080808, 0x00000000, 0x00000C0C, 0x00000008, 0x00000000, 0x00000000, 0x00000000, 
0x00000202, 0x00000046, 0x22CC0000, 0x02200000, 0x000020CC, 0x00C00080, 0x00000000, 0x00000000, 
0x00000000, 0x08080808, 0x00000000, 0x00000C0A, 0x00004408, 0x00000000, 0x00000000, 0x00000000, 
0x00006600, 0x00000066, 0x2CAA0000, 0x8A006C0C, 0x100000A4, 0x00000200, 0x00000000, 0x00000000, 
0x00000000, 0x86808080, 0x00000000, 0x0000C5A0, 0x00000075, 0x00004000, 0x00000000, 0x00000000, 
0x0000101A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0xC0800000, 0x0B000720, 0x00000081, 0x00000700, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000100, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00004040, 0x00000064, 0x00000000, 0x00000000, 0x00004040, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000040, 0x00000000, 0x20404020, 0x8C000000, 0x0000A085, 0x00000000, 0x00000100, 
0x00000000, 0x00000076, 0x2AC80000, 0xC0006012, 0x000000C2, 0x00007000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x0000C0C0, 0x00000010, 0x00000000, 0x00000000, 0x00000000, 
0x00000600, 0x00000066, 0xA0A00000, 0x00000080, 0x00002040, 0x00000000, 0x00000040, 0x0A040100, 
0x0000010C, 0x40000000, 0x05000000, 0x4A484000, 0x00003078, 0x00000000, 0x00004000, 0x00000000, 
0x0000A000, 0x00000040, 0x20800000, 0x00900000, 0x00008080, 0x00C00090, 0x80000000, 0x00000000, 
0x00000000, 0x40400000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00006000, 0x00000060, 0x00000000, 0xC0000000, 0x000000C0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000024, 0x0C000000, 0x00000C00, 0x00200000, 0x60000000, 0x00C08060, 0x00606000, 
0xC0A00000, 0x00000000, 0x40400000, 0x40400000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000026, 0x0C036000, 0x00000C0C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00007000, 0x00005000, 
0x00000001, 0x00000003, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000C0300, 0x00000000, 0x00000000, 0x00000900, 
0x00000000, 0x00000040, 0x00000000, 0x00100000, 0x00000000, 0xC0100000, 0xC00000C0, 0x000000C0, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x0C006060, 0x0080A08C, 
0x00006060, 0x00000000, 0x80808082, 0xA0C00000, 0x000061A0, 0x00008160, 0x00000000, 0x00000000, 
0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000086, 0x60A00000, 0x40002000, 0x40000080, 0x0C000000, 0x07010706, 0x05070C07, 
0x06010507, 0x40404040, 0x07060306, 0x0B0AA0C0, 0x00000023, 0x0000A300, 0x00000000, 0x00000000, 
0x00002020, 0x00000086, 0x01000000, 0x00000000, 0x00000000, 0x20000000, 0x00000000, 0x00A06040, 
0x00000090, 0x00000000, 0x00000004, 0xC0400000, 0x07000000, 0x00000A0B, 0x00000000, 0x00000000, 
0x00000000, 0x00000036, 0x01080000, 0x00000000, 0x00000008, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000004, 0x00000004, 0x02080802, 0x08A09000, 0x00000A0C, 0x00000000, 0x00000000, 
0x00000004, 0x00000086, 0x00000000, 0x00000000, 0x00000000, 0x66000000, 0x00000C2C, 0xC0A06080, 
0x0000C0A0, 0x00000000, 0xC0C00000, 0xA0806000, 0x000080A0, 0x00000000, 0x00000000, 0x00000900, 
0x00000000, 0x00000060, 0x20200000, 0x00000020, 0x00000020, 0x00000000, 0x00000000, 0x22000000, 
0x00004202, 0x60000000, 0x60080000, 0x60608060, 0x00008080, 0x00000000, 0x00000000, 0x00000000, 
0x00002000, 0x00000006, 0x00020000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000002, 0x60000002, 0x00200000, 0x08001040, 0x00000000, 0x00000000, 0x00000000, 
0x00000004, 0x00000030, 0x00000000, 0x00000000, 0x00000000, 0x20000000, 0xB0000090, 0x001040C0, 
0x00001000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000006, 0x080A0000, 0x00020008, 0x00000206, 0x00020002, 0x00000000, 0x00000000, 
0x00000000, 0x08000000, 0x00000000, 0x00000400, 0x00000A06, 0x00000000, 0x00000000, 0x00000000, 
0x00000A00, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0xA0003020, 0x25A1C0C0, 
0x0000802B, 0x00000000, 0x22004040, 0x7B830000, 0x00000022, 0x00002000, 0x00000000, 0x00000000, 
0x00000000, 0x00000060, 0xC0C00000, 0x00404020, 0x200020C0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60606060, 0x00000000, 0x0000A0A0, 0x00006040, 0x00004040, 0x00000000, 0x00000000, 
0x00006060, 0x00000006, 0x01000000, 0x0C000300, 0x00000000, 0x00000100, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00A00080, 0x00000000, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x0A000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000004, 0x06080000, 0x060C0C02, 0x00000008, 0x06080000, 0x0C0C0008, 0x00000406, 
0x06000000, 0x00000000, 0x00000000, 0x00000000, 0x00000C00, 0x00000000, 0x00020A00, 0x00020000, 
0x00000606, 0x00000063, 0x00000000, 0x00000000, 0x08000000, 0x80000000, 0xB040A0C0, 0x000000A0, 
0x00002000, 0x00040000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0xA0800000, 0x4000A020, 0x090C0A21, 0x00000C08, 0x00000000, 0x00000000, 
0x00000000, 0x00006060, 0x00000000, 0x00002000, 0x00000000, 0x00006080, 0x00002000, 0x00004000, 
0x000000C0, 0x00000066, 0x0B4C0000, 0x060A0A0A, 0x0202024C, 0x00080200, 0x00000000, 0x30100000, 
0x00003020, 0x86060608, 0x80000000, 0x9080BA7A, 0x0000A6C8, 0x00000404, 0x00000000, 0x00000000, 
0x00005808, 0x00000066, 0x0C0A0000, 0x00090A08, 0x00000005, 0x00000000, 0x00000000, 0x00002000, 
0x00000000, 0x00000000, 0x20000000, 0x00000000, 0x00805000, 0x20000000, 0x00000000, 0x00000000, 
0x00004A0A, 0x00000060, 0x00000000, 0x00000000, 0x00000000, 0x70000000, 0x00001080, 0x20206000, 
0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00004000, 
0x00000000, 0x00000046, 0xAA0C0000, 0x06A00822, 0x0202020C, 0x60A00200, 0xA00000A0, 0x00000060, 
0x00000000, 0x06060608, 0x00000000, 0x00000C0A, 0x00000006, 0x00000606, 0x00004000, 0x00000000, 
0x00006028, 0x00000006, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0C0C0A00, 
0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000006, 0x00050000, 0x0C000500, 0x00000007, 0x00000700, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000605, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0x04000000, 0x04C70C8C, 0x00020200, 
0xC0800000, 0x00000000, 0x00000000, 0x20420000, 0x00000000, 0x00040000, 0x00000000, 0x00000400, 
0x00000000, 0x00000003, 0x09000000, 0x00000001, 0x00000000, 0x00000000, 0x0000010A, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000C00, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 0x00A01060, 0x0020B000, 
0xC0500000, 0x00000000, 0x20000000, 0x80800000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0xC0A00000, 0xA000C080, 0x000000A0, 0x00000000, 0x000A0000, 0x00000000, 
0x0C0A0000, 0xA0A00090, 0x00000000, 0x00246040, 0x00000020, 0x00000020, 0x00000000, 0x00000000, 
0x000000A0, 0x00000086, 0x8CC80000, 0xC600AC0C, 0x104040C0, 0x00007020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x0000C4C0, 0x00000404, 0x00000020, 0x00000000, 0x00000000, 
0x00000042, 0x03010086, 0x00000103, 0x00000000, 0x00000000, 0x69000000, 0x0A40082B, 0xB0606481, 
0x4000C0A0, 0x00000000, 0xA0C00000, 0x40A06000, 0x000080A0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x0C000000, 0x0A080000, 0x02080C0C, 
0x0B000802, 0x00000000, 0x06000404, 0x0A0A0000, 0x00000002, 0x00000200, 0x00000000, 0x00000000, 
0x00000000, 0x00000007, 0x03060000, 0x08000000, 0x070B0808, 0x00000C00, 0x00000000, 0x00000000, 
0x00000000, 0x00000306, 0x00000000, 0x00000A0C, 0x00000000, 0x00000600, 0x00000000, 0x00000000, 
0x00000000, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00400000, 0x70700030, 0x00000000, 0x00008000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xB0000080, 0x00000000, 0x00000000, 
0x00000090, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0C00000C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00004020, 0x0C24A080, 
0x040C6060, 0x00000000, 0x80808484, 0xA0C00000, 0x006060A0, 0x00006060, 0x00000000, 0x00006000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0C000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x000C0000, 0x00000000, 0x00000000, 0x00000000, 0x00060000, 0x00000000, 0x00000000, 
0x00000000, 0x00000026, 0x0C030000, 0x0004080C, 0x00000000, 0x60000000, 0x60000000, 0x2080A0C0, 
0x0000A020, 0x02000000, 0x20000000, 0x20200000, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000202, 0x00000026, 0x200C0000, 0x0C000420, 0x0400000C, 0x00000200, 0x00002020, 0x00000000, 
0x00000000, 0x00000600, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x0000C000, 0x00000000, 
0x00004044, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000044, 0x66A40000, 0x008C0082, 0x00608084, 0x06680080, 0x0C000009, 0x0000040A, 
0x00000000, 0x60000000, 0x00000000, 0x00008000, 0x00000090, 0x00000000, 0x00000A00, 0x00000000, 
0x00006616, 0x00000006, 0x00000000, 0x00000000, 0x00000000, 0x04000000, 0x0404020C, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000600, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000042, 0xA0800000, 0x00C00020, 0x00000080, 0x6A800000, 0xC40000B0, 0x00064B6C, 
0x00000200, 0x00000000, 0x00000000, 0x05000000, 0x00000000, 0x00000000, 0x00007000, 0x00000000, 
0x00006060, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0xCACA0000, 0xC000C048, 0x204042C4, 0x0000B000, 0x00000002, 0x00200000, 
0x00000000, 0x04001040, 0x00000000, 0x0000A060, 0x00002320, 0x00002020, 0x00000000, 0x00000000, 
0x00000A80, 0x00000026, 0x02080000, 0x00000000, 0x00040408, 0x0A020008, 0x00000000, 0x00000600, 
0x00000006, 0x06000000, 0x02000000, 0x06080802, 0x00089C0A, 0x00000000, 0x00000000, 0x00000000, 
0x00002400, 0x00000003, 0x00000000, 0x00000000, 0xC0000000, 0x00000000, 0x000A0000, 0x00000000, 
0x0B010000, 0x00C00000, 0x01000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00008000, 
0x00000000, 0x00000001, 0x02000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000009, 0x00000000, 0x00000500, 
0x0000000B, 0xC0C0C0C0, 0xC6CCC6C0, 0xC0C0C1C3, 0xC0C0C0C0, 0x0B0B0B0B, 0x0BCB0B0B, 0x0B0B0B0B, 
0x0B0B0B0B, 0x9A9A9AAA, 0xABCCAB9A, 0x9A9A9A9A, 0x8A8A7A8A, 0x8C8C8B80, 0xA8CCAC8C, 0x80808094, 
0x80808080, 0x73737376, 0x97CC9773, 0x73737485, 0x73737373, 0xC0C0C000, 0xACCCC8C4, 0x1A2C5C9C, 
0x00000205, 0xC4C0A080, 0x9CCCCAC8, 0x798C7B8C, 0x70707074, 0x51515151, 0x86CC8651, 0x51515263, 
0x51515151, 0xCCCCBC10, 0xB7CCCCBC, 0x8795A4A4, 0x4747B0B0, 0x46464686, 0x89CC8946, 0x46465657, 
0x46464646, 0xCCBC8C7A, 0x8CCCBCBB, 0x4A4B5C6C, 0x4A4A4A4A, 0x4C0C0C00, 0xC8CCCCAC, 0x5081B2C5, 
0x01020000, 0x99793909, 0xBBCCB9B9, 0x0B1C4B8C, 0x0A090719, 0xCCCCCB90, 0xA8CCCCCC, 0x97989796, 
0x90909492, 0xC8B4B080, 0xA8CCCACB, 0x80808095, 0x80808080, 0x7C7C7B70, 0xC9CC9C7C, 0x95C5C5C7, 
0x70707170, 0x00000000, 0x0C0C0600, 0x0C0C0C0C, 0x00000000, 0x0C0C0A05, 0x080C0C0C, 0x05050506, 
0x05050505, 0x07050300, 0x8BCC8B49, 0x03050749, 0x00000000, 0x8A5A2A0A, 0xCCCCBCBB, 0x6B9CBCCC, 
0x0A190719, 0x29272380, 0x7CCC8C3B, 0x2C2C2C4C, 0x29202020, 0xB5C2C160, 0xC8CCC9C9, 0x507090B4, 
0x60505050, 0x40201000, 0xA9CCA772, 0x00224578, 0x20303020, 0xBABABABA, 0xCACABABA, 0xCACACACA, 
0xBCBCBABA, 0x60303070, 0xC0C0C0A0, 0xB0B0B0C0, 0x3C393350, 0xCCCAC600, 0x68BCBCCC, 0x00101134, 
0x70501000, 0xA6A29000, 0xABCCAC9A, 0x0054688B, 0x00000000, 0xCBCCCC83, 0x98CCCBBB, 0x63746475, 
0x64636363, 0xCB9C6B50, 0xACCCCBCB, 0x5165799B, 0x50505050, 0xC0C0C010, 0xA0C0C0C0, 0x90B0A0A0, 
0x00000010, 0xB4B1B18C, 0xCBCCCCC8, 0x31416397, 0x31313131, 0xBCCCCC30, 0x25597BAC, 0x00000111, 
0x10011010, 0xC8C8C707, 0x9ACCCCCB, 0x07174889, 0x37380707, 0xCCCCCC00, 0x79ACBCCC, 0x00100235, 
0x21413001, 0xC9B6B470, 0xCCCCCCCC, 0xC1C3B6CA, 0x80706070, 0xC8C8B901, 0x7CCCCAC9, 0x1C5C4C5C, 
0x00020001, 0xAAB9B9A0, 0xBCCCBCAA, 0xB4B9BBBC, 0x30204060, 0x0C0C0C00, 0x0C0C0C0C, 0x0A0B0B0C, 
0x0B0B0000, 0xCBCBCC00, 0x77BCBBBA, 0x22232154, 0x07074251, 0xC8C4C0C0, 0x99ACBCBC, 0x17436488, 
0x0003070B, 0xCCCCAB0C, 0xAACBCBCB, 0x033475B8, 0x05061604, 0x0303030A, 0x0C0C0804, 0x070B0C0C, 
0x03030303, 0xACACACA7, 0xC8C9CABC, 0xB7C7B7C7, 0xA7A7A7A8, 0x9C9C7805, 0xCCCCBCBC, 0x2B8BABBB, 
0x05050506, 0x0804010C, 0x0A0C0A0C, 0x01030609, 0x01010101, 0x78480708, 0xCCCCCCBA, 0x1C0C4C8C, 
0x07080608, 0xAC986509, 0xCACCCCBC, 0x0B4C7BA9, 0x04040507, 0x9A9C9C97, 0xCCCC9C9B, 0xC7C9CCCC, 
0x77070707, 0xCCCCCC00, 0xA9CCBCCC, 0x92A5A6A8, 0x82932030, 0xC8C8C808, 0x88C8C8C8, 0x483B4B5A, 
0x1C0C1909, 0xC7C3C1A0, 0xBCCCCCCB, 0xA0A3A6AB, 0xA1A0A0A0, 0xCCCCBB09, 0xB9CCCCCC, 0x497999A9, 
0x31410301, 0x05020000, 0x0C0C0C09, 0x01020508, 0x01010000, 0x0B0C0C00, 0x080C0B0C, 0x03020104, 
0x06040100, 0xC6CAB600, 0xC8CCC8C4, 0x305084B4, 0x060A1662, 0x3B3C3C76, 0x998C5B3B, 0xC8C8C8C9, 
0x45904050, 0xB8949070, 0xCBCCCBBB, 0xB9C9CBCB, 0x50706052, 0x58555390, 0xBCCC9C5A, 0xC1C5C8BA, 
0x60655570, 0xB7CBB7A3, 0xCBCCBBA9, 0xC3C7CCCB, 0xC3C3A3A3, 0x06030000, 0x6CCC6814, 0xCACC9C7C, 
0x40300002, 0x88686868, 0xBBC9B8B8, 0xCCCCAC8C, 0x68686868, 0x08080808, 0x0B0C0B09, 0x080B0C0B, 
0x08080707, 0x4080B000, 0x65471512, 0xCCCA9794, 0x00017599, 0xABCCCC09, 0x2B6C4B8B, 0x87480709, 
0x0C4C88C7, 0x370B091C, 0xB7CBB885, 0x03031374, 0x03030303, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x7C4B3800, 0xC9CCCCBC, 0x00215496, 0x00000000, 0xCBC8C400, 0x7BBCBCBC, 0x2053173A, 
0x10301000, 0x5A0C0C00, 0xC1C3C699, 0x004070C0, 0x00000000, 0x68240000, 0xCCCCCCAC, 0xAC8C5A89, 
0x00001438, 0x0C0A0908, 0x090C0C0C, 0x05090907, 0x03030303, 0xC6834030, 0xCCCCCAC8, 0xC5C9CCCC, 
0xA0504051, 0xC2C2B209, 0x9BCCC8C3, 0x7B6B6B7B, 0x12120305, 0xC8A47080, 0x9BCCBCBC, 0x8073666A, 
0x50507081, 0xBC9C7B07, 0xCACCCCCC, 0x7999A9BA, 0x75856150, 0x05030101, 0x0C0C0A09, 0x0A0C0C0C, 
0x01010407, 0x9B8A5909, 0xCACCCBBC, 0x99C9C9C9, 0x181A0837, 0x2662A000, 0x88CC885A, 0xA0602054, 
0x19152160, 0xCCCCBB00, 0xBCCCCCCC, 0x394A6B9C, 0x36570000, 0x96777876, 0xB9CCCCC9, 0x76B6B6B7, 
0x66667676, 0x00000000, 0x060A0602, 0x00000002, 0x0C080400, 0xC8C7C600, 0x96CCBBCA, 0x6B6B6763, 
0x30500010, 0xB4A8C480, 0xCCCCC8C4, 0x8CACCCCC, 0x87808080, 0x0B090500, 0x0C0C0C0C, 0x07090A0C, 
0x00000003, 0x90501000, 0xA0C0C0C0, 0x10509070, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x86595950, 0x98CCC8C4, 0x54556475, 0x50505050, 0x7591A000, 0x8ACC9CA9, 0x58241246, 
0x1034A8BC, 0x11203030, 0x273C1712, 0xB9755133, 0x1030ACCC, 0x30201040, 0xB0B08070, 0xB0C0C0C0, 
0x00000000, 0x14030300, 0xCBCC9956, 0x7BBCCCCC, 0x08080537, 0x04040300, 0x0C0A0705, 0x0C0C0C0C, 
0x00070000, 0x74616050, 0xCCCCCB99, 0x60B1C4C7, 0x60706060, 0x090C0C0A, 0x02030406, 0x03030202, 
0x03030303, 0x14000000, 0xCCCC8B48, 0xC3C7C8CA, 0xA2B06070, 0x70402000, 0xC0C0C0B0, 0xA0C0C0C0, 
0x00001030, 0x58657575, 0x8CCC8C5C, 0x5CAC9C7C, 0x55555555, 0x4242428C, 0xC6A57352, 0xBCCCCAC8, 
0x63626468, 0xC3B2A297, 0xCBCBC8C4, 0x9CACBBCC, 0x95949496, 0xB0C08000, 0x80C0B0C0, 0x00002050, 
0x80602000, 0x2C5C5B04, 0xC8CB6A1C, 0xC3C4C3C5, 0x0B28C4C4, 0x08060400, 0x0C0C0A09, 0x0A0C0C0C, 
0x04050505, 0xB9B9AA99, 0xBBCCC9C9, 0x5C6C8C9C, 0x3C3C3838, 0x998C8C55, 0xC8CCAA98, 0xB5C5C5C6, 
0x65850505, 0x090C0906, 0xB97C3B0A, 0xC6C6C6C7, 0x06064686, 0xC7BAB700, 0x386C89A6, 0x70300014, 
0xC0C00000, 0x5C3C2C70, 0xC6CBCAAB, 0x204070B3, 0x26252122, 0xC6C4C407, 0x7CBCACCA, 0x142A1C3B, 
0x34340404, 0xB9A95C06, 0xBCCCCCBA, 0xB6C6B7B9, 0x06064686, 0x675383C5, 0xC7CCCC9C, 0x3A66A4C5, 
0x23232425, 0xC0804040, 0xC0C0C0C0, 0x40507090, 0x40404040, 0x5B6C4B10, 0xCCCC9C7B, 0xC7CBCBCC, 
0x15226093, 0x0C0C0B01, 0x0C0C0B0B, 0x0B0C0C0C, 0x00000407, 0xACACAAA0, 0xA7CB8B8C, 0xBAA6A3B3, 
0xA0C00206, 0xCCCCC824, 0xBCCCCCCC, 0xC4CC9C6C, 0x74242424, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x04000000, 0x0C0C0A08, 0x0C0C0C0C, 0x080A0000, 0x80505000, 0xC0C0B0A0, 0x009090A0, 
0x00000000, 0x07090C05, 0x9CCC9C49, 0x1C5C9C7C, 0x05050505, 0x5C2C2C70, 0xCACCCC9C, 0xA0C1C2C6, 
0x20202030, 0xC7CAB690, 0xACCCC9C6, 0x9A9B9B9B, 0x00700153, 0x060A0900, 0x080C0804, 0x07090504, 
0x00000003, 0xC9C9C800, 0xBCCCAAB8, 0xACCCCCCB, 0x1002062A, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x03020500, 0x0C0C0C07, 0x0B0C0C0C, 0x00000000, 0x08090C00, 0x0A0C0A09, 0x00010507, 
0x00000000, 0x08070500, 0x0C0C0B0C, 0x0307080B, 0x00000000, 0xA0C0C000, 0x80C08060, 0x70302060, 
0x20000030, 0x4070C000, 0x80905010, 0xC0B0A090, 0x80605090, 0x10203020, 0x00000000, 0x40200000, 
0x00204060, 0x9A5612C0, 0x83C786AA, 0x10103070, 0xCC884410, 0x4060900C, 0xC0CC8A4C, 0xC0C0B0C0, 
0x00004080, 0x63A36303, 0x85C88543, 0x0A060344, 0xAC6C2303, 0xC5A8BA90, 0xBACBC8C4, 0xACBCBBCB, 
0x7C392759, 0x0000000C, 0x000C0000, 0x00000000, 0x00000000, 0x01010000, 0x06080402, 0x0C0C0A08, 
0x06010408, 0x1A1A29C0, 0xCBCC8B4A, 0xBBCBB8CA, 0x0606506B, 0x06090B03, 0x090C0908, 0x0C0A0708, 
0x08080507, 0xC2C4C950, 0x75AAC7C4, 0x59C98A57, 0x9C9CC050, 0x00001000, 0xC0B07030, 0xC0C0C0C0, 
0x00004080, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x4080C000, 0xC0B07030, 0x8070B0C0, 
0x3070B0C0, 0xB2B6BA00, 0x8ACBC7C3, 0x4C3C3C4B, 0xCCCC0408, 0x9C7C5CB0, 0xC9CCCAAC, 0x537282A5, 
0x88BBBB8A, 0x7B9BA500, 0xBBCCCCBB, 0xCB88477A, 0xC0804080, 0x05060B01, 0x080C0B09, 0x0B080405, 
0x02020204, 0xAA8A7500, 0x6BCCC8C5, 0xCAA7754B, 0xC0C00000, 0x080A0900, 0x0C0C0A09, 0x0C0C0C0C, 
0x0B08020A, 0x09090400, 0x0C0C0C0B, 0x090B0C0C, 0x0C0C0000, 0x0C0C0C05, 0x080C0C0C, 0x08070606, 
0x05050C0C, 0xCACCCCB0, 0x67ABB9BA, 0x07141033, 0x0104080B, 0x30408000, 0x50B07030, 0x40302020, 
0xC0C00000, 0x01020500, 0x08070400, 0x0C0C0B09, 0x00000C0C, 0x00000000, 0x0C0C0600, 0x000B0C0C, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x070B0700, 0x080C080A, 0x04000404, 
0x0A060804, 0x9A7A5B3A, 0xC9CCC9B9, 0x9AAABBC9, 0x03070AB8, 0xBC6C2B20, 0xBCCC9C6C, 0x253C5C9C, 
0x20202620, 0x0C0C0C00, 0x070C0C0C, 0x01000103, 0x00000107, 0x02040800, 0x0C0C0A06, 0x080C0C0C, 
0x00000004, 0x4949C905, 0xCBAC7A59, 0xC7C8CACA, 0x05740001, 0x30100000, 0xB7C78341, 0xCCCCCBB8, 
0x08074488, 0x867A6980, 0x78CC8854, 0x1A161244, 0x10101216, 0x0A080400, 0x070C0A0B, 0x04010004, 
0x01000000, 0xA8A88700, 0x9CCC9A88, 0xCBCCBCBC, 0xC5B07680, 0x38190600, 0x87CC8A69, 0xC7A97755, 
0xC4B37084, 0xB0B05000, 0xC0C0C0C0, 0x50C0C0C0, 0xA0000000, 0x895634B0, 0x8CCCBB9A, 0x3A3C3C4C, 
0x30302638, 0x09080809, 0x0B0C0B0A, 0x090A0B0B, 0x00000000, 0x377AB941, 0x89CC8846, 0xBC8A694B, 
0x22044889, 0x6B6B7B00, 0xC8CB9A79, 0xC8C6C6C5, 0x510509AC, 0x212020C0, 0x2C282425, 0x2C2C2C2C, 
0xC0804428, 0x50A07050, 0x70C08040, 0xA0A08070, 0x20202020, 0xC0C0C000, 0x80C0C0C0, 0x10000040, 
0x00108080, 0xC6B6C600, 0x96CCC6B6, 0x30224366, 0x50306080, 0xBCBBBB75, 0xCCCCBCBC, 0xB5CBAC9C, 
0xC5655C5B, 0xCBCCAC93, 0xAACCCACB, 0x9C9C9CAC, 0x0625674C, 0xC1C1C1A1, 0x698C98B3, 0x71472B39, 
0x315191B1, 0x01010101, 0x060C0601, 0x01010203, 0x0C0C0101, 0x9CACABA0, 0xABCCACAC, 0x959799AA, 
0x20212221, 0x6CAC9B00, 0xCACCAC7C, 0x80C9C7C5, 0xA0672040, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x80501000, 0xC0C0A090, 0x7090A0C0, 0x70907050, 0xAC7C3C04, 0xCCCCCCBC, 0xB4B5C6C8, 
0x846A1484, 0xB9BAAA0A, 0xC9CCC9CA, 0x9ACAC9C9, 0x00711516, 0x0B0C0B03, 0x0A0C0C0B, 0x0B0C0A09, 
0x030A0303, 0x9CBCBB00, 0x88CC8B6C, 0x90806195, 0xCB884450, 0x9B9CCC60, 0xAA8CBCAC, 0x667897C9, 
0xCAC66262, 0x02000000, 0x05030204, 0x0C0C0907, 0x00000000, 0x05090B00, 0x0C0C0804, 0x0C0C0C0C, 
0x0C0C0102, 0x80C0C0C0, 0x80C08070, 0x204080C0, 0x20202020, 0xCBCBCB00, 0x88BCC9CB, 0x9B9C8C8B, 
0x483C185C, 0x2A296700, 0x86CCAA69, 0x65946455, 0x03000030, 0x0C0A0900, 0x0C0C0C0B, 0x0B0C0C0C, 
0x09080507, 0x00001000, 0x80905020, 0xC0C0C0C0, 0x00004080, 0xA2948900, 0xB5C5B3A1, 0x9CBAA8B6, 
0x02408CCC, 0xC0C08000, 0x80C0B0C0, 0x4070A080, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCABCACC0, 0x81B4B6C8, 0x23212040, 0x30202123, 0x0C0C0B09, 0x090C0B0B, 0x09090909, 
0x00000101, 0xCACCCC00, 0xB6CCCCCB, 0x5A453173, 0x30900000, 0x7C4C2C00, 0xC4C7CBAC, 0x50A0C0C0, 
0x66850100, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x03060A00, 0x080C0805, 0x00000004, 
0x00000000, 0xCCCCCC80, 0x88CCCCAC, 0xB0744844, 0x30334574, 0xCACCBB07, 0xCBCCCCCB, 0x7C9A98B9, 
0x17286777, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xBB5B0B00, 0xCCCCCBBC, 0x2B8CACCC, 
0x05060103, 0x090C0C00, 0x070B0708, 0x00000003, 0x00000001, 0x80502000, 0xC0C0B0A0, 0xC0C0C0C0, 
0x40200000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x07080803, 0x0C0C0908, 0x0C0C0C0C, 
0x0C080508, 0x2C0C0900, 0x885C9C6C, 0xC08266AA, 0x65214080, 0x90A0A000, 0xC0C0A070, 0xC0C08080, 
0x00004080, 0x00000000, 0x0B0A0602, 0x0C0C0C0C, 0x00000408, 0xCAC8A400, 0xBCCCCCCC, 0x909B98A6, 
0xB0C00000, 0x00000000, 0x60B06010, 0xA0A07050, 0xC0B03020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x3868A808, 0x8ACC8A48, 0x08284849, 0x08280C0C, 0x5090C000, 0xC0905060, 0x80C0C0C0, 
0x00000040, 0x9C7C6C00, 0xC6CCCBBC, 0x8AA8BAC8, 0xB0600A0A, 0x88977400, 0xCCCCAB8A, 0x92A4C6CA, 
0x00400A04, 0x0C0C0B06, 0xCCCC8C4C, 0xCCBCCCCC, 0x88494080, 0x291B0C08, 0xCCCC8A48, 0xCCCCCCCC, 
0xA8884C8C, 0x080C080C, 0x080C080C, 0x0C0C0804, 0x080C0808, 0x6070B000, 0xC0C08040, 0x3070B0C0, 
0x50905010, 0x20213200, 0xCCCC8640, 0xBCCCCCCC, 0x02061030, 0x090A0B09, 0x0C0C0A09, 0x0B0C0C0C, 
0x09080608, 0x80C080C0, 0xC7C78340, 0x8CCBC8C8, 0x2222264A, 0x04070B09, 0x080C0804, 0x03030404, 
0x03030303, 0xC0C0C070, 0xB0C0C0C0, 0x70708090, 0xC0707070, 0x6C2C0C0C, 0xC5CAAC8C, 0x70B0C0C1, 
0x50701828, 0x09090700, 0x0C0C0A0A, 0x0B0B0B0C, 0x05060307, 0xA2A1C2AC, 0x587C5975, 0x91819174, 
0x61816171, 0x97743800, 0xCCCCCBBA, 0x077AACCC, 0x00000031, 0x96A66301, 0xCCCCC9B8, 0x8CACACCC, 
0x00000317, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0C0A001, 0xC3C2C1C0, 0x6C9CA9B7, 
0x00010418, 0xA0704000, 0x70C08070, 0x00001040, 0x00000000, 0x09090909, 0x090C0909, 0x09090909, 
0x00000000, 0xC9B9C959, 0xBACCBAB9, 0x9A9BACAA, 0x4A0B3607, 0xBB9A8959, 0xBCCCCCCC, 0xACBCBCBC, 
0x43930000, 0x9CACACC0, 0x95CA9BAC, 0x96939192, 0x50504233, 0x4C4C4C41, 0xC6CCCC8C, 0x496A8BC8, 
0x41414141, 0x0C0C0C0A, 0x090C0A0C, 0x080A0807, 0x02010102, 0xB0C0A090, 0x90C0B0C0, 0xC0B0C0A0, 
0xA0809080, 0x6080C000, 0xCCC8C480, 0xAACCCCCC, 0x00002051, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC4B1B000, 0xCBCCCBC9, 0x0268BCCC, 0x80900000, 0xB9C4B000, 0xAACCCCCB, 0x114689AA, 
0x90703100, 0xC6C4C000, 0x4C7C8CA9, 0x0024373A, 0x00073740, 0x8A8A6C00, 0x7CCCAC9B, 0x08091A4C, 
0x03070000, 0x0B090802, 0x0C0C0B0B, 0x090C0C0C, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x0C0C0A00, 0x080C0C0C, 0x03050104, 0x00000001, 0xAC8B67A0, 0xACCCCC9C, 0x81C2C6A9, 
0xA0C08060, 0xCBAB9BCB, 0xCBCBCBCB, 0x9BBBCBCB, 0x9B9B9B9B, 0x9C9B9BCC, 0xCCBCAC9C, 0xCBCBCCCC, 
0xABCBCBCB, 0x9A9999BC, 0xBC9C9C9B, 0xBBCCCCCC, 0x9999999A, 0xBCAC9CBC, 0xBBCCCCCC, 0x9C9C9B9C, 
0x9A9C9C9C, 0xC9C9C9CC, 0xB9C9C9C9, 0x9C9CACAB, 0x999B9BAC, 0xCCBBA8CB, 0xCBBBBCBC, 0xC0C1C4C7, 
0xC0C0C0B0, 0xCBCABACC, 0xCCCCCCCC, 0xBCBCBCCC, 0x999A9BAC, 0x999999CB, 0xCBB9A9A9, 0xCCCCCCCB, 
0x9CACCBCB, 0xCCCCABBC, 0xBCCBCBCC, 0x0B1B5B8B, 0x0B1B0B0B, 0xB9B9B9CC, 0xBCBBBBBB, 0xCCCCCCBC, 
0xBACCCCCB, 0xC9A999CB, 0xC9C9C9C9, 0xCCC9C9C9, 0xABCCCCCC, 0x0909090C, 0x0C0C0C0B, 0x0A0A0C0C, 
0x09090909, 0xCCCBCCBC, 0x17498BBC, 0x00000204, 0x00000000, 0xCCCAC9CC, 0xACBCCCCC, 0xA9AACBBB, 
0xA9A9A9A9, 0xC9B999CB, 0xCCCBCACA, 0xAABCCCBC, 0x99C9B999, 0x0B0A07B4, 0x5A18070A, 0xC8CCCC9C, 
0x124283A5, 0x0C0C0B0C, 0x09090C0C, 0xC9893909, 0x99C9C9C9, 0x8C8C8CCC, 0x8C8C8B8C, 0xCBCACCBC, 
0x8B8C8B8A, 0x9B8B6A48, 0x5C7C8C9C, 0xC7B98C3C, 0xA6C8C8C6, 0xB9B9B9CB, 0xBCBBBBAB, 0xACCCCCCC, 
0x99999A9C, 0x886745AC, 0xCCBCAB99, 0xCBCCCCCC, 0x8798A9BA, 0x6C4B49CC, 0xBBAC8C6C, 0xC3C5B8BA, 
0xC2C2C1C1, 0x0C0B090C, 0x090B0C0C, 0x090A0B09, 0x09090909, 0xBCB8B6CB, 0xCCAC9C9C, 0xA0C4B8CC, 
0x9195A1A0, 0x66636140, 0x8C7B7978, 0xCBBCAC9C, 0xC5C7C9CA, 0xC0C0C1CA, 0xC7C4C0C0, 0x9BACCCCC, 
0x93969898, 0x999999BC, 0x9C9C9B9A, 0x99ABC9CB, 0x9B9C9A9A, 0x0C0B0A0C, 0x0C0C0C0C, 0x0B0C0B0B, 
0x0B0C0C0C, 0xCBBB8A5B, 0xBBBCBCCC, 0xAABACABA, 0x8ABABAAA, 0xC9A9898C, 0xCACAC9C9, 0x2B3C5C8B, 
0x4C3C3B2B, 0xC8C5C1BB, 0x5B6C8CAC, 0x00000316, 0x00000000, 0xC5C3B1C1, 0xACCBC9C7, 0x2B4C6C8C, 
0x02060A0B, 0x2929293B, 0x7959392A, 0x99AACACA, 0xBABCBC9B, 0x303030C0, 0x91503030, 0xABC9C6C2, 
0x8BCC8C7C, 0xA0A0A0B0, 0xC7B3A0C0, 0x99ACCCCC, 0xC0C0A497, 0x98A5A28C, 0xB9CCBCAC, 0x334385B5, 
0x02031423, 0x9CB8CCBC, 0xCCC8C8B8, 0x3478BCCC, 0x04040404, 0x2C1B09BC, 0xBB8A6C3C, 0x8CBCCBCB, 
0x2A1B1C5C, 0xC2C2C2B4, 0xC8C4C3C2, 0x789CBCBC, 0x43626265, 0xB9A999CC, 0xCACACAC9, 0xCCCCCCCC, 
0x9B9C9CAC, 0xB989C9BC, 0xCA894979, 0xCACBCBA9, 0x5B9BCAC9, 0xB0C0C09B, 0x4C7866A2, 0x2524383C, 
0x2C2C2A29, 0x8989898B, 0x8B8A8989, 0x8CACCCBC, 0x8C8B8A8A, 0x646352BB, 0xCB987564, 0xCCCCCCCC, 
0x8B9BBCBB, 0xC79572CC, 0xCC9BBAB9, 0xBACBCBCC, 0x9ABB9B9C, 0xCBBA8764, 0xCBCBCBCB, 0x9CBCCCCC, 
0x35395C7C, 0xACBC8BB8, 0xCBCCCCCC, 0xA9C9C9CA, 0x185A89A9, 0x0502000B, 0x0C0B0907, 0x0C0C0C0C, 
0x080B0B0C, 0x3B4A38BA, 0xCCBC8C6C, 0xBACBCCCC, 0x01336587, 0xB9C9C9CC, 0x9B8A99B9, 0xACACCCBC, 
0x99A9AA9B, 0xC5C5B5BC, 0xC8B5B4B5, 0xC9CCCCBC, 0x979BBCB9, 0xC9B999CC, 0xBCAB9AB9, 0x9AABACAC, 
0xB99CBCAB, 0x08060403, 0x0C0B0B09, 0x0B0C0C0C, 0x07090A0B, 0x2926222B, 0x2C2C2C2C, 0x50212529, 
0xC0C0A080, 0xA97959BB, 0xB9C9C9C9, 0x1C2B5B99, 0x1919191B, 0x9C9B9ACC, 0xCB9999AB, 0xCCBBBCCB, 
0xBCCCCBCB, 0xCBBB7B48, 0xCACBCACB, 0x0C3B8B9B, 0x0A0C0C0C, 0x7B7C6CCC, 0xCBCACA9C, 0x6B8BCACA, 
0xBB8C6A6A, 0xCCAB7A4C, 0x6B8BACBC, 0xBB7B4B7B, 0xC4C5B7A9, 0xC0C0C0B0, 0x80A0B0C0, 0x30506070, 
0x00001010, 0xC1B0A03B, 0xA9B5C1C1, 0x576B6C8C, 0x31414143, 0xA69593BC, 0xC5C6C5C5, 0xCAC8C6C7, 
0xCBCCBBBB, 0xCC9B58B8, 0x6AACCCCC, 0x01020425, 0x01010101, 0x706030AB, 0xACB9C5A1, 0x87A8BCCC, 
0x10104063, 0xCCCCABBC, 0xA99AA9BB, 0x99B9CBC9, 0x8C8C9C8A, 0xAAC889CB, 0xCCBCCCCA, 0x9C7C7C8C, 
0x7A8B9A79, 0xC1C190A0, 0x89B5C2C2, 0x080C1C4C, 0x00000205, 0xBABCB9CC, 0xBCB9B9BC, 0xC9CCCCCC, 
0xB8BAB9BB, 0x20202030, 0x90603030, 0xB0C0C0C0, 0x20206090, 0x9A9997CC, 0xABB9B99A, 0xBCBCBCBC, 
0xA5C9BBAB, 0xC9B999CB, 0xCBCAC9C9, 0xBCCCCCCC, 0x9A9CCCBC, 0x919190C0, 0xC4C3C2B2, 0x98CBCCC8, 
0x90939596, 0x909090C0, 0x90C0B090, 0xC09090C0, 0x90C0C0B0, 0xCCCCCCBB, 0xC6BAB7CB, 0x054585B5, 
0x05050505, 0x0C0C0C0C, 0x0A0B0C0C, 0x0708090B, 0x07080807, 0x9BA7C6CC, 0xBCACCCBB, 0x9CBC9CBC, 
0x97CBCCBC, 0x864503BC, 0xC5C5C5C6, 0x2C6BA9B6, 0x0A0C0C0C, 0xC7C7C7CC, 0xB8A7A6B6, 0x5C8BBAB8, 
0x0C0C1C3C, 0xC2C192CB, 0xA9C7C4C2, 0x3C4C5B7B, 0x494B5C4B, 0xAA8A6ABC, 0xCACBCACA, 0x2A2B5C9B, 
0x2B2A2A2A, 0xC59572B0, 0xACCCCAC8, 0x0A0C3C7C, 0x02020607, 0x88A785CB, 0xAC6C5B7A, 0xCBCBCCCC, 
0xC3C5C7C9, 0x0A07040B, 0x0C0C0C0A, 0x0B0B0C0C, 0x0C0C0B0B, 0xC2C1C1CB, 0xBBC8A6B4, 0xBCCCCCCC, 
0x85A8AACB, 0x2A27232B, 0x7C4B3B2B, 0xCCCCCBBC, 0x3566B8CB, 0xC3B282C2, 0xCAB796A3, 0xAB5C8CCB, 
0x87BACCBB, 0xC8B7B6CB, 0x9C9BAAB9, 0xCABAAA9A, 0xC8CACACA, 0x090A09BB, 0xBB794A19, 0xBAC9CCCC, 
0x5C8A6B9C, 0x909090B0, 0xB0909090, 0xB0C0C0C0, 0xA090A0B0, 0xCAAB9CBC, 0xCCCBCBC9, 0x8CACBCBB, 
0x293C3B6C, 0xA4A492CC, 0x97A5C4B3, 0xBCBBBAC8, 0x9A9ABBBC, 0x9A7A4ABB, 0x7B5B5C7B, 0xCBCBBBBB, 
0xAABCCBCB, 0x0C0A0ABC, 0x1A0A0B0A, 0xCBAB8C5B, 0xBBCACCCC, 0x93C3C3C4, 0xC6C493B3, 0xCBCBCC9B, 
0x9CCCCCCB, 0x999999BB, 0xCA99A999, 0x99A9C9C9, 0xBB9B9A99, 0x0B090605, 0x0C0C0C0C, 0x0507090C, 
0x01030304, 0x939393CB, 0xA3B3A3A3, 0xCCBAC8C5, 0x99AC9C9C, 0xC7C6C4CC, 0x9AB9C8C7, 0x5A6C8C9B, 
0x24363839, 0x707060C0, 0x60708070, 0xB0A0A080, 0xC0C0C0B0, 0xB0B0A0B0, 0xB0B0B0B0, 0x707080A0, 
0x70707070, 0x09090989, 0xB9894919, 0xAACCCCCA, 0x09194A7B, 0xC9C9C9CC, 0xBCCCBCC9, 0xCBCCCCCC, 
0xA9A9A9AA, 0xB9CABCCB, 0xCAB6A9B5, 0xB8CCCCAC, 0xA2A69996, 0x74767ACB, 0xABB9C795, 0x8C9CACAC, 
0x9C7CACAA, 0xBCCCACC8, 0xCCCC9CAC, 0xC9B6C6C8, 0xBCCCCCCB, 0xA0B0C0B0, 0x90A0A0A0, 0x70707070, 
0x70707070, 0x3C2C2CCC, 0x996A594B, 0xB9C9CACA, 0x4C5999AA, 0x5A4A3CBB, 0xCBACBC8C, 0x76A5C5C7, 
0x30303143, 0xB08040C0, 0xC0C0C0B0, 0x90C0C0C0, 0x603060A0, 0xCBC9C6CC, 0x9CBCCCCC, 0xA4B8CBBB, 
0x93C4C3B4, 0x7999B9CC, 0x497C7A79, 0xBBCBCBAA, 0x7CBBAAA9, 0xC0B090A0, 0xA09090B0, 0xB0B0C0C0, 
0xA090A0A0, 0x9C9C9BCC, 0x96AA9C9C, 0xC2C1B191, 0xB6C8C5C3, 0x8CA976BC, 0xBC8C7B8C, 0xC8C7CACB, 
0x867888B8, 0xCCB999CB, 0xCCB9AABC, 0xACBC9CBC, 0x9A9B9BAB, 0x0909093B, 0x9C5B290C, 0xBCCBCCC9, 
0x092C6C9B, 0xC0C090C0, 0xC0C0B0C0, 0xC0909090, 0x90C090C0, 0x0202020B, 0x04020202, 0x0C0C0C08, 
0x0204080C, 0xB89C99CC, 0xBCA9CBC9, 0xCBCCBC9C, 0xCCCBACBC, 0x9C9CAACC, 0xC9A9CAA9, 0xABB9C9CA, 
0xCBCCA999, 0x292929CC, 0x4C292928, 0xC9C9CC8C, 0x7CBCBCB9, 0x84846262, 0x9A8B8886, 0xACCBC5A4, 
0xABACACAC, 0xCBAC79CC, 0xACCCCBC9, 0xCCAC7A7C, 0xC9C9C9C9, 0x24230200, 0xBB986745, 0x8BCCCCCC, 
0x0215576A, 0x0B0A097C, 0xBC7C3B0B, 0xC9C9CACC, 0x195999B9, 0x2C0C0CBC, 0xCCBB8B5B, 0xB9CCCCCC, 
0x0B2B5A8A, 0xC0C0C0B0, 0xB0C0C0C0, 0x80A0A090, 0x00001040, 0x0C0A0704, 0x0B0C0C0C, 0x00000205, 
0x00000000, 0x505050CB, 0x40404040, 0x40508050, 0x80604040, 0x00040809, 0x060A0602, 0x08040105, 
0x080C0C0C, 0x08030000, 0x080B0C0B, 0x07030306, 0x0C0C0B09, 0x0001030B, 0x00000001, 0x07030000, 
0x0C0C0B0B, 0x3B3B38B4, 0xB676383B, 0x8BCCCC8B, 0x30333749, 0x504030C0, 0xC0C0A070, 0x60A0C0C0, 
0x4080B080, 0x3070A0B0, 0x80400000, 0xC0C0C0A0, 0x4080C0C0, 0x00000000, 0x90502010, 0x40B0C0C0, 
0x70803030, 0x0607030B, 0x04020406, 0x0C0C0C08, 0x05090C0C, 0x987C4ACC, 0x7C88A6A6, 0x4688BA9A, 
0x8C481816, 0x665330CB, 0x7C9CAB8A, 0xC4B77B5C, 0x8090C0C0, 0x06050302, 0x04080B08, 0x0B060302, 
0x070B0C0C, 0x707070C0, 0x8080C080, 0x707080C0, 0x80C08070, 0x0102020A, 0x09060603, 0x0907070B, 
0x0C0C0A09, 0xCAA9A683, 0x9CBCACCC, 0x775B2C4C, 0x40718485, 0x8CC884BB, 0x894C0C4C, 0xCBC9C8C7, 
0x060A4C8C, 0xAA73424A, 0x78585A7B, 0x7CBBCAC9, 0x28292A3B, 0xC0C0B0B0, 0xA0C0C0B0, 0x20304070, 
0x70A07030, 0x300000B0, 0xA0705070, 0xC0C0B0B0, 0xC0C0B0B0, 0x4A86C2BB, 0xCC8CBC7C, 0xB6C5C8BC, 
0x00105195, 0x676767CC, 0xC7876767, 0xCCBCA8C7, 0xB7977798, 0xCC9B5A96, 0x8C4C4B8C, 0xCCCCC9C7, 
0x34384C8C, 0x02020202, 0x07040202, 0x090A0C0C, 0x0B070808, 0x0B090604, 0x0C0C0C0C, 0x0A0C0C0C, 
0x09050508, 0x0000000B, 0x06020000, 0x0C0C0B0A, 0x0A0C0C0C, 0x090C0C0B, 0x0204080C, 0x00000206, 
0x0A090501, 0xC3C3B3B4, 0x5B6A97A7, 0x4B7BBC7B, 0x2A3C5B3B, 0xCCC985CC, 0xCCCCCC8C, 0x866687C8, 
0xCBCA8CC8, 0x4B4C1ABC, 0x3C6CAC7C, 0xC5CB9A6A, 0xA8BBC7B5, 0x0404040C, 0x0A090805, 0x05040407, 
0x0C0C0A07, 0x0908070A, 0x6C4C3B1B, 0xC2C6C9AB, 0x98C7C3C1, 0x5551506B, 0xAC8C6C59, 0xCCB8BBC8, 
0x5084C8CC, 0x08060401, 0x0C0C0C0A, 0x04080C0C, 0x00000202, 0x303030B0, 0x30303030, 0x40304030, 
0xC0C0A060, 0x0303020C, 0xA7673524, 0x7AA5C4C4, 0x7BACAC8C, 0xCBAA87C5, 0x9CCAC9CB, 0x8CCCCC8C, 
0x7C7C7C8C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xB2C2C2B2, 0x26376593, 0x5C4C7943, 
0x0A0B0C2C, 0x0B0B0B09, 0x2B2C1C1B, 0xC2A88A4A, 0xA5C9C5C3, 0x0C0C0C0B, 0x0004080C, 0x02030703, 
0x0C0B0A06, 0x70704040, 0xC0806070, 0xB0C0C0C0, 0x30306080, 0x2C2829BB, 0x2C2B2C2C, 0xC4C88C4C, 
0x4387CBC7, 0x03030304, 0x0C0A0705, 0x0C0C0B0C, 0x05090C0C, 0x07060402, 0x0A090608, 0x090C0C0C, 
0x07090807, 0x08090A0B, 0x0B0B0A0A, 0x080C0C0C, 0x04030305, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x09060309, 0x090B0C0B, 0x04090C0A, 0x00000101, 0x0A090602, 0x0C0C0C0B, 0x9A3C4C3C, 
0xB4C8C8B9, 0x0C0B0805, 0x060A0C0C, 0x080B0605, 0x080C0B09, 0x98682705, 0xACCBCAB9, 0x31465B7C, 
0xB0A08020, 0x818080CB, 0xC8C6C683, 0x898A88C8, 0x8B8C8C8B, 0x7A7975C4, 0x7C7B7A7A, 0x7C7C9C7C, 
0xCACCBC8C, 0xCCCCCCCB, 0xBBB8C9CB, 0x7384989C, 0x24334353, 0x7868ACCC, 0xCCC8CC8C, 0xC8C8CCCC, 
0xBC986C9C, 0x8CCB88CC, 0xC78ACCBC, 0x86C78BC7, 0x7686C686, 0x827272CC, 0x7A888684, 0xA8CB9C8A, 
0x82C49777, 0xA87665CC, 0xCCC8C8BA, 0xCCC9CCAC, 0xCB888B89, 0x565656CC, 0xCC885656, 0xBACC9C8C, 
0xCCC89CC8, 0x796957CB, 0xBCAC9B8A, 0xB8CCCBCC, 0xB0A0A2A5, 0x441313BB, 0xB5B39464, 0xCCCCCCC9, 
0x22667A9C, 0x0202020B, 0x02020202, 0x0B080502, 0x0A0C0C0C, 0xC2C181C1, 0xC2827282, 0x8AC7A985, 
0xC9CC8B7A, 0xCCAB69C5, 0xC7CBCC9C, 0x616595C3, 0x61616161, 0x89A8C4CC, 0x7794C4A7, 0xB9CCCCBB, 
0x5498ABA9, 0x221417CB, 0xCCC8A463, 0x3A4C6CAC, 0xC4864678, 0x6C6C3CBA, 0x184A1B2C, 0xC3A36326, 
0x83C3C3C3, 0x5C1A0BBB, 0x9CC8CC9C, 0x987BBBCA, 0xB3C3B3B4, 0x908070C0, 0xC0C0C0C0, 0x80B0C0C0, 
0x60707070, 0xA0603000, 0xA0C0C0C0, 0x80C0C0B0, 0x00205060, 0x8262239B, 0xC7C3C2B2, 0x4B5C7CBB, 
0x46494648, 0x6C5C7ABC, 0xA98CCC9C, 0xB8ACC9B5, 0xB6B8B6B5, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x7877B5CC, 0xC5978978, 0xCAB9C7C3, 0x7BBCBB8B, 0x0201000B, 0x0B080502, 0x0C0C0C0C, 
0x0103060A, 0x0C0B0808, 0x0C0B080B, 0x080B0C0C, 0x05050506, 0x899858B6, 0x88483669, 0xCCCCCCBC, 
0xA69AB8CA, 0xC0C0B0B0, 0x4080C0C0, 0x00000000, 0x00000000, 0x0A09090B, 0x09090A09, 0x09090909, 
0x09090909, 0x30201000, 0x74605040, 0xBCAC9C88, 0xC0C4C8CC, 0x432236BB, 0xB7B88465, 0x99CACBC8, 
0x2B2C3C6B, 0x877A56C8, 0x3C3C5C79, 0xBC8CAC6B, 0x85C9C8CB, 0x68573523, 0xBCABA879, 0xAABCCCCC, 
0x22326487, 0x7A7B5C4B, 0xC9B99989, 0x97A8B9C9, 0x52647586, 0x908070CB, 0xB9C7B4B0, 0x7C8C9BAA, 
0x394B5C6C, 0xABABC984, 0xCCCCBCAC, 0xCBC8BACC, 0x638579AA, 0x08050209, 0x0B080406, 0x0B0C0C0B, 
0x0B0B0C0C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8C4C0CBB, 0x4A5B9BCB, 0x83C7CB8A, 
0x90505090, 0x0100000B, 0x0C090602, 0x05090C0C, 0x090C0804, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x06040200, 0x080A0908, 0x090C0C0C, 0x01020305, 0xC584C3C2, 0x8A898886, 0xCCCCCB8A, 
0xC7B889BB, 0x686764C2, 0xCBCB8A6A, 0xCCCCCCCB, 0xA6AAACAC, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x0A07040A, 0x0C0C0C0B, 0x03060A0B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x1C1917AB, 0x0C0C0B1B, 0xC89B5C1C, 0x97B8C5C4, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x8A381603, 0xCACCCCBB, 0x98A9AACB, 0x98888888, 0x8CBCCCBB, 0x1B2B3B4C, 0x090B0C0B, 
0x00010306, 0xB0A060B0, 0xC0C0C0C0, 0x402060A0, 0x00004080, 0x2B1804BB, 0x7C5C6C3C, 0xC2C4C8AB, 
0xA3C3C2C2, 0x9BAAC8BB, 0xCC9C7CAC, 0xBACCBCCC, 0xC6C6B7C9, 0xA797576C, 0xBCBCBCB8, 0x78ACCCCC, 
0x4C484C58, 0x9C8955BB, 0xAC9CAB9A, 0xC8CCCCAC, 0xA2C6C9CA, 0xC0C0C0A0, 0x70A090B0, 0x807080B0, 
0xA0C0B080, 0xC6B5878C, 0xCACCCCCA, 0x9C8C8CBC, 0x8CCCACAC, 0x683818BC, 0xC8BA9C8A, 0xB8C8CBC8, 
0x58587898, 0x829281B0, 0xCBC9A694, 0xCACCCCCC, 0x53855588, 0x676766CC, 0x68676667, 0xB98C7C7C, 
0xB9B988B8, 0x7A5756CC, 0xCB89ACAC, 0xCCCCBAAA, 0xBABB99CC, 0x475A76BB, 0xCB976433, 0xA6CACBCB, 
0x9CBC9CCA, 0xB8C8BCAC, 0xCC7CCCCC, 0xC8CCBBCC, 0x387CB89B, 0xC8A684BC, 0xCCCCCCC9, 0x57999CAB, 
0x02020214, 0x998674BB, 0xCCCCCCCB, 0x38697B9C, 0x01040507, 0xC2C2C2BB, 0x94B2C2C2, 0x8C7C6A77, 
0x090C4C6C, 0x080C0ABC, 0x5C1A0806, 0xCCCBC98C, 0x5B9CCCCC, 0x595866BB, 0x8C8C8B6A, 0xC4C8CB9C, 
0x80C0C0C1, 0x42424050, 0x8A685654, 0xCC8C9C8C, 0xC5C9CBCC, 0x602000BB, 0xC8C4B1A0, 0x3A7CACCC, 
0x00000317, 0xC0C0A06B, 0xB8B6C2C2, 0x1C1C6CAC, 0x12161A1B, 0xB1A2819B, 0xABB7C3B1, 0xBCBCAC8C, 
0xC4C7CBBA, 0xCCAC7C7B, 0xACCCCCCC, 0x18192A6B, 0x15141115, 0x704000B0, 0xC6C1C0B0, 0x7C4C8CCA, 
0x3C7C9CBC, 0x536581CB, 0xA9756250, 0xBCCCCCCB, 0x3347698C, 0x9B7733BB, 0xBCBCBCAC, 0xACBCCCAC, 
0x0206497C, 0x0C0A0C0B, 0x0C0B0B0B, 0x0B0A0A0B, 0x0304060A, 0x5C5C5C6B, 0x5559595C, 0xC1A16559, 
0xB1C5C9C5, 0x0B0B0BCB, 0x9B5B1B1B, 0xCBCBCBCB, 0x8B8BABCB, 0x010000CC, 0x78311000, 0xCCCCCCB9, 
0x19496A9C, 0x0000002C, 0x84410000, 0x8CCCCCC8, 0x06090B4C, 0xB070300C, 0xC8C4C0C0, 0x0B4C8CBC, 
0x00000408, 0x0A0A0ACC, 0x9A9A8A0A, 0xCBCBCBAB, 0x9A9A9ABB, 0x000000CC, 0x91300000, 0xCCBBC8B5, 
0xAB9CCCCC, 0x909090C0, 0xA8949190, 0xBBCCBCBC, 0x909094A8, 0x0C0905CC, 0x5A1B0C0C, 0xC1C1C497, 
0x00206090, 0x0000000C, 0xCCCC8844, 0x4A8CCCCC, 0x09090A0A, 0x050100C0, 0x9C2C0C09, 0xC2C6CA9C, 
0xA0C0C0C0, 0x8A4A090C, 0xCBCBCACA, 0x0C4C8CCC, 0x09090A0B, 0x000000CC, 0x9B090800, 0x9A9C9C9C, 
0x99999999, 0x0000000C, 0xC9C98940, 0xBCCCCCCC, 0x0929699B, 0x0A0A0ACB, 0x4C0C0C0B, 0xCACBCA8B, 
0x1A4A8ACA, 0x140000CC, 0xBCAC8B48, 0xCACBCCCC, 0x1A4987A8, 0xB0B0700C, 0xC9C0C0C0, 0x3B79B9C9, 
0x0B0C0C0C, 0x000000CC, 0x77440000, 0xCCCCCCBA, 0x5084B8CC, 0x0300000C, 0xB9883505, 0x8CCCCCCB, 
0x0909094B, 0x0A0A0ACC, 0xCA8A4A0A, 0x8CCCCBCB, 0x0B0C0C4C, 0xA969290C, 0xC9C9C9C9, 0x2C5C9ACA, 
0x0A0B0C0C, 0x202020CC, 0x59262220, 0xCCCCBC9C, 0x636699CB, 0x200000CC, 0xCB985531, 0xCCCCCCCC, 
0x10205498, 0xC0C190CC, 0x98B491A0, 0xCCCCCCCC, 0x93B6BACC, 0x0706040C, 0x8B5B1A08, 0xCCCCCCCC, 
0x397B9BBC, 0x0202020C, 0x0A090902, 0x0C0C0C0B, 0x0909090A, 0x0909090C, 0x09090909, 0x0909090A, 
0x09090909, 0xC0B0700C, 0xC4C0C0A0, 0x0C1B5A97, 0x0B0C0C0C, 0x959492CC, 0xAA9A9896, 0xCCCCCCCB, 
0x9999A9CB, 0x787672C0, 0xCCAC8C7C, 0x8699CBCC, 0x72747774, 0x5110000C, 0xC7C5C995, 0x0C4C8BBB, 
0x080C0C0C, 0x0000000C, 0xBA661200, 0x8CBCCCCC, 0x0002164A, 0x011000CC, 0x8C4C1805, 0xC5C9CCCC, 
0x104080B1, 0x02000000, 0xCCBC8846, 0x87BACCCC, 0x00000043, 0x2B0B0ACB, 0xCBBB8B5B, 0x98BACBCB, 
0x02143667, 0xC7C28000, 0x8CCCCCCA, 0x080B1C4C, 0x00000104, 0x260606CC, 0xB6B69656, 0xCBCBCBC7, 
0x9CACACBC, 0x101010CC, 0x9B6A3713, 0xCCBCBCCC, 0xA0C3C7BA, 0x608050CC, 0x99573440, 0xBCCBCBCA, 
0xAACCCCCC, 0x8142000C, 0xC9C5C2C2, 0x5C9CCCCB, 0x09090A2B, 0x8A5B19CC, 0xCACCCCBA, 0x9BA9B9C9, 
0x09092B5B, 0x7B7878CC, 0xCBCCCB8C, 0x7878788C, 0x78787878, 0x000000CC, 0x2A180310, 0xCBAC7C5B, 
0x70A4B8CB, 0x306030C0, 0x80503050, 0xC0C0C0B0, 0x90A0B0C0, 0xA0B070C0, 0xC0C0C0A0, 0x70B0C0C0, 
0x10102030, 0x050201CC, 0x5B180408, 0xCCCCCC9C, 0x3376B7CA, 0x705040C0, 0xBB888491, 0xC9CCCCCC, 
0x909193A6, 0x0000000C, 0xBAB76330, 0xBACCCCCC, 0x00004286, 0x0C0C08C0, 0x03070B0C, 0xC0C08040, 
0xA0B0C0C0, 0xB5A5A5CC, 0xC6C5C5C5, 0xBCCCCAC7, 0x97ABCBCC, 0xC7C787BC, 0xCCB8B7C7, 0xBBCCCCCC, 
0x5787A7B9, 0x110000CC, 0xCBB98644, 0xBCCCCCCC, 0x266A8BAC, 0xB9A986BC, 0xB8C5C6C8, 0x7C8C8B99, 
0x44585B5C, 0xBAB8A4CC, 0xCACCBBBB, 0xCBCCCCCC, 0xB9B9BBCC, 0x754120CC, 0x8B77B7B5, 0x8CCCCCCC, 
0x23272B5C, 0x0504030C, 0x09080705, 0x0C0C0C0B, 0x0909090B, 0x434242CC, 0xBC9C7955, 0xB4889CBC, 
0xB2C2C2B2, 0x5C4C38C0, 0x9A8B7C6C, 0xC2C6C89B, 0x9090A0C0, 0xCCCC88CC, 0x3678ABCC, 0x070B0706, 
0x06060608, 0x040201CC, 0xCB8A6946, 0xCBCCCCCC, 0x215387CA, 0xB5C291CC, 0xBCBCBAC9, 0xA8ABBCBC, 
0x91919295, 0xA09060CC, 0xBAB9C8C1, 0xBCCCCCCB, 0x999A9C9C, 0x4B170300, 0xCCCCBC8C, 0x5599C9CC, 
0x00001021, 0x333632CC, 0x9C6C4834, 0xCBC8CCCC, 0x4080B3C7, 0x787472CC, 0x9C7C7CAC, 0xC4C78B7C, 
0x7292C2C2, 0x501000BC, 0xBC797882, 0xC9CBCBCC, 0x999989AA, 0xC8B887CC, 0xAC9C9CC8, 0xC9C8BCBB, 
0x9797A7B8, 0x392807CC, 0x8C9A7A3A, 0xCCCCCCCB, 0x1A4B8BCC, 0x0C0C08C0, 0x6024080C, 0xC0C0B0A0, 
0x90C0C0C0, 0x151110C0, 0x6C3C1B19, 0xC7CBCCAC, 0x40304083, 0x6030000C, 0xC8C4C0A0, 0x4C8CCCCC, 
0x00020609, 0x0905020C, 0x0C0C0C0C, 0x0105090C, 0x00000000, 0x0909090C, 0x89490909, 0xCBC9C9C9, 
0x0B3B7CAC, 0x707070C0, 0xC4C08070, 0xCC8CCC98, 0x7387CACB, 0x9868280C, 0xCBC8C8B8, 0x8CCCCBCC, 
0x090A0949, 0x0A0A0ACC, 0x9A7A3A0A, 0x6AAACACC, 0x0B0C0C3C, 0x84B07000, 0x8BCCCAC8, 0x0C4C8CCB, 
0x0306090B, 0xC06010CC, 0x8484B7C4, 0xACCCCCC8, 0x93C7C7BB, 0x8CCC88C0, 0xC8C6CACC, 0x80C286C8, 
0x8080C080, 0x473525CC, 0xABAB8A48, 0xCACBCCBC, 0xA5B6C7C8, 0x612111CC, 0xCBC8C592, 0x1C5C8CBC, 
0x1204080B, 0x767676CC, 0x9C9C9977, 0xC6C9CCAC, 0xA696A6C7, 0xC595550C, 0xCCC8C5C5, 0x0A4C8CCC, 
0x0505070B, 0x5C7B57CC, 0x5C5C5C5C, 0xCA8C6C5C, 0xC1C2C5B8, 0x000000C0, 0x8B4B0703, 0xCBCBCCCC, 
0x224488AC, 0xC08040CC, 0x99C5C3C2, 0x0C0C1C5C, 0x0909090A, 0x404040C0, 0x40504040, 0xB0B0B080, 
0xC0C0C0C0, 0x4100000C, 0xC8C8C985, 0x4C8ACACA, 0x0C0C0C0C, 0x030303CC, 0x09050303, 0x8CBC7C3C, 
0x3334579B, 0x050303CC, 0x9C7C8C29, 0x9496999C, 0x93939393, 0xCBB986CC, 0x9BCCCCCC, 0x7174888C, 
0x70707080, 0xC995520C, 0xCCCBCBCC, 0xCBCCCCCC, 0xB8B9BABA, 0xA36333BC, 0xC8C4C3B3, 0xACBCCCCC, 
0x1B3B6C8C, 0x0303030C, 0x03030303, 0x0A0C0804, 0x0C0C0A0C, 0x555453CC, 0xBB9A7855, 0xCABBBCAC, 
0xB9C9C9C9, 0xA0602000, 0x90C0C0C0, 0x00001050, 0x00000000, 0x908070C0, 0x7B87B380, 0xC5C98C7C, 
0xC0B090C1, 0x0202020C, 0x4C1B0703, 0xCACBCC8C, 0xB2C2C4C8, 0x0606060C, 0xA8764616, 0xCCCACCCC, 
0x0636679A, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA8B888CC, 0xB8B8C8C8, 0xBBC8C9B9, 
0x1C5C8CB9, 0x000000C0, 0x70401000, 0xC0C0C0B0, 0xB0C0C0C0, 0x0404040C, 0x0C080605, 0x070B0C0C, 
0x04040405, 0x0C0C080C, 0xB888592B, 0x7CACCCCB, 0x0003064A, 0xB1A0602C, 0xB4C2C2C0, 0xACBCCBB7, 
0x04083C7C, 0x6C6A67CC, 0x6C6C6C6C, 0xC8C8CA8C, 0x656685B6, 0x113010C0, 0x48143215, 0xB9BCBC8C, 
0x90A0A1A5, 0x71401000, 0xCCCCB9A5, 0xB2B6CACC, 0x10205090, 0x000000CC, 0x49250100, 0xCBCCCC8C, 
0x185999CA, 0x051200C0, 0x7C4C2806, 0xC5C9CC9C, 0x7090B1C4, 0x000000CC, 0xC9B67331, 0x8CBCCCCC, 
0x04041559, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xB07030C2, 0xCCCCC8C4, 0x5184A8CC, 
0x00000010, 0x8050200C, 0xCCC98562, 0x6BACCCCC, 0x01020538, 0x000000CC, 0x70302010, 0xCCCAC7B4, 
0x43769ABC, 0x030000C0, 0x0C0B0A07, 0x9B5C1C0C, 0xB0C0C4C7, 0x000000CC, 0x84411000, 0xCBCBCAC8, 
0x044689BB, 0x404040C0, 0x47434040, 0xCCCC9C6B, 0x415468AC, 0x90501000, 0xC0C0C0C0, 0x80A0C0C0, 
0x00002060, 0x8090700C, 0xC0C0B070, 0x80C0C0C0, 0x00000040, 0x8CCC88CC, 0xCCCCAC7C, 0xB9CCCCCC, 
0x67776887, 0xB6B575CB, 0x9B9BA9B7, 0xBBBCCCBC, 0x0506488A, 0x330100CC, 0x88854476, 0xCCCCCCAC, 
0x80B3C7CB, 0x6B2906CC, 0xCBCCCCAC, 0x6BACCCCB, 0x0104072B, 0x864626CC, 0xCCC9C7C6, 0x2B4C8AC8, 
0x2627292A, 0x5B5C58CC, 0x5C5C5B5C, 0x94665A5B, 0x6393B3C3, 0xCCC9750C, 0x6CACCCCC, 0x081A2B3B, 
0x02020304, 0x020602CC, 0x87647030, 0xCCCCCCAB, 0x6084B8CC, 0x0C2C09CC, 0x0A0B0B0C, 0xC88A4B0B, 
0x70B0C1C5, 0xC0C0800C, 0xC1C0C0C0, 0x074886C3, 0x80806023, 0xC0B07000, 0x9CCCC8C4, 0xA87C7C5C, 
0x96BAC6C4, 0x50905000, 0xB0703010, 0xC0C0C080, 0x105090B0, 0x151915C0, 0x1B1A1919, 0x1B4C2C1C, 
0x15161A1C, 0x70400000, 0xC6C6B5A1, 0xBCCCCBCA, 0x587BAAAC, 0xCBCB8700, 0x574383C7, 0xCCCCCC99, 
0x073477BB, 0x07030010, 0x0603070B, 0x0C0C0C0A, 0x070B0A0C, 0x405010C0, 0x40403070, 0x00307060, 
0x00000000, 0xB69656CC, 0x96C6C6C6, 0xB6763656, 0x364686C6, 0x9CBC7802, 0x5B4C8CCC, 0xCACACB9B, 
0x70B4C6C8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x5C6C3800, 0x9AA96C3C, 0xB6C3C7CA, 
0x03073A7A, 0x491817C5, 0x3B1B4B8A, 0xC99A5B1C, 0x4486C7C8, 0x0408040C, 0x00000003, 0x0C0B0703, 
0x080A0C0C, 0x1C0C0800, 0xBBAB6C4C, 0xBBC9CBC8, 0x3377B7BA, 0x80C080C0, 0xC0C0A060, 0x5080C0C0, 
0x10503070, 0x0602000C, 0x0C0C080A, 0x04080C0C, 0x08040000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC88646CC, 0x86C6C8CC, 0x88ACA8C6, 0x4687C8B7, 0xC2C181CC, 0x98866A86, 0x8C5C98B6, 
0x0104384C, 0x05010000, 0x0C0C0C09, 0x080C0C0C, 0x08040004, 0xB07030C0, 0x90905070, 0x90C0C0C0, 
0x30609060, 0x00000000, 0x80400000, 0xA0C0C0C0, 0x70304060, 0x05040302, 0x09080706, 0x0C0C0B0A, 
0x09090A0B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0404040C, 0x04040404, 0x04040404, 
0x04040404, 0x6C3834CC, 0xC6C9CCAA, 0x8AB89CCA, 0xC3C3C3C6, 0x6C6966CC, 0xC9C9AA6C, 0x87666687, 
0xC6C6C7B9, 0x0805030C, 0x0C0A090C, 0x0C0B0A0C, 0x070A0B0C, 0xCCAC88C0, 0x8784C78B, 0xCC8CCCAB, 
0x70737589, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x0C0C0A00, 0x4A0C0C0C, 0xC0C3C686, 0x00004080, 0x080A0600, 0x0C0C0A08, 0x08080C0C, 
0x02010408, 0x05060200, 0x0B090503, 0x080A0C0C, 0x00030709, 0x00010000, 0x71300100, 0xBCCCC8A4, 
0x8CACBCCC, 0xA09080C0, 0xA0704090, 0xC0C0C0B0, 0x80B0C0C0, 0x1707040C, 0xBCCB9959, 0x9CCCCCCC, 
0x4143768A, 0x89C584CC, 0x786C8C68, 0xCCCCBC9C, 0xC4C8CCCC, 0xC9A663CC, 0xAA6999AA, 0xCCCCCCCC, 
0x2063A7BB, 0x8B8C88CC, 0x8BC98C8A, 0xCC8CCCC8, 0x8BA886C8, 0x0C0C0800, 0x0B0C0C0C, 0x07090A0C, 
0x03050505, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC4C383CC, 0x9CCCCBC7, 0x88BCBCCC, 
0x537383C4, 0x0303030C, 0x03030303, 0x0A060303, 0x0C0C0C0C, 0x77B672C0, 0xAB6B2737, 0x9CCCCCAC, 
0x6B5C8CCC, 0xB57342CC, 0xCCCCCCC8, 0x49498ACB, 0x31474959, 0x0505050C, 0x0A060505, 0x090B0C0C, 
0x09090909, 0x4A0C08CC, 0x8CBCBB8C, 0xC8C9CACC, 0x42769ACC, 0x6C6C6ACC, 0x98CB8A6C, 0x95979897, 
0x93939394, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC99B58CC, 0xAA9B6BAA, 0x83C7CBCB, 
0x13101040, 0x3C48080C, 0xBCA9885B, 0xACBCCCCC, 0x483C588C, 0x876B67CC, 0xCCBC89BA, 0x9CCC9CCC, 
0x68687ABB, 0x79BA76C0, 0x6A1C1A3C, 0xCCBCAB8A, 0xC0C0C4C9, 0x00000000, 0x09050100, 0x0C0C0C0B, 
0x0B0B0B0C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x804000C0, 0x604080C0, 0xA080C0A0, 
0x70B07060, 0x4C18040C, 0xCACCCC8C, 0x03034386, 0x03030303, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xCCC98500, 0xBCACACCC, 0x75989CAC, 0x00004061, 0x8646060C, 0xCCCBC9C9, 0x498CC9CC, 
0x56968646, 0xC0A060C0, 0x8080C0C0, 0xA0C0C0C0, 0x00204090, 0x4B4B47C1, 0x9C9C5C4B, 0xBBCCCCCC, 
0xC3C78A7A, 0xC0B07000, 0xC0A0B0C0, 0x70B0A0B0, 0x00000030, 0x306030C0, 0xC0804020, 0xC0B0B0A0, 
0x3070B0C0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80C080C0, 0x70B0C0C0, 0xC0C0C080, 
0x303060A0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xAC8866CC, 0xCCCAC8B8, 0xC8CCCCCC, 
0x5A7C9CBC, 0x608040CC, 0xC6C7A494, 0x77B6C9CA, 0x00001033, 0xAB8C48CC, 0xCCBCB8BC, 0xACC8CCCC, 
0x080C386C, 0xC6C686CC, 0x9C88C6C6, 0xC78ACCBC, 0x384C79B7, 0xB6B793BC, 0x6A8795A4, 0x1C1C4C3C, 
0x00000408, 0x125612CC, 0x84400000, 0xCCCCBCC8, 0x0012468A, 0x0200000C, 0x08080806, 0x0C0C0C0C, 
0x05090C0C, 0x0906030C, 0x0B0C0C0C, 0x05090B0C, 0x04030203, 0x0B0703CC, 0x390C0C08, 0x989BBC7C, 
0x7374877B, 0x95B995CC, 0xC9ABB9A5, 0xACCCCCCC, 0x96C89BBA, 0x677666CC, 0x9C78676B, 0xCCCC9CCC, 
0xA6C8CCCC, 0x0A06020C, 0x09080708, 0x0C0C0C0C, 0x090B0C0C, 0x969696CC, 0xCBBC9C98, 0xA9B9CCCC, 
0x969A9CAC, 0xC78360CC, 0xCCCCCCCB, 0x8A8CBCBC, 0x646485B8, 0x463636CC, 0x988CAC78, 0xCCCCCCCA, 
0x96B6C6C8, 0x502000C0, 0xB0C09090, 0xB0B0B0B0, 0xB0C0C0C0, 0xC48362CC, 0xC8B7B6C5, 0xACCBCAC9, 
0x696A6A7B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xA3C793CC, 0x9AC995B0, 0xCCCCAC8C, 
0xC0B1B5C9, 0xB87646CC, 0xC9C6A87C, 0x29598BCC, 0x29292929, 0x783410CC, 0xAAB9AAAC, 0xCCCCCCCC, 
0x306387BB, 0xCAC7840A, 0xCCCCCCCC, 0x997999CA, 0x3979B989, 0x4A8C48CC, 0x98988B1C, 0xBCCCCCCA, 
0xA5B8CCCC, 0x905030C0, 0xB0C0C0C0, 0x20204080, 0x20302020, 0x70905000, 0xC0C0C0A0, 0x70B0C0C0, 
0x00001040, 0x3A0C080C, 0xACCCBC8C, 0xB8CACBCA, 0x89B685A7, 0xC8B5750C, 0xB5C5C7CA, 0x9CCCCAC6, 
0x0C0C3C6C, 0x8450200C, 0xCCAC7B58, 0x99CBCBCC, 0x30001155, 0x0505050C, 0x08050505, 0x0C0C0C0C, 
0x0B0A0608, 0x2C1A06C0, 0x579B5C3C, 0xC4C88C4A, 0xA0C0C0C0, 0xC8B480C0, 0xCCC8C5C4, 0xB4A8CCCC, 
0x50606080, 0x0805020C, 0x0C0B080A, 0x0C0C0C0C, 0x0C080C09, 0xB7A666C6, 0xC8B7B787, 0xAC8BCAC9, 
0x3A3B4C8C, 0xCBC887CC, 0xCCCC8CCA, 0x89CCC9CC, 0x87C787C7, 0x060A06CC, 0x4C0C0806, 0x89ACAC6C, 
0x09090949, 0xC2C282CC, 0x9CC9B5C2, 0x8ACCCC8C, 0x63676B6A, 0x101010C0, 0xC0905010, 0x4080C0C0, 
0x10101010, 0x4242020C, 0x89420202, 0x8ACACAC9, 0x0909094A, 0xC7CA860C, 0xBCBCCCCA, 0x769A9CAC, 
0x02060636, 0x080C080C, 0x0B0C0C0C, 0x07080C0A, 0x04040806, 0xCCCC88C0, 0xACCCC8CA, 0x262A3C7C, 
0x20202022, 0x765524CC, 0xC8C8B897, 0x4C8CBCCB, 0x080C0C1C, 0xC6BA9680, 0x9CBAC6C2, 0x485C7C8C, 
0x10102334, 0x0808040C, 0x7965692C, 0xBCCCCCBC, 0x0909397B, 0xB798550C, 0xC6C4C7CB, 0xACBCCAC9, 
0x14274B7C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x09060400, 0x0C0C0C0C, 
0x06080B0C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x2A2723C0, 0x9C5C3C2B, 0x84B8CCCC, 
0x20202040, 0x10000000, 0xC0C09050, 0xC0C0C080, 0x004080C0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x585C58CC, 0xCCCC8C58, 0x578ABCCC, 0x55555556, 0xB87734CC, 0x8C4C4B8A, 0xCCCCCCBC, 
0x105497AB, 0x995726CC, 0x6C5C7CBB, 0xC6C8CBAB, 0x16174786, 0x206320C0, 0x74300000, 0xCCCCCCB8, 
0x687689CB, 0x155210C0, 0x99150302, 0xCCCCCC9C, 0x9090B4C8, 0x170300CC, 0xCCCC8C58, 0x2C68ACCC, 
0x00000408, 0x708070C0, 0xB0C08080, 0xC0C0C0C0, 0xC0C0C0C0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xBBCBCBCB, 0x1B2B6B8B, 0x0B1B3B3B, 0x9B5B1B0B, 0x6BABCBCB, 0x0B1B1B2B, 0x6B3B2B1B, 
0xCBCBAB8B, 0xB8C6C5C4, 0x1C2C5C8B, 0x090C1C1C, 0x80501205, 0x5080A0B0, 0x01000010, 0x01000102, 
0xB3813112, 0xC1C1C0C0, 0xB1B0C0C0, 0xB8B5C2C1, 0xBCBCBABA, 0xCCCCBCBC, 0xCCCCCCCC, 0xCACBCCCC, 
0xC3C5C7C8, 0xCCCCCCCC, 0xAACBCBCB, 0x0B3B6A8A, 0x0C0C0C0B, 0x0C0C0C0C, 0x2A1B0B0B, 0x9B7B6A3A, 
0xCCCCCCBC, 0xBCCCCCCC, 0x0B1C3B8C, 0x42230609, 0x83533333, 0x90B0A192, 0x01103050, 0x02010001, 
0xBB8A4704, 0x1C0C0B0B, 0xCAAB8C4C, 0x81A1C3C7, 0x04031241, 0x51311306, 0xC1C1A181, 0x6191B1C2, 
0x04021132, 0xABCAC9C8, 0x193A6C9C, 0x10121416, 0xA2705030, 0x8B9BC8C6, 0x48496B7C, 0x7C5B4A38, 
0xC8CABB9C, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x02010000, 0x0C0B0905, 0x080B0C0C, 
0x00000104, 0x9CACCCCC, 0x4B3B5C7C, 0x6657494B, 0x94745565, 0x6474A3B3, 0x75656565, 0x6B696876, 
0xBC9C7C6B, 0xC0C0C1C1, 0xB0B0C0C0, 0x30506090, 0x03010010, 0x0C0B1A17, 0x0B0B0C0C, 0x23151809, 
0xA1816243, 0xBCCCCCCC, 0x1B2B5C7C, 0x16183A3A, 0x93542415, 0x52A2C3C3, 0x12111122, 0x54332312, 
0xBBB98776, 0xBCCCCBCA, 0x1B1B3B7B, 0x0A1A3B3B, 0xB9996A2A, 0x59A9CAC9, 0x09191929, 0x69392919, 
0xCAC9A989, 0xB5B9BCAC, 0xC1C2C4C3, 0xA0A0C0C2, 0x98A896A2, 0x43566677, 0x54554231, 0x38464455, 
0x7C5C4A38, 0xC0C0C0B0, 0x90C0C0C0, 0x909090A0, 0xC4C1A090, 0xACABBAB7, 0xBCBCACAC, 0xA4B7BABB, 
0xB0B0B1B2, 0xCCBCBCBC, 0xBABABBBC, 0xAAAAA9AA, 0xACACABAA, 0xA3A5A8AA, 0xA1A0A0A1, 0xA5A3A1A0, 
0xBBAAA8A7, 0x00000000, 0x10101000, 0x00001010, 0x00000000, 0x14010000, 0xCCBC7B38, 0x489ACCCC, 
0x00000406, 0x05060606, 0x04050505, 0x04040404, 0x06050504, 0x0A090707, 0x0C0C0C0B, 0x0A0A090B, 
0x0709080A, 0xC1C1C1C3, 0x70A0C0C0, 0x10203040, 0x00000000, 0x02010010, 0x0C0A0704, 0x1C0C0C0C, 
0xC6A8896B, 0xC0C0B0B1, 0x6090B0C0, 0x00001030, 0x11100000, 0x08061412, 0x0C0C0C0A, 0x0A0C0C0C, 
0x50120407, 0x52322314, 0x44535152, 0x091A2A37, 0x2C1A0909, 0xBCAC6C5C, 0xCACCCCBC, 0x83A3B6C7, 
0x34435362, 0x204070B0, 0x00000000, 0x00000000, 0x00000000, 0x17050201, 0xAC8C5C3A, 0xB8BBACBC, 
0xB0C2C5C6, 0x8CACBCCC, 0x2A3B5B6C, 0x00021528, 0x00010000, 0x20100000, 0xB0907050, 0xC1C0C0C0, 
0xBBB9B5C2, 0xC0C1C1C1, 0xC1C0C0C0, 0xB0B0B1B2, 0x426180B0, 0x0A071423, 0x1C0C0C1B, 0x33160A1B, 
0xB1A28251, 0xACACAC9C, 0xBBBCACAC, 0xB0B1B6BA, 0xC1C1C0C0, 0xB1C0B0B1, 0xC1C1C0B0, 0xC1C1C1C1, 
0xA7B5C3C2, 0x06040509, 0x06050605, 0x02040606, 0x02010201, 0x85441303, 0xCCC9C7A7, 0x3C5C8CAC, 
0x080B0C1C, 0x6C8CAACC, 0x0A1B2B4C, 0x05051608, 0x04060907, 0x14040505, 0xA4947434, 0xC4C4B4B4, 
0xB6B5B4B4, 0x0C0C0B09, 0x081A0A0C, 0x180B0A18, 0x87593A18, 0xC5C5C5B5, 0x6585B5C5, 0x15152535, 
0x06060716, 0xC7C6C7C9, 0xC6C7C8C8, 0x8696B6B6, 0x49475666, 0x0A092A29, 0x0B0C0A0A, 0x4B2B3B1B, 
0xB7886A6B, 0x8C9C7C7C, 0x68797C9C, 0x02226478, 0x02020202, 0x69757232, 0xB2828366, 0xCACAC6C3, 
0xAAB8A5B8, 0x1C0C0B09, 0x8A7B6C3C, 0x30517286, 0x00001030, 0x40302010, 0xC0B09070, 0x80B0C0C0, 
0x03012050, 0x90B0C0C0, 0x60606080, 0x10103040, 0x00101010, 0x02030200, 0x0C1A0604, 0x1B1C0C0C, 
0xB0824629, 0xC0C0C0C0, 0x8080A0B0, 0x30305070, 0x90402050, 0x50A0C0C0, 0x00101010, 0x60302010, 
0xC0C0A080, 0xC0C0C0A0, 0x80A0B0C0, 0x10305060, 0x00000010, 0x00000000, 0x00000000, 0x00000000, 
0x60200000, 0xCCCCCCAB, 0xB2C6BABB, 0x20506080, 0x20502010, 0x01010000, 0x00000001, 0x30100000, 
0x87927160, 0xCCCCCCCC, 0x6A9ABBDB, 0xCACA9A69, 0xC8C8C9CA, 0x03023386, 0x05040505, 0x0C0A0706, 
0xAC0C0C0C, 0xC0A090B0, 0xC0B0B0B0, 0x407080A0, 0x20000010, 0x00002050, 0x00000000, 0x40201010, 
0x50305070, 0xC1C1C2C4, 0x80B0C0C0, 0x00102050, 0x03120100, 0x07070705, 0x2C1A0908, 0x3B3B4B3C, 
0x9777694A, 0x6B8BABBC, 0x081A2B5C, 0x03030507, 0x00020606, 0x02000000, 0x04050706, 0xAC7C4825, 
0xBACBCBBB, 0xCBCBAB8C, 0xACBCCCCC, 0x6768697B, 0x10214466, 0x00000000, 0x00000000, 0x02010000, 
0x3A080503, 0x2464A4B8, 0x04040404, 0x04040404, 0x04040404, 0xA5855514, 0xCACAC8C4, 0xBCBCBBCB, 
0xB5C8BACB, 0x0B0C0C3C, 0x01030609, 0x01000001, 0x37150201, 0xA5968869, 0xC0C0C0B2, 0xB1C1C0C0, 
0x6B8995A3, 0x234689BC, 0x00001011, 0x00101000, 0x00000000, 0x30301000, 0xC1B18150, 0xB2B0C0C0, 
0xACABA9A6, 0xC9C9C8A9, 0xC9C8C7C9, 0x3C8BBBCA, 0x0C0C0C0C, 0x092B1C0C, 0x03040507, 0x12222313, 
0x45240304, 0xB4B4B2B5, 0xB4B5B5B6, 0xB1B1B1B3, 0xB2B1B1B1, 0xC9B8B4B3, 0xCCBCCCCB, 0xB8BACBBC, 
0xC5B5B5B6, 0x9B9C9C9C, 0x93A49698, 0x909193A3, 0x9B979492, 0x959A9C9C, 0xC0B1A191, 0xC8C5C2C1, 
0x9C9CACBA, 0x2B2A2948, 0x2B2A2A2B, 0x2B2C2C2B, 0x2527292A, 0x30202022, 0xB0906040, 0x90A0B0B0, 
0x33416080, 0x7C9CBCCB, 0x090B2C6C, 0x05060707, 0x04060605, 0x80301002, 0x90A0B0B0, 0x90A0B090, 
0x9491B0A0, 0xCBCCCCCC, 0x32326498, 0x32323232, 0xA8856433, 0x65A6A8BA, 0x32323233, 0x32323232, 
0xCAB86432, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0B0A0502, 0x070B0C0C, 
0x01010103, 0xA0A1A1B2, 0xA0C0C0A0, 0xB09090B0, 0xA0B0C0A0, 0x17153280, 0x1C2C3B39, 0x3B3C5C3C, 
0x6456786A, 0xBBCCCCCC, 0x95A7A9BB, 0x94959393, 0x94959494, 0x93949394, 0xA4A49393, 0xA5A4A4A4, 
0xCBBAB8A6, 0xC1B2A4C8, 0x617181A1, 0x50505060, 0x51505150, 0x68775553, 0x8B8B8A69, 0xBCBC9C9C, 
0xC9CACBCC, 0x92522203, 0xC2C3C4C3, 0x324272B2, 0x14334232, 0x0C0C0C09, 0x08090B0C, 0x02020305, 
0x02020202, 0x0104080A, 0x00000000, 0x00000000, 0x01010100, 0x00000101, 0x04010000, 0x0C0B0906, 
0x0C0C0C0C, 0x9CBCCCCC, 0x1B3B6C7C, 0x07082A2A, 0x78572717, 0x68789878, 0xC8A88867, 0xC8C9C8C8, 
0xCBC9B9C9, 0x0B0C0C0B, 0x0B0C0C0A, 0x0A0A0B0C, 0x01010508, 0x36030101, 0xCBCAA775, 0x175AABCB, 
0x09070504, 0x1214275A, 0x00000000, 0x00000000, 0x00000000, 0x50301000, 0xC8C4A170, 0xCCCCCCCB, 
0x7B7C8CAC, 0xCBCBCBCC, 0xCBCCCBCB, 0xC3C5C8CA, 0x406181A2, 0x35222111, 0x4A393836, 0x5C4C4B4A, 
0xCBAB8B6B, 0x8B8B8B8A, 0x8B8B8B8B, 0x86898A8B, 0x80808184, 0x90807070, 0xC0C0C0A0, 0x90B0B0C0, 
0x85828190, 0xCBCCBCAC, 0xC7C8C9CA, 0x194877A7, 0x0B0B0B0A, 0x02040709, 0x01000001, 0x0B0A0603, 
0x7C2C0C0C, 0xC6AB9CCC, 0xC4C4C4C4, 0x24345484, 0x04242434, 0x0B070404, 0x0C0C0C0C, 0x14060B0C, 
0x3B171424, 0x10100316, 0xC0906040, 0xA0C0C0C0, 0x11204080, 0x08050302, 0x0C0C0C0B, 0x0A0B0B0C, 
0x080A0A0A, 0x01010101, 0x01010101, 0x01010101, 0x01010101, 0x06040201, 0x0C0C0A09, 0x070A0B0C, 
0x03050506, 0x0B0B0B0C, 0x0B0B0B0C, 0x02030609, 0x01000001, 0x03020201, 0x03020303, 0x05040403, 
0x0B090806, 0x9A99A7A4, 0x9C9C9C9B, 0xA5A9AB9C, 0xC0C0B0B2, 0xA0B0B0C0, 0xA0A090A0, 0x90909090, 
0x92919090, 0xA3846659, 0xC2C3B4B3, 0xA0B1C2C1, 0x10306080, 0x07060402, 0x0C0C0C0B, 0x0A0B0C0C, 
0x28170708, 0x90603012, 0xB0C0C0C1, 0x10215080, 0x01000000, 0x0A080503, 0x0C0C0C0B, 0x080A0B0C, 
0x01020305, 0x25391BCC, 0x00103122, 0x00000000, 0x05040200, 0x50311327, 0xC0C0C080, 0xA7C3C1C0, 
0x1C2C6A99, 0x04040407, 0x04050504, 0x04040404, 0x05040404, 0x09080705, 0x0B0B0A0A, 0x070A0B0B, 
0x05040405, 0x0B0A0A0C, 0x0B0C0C0C, 0x0A0A0B0B, 0x0B0C0B0B, 0x0A0B0B0B, 0x0B0C0C0B, 0x0C0B0B0B, 
0x0C0C0B0C, 0x11113171, 0x00010111, 0x02020101, 0x1A080603, 0x5C4C2C0B, 0xA99B8C7C, 0xC4C5C6A8, 
0xA1B2C3C4, 0xC6CACCCC, 0x6080A1C3, 0xB0505050, 0xC0C0C0C0, 0xB3C2C1C0, 0x4848B6B5, 0x8A694848, 
0xBCBCACAB, 0x18070303, 0x4C3C4B3A, 0xBCBCAC7C, 0xC8C9CACA, 0x003153A5, 0x02010000, 0x00000102, 
0x00010000, 0xBABBCBCC, 0x255677A8, 0x02020113, 0x01010101, 0x10000001, 0x73311110, 0xACABA996, 
0xBBBCACAC, 0xC2C2C2C6, 0xA2B2C2B2, 0x32323262, 0x22223242, 0x99582624, 0x4C3C5B8A, 0x6436395B, 
0xA2B2A272, 0x22120222, 0xB0A08151, 0xC0C0C0C0, 0xA0A0B0B0, 0x18365482, 0x0C0C0B09, 0x090B0C0C, 
0x12140608, 0x9B9B9CAC, 0x98989899, 0x94939597, 0x99959799, 0xB7A9AC9C, 0xC7CABAB7, 0x99A9B6B5, 
0x98989998, 0x7C7C5C4B, 0xA7999B8C, 0x27375696, 0x06060616, 0x27160605, 0xC6967747, 0xA5C6C6C7, 
0x4A596796, 0xA0A1C0C1, 0xC0C0C0B0, 0xA0B0C0C0, 0x12305060, 0x0C0C1B17, 0x070B0C0C, 0x60604114, 
0xC0B09090, 0x20205070, 0x20202020, 0x20202020, 0x50303020, 0xB0B0A080, 0xC0C0C0C0, 0xB0B0C0C0, 
0x7080A0B0, 0x90C0C0C0, 0x10001040, 0x01010110, 0x78360403, 0x3C5C8B9A, 0x0C0C0C0C, 0x080A0C0C, 
0xC0805436, 0x1B1C1C3C, 0x3225171A, 0x10203040, 0x39372310, 0x66594C4C, 0xC0B09183, 0x97B5C3C1, 
0x5C5C6B8A, 0xA3927346, 0xC3C3C2B2, 0x145494B3, 0x0B090604, 0x0C0C0C0C, 0x0A0C0C0C, 0x06070709, 
0x26160405, 0x1C1C2C4C, 0x00000318, 0x02010200, 0x0A071201, 0x17080B0C, 0xC9B78646, 0xA2B6C9C8, 
0x4B375281, 0x5C6B6B6C, 0x2B3C2C3C, 0x02030609, 0x10010101, 0xC0C0A040, 0xC4C2C0C0, 0x7A79A7C6, 
0x1B0B2B6B, 0x5C8CABB9, 0x3C2C2C3C, 0x191C1C2C, 0x11131416, 0x10111212, 0x47252321, 0xC2C49688, 
0xC5C1C0C0, 0xBBBCBCCC, 0x6B8BABBB, 0x0B0B1B3B, 0x1C0C0B0B, 0x0406090B, 0x10001012, 0x71503020, 
0xC9B6A392, 0x8C7C7C8C, 0x4C4C6C8C, 0x9597896B, 0xC0C0A292, 0xC0C0C0C0, 0x315170B0, 0x13022131, 
0x7B5A3614, 0x6C5C7CAC, 0x8778899A, 0x07376787, 0x07070707, 0x18080807, 0xC8B89847, 0xB8C8C7C7, 
0x7B8AA9A8, 0xCBCBCACC, 0xBBCBCACA, 0x2525589B, 0x06181717, 0x01020606, 0x00000000, 0x60301000, 
0xCAA79280, 0xC3A393C5, 0xC3C3C3C3, 0x031373A3, 0x04230303, 0x05040505, 0x0C0C0B09, 0x1406090A, 
0x43132344, 0x1A2B6CAC, 0x1222150A, 0x02020202, 0x08030202, 0x181A0C0A, 0x26252426, 0x92523233, 
0xCAC9C5B2, 0xBBCBCCCC, 0x8597A9BA, 0x15244465, 0x0A1B0A16, 0x10010508, 0x50302010, 0xC0A09080, 
0xC9C5C2C0, 0xC0C0C0C0, 0xA1C0C0C0, 0x39548292, 0x4C5C3C3C, 0x6255493B, 0xB0908071, 0xC0C0C0B0, 
0xC0C0C0C0, 0xA0C0C0C0, 0x00003060, 0x70000000, 0xC7B5B3A1, 0x4CCCCCCA, 0x1A0C0C1C, 0x71221538, 
0xC0C0C080, 0x92A3A6BC, 0x92929292, 0x92929292, 0x92929292, 0x9AA8A593, 0x9A9B9B99, 0xB6A9ACAC, 
0xCCCAB7B6, 0x0A1B1C2B, 0x1819190A, 0x18181919, 0x88684829, 0xB8B8A8A8, 0xC9C9B9B8, 0x98A9B9C8, 
0x49788898, 0x96B6B5C7, 0xC3A37565, 0x8090A2C2, 0x71708080, 0x72707080, 0x6C6B5A66, 0x7B8B8C7C, 
0xA6977869, 0x0B0C0C0C, 0x03050609, 0x02010102, 0x07050403, 0x0C0C0B09, 0x0B0B0B0C, 0x090B0C0B, 
0x0C090708, 0xA0A0B0C0, 0x8090A0A0, 0x70708080, 0x80707080, 0x90808090, 0xB0A08080, 0xB0B0B0B0, 
0xA0A0A0B0, 0xA0B0B0B0, 0x90909090, 0xA2A1A090, 0xAAA8A6B4, 0xACACACAB, 0xCACBBCBC, 0xBACACACA, 
0xB1B5B6B8, 0xBC8C7C7C, 0xCBCCCBAB, 0x83B4C6C9, 0x72727272, 0x72727272, 0x72727272, 0x75737272, 
0x7C7B7977, 0x7B7A7A8A, 0x7A7B7B7B, 0x77787A79, 0x77787978, 0x77777777, 0xA7978777, 0xB7C7C7C8, 
0xA7A7A7B8, 0xB0A08060, 0xC0C0C0C0, 0x83A1B0C0, 0x00002161, 0x03010000, 0x0C0C0A07, 0x03080B0C, 
0x20100000, 0x01020416, 0x00010202, 0x00000000, 0x00000000, 0x01000000, 0xA8764422, 0xCACACAB9, 
0x497BACBB, 0x4B2B2A3B, 0xCBBC9B7C, 0xABCCCBCB, 0x1547688A, 0x00000205, 0x10000000, 0x01011120, 
0x18070502, 0xCCCBBCCC, 0x9ABBCCCC, 0x01143869, 0x01010111, 0x01011101, 0x17040101, 0x18141234, 
0xB7886A49, 0xACACBA9C, 0xC9BCCCCC, 0x20627699, 0x53140200, 0x101050A0, 0x70727532, 0xA0909070, 
0x84413060, 0xC7C8C9C8, 0x2B6A98B7, 0x0B0C0C1C, 0x0A090909, 0x07071709, 0x07070707, 0x27271707, 
0x88574747, 0xB0C0B0B0, 0xC0C0C0B0, 0x90B0B0C0, 0x10205070, 0x17141100, 0x0C0C0C0A, 0x07090B0C, 
0x40100104, 0x526393B3, 0x62626151, 0x42415161, 0x5B585654, 0x5B5C6B6B, 0x77686859, 0xB6A59587, 
0xC1C1A1A3, 0xBCCBCCCC, 0x1A2B4C8C, 0x0527393B, 0x96452617, 0x51A1C4C8, 0x01111141, 0x61312111, 
0xC9C6A482, 0xCCCCCCCC, 0x88B9CBCB, 0x14325367, 0x10100003, 0x22101010, 0x52525252, 0x62625452, 
0xBCAC9673, 0x97B8BACB, 0x30315385, 0x10102020, 0x10101010, 0x10202010, 0x18141110, 0x9C6C3C3B, 
0xCCBCBC9C, 0x8AA8A4C2, 0x3C8A9777, 0x1A0C0C0C, 0x92926245, 0x44426292, 0x94879978, 0xA2829282, 
0xC2C29282, 0xCBCBCBCB, 0xB5B7B9CA, 0x647393A5, 0x44544443, 0x48474645, 0x6B5C6A59, 0x7B7A7B6B, 
0xAB9B7B7B, 0x0A0B0C0C, 0x09090808, 0x0808080A, 0x09080808, 0x0A0A0C0B, 0xCCBB9C4A, 0x7BBCCBCC, 
0x0C1C0B2B, 0xA0B0C0C0, 0x00104090, 0x40100000, 0x00003080, 0x00000000, 0x00000000, 0x00000000, 
0xC0904010, 0x2B3C4C8B, 0x10020619, 0x10304020, 0x00000000, 0x60210100, 0xC0C0C0A0, 0x71A1C1C0, 
0x69766362, 0x09090918, 0x0C0C0A0B, 0x09090B0C, 0xA9693B2B, 0xA7C7C8CA, 0x67574767, 0x97A77767, 
0x47779787, 0x07070709, 0x07080807, 0x05050607, 0x08080807, 0x07080808, 0x0C0B0907, 0x0B0B0C0C, 
0x0808090A, 0xCCCCCBC8, 0xACBBCBCB, 0x8A9A8A9B, 0xC6C5B698, 0x307082B5, 0x11001010, 0x81603123, 
0xC5C2B0A0, 0xC4C7CACC, 0x92B1B1C2, 0x52526282, 0x21313232, 0x22212121, 0x47363623, 0x8B8A6948, 
0xCBBCBC9C, 0x736688BB, 0x10409091, 0x00000000, 0x01000000, 0x76340201, 0xAB7B7967, 0xCCCCCBCC, 
0xCBCBCCCC, 0xACACACAC, 0xC6CAAB9C, 0xB0C0C1C2, 0xA0A0A0A0, 0x90909090, 0x90909090, 0x90909090, 
0x9A979391, 0xBBCCCCCB, 0x33344669, 0x32323232, 0x92423232, 0x65A4B3C2, 0x32323233, 0x72433232, 
0xC7C5B392, 0x3B4B6A8A, 0x2A2B2C2C, 0x14151618, 0x24242414, 0x44342424, 0xB4B4A474, 0xB4C4C4C4, 
0x8696A5B4, 0x05030202, 0x0B0B0907, 0x0C0C0C0C, 0x0A0A0B0B, 0x43240709, 0xC1C19162, 0xB1B1C1C1, 
0x11417191, 0xC1C2C5AA, 0x9090A0B0, 0x50708080, 0x80504050, 0xB0A0B0A0, 0xC0C0C0C0, 0x80A0B0C0, 
0x93717060, 0x05060809, 0x05050505, 0x05050505, 0x08070605, 0x0C0C0C0A, 0x0B0B0C0C, 0x0506070A, 
0x08080605, 0x4A4A4B5B, 0x65585A4A, 0xA4848464, 0xB6C4C4A4, 0xABACB9B9, 0x8698A8AA, 0x39486775, 
0x3B4B5A48, 0x1C1C1C2C, 0x1011151A, 0x10101010, 0x71402010, 0xC1C5CAB5, 0x205090B0, 0x5A3A2511, 
0x3C6C6A6B, 0xABBBCCCB, 0x6B4A7BAB, 0xA8ACAC8B, 0x31314174, 0x43323231, 0x3A599573, 0xA8A97B4C, 
0xC6B5A6C8, 0x1947774C, 0x89491A1B, 0x33528457, 0x33728355, 0x20101011, 0xB5928040, 0xB6C9CAC7, 
0x15144684, 0x8B7B5A99, 0xBACACBBA, 0x4A5B6A8B, 0x3B4B3B3A, 0x61232638, 0xC0C0B080, 0xB0C0C0C0, 
0x547281B0, 0x0906050A, 0x0A0B0C0B, 0x02010408, 0x06060604, 0x00000104, 0x00000000, 0x00000000, 
0x02000000, 0xC0C0B0B1, 0xC9C7C7C3, 0xB2C7C9C8, 0x708090A0, 0x7B667361, 0x6C7C7C6C, 0x6C6C6C6B, 
0xB498887B, 0x6A4C3B2C, 0xA4849677, 0x1A295886, 0x28191B1B, 0x4A494838, 0xB2B27457, 0x5693B2C2, 
0x1C1A1937, 0x26141217, 0x7A9C9C6B, 0xC2A29375, 0xA2B2C2C2, 0x62425272, 0x12322232, 0x32121212, 
0x42626262, 0x575B7CCC, 0x41414255, 0x51414141, 0xC2B1B181, 0x8283A3C3, 0xA18181A1, 0xC3C2C1C1, 
0xC9C5C3C3, 0x5B5B6A8B, 0x75686A5A, 0x25336182, 0x27262727, 0x50302023, 0xC0C0A070, 0xB5C2C0C0, 
0x7C7B9AA8, 0xB0A08080, 0xC0C0C0C0, 0xC0C0C0C0, 0xA0A0C0C0, 0x40608090, 0x00001030, 0x00000000, 
0x20100000, 0x5C5C5CAC, 0x06081A3B, 0x03040506, 0x32120303, 0xC2B2A171, 0xCAC7C4C2, 0xACACBCCC, 
0x8C9B8B8C, 0x7A7A9B9C, 0xB6B89879, 0x80B0C1B3, 0x20304060, 0x21212020, 0x26252322, 0x29292826, 
0x5B3B2A2A, 0xA4A6A8A5, 0x4B4674A1, 0x54485B5C, 0xC0C0B080, 0x454866B3, 0x4B474644, 0x4A4C4C4C, 
0x95644647, 0x05020001, 0x01030706, 0x04020000, 0x0C0B0907, 0x0C0C0C0C, 0x0204080C, 0x00020302, 
0x00000000, 0xBCBBB9C7, 0xB6C9B9BA, 0x526293B4, 0x5B3A3864, 0xBBAC9C7C, 0xBABBBBBC, 0xC1C4B9BA, 
0xC4C3C2C1, 0x10105070, 0x00100000, 0xC0804010, 0xC0C0C0C0, 0xC0C0C0C0, 0xC0C0C0C0, 0xA0C0C0C0, 
0x70706070, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x201000C0, 0x20201010, 0xB0B07060, 0xC0C0C0B0, 0xA0C0C0C0, 0x40608090, 0x00000010, 
0x00000000, 0x0A0B0C0C, 0x08080908, 0x00000105, 0x04020000, 0x09090A08, 0x06060709, 0x06040203, 
0x0C0C0A0A, 0xC0B0A0B0, 0xA0B0B0B0, 0x60708090, 0x00102040, 0x70707070, 0x00707070, 0x40302010, 
0x90806050, 0x80605050, 0xC0C0B0A0, 0x9090A0B0, 0x40608090, 0x30303040, 0x40504040, 0x30404040, 
0x40403030, 0x0C0C0C0C, 0x0405080C, 0x00000001, 0x00000000, 0x00000000, 0x02000000, 0x08090A07, 
0x0C0A0A09, 0x000000C0, 0x00000000, 0x40201000, 0xB0A08060, 0xC0C0C0C0, 0xC0C0C0C0, 0x90A0B0C0, 
0x20406080, 0x06030109, 0x0A0B0B08, 0x0B0B0C0B, 0x08090A0B, 0x00010305, 0x00000000, 0x00000000, 
0x00000000, 0x445556AB, 0x72A39353, 0x52825152, 0x54836342, 0xCAA86735, 0xCBCBCCCB, 0xBCBCACAB, 
0x2B4B8CAC, 0x182745A9, 0x07080808, 0x00020505, 0xA8441100, 0xC8C5C1B3, 0x6C6C9CB9, 0x4C4C5C7C, 
0x6A5A4B4C, 0x59566576, 0xCCBBAB7A, 0x4C7BBCBC, 0x5A5B4C4B, 0x41424447, 0x40404142, 0x44474542, 
0x41404041, 0x98462232, 0xACCCCCB9, 0xACBCBC9C, 0x16388BAC, 0x12101214, 0x1A191714, 0x181A1B1B, 
0x10204225, 0x6989C8C8, 0x0A0A1949, 0x0B0C0B0A, 0x35190B0B, 0x61919183, 0x41111221, 0xC1B19181, 
0xC3C2C1C1, 0x7C5C3C3B, 0x89C6C79B, 0x00205164, 0x0A050100, 0x52251A0B, 0xCACAA582, 0xA0C0C1C5, 
0x49698491, 0xC7CBCCCC, 0x8292B2C3, 0x12223252, 0x52321212, 0x25251635, 0x12121223, 0x48271613, 
0xCCBCAC89, 0x204090A0, 0x05040311, 0x0B0A0907, 0x9C4B1B0B, 0xCBCBBBBC, 0xA7B9CACB, 0xA1A29395, 
0xA0A0B0A1, 0x6C6C8C7A, 0xC5BA8C8C, 0xC0C0C0C1, 0xC5B3A3A2, 0x051656A8, 0x94853706, 0x20408295, 
0x14010010, 0xC9CACCCC, 0x213164A6, 0x00318141, 0x72301000, 0x97A4C4B3, 0x3A786977, 0x0C1C3B2A, 
0xAC5C1C0C, 0xAABCBCCC, 0x8090A2B6, 0x08102050, 0x1C0C0C0B, 0x774C2C0C, 0x86949296, 0xBCBC9A88, 
0xBCBCACAC, 0xA1C1C5CA, 0x11113161, 0x71010111, 0xC1C1C1A1, 0x4BB9C7C3, 0x55481B2B, 0xCCCCA874, 
0xCBCCCCCB, 0xCBCCCCBC, 0x4557A8CA, 0x2162A364, 0x24613111, 0x05010408, 0x32643818, 0x0A0A0713, 
0x9947190B, 0x05090C0C, 0x07030000, 0x00000003, 0x08040100, 0x02050909, 0x08080401, 0x0C0B0B08, 
0x0C0C0C0B, 0xBCCACACC, 0x5C7C9CAC, 0x071A1A4A, 0x44352716, 0x9AA78474, 0x6A6B8898, 0xBA9A8B7C, 
0xC4C4C4C6, 0xB9CCCCCC, 0x909092A6, 0x70808090, 0x32806051, 0x09080704, 0x43231517, 0x79898966, 
0xCCBC9C9C, 0xB0B0C0C0, 0x50507090, 0x50505050, 0x90707060, 0x90A0B0A0, 0xC0B0A0A0, 0xB0B0B0C0, 
0xC0C0B0B0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x493A3A2A, 0xC1A48568, 0xB2C1C0C1, 0x547492A1, 0x0C0B1846, 0x0B0B0C0C, 0x0507080A, 
0x07070705, 0x68646285, 0x4C4C5C6A, 0x4032364A, 0x88837170, 0x30516367, 0xC5B49250, 0xC0C0C0C2, 
0x9693A0B0, 0x6989998A, 0x9C896769, 0xCCCCCCCB, 0x788B9CBC, 0x40405164, 0x40404040, 0x49444240, 
0x59494747, 0x90502010, 0xC0C0C0A0, 0xB0C0C0C0, 0xC0C0C0B0, 0xA0B0C0C0, 0x20506080, 0x00101010, 
0x00000000, 0xB8CBCCCC, 0xB4C4C6C8, 0x0A062262, 0x3C0C0C0C, 0x00328779, 0x42100000, 0x17475786, 
0xA8461606, 0x0C0C0C0C, 0x0C0B0B0C, 0x0A08080B, 0x02040809, 0x01010101, 0x01010101, 0x02010102, 
0x0B090502, 0x7080B0C0, 0x00102040, 0x00100010, 0x60303010, 0xB0B0B090, 0xB0A0B0C0, 0xC0C0B0B0, 
0xC0C0C0C0, 0xC0C0C0C0, 0x4070A0B0, 0x40303030, 0xA0A08050, 0x507080A0, 0x30202030, 0xB0A08060, 
0xC0C0C0C0, 0x00000000, 0x03040100, 0x06050705, 0x0B080706, 0x0C0C0C0C, 0x0C0C0C0C, 0x02040609, 
0x00000000, 0xBBCACBCC, 0x9AA9B7C8, 0x4B292858, 0x5C5C5B6C, 0x07071A3B, 0x05060705, 0x18090706, 
0xAC8C5929, 0x7080A0C0, 0x00002060, 0x30304020, 0x00001040, 0x50301000, 0x70808050, 0xC0C0B080, 
0xC0C0C0C0, 0x0C0C0C0C, 0x06080B0C, 0x00020506, 0x00000000, 0x0B0A0702, 0x0C0C0C0B, 0x0104080C, 
0x09070302, 0xB0C0C0C0, 0xC0C0B0A0, 0x90A090A0, 0x50305090, 0x002060A0, 0x00000000, 0x90803000, 
0x70805060, 0x4829191C, 0xB7A89989, 0xC0C0C3C5, 0x707090B0, 0x73431232, 0x56747575, 0x0A0A0939, 
0x1C2C1B0A, 0x8C7C6C8C, 0xABBBCB9C, 0x1557699B, 0x80300004, 0xA2A08090, 0xA1A1C3A5, 0xB6B6C6C3, 
0x6A696685, 0x0B0C0C0A, 0x0C09090B, 0x080B0C0C, 0x00010305, 0x00020502, 0x00000000, 0x07040100, 
0x04010104, 0x00000204, 0x04040100, 0x02040303, 0x03030101, 0x0C0A0906, 0x0C0C0C0C, 0x07080B0C, 
0x02000103, 0x81A17376, 0xCBC5C592, 0x79A6C7C8, 0x9C6C5C5B, 0x4C6C9C9C, 0xAC8C5C4C, 0xCA9A8BAC, 
0x4677B7C8, 0xC9C89796, 0xBCCCCCCA, 0xACACBCBC, 0x527599AC, 0x52322020, 0x27455251, 0x08090909, 
0x32100406, 0xCAAA7874, 0xC4C4C6C9, 0x7090B2C5, 0x55727060, 0x0C2A4858, 0xBC9C4C0C, 0x9295A9CA, 
0x72909090, 0xC4B5B5CA, 0xC7BAC9B5, 0x6598B5C5, 0x25486654, 0x6C6A3623, 0x3C6C6C7C, 0x4424082A, 
0x92918254, 0xCAC8C7C3, 0xCAC9C9CB, 0x0C0A09C9, 0xCC8C6C4C, 0xC6C6C8CB, 0xC3C3C5C6, 0x82C3C2C2, 
0x42444462, 0x6C5C5C8C, 0x78795C5C, 0xC4C6C697, 0x89A8B5C4, 0x12245979, 0x36562301, 0x63240717, 
0x9C8A7885, 0x9C9A468C, 0x0A0C1C4C, 0x08070708, 0x0A0C0B0A, 0x84957738, 0xA0616363, 0xB0C0C1B1, 
0x41A1C0B0, 0x090B0B0C, 0x0B0A090A, 0x0205080A, 0x01000000, 0x0B0A0803, 0x0A0A0A0A, 0x07070608, 
0x09050407, 0x8C3C0C0B, 0x9BACBCBC, 0x1203175A, 0x32234343, 0xC2C29272, 0x68A4C2C2, 0x02022324, 
0x08080705, 0x104296AB, 0x10101010, 0x50201010, 0xC0A09090, 0x72A0C0C0, 0x1C1C1A35, 0x1B1C1C1C, 
0x5A29181A, 0x20202040, 0xC0C0A050, 0xB0C0C0C0, 0x20202050, 0x20202020, 0x20202020, 0x20202020, 
0x20202020, 0x0C0C0C09, 0x0406180A, 0x72613012, 0xB8B6B493, 0xCCBCBCCA, 0x7CACBCCC, 0x283A3C5C, 
0x07040516, 0xC5B7BBAC, 0x7090A1C5, 0x00002040, 0x60302000, 0x60405070, 0xCAC9B692, 0x9093B8C9, 
0x8A747180, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x0B0B0B0B, 0x090A0B0B, 0x01010407, 0x00000000, 0x02000000, 0x0B080603, 0x0B0C0B0B, 
0x0B0B0B0B, 0xABCBCBCC, 0x4849597A, 0x32321416, 0x02222242, 0x36140303, 0x5C5B2A29, 0x7C8C5C4C, 
0xABAC8C6C, 0x0C0B0A0C, 0x0C0C0C0C, 0x01040A0C, 0x02010101, 0x0A0A0905, 0x01010206, 0x01010101, 
0x09040101, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x2B2B4C6C, 0x1A0B1B1B, 0x382B2B1A, 0x98776767, 0xC7C7C9B9, 0xC3C4C3C5, 0x7797A5B4, 
0x6C7B7B7A, 0xC0C0C0B0, 0x406080B0, 0x00000030, 0x00000000, 0x10000000, 0xB0A06040, 0x90B0C0C0, 
0x80707070, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x4725173C, 0x76575445, 0xC9C7C6A7, 0xBCCCBCCC, 0x92B4B8BB, 0x00336783, 0x00000010, 
0x27160613, 0x40A0C0C0, 0x50100010, 0x102060A0, 0xA0B08030, 0x90B0B0B0, 0x60A09090, 0x50405040, 
0x90908090, 0x8B46141C, 0xCACBCCAC, 0x63A3B6CA, 0x09091533, 0x0303060A, 0x03030303, 0x03040705, 
0x09091503, 0x8B5A49A6, 0x698B9C9C, 0x60414356, 0x30102050, 0xC9C6A471, 0x3B6B9CBB, 0x06080A1B, 
0x80502203, 0x0C0C0A04, 0x0003080C, 0x00000000, 0x00000000, 0x06020100, 0x0A0B0908, 0x00020508, 
0x01000000, 0xCBCCBCAC, 0x6587B8C9, 0x32232223, 0x55446453, 0xA1828464, 0x8091A0A0, 0x7B584461, 
0x5C4C6C8C, 0x2C0C0C0C, 0x8A7A7A4B, 0x05275889, 0x04040404, 0x52100102, 0xC9B59473, 0xBCCCCACB, 
0x2C4C8CAC, 0x3B3A3977, 0x2C2C4C4B, 0x16171A1C, 0x11111213, 0x13121312, 0x92622212, 0xC1C1C1B2, 
0x93A2B1C1, 0x7A6B7ACB, 0xACACBC8B, 0x58495B6C, 0xA2717193, 0x312050A0, 0x7686A874, 0x857584A5, 
0xC9BCBA89, 0x0C0C0C0A, 0x08090809, 0x02060608, 0x08050402, 0x0A0B0B0A, 0x0C0B0A0A, 0x08090C0C, 
0x08050607, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xC0C08030, 0xC0C0C0C0, 0x00003090, 
0x00000000, 0x84B7C9CC, 0x8291A083, 0x05020032, 0x391A0A08, 0x04042466, 0x67451303, 0x6C1B1B38, 
0xCCBCACAC, 0x08060403, 0x090C0C09, 0x00000204, 0x05010000, 0x0C0C0C0A, 0x04080A0C, 0x00000102, 
0x02020301, 0x90A090A1, 0xA89482A0, 0x5B7CAC9B, 0x47598B6B, 0xC0C0B184, 0x308090C0, 0x30000000, 
0xC0C08070, 0xC0C0C0C0, 0x606070B0, 0x70808080, 0x90806070, 0x00203070, 0x40202000, 0x20203040, 
0xC0906050, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x04040100, 0x06020001, 0x08070907, 0x07070607, 0x07070709, 0x0C0C0908, 0x06090C0C, 
0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x907050B0, 0x909090A0, 0xC0C0C0B0, 0xA0B0C0C0, 0x10103080, 0x00000000, 0x00000000, 
0x10000000, 0x02001032, 0x8C3C0905, 0xC3C7CABB, 0x104070C1, 0x00000000, 0x70301100, 0xC1C0B0B0, 
0x60B0C0C1, 0x32717194, 0x66241314, 0x7B5A77A6, 0x9ABBACAC, 0x70826568, 0xB7B2B080, 0x5C3C6BA9, 
0xA7AA9CAC, 0x07030205, 0x00010409, 0x01000000, 0x07050101, 0x08060404, 0x0C0C0A08, 0x0A0A0C0C, 
0x05080C0B, 0x00000000, 0x40200000, 0x80807050, 0x60308080, 0x80604040, 0xC0C0B0A0, 0xB0C0C0C0, 
0x708090A0, 0x0415287B, 0x33231303, 0xB3A28253, 0xC3C3C3C3, 0xA4A3B3C3, 0xA6A6A5A5, 0x7B7A88A8, 
0x5C5C6C6C, 0x0C0C0C0C, 0x0A0B0C0C, 0x05050709, 0x08060404, 0x06080C0C, 0x03030303, 0x08070604, 
0x0C0C0C0A, 0xB0B08040, 0x30303060, 0x60303030, 0x90B0A0A0, 0xB0B0C090, 0x90C0C0A0, 0x30303050, 
0x30303030, 0x0C0B0A04, 0x1C0C0C0C, 0x65573C1C, 0xC2B09173, 0xC5C6C6C5, 0xB3B4C5C5, 0x405081A2, 
0x01001020, 0xCAC8C9CC, 0x5969ABBA, 0xA3976B4C, 0x33769391, 0x28140301, 0x070A0A19, 0x08080808, 
0x9A582818, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00002050, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x40200000, 0xC0B09070, 
0x90B0C0C0, 0x0A0B0A0B, 0x05050507, 0x05050505, 0x0A0A0605, 0x05050507, 0x08050506, 0x0B0C0C0B, 
0x08080B0C, 0x08092A5C, 0x0A0A0909, 0x6A4A6C3C, 0xA1737639, 0xC0C0C0A0, 0x90A0C0C1, 0x33617090, 
0x2A1A3975, 0x041646A8, 0x23130303, 0x53637363, 0x84637373, 0xCBCAB877, 0xCCCCCCCA, 0x384B7CBC, 
0x4A374656, 0xC0C0A0C0, 0xC0C0C0C0, 0x70C0C0C0, 0x20302030, 0x30603020, 0x00000010, 0x10000000, 
0xB0A05030, 0xA0C1C2A1, 0x70908080, 0xC2B18271, 0xACCBB8C4, 0x7CACAC9C, 0x6266696B, 0x60606060, 
0x60606161, 0x66B6C6C6, 0x57373636, 0x35365686, 0x35453536, 0x37373636, 0x9C7C5B49, 0x789AAC9C, 
0xC6B6B686, 0xA0808070, 0xA0C0B090, 0x50507070, 0x70809080, 0x80804040, 0xC0A0A080, 0xB0A0C0C0, 
0x7090A090, 0x3B4B7C8C, 0x8576A659, 0x03346384, 0x05030202, 0x33020305, 0xC5C5A585, 0x6BABC8C6, 
0x6C6C3C3C, 0xB6CACACB, 0xB5C6C7C5, 0x5C4B5A97, 0x4C4C5C6C, 0x4A4C4C4C, 0x48444648, 0xA8A97848, 
0xAA896A87, 0xA0B0C0C0, 0xB09090A0, 0xC0C0C0B0, 0xC0C0C0C0, 0x204080C0, 0x40302020, 0x70604030, 
0xA0606070, 0xCCCCCBCB, 0xCBCCCCCC, 0x07274A9C, 0x07070506, 0x49382717, 0x494A4A49, 0x364A4B59, 
0xC6A78665, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x40405060, 0x40404040, 0x40404040, 0x40404040, 0x50404040, 0x80707060, 0xC0C0B0A0, 
0x80A0B0C0, 0x00200F01, 0x00002E01, 0x7200002D, 0x80818680, 0x00210F03, 0x8EBD2006, 0x571F0068, 
0x07EA24D8, 0x013C801F, 0x531213F1, 0x330A004D, 0x6112AEFF, 0x571F0070, 0x8C70FA3A, 0x043C8008, 
0x80127680, 0x020A0038, 0xBC127680, 0x8ECF2005, 0x571F0060, 0x0F432E8A, 0x043F0008, 0x0F127680, 
0x330A0049, 0x30127680, 0x096F809F, 0x63120AE3, 0x020A0028, 0x0F127680, 0x8ECF2005, 0x096F808D, 
0xDD12D4D7, 0x3300005B, 0x5101769A, 0x571F0060, 0x310FB754, 0x043F8008, 0x80127680, 0x020A0028, 
0xF8127680, 0x00220604, 0x26FF2006, 0x021F0069, 0x12ED4523, 0x043F801E, 0x521211EB, 0x020F004E, 
0x61121157, 0x021F006F, 0x14ED1157, 0x043F8018, 0x2512053A, 0x020A003C, 0x6612682B, 0x26FF2005, 
0x286F8080, 0x00010000, 0x020F004A, 0x53121DB8, 0x021F006B, 0x42CD2C08, 0x043F800C, 0x3512578A, 
0x020A003A, 0x76128015, 0x26FF2005, 0x021F006F, 0x14BF4AD7, 0x043F801A, 0x56121A53, 0x330F005D, 
0x1CFB002B, 0x286F8088, 0x07123876, 0x020A003E, 0x6B122CE5, 0x26FF2003, 0x286F8098, 0x7F129D4E, 
0x286F809C, 0x4312852B, 0x020A003A, 0xCB128080, 0x00230F04, 0xCEAD200A, 0x036800D4, 0x50000FAC, 
0x036800C4, 0x280026E5, 0x011F007E, 0x130887E5, 0x013F0009, 0x86DDA5E6, 0x33070059, 0xACFBA506, 
0x036800D4, 0x50001A5F, 0x036800D6, 0x0A0980B4, 0x011F0068, 0x3330A54B, 0x013F0019, 0x1BEB78E6, 
0x020A0030, 0x360057E6, 0xCEAD200C, 0x048F00D9, 0x80009A89, 0x336E001E, 0x4C001C19, 0x155000AC, 
0x45003000, 0x1B0000EA, 0x45000005, 0x272E00FF, 0x8800C50A, 0x050F009F, 0x6300D577, 0x571F006C, 
0x7300314B, 0x043F001A, 0x7300C50E, 0x1804007E, 0x6400774B, 0x571F006A, 0x1B0078E6, 0x043F001C, 
0x730041E7, 0x00020038, 0x630078B5, 0xCEAD2007, 0x343F00FD, 0x23364A2C, 0x1F0F00DF, 0x7E1D6D2C, 
0x2B2F0074, 0x2437A5B3, 0x036F00C6, 0x760051E7, 0x036F00DC, 0x08004B2E, 0x002F8045, 0x250073E8, 
0x00030028, 0x7F024C2F, 0xCEAD2007, 0x343F00E1, 0x799DC60A, 0x036F00CC, 0x28095112, 0x1F0F00C7, 
0x9CDEC6E8, 0x2B2F007E, 0x0C7AC70A, 0x036F00D6, 0x5001132D, 0x002F8047, 0x360425B5, 0x00030022, 
0x36002C47, 0x00240F02, 0xCEAD200C, 0x492F002C, 0x46574C4C, 0x265000B0, 0x25584DDE, 0x1260005E, 
0x29580F4F, 0x3560000A, 0x4737C7B3, 0x193F00AE, 0x0ED1EB06, 0x050E0091, 0x47C08934, 0x57100078, 
0x05160DF6, 0x04300008, 0x48160D18, 0x03000079, 0x05010D18, 0x571F007A, 0x05160D02, 0x043F000E, 
0x0B160659, 0x020A003E, 0x05010603, 0xCEAD220C, 0x571F0078, 0x05000000, 0x043F0008, 0x48160018, 
0x330E0059, 0x05010018, 0x571F0078, 0x05160018, 0x043F000A, 0x2D160059, 0x2B0E007B, 0x05010059, 
0x492F002C, 0x46574C4C, 0x265000B0, 0x25584DDE, 0x1260005C, 0x46581A1E, 0x3560000A, 0x4737C7B3, 
0x193F00A8, 0x0ED17F3A, 0x020A0038, 0x47016DE6, 0x00250F08, 0xCEAD200B, 0x0F480049, 0x00000000, 
0x203E0089, 0x00000038, 0x0C400029, 0x00000000, 0x33000049, 0x03010400, 0x011E0062, 0x09122118, 
0x013E0009, 0x0000040C, 0x33000059, 0x1301040C, 0x0F400049, 0x00590014, 0x203F0083, 0x005A0014, 
0x0C440029, 0x00000400, 0x020A0028, 0x00010000, 0xCEAD200B, 0x0C480029, 0x81327D9B, 0x0B2E00A9, 
0x7E327AED, 0x0F42005F, 0x333227E9, 0x3300005D, 0xF7019AEA, 0x011E0062, 0x4A122162, 0x013E0005, 
0x7E027A0C, 0x33000049, 0x2B01370C, 0x0C400029, 0x4A277B14, 0x0B2F00A7, 0x7E284F14, 0x0F440043, 
0x82020726, 0x020A003C, 0x820183B6, 0xCEAD200B, 0x0C48002B, 0x810E3141, 0x0B2E00AF, 0x7E06C56F, 
0x0F42004B, 0x8306E6EA, 0x33000049, 0x5801475B, 0x5C1E0063, 0x4A122118, 0x013E0001, 0x7E20BD0C, 
0x33000049, 0x2B01BD0C, 0x0C400029, 0x4A277B14, 0x0B2F00A3, 0x7E286814, 0x0F440049, 0x82069B4A, 
0x020A0038, 0x820188EB, 0xCEAD200A, 0x01108068, 0x00000000, 0x1D5F004A, 0x26384EEB, 0x33000049, 
0x00010000, 0x571F0062, 0x09122118, 0x043C000A, 0x0000001E, 0x3300005B, 0x1301001E, 0x01108068, 
0x00590014, 0x229E0063, 0x005A0014, 0x00208049, 0x00000000, 0x020A0028, 0x00010000, 0xCEAD200A, 
0x01108068, 0x00000000, 0x1D5F004A, 0x26384EEB, 0x02000048, 0x00010000, 0x571F0062, 0x09122118, 
0x043F0000, 0x0001000C, 0x3300005D, 0x1301340C, 0x0C48002D, 0x00273414, 0x0B2F00A3, 0x03280014, 
0x0F480041, 0x00010000, 0x020A0028, 0x00010000, 0xCEAD2009, 0x286F0088, 0x00000000, 0x02000048, 
0x00010000, 0x571F0060, 0x0912214D, 0x043F0008, 0x0000000C, 0x33000059, 0x1301000C, 0x0C460029, 
0x00270014, 0x4C2F00A3, 0x00280014, 0x0F460049, 0x00000000, 0x020A0028, 0x00010000, 0xCEAD2008, 
0x01108068, 0x00000000, 0x1D5F004A, 0x26384EEB, 0x33000049, 0x00010000, 0x571F0062, 0x09122118, 
0x043C0018, 0x7A011715, 0x33000049, 0x42011715, 0x096F009B, 0x02017C4D, 0x020A0028, 0x00011715, 
0xCEAD2007, 0x286F0088, 0x00C07CEC, 0x3300004D, 0x00014E4E, 0x011F0060, 0x0912214D, 0x013F0019, 
0x7A011715, 0x330F0049, 0x42011715, 0x286F009A, 0x02017C4D, 0x020A0028, 0x00011715, 0x00260F05, 
0x8EAD2007, 0x57108068, 0x00000000, 0x663F00D9, 0x48177B94, 0xBD1F0017, 0x6601D2EC, 0x804800C4, 
0x1B01D54A, 0x062F00E2, 0x5801C8B6, 0x12208059, 0x0E00044F, 0x020A0022, 0x5801928C, 0x8EAD2007, 
0x57108068, 0x00000001, 0x663F00D9, 0x485A7B36, 0x805F0031, 0x66669B47, 0x07600070, 0x4C17281C, 
0x062F00EA, 0x4D0D36A3, 0x12208041, 0x03011239, 0x020A002C, 0x080274ED, 0x8EAD2206, 0x57108076, 
0x3A023F02, 0xF13F00DC, 0xAE325931, 0xC15F000D, 0x100DD5B7, 0x062F00FE, 0x73027CB7, 0x12208049, 
0x00000000, 0x020A002E, 0xF3027CED, 0x8EAD240C, 0x103080E8, 0x00000000, 0x182F003D, 0x830E8CB8, 
0x725000A9, 0x00000000, 0x1E220081, 0x3CDF7D4A, 0x8166000E, 0x810D5BB8, 0x725000A9, 0x00000000, 
0x062A00EE, 0x840E922C, 0x0020804D, 0x00003400, 0x2E0E009C, 0x840288EE, 0x571F0076, 0x2D022BEE, 
0x043F0008, 0x850D93EF, 0x0001003A, 0x85038DEF, 0x8EAD2E17, 0x682080C9, 0x00000000, 0x3A1F006E, 
0x444F4494, 0x812F00AF, 0xA022C839, 0x8248007A, 0xAC0D689B, 0x826200AD, 0x4D029BF0, 0x2C8080CD, 
0x4D027CB9, 0x0001003E, 0xF80314B9, 0x00270602, 0x27FFA003, 0x021F8061, 0x0F532D35, 0x043F801C, 
0x491279FA, 0x020A0028, 0x07122414, 0x27FFA002, 0x286F008E, 0x6112DFE5, 0x020A002A, 0x0B120227, 
0x00280F02, 0xCF7D2043, 0x182F803F, 0x1821446A, 0x272F80F7, 0x09004485, 0x020A0034, 0x25001F9C, 
0xCF7D2003, 0x182F8027, 0x4E1FE778, 0x062F80EC, 0x260412F1, 0x020A002A, 0xFA042403, 0x00290F02, 
0xCF7D2043, 0x111F8026, 0x355B6D5C, 0x103F80A1, 0x8700CABA, 0x020A0022, 0x4600CAF1, 0xCF7D2003, 
0x111F8024, 0x35AB21C9, 0x103F80A9, 0x1D09CA6D, 0x020A0020, 0x5E04CA16, 0x002A0F04, 0x5B6A2218, 
0x146C00CD, 0x03003105, 0x351F0067, 0x425C12F4, 0x363F000E, 0x00003443, 0x180F008C, 0x2B013334, 
0x146C00C9, 0x03000A05, 0x361F0061, 0x68340BD3, 0x373F0012, 0x0E01040D, 0x000A0020, 0x7101044F, 
0x5B6A2018, 0x146C00C9, 0x03000A05, 0x361F0061, 0x68340BD3, 0x373F0008, 0x00000000, 0x180F0088, 
0x71000034, 0x146C00CD, 0x03003105, 0x351F0067, 0x425C12F4, 0x363F0008, 0x00000000, 0x000A0028, 
0x2B000000, 0x5B6A201A, 0x351F006B, 0xCD123C4F, 0x363F001C, 0x4E12C51F, 0x180F008C, 0x0601C51F, 
0x361F006B, 0xD7127FD1, 0x373F000A, 0x0012041F, 0x180F008A, 0x0601001F, 0x4B5000A8, 0x00000000, 
0x698600C9, 0x00000000, 0x048080C9, 0x00000000, 0x000A0028, 0x00000400, 0x5B6A221A, 0x361F006B, 
0xD7123C4F, 0x373F001C, 0x4E12C51F, 0x180F008C, 0x0601C51F, 0x351F006B, 0xCD127FD1, 0x363F000A, 
0x0012001F, 0x180F008A, 0x0601001F, 0x4B5000A8, 0x00000000, 0x698600C9, 0x00000000, 0x048080C9, 
0x00000000, 0x000A0028, 0x00000000, 0x002B0B02, 0x5B6A2026, 0x571F0060, 0x31394FF2, 0x043F0012, 
0x260F00F2, 0x050F008B, 0x0F00003B, 0x048F00C9, 0x00000000, 0x048F00C9, 0x00000000, 0x020A0028, 
0x00000000, 0x5B6A2004, 0x036F00D2, 0x01003B50, 0x571F0060, 0x31394FF2, 0x043F0010, 0x260F3298, 
0x020A0020, 0x24001507, 0x002C9F04, 0x25002004, 0x0A3F80E0, 0x002E0000, 0x37600001, 0x00010000, 
0x122F8041, 0x00010000, 0x020A0022, 0x03010005, 0x26002004, 0xC31F8060, 0x6D0617B2, 0x37600005, 
0x00013400, 0x6A3F801E, 0xD2126DE0, 0x020A003A, 0x02124215, 0x25002004, 0x4D1F003F, 0x146FB015, 
0x37600001, 0x00010000, 0x6A3F801E, 0xD21202E0, 0x020A003A, 0x02124215, 0x25002E12, 0x286F809E, 
0xC3125AA5, 0x020A0038, 0x32121398, 0x002D0902, 0x133F2002, 0x087F805F, 0x01123104, 0x020A003C, 
0xB5122F09, 0x138F2013, 0x838F00CE, 0x518FA6B4, 0x838F00C1, 0x58862357, 0x020F0024, 0x510052F4, 
0x002E9F03, 0x13002E03, 0x571F806A, 0x06CD25F0, 0x043F801E, 0x5A1257E0, 0x020A003A, 0x32121301, 
0x13002002, 0x786F8095, 0x02693410, 0x020A0038, 0x32121398, 0x13002002, 0x286F8094, 0x02693410, 
0x020A0038, 0x32121398, 0x002F0F01, 0xCFBD2003, 0x571F806E, 0x42406DF4, 0x043F0008, 0x1D9DE0F5, 
0x020A002A, 0x2B121549, 0x00300F06, 0xBEAD2607, 0x384E005C, 0x14390625, 0x203F0087, 0xE101287C, 
0x2D4A003E, 0x595C5911, 0x030F0067, 0x66011C11, 0x571F0060, 0x00010000, 0x043F0002, 0x66013102, 
0x000A003C, 0x4C015002, 0xBEAD2409, 0x0C4E0025, 0x021F1B13, 0x615000B4, 0x5B030FD7, 0x0B2F00A3, 
0x0A449CE5, 0x0F4E0051, 0x88697A04, 0x6B8080CB, 0x00006507, 0x030F006B, 0x8901ABF5, 0x571F0070, 
0x8939CCBB, 0x043F000E, 0x8A02F502, 0x000A0038, 0x4C011802, 0x9EAD2204, 0x384E0044, 0x383E1B2A, 
0x203F0081, 0x5DEDBCD3, 0x2D4E0022, 0x43B82927, 0x000A003E, 0x32040458, 0x8EAD2006, 0x0C460025, 
0x021FD113, 0x615000B4, 0x5B030FD7, 0xE42F00B0, 0x11443B53, 0x0F4E0057, 0xB4C7C527, 0x6B8080C7, 
0x29EF7213, 0x000A0024, 0x001B0409, 0xAEAD2014, 0x6C4200CC, 0x4D00D907, 0x6C1F00E3, 0x81017D02, 
0x6D4F00BC, 0x7300D331, 0x6D01003F, 0x8B001401, 0x8EAD2006, 0x0C460027, 0x021FD106, 0x615000B4, 
0x5B030FD7, 0xE42F00B2, 0x11443B5C, 0x0F4E0057, 0xA0C7C527, 0x6B8080C7, 0x29EF7F17, 0x000A0024, 
0x001B0409, 0x00310F04, 0xCEAD2205, 0x053200E4, 0x7C03D12A, 0x150F00DD, 0x686C6DD3, 0x854F00E3, 
0x7DC77D1A, 0x048080C3, 0x7CEF6B02, 0x000A0032, 0x5F0E0B3D, 0xCEAD2005, 0x0870005B, 0x0601CD0C, 
0x6E1F0064, 0x1422D107, 0x6E3F0005, 0x57EF0E13, 0x6F208040, 0x54EF021D, 0x000A003A, 0x5F120C27, 
0xCEAD2005, 0x1F3F80E0, 0x7C421331, 0x6E1F0064, 0x14FFD1AC, 0x6E3F0005, 0x57EF0E13, 0x6F208040, 
0x54EF021D, 0x000A003A, 0x5F120C27, 0xCEAD2006, 0x1F3F80E0, 0x7C421307, 0x0870005B, 0x0601CD0C, 
0x6E1F0062, 0x14224EA6, 0x6E3F0005, 0x57EF0E13, 0x6F208040, 0x54EF021D, 0x000A003A, 0x5F120C27, 
0x00320F06, 0xCEAD2E08, 0x053080FE, 0x8DA12502, 0x111F0026, 0x718ED109, 0xD1600008, 0xF83A4E32, 
0x07600074, 0x27180A1E, 0x155C00A6, 0x430B5E0C, 0x608C00C6, 0x15EF5302, 0x0980807A, 0x0E000009, 
0x000A0030, 0x5D400C09, 0xCEAD2009, 0x053080F8, 0x8D831301, 0x6F1F0033, 0x19BD0A09, 0x65600008, 
0xF83A4E32, 0x07600076, 0x27184550, 0x155000A6, 0x2994510C, 0x062F00E2, 0x57A82432, 0x048000CD, 
0x15B3721D, 0x708080CD, 0x0A025577, 0x000A0030, 0x5D400C09, 0xCEAD2E08, 0x0110807C, 0x54130616, 
0x845F005C, 0x0CA13C07, 0xDF0000E8, 0x7ADE7C60, 0x07600066, 0x3D184550, 0x845F0043, 0x565A52B4, 
0x718000DC, 0x7A0A2F14, 0xCC8C0067, 0x04C73E77, 0x000A0034, 0x5D404E09, 0xCEAD2406, 0x053080EA, 
0x868B1305, 0x111F002C, 0x715ED10A, 0x229F0071, 0xAE0507C1, 0x718400DE, 0x5B2B292E, 0xCC820069, 
0x7CB0026E, 0x000A0030, 0x5D400C27, 0xCEAD2407, 0x053080E0, 0x86050F01, 0x591F002C, 0x715ED10A, 
0x1D5F0058, 0x1B5E5210, 0x850200F2, 0x59A80576, 0xCC800069, 0x0AB30133, 0x0020805F, 0x7A025233, 
0x000A0030, 0x5D403C27, 0xCEAD2207, 0x053080EA, 0x5622473D, 0x721F0024, 0x7161D146, 0x65600008, 
0xF8000032, 0x854F00F9, 0x5618F9E3, 0x1B0200F4, 0x03FC2F09, 0x708080C7, 0x57EFCD02, 0x000A0030, 
0x5D400C09, 0x00330F04, 0xCEAD2009, 0x4C108078, 0x2B000000, 0x383080F9, 0x3108471B, 0x711F002B, 
0x7B800A76, 0x3760000B, 0x4A8D2D6B, 0x865F00C8, 0x47A97F14, 0x37600007, 0x9CEB3408, 0x393F00AA, 
0x593CA701, 0x00208053, 0x3201120D, 0x000A003C, 0x40120413, 0xCEAD2008, 0x4C10807E, 0x4C170604, 
0x383080E1, 0x9B2B131B, 0x711F002D, 0x35A1D11B, 0x08260066, 0x1D05203B, 0x280F00F5, 0x2587C083, 
0x393F00A6, 0x59B8A75A, 0x00208045, 0x5802CF1A, 0x000A003C, 0x40120404, 0xCEAD2E08, 0x01108074, 
0x8E231B0D, 0x1D5F0048, 0xB9E20A01, 0x710000F3, 0x19E33BF6, 0xF15C004B, 0x8F83681C, 0x280000F5, 
0x5B3C2B9D, 0x393F00A2, 0x0E90A707, 0x00208045, 0x5802CF1A, 0x000A0036, 0x57000427, 0xCEAD2007, 
0x4C108068, 0x00000000, 0x053080FA, 0x0E2A1305, 0x111F002C, 0x38D8D10E, 0x864C00EF, 0x43A16FBB, 
0x193F00A4, 0x7CB88E46, 0x0020804B, 0x36022346, 0x000A003A, 0x40120C01, 0x00340F05, 0xCEAD200A, 
0x0A3080E8, 0x00000000, 0x4014006D, 0x14330631, 0x1B5000A7, 0x29035EE3, 0x2F700029, 0x00000000, 
0x062F00F6, 0x6D306A32, 0x0020804F, 0xE1120DE0, 0x0300006F, 0x76121164, 0x298E0043, 0x140B445C, 
0x483F0009, 0x57020313, 0x000A003A, 0x2C120C07, 0xCEAD2209, 0x571F0076, 0x68010602, 0x043F0014, 
0xF601C702, 0x050C0085, 0x9001EE8A, 0x571F0066, 0x1401EBF7, 0x155000A6, 0x1501930C, 0x2F700029, 
0x00000000, 0x858F00D0, 0x21012506, 0x12208059, 0x3200630A, 0x000A0032, 0x32010C01, 0xCEAD2007, 
0x5714006C, 0x0F62D10B, 0x082C0070, 0x122DCE70, 0x131E0044, 0xF43DA3BD, 0x0306006B, 0x28041F5C, 
0x571E006A, 0x28041F5C, 0x043F000A, 0x57022E02, 0x000A0038, 0x2C040C0B, 0xCEAD2406, 0xE3108074, 
0x32011B0B, 0x0A3F00F2, 0x69134758, 0x875F0013, 0x4C012803, 0xDB8000CA, 0x582AA806, 0x048000D5, 
0x0E01A839, 0x000A0030, 0x32025D57, 0xCEAD2E06, 0x5714006C, 0x14051B02, 0xFD5000A7, 0x29035EE3, 
0x2F7F002B, 0x360000F2, 0x062400EE, 0x371A0CF0, 0x043F0008, 0x57020302, 0x000A0032, 0x2C000C27, 
0x00350F08, 0xCEAD2009, 0x6B7F004C, 0x281208F7, 0x011F0076, 0x28B00602, 0x155400A6, 0x293E5EF7, 
0x155000A8, 0x00000000, 0x12620054, 0x46E40A35, 0xD160001E, 0x1A5A200C, 0x193F00A0, 0x7CEF790E, 
0x00208047, 0x0AEF550E, 0x000A0038, 0x40120C31, 0xCEAD220A, 0x883080D8, 0x900F4708, 0x882F0035, 
0x77AA061B, 0x155000AC, 0xA524ED9E, 0x1620009A, 0x03AAA9F8, 0xDF0000E2, 0x35E472AF, 0x12600054, 
0x46E41335, 0x7C600016, 0x1A06750C, 0x193F00A2, 0x59A8F946, 0x00208043, 0x0AEF230E, 0x000A0032, 
0x7C001846, 0xCEAD2E07, 0x048000C9, 0x03004A00, 0x048F00DF, 0x5F00CE56, 0x050C0089, 0x00000000, 
0x011F007E, 0x5F009DBD, 0x155000B8, 0x0E00280B, 0x193F00A2, 0x56A8CF07, 0x000A003C, 0x4007CF5C, 
0xCEAD2007, 0x6B7F005A, 0x2F1460A9, 0x011E006E, 0x44240603, 0x0826006C, 0x1D18B0BE, 0xDF0A00E2, 
0xECE457A1, 0x193F00A6, 0x32B8FA07, 0x00208045, 0x58025F59, 0x000A0038, 0x40141804, 0xCEAD2009, 
0x011F0074, 0x8E950604, 0x895000A3, 0x4DDA68BE, 0xD15000A5, 0x7BC35635, 0xD160000C, 0x00003400, 
0x103F00A9, 0x7F603BBF, 0x030C007B, 0x57073ABF, 0x8A8E00D2, 0x5960D0F9, 0x838080CF, 0x8E496917, 
0x000A002C, 0x7D071420, 0xCEAD2007, 0x011F007E, 0x7FCD0627, 0x08250062, 0x7C05081D, 0x6B7C004A, 
0x2812EDF4, 0x280E00F5, 0xF2E4089D, 0x193F00A4, 0x76EF0D36, 0x00208041, 0x0AEF135B, 0x000A003C, 
0x40120431, 0xCEAD2008, 0x011F0074, 0x8E950604, 0x895000A3, 0x4DDA68BE, 0xD15000A5, 0x7BC35635, 
0xD160000C, 0x00003400, 0x103F00B9, 0xE7603BBF, 0x220C004A, 0x910760BF, 0x6B7F005C, 0x7D142BBB, 
0x00030038, 0x40141804, 0xCEAD2408, 0x01108072, 0x600B1302, 0x232F00CC, 0x15C6D104, 0xDD1600CC, 
0xA31BEDC1, 0x9C4800FA, 0x411868B3, 0xFD7000B1, 0x5C12B136, 0x131F0052, 0x5C121311, 0x0130801F, 
0x5C81C9E2, 0x0004002C, 0x54011B36, 0x00360F06, 0xCEAD2005, 0x1D2F0027, 0x0D9E061A, 0x1E200099, 
0x2023727F, 0x745F0005, 0x92373413, 0xCC80806D, 0x7EF23E0A, 0x000A0030, 0x92000C46, 0xCEAD2215, 
0x011F006E, 0x0D1F0602, 0x0B2800A5, 0x1D440A1E, 0x8A2F0005, 0x09C7390E, 0x01308005, 0x21EF070A, 
0x000A003C, 0x4C120420, 0xCEAD2404, 0x494E0059, 0x14610000, 0x203F0087, 0x5D625B5C, 0x131E005E, 
0x5D044E43, 0x000A0020, 0x00010000, 0xCEAD2404, 0x494E0059, 0x14610000, 0x203F0087, 0x5D625B5C, 
0x131E005E, 0x5D044E43, 0x000A0020, 0x00010000, 0xCEAD2204, 0x182F0027, 0x4E030602, 0x0B2F00B5, 
0x5244511E, 0x0F4F0047, 0x21EF2F32, 0x000A0038, 0x40120B0E, 0xCEAD2204, 0x182F0037, 0x1A440602, 
0x0B2F00B5, 0x20C61A1E, 0x0F4F0047, 0x76A82902, 0x000A003A, 0x40120B02, 0x00370F08, 0xCEAD2029, 
0x103480EA, 0x3A244768, 0x111F0034, 0x152D061D, 0x3B700094, 0x0F140C5D, 0x07600068, 0x00000000, 
0x013F001B, 0x1600FA41, 0x05020089, 0x4B01000C, 0x048080D7, 0x5E5E2142, 0x048480D3, 0x5EEFD170, 
0x000A0038, 0x64091737, 0xCEAD2008, 0x0110806E, 0x2962D102, 0x103000EA, 0x3A241268, 0x136000DD, 
0x06126A35, 0x111F0034, 0x152D0620, 0x3B70008C, 0x0F0C2198, 0x07600060, 0x00010000, 0x113F0007, 
0x57EF7302, 0x000A003E, 0x64122347, 0xCEAD2207, 0x053080E0, 0x00010000, 0x111C003C, 0x5F001B10, 
0x1E2F009B, 0x3200635D, 0x136400DD, 0x06017505, 0x150C00DD, 0x6000D15E, 0x113F0001, 0x57EF2431, 
0x000A0034, 0x64002333, 0xCEAD2E09, 0x571C0078, 0x5E400010, 0x043E0008, 0x00000000, 0x03020069, 
0x510100FB, 0x103480EA, 0x3A244768, 0x4D1F0035, 0x152D0620, 0x3B700080, 0x1E14244E, 0x07600060, 
0x00010000, 0x113F0005, 0x57EF0E31, 0x000A003E, 0x64122301, 0xCEAD2405, 0x3B2E00C9, 0x00CC0000, 
0x136600DD, 0x06127505, 0xC15E0021, 0x16190021, 0x113F0001, 0x57EF2431, 0x000A003C, 0x64122333, 
0xCEAD2015, 0x3B2E00CB, 0x8B054747, 0x136000D9, 0x06125223, 0x760F00CE, 0x3E2D12A1, 0x113F0005, 
0xB3EF127A, 0x000A0038, 0x6412180B, 0xCEAD2E17, 0x3B2400DB, 0x61001365, 0x760F00DA, 0x27F1C8E0, 
0xE23F0066, 0xE1FC49F7, 0x150800C7, 0x4703C71F, 0x826400B3, 0x1EEF5604, 0x2C8080C5, 0x39EF6407, 
0x0001003A, 0x64033C0E, 0xCEAD2008, 0x0110806E, 0x5F62D102, 0x103000EA, 0x3A244768, 0x111F0034, 
0x152D061D, 0x136000DD, 0x06126A35, 0x3B700088, 0x1E0C0398, 0x07600060, 0x00010000, 0x113F0007, 
0x57EF0E02, 0x000A003E, 0x64122347, 0x00380F08, 0xCEAD2008, 0x0C4C0025, 0x4A5D061A, 0x0B2F00A1, 
0x7D5D60C0, 0x0F4C004D, 0x10C6AE81, 0x050A0091, 0x82047C61, 0x0C4C0025, 0x5E3FDF8D, 0x0B2F00B7, 
0x26405B6B, 0x0F4C004F, 0x5BB39204, 0x000A0034, 0x5F044E0A, 0xCEAD2208, 0x053080E8, 0x00001300, 
0x765F0005, 0x335A1B31, 0x12600058, 0x2D5837F5, 0xD79F006E, 0xE1A5FD7D, 0x0C400035, 0x9D03C7C6, 
0x00260053, 0x25EF4547, 0x01308005, 0x29EF1072, 0x000A0038, 0x4C120C13, 0xCEAD2209, 0xC93000F9, 
0x65001307, 0x182F0037, 0x60A90602, 0x1B5000A9, 0x00000000, 0x12600054, 0xF23E0A1E, 0x229F006F, 
0xE1A51D64, 0x0C400037, 0xC8194484, 0x00260053, 0x25EF1547, 0x01308009, 0x00000000, 0x000A0038, 
0x4C120C02, 0xCEAD2407, 0x0C4F003F, 0x18ED0602, 0x4D2F00B4, 0x528F0AF7, 0x0F400049, 0x7CA1B3D3, 
0x1B5000A1, 0x00010000, 0x8B8F00F9, 0x491245BA, 0x01340009, 0x00000000, 0x000A0038, 0x5F120C0E, 
0xCEAD2606, 0x053400E8, 0x00000000, 0xCA9F0008, 0x71A503F7, 0x07600070, 0x1818221E, 0x4D2F00BC, 
0x52B11A8A, 0x0F4A0051, 0x25EFA716, 0x000A0038, 0x40120B65, 0xCEAD2804, 0x1114802A, 0x0000001A, 
0x229F006B, 0x000000F4, 0x765F000B, 0x0000001A, 0x000A0020, 0x00010000, 0xCEAD2E03, 0x8C5F0020, 
0x00010000, 0x8C5F0041, 0x00010000, 0x000A0020, 0x00010000, 0xCEAD2805, 0x1114002E, 0x0000061A, 
0x229F006D, 0xE1A53DD3, 0x0F2E0017, 0xA0C7C527, 0x6B8080C7, 0x29EF7F17, 0x000A0024, 0x001B0409, 
0x00390F07, 0xCEAD2608, 0x063080EB, 0x00E60009, 0x0C480027, 0x5E44D13D, 0x0B2F00A1, 0x1D0344BA, 
0xF3400048, 0x00000400, 0x1F0F00CF, 0x126CDDE0, 0x103F00B1, 0x12EF450E, 0x00208041, 0x17010000, 
0x000A0038, 0x17120C02, 0xCEAD2608, 0x053080F8, 0x8F004704, 0x0C4F0023, 0xF71F043D, 0x0B2F00A7, 
0x7C036F7D, 0x0F4F0051, 0x387AF598, 0x12600054, 0x46E41335, 0x103F00B7, 0x12A8BE27, 0x12200049, 
0x17F21306, 0x000A0038, 0x64120C0B, 0xCEAD2206, 0x77108071, 0x2B010000, 0x789E0090, 0x40012731, 
0xF41F000A, 0x7A174EA6, 0x103F00A3, 0x2601D302, 0x00208049, 0x17000000, 0x000A0030, 0x40013604, 
0xCEAD2405, 0x232F00C2, 0x3A211207, 0x6C1F00F9, 0xEF967D0C, 0x0B2E00B5, 0x8DC7C509, 0x00208049, 
0x00000000, 0x000A0038, 0x02010409, 0xCEAD2004, 0x1D5F0054, 0x730AD300, 0xD1620014, 0x3A0C1C78, 
0x103F00B3, 0x7AEF5702, 0x000A0038, 0x64121802, 0xCEAD2E04, 0x8D5F001E, 0x8E0D0602, 0x8D0400E3, 
0xC80CE0C0, 0xF43F000B, 0x7C020302, 0x000A003E, 0x2C020447, 0xCEAD2404, 0x232F00C2, 0x3A211207, 
0x765F0013, 0x9AE71727, 0xCD8000C8, 0x00000000, 0x000A003A, 0x32010407, 0x003A0F02, 0x4B6C2203, 
0x286F809E, 0x17128463, 0x286F009E, 0x171284FC, 0x0206003A, 0x63123389, 0x4B6C2003, 0x286F809A, 
0x1712DBEF, 0x286F009A, 0x17124261, 0x0206003A, 0x63123361, 0x003B0F04, 0x5C482005, 0x571F806E, 
0x886CD756, 0x043F000A, 0x8F12905C, 0x33040049, 0xC612DEEF, 0x096F0087, 0x45013405, 0x020A0028, 
0x0D127680, 0x5C482005, 0x286F009E, 0x0212135C, 0x33040059, 0xA612DEEF, 0x571F0060, 0x8806D04E, 
0x043F0008, 0x80127680, 0x020A0028, 0x88127680, 0x5C482006, 0x0A3F80E8, 0x03000000, 0x37600009, 
0x00000000, 0x122F8049, 0x00000000, 0x3304004B, 0x00001209, 0x096F009B, 0x02010062, 0x020A003A, 
0xEE099980, 0x5C482004, 0x286F009E, 0x0212135C, 0x571F0060, 0x8806D04E, 0x043F0008, 0x80127680, 
0x020A0028, 0x88127680, 0x003C0F01, 0xCE7D2004, 0x182F8031, 0x18018080, 0x505F00BA, 0xF2402FF7, 
0x062F80E4, 0x1D01123F, 0x020A0036, 0xF20112E4, 0x003D0B01, 0x351E2003, 0x087F0049, 0x2C000000, 
0x6B7F0048, 0x2C000000, 0x020A0028, 0x2C000000, 0x003E0F01, 0xCE7D2004, 0x111F803A, 0xF2171F0F, 
0x7C6F000E, 0x4E5926CC, 0x103F80A1, 0x80017680, 0x020A0034, 0x02010413, 0x003F0F03, 0x8EBD200A, 
0x0A3080F0, 0xD4D61A41, 0x1B5000A1, 0x00010000, 0x4D1F002D, 0x385E6F2B, 0x4E600000, 0x00010000, 
0x07600074, 0x4C17D10B, 0x013C000D, 0x07126FE0, 0x330A004B, 0x4B1259F3, 0xF51C0076, 0xA11C6706, 
0x043C0016, 0x20CB4F25, 0x020A0038, 0xF9127680, 0x8EBF2009, 0x0A3080F8, 0xD4C20552, 0x1B5000A3, 
0x5829A651, 0x4D1F0035, 0x145A7A2F, 0x4E60001A, 0x3A0061DC, 0x07600074, 0x18181D1E, 0x013C000D, 
0x0F126FE0, 0x330A0049, 0x3D127680, 0x096F0099, 0x63A75900, 0x020A0038, 0x46127680, 0x8EBF2008, 
0x0A3080F2, 0xB1E4053D, 0x096F009D, 0x0812DA89, 0x22000040, 0x45010000, 0x4D1F0031, 0x14850E2C, 
0x4E600000, 0x00010000, 0x07600060, 0x00010000, 0x013C0019, 0x5312CC71, 0x020A0028, 0x41127680, 
0x00400F02, 0xCE8D200C, 0x103080E0, 0x00010000, 0x0C4F003B, 0xF4CC4215, 0xD22F00AC, 0x8F8A2613, 
0xDC40005A, 0x9C664B9F, 0x630800C6, 0x9D2A8E71, 0xDC2E008F, 0x1DE913FF, 0x6F208048, 0x00000000, 
0x2B000069, 0x00000000, 0x501F00D3, 0x9D117FE8, 0x062F00E8, 0x7C1B183A, 0x8F208054, 0x0E010639, 
0x020A002C, 0x3607CA61, 0xCE8D2007, 0xDE5F009F, 0x5F00D701, 0x150800DB, 0x64004A77, 0x1E2F0089, 
0x6600280A, 0x501F00C9, 0x8100DE38, 0x062F00EA, 0x4D00D3C3, 0x12208049, 0x00000000, 0x020A002E, 
0x650068C3, 0x00410808, 0xAEBD400A, 0x036F00D2, 0x01002863, 0x571F006C, 0x100B0604, 0x043F0010, 
0x6500410F, 0x00208049, 0x00000000, 0x050F0091, 0x4C014136, 0x036000D2, 0x01000063, 0x571F0072, 
0x6601312A, 0x043F0000, 0x6601310D, 0x00208049, 0x00000000, 0x00030032, 0x2C014900, 0xAEBD400B, 
0x1A108074, 0x371C1B31, 0x1F3F00EC, 0x40F6D104, 0x217000A6, 0x21474F0F, 0x150F00DF, 0x685A110F, 
0x013F0017, 0x8AA3C7FD, 0x0500008F, 0x31126FF3, 0x5B3080E5, 0x21FC0F6B, 0x155000AE, 0x580DAB0E, 
0x4E6000A1, 0x00010000, 0x13160056, 0x49B8E270, 0x00020038, 0x32123C0D, 0xAEBD400A, 0x036000D2, 
0x01000063, 0x571F007C, 0x3A0B0604, 0x043F0014, 0x9E00D80F, 0x00208049, 0x00000000, 0x05060097, 
0x2C012811, 0x036F00C2, 0x2800584E, 0x571F006E, 0x272A3521, 0x043F0002, 0x19023A00, 0x00208049, 
0x00000000, 0x00030032, 0x2C021800, 0xCEBD4407, 0x063080FB, 0x6951136F, 0x0C4C0025, 0x5E443B46, 
0x0B2C00B7, 0x12037A6B, 0x150A00C5, 0x120317C9, 0x062F00E4, 0x3FC70D2A, 0x00208043, 0x26EF1A60, 
0x0001003C, 0x5F12042A, 0xAEBD4009, 0x1A10807E, 0x37421B47, 0x103F00F6, 0x5223D102, 0x217000A6, 
0x21474F0F, 0x036F00DE, 0x50121350, 0x036000D4, 0x0100133E, 0x150F00D9, 0x68E7693C, 0x013F0003, 
0x7EEF1500, 0x3D200000, 0x00010000, 0x00030038, 0x2C120B65, 0xAEBD4008, 0x036F00DE, 0x501275F1, 
0x1A16007E, 0x37421B47, 0x793F00E4, 0x40050898, 0x217000A6, 0x21474F0F, 0x150F00DB, 0x685A2D57, 
0x0D3F0017, 0x3BEF1203, 0x3D200008, 0x00000000, 0x00030038, 0x4C120B0D, 0xAEBD4228, 0x0110807C, 
0x0F420604, 0x793F00E5, 0x402CD104, 0x7A0F00D4, 0x682CE9ED, 0x5C3F0052, 0xB0F45903, 0xF70200DD, 
0xA0C6C301, 0x4E6200B7, 0x3202BF65, 0x4F8080D4, 0x32013F07, 0x0002003A, 0x32A7183D, 0xAEBD4E1A, 
0x01820052, 0x600B1302, 0x155000A2, 0x43031C26, 0x6C2F00B2, 0x11443AE5, 0xA91F00F6, 0xA303F1EC, 
0xA94000A5, 0x2103A530, 0x1800006C, 0xBF126A2F, 0xC51F0077, 0x2803A392, 0x098F0064, 0x3FC70D2A, 
0x4320804A, 0x00F20043, 0x00010034, 0x5F560407, 0x00420804, 0xAEBD410B, 0x0B2080C0, 0x192B1331, 
0x0118006E, 0x302B0647, 0x4F2F007D, 0x3DA14F98, 0x25000079, 0x1D12F52F, 0x053080F8, 0x9839782B, 
0x111F0028, 0x7181449F, 0xD15A00CF, 0x3581267C, 0xD1600000, 0x00010000, 0x103F00A1, 0x5CB8D902, 
0x0020804B, 0x58022366, 0x0002003E, 0x4012040A, 0xAEBD410C, 0x0B2080C0, 0x192B1331, 0x01140066, 
0x07531B47, 0x4F2C007D, 0xAE834F36, 0x25000071, 0x8C0CB6E6, 0x053080FA, 0x67838392, 0x4D1F0021, 
0x71A14452, 0xD4600008, 0x00000000, 0x155200B6, 0xA2EBC506, 0x280000E5, 0x35874952, 0x193F00A0, 
0x5C0CA702, 0x0020804B, 0x7DF25C2C, 0x0002003A, 0x40230C0A, 0xAEBD410B, 0x0B2080C0, 0x192B1331, 
0x011A007E, 0x7FCD1B47, 0x4F2E0075, 0xAE05EEF3, 0x3F7000AB, 0x7E887C15, 0xF41E0004, 0x71A11DBA, 
0x234800D5, 0xF005F1E3, 0xD15000D1, 0x6E022851, 0x280000F5, 0xF2EDDF83, 0x103E00AB, 0xC502A747, 
0x0020804D, 0xA202550B, 0x0002003A, 0x40230C0A, 0xAEBD4108, 0x053C00F4, 0x69050620, 0x3F7000A5, 
0x6A0C6F67, 0xDF0F00F2, 0x190250C4, 0xD15F00D7, 0xA223F106, 0x2F700025, 0x35EDF182, 0x103F00B3, 
0x79DE6606, 0x0020804D, 0xA202550B, 0x00020032, 0x40420C0A, 0x00430803, 0xBEBD4006, 0x0110807E, 
0x28ED0600, 0xCD5F004D, 0xEF1F4104, 0x501F00C3, 0x4E5D5810, 0x062F00EC, 0x1DB3C50D, 0x0020804D, 
0x36025513, 0x00010032, 0x7C001827, 0xBEBD4206, 0x053080F8, 0xD61919CD, 0x182F0039, 0x1A1F0A04, 
0x155000B0, 0x7ED4384A, 0x062F00E2, 0x2D332427, 0x00208043, 0x26EF8D66, 0x00010032, 0x32CB0C27, 
0xBEBD4416, 0x18260023, 0x5E0B1304, 0x162E0092, 0x26444BC3, 0x745F0005, 0x4E442798, 0x062F00E2, 
0x2D332427, 0x00208043, 0x26EF8D66, 0x00040032, 0x32CB0C27, 0x00440803, 0xCEBD4308, 0x5B2080D4, 
0x3B0B061D, 0x011F007C, 0x28C30602, 0x915E007D, 0x23A40F2F, 0xC30000ED, 0x710510AF, 0x0B2600B5, 
0x12036A98, 0x0F4F0045, 0x4AC7C70E, 0xF78080D2, 0x03EF2519, 0x00010032, 0x32BA0C0A, 0x9E9D400A, 
0x011C0066, 0x07431B47, 0x192C0075, 0x4B4B6FBB, 0x7D208040, 0x6C017768, 0x2500007F, 0xDA1203F5, 
0x053080F4, 0x414B63D5, 0x3F7000AD, 0x765A5EF7, 0xC11F0004, 0x71874F98, 0xD24E00C1, 0x590CA70D, 
0x00208053, 0x3BEF1A32, 0x0002003A, 0x40A20C0A, 0x9E9D4E09, 0x0D18007E, 0x7F541B01, 0x192C0075, 
0x4B4B6FBB, 0x7D208040, 0x6C017768, 0x2504007F, 0xDA1203F5, 0x232F00DC, 0x12960AF7, 0xC45000EE, 
0x40FA1773, 0x182F0023, 0xCDC7D740, 0x0130801D, 0x27F22908, 0x0002002A, 0x0BA2360A, 0x0045080A, 
0xAEBD470A, 0x01108072, 0xA31C1306, 0x926A0023, 0x86351343, 0xDD1400CC, 0x341FEDBC, 0xFD5000A1, 
0x00010000, 0xF8200086, 0xA403278E, 0x816C0004, 0xF7446AB2, 0x295000A6, 0x71113949, 0x062E00E0, 
0x21C76D0E, 0x0020005B, 0x4C0D4202, 0x0001003C, 0x32120404, 0x8EBD4007, 0x087E004D, 0x281208F7, 
0x087E005D, 0x50122635, 0x2C1F006E, 0x0F050602, 0x155000BE, 0x03ED5E0C, 0x608F00C6, 0x54A81F27, 
0xC7208047, 0x6AEF7205, 0x0003003A, 0x32123C3D, 0xAEBD4608, 0x063080E1, 0x6908131B, 0x182F003D, 
0x60F90631, 0xFD5000A1, 0x00010000, 0xD1600002, 0x5E6A00F9, 0xC45C00FE, 0x4C005949, 0x062F00E0, 
0xD4B80E02, 0x0020805B, 0x70B3AC05, 0x0001003C, 0x3212230A, 0xAEBD4608, 0x063080EF, 0x3A191B0E, 
0x7E2A0024, 0x5E1FD146, 0xFD5000AD, 0x7AC4C0B4, 0xF8200082, 0x4D8F1C91, 0x81660006, 0x5ED0DDC2, 
0x062A00E4, 0x8CC7150E, 0x00208057, 0xDCEFF948, 0x00010038, 0x32120C36, 0x8EBD4017, 0x1F3080F0, 
0x0E010408, 0x037F0052, 0x01047C03, 0x08760053, 0x010100E3, 0x492A0024, 0x6E1BD10A, 0x1B5000BD, 
0x6E32596A, 0x098F006C, 0x6FB3770D, 0x00030036, 0x32042303, 0x8EBD4406, 0x08760059, 0x011437C5, 
0x0876005B, 0x011437C5, 0x087A0043, 0x28073B29, 0x011A006C, 0x0F6A1B0A, 0x013A000D, 0x7CB3140D, 
0x00030032, 0x4C071800, 0x8EBD4208, 0x44700058, 0x04013B6B, 0x0110007E, 0x0F540647, 0x192F007D, 
0x69900636, 0x3F7000A5, 0x7D4727C5, 0x087F005D, 0x5012DA6B, 0x087F005B, 0x5012BFE3, 0x131F0052, 
0x2EEF2402, 0x00040030, 0x32693C13, 0x8EBD4207, 0x087F005F, 0x50125693, 0x087F005F, 0x5012A524, 
0x0110007E, 0x7F050647, 0x082F0066, 0x2DE80666, 0x3F7000A1, 0x00010000, 0x131F0042, 0x36EF5643, 
0x00040032, 0x32011B3D, 0x8EBD4017, 0x1F3080E0, 0x1A014713, 0x087A005F, 0x501251F2, 0x1D2E002D, 
0x5EAE0628, 0x215000A8, 0x1B003924, 0x295000A6, 0x71113949, 0x3E2F00E2, 0x26A81502, 0x00030038, 
0x32120C0E, 0x8EBD4208, 0x44700058, 0x04013B6B, 0x0110006E, 0x0F540647, 0x192F007D, 0x69900636, 
0x087F005D, 0x5012DA6B, 0x3F7000A5, 0x7D4727C5, 0x087F005B, 0x5012BFE3, 0x131F0052, 0x2EEF2402, 
0x00040030, 0x32693C13, 0x0046080C, 0xCEBDC10A, 0x136600CF, 0x7D047B6C, 0x011F0060, 0x426B190A, 
0x12600040, 0x00010000, 0x103F00B5, 0xA46BDA95, 0x00208055, 0x7C02E359, 0x03060075, 0x3A098F2E, 
0x7F3C00C8, 0xA00FDB37, 0x1B0000FE, 0x6EF5D31C, 0x048F00CF, 0xA502DB0A, 0x0004003E, 0x5F09D437, 
0xCEBDC10A, 0x7F3C00D8, 0x4B770A36, 0x1B0000FC, 0x6E49CFC6, 0x048F00DB, 0xA56BADC6, 0x03060073, 
0x7309F8A1, 0x136600CF, 0x2F07DCBE, 0x011F0068, 0x0D4CDEA2, 0x12600040, 0x00010000, 0x103F00A7, 
0x56232B04, 0x00208051, 0x5F024213, 0x0002003C, 0x5F032D0D, 0x8EBD4007, 0x6B7C0050, 0x04002219, 
0x011E006C, 0x3044060A, 0x7F3E0001, 0x72003B6D, 0x050A009B, 0x8C013B3B, 0x3F8F00C6, 0x1C6C3E26, 
0x608600C6, 0x734C556D, 0x00010038, 0x32031B6E, 0x8EBD4006, 0x6B7F005C, 0x50120ACE, 0x136F00DD, 
0x50120AA0, 0x011F0064, 0x07240636, 0x513F00B6, 0x20EF2104, 0x00208041, 0x32EF5C04, 0x0002003A, 
0x7C120B03, 0x8EBD4408, 0x0110806E, 0x3054D109, 0x192F007D, 0x696FD104, 0x1B5000B7, 0x756DED6E, 
0x3F7000A7, 0x21474F0F, 0x087F005B, 0x5012A949, 0x401F0056, 0x14EF1202, 0x01308013, 0x7B040206, 
0x0004003E, 0xA7120447, 0x8EBD4508, 0x087F0059, 0x501222BA, 0x011A007C, 0x0F42D101, 0x192F0071, 
0x3D45442B, 0x1B5000B7, 0x756DED6E, 0x3F7000AF, 0x215A4F86, 0x401F0042, 0x41EF1402, 0x01308013, 
0x7B040206, 0x00040038, 0xA7120C0D, 0x8EBD4509, 0x5111807D, 0x766ED101, 0x192F0063, 0xA02DE05B, 
0x1B5000B7, 0x756DED6E, 0x3F7000B5, 0x32013B27, 0x401F0042, 0xA7CDA955, 0x3E0A009D, 0xA704323A, 
0x3F8F00C4, 0xA8CDDE3A, 0x608600D0, 0x63F0DF20, 0x0002003C, 0x32021B1A, 0x8EBD4206, 0x663000C3, 
0x770A190E, 0x087F0055, 0x5000513E, 0x492F0030, 0x771C1920, 0x1B5000AF, 0x782A591A, 0x043F8006, 
0x7CEF2B04, 0x00030034, 0x2C00D10D, 0x8EBD4005, 0x6B7C005E, 0x501208F4, 0x6B7C005E, 0x501208F7, 
0x011E007E, 0x680C0602, 0x043E0000, 0x7CEF020B, 0x0004003C, 0x2C12040D, 0xCEBD4707, 0x5B3F80EC, 
0x79F0D104, 0x136400C7, 0x2800033C, 0x520F00C3, 0x33657D5C, 0x533F00B6, 0x79F17804, 0xFC0000EE, 
0x7AF16319, 0x2D208057, 0x7AEF253D, 0x00020030, 0x320E3C0D, 0xCEBD4707, 0x5B3F80F4, 0xA8110620, 
0x520F00D5, 0x28AF7AA2, 0x5C3F005E, 0x4BAF0F59, 0xF70200CD, 0xA91BB34A, 0x4E6200AB, 0x4D0D130A, 
0x4F8080CE, 0x8E022453, 0x0002003A, 0x321C5670, 0x00004E09, 0x1A1A007D, 0x766ED133, 0x983F005F, 
0x4BAF0F6C, 0x8F5F008D, 0xA91B2B16, 0xE58400C2, 0xA7CDA955, 0x7A0000C2, 0xA7CDA955, 0x155700A4, 
0xA8CDDE3A, 0x628F00C7, 0xA8CD2366, 0x048080D1, 0x63F0DF20, 0x6D02003D, 0x3202411A, 0x00470805, 
0xAEBD450A, 0x053080FA, 0x41061246, 0x182F0031, 0x1A282720, 0x272F00EF, 0x86B13D1D, 0x00208041, 
0x00010000, 0x030C0077, 0x1E00563C, 0xE43080E7, 0x052DE061, 0x111F003C, 0x1439615D, 0x33600010, 
0x7EB0602B, 0x0D3F0019, 0x26024531, 0x0004003A, 0x64090C02, 0xCEBD4719, 0x01108072, 0x4C011909, 
0x063E00E5, 0x2E35D10A, 0x745F0007, 0x31F21249, 0x1E2A0097, 0x1271611C, 0x150F00DF, 0x386F0FA6, 
0x229F0067, 0x3BDEC004, 0x95800086, 0xABC73106, 0x048080D7, 0xABC7643D, 0x0001003A, 0x32233C22, 
0xAEBD4208, 0x103080E0, 0x00010000, 0x182F0023, 0x342A0445, 0xFD5000A1, 0x00010000, 0x162F0080, 
0x7D2AAE71, 0x087C004F, 0x3204AE71, 0x0026005D, 0xF8063E72, 0x0130800B, 0x7E02E16F, 0x0003003A, 
0x5F041872, 0xAEBD4108, 0x103080E0, 0x2D1B1933, 0x182F0027, 0xF7440602, 0xFD5000A9, 0x00000000, 
0x1E2F0097, 0x2096134C, 0x964C0072, 0x08C73406, 0x968000DB, 0x49AF0805, 0x758080C4, 0x54EF432A, 
0x00010038, 0x5F120C0B, 0xBEBD4509, 0x053080E8, 0x00000000, 0x182F0021, 0x342A0400, 0x272F00ED, 
0x0000301B, 0x00208049, 0x00000000, 0x030C0061, 0x7C000000, 0x973F00EC, 0x7FF21601, 0xC4600009, 
0x00000000, 0x972F0009, 0x00000400, 0x00040028, 0x00000400, 0x00480808, 0xAEBD410B, 0x063080E1, 
0x0B011900, 0x036F00DA, 0x0B123736, 0x0D1E006A, 0x11130A09, 0x013C0019, 0x3412650F, 0x00208041, 
0x00010000, 0x330C005D, 0x0F1202F7, 0x036000D2, 0x5000BA4E, 0x1A1C006C, 0x0FCF1126, 0x0D3C0011, 
0x0920150D, 0x12208041, 0x00010000, 0x00030032, 0x4C150800, 0xAEBD410B, 0x063080E1, 0x0B011900, 
0x036000D0, 0x5004373E, 0x011F0064, 0x116B0609, 0x013C0015, 0x3404F50F, 0x00208041, 0x00014A08, 
0x330C0057, 0x5804F573, 0x036F00D2, 0x5004BAFA, 0x571F006C, 0x076AF526, 0x013C001D, 0x09F2F50D, 
0x12208049, 0x00000000, 0x00030032, 0x2C045D00, 0xCEBD410A, 0x011E0076, 0x2D1ED170, 0x082C0062, 
0xDBE0CC0E, 0x2E000098, 0x2C00525C, 0x131F004E, 0x32C6371C, 0x048080CB, 0x2DB01218, 0x33060049, 
0x6501510A, 0x571C006A, 0x44C66070, 0x013C0009, 0x04F2600D, 0x12208041, 0x00010000, 0x00030032, 
0x2C041800, 0xCEBD450B, 0x01108062, 0x102D0406, 0x22560065, 0x7F29D104, 0xDF0F00EC, 0x355ED10A, 
0x013F0007, 0x87B17095, 0x03060061, 0xAE070696, 0x011F007C, 0x186A4A26, 0x983F0053, 0x4BF3E21D, 
0x995F001E, 0xB41EDF2D, 0x998400C5, 0x4346E201, 0x568480C7, 0x7D46524B, 0x0001003C, 0x32034E25, 
0xCEBD430A, 0x0B2080C0, 0x7E721336, 0x0D1F007E, 0x38EBD101, 0x013F0009, 0xAFA2E384, 0x03060073, 
0xAF005F73, 0x011F006A, 0x30455F87, 0x98380053, 0x4B773838, 0x995F001E, 0xB41EDF2D, 0x998400C5, 
0x4346E201, 0x568480C7, 0x7D46524B, 0x0001003A, 0x32FB253D, 0xCEBD410B, 0x063080E1, 0x660A4740, 
0x0D1F007E, 0x685CD101, 0x013C0019, 0x42F32084, 0x00208049, 0x00000000, 0x54060078, 0xFA075F22, 
0x103080E0, 0x00010000, 0x011F0062, 0x302E20A2, 0x013C0005, 0xB02EDF7F, 0x2E000084, 0x7801E34A, 
0x048C00D9, 0xDF62E40D, 0x0001003C, 0x40035D06, 0xCEBD4709, 0x063080E1, 0x00010000, 0x0D0E00C6, 
0x121C061A, 0x9A5F0062, 0x405AA21F, 0xC50800E8, 0x7DDB729E, 0xE56000A0, 0x00010000, 0x9A5F0017, 
0xF2C1A3CB, 0x0D2C00EB, 0x3FB31422, 0x12208041, 0x00010000, 0x0001003C, 0x2C120402, 0xCEBD4707, 
0x063080E1, 0x00010000, 0x0D0E00C6, 0x121C061A, 0x9A5F0060, 0x405AA242, 0x9A5F0017, 0xF2C1A354, 
0x0D2C00EB, 0x3FB31422, 0x12208041, 0x00010000, 0x0001003C, 0x2C120402, 0x00490807, 0xAEBD4008, 
0x6B7C004E, 0x7612518F, 0x011E0076, 0x0F420602, 0x043E001A, 0xD412BCF0, 0x2E0A008C, 0x1112C030, 
0x048F00D3, 0x70C1BF53, 0x048F00D3, 0xA6B85637, 0x6F20805A, 0x0E00470A, 0x00040030, 0x32CB0C1D, 
0xAEBD4507, 0x053080E8, 0x9BCD19CD, 0xF41E0004, 0x68A9D10A, 0x234800CD, 0x0EF52B59, 0xDE0700CE, 
0x25B38432, 0x4E6000A5, 0x8B01950D, 0x9C8080CD, 0x7D02554F, 0x00010022, 0x0B150B77, 0xAEBD4707, 
0x011F807A, 0x937A1956, 0x155000B8, 0x2E15DE38, 0x162F0080, 0x215D57C8, 0x455F001C, 0x180AF54E, 
0x098C0078, 0x09F2570E, 0x1220804D, 0x0B02FE04, 0x00020030, 0x3220180B, 0xAEBD4005, 0x2171005B, 
0x041259F4, 0x6B72005E, 0x501251E3, 0x011C007C, 0x7F2E0602, 0x013A0009, 0x4D143506, 0x0004003E, 
0x2C127E07, 0xAEBD4506, 0x053C80F0, 0xB00C190A, 0xF41F0000, 0x270C68ED, 0xD34800C0, 0x0001001C, 
0xDE5F009D, 0x610DE59C, 0x048280C3, 0x00014A0D, 0x00010030, 0x5F013616, 0xAEBD4307, 0x103080E8, 
0x2D0019CD, 0x048000CF, 0xEC00D16D, 0x162E0090, 0x56011364, 0x150200DF, 0x28177AE0, 0x103C00BF, 
0xE7007A03, 0x00208047, 0x1D027E04, 0x0003002A, 0x0B030803, 0xAEBD4307, 0x103080E0, 0x2DC119CD, 
0x048000CF, 0xECB3D104, 0x162E0098, 0x03ED421D, 0x150200DF, 0x28C37A5C, 0x945F0067, 0x9B66C703, 
0x00208043, 0x1DEF3C04, 0x0003002A, 0x0BFB0803, 0x004A0B07, 0xCEBD4008, 0x011E0078, 0x28881936, 
0x103E00B9, 0xB100E6C2, 0x00208041, 0x00010000, 0x05080081, 0x00010000, 0x01108060, 0x00010000, 
0x048C00DD, 0x3200E603, 0x048080C1, 0x00010000, 0x00040020, 0x00010000, 0xCEBD4307, 0x103080E8, 
0x0B001900, 0x048000DD, 0x6300D103, 0x162E0080, 0x0801421B, 0x150200CD, 0xF517770A, 0x103C00B3, 
0xFC13B006, 0x00208047, 0x6602FE65, 0x0003003C, 0x3203B00D, 0xCE694307, 0x103080E8, 0x0B001900, 
0x048000DD, 0x6300D103, 0x162E0080, 0x0801421B, 0x150200CD, 0xF517770A, 0x945F0067, 0x9B66C703, 
0x00208047, 0x6602FE65, 0x0003003C, 0x3203B00D, 0x9EAD4005, 0x0872005D, 0x50120AF7, 0xC58F001F, 
0x386F0602, 0x193F00A6, 0x560CC706, 0x00208047, 0x7CEF6413, 0x00020038, 0x02120C06, 0xCE8D4506, 
0x7F3C00D4, 0x48F63B5E, 0xF41F0000, 0x35F6464E, 0xD34000D6, 0x51F644B4, 0x229F0069, 0x9B671F7C, 
0x0020805D, 0x56022C10, 0x0001003E, 0x32A70403, 0xAE9D4008, 0x0110806C, 0x3747060D, 0x048F00CD, 
0x3747060D, 0x048080C5, 0x4C20C51D, 0x05080091, 0x61094179, 0x011E0060, 0x00010000, 0x103E00A3, 
0xB2A86603, 0x00208041, 0x00010000, 0x00040030, 0x7C000C0D, 0xCE694E06, 0xFE2080C0, 0x1D031936, 
0x0961009F, 0x6312BA0F, 0xC58F000D, 0x316FD10A, 0x945F0067, 0x9B66C703, 0x7D208046, 0x15EF6419, 
0x0001003A, 0x88120C03, 0x004B0803, 0xCEBD430B, 0x0110807A, 0x4C17190E, 0x22500075, 0x7C0C3B36, 
0xDF0F00F4, 0xFF3DD10A, 0x013F0003, 0x7E3D60C8, 0x0300006B, 0x7803E80E, 0x182F0021, 0x812F6014, 
0x745000B0, 0x5F13B12E, 0x280000FD, 0x5F17C55E, 0x062F00EE, 0x65623E00, 0x00208049, 0x00000000, 
0x00010036, 0x5FE54E46, 0xCEBD400C, 0x063080E1, 0x00010000, 0x571F006C, 0x31750604, 0xFA3F0012, 
0x7C02FAA3, 0x03060061, 0x78026871, 0x0A3000E0, 0x6601497A, 0x011F0066, 0x6002682B, 0x043F0012, 
0x4C0250C3, 0x05060083, 0x6002BDEC, 0x0A3080E8, 0x00000008, 0x2C1F007E, 0x2C32E8E8, 0xCC8F0075, 
0x73026813, 0x00020030, 0x5F023613, 0xCEBD400A, 0x063080E9, 0x4D384725, 0x011F006E, 0x31751B09, 
0x013F0011, 0x42F82DBA, 0x0300006D, 0x78120230, 0x1D2F0025, 0x0DCF6AF2, 0x915000A6, 0xDACFBC59, 
0x280000EF, 0x35F6893A, 0x062F00E4, 0x3FC71006, 0x00208041, 0x00010000, 0x00010028, 0xCD120C02, 
0x004C0804, 0xBEBD4109, 0x1A108079, 0x28231903, 0x0B2400D6, 0x3B210670, 0x755F002B, 0x0D6F595C, 
0x12600056, 0x68E42636, 0x9C3F008E, 0x86DF0F42, 0xF410001C, 0xF233A354, 0xFA8F00C3, 0x7CC73C3D, 
0x568080D3, 0x09EF1A05, 0x00010030, 0x32CB3C72, 0xBEBD4108, 0x1A108079, 0x28231903, 0x0B2400D6, 
0x3B210670, 0x755F002B, 0x0D6F595C, 0x12600056, 0x68E42636, 0xB55F006E, 0x86DF0F08, 0xFA8F00C3, 
0x7CC73C3D, 0x568080D3, 0x09EF1A05, 0x00010030, 0x32CB3C72, 0xBEBD4205, 0x571F006C, 0x3115060B, 
0x265200BC, 0x034A0F0C, 0x9C8F00DB, 0x09B33C19, 0x9C8080D3, 0x09EF1A09, 0x00030030, 0x32690C0D, 
0xBEBD4506, 0x011F8064, 0x5E5A5D0B, 0xDE5F0093, 0x4705B108, 0xF4120018, 0x4962E546, 0x062F00FC, 
0x7A015D14, 0x00208047, 0x08EF5D05, 0x00040030, 0x32EF1703, 0x004D0804, 0xCEBD420C, 0x01108070, 
0x76761911, 0x2250007D, 0x8A61CE1D, 0xDF0F00E6, 0x35E40602, 0x082F0066, 0xE8050264, 0x3F7000A7, 
0x7605207D, 0xDF0F00E2, 0x38050664, 0x082F0066, 0x3A060225, 0x3F7000A1, 0x00010000, 0xDF0F00E6, 
0x38A04764, 0x098F0060, 0x3FC7450E, 0x00208041, 0x0801005B, 0x00010032, 0x32890C3D, 0xCEBD420B, 
0x0B2080C0, 0x4053475E, 0x2986004F, 0x30131B58, 0x082C0064, 0xE8056DF9, 0x3F7000B3, 0x5605606A, 
0xDF0C00E6, 0x38050225, 0x082C0064, 0x3A0502F7, 0x3F7000B1, 0x123B37F5, 0xDF0C00E6, 0x38650257, 
0x098C0062, 0x3FC70347, 0x00208041, 0x65012376, 0x0001003A, 0x32120C3D, 0xBEBD400A, 0x01108066, 
0x14FF0647, 0x573F00F5, 0x41FFD104, 0x18000070, 0xDA047D01, 0x1F0200C9, 0x68ED1F3A, 0xCA6000A1, 
0x00010000, 0x162F0088, 0x1D05842B, 0x150F00D1, 0x7F772D98, 0x098F0062, 0x3FC71E00, 0x00208055, 
0x7AEF6437, 0x0002003A, 0x32123C0A, 0xCEBD4E09, 0x0114806C, 0x140C0646, 0x573F00F5, 0x41E8272F, 
0x1F0F00CB, 0xCD7AD22E, 0xCA6000A9, 0x00090000, 0x4D220082, 0x21FEA307, 0x150F00D9, 0x144729D3, 
0x098F0060, 0x3FB81502, 0x00208049, 0x36006303, 0x0002003A, 0x32123C3D, 0x004E0804, 0xCEBD420A, 
0x01108072, 0x28771903, 0x0B2000CA, 0x3ACD1301, 0x298A0045, 0x116F1B0E, 0x082F0076, 0x3BF953BB, 
0x3F7000B9, 0x6CB624EA, 0xDF0F00EC, 0x7133432F, 0x2F600069, 0x00390008, 0x098F0062, 0x3FC7163D, 
0x00208041, 0xBCEF7328, 0x0001003A, 0x32120C3D, 0xCEBD420A, 0x01108062, 0x102D1946, 0x2250007D, 
0x4B61D10A, 0xDF0F00F6, 0xF2D60602, 0x082F0060, 0xE805063C, 0x3F7000A3, 0x0001005E, 0xDF0F00FC, 
0x14F9023C, 0x2F600069, 0x00000D1C, 0x098F0062, 0x3FB8453D, 0x00208041, 0x08EF2507, 0x00010038, 
0x32AC0B09, 0xBEBD4007, 0x01108066, 0x1E1A0647, 0xB23F00F5, 0x6724D131, 0x18000092, 0x1D00417B, 
0x1F0C00C7, 0x3DB361BB, 0x082C0064, 0x1D3053FD, 0x002E005B, 0x5DB33207, 0x00040024, 0x0B150402, 
0xBEBD4009, 0x5710807C, 0x2D540609, 0x573F002F, 0xE8440602, 0x18000092, 0x1D00007B, 0x1F0C00D5, 
0xF243026D, 0x413F000E, 0xE8EE4721, 0x180A009C, 0x5512444E, 0x341F0060, 0x0D426F4E, 0x413F0002, 
0x1DEF2E47, 0x00060038, 0x32120B0E, 0x004F0803, 0xCEBD4006, 0x063080E3, 0x6C2F1919, 0x0C4C0035, 
0xEF440604, 0x0B2F00B5, 0x114403D3, 0x0F4C0047, 0xA5C7C500, 0x048080D3, 0x56EF1A43, 0x0001003A, 
0x40120C01, 0xCEBD4204, 0x384C0056, 0xDB61065A, 0x203F0099, 0x4837281F, 0x2D4C003E, 0x71241C6D, 
0x0002003E, 0x0E090633, 0xCEBD4E04, 0x6C4200CC, 0x4D00D907, 0x6C1F00E3, 0x81017D02, 0x6D4F00BC, 
0x7300D331, 0x6D02003F, 0x8B001401, 0x00500802, 0xCEAD400C, 0x0B2080C0, 0x192B1331, 0x011F006E, 
0x120C0647, 0x9D3F0017, 0xAE78569C, 0x00208041, 0x6C017768, 0x2506009D, 0x1D1256F2, 0x053080FA, 
0x418B8392, 0x3F7000AF, 0x8B5AEDE6, 0x111F0020, 0x71A1222F, 0x2E600001, 0x0D052DDE, 0x103F00B3, 
0xB5EF3206, 0x00208051, 0x79EF1240, 0x0003003A, 0x40230C0E, 0xCEAD4009, 0x0B2080DE, 0x20050605, 
0x0D14006C, 0x0F0C065E, 0x192A0071, 0x3D051F98, 0x3F7000A5, 0x1D056F2B, 0xF41F0000, 0x71ED4435, 
0x234C00D3, 0x25A07919, 0xD350008D, 0xD978167D, 0x048080D3, 0xB5EF0809, 0x0001002A, 0x03230C0A, 
0x00510804, 0xCE8D400B, 0x063080E3, 0x3A03191A, 0x0C4C0037, 0xEF44065E, 0x0B2C00B5, 0x11447AD3, 
0x0F4C005B, 0xA321F5F5, 0xA94000A5, 0x2103A530, 0x3E06007D, 0xEC12272F, 0x053080E0, 0x00010000, 
0x20880058, 0x384E78D3, 0x0D3E0005, 0x26A86D0E, 0x00208041, 0x00010000, 0x0002003A, 0x2C120E00, 
0xCE8D4208, 0x384F0040, 0x00010000, 0x203F0081, 0x00010000, 0x2D4F0030, 0x285104CB, 0x3E06006D, 
0xA312272F, 0x298C005D, 0x7F2084D3, 0x0D3E0005, 0x26A86D0E, 0x00208041, 0x00010000, 0x0002003A, 
0x2C120E00, 0xCEBD4707, 0x01108060, 0x00010000, 0x663200C5, 0x553BD10E, 0xDF0F00E0, 0x38E23AD3, 
0x1D5E0042, 0x5606523B, 0x9F0A00F5, 0x03FC2F09, 0x9C8000C1, 0x00010000, 0x00010032, 0x32000C45, 
0xCEAD4409, 0x0B2080DA, 0x7C0D1243, 0x0C4C0027, 0x02440602, 0x155000A0, 0x00010000, 0xE42C00A6, 
0x21C9567D, 0x31400040, 0x00010000, 0x150A00DB, 0x372D1F5C, 0x2F8E006E, 0x3AB3FD02, 0x00208043, 
0x00020005, 0x0001003A, 0x4C120803, 0x00520803, 0xAEBD400C, 0x0B2080C0, 0x0B02191A, 0x0D1A0064, 
0x0F7E1B02, 0xFA3F0018, 0x3DA16A98, 0x25000079, 0x1D126FD3, 0x053080F8, 0x6968A2D3, 0x111F0030, 
0x19852298, 0x65600016, 0xDE1C2025, 0x07600074, 0x28181D1E, 0x155200AE, 0x354A0A1F, 0x098F0062, 
0x3FC70303, 0x00208049, 0x08000000, 0x0001003A, 0x32120C03, 0xAEBD400C, 0x0B2080C2, 0x2EB419F9, 
0x0D180066, 0x07530647, 0x082F0078, 0x69A11F98, 0x2500007F, 0x1D12087D, 0xA07000A5, 0x3A056AD3, 
0xF41F0002, 0x71ED44FB, 0x07600070, 0x2818411C, 0x234800D5, 0x1605C0E3, 0x280000FD, 0xF2B7A3B2, 
0x098E0062, 0x3FC77307, 0x00208041, 0x08EF1200, 0x0001003C, 0x32120413, 0xAEBD400C, 0x01108060, 
0x00010000, 0x0B2080C0, 0x362F1904, 0x0D150064, 0x3049060B, 0x192F0077, 0x690515F4, 0x3F7000A1, 
0x2105E098, 0xDF0F00E0, 0x71509419, 0x65600016, 0xDE1C2025, 0x076F0074, 0x28180A1E, 0x155000AC, 
0x356D0F2E, 0x098F0060, 0x3FC72E0D, 0x00208049, 0x08000000, 0x0001003A, 0x32120C00, 0x00530804, 
0xCEBD4008, 0x053080F8, 0x6723475E, 0x7E2A0035, 0x1A960628, 0x505000B2, 0xF2062FF7, 0x12600054, 
0x4698511E, 0x7C60000E, 0x4E5A26CC, 0x103F00A3, 0x0EE37F03, 0x00208043, 0x76EF1A06, 0x00020032, 
0x32360B0A, 0xCEBD4208, 0x9E10807C, 0x4FB10603, 0x232400CC, 0x1DED065E, 0xCF5F0003, 0x317A2EEB, 
0x5A600056, 0x46E42636, 0xC63F009A, 0x4BA1F549, 0xA21F0002, 0x473D3319, 0x048080DF, 0x03022F01, 
0x0001003A, 0x3228250A, 0xCEBD4207, 0x0B2800D4, 0x200B0636, 0xBF5F0034, 0x28A92153, 0x5A60005C, 
0x4658561E, 0x393E00A6, 0xD4E35B04, 0xC60000EF, 0x43F23131, 0x00208057, 0x6CEF6406, 0x0001003A, 
0x32120C0A, 0xCEBD4207, 0x9E10807C, 0x4FB10603, 0x232400CC, 0x1DED065E, 0xCF5F0003, 0x317A2EEB, 
0x5A600056, 0x46E42636, 0xB55F006E, 0x86DFE308, 0x048080DF, 0x03022F01, 0x0001003A, 0x3228250A, 
0x00540806, 0xCEBD4106, 0x048800CD, 0x322BD146, 0x048800C5, 0x3956152F, 0x0302006B, 0xDA122451, 
0x011A0070, 0x6024D24E, 0x013C0005, 0x3AA86D0B, 0x00030030, 0x32150B0E, 0xCEBD4106, 0x011A0066, 
0x12FF0602, 0x013C0015, 0x4B517667, 0x0306006B, 0x1112B3C6, 0x048800DB, 0xB2B4523D, 0x048800D5, 
0x19C72504, 0x00040034, 0x32694E0B, 0xAEBD4004, 0x087E005F, 0x50120A0F, 0x571E006E, 0x120CD102, 
0x013F0007, 0x4DEF5306, 0x00030030, 0x320E0B06, 0xCEBD4E06, 0x1F3F80F0, 0x41781327, 0x520F00C9, 
0x316CFDB2, 0x533F00A2, 0x69131F03, 0xFC0000FA, 0x251D7A06, 0x2D208055, 0xFDEF6441, 0x0002003A, 
0x32124003, 0xCEBD4105, 0x0C7F005C, 0x50122653, 0x011F0066, 0x31EA0602, 0x103F00A5, 0xF4EF217A, 
0x00208047, 0x7DEF1413, 0x00030038, 0x32EE0C06, 0x00004306, 0x011A006C, 0x120C061D, 0x5C3F0042, 
0x2D26B67A, 0xF70200C9, 0x430C3301, 0x048800C7, 0xCBB8B900, 0x4F8080C0, 0x61EF0E07, 0x0002003E, 
0x32120401, 0x00550803, 0xCEBD4109, 0x01108060, 0x00010000, 0x1D5F0042, 0x00010065, 0x1B0F00E0, 
0x000100E0, 0x07600060, 0x00010000, 0x1E2F0085, 0x1D19662B, 0x150F00C7, 0x67770295, 0x098C0068, 
0x3FB00302, 0x00208041, 0x00010036, 0x00010032, 0x32040B0E, 0xCEBD4008, 0x063080EF, 0x486C061A, 
0x298C005D, 0x7F63D157, 0x07600060, 0x0001001C, 0x162F0082, 0x1D035F25, 0x150F00D5, 0x1803113C, 
0x098E0068, 0x3FB00302, 0x00208041, 0x00010036, 0x00010038, 0x32120B02, 0xCEBD4204, 0x571F0076, 
0x37030602, 0x1E2F009F, 0x120E1721, 0x122F0043, 0x71EF2E02, 0x0003003E, 0x7C120427, 0x00560803, 
0xCEBD4208, 0x0B2080D0, 0x7C13192A, 0x111E0024, 0x11641B72, 0x07600064, 0x78171CCD, 0x1E2F008D, 
0x1D360298, 0x155000A4, 0x7C0611D3, 0xA31F0043, 0xC8A82E02, 0x048080C1, 0x00010000, 0x0002003C, 
0x02120413, 0xCEBD4308, 0x11108038, 0x3A2A191A, 0x225C0075, 0x983CD104, 0xDF0F00F8, 0xFFFF653D, 
0x07600060, 0x00010000, 0x162F008E, 0x7E0EF56A, 0xA41F004A, 0x270E651A, 0x048080C1, 0x00010000, 
0x0002003A, 0x02031B03, 0xCEBD4005, 0x063080F1, 0x9F7A4704, 0x298C0057, 0x28431B02, 0x082F0076, 
0xD643020F, 0x432F0046, 0xCDEF1202, 0x0003003C, 0x02EE040D, 0x00570803, 0xCEBD400A, 0x063080FB, 
0xC0B81905, 0xFC8F0045, 0x1E030636, 0x07600072, 0x3A172803, 0xD44000EB, 0x3B30660A, 0x082F0076, 
0x4219207D, 0x150E00C5, 0x1E031EC9, 0x082F007E, 0x422802F4, 0x958F0082, 0xCDC7D740, 0x09808060, 
0x54EF2520, 0x00020028, 0x0BA23606, 0xCEBD4E0A, 0x01108072, 0x28991946, 0x225F0075, 0x8D103B27, 
0xDF0F00E4, 0x35746FCF, 0xD44000EB, 0x3B30660A, 0x082F0070, 0x671C7097, 0xDF0F00F0, 0x682406EC, 
0x082F007C, 0x67CF96DC, 0x958F0082, 0xCDC7D740, 0x09808060, 0x54EF2520, 0x00020028, 0x0BA23606, 
0xCEBD4E0C, 0x0D1E006C, 0x11B6D104, 0x013C0015, 0x3400660F, 0x1804007E, 0x15011E44, 0x1A15006C, 
0x424A0226, 0xA43C0013, 0x09201559, 0x18010066, 0xAE001E44, 0x0D1E006C, 0x114A214E, 0x013C0015, 
0x3400660F, 0x18040076, 0x15001E44, 0x1A1C006C, 0x424A2026, 0x0D3C0013, 0x09201503, 0x00030030, 
0x4C000B0D, 0x00580806, 0xCEBD400A, 0x053080E0, 0x00010000, 0x111A0032, 0xF20A1358, 0x062C00E4, 
0xBD4C17D0, 0x00208057, 0x8A01EDD0, 0x0506009B, 0x4E022012, 0x053080E8, 0x00000008, 0x182C0029, 
0x5E0EA0A5, 0x103C00BB, 0x1E022E00, 0x00208041, 0x00010000, 0x0004003C, 0x4C030410, 0xCEBD400A, 
0x053080E0, 0x00010000, 0x492F0020, 0x00010000, 0x193F00A0, 0x00010000, 0x00208041, 0x00010000, 
0x2E0E0080, 0x00010000, 0x053080E0, 0x00010000, 0x4D1F0031, 0xF2010000, 0x062F00E0, 0x03010000, 
0x00208041, 0x00010000, 0x00010020, 0x00010000, 0xCEBD4208, 0x01108060, 0x00010000, 0x232F00C0, 
0x00010000, 0x131F0040, 0x00010000, 0x05060081, 0x00010000, 0x011F0060, 0x00010000, 0x062F00E0, 
0x00010000, 0x00208041, 0x00010000, 0x00010020, 0x00010000, 0xCEBD4408, 0x111E0020, 0x00011300, 
0x103E00A1, 0x00013100, 0x00208041, 0x00010000, 0x03060079, 0x2C123130, 0x182E003D, 0x1A1F3B04, 
0x062E00F2, 0x3933B427, 0x00208047, 0x26042F07, 0x0002002A, 0x65EE4527, 0xCEBD4007, 0x053080E0, 
0x00010000, 0x571F0068, 0x73421331, 0x043F0012, 0x4B014905, 0x05060097, 0x49001154, 0x571F0070, 
0x4F012F04, 0x043F0012, 0x12EFEE00, 0x00020030, 0x4C000806, 0xCEBD4007, 0x053080E0, 0x00010000, 
0x571F006E, 0x440CD102, 0x043F0010, 0x9EB1433C, 0x05060083, 0x5A004364, 0x571F0070, 0xFF010646, 
0x043F0010, 0x73EF020B, 0x00020036, 0x5F000403, 0x00590802, 0xCE8D4209, 0x01108062, 0x5F761904, 
0xA53000E1, 0x2EFC1920, 0x298C005F, 0x7F630602, 0x062C00E0, 0x1D0D06C9, 0x0300007F, 0x2514F5E0, 
0x298C0045, 0x6D471383, 0x258F0024, 0x2DB8FD0B, 0x708080C9, 0x7CB37310, 0x00010028, 0x0B1240CD, 
0xAEBD4007, 0x011F0064, 0x11B70602, 0x162F008E, 0x7C0AA054, 0x002F004D, 0x16091D8B, 0x05040089, 
0x9E09EF55, 0x571F006A, 0x146EBC35, 0x043F001C, 0x12027365, 0x0004003C, 0x2C09040B, 0x005A0F02, 
0xAEAD400A, 0x103080EC, 0x58000636, 0x036000D2, 0x08046841, 0x111E0034, 0x1585D128, 0xD162000A, 
0x4A153721, 0x07600064, 0x3DA126DE, 0xFD5000B2, 0xA2383829, 0x1B0000E0, 0x00010000, 0x062C00E2, 
0x3FEFCB06, 0x0020805F, 0x7A025D33, 0x0003003A, 0x32120C0A, 0xCE5B4209, 0x053080FE, 0x4C170603, 
0xA6520045, 0x2E2D060B, 0x111F0034, 0xDB6621F3, 0x07600060, 0xBF318C5F, 0x155C00B4, 0xFBE3F871, 
0x1B0000F4, 0x6E3CF83D, 0x258F0022, 0x48D31F00, 0x0020804F, 0x58026804, 0x00010038, 0x3204180D, 
0x00FF2D02, 0xBF7D2006, 0x182F802D, 0x50214453, 0xFD5100B5, 0x27A022D2, 0xC45000F6, 0x46B8EFD2, 
0xFD5100B7, 0x5624EF0C, 0x062F80EE, 0x26041585, 0x020A0038, 0x25044F9C, 0xBFBD2207, 0x1A1F006A, 
0x6D056B09, 0xFD5000A7, 0x8FA0EFA5, 0xCD3F8012, 0x980497D2, 0x050A008B, 0x730197D2, 0x0C7E0054, 
0x6F002019, 0x7D760055, 0x00AE20C1, 0x00030034, 0x1F002C11, 0x005C2D01, 0xCF7D2004, 0x1A1F8060, 
0x68340BD3, 0x2F700023, 0x685C0BD3, 0x113F001D, 0x3B9D15F5, 0x020A0026, 0x7100154D, 0x00FF2D01, 
0xBF7D2006, 0x111F002C, 0x47A0322B, 0xFF71009E, 0x0FB76A20, 0xCB5100D0, 0x4CB89755, 0x2E610007, 
0xA3A8B41E, 0x693F00BC, 0xB709CAE0, 0x020A0030, 0xCA047E6D, 0x00FF0902, 0x36AF2004, 0xFE3180EE, 
0x2D3309BA, 0xA70F00D9, 0x468F4E90, 0xD5328001, 0x5883D530, 0x020F0034, 0x46000E14, 0x35CF2002, 
0x276F809C, 0x4D01C94E, 0x02010034, 0x86002C2C, 0x005F9F01, 0x13002002, 0x6B7F805A, 0x5001210C, 
0x02090034, 0xB5007F54, 0x00612A0B, 0x5778C00B, 0x5B2080D6, 0x26770603, 0x0C4F002D, 0x02211B07, 
0x155000B4, 0x5B035100, 0x4C2F00B1, 0x6A0322D3, 0xA8450050, 0xAA2672F7, 0x180C0068, 0xFB123C2F, 
0x1A1F0062, 0x1221B773, 0xFD5000A1, 0x29193849, 0x098F0076, 0xFD335301, 0x43208056, 0x12EFCD02, 
0x00010038, 0x32DA0C07, 0x5778C00B, 0x5B2080DA, 0x41431340, 0x432000A5, 0x2E77D146, 0x0C4C0029, 
0x026B0A07, 0x155000B6, 0x27BA8008, 0x0B2E00B5, 0x11217AF2, 0x31420046, 0x962679C6, 0xA80F00F1, 
0x3830022F, 0xFD5000A1, 0x2919F549, 0x09880076, 0xFDC70001, 0x43208054, 0x3BEF6404, 0x00010030, 
0x32790C27, 0x5778C00B, 0x5B2080C6, 0x2D030604, 0x432000AD, 0x05C6CE07, 0x0C4F002D, 0x02211B07, 
0x155000B2, 0x2EBA3808, 0x0B2F00B3, 0x111F227D, 0x31400056, 0xD503B3FD, 0x755F0037, 0x2803477D, 
0xFD5000A1, 0x2919BC49, 0x098F0076, 0xFDC77301, 0x43208052, 0x09EF0202, 0x00010030, 0x32560C46, 
0x56784E48, 0x036F00D2, 0x01000063, 0x571F006C, 0x100B0604, 0x043F0000, 0x0000000F, 0x2E0F0096, 
0x2C002811, 0x036000D2, 0x01000063, 0x571F006E, 0x270B3521, 0x043F0010, 0x5A01000B, 0x00040020, 
0x00000000, 0x56784E48, 0x036000D2, 0x01000063, 0x571F006C, 0x100B0604, 0x043F0004, 0x7700B50F, 
0x2E060096, 0x2C002811, 0x036F00D2, 0x0100FA63, 0x571F006E, 0x270B3521, 0x043F0014, 0x5A01680B, 
0x00040036, 0x5F005002, 0x56784E48, 0xC3108076, 0x371C1B02, 0xE73F00FD, 0x52F6D104, 0x150F00C3, 
0x11242025, 0x013F001F, 0x8A76C7FD, 0x0504008F, 0x3112C726, 0x5B3080EF, 0x767AC040, 0x90160054, 
0x49EF2F1D, 0x00020038, 0x3212252A, 0x56784E48, 0x0110807C, 0x18421B65, 0x103F00F6, 0x5223D102, 
0x146F00DE, 0x50121350, 0x036100D4, 0x0100133E, 0x150F00D9, 0x68E7693C, 0x013F0003, 0x7EEF1500, 
0x3D200000, 0x00010000, 0x00040038, 0x4C120B65, 0x5778450A, 0xE83080F8, 0x26DB130D, 0x111F0024, 
0x71D31B0E, 0xFF600012, 0xFF31F163, 0x983A0057, 0xD403DF4E, 0xA91C00E4, 0x09D0DFF3, 0xFD5000A3, 
0x3519381E, 0xA94E00B3, 0x3BC71601, 0x150000C1, 0xCDC70859, 0x608080CC, 0x65B3441A, 0x00020034, 
0x32E90407, 0x56784E48, 0x0110807A, 0x64170D17, 0x793F00EF, 0xE86DD102, 0x7A0F00D8, 0x686A373C, 
0x5C3F004C, 0x2DCCB30C, 0xF70200DB, 0xA0325231, 0x4E6200BF, 0x6C02D400, 0x4F8080D0, 0x09020578, 
0x0002003A, 0x32095D5E, 0x5678C21B, 0x5B2080C4, 0x03280600, 0x01820052, 0x600B1302, 0x155000A2, 
0x43031C26, 0x6C2F00B2, 0x11443AE5, 0xA91F00F6, 0xA303F1EC, 0xA94000A5, 0x2103A530, 0x1800006C, 
0xBF126A2F, 0xC51F0077, 0x2803A392, 0x098F0076, 0xFDF42C01, 0x43208048, 0x00F20000, 0x00010034, 
0x5F560407, 0x5678C615, 0x111F0036, 0xF2A10602, 0xD73F0082, 0x6989D200, 0xFD5000AD, 0x68E1F9E0, 
0x9F1C0053, 0xFDEF053D, 0x0002003C, 0x5FEE0457, 0x00620908, 0x57784E4A, 0x0114006E, 0x120C0647, 
0x082F0070, 0x3D051F88, 0x5800009D, 0x1D12082F, 0x053080EE, 0x2D2AA462, 0x3F7000A3, 0x7D293F67, 
0xE99F001A, 0x198044C2, 0x155400A8, 0x4383BFFE, 0xDF0000F2, 0xFFEDAEA1, 0x193F00A4, 0x21EF0D13, 
0x0003003E, 0x40120400, 0xCEBDC109, 0x5B2080C6, 0x66010660, 0x5C1F0067, 0x0753D11A, 0x013E001F, 
0x69A14538, 0x2500007B, 0x89123F47, 0x053080FE, 0x7C007705, 0x111C003C, 0x143E562F, 0x193E00A2, 
0x5C0CA70E, 0x00208043, 0x58021205, 0x0001003A, 0x40230C0E, 0xCEBDC309, 0x1A108073, 0xC51B000A, 
0x5B2080CC, 0x1D21065E, 0xE98F0017, 0x18C9D102, 0x0B2F00BF, 0x4226263E, 0x614E004F, 0x49850E19, 
0x926000A6, 0xC6023E65, 0xEA200092, 0x12C71A37, 0x548080D3, 0x56EF1A3D, 0x00010032, 0x40CB0C22, 
0xCEBDC307, 0x5B2080C4, 0x1D030620, 0xE98F0015, 0x181FD104, 0x162C009C, 0x52BF20AE, 0xDE5F0099, 
0xCEB03E10, 0xEA200080, 0x7E010009, 0x548080D1, 0x5CEF022A, 0x0001003A, 0x40840C27, 0xCEBDC305, 
0x5B2080C0, 0x00010000, 0xE98F0017, 0x1803CE60, 0xD06F0022, 0x36EF1704, 0x43208044, 0x36EFC504, 
0x00010028, 0x00010404, 0xCEBDC108, 0x5C1F006F, 0x0742D15E, 0x082C0066, 0x40050808, 0x3F7000A3, 
0x76056A50, 0xF41C0014, 0xF2877698, 0xEA4C00C3, 0x860CA701, 0x8F50009B, 0x4924DB19, 0x558080C7, 
0x7CEF2F27, 0x00010032, 0x40CB0C01, 0xCEBDC108, 0x5B2080C0, 0x00010000, 0x5C1F007D, 0x18C3D10E, 
0x8923006B, 0x7CA144CC, 0x12730032, 0x14ED6ACC, 0x7B0100EF, 0x336849C1, 0x193F00A6, 0x860CC700, 
0x00208043, 0x7CEF1A13, 0x00010022, 0x0BA20C46, 0xCEBDC306, 0x5B2080C4, 0x211F065E, 0xE98F0017, 
0x181FD102, 0x0B2F00AF, 0x1D2626FD, 0x0F4E004F, 0xFAB00E19, 0x926000AA, 0xC6AFB706, 0xEA200080, 
0x76C7480A, 0x00632A03, 0x5778C006, 0x053080F8, 0x41BF4707, 0x7E2F002C, 0xA31FD104, 0xDF5000A1, 
0x35032F0C, 0x062F00E2, 0x15F42401, 0x00208043, 0x3AEF0202, 0x00010032, 0x32CB0C01, 0x5778C006, 
0x01100076, 0x27BA0613, 0x1D5F005C, 0xE17F3420, 0x501600C7, 0x4E44DA92, 0x062F00E0, 0x7C4A2409, 
0x0020804D, 0xC7021443, 0x00010038, 0x32141872, 0x5778C006, 0x0110006E, 0x12EB0603, 0xAB3F004F, 
0x7F233B07, 0x501C00CF, 0x091F1310, 0x062F00F4, 0x09C73A02, 0x00208059, 0x61022307, 0x00010030, 
0x32000C02, 0x00640908, 0xCEBDC10B, 0x103080F0, 0x41F24728, 0x432000A9, 0x3AC60A27, 0x324E0029, 
0x021F0A04, 0x155000A2, 0x35033808, 0x582F00B6, 0x090321E0, 0x0300006B, 0xB712E05C, 0x0A3080E0, 
0x00010000, 0x1C8F0015, 0x18776D3C, 0x098A0066, 0x04331203, 0x43208040, 0x65EF1A2A, 0x00010032, 
0x32CB0B03, 0x57784E49, 0x5C1F0067, 0x12530647, 0xEB3F0014, 0x3D056F32, 0x5800009D, 0x8C1203D3, 
0x053080F6, 0x9848AB05, 0x3F7000A1, 0x00010000, 0x591F002C, 0x71D44998, 0x103F00AB, 0x59027927, 
0x43208052, 0x3BEF1A32, 0x0003003E, 0x40120404, 0xCEBDC706, 0x5B2080CA, 0x2DBF4702, 0x182E0035, 
0x1A444104, 0x0B2F00BB, 0x11216A5C, 0x958F0082, 0x38A82E02, 0x01308017, 0x03EF5319, 0x00030030, 
0x7C400C0E, 0xCEBDC306, 0x5C1F0067, 0x3034061A, 0x98360057, 0x4B035442, 0x6C1E00E1, 0x5E445998, 
0xA94C00B5, 0x12C7730E, 0x43208042, 0x1DEF0502, 0x00010034, 0x320E040E, 0x57784E46, 0x5C180065, 
0x5A2E065E, 0x082F007A, 0x4B6F085C, 0x3F7000A1, 0x00010000, 0xF41F0006, 0x35A126F4, 0x103F00A7, 
0x3A4C1501, 0x00030032, 0x40190B32, 0xCEBDC305, 0x1A1F006E, 0x1E45061A, 0x98360051, 0x69030735, 
0x455F0002, 0x42C75902, 0x548080C7, 0x1DEF0D02, 0x00010036, 0x32030402, 0xCEBDC10C, 0x103080F0, 
0x200F19CD, 0x432000A1, 0x00010000, 0x324E0027, 0x021F1B02, 0x155000B6, 0x5B030F49, 0x582F00B8, 
0x111F3B2F, 0xAC4C0046, 0xDBCB1530, 0x0300006B, 0xB712E05C, 0x0A3080F4, 0x3D436A78, 0x1C8F0011, 
0x18032D19, 0x098A0066, 0x04331203, 0x43208040, 0x65EF1A2A, 0x0001003A, 0x32120B03, 0xCEBDC51A, 
0x5B2080DC, 0x26630620, 0x01820052, 0x28031302, 0x6C2F00B0, 0x11443A98, 0xA91F00E0, 0xE03552BA, 
0xA94000A3, 0x3A0320E0, 0x1800007A, 0xAC12E05C, 0xC51F0061, 0x0F032DC9, 0x098F0062, 0x04C72E03, 
0x43208040, 0x65EF1A2A, 0x00010032, 0x32CB0B03, 0x00652A0A, 0x56784E47, 0x087F004D, 0x281256F7, 
0x087F005D, 0x50124535, 0x011C007E, 0x3720061A, 0x155000B6, 0x2503220C, 0x858F00C0, 0x08EF4531, 
0x43208040, 0x00010000, 0x00030038, 0x32120C65, 0x56784E46, 0x087F004D, 0x281256F7, 0x087F0051, 
0x50010000, 0x6B7F0050, 0x50010000, 0x011C0060, 0x00010000, 0x013C0001, 0x00010000, 0x00040020, 
0x00010000, 0x5778C106, 0x232700D2, 0x2008130A, 0x181F00C5, 0x5E44C798, 0x155000B2, 0xF2034308, 
0x062F00F4, 0x1BC75313, 0x00208041, 0x59EF1A28, 0x0001003A, 0x02120C07, 0x56784E47, 0x01100060, 
0x00010000, 0x082F0060, 0x00010000, 0x087F0041, 0x00010000, 0x087F0041, 0x00010000, 0x3F7000A1, 
0x00010000, 0x131F0040, 0x00010000, 0x00040020, 0x00010000, 0x5778C106, 0x1F0200D3, 0x460B1304, 
0x4D2F00B2, 0x26444BE5, 0xAE1F00E4, 0x4E442798, 0x062F00E4, 0x15C7530E, 0x00208051, 0x23EF566E, 
0x0001003A, 0x02020C58, 0x56784E47, 0x0876005F, 0x01120803, 0x087F005F, 0x0112DDE3, 0x182E002F, 
0x16200658, 0x215000A0, 0x00010000, 0x295000A6, 0x350351A5, 0x098F0074, 0x31EFD909, 0x0003003C, 
0x32A2041D, 0x5778C107, 0x8E108076, 0x68031B03, 0x0B2080C0, 0x216A1306, 0x745F0005, 0x02441B31, 
0x725000A7, 0x2919221E, 0x062A00E6, 0x36337327, 0x00208047, 0x3FEF2901, 0x0001003A, 0x02DA0C07, 
0x5778C305, 0x57108060, 0x00010000, 0x7F3F00C6, 0x5DED0647, 0xF41F0006, 0x11A1EBF7, 0x234F00C1, 
0x76EF4C04, 0x0004003C, 0x4C120404, 0x57784E49, 0x103080E8, 0x79F91372, 0x182F0031, 0xD1354207, 
0x725000A3, 0x35033849, 0x1E200093, 0xF00342E6, 0x81680008, 0x46053467, 0x725000B7, 0x5B031AF1, 
0x062A00E4, 0x0433230B, 0x00208045, 0x85EFAD36, 0x00010038, 0x320C0C20, 0x468DC122, 0x455F0030, 
0x60B83A46, 0xCA000033, 0x5FA10E03, 0x00660F0A, 0x8F68C009, 0x103080F4, 0x12C91B28, 0xEC2F002C, 
0x0926D10A, 0x12600040, 0x00010000, 0x013E001D, 0x3D120ADE, 0x00208041, 0x00010000, 0x05060099, 
0x531246D7, 0x3F8F00CC, 0x7C856F10, 0x048080C5, 0xCDEF2F2A, 0x00010038, 0x32020810, 0x6F7CC008, 
0x103080F4, 0x125D1B1D, 0x036C00CE, 0x76125E3E, 0xEC2A0020, 0x0DAA280A, 0x215000A0, 0x00010000, 
0x1260005C, 0x6881BA1E, 0x258F0034, 0x26B8EE7C, 0x0020804B, 0x05F2D509, 0x00010038, 0x32120810, 
0x6E9C4E47, 0x01108066, 0x307E061A, 0x082F0074, 0x3D4B0620, 0x445000A1, 0x2105B34C, 0x087F005B, 
0x50128ECC, 0x131F004A, 0x4102031A, 0x0130800D, 0x71014E00, 0x0004003C, 0x5F12230E, 0xCF68C508, 
0x103080E4, 0x1D6A065E, 0xEC2F0020, 0x0927280A, 0x1260004C, 0x3081BA1E, 0xD05E0067, 0xE1F04F03, 
0xD67000B0, 0x56A87F10, 0x926000BC, 0xFBF2FE37, 0xC7208043, 0x1DEF1004, 0x00010038, 0x32124010, 
0xCF68C307, 0x0B2080D4, 0x121F065E, 0xE98F0005, 0x120ED10A, 0x0B2F00B5, 0x52CC0AAE, 0x0F480051, 
0xA6C75210, 0xAE6004B1, 0x2033560A, 0x048080C9, 0x7C022540, 0x00010038, 0x0D120810, 0x56784E05, 
0x087C005F, 0x501220F4, 0x087C005F, 0x501220F7, 0x571C0060, 0x00010000, 0x043C0000, 0x00010000, 
0x00040020, 0x00010000, 0xCE7CC905, 0x053080E0, 0x00010000, 0x036C00D0, 0x50010000, 0x455F0000, 
0x00010000, 0x013F0001, 0x00010000, 0x00020020, 0x00010000, 0x6E9C4E49, 0x01108064, 0x30FF0636, 
0x082F007E, 0x696C0670, 0x445000A3, 0x2106B3C1, 0x131F0048, 0x4E82229E, 0x01308001, 0x09010000, 
0x050F0089, 0xAB12D9FE, 0x048A00CB, 0xA2245A31, 0x048080C1, 0x00010000, 0x00040034, 0x3216D46E, 
0xCF68CF07, 0x0B2080D4, 0x126A065E, 0xEC8F0004, 0x4257D10A, 0xB93F0064, 0xE1705115, 0x3F0800D3, 
0x56A07F08, 0xAE6404B9, 0x09F20837, 0x048080D5, 0x6AEF7E7D, 0x00010038, 0x3212400D, 0xCF68C708, 
0x0B2080C4, 0x1D1F065E, 0x036000CE, 0x76125E50, 0xEC8F0014, 0x1827D104, 0x258F0024, 0x2D0C4F0B, 
0xAE6004A1, 0x49A8C910, 0x05000083, 0xE5EF1F31, 0x048080C7, 0x3AEFAD19, 0x00010032, 0x32E50831, 
0x00670F04, 0xCE35C10C, 0x0B2080C8, 0x2D231307, 0x0C4F002F, 0x021F1B02, 0x155000B4, 0x5B0351A6, 
0x4C2F00A5, 0x1D033D54, 0x8F400050, 0xAAD0F5CF, 0x0300007D, 0xEC125683, 0x5A0C00DD, 0x7F6F4583, 
0x12600058, 0x68816F1E, 0x258F0036, 0xE7666F47, 0x458000C9, 0x99387F01, 0x5D8080D3, 0x20EF1606, 
0x00010032, 0x0E0E0B03, 0xCE35C308, 0x4D2000A4, 0x7644D10A, 0xAF4F0025, 0x02AAD15E, 0x155000AC, 
0x8FD51DD8, 0x1260005C, 0x68641D1E, 0xB08F0036, 0xE70C4F00, 0x458000C1, 0x00010000, 0x5D8080C7, 
0x6BEF0704, 0x00010038, 0x32120B10, 0x57784E48, 0x492F0030, 0x83010004, 0xFD5000A1, 0x00010000, 
0x1E2A0081, 0x19010000, 0x824C0066, 0xA8015F02, 0xB08000D1, 0x6E010000, 0xDD700081, 0x00010000, 
0xB18080C0, 0x00010000, 0x00020032, 0x5F015D5A, 0xCE35C506, 0x232080D4, 0x6C44062A, 0x745F000D, 
0x0DC3D120, 0x12600044, 0x35E4BA8A, 0xB08F0034, 0x4B667A0E, 0x00208043, 0x7CEF6B06, 0x0001002A, 
0x03120B03, 0x00680905, 0x57784E4A, 0x036F00CE, 0x29122B49, 0x011C007E, 0x0F2D061A, 0x013C001D, 
0x4212F5F7, 0x0020804B, 0x00000009, 0x330C005D, 0x0F12F5F7, 0x036000C6, 0x2800ED1D, 0x571C0070, 
0x0F0E3798, 0x013C0007, 0x1DEFF503, 0x12208041, 0x00010000, 0x00020038, 0x2C12180D, 0x57784E4A, 
0x036000D4, 0x50002BF1, 0x011E006E, 0x3E6A0602, 0x013E0003, 0x8AE93790, 0x0020804B, 0x00000009, 
0x330C0057, 0x89E9F525, 0x036F00C4, 0x8BE9ED23, 0x571E0070, 0x2D2C373C, 0x013E000F, 0x1DB3F500, 
0x12208041, 0x00010000, 0x00020032, 0x4CE91803, 0x57784E4B, 0x063080E1, 0x00010000, 0x0D1F0060, 
0x00010000, 0x013C0001, 0x00010000, 0x00208041, 0x00010000, 0x54060076, 0x89E9F525, 0x103080E0, 
0x00010000, 0x011F0060, 0x00010000, 0x013C0001, 0x00010000, 0x2E000080, 0x00010000, 0x048F00C1, 
0x00010000, 0x00010020, 0x00010000, 0xBEBDC10C, 0x01108060, 0x00010008, 0x072080C7, 0x216A0670, 
0xE98F0007, 0x1277D102, 0x0826007E, 0x414C0842, 0x58000087, 0x1D051D42, 0x0A3080E0, 0x00010000, 
0x111F0030, 0x14CF7453, 0xFF600008, 0x070553F9, 0xFD5000A7, 0x29033D0C, 0x098F0076, 0xFDC72C01, 
0x00208049, 0xD6F25B09, 0x0001003E, 0x32020401, 0xBEBDC10B, 0x233F00EC, 0x1D211B07, 0xDD1F00C4, 
0x4E961DD3, 0x08260076, 0x414B1D42, 0x58000087, 0x1DF61D42, 0x0A3080E0, 0x00010000, 0x111F003C, 
0xF2301753, 0xFF600008, 0x070553F9, 0xFD5000A7, 0x29033D0C, 0x098F0076, 0xFDC72C01, 0x00208049, 
0xD6F25B09, 0x0001003E, 0x32020401, 0x00693A09, 0x4769C107, 0x5B2080C6, 0x21BA1B22, 0x011F006A, 
0x31330C02, 0x098E0066, 0x40C70E01, 0x12208045, 0x55076402, 0x33000053, 0x5DEF5A01, 0x286F0092, 
0x02A3BCE8, 0x00020030, 0x7C560C46, 0x4769C105, 0x5B2080D4, 0x20421B0B, 0x0961009F, 0x02121D5C, 
0x011F0064, 0x31301B13, 0x2A8E0067, 0x65C71F01, 0x0002003A, 0x32C00C01, 0x47694E45, 0x217C005B, 
0x041259F4, 0x6B7C005E, 0x50120FE3, 0x571C0078, 0x0F2E195E, 0x043C0004, 0x4DEF5306, 0x0003003A, 
0x2C120C01, 0x47694E46, 0x6B7F005E, 0x7212DDE5, 0x571F0066, 0x315A1B02, 0x2E600001, 0x00010000, 
0x554F00E4, 0xF4C73410, 0x558080D5, 0xBA01A607, 0x00030038, 0x3220CE04, 0x4769C106, 0x5B2080CE, 
0x21231B01, 0x0966009F, 0x021245E0, 0x215F0026, 0x31440602, 0x2A8F0077, 0x73C71F01, 0x12208041, 
0xFDEF2504, 0x0002003C, 0x32120404, 0x4769CF05, 0x096F009B, 0x0212BC5C, 0xFF7F0026, 0x385A1B02, 
0x2A8F0071, 0x24C70207, 0x12208053, 0x70012509, 0x0002003C, 0x32120446, 0x4769C106, 0x5B2080D4, 
0x20421B0B, 0x0961009F, 0x02121D5C, 0x011F0064, 0x31301B13, 0x2A8E0065, 0x65C71F71, 0x122A0051, 
0x73EF3C2A, 0x000F003A, 0x32C00C01, 0x4769C104, 0x5B2080D4, 0x20421B0B, 0x0961009F, 0x02121D5C, 
0x011F0064, 0x31301B13, 0xFD5F00BF, 0x5924213C, 0x4769C106, 0x0968009F, 0x02121D5C, 0x301F0036, 
0x15C10607, 0x2F60006B, 0x3DD820F7, 0x2A2F00E7, 0x65C71F01, 0x12208051, 0x73EF3C2A, 0x0002003A, 
0x32C00C01, 0x006A2F05, 0xCE35C107, 0x5B2080C0, 0x1D0319CD, 0x0961009F, 0x0212BA0F, 0x298F0045, 
0x3147D120, 0x258F0020, 0x9B66460B, 0x458000DB, 0x49AF7F31, 0x5D8080D7, 0x3BEF0553, 0x00020032, 
0x32694003, 0x6E35C006, 0x0B2080C8, 0x3A1D1936, 0x6B72005C, 0x50120AF7, 0x011F0068, 0x316F195E, 
0x193F00B6, 0x220C2700, 0x00208043, 0x7CEF2566, 0x0002002A, 0x03120B03, 0x57784E45, 0x048080C1, 
0x00010000, 0x048E00C1, 0x00010000, 0x193C00A0, 0x00010000, 0x00208041, 0x00010000, 0x00020032, 
0x32690803, 0xCE35C108, 0x5B2080C0, 0x7E0100CD, 0x298F0045, 0x314BD120, 0x258F0022, 0xE185B3F7, 
0x458000C1, 0x00010000, 0x5D8080C7, 0x00013443, 0x33040057, 0x98013404, 0x286F009E, 0x02121A5C, 
0x00030032, 0x02011B6D, 0xCE35C106, 0x0B2080C0, 0x00010000, 0x0962009D, 0x02125E75, 0x011F0074, 
0x384B060A, 0x193F00A6, 0xC5B8C766, 0x00208043, 0x7CEF2566, 0x0002003A, 0x0D120B19, 0x006B0A08, 
0x6E7DC40C, 0x5B2080C0, 0x00010000, 0xE98F000F, 0x1205D11A, 0x082E007E, 0x425F11EB, 0x0300007F, 
0x8C1202F7, 0x0A3000E0, 0x00010000, 0x155000A0, 0x00010000, 0x002F0057, 0x1ACB1757, 0x01308001, 
0x00010000, 0x18000098, 0x6C1220DE, 0x0112807A, 0x7FED4857, 0x098A0062, 0x7C9C0202, 0x00020038, 
0x5F123C13, 0x6E7D420B, 0x063080ED, 0x050A0400, 0x57160062, 0x07200C43, 0x043F001E, 0xD6043D03, 
0x03060067, 0x33003D1D, 0x011F0066, 0xD720F61C, 0x043F001C, 0xD7047034, 0x05060089, 0xD804BCAA, 
0x0A3080E8, 0x00000000, 0x571F006C, 0x68066A9A, 0x098F006E, 0x15042F55, 0x00020028, 0x35047104, 
0xCEBDC10C, 0x5B2080C0, 0x1D03135E, 0xE98F0005, 0x1277D104, 0x082F0064, 0xE805081E, 0xF41C0016, 
0x38850C7D, 0x0760007A, 0x2DAB7C4F, 0x234600CB, 0x8C6CB6F3, 0x03000061, 0x00010000, 0x864000E1, 
0x00010000, 0x5F0000E1, 0x00010000, 0x062F00F6, 0x09C74307, 0x00208041, 0x00010000, 0x0001003A, 
0x32122507, 0x6E7DC40A, 0x063080ED, 0x050A0400, 0xE98F000B, 0x12056B43, 0x013F0019, 0x421C69A0, 
0x03000071, 0x7E00698E, 0x182F0021, 0x5EFB72DA, 0x155000B6, 0x494ABC59, 0x5F0000E3, 0x35138B91, 
0x062E00E2, 0x15031400, 0x00208059, 0x0E00475C, 0x00010036, 0x2500710A, 0x6E7DC40A, 0x5B2080C8, 
0x660E1700, 0xE98F0013, 0x0F340B43, 0x082F0076, 0x425E0838, 0x03000071, 0xA1005F5F, 0xB24F0000, 
0x0D6F7218, 0x155000A8, 0xD97A7F12, 0x5F0000ED, 0x3552812E, 0x098E0074, 0x09197102, 0x0020805D, 
0x24147236, 0x00010034, 0x5C007165, 0xCEBDC109, 0x5B2080CC, 0x050A0400, 0xE98F0003, 0x12774043, 
0x082F007E, 0x52A10838, 0xDF0F00F4, 0x148A4718, 0x0768007C, 0x289703DE, 0x155000BC, 0x66BB592E, 
0x062F00FE, 0xF0231000, 0x0020805F, 0x1E02720D, 0x00010032, 0x5F00730A, 0x6E7D4208, 0x063080ED, 
0x050A0400, 0x57160060, 0xF81AAF00, 0x043F0012, 0x9805BD03, 0x0306007F, 0x8C1202F7, 0x446F00D2, 
0xD900F879, 0x1A1F006C, 0x104E68C9, 0x098F007A, 0x73023037, 0x00020032, 0x33003047, 0x6E7D4208, 
0x063080ED, 0x050A0400, 0x446F00D2, 0xD90065BE, 0x57160060, 0x441AAF00, 0x043F0006, 0x7E05F836, 
0x0306007F, 0x8C1202F7, 0x1A1F007C, 0xFF4E74C9, 0x098F007A, 0x73033037, 0x00020034, 0x3300740E, 
0x006C0904, 0xBEBDC106, 0x5710806E, 0x31050603, 0x072080D5, 0x12C9060A, 0x1C8F0007, 0x1277D102, 
0x098E0072, 0x16330B00, 0x12208057, 0x21EF7E02, 0x00020032, 0x32CB0B00, 0x57784E45, 0x571F0066, 
0x31BB061A, 0x265000BC, 0x5C4A0FA7, 0x608C00D8, 0x09B33C02, 0x67208053, 0x09EF1A09, 0x00030032, 
0x32690C47, 0xCEBDCF03, 0x0A3F00FA, 0x98170068, 0x122F0041, 0x4401001D, 0x00040020, 0x0B010C73, 
0xCEBDCF05, 0x233F00F4, 0x3B26060A, 0xDD1F00C0, 0x0D035998, 0x098E0070, 0x16C71F16, 0x12208041, 
0x00010000, 0x0002003A, 0x32120C03, 0x006D2A05, 0x5778C00C, 0x01108068, 0x00000000, 0x072080DD, 
0x425A1B41, 0x63860057, 0x68530602, 0x312E006F, 0x405A4A57, 0x247000A7, 0x7605207D, 0xDF0E00F2, 
0x144B0625, 0x312E006B, 0x3A0B0664, 0xDF0E00E6, 0x3824617D, 0x32600076, 0x29BA0C13, 0x2A8C0077, 
0xFDC77301, 0x00208043, 0xBCEF2507, 0x0001003A, 0x324D3C0A, 0x5778C00C, 0x5B2080D6, 0x41A70602, 
0x6386004F, 0x114C0602, 0x312E0065, 0x404B12C9, 0x247000A7, 0x7605207D, 0xDF0E00F2, 0x144B0625, 
0x312E0063, 0x3A4B0625, 0x247000B7, 0x495A113F, 0x0E0E00E7, 0x38C1617D, 0x32600076, 0x29BA0C13, 
0x2A8C0077, 0xFDC75301, 0x00208041, 0xBCEF0207, 0x0001003A, 0x32DA0C0A, 0x5778C20A, 0x01108076, 
0x4F3FD147, 0x072080D7, 0x521C0602, 0x2988004F, 0x0F200602, 0x162F008E, 0x1D280225, 0x5A0E00D3, 
0x7F0B0625, 0x162F0086, 0x21034725, 0x5A0E00C7, 0x11211730, 0x2A8C0077, 0xFDC76B01, 0x00208043, 
0xBCEF2507, 0x0001003A, 0x32120C0A, 0x57784E48, 0x571F0074, 0x681C06CD, 0x043F001E, 0xD61270E5, 
0x0306007F, 0xDA12705B, 0x01120078, 0x531300FE, 0x3B2F00C9, 0x3A1DB798, 0x150F00CD, 0xC86C1798, 
0x013F0013, 0x11EF0B04, 0x0002003A, 0x32120C04, 0x57784E4A, 0x01108066, 0x301A0602, 0xB23F00F7, 
0x3406D102, 0x1800007E, 0xDA12705B, 0x1F0A00DF, 0x5313CA7D, 0xCA6000A1, 0x00010000, 0x162C008E, 
0x1D54477D, 0x150F00CD, 0x11B8172F, 0x013C0005, 0x1DEF1041, 0x00208043, 0xBCEF2507, 0x0002003A, 
0x32120C3D, 0x006E2A04, 0x5778C00B, 0x01108068, 0x0D051307, 0x072080D5, 0x41EB060E, 0x63860047, 
0x11530602, 0x312C0075, 0x414B12C9, 0x247000B7, 0x6C052130, 0x0E0F00E1, 0x38C103C9, 0xFF600006, 
0x301C2E64, 0x07600060, 0x1E18201E, 0x468E0072, 0xFDC71001, 0x00208043, 0x26EF1A07, 0x0001003A, 
0x324D0C05, 0x5778C218, 0x01108068, 0x0D051307, 0x053F00FC, 0x41830631, 0x645000A5, 0x1D051554, 
0x1B0F00E2, 0x385A0657, 0x8E600005, 0x1E7EF045, 0x468F0076, 0xFD335301, 0x00208043, 0x26EF1A07, 
0x0002003A, 0x32A90C05, 0x57784E47, 0x57108066, 0x30430602, 0x573F0035, 0x5224D131, 0x18000092, 
0x1D00417B, 0x1F0C00C5, 0x11B347C9, 0x2B2F0064, 0x1D305351, 0x002F0041, 0x54A03206, 0x00030032, 
0x02910C3D, 0x5778C419, 0xC310807C, 0x7FF91B72, 0x5B2080CC, 0x1D4E0631, 0x2988005F, 0x274E0602, 
0x32600062, 0x38BA7224, 0x162F0080, 0x7C030651, 0x5A0E00C1, 0x0F217453, 0x098E0076, 0xFD335301, 
0x00208047, 0x3AEF4302, 0x0001003A, 0x324D0C01, 0x006F2A08, 0x5778C008, 0x0B2080DA, 0x4121133D, 
0x0C4E003F, 0x93191B02, 0x615000B4, 0x5B030FD7, 0x0B2F00B5, 0x11447AD3, 0x0F4C0041, 0x06C7F902, 
0xEA200094, 0x12C76407, 0x048080DB, 0x56021A01, 0x00010030, 0x64A90C07, 0x5778C204, 0xB44F0047, 
0x35E40602, 0x203F0095, 0x48A12619, 0x2D460036, 0x25F07E02, 0x0001003E, 0x32090402, 0x5778C204, 
0xD910806E, 0x24CD1B22, 0xB55F0068, 0xD1243411, 0xE18000D9, 0x7AF5321D, 0x0001003E, 0x7C57DB3D, 
0x5778C416, 0x5B2080DA, 0xB0C64705, 0x01820050, 0x380B1313, 0x6C2F00B4, 0x11440E2F, 0xA91F00E0, 
0xAEC7520B, 0xA94000A5, 0x76EF4302, 0x00010030, 0x64E93C27, 0x5778C014, 0x0C4F0027, 0x0DC90602, 
0x615000B0, 0x2EBA3815, 0x4D2F00BA, 0x3B0D7002, 0x00010030, 0x325A0B0E, 0x5778C006, 0x0B2080C2, 
0x2DC91327, 0x0C4E0037, 0x93351B01, 0x615000B0, 0x14BAF5D7, 0x0B2F00B9, 0x091F224E, 0x0F4C0043, 
0xA5C7F927, 0xEA220090, 0x12C7A307, 0x5778CE04, 0x6C4200CE, 0x4D00D901, 0x6C1F00E3, 0x81015202, 
0x6D4F00BC, 0x7300D331, 0x6D02003F, 0xAC001401, 0x5778C212, 0xB44F0047, 0x35E40602, 0x203F0095, 
0x48A12619, 0x00702F07, 0x8E36C10A, 0x01108074, 0x1819062A, 0x0B2080CC, 0x3A050636, 0x2986005D, 
0x0F2DD10A, 0x192F0071, 0x69471FF7, 0x3F7000A1, 0x1D054630, 0xF41F0000, 0x71ED441E, 0x234A00D9, 
0x1B02C946, 0x8F500091, 0xAB66DB7D, 0xFA8000C5, 0x21C77E11, 0x0001003A, 0x40120C01, 0x8E37C109, 
0x0116006C, 0x122DD120, 0x013F0005, 0xE8051DF7, 0x2500007D, 0x1D125635, 0x053080FC, 0xD68BD92F, 
0x3F7000A5, 0x1D051352, 0x4D1F003D, 0x49C27A8F, 0x513A00A0, 0x2E0C7902, 0x048080C3, 0x21EF0568, 
0x00010038, 0x400A0C13, 0x8E374109, 0x0114006C, 0x12420620, 0x013F0015, 0x6905FDFC, 0x5800009D, 
0x1D123D17, 0x053080E0, 0x867AB552, 0x3F7000A7, 0x1D050F3D, 0xCA9F0006, 0x71A17AC5, 0x103A00BB, 
0xE202A706, 0x048080C1, 0x76EF1A41, 0x00020038, 0x40630C65, 0xCE35CF07, 0x01160074, 0x68470620, 
0xD79F0068, 0xE1681FF7, 0x3F7000A9, 0x7676182B, 0xBD1F0001, 0x71A1441E, 0x513A00A0, 0x2E0CC913, 
0x048080D3, 0x1EA82506, 0x00010038, 0x40120C13, 0xCE35C30B, 0x01108078, 0x6405470B, 0x0B2080D4, 
0x120B06CD, 0x298F0045, 0x0732D10A, 0xCF2F007A, 0x69E71F30, 0x580F009F, 0x4D125649, 0x053080F4, 
0xD605262F, 0x3F7000B7, 0x24E87A26, 0xDF0800E2, 0x71C13BF5, 0x062600E4, 0x3AC71007, 0x00208057, 
0x23EF5331, 0x00020032, 0x029B0B27, 0xCE35C517, 0x01108078, 0x6432470B, 0x0B2080D4, 0x12030628, 
0x9A5F0005, 0x077E6D98, 0x9D2F0079, 0x695C1F51, 0x3F7200A7, 0x7C4ABD04, 0x048080D1, 0x32021303, 
0x00010038, 0x170A0813, 0xCE35C309, 0x01108078, 0x6405470B, 0x0B2080D4, 0x120B06CD, 0x298F0045, 
0x0732D10A, 0xCF2F007A, 0x69E71F30, 0x3F7000B7, 0x24E87A26, 0xDF0800E2, 0x71C13B4E, 0x062600E4, 
0x3AC71007, 0x00208057, 0x23EF5331, 0x00020032, 0x029B0B27, 0x00712F05, 0xCE35C10A, 0x0B2080C0, 
0x3A1F130A, 0x0C4F0025, 0x0296D146, 0x155000B0, 0x1471A9E3, 0x062F00F0, 0x20BA6C14, 0x8F400050, 
0xAAD0F5CF, 0x0500009F, 0x40127AC1, 0x0116007E, 0x7F2DB4E0, 0x082F0072, 0x69A01F02, 0x13108040, 
0x00010000, 0x00010032, 0x32690803, 0xCE35C30A, 0x0B2080C0, 0x00010000, 0x0C480027, 0x02440602, 
0x155000A0, 0x00010000, 0x0B2F00A3, 0x2103D2EC, 0x31400040, 0x00010000, 0x150F00D9, 0x28F9534C, 
0x0B2F00A7, 0x40332102, 0x0F400059, 0x55B01F10, 0x048000C1, 0x03010000, 0x00010034, 0x5F013416, 
0xCE35C109, 0x0B2080C2, 0x2D03131A, 0x0C4F0027, 0x02C91B02, 0x155000AC, 0xECC6AB08, 0x0B2F00B1, 
0x12033B4B, 0x31400044, 0xF796132B, 0x150C00CD, 0x42AE0883, 0x082F0072, 0xD6EF1F02, 0x00208043, 
0xE8EF1422, 0x00010032, 0x2C0E4003, 0xCE35C109, 0x0B2080DA, 0x7C0D1243, 0x0C4C0027, 0x02440602, 
0x155000A0, 0x00010000, 0xE42C00A6, 0x21C9567D, 0x31400040, 0x00010000, 0x150A00DB, 0x372D1F5C, 
0xCC8E006F, 0x3AB3FD02, 0x00208043, 0x00020005, 0x0001003A, 0x4C120803, 0xCE35C517, 0x4D2000A4, 
0x7644D10A, 0xAF4F0025, 0x02AAD15E, 0x155000AC, 0x8FD51DD8, 0x1260005C, 0x68641D1E, 0xCC8E006F, 
0x3AB3FD02, 0x00208043, 0x00020005, 0x0001003A, 0x4C120803, 0x00722A0A, 0x57784E4C, 0x01108060, 
0x00010000, 0x072080C1, 0x00010000, 0x0D1C006E, 0x14EB1B02, 0xD73F001F, 0x69A120E5, 0x0500009F, 
0x89122028, 0xE81F0039, 0x15BA223C, 0x65600016, 0xDE1C2025, 0x07680070, 0x2882BC35, 0x155000AE, 
0x35C4227E, 0x098F0070, 0x09C7450B, 0x00208041, 0x03010000, 0x00020038, 0x32120C0B, 0x5778C509, 
0x063080F5, 0x41701B02, 0x3F7000AF, 0x43EDD147, 0x111F0036, 0x15C10607, 0x4E600000, 0x6D0B24D3, 
0x4160006B, 0x3DD820F7, 0x1B5000A3, 0x4303220C, 0x062F00E0, 0x26C7CB59, 0x00208057, 0x09EF2907, 
0x00020032, 0x32CB3C0A, 0x57784E4B, 0x01108060, 0x00010000, 0x072080C1, 0x00010000, 0x0D16006E, 
0x12ED1B02, 0xCF2C007C, 0x69A121D3, 0x3F7000A7, 0x2105DEE8, 0xF41F001A, 0x15A4226B, 0x07600074, 
0x6018261E, 0x234C00C3, 0xD9657A59, 0x098C0076, 0x09372C37, 0x00208041, 0x00010000, 0x0002003E, 
0x320A0407, 0x5778C107, 0x063080E7, 0x3A030660, 0x150C00C1, 0x7B030A10, 0x1E25008F, 0x21966027, 
0x150C00D5, 0x60BA178D, 0x062F00F0, 0xB7C7CB59, 0x00208047, 0x00EF3402, 0x0001003A, 0x32120C0A, 
0x5778C306, 0x5B2080DA, 0x9E000005, 0x63880057, 0x53531B02, 0xCF2F0076, 0x3DC121E5, 0x645000B3, 
0x12053B2B, 0x131A004E, 0xCD022A13, 0x00080036, 0x02CB0401, 0x5778C107, 0x103080EE, 0x3A051B60, 
0x760F00D6, 0x389E0607, 0x26620015, 0x608F20F5, 0x1B5000A7, 0x4342DD0C, 0x062C00F0, 0x0333CB59, 
0x00208041, 0xF0EF2531, 0x00010032, 0x32560C0A, 0x5778C705, 0x053F00FE, 0x696F1B07, 0xFD7000AF, 
0x215AD102, 0x131F0056, 0x55A05313, 0x01308001, 0x54EF2537, 0x00030032, 0x32CB3C3D, 0x158FCF24, 
0xFD7000AF, 0x215AD102, 0x8B1F004F, 0xBB022C02, 0x6A308014, 0x03EF4340, 0x2208003E, 0x32120401, 
0x5778C307, 0x5B2080CA, 0x00000005, 0x6388004D, 0x114C1B0E, 0xCF2F0070, 0x69C12498, 0x645000B1, 
0x125AB507, 0x131A0054, 0x25BB104A, 0x01300001, 0xB7192508, 0x48220082, 0x3AC7A301, 0x5778C307, 
0x5B2080DA, 0x9E000005, 0x63880057, 0x53531B02, 0xCF2F0076, 0x3DC121E5, 0x645000B3, 0x12053B2B, 
0x131A005C, 0x5C672A6B, 0x013F0001, 0x8F3A0503, 0x00080036, 0x32CB0401, 0x00732A05, 0x5778C008, 
0x103080E0, 0x2D031307, 0xB82F0024, 0x5096D104, 0x505000AC, 0x386C7D8A, 0x1260005C, 0x463E1335, 
0x7C600006, 0x5E47750C, 0x103E00A3, 0x0E0C6613, 0x00208043, 0x7CEF1A47, 0x00020020, 0x03CB0C13, 
0x5778C209, 0x232080CE, 0x3A6C0602, 0xFD7000A5, 0x76F6060E, 0x1C1F0004, 0x71E4D104, 0xED600075, 
0x55A97A30, 0x2F600015, 0x1AEF61D7, 0x234C00C3, 0x0E0CF90A, 0x062000E4, 0x1DC70407, 0x00208051, 
0x56EF6B0A, 0x0001002C, 0x03120413, 0x5778C209, 0x232080C4, 0x1D770636, 0xFD7000A5, 0x21F8D102, 
0xE10F00DE, 0xB4CD0602, 0xED600075, 0x55A97A30, 0xED600017, 0x77E82049, 0x234F00C3, 0x0E0CA500, 
0x062000F4, 0x12C7232A, 0x00208041, 0x7CEF1A0E, 0x00010028, 0x03120C13, 0x5778C009, 0x103080E2, 
0x00010043, 0x492C003C, 0x60AE060B, 0xFD5000A3, 0x00010043, 0x1626009A, 0x2005ADE9, 0x1B0C00E0, 
0x335A83CF, 0x2E600001, 0x5E4781A9, 0x103F00AF, 0x0E247833, 0x00208041, 0x0001006A, 0x00020024, 
0x03694E09, 0x5778C306, 0x760F00DC, 0x27DED10D, 0xED600075, 0x55A97A30, 0x2E600005, 0x4E051705, 
0x103F00B5, 0x1B7069CD, 0x00208043, 0x03010065, 0x00040028, 0x03120C13, 0x0074090A, 0xCEBDC109, 
0x063080E5, 0x1DFE060A, 0xE98F000F, 0x1205D102, 0x098F0070, 0xB0C75AE5, 0x12208059, 0xCA12BFC0, 
0x0508009F, 0xD2122749, 0x155000A0, 0xA51C77E3, 0x048C00DB, 0x56221B19, 0x048080D1, 0x19EF1A0A, 
0x0001003A, 0x324D0C77, 0xCEBDC106, 0x0B2080C4, 0x1DFE060A, 0x446600DA, 0x5012BCF7, 0xE98F0007, 
0x120BD102, 0x098F0072, 0x1BC70B00, 0x12208051, 0x71EF7128, 0x00010032, 0x32CB0B00, 0xCEBDC306, 
0x011F0066, 0x3049D102, 0x203F0085, 0xE14B2635, 0xF418000E, 0x2945404D, 0x826400B5, 0x1EEF5D0D, 
0x2C8080D7, 0x15EF6458, 0x00010032, 0x32010C03, 0xCEBDC506, 0x3A1F0076, 0x0F03D102, 0x0B2F00AD, 
0x404327F2, 0x82480062, 0x477D7AB4, 0x826200A5, 0x29EF4E0D, 0x2C8080D1, 0x29EF0B2A, 0x0001003A, 
0x32EE0C03, 0x7E9DC306, 0x011F006E, 0x302DD102, 0xB93F0070, 0x3DFFF593, 0x150800D7, 0x2E03C71F, 
0x826400B3, 0x1EC75604, 0x2C8080D5, 0x8CEF641D, 0x00010032, 0x32CB3C03, 0x57784004, 0x087C004D, 
0x761203F7, 0x571F0076, 0x74490602, 0x113F0003, 0x4DEF0319, 0x00030038, 0x32120B06, 0x7E9DC305, 
0x011F0066, 0x121AD102, 0xB95F007B, 0x3DDF1FF7, 0x826200B7, 0x1EC72103, 0x2C8080C7, 0x61EF0E02, 
0x00010032, 0x32400B03, 0xCEBDC107, 0x0B2080C4, 0x1DFE060A, 0xE98F0007, 0x120BD11A, 0x098F0062, 
0x40C70B47, 0x12208041, 0x00010000, 0x03000077, 0x49EF1247, 0x737F0058, 0x5012592F, 0x0001003E, 
0x32120403, 0x7E9DC709, 0x232080C4, 0x3A03060A, 0x298F004F, 0x0F42D102, 0xCF2F006C, 0x3A6F20E5, 
0x645000BF, 0x12E24F36, 0x4E6000A7, 0x764DFD1D, 0x131F005A, 0x15021402, 0x4E6000A3, 0xBCC71719, 
0x01308011, 0x49EF0528, 0x00010030, 0x32690B0D, 0xCEBDCE05, 0x446600DA, 0x5012BC4C, 0x011F006E, 
0x1242D102, 0xB95F0077, 0x3D0C2147, 0x2C8080D5, 0x19EF3246, 0x00010032, 0x32690B03, 0x00752A03, 
0x5778C009, 0xE310806C, 0x3123D10D, 0x072080D7, 0x20031B01, 0x2988005D, 0x274E0609, 0x32600072, 
0x68BA22F1, 0x162F0086, 0x7C0373FD, 0x5A0E00C1, 0x331CF32F, 0x098E0076, 0xFDC75301, 0x00208057, 
0xC2EF6402, 0x00010038, 0x32DA0C27, 0x57784214, 0x7B1F007C, 0x286B1B06, 0x1E2F0089, 0x7CAD0653, 
0x002F0047, 0x39B82C02, 0x0003003E, 0x7C120401, 0x57788214, 0x7B1F0074, 0x28301B01, 0x1E2F0099, 
0x20AEF32F, 0x002F004D, 0x8F334306, 0x48230080, 0x3AC7B707, 0x00762A08, 0x5778C008, 0x5B2080D4, 
0xD6470636, 0x111E0026, 0x1E300602, 0x07600060, 0x00010000, 0x162F009A, 0x3BCD0657, 0x645000AF, 
0x7C5A02BB, 0xBA1F004C, 0x47F2530E, 0x048080D9, 0x14B36B0E, 0x00010034, 0x02CB040E, 0x5778C007, 
0x5B2080DE, 0x6913061A, 0x298F0057, 0x28BA1B02, 0x07600060, 0x00010000, 0x082F0068, 0x1DCD06C9, 
0xC05F0022, 0x7BC71404, 0x048080D5, 0x49EF2F09, 0x00020032, 0x02692501, 0x5778C007, 0x5B2080D0, 
0x9F7A4704, 0x298F0057, 0x28431B02, 0x07600060, 0x00010000, 0x082F0078, 0x42CD06D3, 0xC02F0047, 
0xCDEF5302, 0x048080C1, 0x00020000, 0x0002003E, 0x02EE0407, 0x5778C007, 0x5B2080DE, 0x696C0602, 
0x298F0057, 0x28031B02, 0x07600060, 0x00010000, 0xEA2F0088, 0x1DCD06C9, 0x958A008E, 0xCDB37347, 
0x048080D5, 0x49C7B00B, 0x00020034, 0x02CB040E, 0x57788007, 0x5B2080DE, 0x65E40602, 0x111E002E, 
0x11330602, 0x07600060, 0x00010000, 0x162F0088, 0x1DCD06C9, 0x645000AF, 0x7D152402, 0xBA1F0050, 
0x5B0848D7, 0x48220084, 0x1DC76027, 0x57788006, 0x5B2080DA, 0xD6131370, 0x298F0057, 0x280B1B02, 
0x07600060, 0x00010000, 0x082F0068, 0x1DCD06C9, 0xC05F0022, 0x7B031449, 0x48220084, 0x21C76027, 
0x57788006, 0x5B2080D0, 0x9F7A4704, 0x298F004F, 0x3D331B02, 0x07600060, 0x00010000, 0x082F0068, 
0x1DCD06C9, 0xC02F004F, 0x382447FD, 0x48220084, 0x21C76027, 0x57788006, 0x5B2080D0, 0x9F7A4704, 
0x298F0055, 0x280F1B04, 0x07600060, 0x00010000, 0xEA2F0088, 0x1DCD06C9, 0x958A0090, 0x14BB06AC, 
0x48220084, 0x21C76027, 0x00772A02, 0x5778C009, 0x4210807D, 0x151506CD, 0x5B2080CA, 0x3A4E1301, 
0xFC8F0045, 0x3D4E0607, 0x3260007A, 0x7F92723F, 0x162C0084, 0x1D420C8E, 0xD80C00D1, 0x3821747B, 
0x162C0082, 0x1DB3069E, 0x958F0080, 0x3930163A, 0x2F220080, 0x21C7A3A3, 0x5778C00C, 0x4210807D, 
0x151506CD, 0x5B2080CA, 0x3A4E1301, 0xFC8F0047, 0x3D770602, 0x3260007A, 0x7F92723F, 0x162C0086, 
0x1D420CBB, 0xD80C00D3, 0x38030664, 0x162C008C, 0x1D2847D3, 0xFD5000AF, 0x7D152402, 0x958F0084, 
0xCD4A730E, 0x2F200090, 0x24C71A27, 0x048080CD, 0x8FB3CD11, 0x000F003C, 0x02120431, 0x00782A0B, 
0x5978C208, 0x053080E0, 0x00010000, 0x111F0032, 0xF21C1302, 0x062C00FA, 0x3D120664, 0x2B06007D, 
0x251202D3, 0x5C1F0061, 0x4E1943D3, 0x013C0003, 0x76EF0302, 0x00208041, 0x00010000, 0x0003003A, 
0x4C120C02, 0x5778C009, 0x053080E0, 0x00010000, 0x111E0034, 0x14E4D131, 0x103E00A7, 0x2D5AFA25, 
0x00208041, 0x00010000, 0x0306007B, 0x82120673, 0x182E003D, 0x1A1F6AD3, 0x062E00F6, 0x12C75302, 
0x00208041, 0x00010000, 0x0001003E, 0x32120460, 0x5778C407, 0x0B2C00CA, 0x7D1E1337, 0x002E004B, 
0xF712067C, 0x0506009D, 0x1212112F, 0x571E006C, 0x38ED0DD3, 0x062E00E4, 0x7CEF2C28, 0x00208041, 
0x00010000, 0x0001003E, 0x5F120445, 0x5978C207, 0x011E0066, 0x11420602, 0x062C00F8, 0x69EEB6AC, 
0x2B060079, 0x1912B6D3, 0x011F0074, 0xC7430F5A, 0x013C0013, 0x56EF0804, 0x00208041, 0x00010000, 
0x00030038, 0x4C120813, 0x5778CE06, 0x011C006E, 0x00491B09, 0x013C0001, 0x00010000, 0x05060081, 
0x00010000, 0x053F00EA, 0x00170005, 0x002F0041, 0x00010000, 0x00010020, 0x00010000, 0x5778C606, 
0x011C006E, 0x31051B02, 0x4D2F00A2, 0x1D1F8657, 0xC15F0025, 0x0903DF98, 0x062E00E4, 0x7CEF1531, 
0x00208041, 0x00010000, 0x00010038, 0x2C120B09, 0x5778C806, 0x011C006C, 0x3D83D12A, 0x864F00F5, 
0x56E81B66, 0xB24F0000, 0xBE03B7D3, 0x062E00E6, 0x7CC7FB31, 0x00208041, 0x00010000, 0x00010032, 
0x5F690C01, 0x5778CC05, 0x011F0066, 0x169FD102, 0x223F009D, 0xAE687D8A, 0xBD140013, 0xF224486A, 
0x013F0005, 0x21EF2936, 0x0001003C, 0x5FEE0404, 0x5778CA05, 0x11160030, 0x68031331, 0x4C2F00B3, 
0x204448EB, 0x6C1F00F7, 0x1A03225C, 0x043F8010, 0x12EF0328, 0x00030038, 0x4C120B0B, 0x5778C208, 
0x011F006A, 0x0D0C1843, 0x013F0011, 0x3DB14326, 0x00208049, 0x00000000, 0x2B040061, 0xBE0043D1, 
0x011F0072, 0xF2FF06D1, 0x013F0011, 0x21007102, 0x00208051, 0x21000046, 0x00010036, 0x55002F07, 
0x5778C208, 0x011F007A, 0xF2420143, 0x013F0013, 0x3D160644, 0x00208049, 0x00000000, 0x2B040067, 
0x35000254, 0x011F0062, 0x0DFF2F44, 0x0D3F0013, 0x12007900, 0x00208051, 0x21000046, 0x00010022, 
0x41002417, 0x00792F06, 0xCE35C00B, 0x5B2080D2, 0x3B1C133D, 0x29860045, 0x14211B0E, 0x155000B2, 
0xF203F59A, 0x062F00E0, 0x1D030653, 0x03000061, 0x03010000, 0xE98C0005, 0x074B0A83, 0x12600040, 
0x00010000, 0x258F0026, 0x860C4F00, 0x458000C9, 0x73240000, 0x5D8080D3, 0x12EF0204, 0x00010038, 
0x32120B0D, 0x8E35C006, 0x011F0074, 0x7F031B65, 0x098F0064, 0x1D0347F8, 0x0300007D, 0x25126683, 
0x011F007E, 0x374213E0, 0x013F0005, 0x1DEFE931, 0x00020038, 0x3212400D, 0x8E354006, 0x011F0068, 
0x31051372, 0xD53F0013, 0xB70386EC, 0x03000061, 0x00010000, 0x011F006C, 0x6DCD133D, 0x013F0001, 
0x1DEF1504, 0x0002003C, 0x32120443, 0x57784E07, 0x011F0060, 0x00010000, 0x162F0080, 0x00010000, 
0x002F0041, 0x00010000, 0x05040081, 0x00010000, 0x571F0060, 0x00010000, 0x043F0000, 0x00010000, 
0x00040032, 0x32690803, 0x8E354206, 0x011F0072, 0x375C6B09, 0x113F0005, 0xE8005EA0, 0x050E0081, 
0x67004615, 0x011F0078, 0xE8CF59E0, 0x013F0001, 0x7C007125, 0x00040024, 0xE9000D04, 0x8E35C206, 
0x011F006A, 0x09009C01, 0x013F0009, 0x2D007C3A, 0x050E0099, 0xE900ECB0, 0x011F007A, 0x46005261, 
0x043F000E, 0x0500C102, 0x0003002C, 0xEA00C17C, 0x007A2F05, 0x5778400A, 0x103080E0, 0x00010000, 
0x048E00C1, 0x00010000, 0x33600000, 0x00010000, 0x155000A0, 0x00010000, 0x1B0000E0, 0x00010000, 
0x272E00E1, 0x00010000, 0x00208041, 0x00010000, 0x05060081, 0x00010000, 0x048800C1, 0x00010000, 
0x00020020, 0x00010000, 0x5778C00A, 0x103080E0, 0x00010000, 0x036000D0, 0x0804681E, 0x4D1F0035, 
0x15850607, 0x33600014, 0x1869088A, 0x07600064, 0x3DA145DE, 0x155200B0, 0x56383899, 0x1B0000E0, 
0x00010000, 0x272E00E3, 0x26EFCB53, 0x0020805F, 0x7A025D37, 0x0002003A, 0x32120C0A, 0x57784008, 
0x048F00D5, 0xA689D128, 0x036000C0, 0x00010000, 0x336E0002, 0x6E28B1EF, 0x155000A0, 0x00010000, 
0x1B0000E0, 0x00010000, 0x272E00FB, 0x6CB39C3D, 0x00208041, 0x00010000, 0x0002003E, 0x32142407, 
0xCE35C309, 0x053080F0, 0x52E8132A, 0x111F0034, 0x15850607, 0x41600065, 0x3DA145DE, 0xA75A00AC, 
0x49832672, 0x1B0000F6, 0xF2EDC0E0, 0xFF700088, 0x44616000, 0x258F0024, 0x860CC713, 0x00208053, 
0x24EF1A66, 0x0001003E, 0x32120400, 0xCE35CE08, 0x053080E2, 0x03010005, 0x150400D5, 0x2E4B1B20, 
0x16240090, 0x208F84C2, 0x150F00D5, 0x38BF4929, 0xA75200B2, 0xF2ED6FF7, 0x258F0038, 0xE724EB0D, 
0x00208053, 0x12EF1A5A, 0x0001003E, 0x32120419, 0x005F2D01, 0xCF7D2007, 0x7E2F8027, 0x50DC4458, 
0xBB600054, 0xEB8822B1, 0xBB550099, 0x5C7138E2, 0xA10000EF, 0x687167B1, 0xBB5000BE, 0xA6A6EF08, 
0x062F80EA, 0x2604E814, 0x020A0028, 0xEC044F0D, 0x005F0F03, 0xCF7D2E06, 0xC81F806B, 0x0F4078D3, 
0x483C800B, 0x0F404ED3, 0x22030058, 0x51018CDB, 0xC81F806B, 0x0F408CCE, 0x4A3C8009, 0x26404E5A, 
0x020A0020, 0x0F00D551, 0xCF7D2E04, 0x286F808C, 0x240133B2, 0x571F0068, 0x2456D556, 0x043F8010, 
0x972C4E5A, 0x020A0030, 0x510078B2, 0xCF7D2003, 0xD91F0068, 0x2456D556, 0x723F8011, 0x972C4E5A, 
0x020A0030, 0x510078B2, 0x005F2D01, 0xCF7D2007, 0xBC1F0026, 0x47933215, 0xEF60006D, 0x11DC6A9A, 
0xBC200093, 0x4CB84B3C, 0xBD650022, 0x649C8CE2, 0xD960001F, 0xEC9CB41E, 0x693F80BE, 0xB709CA00, 
0x020A0030, 0xCA047E0D, 0x005F0A02, 0x248F2022, 0x6B7F8054, 0x50003115, 0x02070034, 0x6F007F54, 
0x248F2015, 0xDA3080EE, 0x2DBF0905, 0xC90F00EC, 0x518FA6E3, 0xF02F00E0, 0x58832376, 0x6F208050, 
0x03001A31, 0x020F0024, 0xED0052F4, 0x00A30F03, 0xCE8D2218, 0x0A3080E0, 0x01087309, 0x036F00D0, 
0x01000705, 0x162F003B, 0xEF086D02, 0x12600048, 0x00000000, 0x229F006B, 0x00000008, 0x178C00D8, 
0x03000000, 0x178000C9, 0x00010000, 0x00040030, 0x09000000, 0xCE8D2207, 0x0A3080E0, 0x01087309, 
0x036F00D0, 0x01000705, 0x162F003B, 0xEF086D02, 0x1D5F004A, 0x00000008, 0x178F00D8, 0x03000000, 
0x178000D9, 0x09010000, 0x00040020, 0x00000000, 0xCE8D2007, 0x0A3080E0, 0x01087309, 0x036F00D0, 
0x01000705, 0x162F003B, 0xEF086D02, 0x0826006A, 0x00002708, 0x178F00D8, 0x03001200, 0x178000D9, 
0x09010000, 0x00040020, 0x00001200, 0x00FF0809, 0xAEBD400C, 0x0E700066, 0x03000AE0, 0x0E720066, 
0x03000AE0, 0x146F00D2, 0x00002863, 0x1A1F006A, 0x100BD509, 0x113F0011, 0x6500410F, 0x050F0091, 
0x4C014164, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x036000D2, 0x00000063, 0x1A1F0072, 
0x6601312A, 0x113F0001, 0x6601310D, 0x00030032, 0x66013100, 0xAEBD400C, 0x1A108070, 0x3A204900, 
0x793F00FB, 0x522B4009, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x150F00C3, 0x11EA06D1, 
0x0D3F0007, 0x9EC87503, 0x0500008B, 0x27075803, 0x5B3080ED, 0x4D22D52E, 0x155000AE, 0x580DAB0E, 
0xF56000A1, 0x03010D01, 0x9016004C, 0xCDAC241D, 0x00020026, 0x36001727, 0xAEBD400C, 0x0E700066, 
0x03000AE0, 0x0E720066, 0x03000AE0, 0x036000D2, 0x00000063, 0x1A1F007A, 0x3A0BD809, 0x113F0015, 
0x9E00D80F, 0x05060097, 0x2C012811, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x146F00D2, 
0x0A00584E, 0x1A1F006E, 0x272A3521, 0x113F0003, 0x19023A00, 0x00030032, 0xFF025700, 0xCEBD420C, 
0x063080ED, 0x9FC8581B, 0x90300023, 0x480FDA05, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 
0x0C4C0037, 0x1AC94109, 0x0B2C00B5, 0x121F45A0, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 
0x150A00D7, 0x18031764, 0x062F00F4, 0x110F7302, 0x00208053, 0x5904716D, 0x0001003C, 0x5C2A0165, 
0xAEBD400A, 0x1A10807A, 0x0F420C09, 0x793F00EA, 0x402B0809, 0x0E720066, 0x03000AE0, 0x0E720066, 
0x03000AE0, 0x0C6F00D4, 0x00001305, 0x036000D6, 0x00001342, 0x150F00C9, 0x11C96922, 0x0D3F0003, 
0x69681500, 0x3D20001A, 0x0E001365, 0x00030032, 0x66000300, 0xAEBD4009, 0x036F00D0, 0x7D007CFE, 
0x1A160062, 0x5ACDEA09, 0x793F00F2, 0x8FA86070, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 
0x150F00DB, 0x2DC9603F, 0x0D3F000B, 0x0A1B5700, 0x3D20001A, 0x0E001365, 0x00030032, 0xAF095700, 
0xAEBD442C, 0x0110807A, 0x0F420C09, 0x793F00FB, 0x9F5C5D09, 0x0E710066, 0x03000AE0, 0x0E720066, 
0x03000AE0, 0x7A0F00D8, 0x2D4F65ED, 0x5C3F004E, 0xA0065903, 0x0E700066, 0x03000AE0, 0x0E700066, 
0x03000AE0, 0x7A0200D9, 0xA00EDE01, 0x4E6200B3, 0x32021365, 0x4F8080D4, 0x32013F07, 0x00020026, 
0xA1205D01, 0xAEBD400C, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x1A1F006A, 0x100BD509, 
0x113F0011, 0x6500410F, 0x146F00D2, 0x00002863, 0x540F0080, 0x74014164, 0x0E700066, 0x03000AE0, 
0x0E720066, 0x03000AE0, 0x7B1F0072, 0x6601312A, 0x3B700096, 0x68140C20, 0x113F0001, 0x6601310D, 
0x00030032, 0x66013100, 0xAEBD4009, 0x3C10006B, 0x67423609, 0x793F00FA, 0x672B0809, 0x0E720066, 
0x03000AE0, 0x0E720066, 0x03000AE0, 0x150F00C9, 0x11C96922, 0x0D3F0003, 0x69682400, 0x3D20001A, 
0x0E001365, 0x146F00D4, 0x6F001305, 0x00030032, 0xAC000300, 0x00FF2A0A, 0x5778C00C, 0x0E700066, 
0x03000AE0, 0x0E720066, 0x03000AE0, 0x0C4F0033, 0xF511F043, 0x4C2F00AD, 0x261C6AD4, 0xA8450050, 
0xBFE3CE43, 0x180C006A, 0xD107A1D4, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x571F8078, 
0x1D1585A3, 0x098F007A, 0x591C3270, 0x43208044, 0x36013F04, 0x00010024, 0xCD23D946, 0x5778C20C, 
0x072080C9, 0xC0332501, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x0C4C002F, 0x52194109, 
0x0B2E00B7, 0x110D3D2D, 0xFE42004D, 0x0875602D, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 
0xA80F00EB, 0x7B513302, 0x09880070, 0x590F1627, 0x43208046, 0x57004309, 0x00010024, 0xDA567346, 
0x5778C20C, 0x072080DD, 0xC11D0500, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x0C4F002F, 
0x13194109, 0x0B2F00B1, 0x12034450, 0x3140004A, 0xC2664B9F, 0x0E700066, 0x03000AE0, 0x0E720066, 
0x03000AE0, 0x755F0025, 0x4B03177B, 0x098F0076, 0x590F2C01, 0x43208054, 0xC2001031, 0x00010026, 
0xDA230701, 0x5678460C, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x036F00D2, 0x00000063, 
0x571F006A, 0x100B3609, 0x113F0001, 0x0000000F, 0x180F0096, 0x2C002811, 0x0E700066, 0x03000AE0, 
0x0E720066, 0x03000AE0, 0x036000D2, 0x00000063, 0x2C1F006E, 0x270B3521, 0x113F0001, 0x1D01000B, 
0x00040020, 0x00000000, 0x5678460C, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x036000D2, 
0x00000063, 0x571F006A, 0x100B3609, 0x113F0005, 0x7700B50F, 0x18060096, 0x2C002811, 0x0E700066, 
0x03000AE0, 0x0E720066, 0x03000AE0, 0x036F00D2, 0x0000FA63, 0x2C1F006E, 0x270B3521, 0x113F000D, 
0x1D00680B, 0x00040036, 0x66006802, 0x5678460A, 0xC310806C, 0x6D4F0400, 0xE73F00EB, 0x402B0843, 
0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x150F00C7, 0x114EF0A8, 0x0D3F0005, 0xC31AC70D, 
0x05040087, 0x1800C719, 0x5B3080E9, 0x32B8B60D, 0x90140046, 0xCD92B670, 0x00020024, 0xC400101D, 
0x5678460A, 0x01108072, 0x18325443, 0x793F00E2, 0x40240809, 0x0E720066, 0x03000AE0, 0x0E720066, 
0x03000AE0, 0x146F00D4, 0x0000513E, 0x036000D4, 0x0000513E, 0x150F00D9, 0x68E76942, 0x0D3F0011, 
0x3C00030B, 0x3D200008, 0x00000000, 0x00040030, 0x7E000365, 0x5778450C, 0xE83080F4, 0x0C0AB601, 
0x0E710066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0xE81E0035, 0xB825FC00, 0xFF600012, 0xFF31F163, 
0x98360059, 0xC48EA9A6, 0x0E700066, 0x03000AE0, 0x0E710066, 0x03000AE0, 0xA91800E0, 0x091F89D5, 
0xA94A00A9, 0x1D052907, 0x0020805F, 0x73045D0E, 0x00020020, 0x32192946, 0x5678480C, 0x01108068, 
0x144F6B00, 0x793F00FB, 0x34F30809, 0x0E710066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x7A0F00CA, 
0x1E182D90, 0x5C3F0044, 0xA0B9DF0D, 0x0E700066, 0x03000AE0, 0x0E700066, 0x03000AE0, 0x7A0200D9, 
0xA032520D, 0x4E6200BD, 0x6C02D43A, 0x4F8080D0, 0x09020578, 0x0002003E, 0x08566422, 0x5678460C, 
0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x571F006A, 0x100B3609, 0x113F0001, 0x0000000F, 
0x036F00D2, 0x00000063, 0x180F0086, 0x74002811, 0x0E700066, 0x03000AE0, 0x0E720066, 0x03000AE0, 
0x7B1F006E, 0x270B3521, 0x3B700096, 0x68140C20, 0x113F0001, 0x1D01000B, 0x00040020, 0x00000000, 
0x00FF0805, 0xCEBD4008, 0x063080E5, 0x6C2FB101, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 
0x0C4C0023, 0xB61F5409, 0x0B2F00BF, 0x12FA0A73, 0x0F4C005F, 0xB423D953, 0x9D8080DE, 0xA6146465, 
0x00010028, 0x00000000, 0xCEBD4008, 0x063080E5, 0x6C2FB101, 0x0C4C0023, 0xB61F5409, 0x0B2F00BF, 
0x12FA0A73, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x0F4C005F, 0xB423D953, 0x9D8080DE, 
0xA6146465, 0x00010028, 0x00000000, 0xCEBD4206, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 
0x384C005E, 0x14390443, 0x203F0091, 0x4002281F, 0x2D4C0036, 0x5F021C6D, 0x00020036, 0x0E020633, 
0xCEBD4206, 0x384C005E, 0x14390443, 0x203F0091, 0x4002281F, 0x0E720066, 0x03000AE0, 0x0E720066, 
0x03000AE0, 0x2D4C0036, 0x5F021C6D, 0x00020036, 0x0E020633, 0xCEBD4E06, 0x6C4F00CE, 0x4D00D901, 
0x6C1F00FF, 0xB423D953, 0x33020041, 0x2A511646, 0x0E72006C, 0xA2127BBC, 0x0E70006C, 0xA2127BBC, 
0x6D02003F, 0x8B001401, 0x00FF2A0A, 0x5778C007, 0x0B2080D8, 0xC0332500, 0x0E720066, 0x03000AE0, 
0x0E720066, 0x03000AE0, 0x604B0033, 0xD1262643, 0x0B2F00BD, 0x20262753, 0x614B005B, 0xAC517226, 
0xB4210090, 0x6C08A3A3, 0x5778C007, 0x0B2080D8, 0xC0332500, 0x604B0033, 0xD1262643, 0x0B2F00BD, 
0x20262753, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x614B005B, 0xAC517226, 0xB4210090, 
0x6C08A3A3, 0x5778C206, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0xB44F0057, 0x19BCFC43, 
0x203F009D, 0x483B2731, 0x2D460022, 0x49387906, 0x00010028, 0x00000000, 0x5778C206, 0xB44F0057, 
0x19BCFC43, 0x203F009D, 0x483B2731, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x2D460022, 
0x49387906, 0x00010028, 0x00000000, 0x5778CE16, 0x6C4000CE, 0xDA1B4009, 0x0E720066, 0x03000AE0, 
0x0E720066, 0x03000AE0, 0x6C1F00E5, 0x091B3C1B, 0x6D4F00B4, 0x20463E72, 0x6D01003D, 0x92037307, 
0x5778C009, 0x0B2080D8, 0xC0332601, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x604B0033, 
0xD1262643, 0x0B2F00BB, 0x20263F6A, 0x614B005B, 0xAC51A504, 0xEA200088, 0x21480509, 0x048080D1, 
0x56A30507, 0x220F0036, 0x32510701, 0x5778C009, 0x0B2080D8, 0xC0332601, 0x604B0033, 0xD1262643, 
0x0B2F00BB, 0x20263F6A, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x614B005B, 0xAC51A504, 
0xEA200088, 0x21480509, 0x048080D1, 0x56A30507, 0x220F0036, 0x32510701, 0x5778C007, 0x0B2080DC, 
0xC0334E08, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 0x604B0033, 0xD1262643, 0x0B2F00B9, 
0x2026F553, 0x614F005F, 0xAA517117, 0x220F0020, 0x2A511646, 0x5778C007, 0x0B2080DC, 0xC0334E08, 
0x604B0033, 0xD1262643, 0x0B2F00B9, 0x2026F553, 0x0E720066, 0x03000AE0, 0x0E720066, 0x03000AE0, 
0x614F005F, 0xAA517117, 0x220F0020, 0x2A511646, 0x5778CE06, 0x6C4F00CE, 0x4D00D901, 0x6C1F00E3, 
0x81015202, 0x33020041, 0x2A511646, 0x0E72006C, 0xA2127BBC, 0x0E70006C, 0xA2127BBC, 0x6D02003F, 
0x8B001401, 0x00FF0806, 0xCEBD4208, 0x053080E8, 0x66001901, 0x0E760068, 0x00143FF3, 0x0E710068, 
0x00123FF3, 0x29880051, 0x2D465D00, 0x1626008E, 0x05C6F525, 0x150A00CB, 0x4AC65D02, 0x0984006E, 
0xC7C62D27, 0x6D02002B, 0x8E143660, 0xCEBD4208, 0x053080F8, 0x9818D500, 0x2988004B, 0x4AC65D05, 
0x1626008E, 0x7DC6F525, 0x0E760068, 0x00143FF3, 0x0E71006C, 0x0014DCF3, 0x150A00CB, 0x4AC65D02, 
0x0984006A, 0xC7C65D5A, 0x6D020029, 0x8E145D07, 0xCEBD4406, 0x0E760068, 0x00123FBC, 0x0E710068, 
0x00123FBC, 0x1A1F006B, 0x0F0E3609, 0x4C2F00BF, 0x120E1721, 0x432F0058, 0x19035D04, 0x6D02003B, 
0xBB03360E, 0xCEBD4406, 0x1A1F006B, 0x0F0E3609, 0x4C2F00BF, 0x120E1721, 0x0E760068, 0x00123FBC, 
0x0E710068, 0x00123FBC, 0x432F0058, 0x19035D04, 0x6D02003B, 0xBB03360E, 0xCEBD4208, 0x053080E8, 
0x66001901, 0x0E760068, 0x00143FF3, 0x29880051, 0x2D465D00, 0x1626008E, 0x05C6F525, 0x0E710068, 
0x00123FF3, 0x150A00CB, 0x4AC65D02, 0x0984006E, 0xC7C62D27, 0x6D02002B, 0x8E143660, 0xCEBD4208, 
0x053080E8, 0x66001901, 0x0E710068, 0x00123FF3, 0x29880051, 0x2D465D00, 0x1626008E, 0x05C6F525, 
0x0E760068, 0x00143FF3, 0x150A00CB, 0x4AC65D02, 0x0984006E, 0xC7C62D27, 0x6D02002B, 0x8E143660, 
0x00FF2A08, 0x5778C009, 0x232080C4, 0xDB425D01, 0x0E71006C, 0x00147BBC, 0x20840042, 0x42303643, 
0x2F600069, 0x11D872AE, 0x162C0092, 0x120306CF, 0x0E76006C, 0x0012DCBC, 0x150C00CB, 0x31059702, 
0x09840060, 0x3F193604, 0x6D020021, 0x8EA53607, 0x5778C009, 0x232080C4, 0x3A30D301, 0x0E76006C, 
0x00127BF3, 0x20840042, 0x16303643, 0x2F600069, 0x11D872AE, 0x162C0092, 0x1203066B, 0x0E710060, 
0x00043FBC, 0x150C00CB, 0x31059702, 0x09840060, 0x3F423646, 0x6D020039, 0xDB123607, 0x5778C009, 
0x232080C8, 0x6F1E3601, 0x20840042, 0x42303643, 0x2F600069, 0x11D872AE, 0x162C0082, 0x1D0306CF, 
0x0E76006C, 0x0012DCBC, 0x0E710068, 0x00123FBC, 0x150C00CB, 0x31219702, 0x09840062, 0x3F193670, 
0x6D020029, 0x49123604, 0x5778C009, 0x232080C4, 0x3A30D301, 0x0E76006C, 0x00127BF3, 0x0E71006C, 
0x00127BF3, 0x20840042, 0x16303643, 0x2F600069, 0x11D872AE, 0x162C0092, 0x12030625, 0x150C00C3, 
0x31779702, 0x09840060, 0x3F193604, 0x6D020039, 0x5CA73607, 0x5778C206, 0x0E760068, 0x001437F3, 
0x0E710068, 0x001237F3, 0x1A1F006B, 0x42963643, 0x162F0098, 0x12C66953, 0x432F0044, 0x70E9380E, 
0x6D020031, 0x8DE93607, 0x5778C206, 0x1A1F006F, 0x31193843, 0x162F0098, 0x12C606F6, 0x0E760068, 
0x00143FBC, 0x0E710068, 0x00123FBC, 0x432F0056, 0x5C693802, 0x6D020039, 0x8D0E1209, 0x5778C008, 
0x232080C4, 0x3A30D301, 0x20840040, 0x16303601, 0x2F600069, 0x11D872AE, 0x162C0092, 0x12030625, 
0x150C00CB, 0x31219702, 0x09840070, 0x160F3609, 0x0E7F006C, 0x0012EDBC, 0x6D020021, 0x89E93646, 
0x5778C205, 0x1A1F006F, 0x31193843, 0x162F009C, 0x12214453, 0x432F0044, 0x2269380B, 0x0E7F0060, 
0x0000CC60, 0x6D02003B, 0x020E3602, 0x00FF0F08, 0xBE9D410A, 0x1A1B807B, 0x186AE709, 0xD73B0001, 
0xE82937D3, 0x05000099, 0x7E14609B, 0x053080F4, 0xC962A74E, 0xA70F00F9, 0x14E93B54, 0xD15800D9, 
0x2EA93F14, 0x155000B8, 0x02000000, 0xD0600018, 0x02000000, 0x103F00AF, 0x5C613C40, 0x6D02003B, 
0x9514361A, 0xBE9D4F09, 0x11180030, 0x2D485D00, 0xAB960033, 0x8F4B1F5C, 0xC15F0039, 0x4F0E1F8A, 
0x12600058, 0x5B81373E, 0x2F700021, 0xEC6237E5, 0xD060000A, 0x4AB3609A, 0x193E00A2, 0x6FE35D03, 
0x43208058, 0x02000000, 0x6D020033, 0x82403603, 0xBE9D4108, 0x1A108063, 0x071A5D09, 0x082F0062, 
0x3AA75D09, 0x3F7000A5, 0x6A0C6F67, 0xA70F00F1, 0x14A9206D, 0xCB5800CC, 0x353E6F51, 0xD1600004, 
0x4A293E6B, 0x103F00B5, 0x12A53802, 0x6D020039, 0x95123631, 0xBE9D4109, 0x2984005B, 0x2D405D09, 
0x082F0078, 0x414F37D3, 0xA70C00F3, 0x145A374F, 0x864400ED, 0x7D8827B4, 0xE020006F, 0x7E5A6D36, 
0x280800E1, 0x7A61CDBC, 0xD0600018, 0x02000000, 0x103C00A7, 0x5C2D4127, 0x6D020031, 0xD4E93604, 
0xBE9D4F07, 0x232700D2, 0x691A5D09, 0xC15F0023, 0x9C8F6FF7, 0x5A700036, 0x25E4EE50, 0xD060000A, 
0x44776091, 0x193E00B4, 0xB72DD3CD, 0x4320805C, 0x02003700, 0x6D02003B, 0xEC123603, 0xBE9D4307, 
0x053080F8, 0x02000000, 0xDD1F00D8, 0x02000000, 0xB95F0079, 0x02000000, 0xA70800F9, 0x02000000, 
0xD0600018, 0x02000000, 0x103C00B9, 0x02000000, 0x6D020039, 0x02000000, 0xBE9D4318, 0x053080F8, 
0x02000000, 0x745F0003, 0x5A6D5D09, 0x12600058, 0x02000000, 0x2F700039, 0x02000000, 0xB95F007D, 
0x8F6F7B71, 0x13180040, 0x7AA9AEB4, 0xAF3F0008, 0x1AFF5A2A, 0x6D020039, 0x02000000, 0xBE9D4309, 
0x11188038, 0x02000000, 0xAB960033, 0x8F4B1F5C, 0xC15F0029, 0x9C000000, 0xAB3F0039, 0x02000000, 
0xA21B0059, 0x02000000, 0x8E600019, 0x02000000, 0x193E00B0, 0xB72D0000, 0x43208058, 0x02000000, 
0x6D020039, 0x02000000, 0x00C00806, 0xAEBD400B, 0x0E720060, 0x00010000, 0x036F00D2, 0x01002863, 
0x571F006C, 0x100B0604, 0x043F0010, 0x6500410F, 0x00208049, 0x00000000, 0x050F0091, 0x4C014136, 
0x0E720060, 0x00010000, 0x571F0072, 0x6601312A, 0x043F0000, 0x6601310D, 0x00208049, 0x00000000, 
0x00030032, 0x2C014900, 0xAEBD400C, 0x1A108074, 0x371C1B31, 0x1F3F00EC, 0x405AD104, 0x0E72007E, 
0x27120AE0, 0x150F00DB, 0x685A5F0F, 0x013F0017, 0x8AA326FD, 0x0500008F, 0x31127AF3, 0x5B3080E5, 
0x21FC0F6B, 0x0E72007E, 0x27120AE0, 0x155000AE, 0x580DAB0E, 0x4E6000A1, 0x00010000, 0x13160056, 
0x49B8E270, 0x00020038, 0x32123C0D, 0xAEBD400B, 0x0E72007E, 0x27120AE0, 0x571F007C, 0x3A0B0604, 
0x043F0014, 0x9E00D80F, 0x00208049, 0x00000000, 0x05060097, 0x2C012811, 0x0E72007E, 0x27120AE0, 
0x036F00C2, 0x2800584E, 0x571F006E, 0x272A3521, 0x043F0002, 0x19023A00, 0x00208049, 0x00000000, 
0x00030032, 0x2C021800, 0xCEBD4409, 0x063080F1, 0x6970195E, 0x0E72007E, 0xA012515C, 0x0C4C0021, 
0x46C919CD, 0x0B2C00A5, 0x21037A8A, 0x0E72007E, 0x27120AE0, 0x150A00C3, 0x31037964, 0x062F00F4, 
0x20C70D2A, 0x00208041, 0x00010000, 0x0001003C, 0x321258CD, 0xAEBD400A, 0x0E72007E, 0x27120AE0, 
0x1A10807E, 0x37421B47, 0x103F00E4, 0x40050898, 0x217000A6, 0x21474F0F, 0x0E72007E, 0x27120AE0, 
0x036F00DE, 0x50121350, 0x150F00D1, 0x68065F3C, 0x013F0003, 0x17EF1500, 0x3D200000, 0x00010000, 
0x0003003A, 0x2C120B00, 0xAEBD422A, 0x0110807E, 0x37421B47, 0x793F00E5, 0x402CD104, 0x0E72007E, 
0x27120AE0, 0x7A0F00D4, 0x682CE9ED, 0x5C3F0052, 0xB0F45903, 0x0E72007E, 0x27120AE0, 0xF70200DD, 
0xA0C6C301, 0x4E6200B7, 0x3202BF65, 0x4F8080D4, 0x32013F07, 0x0002003A, 0x32A7183D, 0x00E02A0B, 
0x5778C00C, 0x5B2080C0, 0x03010000, 0x0E72006A, 0x35123D5C, 0x0C4F002D, 0x02264107, 0x4C2F00B1, 
0x12D022D3, 0x0E70007E, 0x27120AE0, 0xA8450046, 0x7326477D, 0x180C006E, 0xFB12C757, 0x0E72007E, 
0x27120AE0, 0x571F006E, 0x0D05842E, 0x098F0076, 0xFDC70D01, 0x43208040, 0x00010000, 0x00010038, 
0x32120C07, 0x5778C00C, 0x5B2080C0, 0x3AC619CD, 0x432000A5, 0x2E77D146, 0x0E72006A, 0x35123D5C, 
0x0C4C002D, 0x02FA1B07, 0x0B2E00A7, 0x21774959, 0x0E70006A, 0x29097D5C, 0x31420046, 0x962679C6, 
0x0E72007E, 0x271226E0, 0xA80F00ED, 0x3323432F, 0x09880076, 0xFDC72901, 0x43208054, 0x3BEF6404, 
0x00010038, 0x32120C27, 0x5778C00C, 0x5B2080C0, 0xDB0B1303, 0x432000BD, 0xA2C6CE07, 0x0E72006E, 
0x35120AE0, 0x0C4F003D, 0xD1211B07, 0x0B2F00B3, 0x111F227D, 0x0E70006A, 0x29097D5C, 0x31400056, 
0xD503B3FD, 0x0E72007E, 0x2712455C, 0x755F0037, 0x2803477D, 0x098F0076, 0xFDC70D01, 0x43208040, 
0x00010000, 0x00010038, 0x32120C46, 0x57784E49, 0x0E72007E, 0x27120AE0, 0x036F00D2, 0x01000063, 
0x571F006C, 0x100B0604, 0x043F0000, 0x0000000F, 0x2E0F0096, 0x2C002811, 0x0E72007E, 0x27120AE0, 
0x571F006E, 0x270B3521, 0x043F0010, 0x5A01000B, 0x00040020, 0x00010000, 0x57784E49, 0x0E72007E, 
0x27120AE0, 0x571F006C, 0x100B0604, 0x043F0004, 0x7700B50F, 0x2E060096, 0x2C002811, 0x0E72007E, 
0x27120AE0, 0x036F00D2, 0x0100FA63, 0x571F006E, 0x270B3521, 0x043F0014, 0x5A01680B, 0x00040036, 
0x5F005002, 0x57784E4A, 0x0E72007E, 0x27120AE0, 0xC3108076, 0x371C1B02, 0xE73F00FD, 0x52F6D104, 
0x0E72007E, 0x27120AE0, 0x150F00C3, 0x11242025, 0x013F001F, 0x8A76C7FD, 0x0504008F, 0x3112C726, 
0x5B3080EF, 0x767AC040, 0x13160054, 0x49EF2F1D, 0x00020038, 0x3212252A, 0x57784E4A, 0x0E72007E, 
0x27120AE0, 0x01108076, 0x18320602, 0x103F00F6, 0x5224D102, 0x0E72007E, 0x27120AE0, 0x036F00D6, 
0x01005142, 0x036100D4, 0x0100513E, 0x150F00D9, 0x68E769F7, 0x013F0001, 0x7EEF0365, 0x3D200000, 
0x00010000, 0x00040030, 0x4C000B65, 0x5778450C, 0xE83080F8, 0x26DB130D, 0x0E72006A, 0x351222E5, 
0x111F0028, 0x355E195E, 0x983A0057, 0x4B036F50, 0x0E72007E, 0x27120AE0, 0xA91C00F2, 0x8344DE78, 
0xFD5000A3, 0x3519381E, 0xA94E00A5, 0x76EF0DCD, 0x0E70007E, 0x27120AE0, 0x150000C1, 0xCDC70859, 
0x608080CC, 0x65B3441A, 0x0002003C, 0x321258CD, 0x57784E4A, 0x0110807A, 0x64170D17, 0x793F00EF, 
0xE86DD102, 0x0E72007E, 0x27120AE0, 0x7A0F00D8, 0x686A373C, 0x5C3F004C, 0x2DCCB30C, 0x0E72007E, 
0x27120AE0, 0xF70200DB, 0xA0325231, 0x4E6200BF, 0x6C02D400, 0x4F8080D0, 0x09020578, 0x0002003A, 
0x32095D5E, 0x5778C21C, 0x5B2080CC, 0x03C60600, 0x0E70007E, 0x27120AE0, 0x01820050, 0x600B1331, 
0x6C2F00B2, 0x11443AE5, 0x0E72007E, 0x14120FE0, 0xA91F00F6, 0xA3035BEC, 0xA94000A5, 0x21036A30, 
0x18000068, 0xBF12F92F, 0x0E72006A, 0x351222E0, 0xC51F0073, 0x2877B792, 0x098F0076, 0xFDF42C01, 
0x00010030, 0x32560C07, 0x5778C626, 0x0E73007E, 0x27120AE0, 0x111F0036, 0xF2A10602, 0xC63F0082, 
0x6989D200, 0xFD5000AD, 0x68E1F9E0, 0x9F1C0053, 0xFDEF053D, 0x0002003C, 0x5FEE0457, 0x00C20806, 
0xAEBD400B, 0x0E720060, 0x00010000, 0x036F00D2, 0x01002863, 0x571F006C, 0x100B0604, 0x043F0010, 
0x6500410F, 0x00208049, 0x00000000, 0x050F0091, 0x4C014136, 0x0E720060, 0x00010000, 0x571F0072, 
0x6601312A, 0x043F0000, 0x6601310D, 0x00208049, 0x00000000, 0x00030032, 0x2C014900, 0xAEBD400C, 
0x1A108074, 0x371C1B31, 0x1F3F00EC, 0x405AD104, 0x0E72007A, 0xA0123DC1, 0x150F00DB, 0x685A5F0F, 
0x013F0017, 0x8AA326FD, 0x0500008F, 0x31127AF3, 0x5B3080E5, 0x21FC0F6B, 0x0E72007A, 0xA0123DC1, 
0x155000AE, 0x580DAB0E, 0x4E6000A1, 0x00010000, 0x13160056, 0x49B8E270, 0x00020020, 0x00010000, 
0xAEBD400B, 0x0E72007A, 0xA0123DC1, 0x571F007C, 0x3A0B0604, 0x043F0014, 0x9E00D80F, 0x00208049, 
0x00000000, 0x05060097, 0x2C012811, 0x0E72007A, 0xA0123DC1, 0x036F00C2, 0x2800584E, 0x571F006E, 
0x272A3521, 0x043F0002, 0x19023A00, 0x00208049, 0x00000000, 0x00030032, 0x2C021800, 0xCEBD4409, 
0x063080E1, 0x00010000, 0x0E72007A, 0xA0123DC1, 0x0C4C0021, 0x46C919CD, 0x0B2C00A5, 0x21037A8A, 
0x0E72007A, 0xA0123DC1, 0x150A00C1, 0x310379D3, 0x062F00F4, 0x20C70D2A, 0x00208041, 0x00010000, 
0x0001003C, 0x5F12042A, 0xAEBD400A, 0x0E72007A, 0xA0123DC1, 0x1A10807E, 0x37421B47, 0x103F00E0, 
0x00010000, 0x217000A6, 0x21474F0F, 0x0E72007A, 0xA0123DC1, 0x036F00DE, 0x50121350, 0x150F00D1, 
0x68065F3C, 0x013F0003, 0x17EF1500, 0x3D200000, 0x00010000, 0x0003003A, 0x2C120B00, 0xAEBD422A, 
0x0110807E, 0x37421B47, 0x793F00E5, 0x402CD104, 0x0E72007A, 0xA0123DC1, 0x7A0F00D4, 0x682CE9ED, 
0x5C3F0052, 0xB0F45903, 0x0E72007A, 0xA0123DC1, 0xF70200DD, 0xA0C6C301, 0x4E6200B7, 0x3202BF65, 
0x4F8080D4, 0x32013F07, 0x0002003A, 0x32A7183D, 0x00E22A0B, 0x5778C00C, 0x5B2080D6, 0x26770603, 
0x0E72006A, 0x35123D5C, 0x0C4F002D, 0x02211B07, 0x4C2F00B1, 0x200322D3, 0x0E700060, 0x00010000, 
0xA8450050, 0xAA2672F7, 0x180C006E, 0xFB12C757, 0x0E72006C, 0x29121D83, 0x571F0062, 0x1221B773, 
0x098F0076, 0xFD335301, 0x43208056, 0x12EFCD02, 0x00010038, 0x32DA0C07, 0x5778C00C, 0x5B2080DA, 
0x41431340, 0x432000A5, 0x2E77D146, 0x0E72006A, 0x35123D5C, 0x0C4C0029, 0x026B0A07, 0x0B2E00B5, 
0x12217AF2, 0x0E70006A, 0x29097D5C, 0x31420046, 0x962679C6, 0x0E72006C, 0x29121D83, 0xA80F00F1, 
0x3830022F, 0x09880076, 0xFDC72901, 0x43208054, 0x3BEF6404, 0x00010030, 0x32790C27, 0x5778C00C, 
0x5B2080C6, 0x2D030604, 0x432000BD, 0xA2C6CE07, 0x0E72006E, 0x43120AE0, 0x0C4F0029, 0x02210A07, 
0x0B2F00B3, 0x110322FD, 0x0E70006A, 0x29097D5C, 0x31400056, 0xD503B3FD, 0x0E72006C, 0x29121D83, 
0x755F0037, 0x2803477D, 0x098F0076, 0xFDC77301, 0x43208052, 0x09EF0202, 0x00010038, 0x32120C46, 
0x57784E49, 0x0E72007A, 0xA0123DC1, 0x036F00C0, 0x00010000, 0x571F006C, 0x100B0604, 0x043F0000, 
0x0000000F, 0x2E0F0096, 0x2C002811, 0x0E72007A, 0xA0123DC1, 0x571F006E, 0x270B3521, 0x043F0010, 
0x5A01000B, 0x00040020, 0x00010000, 0x57784E49, 0x0E72007A, 0xA0123DC1, 0x571F006C, 0x100B0604, 
0x043F0004, 0x7700B50F, 0x2E060080, 0x00010000, 0x0E72007A, 0xA0123DC1, 0x036F00C0, 0x00010000, 
0x571F006E, 0x270B3521, 0x043F0014, 0x5A01680B, 0x00040020, 0x00010000, 0x57784E4A, 0x0E72007A, 
0xA0123DC1, 0xC3108076, 0x371C1B02, 0xE73F00FD, 0x52F6D104, 0x0E72007A, 0xA0123DC1, 0x150F00C3, 
0x11242025, 0x013F001F, 0x8A76C7FD, 0x0504008F, 0x3112C726, 0x5B3080EF, 0x767AC040, 0x13160054, 
0x49EF2F1D, 0x00020020, 0x00010000, 0x57784E4A, 0x0E72007A, 0xA0123DC1, 0x01108076, 0x18320602, 
0x103F00F6, 0x5224D102, 0x0E72007A, 0xA0123DC1, 0x036F00D6, 0x01005142, 0x036100D4, 0x0100513E, 
0x150F00D9, 0x68E769F7, 0x013F0001, 0x7EEF0365, 0x3D200000, 0x00010000, 0x00040030, 0x4C000B65, 
0x5778450C, 0xE83080F8, 0x26DB130D, 0x0E72007A, 0xA0123DC1, 0x111F0024, 0x71D31B0E, 0x983A0057, 
0xD403DF4E, 0x0E72007A, 0xA0123DC1, 0xA91C00E4, 0x09D0DFF3, 0xFD5000A3, 0x3519381E, 0xA94E00B3, 
0x3BC71601, 0x0E70007A, 0xA0123DC1, 0x150000C1, 0xCDC70859, 0x608080CC, 0x65B3441A, 0x00020034, 
0x32E90407, 0x57784E4A, 0x0110807A, 0x64170D17, 0x793F00EF, 0xE86DD102, 0x0E72007A, 0xA0123DC1, 
0x7A0F00D8, 0x686A373C, 0x5C3F004C, 0x2DCCB30C, 0x0E72007A, 0xA0123DC1, 0xF70200DB, 0xA0325231, 
0x4E6200BF, 0x6C02D400, 0x4F8080D0, 0x09020578, 0x0002003A, 0x32095D5E, 0x5778C21C, 0x5B2080C4, 
0x03280600, 0x0E70007A, 0xA0123DC1, 0x01820052, 0x600B1302, 0x6C2F00B2, 0x11443AE5, 0x0E72007A, 
0xA0123DC1, 0xA91F00F6, 0xA3035BEC, 0xA94000A5, 0x21036A30, 0x18000068, 0xBF12F92F, 0x0E72007A, 
0xA0123DC1, 0xC51F0073, 0x280BB792, 0x098F0076, 0xFDF42C01, 0x00010030, 0x32560C07, 0x5778C626, 
0x0E73007A, 0xA0123DC1, 0x111F0036, 0xF2A10602, 0xC63F0082, 0x6989D200, 0xFD5000AD, 0x68E1F9E0, 
0x9F1C0053, 0xFDEF053D, 0x0002003C, 0x5FEE0457, 0x00C70F04, 0xCE7D4009, 0x01108060, 0x00010000, 
0x1D5F0040, 0x00010000, 0x501F00C1, 0x00010000, 0x062F00E0, 0x00010000, 0x00208041, 0x00010000, 
0x180F008E, 0x7612137D, 0x7B1F0060, 0x3D703883, 0x7F3F0011, 0x12EFC904, 0x0001003A, 0x40120C27, 
0xCE7D4009, 0x053080E0, 0x00010000, 0x182F003D, 0x1AB1D104, 0x155000A0, 0x00010000, 0x062F00E6, 
0x6E280F0C, 0x00208041, 0x00010000, 0x180F008E, 0x7612137D, 0x7B1F0060, 0x3D703883, 0x7F3F0011, 
0x12EFC904, 0x0001003A, 0x40120C27, 0xCE7D4007, 0x01108060, 0x00010000, 0x1D5F0040, 0x00010000, 
0x501F00C1, 0x00010000, 0x062F00E0, 0x00010000, 0x00208041, 0x00010000, 0x727F00DF, 0xC0126F6C, 
0x0001003A, 0x40120C27, 0xCE7D4007, 0x053080E0, 0x00010000, 0x182F0039, 0x1AB10A04, 0x155000A0, 
0x00010000, 0x062F00E6, 0x3A33120C, 0x00208043, 0x26EF8D66, 0x727F00DF, 0xC0126F6C, 0x0001003A, 
0x40120C27, 0x00E72F07, 0xAE35C009, 0x053080E0, 0x00010000, 0x7E2F003C, 0x1A3FD104, 0xDF5000A1, 
0x00010000, 0x062F00E6, 0x6E150F0C, 0x00208041, 0x00010000, 0x180F008E, 0x7612137D, 0x7B1F0060, 
0x3D703883, 0x7F3F0011, 0x12EFC904, 0x0001003A, 0x17120C27, 0xAE35C009, 0x01100060, 0x00010000, 
0x1D5F0040, 0x00010000, 0x501600C1, 0x00010000, 0x062F00E0, 0x00010000, 0x00208041, 0x00010000, 
0x180F008E, 0x7612137D, 0x7B1F0060, 0x3D703883, 0x7F3F0011, 0x12EFC904, 0x0001003A, 0x17120C27, 
0xAE35C009, 0x01100060, 0x00010000, 0xAB3F0041, 0x00010000, 0x501C00C1, 0x00010000, 0x062F00E0, 
0x00010000, 0x00208041, 0x00010000, 0x180F008E, 0x7612137D, 0x7B1F0060, 0x3D703883, 0x7F3F0011, 
0x12EFC904, 0x0001003A, 0x17120C27, 0xAE35C007, 0x053080E0, 0x4071472A, 0x7E2F003C, 0x1A26D146, 
0xDF5000A1, 0x00010000, 0x062F00F0, 0xD9C7060B, 0x00208041, 0x00010000, 0x727F00CF, 0xC5126F6C, 
0x0001003A, 0x64120C47, 0xAE35C007, 0x01100060, 0x00010000, 0x1D5F0040, 0x00010000, 0x501600C1, 
0x00010000, 0x062F00E0, 0x00010000, 0x00208041, 0x00010000, 0x727F00CF, 0xC5126F6C, 0x0001003A, 
0x17120C27, 0xAE35C007, 0x01100060, 0x00010000, 0xAB3F0041, 0x00010000, 0x501C00C1, 0x00010000, 
0x062F00E0, 0x00010000, 0x00208041, 0x00010000, 0x727F00CF, 0xC5126F6C, 0x0001003A, 0x17120C27, 
0xCE35CF07, 0xAF4F0025, 0x5EAAD120, 0x12600058, 0x68026F1E, 0x2E600001, 0x5E4781A9, 0xB08F0036, 
0xE7664F00, 0x458000C1, 0x00010000, 0x5D8080CF, 0x6B020704, 0x00010038, 0x0D070B10, 0x00C80809, 
0xAEBD470B, 0x0E73006C, 0x35120A0A, 0x01108072, 0xA31C1306, 0x926A0023, 0x86351343, 0xDD1400CC, 
0x341FEDBC, 0xFD5000A1, 0x00010000, 0x1E200087, 0xA403278E, 0x816C0004, 0xF7446AB2, 0x295000A6, 
0x71113949, 0x062E00E0, 0x21C76D0E, 0x0020005B, 0x4C0D4202, 0x0001003C, 0x32120404, 0x8EBD400A, 
0x0E73006C, 0x35120A0A, 0x087E005D, 0x501208F7, 0x087E005D, 0x50122635, 0x571F006E, 0x0F050602, 
0x155000BE, 0x03ED5E0C, 0x048F00C7, 0x54A81F27, 0x00208047, 0x6AEF7205, 0x22000056, 0x03EFB007, 
0x0E70006C, 0x35120A0A, 0x0003003E, 0x32120427, 0xAEBD4609, 0x063080E1, 0x6908131B, 0x0E73006C, 
0x35120A0A, 0x182F003D, 0x60F90631, 0xFD5000A1, 0x00010000, 0xD1600002, 0x5E6A00F9, 0xC45C00FE, 
0x4C005949, 0x062F00E0, 0xD4B80E02, 0xC720805B, 0x70B3AC05, 0x0001003E, 0x3212233D, 0xAEBD4609, 
0x063080EF, 0x3A191B0E, 0x0E73006C, 0x35120A0A, 0x182A0025, 0x5E1FD146, 0xFD5000AD, 0x7AC4C0B4, 
0x1E200083, 0x4D8F1C91, 0x81660006, 0x5ED0DDC2, 0x062A00E4, 0x2EC7150E, 0x00208057, 0xDCEFF948, 
0x00010038, 0x32120C36, 0x8EBD400A, 0x1F3080F0, 0x0E010408, 0x0E73006C, 0x35120A0A, 0x087F0053, 
0x01047C03, 0x08760053, 0x01010069, 0x492A0024, 0x6E1BD10A, 0x1B5000BD, 0x6E32596A, 0x098F006C, 
0x6FB3770D, 0x22000056, 0x03EFB007, 0x0E70006C, 0x35120A0A, 0x00030036, 0x32042303, 0x8EBD4409, 
0x0E73006C, 0x35120A0A, 0x08760059, 0x501437C5, 0x0876005B, 0x501437C5, 0x087A0053, 0x50073B29, 
0x011A006C, 0x0F6A1B0A, 0x013A000D, 0x7CB3140D, 0x22000056, 0x03EFB007, 0x0E70006C, 0x35120A0A, 
0x00030032, 0x4C071800, 0x8EBD420B, 0x0E72006C, 0x35120A0A, 0x0110006E, 0x0F540647, 0x082F007C, 
0x69900636, 0x0E72006C, 0x35120A0A, 0x087F005D, 0x5012DA6B, 0x087F005B, 0x5012BFE3, 0x3F7000A5, 
0x7D4727C5, 0x131F0052, 0x2EEF2402, 0x22000056, 0x03EFB007, 0x0E70006C, 0x35120A0A, 0x00040030, 
0x32693C13, 0x8EBD420B, 0x0E72006C, 0x35120A0A, 0x087F005D, 0x5012DA6B, 0x087F005B, 0x5012BFE3, 
0x0110006E, 0x0F540647, 0x082F007C, 0x69900636, 0x0E72006C, 0x35120A0A, 0x3F7000A5, 0x7D4727C5, 
0x131F0052, 0x2EEF2402, 0x22000056, 0x03EFB007, 0x0E70006C, 0x35120A0A, 0x00040030, 0x32693C13, 
0x8EBD420B, 0x0E72006C, 0x35120A0A, 0x087F005D, 0x5012DA6B, 0x087F005B, 0x5012BFE3, 0x0110006E, 
0x0F540647, 0x082F007C, 0x69900636, 0x3F7000A5, 0x7D4727C5, 0x0E72006C, 0x35120A0A, 0x131F0052, 
0x2EEF2402, 0x22000056, 0x03EFB007, 0x0E70006C, 0x35120A0A, 0x00040030, 0x32693C13, 0x00E82A0C, 
0x56784E48, 0x0E740068, 0x7B1207D3, 0x087F005D, 0x501256F7, 0x087F005D, 0x50124535, 0x011C007E, 
0x3720061A, 0x155000B6, 0x2503220C, 0x858F00C0, 0x08EF4531, 0x43208040, 0x00010000, 0x00030038, 
0x32120C65, 0x56784E47, 0x0E74007C, 0xB8120AD3, 0x087F0051, 0x50010000, 0x087F0051, 0x50010000, 
0x6B7F0050, 0x50010000, 0x011C0060, 0x00010000, 0x013C0001, 0x00010000, 0x00040020, 0x00010000, 
0x5678C107, 0x232700D2, 0x2664130A, 0x0E74007C, 0xB8120AD3, 0x181F00C5, 0x5E44C798, 0x155000B2, 
0xF2034308, 0x062F00E0, 0x0AC70302, 0x00208041, 0x59EF1A28, 0x00010032, 0x02CB0C01, 0x56784E49, 
0x0E72007C, 0xB8120AD3, 0x01100060, 0x00010000, 0x082F0060, 0x00010000, 0x087F0051, 0x50010000, 
0x087F0051, 0x50010000, 0x0E72007C, 0xB8120AD3, 0x3F7000A1, 0x00010000, 0x131F0040, 0x00010000, 
0x00040020, 0x00010000, 0x5678C108, 0x0E72007C, 0xB8120AD3, 0x1F0200DB, 0x68211300, 0x4D2F00A6, 
0x1D448492, 0x0E72007C, 0x6E120AD3, 0xAE1F00E4, 0x4E444998, 0x062F00E8, 0x15B0450E, 0x00208051, 
0x23EF566E, 0x00010038, 0x02120C0E, 0x56784E48, 0x0E74007C, 0xB8120AD3, 0x0876005F, 0x01120803, 
0x087F005F, 0x0112DDE3, 0x182E002F, 0x16200658, 0x215000A0, 0x00010000, 0x295000A6, 0x350351A5, 
0x098F0074, 0x31EFD909, 0x0003003C, 0x32A2041D, 0x5678C10B, 0x28720068, 0x92143FD3, 0x8E108066, 
0x11771B03, 0x0B2080CC, 0x21511B06, 0x0E72006C, 0x35120AD3, 0x745F0005, 0x50441B31, 0x725000AD, 
0x43C6ED0C, 0x062A00E6, 0x36337327, 0x00208043, 0xCFEF0207, 0x22000056, 0x03EFB007, 0x28700068, 
0x7B1207D3, 0x00010032, 0x02150C07, 0x5678C306, 0x57108060, 0x00010000, 0x7F3F00C6, 0x5DED0647, 
0x0E74007C, 0xB8120AD3, 0xF41F0006, 0x11A1EBF7, 0x234F00C1, 0x76EF4C04, 0x0004003C, 0x4C120404, 
0x5678CE4A, 0x103080E8, 0x79F91372, 0x0E74007C, 0xB8120AD3, 0x182F0031, 0xD1354207, 0x725000A3, 
0x35033849, 0x1E200093, 0xF00342E6, 0x81680008, 0x46053467, 0x725000B7, 0x5B031AF1, 0x062A00E4, 
0x0433230B, 0x00208045, 0x85EFAD36, 0x00010038, 0x020C0C20, 0x5678C133, 0x0E74007C, 0xB8120AD3, 
0x455F0030, 0x60B83A46, 0x00010020, 0x00010000, 0x5678C109, 0x232700DC, 0x20431B72, 0x0E72007C, 
0xB8120AD3, 0x181F00C5, 0x5E44C798, 0x155000A0, 0x00010001, 0x062F00F0, 0x1BB86D02, 0x00208041, 
0x03010000, 0x22000056, 0x03EFB007, 0x2872007C, 0xB8120AD3, 0x0001003A, 0x02120C60, 0x5678C10A, 
0x0E72007C, 0xB8120AD3, 0x1F0200DB, 0x68211300, 0x4D2F00A6, 0x1D448492, 0x0E72007C, 0x6E120AD3, 
0xAE1F00E4, 0x4E444998, 0x062F00E8, 0x15B0450E, 0x00208051, 0x23EF566E, 0x22000056, 0x03EFB007, 
0x2872007C, 0xB8120AD3, 0x0001003A, 0x02120C60, 0x00C90809, 0xAEBD470B, 0x0E73006C, 0xAE120A0A, 
0x01108072, 0xA31C1306, 0x926A0023, 0x86351343, 0xDD1400CC, 0x341FEDBC, 0xFD5000A1, 0x00010000, 
0x1E200087, 0xA403278E, 0x816C0004, 0xF7446AB2, 0x295000A6, 0x71113949, 0x062E00E0, 0x21C76D0E, 
0x0020005B, 0x4C0D4202, 0x0001003C, 0x32120404, 0x8EBD400A, 0x0E73006C, 0xAE120A0A, 0x087E005D, 
0x501208F7, 0x087E005D, 0x50122635, 0x571F006E, 0x0F050602, 0x155000BE, 0x03ED5E0C, 0x048F00C7, 
0x54A81F27, 0xC7208047, 0x6AEF7205, 0x22000056, 0x03EFB007, 0x0E70006C, 0xAE120A0A, 0x0003003A, 
0x32123C3D, 0xAEBD4609, 0x063080E1, 0x6908131B, 0x0E73006C, 0xAE120A0A, 0x182F003D, 0x60F90631, 
0xFD5000A1, 0x00010000, 0xD1600002, 0x5E6A00F9, 0xC45C00FE, 0x4C005949, 0x062F00E0, 0xD4B80E02, 
0x0020805B, 0x70B3AC05, 0x0001003C, 0x3212230A, 0xAEBD4609, 0x063080EF, 0x3A191B0E, 0x0E73006C, 
0xCA120A0A, 0x182A0025, 0x5E1FD146, 0xFD5000AD, 0x7AC4C0B4, 0x1E200083, 0x4D8F1C91, 0x81660006, 
0x5ED0DDC2, 0x062A00E4, 0x2EC7150E, 0x00208057, 0xDCEFF948, 0x00010038, 0x32120C36, 0x8EBD400A, 
0x1F3080F0, 0x0E010408, 0x0E73006C, 0xCA120A0A, 0x087F0053, 0x01047C03, 0x08760053, 0x01010069, 
0x492A0024, 0x6E1BD10A, 0x1B5000BD, 0x6E32596A, 0x098F006C, 0x6FB3770D, 0x22000056, 0x03EFB007, 
0x0E70006C, 0xCA120A0A, 0x00030036, 0x32042303, 0x8EBD4409, 0x0E73006C, 0xCA120A0A, 0x08760059, 
0x501437C5, 0x0876005B, 0x501437C5, 0x087A0053, 0x50073B29, 0x011A006C, 0x0F6A1B0A, 0x013A000D, 
0x7CB3140D, 0x22000056, 0x03EFB007, 0x0E70006C, 0xCA120A0A, 0x00030032, 0x4C071800, 0x8EBD420B, 
0x0E72006C, 0xCA120A0A, 0x0110006E, 0x0F540647, 0x082F007C, 0x69900636, 0x0E72006C, 0xCA120A0A, 
0x087F005D, 0x5012DA6B, 0x087F005B, 0x5012BFE3, 0x3F7000A5, 0x7D4727C5, 0x131F0052, 0x2EEF2402, 
0x22000056, 0x03EFB007, 0x0E70006C, 0xCA120A0A, 0x00040030, 0x32693C13, 0x8EBD420B, 0x0E720068, 
0x62013B6B, 0x087F005D, 0x5012DA6B, 0x087F005B, 0x5012BFE3, 0x0110006E, 0x0F540647, 0x082F007C, 
0x69900636, 0x0E72006C, 0xCA120A0A, 0x3F7000A5, 0x7D4727C5, 0x131F0052, 0x2EEF2402, 0x22000056, 
0x03EFB007, 0x0E70006C, 0xCA120A0A, 0x00040030, 0x32693C13, 0x8EBD420B, 0x0E720068, 0x62013B6B, 
0x087F005D, 0x5012DA6B, 0x087F005B, 0x5012BFE3, 0x0110006E, 0x0F540647, 0x082F007C, 0x69900636, 
0x3F7000A5, 0x7D4727C5, 0x0E72006C, 0xCA120A0A, 0x131F0052, 0x2EEF2402, 0x22000056, 0x03EFB007, 
0x0E70006C, 0xCA120A0A, 0x00040030, 0x32693C13, 0x00E92A0C, 0x56784E48, 0x0E740068, 0xCA12BCD3, 
0x087F005D, 0x501256F7, 0x087F005D, 0x50124535, 0x011C007E, 0x3720061A, 0x155000B6, 0x2503220C, 
0x858F00C0, 0x08EF4531, 0x43208040, 0x00010000, 0x00030038, 0x32120C65, 0x56784E47, 0x0E740068, 
0xCA12BCD3, 0x087F0051, 0x50010000, 0x087F0051, 0x50010000, 0x6B7F0050, 0x50010000, 0x011C0060, 
0x00010000, 0x013C0001, 0x00010000, 0x00040020, 0x00010000, 0x5678C107, 0x232700D2, 0x2035130A, 
0x0E74006C, 0xCA120AD3, 0x181F00C5, 0x5E44C798, 0x155000B2, 0xF2034308, 0x062F00F0, 0x1BEF0302, 
0x00208041, 0x59EF1A28, 0x0001003A, 0x02120C01, 0x56784E49, 0x0E720068, 0xCA12BCD3, 0x01100060, 
0x00010000, 0x082F0060, 0x00010000, 0x0E720068, 0xCA12BCD3, 0x087F0051, 0x50010000, 0x087F0051, 
0x50010000, 0x3F7000A1, 0x00010000, 0x131F0040, 0x00010000, 0x00040020, 0x00010000, 0x5678C108, 
0x0E720064, 0xCAE92BD3, 0x1F0200C1, 0x330B130D, 0x4D2F00A6, 0x3A448EE5, 0x0E72006C, 0xCA121DD3, 
0xAE1F00E4, 0x09D02798, 0x062F00E0, 0x3FC74509, 0x00208049, 0xAAF2001D, 0x0001003E, 0x02120401, 
0x56784E48, 0x0E740068, 0xCA12BCD3, 0x0876005F, 0x01120803, 0x087F005F, 0x0112DDE3, 0x182E002F, 
0x16200658, 0x215000A0, 0x00010000, 0x295000A6, 0x350351A5, 0x098F0074, 0x31EFD909, 0x0003003C, 
0x32A2041D, 0x5678C10B, 0x2872007C, 0x8012F1D3, 0x8E108076, 0x7F1F1B03, 0x0B2080C4, 0x21031B06, 
0x0E72006C, 0xCA1245D3, 0x745F0005, 0x50441B31, 0x725000A5, 0x2919220C, 0x062A00E6, 0x36337327, 
0x00208057, 0x73EF7E01, 0x22000056, 0x03EFD907, 0x27700068, 0xCA12BCD3, 0x00010032, 0x02CB0C07, 
0x5678C306, 0x57108060, 0x00010000, 0x7F3F00C6, 0x5DED0647, 0x0E740068, 0xCA12BCD3, 0xF41F0006, 
0x11A1EBF7, 0x234F00C1, 0x76EF4C04, 0x0004003C, 0x4C120404, 0x5678CE4A, 0x103080E0, 0x3A641346, 
0x0E740068, 0xDD1209D3, 0x182F003D, 0xCA1FD11D, 0x725000A3, 0x35033849, 0x1E200089, 0x7D96E8F4, 
0x8168000A, 0x10BE5771, 0x725000B7, 0x5B031AF1, 0x062A00F8, 0x09F01509, 0x00208041, 0x03010057, 
0x0001003C, 0x02122346, 0x5678C133, 0x0E740068, 0xCA12BCD3, 0x455F0030, 0x60B83A46, 0x00010020, 
0x00010000, 0x5678C109, 0x232700DC, 0x20431B72, 0x0E720068, 0xCA12F5D3, 0x181F00C5, 0x5E44C798, 
0x155000A0, 0x00010001, 0x062F00F0, 0x1BB86D02, 0x00208041, 0x03010000, 0x22000056, 0x03EFB007, 
0x28720068, 0xCA12BCD3, 0x0001003A, 0x02120C60, 0x5678C10A, 0x0E720064, 0xCAE92BD3, 0x1F0200C1, 
0x330B130D, 0x4D2F00A6, 0x3A448EE5, 0x0E72006C, 0xCA121DD3, 0xAE1F00E4, 0x09D02798, 0x062F00E0, 
0x3FC74509, 0x00208049, 0xAAF2001D, 0x22000056, 0x03EFB007, 0x28720068, 0xCA12BCD3, 0x0001003A, 
0x02120C60, 0x00CA0809, 0xAEBD470B, 0x0E73007C, 0x5E120A0A, 0x01108072, 0xA31C1306, 0x926A0023, 
0x86351343, 0xDD1400CC, 0x341FEDBC, 0xFD5000A1, 0x00010000, 0x1E200087, 0xA403278E, 0x816C0004, 
0xF7446AB2, 0x295000A6, 0x71113949, 0x062E00E0, 0x21C76D0E, 0x0020005B, 0x4C0D4202, 0x0001003C, 
0x32120404, 0x8EBD400A, 0x0E73007C, 0x5E120A0A, 0x087E005D, 0x501208F7, 0x087E005D, 0x50122635, 
0x571F006E, 0x0F050602, 0x155000BE, 0x03ED5E0C, 0x048F00C7, 0x54A81F27, 0xC7208047, 0x6AEF7205, 
0x22000056, 0x03EFB007, 0x0E70007C, 0x5E120A0A, 0x0003003A, 0x32123C3D, 0xAEBD4609, 0x063080E1, 
0x6908131B, 0x0E73007C, 0x5E120A0A, 0x182F003D, 0x60F90631, 0xFD5000A1, 0x00010000, 0xD1600002, 
0x5E6A00F9, 0xC45C00FE, 0x4C005949, 0x062F00E0, 0xD4B80E02, 0x0020805B, 0x70B3AC05, 0x0001003C, 
0x3212230A, 0xAEBD4609, 0x063080EF, 0x3A191B0E, 0x0E73007C, 0x5E120A0A, 0x182A0025, 0x5E1FD146, 
0xFD5000AD, 0x7AC4C0B4, 0x1E200083, 0x4D8F1C91, 0x81660006, 0x5ED0DDC2, 0x062A00E4, 0x2EC7150E, 
0x00208057, 0xDCEFF948, 0x00010038, 0x32120C36, 0x8EBD400A, 0x1F3080F0, 0x0E010408, 0x0E73007C, 
0x5E120A0A, 0x087F0053, 0x01047C03, 0x08760053, 0x01010069, 0x492A0024, 0x6E1BD10A, 0x1B5000BD, 
0x6E32596A, 0x098F006C, 0x6FB3770D, 0x22000056, 0x03EFB007, 0x0E70007C, 0x5E120A0A, 0x00030036, 
0x32042303, 0x8EBD4409, 0x0E73007C, 0x5E120A0A, 0x08760059, 0x501437C5, 0x0876005B, 0x501437C5, 
0x087A0053, 0x50073B29, 0x011A006C, 0x0F6A1B0A, 0x013A000D, 0x7CB3140D, 0x22000056, 0x03EFB007, 
0x0E70007C, 0x5E120A0A, 0x00030032, 0x4C071800, 0x8EBD420B, 0x0E72007C, 0x5E120A0A, 0x0110006E, 
0x0F540647, 0x082F007C, 0x69900636, 0x0E72007C, 0x5E120A0A, 0x087F005D, 0x5012DA6B, 0x087F005B, 
0x5012BFE3, 0x3F7000A5, 0x7D4727C5, 0x131F0052, 0x2EEF2402, 0x22000056, 0x03EFB007, 0x0E70007C, 
0x5E120A0A, 0x00040030, 0x32693C13, 0x8EBD420B, 0x0E72007C, 0x5E120A0A, 0x087F005D, 0x5012DA6B, 
0x087F005B, 0x5012BFE3, 0x0110006E, 0x0F540647, 0x082F007C, 0x69900636, 0x0E72007C, 0x5E120A0A, 
0x3F7000A5, 0x7D4727C5, 0x131F0052, 0x2EEF2402, 0x22000056, 0x03EFB007, 0x0E70007C, 0x5E120A0A, 
0x00040030, 0x32693C13, 0x8EBD420B, 0x0E72007C, 0x5E120A0A, 0x087F005D, 0x5012DA6B, 0x087F005B, 
0x5012BFE3, 0x0110006E, 0x0F540647, 0x082F007C, 0x69900636, 0x3F7000A5, 0x7D4727C5, 0x0E72007C, 
0x5E120A0A, 0x131F0052, 0x2EEF2402, 0x22000056, 0x03EFB007, 0x0E70007C, 0x5E120A0A, 0x00040030, 
0x32693C13, 0x00EA2A0C, 0x56784E48, 0x0E74007C, 0xA7120AD3, 0x087F005D, 0x501256F7, 0x087F005D, 
0x50124535, 0x011C007E, 0x3720061A, 0x155000B6, 0x2503220C, 0x858F00C0, 0x08EF4531, 0x43208040, 
0x00010000, 0x00030038, 0x32120C65, 0x56784E47, 0x0E74007C, 0xA7120AD3, 0x087F0051, 0x50010000, 
0x087F0051, 0x50010000, 0x6B7F0050, 0x50010000, 0x011C0060, 0x00010000, 0x013C0001, 0x00010000, 
0x00040020, 0x00010000, 0x5678C107, 0x232700D2, 0x1203470A, 0x0E74006C, 0xA6120AD3, 0x181F00C7, 
0x5E44C7E5, 0x155000A0, 0x00010000, 0x062F00F0, 0x4EC71502, 0x00208041, 0x59EF1A28, 0x0001003A, 
0x02120C01, 0x56784E49, 0x0E72007C, 0xA7120AD3, 0x01100060, 0x00010000, 0x082F0060, 0x00010000, 
0x0E72007C, 0xA7120AD3, 0x087F0051, 0x50010000, 0x087F0051, 0x50010000, 0x3F7000A1, 0x00010000, 
0x131F0040, 0x00010000, 0x00040020, 0x00010000, 0x5678C108, 0x0E72007C, 0xA7120AD3, 0x1F0200D9, 
0xF2C6130D, 0x4D2F00B6, 0x3B448E9C, 0x0E72007C, 0xA7120AD3, 0xAE1F00E0, 0x4ED02298, 0x062F00E4, 
0x26C79557, 0x00208051, 0x23EF566E, 0x00010030, 0x02E95A09, 0x56784E48, 0x0E73007C, 0xA7120AD3, 
0x0876005F, 0x01120803, 0x087F005F, 0x0112DDE3, 0x182E002F, 0x16200658, 0x215000A0, 0x00010000, 
0x295000A6, 0x350351A5, 0x098F0074, 0x31EFD909, 0x0003003C, 0x32A2041D, 0x5678C10B, 0x2772007C, 
0xA7120AD3, 0x8E108066, 0x11771B03, 0x0B2080C0, 0x76441306, 0x0E72007C, 0xA7120AD3, 0x745F0005, 
0x50441B31, 0x725000A5, 0x43197D0C, 0x062A00E6, 0x36334227, 0x00208053, 0x09EF1D01, 0x22000056, 
0x03EFD907, 0x2770007C, 0xA7120AD3, 0x0001003A, 0x02600C07, 0x5678C306, 0x57108060, 0x00010000, 
0x7F3F00C6, 0x5DED0647, 0x0E74007C, 0xA7120AD3, 0xF41F0006, 0x11A1EBF7, 0x234F00C1, 0x76EF4C04, 
0x0004003C, 0x4C120404, 0x5678CE4A, 0x103080E8, 0x79F91372, 0x0E74007C, 0xA7120AD3, 0x182F0031, 
0xD1354207, 0x725000A3, 0x35033849, 0x1E200093, 0xF00342E6, 0x81680008, 0x46053467, 0x725000B7, 
0x5B031AF1, 0x062A00E4, 0x0433230B, 0x00208045, 0x85EFAD36, 0x00010038, 0x020C0C20, 0x5678C133, 
0x0E74007C, 0xA7120AD3, 0x455F0030, 0x60B83A46, 0x00010032, 0x5FA10E03, 0x5678C109, 0x232700DC, 
0x20431B72, 0x0E72006C, 0xA6120AD3, 0x181F00C5, 0x5E44C798, 0x155000A0, 0x00010001, 0x062F00F0, 
0x1BB86D02, 0x00208041, 0x59EF1A28, 0x22000056, 0x03EFB007, 0x2872006C, 0xA6120AD3, 0x0001003A, 
0x02120C60, 0x5678C10A, 0x0E72007C, 0xA7120AD3, 0x1F0200D9, 0xF2C6130D, 0x4D2F00B6, 0x3B448E9C, 
0x0E72006C, 0x0309AED3, 0xAE1F00E0, 0x4ED02298, 0x062F00E4, 0x26C79557, 0x00208051, 0x23EF566E, 
0x22000056, 0x03EFB007, 0x2872006C, 0xA6120AD3, 0x0001003A, 0x02120C60, 0x00CE0806, 0xAEBD4009, 
0x0E73007E, 0xF8127BC1, 0x6B7C0044, 0x03013459, 0x011E0070, 0x6401045E, 0x043E001A, 0xD412BCF0, 
0x2E0A008C, 0x1112C030, 0x048F00D3, 0x70C1BF53, 0x048F00D3, 0xA6B85637, 0x6F20805A, 0x0E00470A, 
0x00040030, 0x32CB0C1D, 0xAEBD4509, 0x053080F6, 0x0E0AD16D, 0x0E72007E, 0xF8127BC1, 0xF41E0010, 
0xB8131701, 0x234800CB, 0x191B1715, 0x0E72007E, 0xF8127BC1, 0xDE0700C2, 0xFD0C4268, 0x4E6000A1, 
0x00010000, 0x9C8080C7, 0x030130E6, 0x00010038, 0x800D2C1D, 0xAEBD4708, 0x011F8070, 0x2B010006, 
0x155000A0, 0x00010001, 0x162F0086, 0x03013405, 0x0E73007E, 0xF8127BC1, 0x455F0006, 0x00013401, 
0x098C0066, 0x03013405, 0x1220804D, 0x0B02FE04, 0x00020020, 0x00010000, 0xAEBD4006, 0x0E73007E, 
0xF8127BC1, 0x2171005B, 0x501259F4, 0x6B72005E, 0x501251E3, 0x011C006C, 0x302E0602, 0x013A0009, 
0x4D14354B, 0x0004003E, 0x8C127E07, 0xAEBD4507, 0x053C80F0, 0xB00C190A, 0x0E730060, 0x00010000, 
0xF41F0000, 0x270C68ED, 0xD34800C0, 0x0001001C, 0xDE5F009D, 0x610DE59C, 0x048280C3, 0x00014A0D, 
0x00010030, 0x5F013616, 0xAEBD4F37, 0x0E73007E, 0xF8127BC1, 0x6B7F0042, 0x6001280F, 0x571F0076, 
0x3A010609, 0x2E600001, 0x00010000, 0x554F00E4, 0x60014D77, 0x558080CD, 0x36005F11, 0x0003003E, 
0x32001B77, 0x00EE2A08, 0x4769C106, 0x5B2080D0, 0x2077040B, 0x0E73006E, 0x0C120A5C, 0x011F0064, 
0x31301B13, 0x2A8E0067, 0x65C71F0A, 0x12208053, 0x73EF3C07, 0x00020038, 0x5F120C46, 0x47694E46, 
0x0E730060, 0x00010000, 0x217C005B, 0x041259F4, 0x6B7C005E, 0x50120FE3, 0x571C0078, 0x0F2E195E, 
0x043C0014, 0x70EF5306, 0x0003003A, 0x2C120C01, 0x47694E47, 0x0E730060, 0x00010000, 0x6B7F0046, 
0x45013BC1, 0x571F0072, 0x4C011201, 0x2E600001, 0x00010000, 0x554F00F4, 0x32013008, 0x558080C3, 
0x03010076, 0x00030030, 0x32011209, 0x4769C106, 0x5B2080CE, 0x4D06D101, 0x0E760068, 0xA2095860, 
0x215F0026, 0x3E5D0602, 0x2A8F0061, 0xB3465709, 0x1220804D, 0x0B02FE09, 0x00020038, 0x5F091B46, 
0x4769CF05, 0x0E7F0060, 0x00010000, 0xFF7F002E, 0x35A41B02, 0x2A8F0071, 0x6AC70207, 0x12208057, 
0x0E013405, 0x0002003C, 0x2C120446, 0x4769C107, 0x5B2080D0, 0x2077040B, 0x011F0074, 0x7F301B13, 
0x2A8E0067, 0x39C71F0A, 0x12208053, 0x73EF3C07, 0x33000057, 0x5DEF5B01, 0x0E73007E, 0x02120AE8, 
0x00020030, 0x7C560C46, 0x4769C104, 0x5B2080D4, 0x20421B0B, 0x0E71006E, 0x0C120A5C, 0x011F0064, 
0x31301B13, 0xFD5F00BF, 0x5924213C, 0x4769C106, 0x0E78006E, 0x0C120A5C, 0x301F0036, 0x15C10607, 
0x2F60006B, 0x3DD820F7, 0x2A2F00E7, 0x65C71F01, 0x12208051, 0x73EF3C2A, 0x0002003A, 0x32C00C01, 
0x00CF0806, 0xAEBD400A, 0x0E70006C, 0x00127BBC, 0x0E73006E, 0x001256E0, 0x6B7C004E, 0x7612518F, 
0x011E0076, 0x0F420602, 0x043E001A, 0xD412BCF0, 0x2E0A008C, 0x1112C030, 0x048F00D3, 0x70C1BF53, 
0x048F00D3, 0xA6B85637, 0x6F20805A, 0x0E00470A, 0x00040030, 0x32CB0C1D, 0xAEBD450B, 0x053080F6, 
0x0E0AD16D, 0x0E70006C, 0x00127BBC, 0x0E72006E, 0x001256E0, 0xF41E0010, 0xB8131701, 0x234800CB, 
0x191B1715, 0x0E70006C, 0x00127BBC, 0x0E72006E, 0x001256E0, 0xDE0700C2, 0xFD0C4268, 0x4E6000A1, 
0x00010000, 0x9C8080C7, 0x030130E6, 0x00010038, 0x800D2C1D, 0xAEBD4709, 0x011F807A, 0x937A1956, 
0x155000B8, 0x2E15DE38, 0x162F0080, 0x215D57C8, 0x0E70006C, 0x00127BBC, 0x0E73006E, 0x001256E0, 
0x455F001C, 0x180AF54E, 0x098C0078, 0x09F2570E, 0x1220804D, 0x0B02FE04, 0x00020030, 0x3220180B, 
0xAEBD4007, 0x0E70006C, 0x00127BBC, 0x0E73006E, 0x001256E0, 0x2171005B, 0x501259F4, 0x6B72005E, 
0x501251E3, 0x011C006C, 0x302E0602, 0x013A0009, 0x4D14354B, 0x0004003C, 0x8C127E2F, 0xAEBD4508, 
0x053C80F0, 0xB00C190A, 0x0E70006C, 0x00127BBC, 0x0E73006E, 0x001256E0, 0xF41F0000, 0x270C68ED, 
0xD34800C0, 0x0001001C, 0xDE5F009D, 0x610DE59C, 0x048280C3, 0x00014A0D, 0x00010030, 0x5F013616, 
0xAEBD4F38, 0x0E70006C, 0x00127BBC, 0x0E73006E, 0x001256E0, 0x6B7F0042, 0x6001280F, 0x571F0076, 
0x3A010609, 0x2E600001, 0x00010000, 0x554F00E4, 0x60014D77, 0x558080CD, 0x36005F11, 0x0003003E, 
0x32001B77, 0x00EF2A09, 0x4769C107, 0x5B2080D0, 0x2077040B, 0x0E71006C, 0x00127BBC, 0x0E72006E, 
0x0012565C, 0x011F0064, 0x31301B13, 0x2A8E0067, 0x65C71F0A, 0x12208053, 0x73EF3C01, 0x0002003C, 
0x32120404, 0x47694E47, 0x0E71006C, 0x00127BBC, 0x0E72006E, 0x001256E0, 0x217C005B, 0x041259F4, 
0x6B7C005E, 0x50120FE3, 0x571C0078, 0x0F2E195E, 0x043C0014, 0x70EF5306, 0x0003003A, 0x2C120C01, 
0x47694E48, 0x2771006C, 0x00127BBC, 0x2772006E, 0x001256E0, 0x6B7F0046, 0x45013BC1, 0x571F0072, 
0x4C011201, 0x2E600001, 0x00010000, 0x554F00F4, 0x32013008, 0x558080C3, 0x03010076, 0x00030030, 
0x32011209, 0x4769C107, 0x5B2080CE, 0x4D06D101, 0x2772006C, 0x00127BBC, 0x2774006E, 0x0012565C, 
0x215F0026, 0x31441B02, 0x2A8F0077, 0x73331F01, 0x1220804D, 0x0B02FE09, 0x00020038, 0x32120C07, 
0x4769CF06, 0x2774006C, 0x00127BBC, 0x277F006E, 0x001256E0, 0xFF7F002E, 0x35A41B02, 0x2A8F0071, 
0x6AC70207, 0x12208057, 0x0E013405, 0x0002003C, 0x32120446, 0x4769C108, 0x5B2080D0, 0x2077040B, 
0x2771006C, 0x00127BBC, 0x011F0064, 0x31301B13, 0x2A8E0067, 0x65C70E0A, 0x12208053, 0x73EF3C01, 
0x33000057, 0x5DEF5B01, 0x2772006E, 0x001256E8, 0x00020030, 0x7C560C46, 0x4769C109, 0x5B2080D0, 
0x2077040B, 0x011F0064, 0x31301B13, 0x2A8E0067, 0x65C71F0A, 0x12208053, 0x73EF3C01, 0x33000057, 
0x5DEF5B01, 0x2772006E, 0x001256E8, 0x33000057, 0x5DEF5B01, 0x2771006E, 0x00127BE8, 0x00020030, 
0x7C560C46, 0x4769C105, 0x5B2080D4, 0x20421B0B, 0x0E71006C, 0x00127BBC, 0x0E71006C, 0x00127BBC, 
0x011F0064, 0x31301B13, 0xFD5F00BF, 0x5924213C, 0x4769C107, 0x0E74006C, 0x00127BBC, 0x0E74006C, 
0x00127BBC, 0x301F0036, 0x15C10607, 0x2F60006B, 0x3DD820F7, 0x2A2F00E7, 0x65C71F01, 0x12208051, 
0x73EF3C2A, 0x0002003A, 0x32C00C01, 0x00D40803, 0xCEBD4007, 0x0E72006C, 0xA2127BBC, 0x0C4C002D, 
0x811B9D2F, 0x0B2F00A1, 0x4D44BDF9, 0x0E72006C, 0xA2127BBC, 0x0F4C004F, 0xA51BC5F1, 0x048080C1, 
0x03010009, 0x0001003C, 0x4002502F, 0xCEBD4206, 0x0E72006C, 0xA2127BBC, 0x384C0056, 0xDB61065A, 
0x203F0081, 0xE161281F, 0x0E72006C, 0xA2127BBC, 0x2D4C003E, 0x71241C6D, 0x00020036, 0x0E020633, 
0xCEBD4E05, 0x6C4200CC, 0x4D00D907, 0x0E72006C, 0xA2127BBC, 0x6C1F00E3, 0x81017D02, 0x6D4F00BC, 
0x7300D331, 0x6D02003F, 0x8B001401, 0x00F42A09, 0x5778C00A, 0x0B2080C0, 0x2D261341, 0x0E72006E, 
0xA2120AE0, 0x0C4E003F, 0x93191B02, 0x615000A6, 0x3DBAC04D, 0x0B2F00B5, 0x11447AD3, 0x0E72006C, 
0xA2127BBC, 0x0F4C0043, 0x06C7F927, 0xEA200090, 0x12C71A2A, 0x048080CF, 0x76022F05, 0x00010030, 
0x64A90C07, 0x5778C206, 0x0E72006C, 0xA2127BBC, 0xB44F0047, 0x35E40602, 0x203F0081, 0x5DEDBCD3, 
0x0E72006C, 0xA2127BBC, 0x2D460036, 0x25F07E02, 0x0001003E, 0x32090402, 0x5778C206, 0x0E72006C, 
0xA2127BBC, 0xD910806E, 0x24CD1B22, 0xB55F0068, 0xD1243411, 0x0E72006C, 0xA2127BBC, 0xE18000D9, 
0x7AF5321D, 0x0001003E, 0x7C57DB3D, 0x5778C475, 0x4D200080, 0x00010000, 0x0E73006C, 0xA2127BBC, 
0xDC1F00E0, 0x00010000, 0x4D2F00A0, 0x00010000, 0x00010020, 0x00010000, 0x5778C418, 0x5B2080C6, 
0x03013405, 0x0E72006C, 0xA2127BBC, 0x01820040, 0x3E031343, 0x6C2F00A4, 0x21CB8E4E, 0x0E72006C, 
0xA2127BBC, 0xA91F00F4, 0xD7C77802, 0xA94000A1, 0x7EA86002, 0x00010038, 0x64120B0A, 0x5778C025, 
0x0E73006C, 0xA2127BBC, 0x0C4F0025, 0x02C94131, 0x615000BC, 0x64323B11, 0x4D2F00BA, 0x3B0D7002, 
0x00010022, 0x0B175D07, 0x5778C008, 0x0B2080C0, 0x2D261341, 0x0E72006C, 0xA2127BBC, 0x0C4E0037, 
0x93441B1A, 0x615000A6, 0x3DBAC04D, 0x0B2F00A9, 0x651F224E, 0x0E72006C, 0xA2127BBC, 0x0F4C0043, 
0x62C7F947, 0xEA20009C, 0x12F2742A, 0x5778CE05, 0x6C4200CE, 0x4D00D901, 0x0E72006C, 0xA2127BBC, 
0x6C1F00E3, 0x81015202, 0x6D4F00BC, 0x7300D331, 0x6D02003F, 0x8B001401, 0x5778C223, 0x0E74006C, 
0xA2127BBC, 0xB44F0047, 0x35E40602, 0x203F0095, 0x48A12619, 0x00D90803, 0xCEBD410C, 0x0E71006E, 
0x35125E5C, 0x01108060, 0x00010000, 0x1D5F0042, 0x00010065, 0x0E71006E, 0x35125E5C, 0x1B0F00E0, 
0x000100E0, 0x07600060, 0x00010000, 0x1E2F0085, 0x1D19662B, 0x0E71006E, 0x35125E5C, 0x150F00C7, 
0x67770295, 0x098C0072, 0x59C70047, 0x00208041, 0x00010000, 0x00010032, 0x32040B0E, 0xCEBD400A, 
0x063080EF, 0x486C061A, 0x0E72006E, 0x35125E5C, 0x298C005D, 0x7F63D157, 0x07600060, 0x0001001C, 
0x162F0082, 0x1D035F25, 0x0E72006E, 0x35125E5C, 0x150F00D5, 0x1803113C, 0x098E006C, 0x1DB00202, 
0x00208041, 0x00010036, 0x00010038, 0x5F120B02, 0xCEBD4206, 0x0E72006E, 0x35125E5C, 0x571F0076, 
0x37030602, 0x1E2F009F, 0x120E1721, 0x0E72006E, 0x35125E5C, 0x122F0043, 0x38EF2E02, 0x0003003E, 
0x7C120427, 0x00F92A03, 0x5778C00B, 0xE3100074, 0x7F1FD10D, 0x072000D7, 0x3B031B07, 0x0E72006E, 
0x3512845C, 0x2988005D, 0x274E0609, 0x32600076, 0x68BA27F1, 0x162F0086, 0x7C0373FD, 0x0E72006E, 
0x3512845C, 0x5A0E00C1, 0x331CF32F, 0x098E0066, 0x54C75301, 0x00208057, 0xC2EF6402, 0x00010038, 
0x32DA0C27, 0x5778C216, 0x0E72006E, 0x3512845C, 0x7B1F006C, 0x126B1B06, 0x1E2F0089, 0x7CAD0653, 
0x0E72006E, 0x3512845C, 0x002F0047, 0x39B82C02, 0x0003003E, 0x17120401, 0x5778C216, 0x0E72006E, 
0x3512845C, 0x7B1F0064, 0x31301B01, 0x1E2F0099, 0x20AEF32F, 0x0E72006E, 0x3512845C, 0x002F004D, 
0x8F334306, 0x48230080, 0x3AC7B707, 0x00DB0803, 0xCEBD410C, 0x0E71006E, 0x43120A5C, 0x01108060, 
0x00010000, 0x1D5F0042, 0x00010065, 0x0E71006E, 0x43120A5C, 0x1B0F00E0, 0x000100E0, 0x07600060, 
0x00010000, 0x1E2F0085, 0x1D19662B, 0x0E71006E, 0x43120A5C, 0x150F00C7, 0x67770295, 0x098C0072, 
0x59C70047, 0x00208041, 0x00010000, 0x00010032, 0x32040B0E, 0xCEBD400A, 0x063080EF, 0x486C061A, 
0x0E72006E, 0x43120A5C, 0x298C005D, 0x7F63D157, 0x07600060, 0x0001001C, 0x162F0082, 0x1D035F25, 
0x0E72006E, 0x43120A5C, 0x150F00D5, 0x1803113C, 0x098E006C, 0x1DB00202, 0x00208041, 0x00010036, 
0x00010038, 0x5F120B02, 0xCEBD4206, 0x0E72006E, 0x43120A5C, 0x571F0076, 0x37030602, 0x1E2F009F, 
0x120E1721, 0x0E72006E, 0x43120A5C, 0x122F0043, 0x38EF2E02, 0x0003003E, 0x7C120427, 0x00FB2A03, 
0x5778C00B, 0xE3100074, 0x7F1FD101, 0x072000D7, 0x3B031B07, 0x0E72006E, 0x4312565C, 0x2988005F, 
0x274E0607, 0x32600076, 0x68BA27F1, 0x162F0086, 0x7C0373FD, 0x0E72006E, 0x43120A5C, 0x5A0E00C1, 
0x331CF32F, 0x098E0066, 0x54C75301, 0x00208057, 0xC2EF6402, 0x00010038, 0x32DA0C27, 0x5778C216, 
0x0E720062, 0x8BE93F5C, 0x7B1F006C, 0x126B1B06, 0x1E2F0089, 0x7CAD0653, 0x0E72006E, 0x43120A5C, 
0x002F0047, 0x39B82C02, 0x0003003E, 0x17120401, 0x5778C216, 0x0E72006E, 0x43120A5C, 0x7B1F0064, 
0x31301B01, 0x1E2F0099, 0x20AEF32F, 0x0E72006E, 0x43120A5C, 0x002F004D, 0x8F334306, 0x48230080, 
0x3AC7B707, 0x00EB2A0D, 0x56784E09, 0x2770007C, 0x02127BBC, 0x2774007E, 0x021256E0, 0x087F005D, 
0x501256F7, 0x087F005D, 0x50124535, 0x011C007E, 0x3720061A, 0x155000B6, 0x2503220C, 0x858F00C0, 
0x08EF4531, 0x43208040, 0x00010000, 0x00030038, 0x32120C65, 0x56784E08, 0x0E70007C, 0x02127BBC, 
0x2774007E, 0x021256E0, 0x087F0051, 0x50010000, 0x087F0051, 0x50010000, 0x6B7F0050, 0x50010000, 
0x011C0060, 0x00010000, 0x013C0001, 0x00010000, 0x00040020, 0x00010000, 0x5778C108, 0x232700D2, 
0x2008130A, 0x2770007C, 0x02127BD3, 0x27740078, 0x0212BFD3, 0x181F00C5, 0x5E44C798, 0x155000B2, 
0xF2034308, 0x062F00F6, 0x1BC75307, 0x00208041, 0x59EF1A28, 0x0001003A, 0x02120C07, 0x56784E0B, 
0x2770007C, 0x02127BD3, 0x2772007C, 0x021256D3, 0x01100060, 0x00010000, 0x082F0060, 0x00010000, 
0x2770007C, 0x02127BD3, 0x27720078, 0x02124BD3, 0x087F0051, 0x50010000, 0x087F0051, 0x50010000, 
0x3F7000A1, 0x00010000, 0x131F0040, 0x00010000, 0x00040020, 0x00010000, 0x5778C108, 0x1F0200D3, 
0x460B1304, 0x4D2F00B2, 0x26444BE5, 0x2770007C, 0x02127BD3, 0x27740078, 0x02124BD3, 0xAE1F00E4, 
0x4E442798, 0x062F00E4, 0x15C7530E, 0x00208051, 0x23EF566E, 0x00010038, 0x32020C0E, 0x56784E09, 
0x2770007C, 0x02127BD3, 0x27740078, 0x02124BD3, 0x0876005F, 0x01120803, 0x087F005F, 0x0112DDE3, 
0x182E002F, 0x16200658, 0x215000A0, 0x00010000, 0x295000A6, 0x350351A5, 0x098F0074, 0x31EFD909, 
0x0003003C, 0x32A2041D, 0x5778C10B, 0x2770007C, 0x02127BD3, 0x2772007C, 0x021256D3, 0x8E108076, 
0x68031B03, 0x0B2080C0, 0x216A1306, 0x2770007C, 0x02127BD3, 0x27720078, 0x0212BFD3, 0x745F0005, 
0x50441B31, 0x725000A7, 0x2919221E, 0x062A00E6, 0x36337327, 0x00208047, 0x3FEF2901, 0x0001003A, 
0x02DA0C07, 0x5778C307, 0x57108060, 0x00010000, 0x7F3F00C6, 0x5DED0647, 0x2770007C, 0x02127BD3, 
0x27740078, 0x0212BFD3, 0xF41F0006, 0x11A1EBF7, 0x234F00C1, 0x76EF4C04, 0x0004003C, 0x4C120404, 
0x5778CE0B, 0x103080E8, 0x79F91372, 0x2770007C, 0x02127BD3, 0x27740078, 0x0212BFD3, 0x182F0031, 
0xD1354207, 0x725000A3, 0x35033849, 0x1E200093, 0xF00342E6, 0x81680008, 0x46053467, 0x725000B7, 
0x5B031AF1, 0x062A00E4, 0x1533230B, 0x00208045, 0x85EFAD36, 0x00010038, 0x020C0C20, 0x5678C124, 
0x2770007C, 0x02127BD3, 0x27740078, 0x0212BFD3, 0x455F0030, 0x60B83A46, 0xCA000033, 0x5FA10E03, 
0x5778C10A, 0x1F0200D3, 0x460B1304, 0x4D2F00B2, 0x26444BE5, 0x2770007C, 0x02127BD3, 0x2774007C, 
0x021256D3, 0xAE1F00E4, 0x4E442798, 0x062F00E4, 0x15C7530E, 0x00208051, 0x23EF566E, 0x22000056, 
0x03EFB007, 0x27740078, 0x0212BFD3, 0x0001003A, 0x02120C60, 0x5778C10C, 0x2770007C, 0x02127BD3, 
0x2772007C, 0x021256D3, 0x8E108076, 0x68031B03, 0x0B2080C0, 0x216A1306, 0x2770007C, 0x02127BD3, 
0x27720078, 0x0212BFD3, 0x745F0005, 0x50441B31, 0x062A00E6, 0x36330147, 0x00208047, 0x3FEF2901, 
0x22000056, 0x03EFB007, 0x27720078, 0x0212BFD3, 0x0001003A, 0x02120C60, 0x5778C10A, 0x232700D2, 
0x2008133D, 0x2770007C, 0x02127BD3, 0x27740078, 0x02124BD3, 0x181F00C5, 0x5E44C798, 0x155000B2, 
0xF2034308, 0x062F00F6, 0x1BC75307, 0x00208041, 0x59EF1A28, 0x22000056, 0x03EFB007, 0x27740078, 
0x0212BFD3, 0x0001003A, 0x02120C02, 0x00BA0607, 0x27FF2E07, 0x0B2080DA, 0x4121133D, 0x0876005D, 
0x47125AE6, 0x0C4E003F, 0x4C6B1B02, 0x0B2F00A5, 0x36C6D4D3, 0x0F4C0051, 0x5FC73A13, 0xEA200094, 
0x12C76407, 0x000F0034, 0x40A93007, 0x27FF2E07, 0x0B2080DA, 0x4121133D, 0x0C4E003F, 0x4C6B1B02, 
0x0B2F00B1, 0x20C6D2D3, 0x0876005D, 0x47125AE6, 0x0F4C0051, 0x5FC73A13, 0xEA200094, 0x12C76407, 
0x000F0034, 0x40A93007, 0x27FF2E05, 0xB44F0057, 0x5FE40602, 0x203F0095, 0x48A12619, 0x0876005D, 
0x47125AE6, 0x2D46003E, 0x4C027E02, 0x000F002E, 0x03093002, 0x26FF2E03, 0x0876005D, 0x47125AE6, 
0xB55F0068, 0xD1243411, 0x0001002C, 0x00573009, 0x5BBF2E03, 0x286F809A, 0x321266F5, 0x087F005D, 
0x471234E6, 0x020F0036, 0x40A93037, 0x27FF2E05, 0x234A00DB, 0x8821133D, 0x0876005D, 0x47125AE6, 
0x6C1F00FB, 0x4C6B0A02, 0xA94A00BD, 0x56EDD445, 0x000F0036, 0x40A93037, 0x27FF2E05, 0x0876005D, 
0x47125AE6, 0xB44F0057, 0x5FE40602, 0x203F0095, 0x48A12619, 0x2D46003E, 0x4C027E02, 0x000F002E, 
0x03093002, 0x00BA080E, 0xAEBD400B, 0x27640096, 0x02000AE0, 0x146F00D2, 0x00002863, 0x1A1F006A, 
0x100BD509, 0x113F0011, 0x6500410F, 0x00208049, 0x00000000, 0x050F0091, 0x4C014164, 0x036000D2, 
0x00000063, 0x1A1F0072, 0x6601312A, 0x113F0001, 0x6601310D, 0x00208049, 0x00000000, 0x00030032, 
0x66013100, 0xAEBD400B, 0x146F00D2, 0x00002863, 0x1A1F006A, 0x100BD509, 0x113F0011, 0x6500410F, 
0x00208049, 0x00000000, 0x050F0091, 0x4C014164, 0x27640096, 0x02000AE0, 0x036000D2, 0x00000063, 
0x1A1F0072, 0x6601312A, 0x113F0001, 0x6601310D, 0x00208049, 0x00000000, 0x00030032, 0x66013100, 
0xAEBD400B, 0x1A108070, 0x3A204900, 0x793F00FB, 0x522B4009, 0x27640096, 0x02000AE0, 0x150F00C3, 
0x11EA06D1, 0x0D3F0007, 0x9EC87503, 0x0500008B, 0x27075803, 0x5B3080ED, 0x4D22D52E, 0x155000AE, 
0x580DAB0E, 0xF56000A1, 0x03010D01, 0x9016004C, 0xCDAC241D, 0x00020026, 0x36001727, 0xAEBD400B, 
0x27640096, 0x02000AE0, 0x036000D2, 0x00000063, 0x1A1F007A, 0x3A0BD809, 0x113F0015, 0x9E00D80F, 
0x00208049, 0x00000000, 0x05060097, 0x2C012811, 0x146F00D2, 0x0A00584E, 0x1A1F006E, 0x272A3521, 
0x113F0003, 0x19023A00, 0x00208049, 0x00000000, 0x00030032, 0xFF025700, 0xAEBD400B, 0x036000D2, 
0x00000063, 0x1A1F007A, 0x3A0BD809, 0x113F0015, 0x9E00D80F, 0x00208049, 0x00000000, 0x05060097, 
0x2C012811, 0x27640096, 0x02000AE0, 0x146F00D2, 0x0A00584E, 0x1A1F006E, 0x272A3521, 0x113F0003, 
0x19023A00, 0x00208049, 0x00000000, 0x00030032, 0xFF025700, 0xCEBD4209, 0x063080ED, 0x9FC8581B, 
0x90300023, 0x480FDA05, 0x27640096, 0x02000AE0, 0x0C4C0037, 0x1AC94109, 0x0B2C00B5, 0x121F45A0, 
0x150A00D7, 0x18031764, 0x062F00F4, 0x110F7302, 0x00208053, 0x5904716D, 0x0001002C, 0xDA2A0165, 
0xCEBD4209, 0x063080ED, 0x9FC8581B, 0x90300023, 0x480FDA05, 0x0C4C0037, 0x1AC94109, 0x0B2C00B5, 
0x121F45A0, 0x27640096, 0x02000AE0, 0x150A00D7, 0x18031764, 0x062F00F4, 0x110F7302, 0x00208053, 
0x5904716D, 0x0001002C, 0xDA2A0165, 0xAEBD4009, 0x1A10807A, 0x0F420C09, 0x793F00EA, 0x402B0809, 
0x27640096, 0x02000AE0, 0x0C6F00D4, 0x00001305, 0x036000D6, 0x00001342, 0x150F00C9, 0x11C96922, 
0x0D3F0003, 0x69681500, 0x3D20001A, 0x0E001365, 0x00030032, 0x66000300, 0xAEBD4008, 0x27640096, 
0x02000AE0, 0x036F00D0, 0x7D007CFE, 0x1A160062, 0x5ACDEA09, 0x793F00F2, 0x8FA86070, 0x150F00DB, 
0x2DC9603F, 0x0D3F000B, 0x0A1B5700, 0x3D20001A, 0x0E001365, 0x00030032, 0xAF095700, 0xAEBD4429, 
0x0110807A, 0x0F420C09, 0x793F00FB, 0x9F5C5D09, 0x27640096, 0x02000AE0, 0x7A0F00D8, 0x2D4F65ED, 
0x5C3F004E, 0xA0065903, 0x7A0200D9, 0xA00EDE01, 0x4E6200B3, 0x32021365, 0x4F8080D4, 0x32013F07, 
0x00020026, 0xA1205D01, 0xAEBD4429, 0x0110807A, 0x0F420C09, 0x793F00FB, 0x9F5C5D09, 0x7A0F00D8, 
0x2D4F65ED, 0x5C3F004E, 0xA0065903, 0x27640096, 0x02000AE0, 0x7A0200D9, 0xA00EDE01, 0x4E6200B3, 
0x32021365, 0x4F8080D4, 0x32013F07, 0x00020026, 0xA1205D01, 0xAEBD400B, 0x27640096, 0x02000AE0, 
0x1A1F006A, 0x100BD509, 0x113F0011, 0x6500410F, 0x00208049, 0x00000000, 0x146F00D2, 0x00002863, 
0x540F0080, 0x74014164, 0x7B1F0072, 0x6601312A, 0x3B700096, 0x68140C20, 0x113F0001, 0x6601310D, 
0x00208049, 0x00000000, 0x00030032, 0x66013100, 0xAEBD400B, 0x1A1F006A, 0x100BD509, 0x113F0011, 
0x6500410F, 0x00208049, 0x00000000, 0x146F00D2, 0x00002863, 0x540F0080, 0x74014164, 0x27640096, 
0x02000AE0, 0x7B1F0072, 0x6601312A, 0x3B700096, 0x68140C20, 0x113F0001, 0x6601310D, 0x00208049, 
0x00000000, 0x00030032, 0x66013100, 0xAEBD4008, 0x3C10006B, 0x67423609, 0x793F00FA, 0x672B0809, 
0x27640096, 0x02000AE0, 0x150F00C9, 0x11C96922, 0x0D3F0003, 0x69682400, 0x3D20001A, 0x0E001365, 
0x146F00D4, 0x6F001305, 0x00030032, 0xAC000300, 0x00BA2A0F, 0x5778C00B, 0x5B2080CC, 0x0B00D103, 
0x27640096, 0x02000AE0, 0x0C4F0033, 0xF511F043, 0x305000A9, 0x00000000, 0x4C2F00AD, 0x261C6AD4, 
0xA8450050, 0xBFE3CE43, 0x180C006A, 0xD107A1D4, 0x571F8078, 0x1D1585A3, 0x098F007A, 0x591C3270, 
0x43208044, 0x36013F04, 0x00010024, 0xCD23D946, 0x5778C00B, 0x5B2080CC, 0x0B00D103, 0x0C4F0033, 
0xF511F043, 0x305000A9, 0x00000000, 0x4C2F00AD, 0x261C6AD4, 0xA8450050, 0xBFE3CE43, 0x180C006A, 
0xD107A1D4, 0x27640096, 0x02000AE0, 0x571F8078, 0x1D1585A3, 0x098F007A, 0x591C3270, 0x43208044, 
0x36013F04, 0x00010024, 0xCD23D946, 0x5778C20B, 0x072080C9, 0xC0332501, 0x432000BF, 0xC0725A09, 
0x27640096, 0x02000AE0, 0x0C4C002F, 0x52194109, 0x305000A7, 0xC13F753F, 0x0B2E00B7, 0x110D3D2D, 
0xFE42004D, 0x0875602D, 0xA80F00EB, 0x7B513302, 0x09880070, 0x590F1627, 0x43208046, 0x57004309, 
0x00010024, 0xDA567346, 0x5778C20B, 0x072080C9, 0xC0332501, 0x432000BF, 0xC0725A09, 0x0C4C002F, 
0x52194109, 0x305000A7, 0xC13F753F, 0x0B2E00B7, 0x110D3D2D, 0xFE42004D, 0x0875602D, 0x27640096, 
0x02000AE0, 0xA80F00EB, 0x7B513302, 0x09880070, 0x590F1627, 0x43208046, 0x57004309, 0x00010024, 
0xDA567346, 0x5778C20B, 0x072080DD, 0xC11D0500, 0x432000BB, 0x6D1D3409, 0x27640096, 0x02000AE0, 
0x0C4F002F, 0x13194109, 0x305000AF, 0x4A693367, 0x0B2F00B1, 0x12034450, 0x3140004A, 0xC2664B9F, 
0x755F0025, 0x4B03177B, 0x098F0076, 0x590F2C01, 0x43208054, 0xC2001031, 0x00010026, 0xDA230701, 
0x5778C20B, 0x072080DD, 0xC11D0500, 0x432000BB, 0x6D1D3409, 0x0C4F002F, 0x13194109, 0x305000AF, 
0x4A693367, 0x0B2F00B1, 0x12034450, 0x3140004A, 0xC2664B9F, 0x27640096, 0x02000AE0, 0x755F0025, 
0x4B03177B, 0x098F0076, 0x590F2C01, 0x43208054, 0xC2001031, 0x00010026, 0xDA230701, 0x56784609, 
0x27640096, 0x02000AE0, 0x036F00D2, 0x00000063, 0x571F006A, 0x100B3609, 0x113F0001, 0x0000000F, 
0x180F0096, 0x2C002811, 0x036000D2, 0x00000063, 0x2C1F006E, 0x270B3521, 0x113F0001, 0x1D01000B, 
0x00040020, 0x00000000, 0x56784609, 0x036000D2, 0x00000063, 0x571F006A, 0x100B3609, 0x113F0005, 
0x7700B50F, 0x18060096, 0x2C002811, 0x27640096, 0x02000AE0, 0x036F00D2, 0x0000FA63, 0x2C1F006E, 
0x270B3521, 0x113F000D, 0x1D00680B, 0x00040036, 0x66006802, 0x56784609, 0xC310806C, 0x6D4F0400, 
0xE73F00EB, 0x402B0843, 0x27640096, 0x02000AE0, 0x150F00C7, 0x114EF0A8, 0x0D3F0005, 0xC31AC70D, 
0x05040087, 0x1800C719, 0x5B3080E9, 0x32B8B60D, 0x90140046, 0xCD92B670, 0x00020024, 0xC400101D, 
0x56784609, 0x01108072, 0x18325443, 0x793F00E2, 0x40240809, 0x27640096, 0x02000AE0, 0x146F00D4, 
0x0000513E, 0x036000D4, 0x0000513E, 0x150F00D9, 0x68E76942, 0x0D3F0011, 0x3C00030B, 0x3D200008, 
0x00000000, 0x00040030, 0x7E000365, 0x5778450A, 0xE83080F4, 0x0C0AB601, 0x27640096, 0x02000AE0, 
0xE81E0035, 0xB825FC00, 0xFF600012, 0xFF31F163, 0x98360059, 0xC48EA9A6, 0xA91800E0, 0x091F89D5, 
0x725000A9, 0x00000000, 0xA94A00A9, 0x1D052907, 0x0020805F, 0x73045D0E, 0x00020020, 0x32192946, 
0x56784809, 0x01108068, 0x144F6B00, 0x793F00FB, 0x34F30809, 0x27640096, 0x02000AE0, 0x7A0F00CA, 
0x1E182D90, 0x5C3F0044, 0xA0B9DF0D, 0x7A0200D9, 0xA032520D, 0x4E6200BD, 0x6C02D43A, 0x4F8080D0, 
0x09020578, 0x0002003E, 0x08566422, 0x56784809, 0x01108068, 0x144F6B00, 0x793F00FB, 0x34F30809, 
0x7A0F00CA, 0x1E182D90, 0x5C3F0044, 0xA0B9DF0D, 0x27640096, 0x02000AE0, 0x7A0200D9, 0xA032520D, 
0x4E6200BD, 0x6C02D43A, 0x4F8080D0, 0x09020578, 0x0002003E, 0x08566422, 0x56784609, 0x27640096, 
0x02000AE0, 0x571F006A, 0x100B3609, 0x113F0001, 0x0000000F, 0x036F00D2, 0x00000063, 0x180F0086, 
0x74002811, 0x7B1F006E, 0x270B3521, 0x3B700096, 0x68140C20, 0x113F0001, 0x1D01000B, 0x00040020, 
0x00000000, 0x56784609, 0x571F006A, 0x100B3609, 0x113F0001, 0x0000000F, 0x036F00D2, 0x00000063, 
0x180F0086, 0x74002811, 0x27640096, 0x02000AE0, 0x7B1F006E, 0x270B3521, 0x3B700096, 0x68140C20, 
0x113F0001, 0x1D01000B, 0x00040020, 0x00000000, 0x00A50F09, 0xCEAD220A, 0x01108062, 0x5F761904, 
0xA53000F1, 0x6DFC1920, 0x446F00DC, 0x50120A8A, 0x446F00DC, 0x50120A8A, 0x298C005F, 0x7FD70602, 
0x062C00E0, 0x1D0306C9, 0x03000077, 0x2500F5E0, 0x298C004D, 0x6DEA1383, 0x258F002C, 0x2D2FFD0B, 
0x00010020, 0x0B6940CD, 0xCEAD220A, 0x01108062, 0x5F761904, 0xA53000F1, 0x6DFC1920, 0x298C005F, 
0x7FD70602, 0x062C00E0, 0x1D0306C9, 0x03000077, 0x2500F5E0, 0x446F00DC, 0x50120A8A, 0x446F00DC, 
0x50120A8A, 0x298C004D, 0x6DEA1383, 0x258F002C, 0x2D2FFD0B, 0x00010020, 0x0B6940CD, 0xCEAD220B, 
0x01108062, 0x5F761904, 0xA53000F1, 0x6DFC1920, 0x446F00DC, 0x50120A8A, 0x298C005F, 0x7FD70602, 
0x062C00E0, 0x1D0306C9, 0x03000077, 0x2500F5E0, 0x446F00DC, 0x50120A8A, 0x446F00DC, 0x50120A8A, 
0x298C004D, 0x6DEA1383, 0x258F002C, 0x2D2FFD0B, 0x00010020, 0x0B6940CD, 0xCEAD220A, 0x01108062, 
0x5F761904, 0xA53000F1, 0x6DFC1920, 0x446F00DC, 0x50120A8A, 0x298C005F, 0x7FD70602, 0x062C00E0, 
0x1D0306C9, 0x03000077, 0x2500F5E0, 0x446F00DC, 0x50120A8A, 0x298C004D, 0x6DEA1383, 0x258F002C, 
0x2D2FFD0B, 0x00010020, 0x0B6940CD, 0xCEAD220C, 0x298C005F, 0x7FD70602, 0x062C00E0, 0x1D0306C9, 
0x03000077, 0x2500F5E0, 0x298C004D, 0x6DEA1383, 0x258F0024, 0x2D52FD8A, 0x0508009F, 0xD2122749, 
0x048C00D3, 0x56931B26, 0x048080D1, 0x19E51A4D, 0x0508009F, 0xD2122749, 0x048C00D3, 0x56E31B19, 
0x048080D9, 0x19F21A0A, 0x00010020, 0x0B6940CD, 0xCEAD2009, 0x446F00DC, 0x50120A8A, 0x446F00DC, 
0x50120A8A, 0x011F0064, 0x11B70602, 0x162F008E, 0x7C0AA054, 0x002F004D, 0x16091D8B, 0x05040089, 
0x9E09EF55, 0x571F006A, 0x146EBC35, 0x043F001C, 0x12027365, 0x0004003C, 0x2C09040B, 0xCEAD2009, 
0x011F0064, 0x11B70602, 0x162F008E, 0x7C0AA054, 0x002F004D, 0x16091D8B, 0x05040089, 0x9E09EF55, 
0x446F00DC, 0x50120A8A, 0x446F00DC, 0x50120A8A, 0x571F006A, 0x146EBC35, 0x043F001C, 0x12027365, 
0x0004003C, 0x2C09040B, 0xCEAD2009, 0x446F00DC, 0x50120A8A, 0x011F0064, 0x11B70602, 0x162F008E, 
0x7C0AA054, 0x446F00DC, 0x50120A8A, 0x002F004D, 0x16091D8B, 0x05040089, 0x9E09EF55, 0x571F006A, 
0x146EBC35, 0x043F001C, 0x12027365, 0x0004003C, 0x2C09040B, 0xCEAD2009, 0x446F00DC, 0x50120A8A, 
0x011F0064, 0x11B70602, 0x162F008E, 0x7C0AA054, 0x002F004D, 0x16091D8B, 0x05040089, 0x9E09EF55, 
0x446F00DC, 0x50120A8A, 0x571F006A, 0x146EBC35, 0x043F001C, 0x12027365, 0x0004003C, 0x2C09040B, 
0x00AB0F03, 0xCE7D0008, 0x182F8039, 0x186619CD, 0x505800BA, 0xF2402F49, 0x062F80F4, 0x4101123F, 
0x540F0082, 0x74014158, 0x182F8029, 0x5E6610F7, 0x505800B2, 0xF20E2F49, 0x062F80E6, 0x1D011202, 
0x020A0032, 0x5F010B03, 0xCE7D2008, 0x182F8039, 0x186619CD, 0x505400AA, 0x35402F49, 0x062F80F4, 
0x4101123F, 0x540F0082, 0x74014158, 0x182F8029, 0x5E6610F7, 0x505800A2, 0x350E2F49, 0x062F80E6, 
0x1D011202, 0x020A0032, 0x5F010B03, 0xCE7D2008, 0x182F8039, 0x186619CD, 0x505800AA, 0x35402F49, 
0x062F80F4, 0x4101123F, 0x540F0082, 0x74014158, 0x182F8029, 0x5E6610F7, 0x505400A2, 0x350E2F49, 
0x062F80E6, 0x1D011202, 0x020A0032, 0x5F010B03, 0x00BB0F03, 0xCE7D0008, 0x111F802C, 0x3517D136, 
0x8E6F0001, 0x5EA8D20C, 0x103F80B1, 0x3B01AE98, 0x030F0091, 0x4C014104, 0x111F802A, 0x35171F0F, 
0x8E6F0001, 0x5EA8D20C, 0x103F80B1, 0x3B01AE98, 0x020A0034, 0x4C0158CD, 0xCE7D2008, 0x111F802C, 
0x3517D136, 0x8E6F0003, 0x5EA8D2F3, 0x103F80B1, 0x3B01AE98, 0x030F0091, 0x4C014104, 0x111F802A, 
0x35171F0F, 0x8E640003, 0x0DA8D2F3, 0x103F80B1, 0x3B01AE98, 0x020A0034, 0x02010413, 0xCE7D2008, 
0x111F802C, 0x3517D136, 0x8E640003, 0x5EA8D2F3, 0x103F80B1, 0x3B01AE98, 0x030F0091, 0x4C014104, 
0x111F802A, 0x35171F0F, 0x8E6F0003, 0x0DA8D2F3, 0x103F80B1, 0x3B01AE98, 0x020A0034, 0x02010413, 
0x00BA0F01, 0xCE8D200B, 0x053080EE, 0x2D330905, 0x7E2F002A, 0x13195A09, 0xDF5000BF, 0x3A00D2B2, 
0x062F00FE, 0x8806630A, 0x00208047, 0x57004E07, 0x2B000069, 0x65EE7F00, 0x063080ED, 0x6CB3B101, 
0x501F00D7, 0x9D676F8A, 0x062A00F8, 0x6C1BA7E6, 0x8F200052, 0x921B1732, 0x020A002C, 0x0B07CA61, 
0x00BA0804, 0xCEBD420C, 0x1A108075, 0x28770B00, 0x0B2000D8, 0x3BED0F00, 0x0E72006E, 0x43120A5C, 
0x208A0042, 0x337C1109, 0x592F0075, 0xD647E919, 0x0E72006E, 0x43120A5C, 0x247000A5, 0x600C1CCA, 
0xDF0F00FE, 0x14F80273, 0x2F600069, 0x00000008, 0x098F006A, 0x57C42E00, 0x00208041, 0x0801610E, 
0x00010020, 0x8E00037C, 0xCEBD440C, 0x0E71006E, 0x43120A5C, 0x77108061, 0x102DEA01, 0x5390007F, 
0x4B613C15, 0x0E71006E, 0x43120A5C, 0xDF0F00E2, 0x35484056, 0x592F0075, 0xD64711EC, 0x0E71006E, 
0x43120A5C, 0xDF0F00FC, 0x2990117B, 0x2F600069, 0x00000D1C, 0x098F0060, 0x2691150D, 0x0020804B, 
0x08000474, 0x00010028, 0xCE045116, 0xBEBD400A, 0x0E71006E, 0x43120A5C, 0x0110807E, 0x37764009, 
0xB23F00E3, 0x407E0E09, 0x18000092, 0x1D00417B, 0x0E71006E, 0x43120A5C, 0x1F0C00D7, 0x681C617B, 
0x082C0064, 0x2EB3EA55, 0x0E71006E, 0x43120A5C, 0x002E0057, 0x14005302, 0x00040038, 0x88016702, 
0xBEBD400C, 0x0E71006E, 0x43120A5C, 0x5710807E, 0x372A4009, 0x573F0033, 0x67DD0E09, 0x18000092, 
0x1D00417B, 0x0E71006E, 0x43120A5C, 0x1F0C00DF, 0x68F96164, 0x413F000A, 0x40400073, 0x180A0096, 
0x49008B7B, 0x0E71006E, 0x43120A5C, 0x341F0072, 0x37FA0073, 0x413F0002, 0x1D02000E, 0x00060030, 
0x7F00240E, 0x00BA2A04, 0x5778C20C, 0x072080D7, 0x2A530943, 0x0E720062, 0xA2E93F5C, 0x2086004A, 
0x334C0C43, 0x312C007F, 0x675F2E30, 0x05000097, 0xD2102E23, 0x0A3080FC, 0x420F8251, 0x0E72006E, 
0x43120A5C, 0x0E0F00E5, 0x1825177B, 0x2F600075, 0x7E847B23, 0x468E0066, 0x040D6C01, 0x00208045, 
0xDC007E07, 0x00010034, 0x5D231F46, 0x5778C408, 0x053F80EA, 0x011D0105, 0x155100A8, 0x7645A238, 
0x0E74006E, 0x43120A5C, 0x1B0F00E0, 0x3578FBF6, 0x6560001E, 0x2C0048DB, 0x468F0064, 0x15F9FB46, 
0x0020805D, 0x4A034333, 0x00020024, 0xCE00FB46, 0x5778400A, 0x0E71006E, 0x43120A5C, 0x57108062, 
0x0F326B43, 0x573F003F, 0x52132343, 0x18000092, 0x1D00417B, 0x0E71006E, 0x43120A5C, 0x1F0C00DD, 
0x684E47F6, 0x2B2F0064, 0x3A1C17DC, 0x0E71006E, 0x43120A5C, 0x002F0057, 0x5C231F13, 0x00030030, 
0x0C4F6704, 0x5778400C, 0x0E71006E, 0x43120A5C, 0x5710807A, 0x534F6B43, 0x573F003B, 0x5A750E43, 
0x18000092, 0x1D00417B, 0x0E71006E, 0x43120A5C, 0x1F0C00D7, 0xDBFF47D2, 0x413F0018, 0x4112FC55, 
0x180A0094, 0x5C008BDC, 0x0E71006E, 0x43120A5C, 0x341F0064, 0x0FD776AB, 0x413F0010, 0x2400240D, 
0x00060032, 0x29007027, 0x00BA0B02, 0xCE8D200C, 0x0D160066, 0x41900443, 0x592C0073, 0x69A43AF4, 
0x247000A7, 0x8E134914, 0xF41F0016, 0x19BD2ED1, 0x07600070, 0x28B2F51E, 0x234C00C9, 0xDFD77A3A, 
0x098C007A, 0x88067A0A, 0x2B000079, 0x7AEE7F00, 0x501F00D7, 0x9D676F8A, 0x062A00F8, 0x6C1BA5E6, 
0x8F200052, 0x921B1732, 0x020A002C, 0x0B07CA61, 0xCE8D200C, 0x0D160066, 0x41900443, 0x592C0073, 
0x69A43AF4, 0xF41F0016, 0x19BD2ED1, 0x07600070, 0x28B2F51E, 0x234C00C9, 0xDFD77A3A, 0x098C007A, 
0x88067A0A, 0x2B000079, 0x7AEE7F00, 0x063080ED, 0x6CB3B101, 0x501F00D7, 0x9D676F8A, 0x062A00F8, 
0x6C1BA5E6, 0x8F200052, 0x921B1732, 0x020A002C, 0x0B07CA61, 0x00CB080B, 0xAEBD470C, 0x0E72007C, 
0x02127B0A, 0x0E72007C, 0x0212560A, 0x01108072, 0xA31C1306, 0x926A0023, 0x86351343, 0xDD1400CC, 
0x341FEDBC, 0xFD5000A1, 0x00010000, 0x1E200087, 0xA403278E, 0x816C0004, 0xF7446AB2, 0x295000A6, 
0x71113949, 0x062E00E0, 0x21C76D0E, 0x0020005B, 0x4C0D4202, 0x0001003C, 0x32120404, 0x8EBD4009, 
0x0E72007C, 0x02127B0A, 0x0E72007C, 0x0212560A, 0x087E005D, 0x501208F7, 0x087E005D, 0x50122635, 
0x571F006E, 0x0F050602, 0x155000BE, 0x03ED5E0C, 0x048F00C7, 0x54A81F27, 0xC7208047, 0x6AEF7205, 
0x0003003A, 0x32123C3D, 0xAEBD460A, 0x063080E1, 0x6908131B, 0x0E72007C, 0x02127B0A, 0x0E72007C, 
0x0212560A, 0x182F003D, 0x60F90631, 0xFD5000A1, 0x00010000, 0xD1600002, 0x5E6A00F9, 0xC45C00FE, 
0x4C005949, 0x062F00E0, 0xD4B80E02, 0x0020805B, 0x70B3AC05, 0x0001003C, 0x3212230A, 0xAEBD460A, 
0x063080EF, 0x3A191B0E, 0x0E72007C, 0x02127B0A, 0x0E72007C, 0x0212560A, 0x182A0025, 0x5E1FD146, 
0xFD5000AD, 0x7AC4C0B4, 0x1E200083, 0x4D8F1C91, 0x81660006, 0x5ED0DDC2, 0x062A00E4, 0x2EC7150E, 
0x00208057, 0xDCEFF948, 0x00010038, 0x32120C36, 0x8EBD4009, 0x1F3080F0, 0x0E010408, 0x0E72007C, 
0x02127B0A, 0x0E72007C, 0x0212560A, 0x087F0053, 0x01047C03, 0x08760053, 0x01010069, 0x492A0024, 
0x6E1BD10A, 0x1B5000BD, 0x6E32596A, 0x098F006C, 0x6FB3770D, 0x00030036, 0x32042303, 0x8EBD4408, 
0x0E72007C, 0x02127B0A, 0x0E72007C, 0x0212560A, 0x08760059, 0x011437C5, 0x0876005B, 0x501437C5, 
0x087A0053, 0x50073B29, 0x011A006C, 0x0F6A1B0A, 0x013A000D, 0x7CB3140D, 0x00030032, 0x4C071800, 
0x8EBD420B, 0x0E71007C, 0x02127B0A, 0x0E71007C, 0x0212560A, 0x0110007E, 0x0F540647, 0x082F007C, 
0x69900636, 0x0E71007C, 0x02127B0A, 0x0E71007C, 0x0212560A, 0x0876005B, 0x501437C5, 0x087F005B, 
0x5012BFE3, 0x3F7000A5, 0x7D4727C5, 0x131F0052, 0x2EEF2402, 0x00040030, 0x32693C13, 0x8EBD420B, 
0x0E71007C, 0x02127B0A, 0x0E71007C, 0x0212560A, 0x0876005B, 0x501437C5, 0x087F005B, 0x5012BFE3, 
0x0110006E, 0x0F540647, 0x082F007C, 0x69900636, 0x0E71007C, 0x02127B0A, 0x0E71007C, 0x0212560A, 
0x3F7000A5, 0x7D4727C5, 0x131F0052, 0x2EEF2402, 0x00040030, 0x32693C13, 0x8EBD400B, 0x087E005D, 
0x501208F7, 0x087E005D, 0x50122635, 0x571F0064, 0x0F770665, 0x155000A6, 0x35035E0C, 0x048F00C7, 
0x54EF0727, 0x00208047, 0x6AEF7205, 0x22000056, 0x03EFB007, 0x0E72007C, 0x02127B0A, 0x22000056, 
0x03EFB007, 0x0E72007C, 0x0212560A, 0x0003003E, 0x32120427, 0x8EBD400A, 0x0E72007C, 0x02127B0A, 
0x087E005D, 0x501208F7, 0x087E005D, 0x50122635, 0x571F0064, 0x0F770665, 0x155000A6, 0x35035E0C, 
0x048F00C7, 0x54EF0727, 0xC7208047, 0x6AEF7205, 0x22000056, 0x03EFB007, 0x0E72007C, 0x0212560A, 
0x0003003A, 0x32123C3D, 0x8EBD420B, 0x0E71007C, 0x02127B0A, 0x0E71007C, 0x0212560A, 0x0876005B, 
0x501437C5, 0x087F005B, 0x5012BFE3, 0x0110006E, 0x0F540647, 0x082F007C, 0x69900636, 0x3F7000A5, 
0x7D4727C5, 0x0E71007C, 0x02127B0A, 0x0E71007C, 0x02127B0A, 0x131F0052, 0x2EEF2402, 0x00040030, 
0x32693C13, 0x009C2A03, 0x5778C00A, 0x0B2080C2, 0x2DC91327, 0x0C4E0037, 0x93351B01, 0x0B2F00B9, 
0x091F224E, 0x0F4C0043, 0xA5C73B27, 0xEA200090, 0x12C7A307, 0x745F0005, 0x50441B31, 0x725000A7, 
0x2919221E, 0x062A00E6, 0x36330127, 0x00208047, 0x3FEF2901, 0x0001003E, 0x32DA0407, 0x5778C209, 
0xB44F0047, 0x35E40602, 0x203F0095, 0x48A12619, 0x2D46003E, 0x25027E02, 0xEA200080, 0x1D03B714, 
0x745F0005, 0x50441B31, 0x725000A7, 0x2919221E, 0x062A00E6, 0x36330127, 0x00208047, 0x3FEF2901, 
0x0001003E, 0x32DA0407, 0x5778C009, 0x0B2080C2, 0x2DC91327, 0x0C4E0037, 0x93351B01, 0x0B2F00B9, 
0x091F224E, 0x0F4C0043, 0xA5C73B27, 0xEA200080, 0x1D03B714, 0xAE1F00E4, 0x4E442798, 0x062F00E4, 
0x15C7530E, 0x00208051, 0x23EF566E, 0x0001003A, 0x32020C58, 0x008C0804, 0xCEBD4E0A, 0x0B2080D2, 
0x4126133D, 0x0C4E002F, 0x09191B02, 0x0B2F00BD, 0x201F7AD3, 0x0F4C0049, 0xA5313AE6, 0xEA200080, 
0x1D03B707, 0x745F0001, 0x5044242F, 0x725000A7, 0x2919221E, 0x062A00F6, 0x12C70147, 0x00208047, 
0x3FEF2901, 0x00010030, 0x400C0C07, 0xCEBD4E09, 0xB44F004F, 0x352A0602, 0x203F009D, 0x482A2619, 
0x2D46003C, 0x25177EC0, 0xEA200080, 0x1D03B707, 0x745F0001, 0x5044242F, 0x725000A7, 0x2919221E, 
0x062A00F6, 0x12C70147, 0x00208047, 0x3FEF2901, 0x00010030, 0x400C0C07, 0xAEBD4E0A, 0x0C4E002F, 
0x09191B02, 0x0B2F00BD, 0x201F7AD3, 0x0F4C0049, 0xA5313AE6, 0x050F009F, 0xD2122749, 0x087E004D, 
0x761208F7, 0x087E004D, 0x76124535, 0x2C1F0062, 0x0F770357, 0x048F00C7, 0x54EF0727, 0x0020804F, 
0x6AB37205, 0x0003003E, 0x32120427, 0xAEBD4E0A, 0x0C4E002F, 0x09191B02, 0x0B2F00BD, 0x201F7AD3, 
0x0F4C0049, 0xA5313AE6, 0x050F009F, 0xD2122749, 0x08760059, 0x501437C5, 0x0876005B, 0x011437C5, 
0x087A0043, 0x28073B29, 0x011A0068, 0x0F6A0CBC, 0x013A000D, 0x7CB3140D, 0x00030032, 0x4C071800, 
0x008C0801, 0xBEBD2008, 0x1F3080E0, 0x1A014713, 0x087A005F, 0x50127DF2, 0x087A005B, 0x5012A0F2, 
0x1D2F002D, 0x5EAE0628, 0x215000A8, 0x1B003924, 0x295000A6, 0x71113949, 0x3E2F00E2, 0x26A81502, 
0x00030038, 0x32120C0E }; 

// ****   DTI header   ******************************************************

ROM_DATA dti_descr_type img_dti_header =  
 { 
    {"dti\\frenchEuro.dtn"},    
    {'D','T','I',0x35},    
    {'E','n','g',0x4D},    
    {'1','.','0',0x32},    
    0,                          // h_dte  
    0,                          // p_dte  
    0,                          // h_ram_dte 
    0,                          // p_ram_dte 
    0,                         // cheksum   
    0,                          // h_vex     
    0,                          // p_vex     
    0,                          // h_xrt     
    0,                          // p_xrt     
    0,                          // cheksum   
    0,                          // h_pdf     
    0,                          // p_pdf     
    0,                          // p_ram_pdf 
    0,                          // cheksum   
    0,                          // h_pict    
    0,                          // p_pict    
    0,                          // p_ram_pict
    0                           // cheksum   
 }; 

// **************************************************************************
// *    END OF ALL                                                          *
// **************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\dti_img.cpp ===
// **************************************************************************
// *    DTI file as C file                                                  *
// **************************************************************************
#include "ams_mg.h"
#include "dti.h"

#ifndef LSTRIP
 #if DTI_COMPRESSED
  #if defined FOR_FRENCH
   #include "dtiimgcf.cpp"
  #elif defined FOR_GERMAN
   #include "dtiimgcg.cpp"
  #elif defined FOR_INTERNATIONAL
   #include "dtiimgci.cpp"
  #else
   #include "dti_imgc.cpp"
  #endif
 #else
  #if defined FOR_FRENCH
   #include "dtiimgff.cpp"
  #elif defined FOR_GERMAN
   #include "dtiimgfg.cpp"
  #elif defined FOR_INTERNATIONAL
   #include "dti_imgf.cpp"
  #else
   #include "dti_imgf.cpp"
  #endif
 #endif
#endif

// **************************************************************************
// *    END OF ALL                                                          *
// **************************************************************************
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\bear\src\dti_imgc.cpp ===
// **************************************************************************
// *    DTI file as C file                                                  *
// **************************************************************************

#include "ams_mg.h"  
#include "dti.h"  

// ****   DTI body   ********************************************************
ROM_DATA _ULONG img_dti_body[22812] =  
 {  
0x0001646C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x24852481, 0x24D224A7, 0x2570253D, 0x26672613, 0x26862677, 0x26E22695, 0x27232702, 
0x27422730, 0x2788274A, 0x280F27AE, 0x28992854, 0x296C292F, 0x2A7229FD, 0x2AE42AD5, 0x2B122B06, 
0x2B242B1A, 0x2B872B5E, 0x2C792C1E, 0x2CCA2C94, 0x2E842D81, 0x2FAF2EEF, 0x30C0304A, 0x31233106, 
0x31B8316B, 0x31FE31D1, 0x32823238, 0x336C32D2, 0x33CA339C, 0x347D3412, 0x34E434A0, 0x350B3501, 
0x35283519, 0x352E0000, 0x366335F6, 0x370E368B, 0x388F37C3, 0x395D38EF, 0x3A0A39C4, 0x3B0F3AE4, 
0x3BC63B7B, 0x3C783C1C, 0x3D903CEB, 0x3E6F3DF5, 0x3EF43E9B, 0x3F913F1F, 0x40543FEC, 0x40824064, 
0x40A34092, 0x41F24120, 0x432F42E5, 0x442543C6, 0x453744A8, 0x46AC45BC, 0x48214731, 0x48DC4866, 
0x4A7C49AF, 0x4C1C4B4F, 0x4DBC4CEF, 0x4EEC4E4A, 0x50554F92, 0x50DB507D, 0x51495117, 0x51B75185, 
0x000052B1, 0x53EB52C8, 0x55F95523, 0x5661562D, 0x00000000, 0x56DA5679, 0x00005733, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x57660000, 
0x58A35867, 0x000058F6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x060C0C44, 0x22800802, 0x00800000, 0x00008080, 0x00C000A0, 0x00000006, 0x00000000, 
0x00000000, 0x40400000, 0x00000000, 0x00000000, 0x00000200, 0x00000002, 0x00000400, 0x00000000, 
0x00006202, 0x00000026, 0x020C0000, 0x0C000A02, 0x0002020C, 0xA0000800, 0xA0000000, 0x2080A0C0, 
0x00008020, 0x00000404, 0x20004040, 0x20200806, 0x00000624, 0x00002406, 0x00000000, 0x00000000, 
0x0000000A, 0x020C0C64, 0x00A00200, 0xC0005000, 0x000080A0, 0x00006000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0xC0A02062, 0x000040B0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000B0100, 0x01020000, 
0x00000000, 0x00000042, 0x60800000, 0x60C0C020, 0x00000080, 0x64800000, 0xC4C00090, 0x0002446C, 
0x60000200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0020A000, 0x00200000, 
0x00006060, 0x90200062, 0x000040C0, 0x00000000, 0x00020000, 0x08000000, 0x000A0000, 0x00080A00, 
0x0C0A0000, 0x00000000, 0x04040000, 0x04040000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000024, 0x00000000, 0x00000000, 0x00000000, 0x8A000000, 0x0CC0068C, 0x0080A60A, 
0xC0800000, 0x00000000, 0x2000010A, 0x40400000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000042, 0x00000000, 0x10000000, 0x00000000, 0x80000000, 0x00C000A0, 0x00002000, 
0xC0300000, 0x00001000, 0x20000000, 0x00000000, 0x00000200, 0x0C000002, 0x00000000, 0x00001000, 
0x00000000, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0x0C000000, 0x0A0A020A, 0x02020C08, 
0x08020002, 0x00000000, 0x06060606, 0x0A0A0000, 0x00000604, 0x00000406, 0x00C00000, 0x00C00000, 
0x00000000, 0x00000024, 0x00000000, 0x00000000, 0x00000000, 0x0B000000, 0x0C00040C, 0x0000060C, 
0x00000200, 0x00000000, 0x02020001, 0x02263000, 0x00000020, 0x00002000, 0x002000C0, 0x00900000, 
0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x02000000, 0x00050000, 0x00020400, 
0x0C040000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000064, 0x00000000, 0x01000000, 0x00000000, 0x5A000000, 0x404CC6CC, 0x00203600, 
0x0C020000, 0x00000000, 0x02000000, 0x00200000, 0x00000000, 0x00000000, 0x00000000, 0x00001000, 
0x00000000, 0x00000082, 0x60800000, 0x80A00040, 0xC0C06080, 0x0080C000, 0x00000000, 0x00000000, 
0x00000000, 0x0000C0C0, 0x00000000, 0x0020A080, 0x40006000, 0x00008080, 0x000C0000, 0x080B0000, 
0x00000080, 0x00000026, 0x090C0000, 0x0C000A02, 0x0002020C, 0xA0000800, 0xA0000070, 0x2080A0C0, 
0x00008030, 0x00010404, 0x20004040, 0x20200806, 0x00000624, 0x00002406, 0x00000000, 0x00000000, 
0x0000000A, 0x00000062, 0xC0A00000, 0x00A0A080, 0x00000070, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000050, 0x00000000, 0x00005020, 0x00000000, 0x00000010, 0x0003000B, 0x0B0C0000, 
0x000020B0, 0x00000086, 0x26860000, 0x0040A040, 0xC0C06082, 0x008000C0, 0x00000000, 0x00000000, 
0x00000000, 0xC2C00000, 0x00000000, 0x0000A290, 0x00408682, 0x00000000, 0x00030200, 0x00000000, 
0x00008800, 0x00000062, 0x00000000, 0x00000000, 0x00000000, 0x28000000, 0x200C0000, 0xC0A82AA0, 
0x0C08C080, 0x00000000, 0xC2A00000, 0x84A40000, 0x000080A0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000026, 0x0C0A0000, 0x0A000C06, 0x0000000A, 0x40000000, 0x80000000, 0x002040C0, 
0x00008000, 0x0A0A0000, 0x00000000, 0x00020604, 0x00000002, 0x00000002, 0x00000000, 0x00000000, 
0x00000009, 0x00000042, 0x00200000, 0x00200000, 0x00002020, 0x00C00040, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000200, 0x000C0002, 0x00000000, 0x00000600, 
0x00000000, 0x00000026, 0x0C0A0000, 0x000C0006, 0x0000000A, 0x000A0000, 0x01000001, 0x00000000, 
0x00000000, 0x00000A0A, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00C08060, 0x00800000, 
0x00000A02, 0x00000022, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00CC0251, 0x05750000, 
0x00000000, 0x00000066, 0xB2C80000, 0x60A0A030, 0x202424C8, 0x0A822008, 0x00000000, 0x00000600, 
0x00000000, 0x66606080, 0x02000000, 0x0608A8A2, 0x0008694A, 0x00004040, 0x00000000, 0x00000000, 
0x00007470, 0x00000066, 0x00000000, 0x40000000, 0x00C04000, 0x0A00C000, 0x0A0A080C, 0x00000500, 
0x00000000, 0x00002040, 0x00000000, 0x00004060, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 
0x00000000, 0x00000044, 0x6C880000, 0x62CC0225, 0x00000088, 0x66880000, 0xCC020088, 0x000044B6, 
0x06000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0022AA00, 0x00220000, 
0x00000666, 0x0C040066, 0x2030010C, 0xA0000000, 0x60C0A040, 0x0000C010, 0x00000000, 0x00000000, 
0x00000000, 0x000080A0, 0x00000000, 0x00000020, 0x00000000, 0x00007000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x00000000, 0x00000000, 0x00000000, 0xC0000000, 0xA0A040A0, 0x2C54C085, 
0xB0400C43, 0x00000000, 0x6C646060, 0xA3A40000, 0x00006244, 0x00004060, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x21BC0000, 0xBC009720, 0x002030BC, 0x00008700, 0x00000000, 0x00000000, 
0x00000000, 0x00004040, 0x00000000, 0x00008260, 0x00006040, 0x00004060, 0x00000000, 0x00001000, 
0x00000014, 0x00000066, 0x0C240000, 0x00040403, 0x00000020, 0x40000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00202000, 0x0020A040, 0x00000000, 0x00000000, 0x00000000, 
0x00000304, 0x00000086, 0x8CC80000, 0xC004A81C, 0x204040C0, 0x00208020, 0x00000000, 0x00000000, 
0x00000000, 0x02000030, 0x00000000, 0x0000C7C5, 0x00002010, 0x00001034, 0x00000000, 0x00000000, 
0x00000244, 0x00000066, 0x20400000, 0xB0000000, 0x60C0A0A0, 0x0A00C000, 0x00000502, 0x00030A08, 
0x00000606, 0x000080A0, 0x08080808, 0x0A0C0020, 0x0000060A, 0x00008606, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0x00000000, 0x00000000, 0x00000000, 0x46000000, 0x474020B0, 0x0004060C, 
0x00000700, 0x00000000, 0x00000010, 0x00030000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0xA0C00000, 0xB0A0A020, 0x202020C0, 0x01802000, 0x000A0000, 0x00040500, 
0x0A060000, 0x60607080, 0x02000000, 0x0000A0A0, 0x00005040, 0x00004040, 0x00000000, 0x00000000, 
0x00008080, 0x00000064, 0x0C0C0000, 0x0C000C04, 0x0102040C, 0x00000900, 0x00000000, 0x80420000, 
0x000020C0, 0x00000005, 0x00000000, 0x00000A07, 0x00000202, 0x00000204, 0x00000000, 0x00000700, 
0x00000009, 0x00000025, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00400000, 0x00000000, 
0x20000000, 0x05000000, 0x00000000, 0x00000501, 0x00000605, 0x00000000, 0x00C00060, 0x80C00000, 
0x00000100, 0x060C0C64, 0x00000102, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80602040, 
0x002020C0, 0x00000000, 0x20000000, 0xC0800000, 0x00000040, 0x00000000, 0x00000400, 0x00000000, 
0x00000000, 0x00000084, 0x00000000, 0x00000000, 0x00000000, 0x6A000000, 0x004C063C, 0x90606680, 
0x4C02C0A0, 0x00000000, 0xB6CA0000, 0x50806000, 0x000070A0, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60100064, 0x92880060, 0x00080020, 0x00000828, 0x000C000A, 0x04000000, 0x00000006, 
0x00000000, 0x64440000, 0x00000000, 0x00002000, 0x00007660, 0x00000000, 0x00002000, 0x00000000, 
0x0000A600, 0xC0903068, 0x000080C0, 0x00000000, 0x00000000, 0x06000000, 0x05000201, 0x0C0C080B, 
0x00000C06, 0x00000000, 0x08000000, 0x0C0C0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00008000, 0x00000066, 0x12880000, 0x00000010, 0x10140488, 0x0A020008, 0x00000009, 0x00200800, 
0x00000000, 0x06000040, 0x02000040, 0x06488822, 0x8008080A, 0x004090A0, 0x00000000, 0x00008100, 
0x00000490, 0x00000041, 0x00000000, 0x00100000, 0x00000000, 0x50100000, 0xC00010C0, 0x00000050, 
0x00000000, 0x00000000, 0x00004040, 0x00010100, 0x00000001, 0x00000100, 0x0003000C, 0x0B090000, 
0x00000000, 0x00000062, 0xC0A00000, 0x00A0A080, 0x00000040, 0x00000000, 0x00000000, 0x00000001, 
0x00000000, 0x00000000, 0x00000000, 0x00001000, 0x00000010, 0x00200000, 0x0000000B, 0x03068000, 
0x00009090, 0x00000046, 0xC0C00000, 0xC000C040, 0x002030C0, 0x00008000, 0x00000000, 0x00200000, 
0x00000000, 0x00000040, 0x06000000, 0x0000A070, 0x00002B26, 0x00002020, 0x00000000, 0x00000000, 
0x00000060, 0x00000046, 0x0C0B0000, 0x0A000C06, 0x0000000A, 0xA0000000, 0xC00040C0, 0x003060C0, 
0x00004010, 0x0A0A0001, 0x20200000, 0x20620604, 0x00000003, 0x00000002, 0x00000000, 0x00000700, 
0x0000000A, 0xB0800066, 0x00002080, 0x00000000, 0x00000000, 0x0C000000, 0x0A00020C, 0x02020C08, 
0x00000002, 0x00000000, 0x02000004, 0x080A0000, 0x00000604, 0x00000406, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x050C0000, 0x0CC00400, 0x0000000C, 0x00900200, 0xC0000000, 0x00000060, 
0x00000000, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00202000, 0x00000000, 
0x00006064, 0x00000048, 0x2A880000, 0x008A000C, 0x02028288, 0x00C800A0, 0x70000000, 0x00000070, 
0x00000000, 0x40401C0C, 0x00000000, 0x00000A08, 0x04000600, 0x00000808, 0x00000000, 0x00000000, 
0x00006204, 0x02000006, 0x0000000B, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000A0, 0x00000000, 0x00000000, 
0x00000000, 0x00000035, 0x00000200, 0x00000000, 0x00000000, 0x09000000, 0x0B00010B, 0x0000030B, 
0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x60000000, 0x00000000, 0x00005000, 
0x00000010, 0x00000066, 0x23850000, 0x07000502, 0x00404085, 0xA0200180, 0x00000000, 0x00006000, 
0x00000000, 0x60000100, 0x20000000, 0x00000200, 0x008000A0, 0x60000000, 0x00000000, 0x00000000, 
0x00004000, 0x00000060, 0x00000000, 0x00000000, 0x0C000000, 0xC0000000, 0xA0A030A0, 0x2030C0B0, 
0x90205040, 0x000C0000, 0x80606060, 0xA0A00000, 0x00006040, 0x00004060, 0x00000000, 0x00000000, 
0x00000300, 0x00000082, 0x60800000, 0x90002040, 0xC0C08080, 0x0080C000, 0x00000000, 0x00000000, 
0x00000000, 0x0000C0C0, 0x00000000, 0x00608080, 0x40006110, 0x0B009082, 0x00000000, 0x00007000, 
0x00000085, 0xB0C0B066, 0x00088050, 0x00000000, 0x00000008, 0x00000000, 0x00000040, 0x00000000, 
0x00000000, 0x00000005, 0x00000004, 0x02080802, 0x08000000, 0x00000A08, 0x00004000, 0x00000500, 
0x00000009, 0x00000044, 0x02080000, 0x0C000A00, 0x00000808, 0x80000A00, 0x00B06080, 0x0020A000, 
0xC0000020, 0x04040000, 0x20000000, 0x60600000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000600, 0x00000066, 0x89A80000, 0xC000B020, 0x002060A8, 0x00008000, 0x00000000, 0x00000000, 
0x00000000, 0x60000024, 0x00000004, 0x02088862, 0x08000040, 0x00002A00, 0x00000000, 0x00000000, 
0x000000A5, 0x00000062, 0x20600000, 0xC0008000, 0x2080A0A0, 0x0A00B000, 0x0B000208, 0x0204080C, 
0x00000600, 0x20000060, 0x00000006, 0x00068060, 0x00000022, 0x00004400, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0x00200000, 0x00000000, 0x00000020, 0x04000000, 0x06000002, 0x080A080C, 
0x00000B02, 0x00000000, 0x06000000, 0x00262000, 0x20000004, 0x00004260, 0x00000000, 0x00000000, 
0x00000010, 0x00000028, 0x0A0A0000, 0x05000C0C, 0x00200608, 0x80080000, 0x00A01080, 0x0080B000, 
0xC0A00000, 0x0C0C0000, 0x40400000, 0x40400A08, 0x00040808, 0x00000000, 0x00000000, 0x00000000, 
0x00000800, 0x00000006, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0C080009, 
0x00000C02, 0x00000000, 0x0C040000, 0x06040000, 0x00000208, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x008C0000, 0x0C000400, 0x0001018C, 0x00000400, 0x00000000, 0x00000000, 
0x00000000, 0x00000040, 0x00000040, 0x20808625, 0x80000000, 0x0000A000, 0x00000000, 0x00000000, 
0x00000054, 0x00000046, 0x07070000, 0x00000701, 0x00000001, 0x60000000, 0x00C000C0, 0x00001000, 
0x40000000, 0x00000005, 0x10300000, 0x00000100, 0x00000000, 0x00000305, 0x00000200, 0x00000000, 
0x00000009, 0x00000066, 0x00700000, 0xC0008000, 0x000010C0, 0x03008000, 0x07000000, 0x0C0A020B, 
0x00000C03, 0x00303010, 0x0C0A0000, 0x05092000, 0x0000080A, 0x00000000, 0x00000000, 0x00000000, 
0x00000040, 0x00000064, 0x22880000, 0x00080000, 0x004A4888, 0xA02C008C, 0x00000000, 0x00006000, 
0x00000000, 0x64040000, 0x20000000, 0x60808020, 0x008000A2, 0x10000000, 0x00000000, 0x00000000, 
0x00004600, 0xA0601064, 0x000040C0, 0x00000000, 0x00000000, 0x07000000, 0x0C00040C, 0x00000608, 
0x00000200, 0x00000000, 0x02020000, 0x02040000, 0x00000000, 0x00000600, 0x00000000, 0x00000000, 
0x00000000, 0x00000064, 0x86880000, 0x090C0C22, 0x00000028, 0x06040000, 0x0C0C0008, 0x00000404, 
0x08000000, 0x60100000, 0x00000000, 0x00002000, 0x00007060, 0x00000000, 0x00002A00, 0x00000000, 
0x0000B606, 0x00000066, 0x5CA40000, 0xC00C7010, 0x000020B4, 0x00067000, 0x07000000, 0x00000007, 
0x00000000, 0x10000014, 0x00000000, 0x00005040, 0x00000000, 0x00000010, 0x00000000, 0x00003000, 
0x00000440, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0x08000000, 0x0B000208, 0x02020A0C, 
0x00000602, 0x00000000, 0x02000004, 0x080A0000, 0x00003604, 0xC0000426, 0x00000000, 0x00009000, 
0x00000000, 0x00000066, 0x2C850000, 0xB0049422, 0x102020A0, 0x00008000, 0x00000000, 0x00000000, 
0x00000000, 0x00005040, 0x00000000, 0x00008060, 0x00006040, 0x00004060, 0x00000000, 0x00000800, 
0x00000494, 0x00000064, 0x02080000, 0x00080000, 0x00000808, 0x500C000A, 0x0000A030, 0x00505000, 
0x00000000, 0x02010000, 0x00000000, 0x20500000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000400, 0x00000062, 0x00200000, 0x00000000, 0x00000020, 0x40000020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00202000, 0x00207040, 0x00000000, 0x000C0000, 0x00040000, 
0x0000A000, 0x00000048, 0x90840000, 0x00000060, 0x01101064, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000002, 0x00000000, 0x0000070A, 0x00006000, 0x00000600, 0x00000000, 0x00000000, 
0x00000000, 0x00000044, 0x00200000, 0x00600000, 0x00002020, 0x0BC00050, 0x0C00040C, 0x0300060C, 
0x00000702, 0x00000000, 0x02020004, 0x02062000, 0x00000000, 0x00002000, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x000C0000, 0x0C000500, 0x0000000C, 0xA0000200, 0x00C080B0, 0x00606000, 
0xC0000000, 0x05000005, 0x20000000, 0x20600200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000004, 0x00000024, 0x02000800, 0x00000000, 0x00000000, 0x31000000, 0x40000008, 0x0010A0C0, 
0x00003000, 0x00000000, 0x00000000, 0x00000000, 0x00000200, 0x00000002, 0x00000400, 0x00000000, 
0x00000202, 0x00000086, 0x20800000, 0x0440A0B0, 0xC0CC6580, 0x00800CC0, 0x00000000, 0x00000000, 
0x00000000, 0xC1C00204, 0x00000000, 0x0000A080, 0x00408080, 0x00000200, 0x00000000, 0x00000000, 
0x00008000, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0x0A000000, 0x00000402, 0x00024AC8, 
0x00000606, 0x00000000, 0x08080808, 0x0A0C0A00, 0x0000060A, 0x00000606, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x02180000, 0x06000000, 0x00040418, 0x0A020108, 0x00000000, 0x00000600, 
0x04000000, 0x06000000, 0x02000000, 0x06181802, 0x1008080A, 0x00003010, 0x00000000, 0x00000000, 
0x00000480, 0x00000066, 0x00000000, 0x0A000A00, 0x00000008, 0x40000200, 0x9040C0C0, 0x00202010, 
0x00000000, 0x00000000, 0x00000000, 0x00200200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0xC0600000, 0x6000C000, 0x00000040, 0x00000000, 0x00000C0C, 0x00000000, 
0x00000000, 0x50400000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000040, 0x00000026, 0x20020000, 0x00000020, 0x00000002, 0x00000000, 0x00002050, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00020200, 0x02000000, 0x00000406, 0x0080C000, 0x00200000, 
0x0000404A, 0x00000024, 0x00080000, 0x020C0000, 0x00000008, 0xC0090000, 0xAC305050, 0x2080C4C9, 
0xB0208060, 0x00000000, 0x20004040, 0xA0900000, 0x00000020, 0x00002000, 0x00000000, 0x00000000, 
0x00000006, 0x00000060, 0x00000000, 0x20000000, 0x60C04000, 0x0000C040, 0x00000000, 0x00000000, 
0x00000000, 0x00003000, 0x00000000, 0x00001010, 0x00080B04, 0x00001000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x20900000, 0xC000A020, 0x00202090, 0x07008000, 0x03000003, 0x0C0A050A, 
0x00000C08, 0x00504040, 0x0C0A0000, 0x080A8060, 0x0000684A, 0x00004060, 0x00000000, 0x00000000, 
0x000000A0, 0x00000060, 0xC0C00000, 0xA100C420, 0x002020C0, 0x06006000, 0x000C000A, 0x00020A00, 
0x0C040000, 0x00004080, 0x05000000, 0x04048060, 0x00006041, 0x00004060, 0x00000000, 0x00000000, 
0x000000A0, 0x00000066, 0x00000000, 0x00000000, 0x00000000, 0x22000000, 0x05000040, 0x8C7A464B, 
0x00202CCA, 0x00000000, 0x2C0A0000, 0xC88A0000, 0x0000088A, 0x00000000, 0x00000000, 0x00003000, 
0x00000000, 0x0C0A0746, 0x6080030B, 0x70C0C020, 0x00000080, 0x60801000, 0xC0C00080, 0x00004070, 
0x60000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000A000, 0x00000000, 
0x00006060, 0x00000042, 0x00000000, 0x00C00000, 0x00000000, 0x06800000, 0xA2000002, 0x00020460, 
0x00000200, 0x00000000, 0x0C000000, 0x00000000, 0x00000609, 0x00000000, 0x0000A000, 0x00000000, 
0x00006060, 0x00000016, 0x02040000, 0x0AB00400, 0x060C0A35, 0x00A00C00, 0xC0000000, 0x000010A0, 
0x00000000, 0x0100060A, 0x00000000, 0x00000002, 0x00000000, 0x00000800, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x000C0000, 0x0C000400, 0x0000000C, 0xA0000200, 0x40C060A0, 0x0040C0C0, 
0xC0302020, 0x00000000, 0x20000000, 0x80600200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000004, 0xA0200066, 0x000040C0, 0x00000000, 0x00000000, 0x0A000000, 0x0C000C0C, 0x0002060A, 
0x00000000, 0x00000000, 0x00000200, 0x00020000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00009000, 0x00000066, 0x0C0A0000, 0x0A000C0C, 0x00000009, 0xC0000000, 0xA0A050A0, 0x2030C080, 
0x90200050, 0x0A0A0000, 0x70606060, 0xA0A20604, 0x00006044, 0x00004062, 0x00000000, 0x00000000, 
0x00000009, 0x00000063, 0xA0C00000, 0xA0A0A020, 0x202020C0, 0x02806000, 0x00000004, 0x00000000, 
0x00000000, 0x60706080, 0x00000000, 0x0000A0A0, 0x00006140, 0x000A4042, 0x00000000, 0x00000900, 
0x00008080, 0x00000024, 0x00000000, 0x80008000, 0x00000000, 0x88001000, 0x00CC0038, 0x0080A200, 
0xCC830000, 0x00000000, 0x22000000, 0x40400000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0x20C00000, 0xC000A020, 0x002020C0, 0x06008000, 0x04000100, 0x040C0A08, 
0x00000409, 0x00000040, 0x02000004, 0x09088060, 0x00006032, 0x00004260, 0x00000000, 0x00000000, 
0x000000A0, 0x00000046, 0x000A0000, 0x0AC00420, 0x0000008A, 0x00C00230, 0xA0000000, 0x000040A0, 
0x00000000, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000004, 0x00000026, 0x070C0000, 0x4C003A02, 0x0012240C, 0x00003810, 0x00000000, 0x00000000, 
0x00000000, 0x00000408, 0x00000000, 0x00000808, 0x00000604, 0x00000407, 0x000000B0, 0xA0900800, 
0x0000000A, 0x00000066, 0xA08C0000, 0x0C400440, 0x0010205C, 0x00000300, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000200, 0x00000000, 0x00300003, 0x00000000, 0x00008000, 
0x00000084, 0x00000084, 0x6A880000, 0x96AC0C41, 0xC0C06098, 0x0688C000, 0x0C0C000A, 0x00000406, 
0x06000000, 0x0000C0C0, 0x00010000, 0x0030A080, 0x40006020, 0x20008080, 0x00020A00, 0x00027000, 
0x00000686, 0x00000086, 0x70900000, 0x0040A040, 0xC0C06090, 0x009000C0, 0x00000000, 0x00000000, 
0x00000000, 0xC0C00000, 0x00000000, 0x0000A0A0, 0x00488680, 0x05000003, 0x00000000, 0x00000000, 
0x00008006, 0x00000046, 0x658C0000, 0x6CC0CA22, 0x0002028C, 0x60800800, 0xC0C00080, 0x000040A0, 
0x60000000, 0x00010404, 0x00000000, 0x00000806, 0x00004604, 0x00000406, 0x0020A000, 0x00200700, 
0x0000606A, 0x00000046, 0xCACC0000, 0xC60ACA42, 0x252424CC, 0x00088200, 0x00000000, 0x00200000, 
0x00000000, 0x06274748, 0x00000000, 0x0000AA6A, 0x00002624, 0x00002454, 0x00000000, 0x00007000, 
0x00000888, 0x00000066, 0x20800000, 0x00000000, 0x00404080, 0xAC200080, 0x0A0A080A, 0x02046C04, 
0x09020002, 0x60200000, 0x28060606, 0x6A8A8020, 0x00808684, 0x00000406, 0x00000000, 0x00000000, 
0x0000C000, 0x00000042, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0xC00060C0, 0x000060A0, 
0x00000000, 0x00000001, 0x000000A0, 0x00000000, 0x01001000, 0x00000106, 0x00006000, 0x00000000, 
0x00000007, 0x00000064, 0x00000000, 0x00040000, 0x00000000, 0x08040000, 0x0C00000C, 0xC0400004, 
0xA0B00000, 0x00000000, 0x08002424, 0x00040000, 0x00000008, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000042, 0x01220000, 0x00990000, 0x00112221, 0x00CC0064, 0x06000000, 0x00000005, 
0x00000000, 0x00020000, 0x00000000, 0x00000100, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x00000000, 0x00000000, 0x00000000, 0x74000000, 0x04B46299, 0x00025000, 
0x90000000, 0x00000000, 0x30100007, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0x00000800, 
0x00000000, 0x00000046, 0x60800000, 0x80C0C020, 0x00000080, 0x62800000, 0xC3C00090, 0x0C0A426A, 
0x90000C08, 0x00000000, 0x0A0A0000, 0x07080000, 0x00000608, 0x00000000, 0x0070A000, 0x00200000, 
0x00006060, 0x1060C042, 0x00002000, 0x00000000, 0x00000000, 0x00000000, 0x05000000, 0x0000000C, 
0x00000B00, 0x00000000, 0x00000000, 0x01010000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000042, 0x00000000, 0x00600000, 0x00000060, 0x00600020, 0x60000000, 0x00004060, 
0x00000000, 0x00000000, 0x00000000, 0x00200000, 0x00000000, 0x00000000, 0x000C6006, 0x000C0000, 
0x00000000, 0x00000066, 0x00000000, 0x00000000, 0xC0B04000, 0x06000010, 0x000A0B09, 0x00000000, 
0x05000000, 0x00000000, 0x000C0000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x60C0C046, 0x2000B020, 0x00000000, 0x00000000, 0x02000000, 0x09000A66, 0x00000008, 
0x00000000, 0x00000000, 0x00000C00, 0x00000000, 0x00002000, 0x00000020, 0x00004000, 0x00000000, 
0x00000000, 0x00000026, 0x090C0000, 0x0D000900, 0x0003060C, 0x80000600, 0x80000060, 0x005080C0, 
0x00006000, 0x00000002, 0x00000000, 0x00400404, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000064, 0xC0700000, 0x4006C000, 0x00000041, 0x00090005, 0x00000000, 0x00000000, 
0x00000000, 0x40400000, 0x00000000, 0x00000000, 0x00000050, 0x00000000, 0x00000000, 0x00002000, 
0x00000040, 0x00000044, 0x68880000, 0x06CC0022, 0x00000088, 0x66A80000, 0xCC000098, 0x00004496, 
0x36000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00229A00, 0x00220000, 
0x00006966, 0x00000064, 0xCCA80000, 0x660CCC69, 0x00000048, 0x06081000, 0x0C0C0008, 0x00000406, 
0x06000000, 0x40400000, 0x00000000, 0x00000000, 0x00000040, 0x00000000, 0x00020A00, 0x00027000, 
0x00000646, 0x00000006, 0x0C080000, 0x03000C09, 0x00000005, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x03040000, 0x00000000, 0x00000100, 0x00204000, 0x00000000, 0x00000000, 0x00000000, 
0x00200104, 0x00000022, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00702000, 0x00C00020, 0x00070004, 0x080A8000, 
0x00000000, 0x00000086, 0x22880000, 0x40002000, 0x50040488, 0x0A020008, 0x00000000, 0x02020700, 
0x00000001, 0x46405060, 0x0A000000, 0x0608B8C2, 0x00090A2A, 0x0001A000, 0x00000000, 0x00000800, 
0x00002420, 0x00000064, 0x26C00000, 0x800B6000, 0x505050C0, 0x00080000, 0x0C000008, 0x0000000C, 
0x00000000, 0x80A08080, 0x00000000, 0x0000C0B0, 0x00000080, 0x00000000, 0x00020A00, 0x00020000, 
0x00002626, 0x00000086, 0x268C0000, 0x40042501, 0xC000008C, 0x00020000, 0x00000000, 0x00000000, 
0x00000000, 0x40404043, 0x00000000, 0x0000A7C6, 0x00000020, 0x0000A002, 0x00000000, 0x00000000, 
0x00002223, 0x00000062, 0x20C00000, 0xC000A020, 0x002020C0, 0x0A008000, 0x0A000000, 0x02080A0C, 
0x00000802, 0x10804040, 0x020B0404, 0x02028060, 0x00006042, 0x00004260, 0x00000000, 0x00000000, 
0x000000A0, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0C000000, 
0x020C000C, 0x00000000, 0x00000000, 0x00606000, 0x00000060, 0x00006000, 0x000000C0, 0x00500000, 
0x00000000, 0x00000022, 0x00000000, 0x00000000, 0x00000000, 0xA9000000, 0x009C0303, 0x1379BB00, 
0xCC680013, 0x00000000, 0x64000000, 0x67750000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x7AAC0000, 0x00800086, 0x0270828A, 0x00700090, 0x00000000, 0x00000000, 
0x00000000, 0x66100006, 0x00000000, 0x0000A8A8, 0x000000A4, 0x00000400, 0x00000000, 0x00000000, 
0x00006000, 0x00000006, 0x897B0000, 0x0C000B00, 0x0000004A, 0x00000800, 0x00000000, 0x00000000, 
0x00000000, 0x01000002, 0x00000000, 0x00000201, 0x00000000, 0x00000022, 0x00000000, 0x00000000, 
0x000000A4, 0x00000060, 0xC0A00000, 0x20A0A080, 0x00001040, 0x00001000, 0x00000000, 0x00000000, 
0x00000000, 0x60000000, 0x00000000, 0x00206000, 0x08000060, 0x00000300, 0x00000000, 0x00008000, 
0x0000A0A0, 0x00000024, 0x02060000, 0x00072000, 0x00000606, 0x00080007, 0x00200000, 0x00000000, 
0x00000000, 0x04040000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00C00000, 0x00C00000, 
0x00000400, 0x00000066, 0x03040000, 0x9A000101, 0x26BC7A56, 0x0000CC00, 0x00000000, 0x00000000, 
0x00000000, 0x0000278B, 0x00000000, 0x00001514, 0x00000000, 0x00002810, 0x00000000, 0x00000000, 
0x00000000, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0x70000000, 0x40000000, 0x8C9A52C0, 
0x0A0CB007, 0x00000000, 0x00000A0A, 0x01010000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000068, 0x20600000, 0x000060A0, 0x000000A0, 0x00000000, 0x00000000, 0x06000002, 
0x00000C04, 0x80808080, 0x040C0000, 0x0002C000, 0x00000884, 0x09002000, 0x00000000, 0x00000000, 
0x00002020, 0x00000066, 0x00070000, 0x00000000, 0x04050207, 0x40000000, 0x4040C0C0, 0x80A0A000, 
0x00000080, 0x00000405, 0x00000006, 0x02280703, 0x09000000, 0x00000A0C, 0x00000000, 0x00000000, 
0x00000004, 0x00000028, 0x81070000, 0x00A10A21, 0x05020608, 0x1005000A, 0xA00030A0, 0x00000000, 
0x00000000, 0x2C0A0000, 0x02000000, 0x00000806, 0x0000092A, 0x00000000, 0x0080C000, 0x00200000, 
0x00004640, 0x00000044, 0x88840000, 0x0AC00C00, 0x00002084, 0x04C00A60, 0xC00C0008, 0x000204A0, 
0x0A0A6000, 0x00000000, 0x04000040, 0x00000000, 0x00000008, 0x00008000, 0x00000200, 0x00060000, 
0x00006000, 0x00000066, 0x00000000, 0x00000000, 0x00000000, 0xAA000000, 0x00008486, 0x0B28BC48, 
0x000026CB, 0x00000000, 0xCA888888, 0xABCC0000, 0x000087BA, 0x00006623, 0x00000000, 0x00000000, 
0x00000000, 0x00000084, 0x02020000, 0x000C0C02, 0x00000002, 0x20020000, 0x0C0C0022, 0x00001000, 
0x00004000, 0x00000000, 0xC0400000, 0x00200000, 0x00003090, 0x00000000, 0x00000400, 0x00000000, 
0x00000000, 0x10100084, 0x00000010, 0x20000000, 0x00000000, 0x60000000, 0x00100010, 0x00606000, 
0x3000A000, 0x00000000, 0xC0A00000, 0x40842000, 0x000C8CAA, 0x00060000, 0x00000000, 0x00003900, 
0x00000000, 0x00000084, 0x00220000, 0x000C0C00, 0xC000C0C2, 0x00060000, 0x0C0C000C, 0x00000008, 
0x00000000, 0x00000000, 0x00000000, 0x0000A0C0, 0x00000000, 0x00004000, 0x00000400, 0x00000000, 
0x00000000, 0x00000066, 0x00000000, 0x84000200, 0x00C09000, 0x0000C000, 0x00000000, 0x00080000, 
0x080A0000, 0x00002070, 0x00000008, 0x00565000, 0x00000030, 0x00009800, 0x00000000, 0x00000000, 
0x00000000, 0x00000006, 0x00000000, 0x00000000, 0x00000000, 0xAC000000, 0x0A0A080C, 0x0000CC00, 
0x00000000, 0x00000000, 0x60000000, 0x02080000, 0x0060A604, 0x00000000, 0x00000000, 0x00000800, 
0x00000000, 0x00000064, 0x08040000, 0x0A000C00, 0xA0C0A004, 0x04A000C0, 0x000C0008, 0x00020400, 
0x0A020000, 0xA0A00000, 0x04000000, 0x00000000, 0x00000008, 0x00000000, 0x00000200, 0x00060000, 
0x00000000, 0x00000066, 0xC0200000, 0x00C000C0, 0x00000000, 0x04200000, 0x04040C0C, 0x00020200, 
0x00000000, 0x00000000, 0x00000000, 0x00092000, 0x0000000A, 0x00000400, 0x00000000, 0x00000000, 
0x00002000, 0x00000066, 0x00040000, 0x02000000, 0x00000004, 0x40000000, 0x00000000, 0x00004020, 
0x00000000, 0x02020202, 0x20202020, 0x40C00C04, 0x00000042, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000068, 0xC0A20000, 0x00000080, 0x0C404042, 0x00000700, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000A0C, 0x0000000A, 0x00600480, 0x00000000, 0x00008000, 
0x000000A0, 0x00000020, 0x00000000, 0x0A000800, 0x00000004, 0x00000800, 0x00000000, 0x00000000, 
0x00000000, 0x02000000, 0x00000000, 0x00000404, 0x80000004, 0x000020C0, 0x00000000, 0x00000000, 
0x00000090, 0x00000064, 0x40420000, 0x00020060, 0x0A080542, 0x100B000B, 0x00001020, 0x20000000, 
0x00004000, 0x820B0000, 0x80000000, 0x8080C080, 0x0000A0C0, 0x00000000, 0x00000000, 0x00000000, 
0x00004000, 0x00000006, 0x0C0A0000, 0x000C0306, 0x0000000A, 0x700A0003, 0x0A0A6078, 0x70707008, 
0x09000060, 0x00000A0A, 0x00000000, 0x40500000, 0x00000230, 0x00003000, 0x00000002, 0x00000000, 
0x00000A02, 0x00000066, 0x02080000, 0x00000000, 0x00040408, 0x8A020008, 0x00000042, 0x8565C840, 
0x002020C9, 0x06000000, 0x6B010000, 0xC6880802, 0x00090B2B, 0x00000000, 0x00000000, 0x00000400, 
0x00000400, 0x00000062, 0x08470000, 0x00000002, 0x00000040, 0x06000000, 0x00606247, 0x00100000, 
0x00000000, 0x00000080, 0x00000080, 0x00B02000, 0x00000400, 0x0000C0A0, 0x00000B00, 0x00000000, 
0x00000440, 0x00000066, 0xA5A70040, 0x40004080, 0x04062247, 0x00000000, 0x00400000, 0x00000000, 
0x40000000, 0x40000408, 0x0000000A, 0x02080704, 0x0A003000, 0x00000B0C, 0x00004000, 0x00000800, 
0x0000A004, 0x00000064, 0x06080000, 0x00000002, 0x00000007, 0x06000000, 0x00000006, 0x80602440, 
0x0020C0C0, 0x00000000, 0xC0000000, 0xC0800000, 0x00000070, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000044, 0x4C9B0010, 0x008C0006, 0x0205829B, 0x00CC00AB, 0x00000000, 0x00000000, 
0x00000000, 0x4A3A0001, 0x00000000, 0x00008A79, 0x00040A3A, 0x00000000, 0x00000000, 0x00000000, 
0x00006600, 0x00000048, 0xC0860000, 0x00000046, 0x04060608, 0x0004000A, 0x000040C0, 0x00000000, 
0x00000000, 0x0C0A0000, 0x06000000, 0x00000808, 0x00000B0A, 0x00000000, 0x0020A000, 0x00206000, 
0x000068B0, 0x00000002, 0x00000000, 0x00000000, 0x40B08040, 0x086000C0, 0x00090404, 0x03080800, 
0x0C070003, 0xA0000000, 0x07000007, 0x070A6040, 0x000000C4, 0x00000400, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0x0C0A0000, 0x080C0806, 0x0000000A, 0x800A0000, 0x000B5000, 0xA0C0A000, 
0x89A0A010, 0x00000A0A, 0x60606060, 0x40600000, 0x00006240, 0x00004060, 0x00000800, 0x00000000, 
0x00000A02, 0x00000008, 0x82680000, 0x04800200, 0x0A060108, 0xA0A00008, 0xC000B0C0, 0x000000A0, 
0x00000000, 0x08040400, 0x00000000, 0x00000A0C, 0x0000000A, 0x00000200, 0x00008000, 0x00000000, 
0x00000202, 0x00000062, 0x60800000, 0x60004020, 0x200000A0, 0x08002000, 0x06000206, 0x02070A06, 
0x00000202, 0x00000040, 0x02000004, 0x0C0BB0C0, 0x00000066, 0x00006600, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0x20C00000, 0xC0A0A020, 0x002220C0, 0x02B08000, 0x00060000, 0x08080A00, 
0x0C0C0008, 0x00004040, 0x04040002, 0x04048060, 0x00004040, 0x00004240, 0x00000000, 0x00000000, 
0x000000A0, 0x00000046, 0x60800000, 0x00C00010, 0x00000000, 0x6A800000, 0xC0000484, 0x08040B90, 
0x0000000C, 0x00000000, 0x08000000, 0x0B0C0000, 0x0000060A, 0x00000000, 0x00009000, 0x00000000, 
0x00006060, 0x00000024, 0x06080000, 0x000C0C02, 0x00000008, 0xC6080000, 0x8C808088, 0x2080C4C9, 
0x00008040, 0x00000000, 0x20000040, 0xA0A00000, 0x00000020, 0x00002000, 0x00020A00, 0x00020000, 
0x00000606, 0x00000066, 0x02000000, 0x08000702, 0x00020200, 0x00000600, 0x00000000, 0xB0A00000, 
0xA0C000A0, 0x00000404, 0x00000000, 0xA0800605, 0x00000454, 0x00002406, 0x00000000, 0x00000000, 
0x00000002, 0x00000066, 0xC0A00000, 0x00C00070, 0x00000030, 0x58B00000, 0x90001462, 0x08020980, 
0x0000300C, 0x00007000, 0x08360608, 0x0A0C0000, 0x0000070A, 0x00000603, 0x00001000, 0x00000000, 
0x00003030, 0x00000062, 0x80800000, 0x00000020, 0x00000020, 0x0C000000, 0x04600206, 0x00060C0C, 
0xAA400804, 0x60500000, 0x00000000, 0x0A002000, 0x00006060, 0x00000000, 0x00002000, 0x00000000, 
0x0000A000, 0x00000010, 0xA0400000, 0x00000000, 0x00000010, 0x08000000, 0x00000009, 0x00000200, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80080607, 0x00002000, 0x00000000, 0x00005000, 
0x00000000, 0x00000066, 0xBC980000, 0x00C4087C, 0x00020076, 0x00500000, 0x00000000, 0x00000000, 
0x00000000, 0x08001030, 0x00000000, 0x00000506, 0x00000000, 0x00000000, 0x00000400, 0x00000000, 
0x00000802, 0x00000066, 0xC0800000, 0x00C00000, 0x00202080, 0x03600040, 0x00040001, 0x09040800, 
0x0A0A000C, 0x00000040, 0x00000000, 0x0907A080, 0x00000027, 0x00000000, 0x00000000, 0x00000000, 
0x00004000, 0x00000026, 0x0C0A0000, 0x000C0006, 0x0000000A, 0xA00A0000, 0xA08010A0, 0x2080A0C0, 
0xC0608020, 0x0000000A, 0x20004040, 0x20200A08, 0x00000222, 0x00002000, 0x00000000, 0x00000000, 
0x00000A02, 0x00000026, 0x000C0000, 0x0C070700, 0x0000000C, 0x80090707, 0x00C00080, 0x0080A000, 
0xC08000A0, 0x00000000, 0x40000000, 0xA0A00604, 0x00000070, 0x00004000, 0x00000000, 0x00000000, 
0x00000004, 0x00000064, 0x06080000, 0x06000A02, 0x00000008, 0xA6000100, 0x00A04068, 0x0020A080, 
0xC0A06060, 0x00000000, 0x90808080, 0xA0C00000, 0x000060A0, 0x00006060, 0x00020A00, 0x00020000, 
0x00000606, 0x00000066, 0xC2A50000, 0x00A0A090, 0x00030354, 0x0B020000, 0x00000004, 0x00000A00, 
0x00000002, 0x06000000, 0x09000000, 0x06080302, 0x00080A0A, 0x00000000, 0x00000000, 0x00000600, 
0x00000400, 0x00000068, 0xC0C20000, 0x00A4A180, 0x0C0C01C2, 0x0006000C, 0x00000000, 0x00000000, 
0x00000000, 0x0C0C0060, 0x00000000, 0x00008472, 0x00000202, 0x00000040, 0x00000000, 0x00005000, 
0x0000A2A0, 0x00000086, 0x00000000, 0x00000000, 0x0C0C0300, 0x60000102, 0xC000A0A0, 0x00606060, 
0x00800000, 0x00000000, 0x0000C0A0, 0x40800608, 0x00000007, 0x01006060, 0x00000000, 0x00000000, 
0x00000000, 0x00000086, 0x62880000, 0x0040A040, 0xC0C464A8, 0x0A8000C0, 0x00000000, 0x06060600, 
0x00000006, 0xC6C03000, 0x8B0B0000, 0x8688B882, 0x004CACCA, 0x00000020, 0x00000000, 0x00000000, 
0x0000A400, 0x00000054, 0x06020000, 0x000C0000, 0x00000000, 0xA40A0008, 0x0C000008, 0x20C09106, 
0x40202000, 0x00000400, 0x00000000, 0x50A00000, 0x00000000, 0x00000000, 0x00000A00, 0x00000000, 
0x00000606, 0x00000068, 0x02060000, 0x00080000, 0x0C0A0706, 0xC00B000C, 0x000060A0, 0x2020C000, 
0x00000020, 0x040C0000, 0x60606060, 0x40600808, 0x00001848, 0x00004010, 0x00000000, 0x00000000, 
0x00000600, 0x00000046, 0x00200000, 0x00C0C000, 0x0C0C0422, 0x7026020C, 0xC02000B0, 0x00000080, 
0x00000000, 0x08080000, 0x00000000, 0x00000604, 0x0000020A, 0x00000000, 0x00004000, 0x00000000, 
0x00000000, 0x00000026, 0x80700000, 0x00000020, 0x0C0C0000, 0x60000000, 0x000070B0, 0x00000000, 
0x00000000, 0x000B0000, 0x00000000, 0x00000007, 0x00000080, 0x00000000, 0x0000C000, 0x00000000, 
0x00004000, 0x00000082, 0x00400000, 0x20400000, 0x70C00050, 0x0920C000, 0x08000000, 0x0809090C, 
0x00000B09, 0x0000C0C0, 0x07040304, 0x08075090, 0x00000057, 0x00004220, 0x00000000, 0x00002000, 
0x00000020, 0x00000048, 0xC0A00000, 0x00C00040, 0x00000080, 0x00800000, 0x800040C0, 0x0C0C2284, 
0x00000C03, 0x00000000, 0x02000000, 0x07070000, 0x00008000, 0x00000000, 0x0020A000, 0x00200000, 
0x00000090, 0x00000044, 0x86980000, 0x804CC022, 0x00000088, 0x66480000, 0x4CC00088, 0x0206482C, 
0x66000602, 0x00000000, 0x02000004, 0x02020000, 0x00000002, 0x00000200, 0x0022AA00, 0x00220000, 
0x00006060, 0x00000028, 0x00060000, 0x0B0A0000, 0x00000607, 0xA0000C00, 0x40C03010, 0x1080C0B0, 
0xC0802030, 0x0000060C, 0x20000000, 0x80700808, 0x00000000, 0x00000804, 0x00000000, 0x00000000, 
0x00000007, 0x00000066, 0x80B00000, 0x00404080, 0x000000C0, 0x0B000000, 0x0A0A020C, 0x02020C0B, 
0x08020402, 0x00000020, 0x08060606, 0x0402A070, 0x00000000, 0x00000010, 0x00000000, 0x00000000, 
0x0000A0A0, 0x00000086, 0xA9A30400, 0x6000C0C1, 0x00006080, 0x09000000, 0x0000080B, 0x00000400, 
0x00000000, 0x20C00000, 0x00000000, 0x0000A080, 0x00006000, 0x00006060, 0x00000000, 0x00000000, 
0x00000040, 0x00000008, 0x90A00000, 0x00000000, 0x00000090, 0x00000000, 0x00000000, 0x00000200, 
0x00000000, 0x60602060, 0x00000000, 0x0C047040, 0x00000002, 0x00004400, 0x00000000, 0x00000000, 
0x00000060, 0x00000068, 0xC0700000, 0x000020C0, 0x0A080609, 0x00020008, 0x00000000, 0x00000000, 
0x00000000, 0x08640000, 0x00000000, 0x0000060A, 0x00000108, 0x00006000, 0x00000000, 0x00000000, 
0x00000000, 0x00000060, 0xC2A80000, 0xAA00C8BC, 0x06080C9C, 0x00000800, 0x00000000, 0x00000000, 
0x00000000, 0xA8A00008, 0x00000000, 0x00206B40, 0x00000624, 0x00000120, 0x00000000, 0x00000000, 
0x0000A000, 0x00000066, 0x75630000, 0x09000570, 0x022C2824, 0x20000C00, 0x20000000, 0xA0902090, 
0x0000A070, 0x40000208, 0x90200000, 0x70902628, 0x00008096, 0x00000704, 0x00000000, 0x00000000, 
0x00006000, 0x00000086, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 0x00000000, 0x0C0C8A70, 
0x000A0A08, 0x00000000, 0x57404040, 0xC0A00000, 0x00000030, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x6C8A0000, 0x60BC0020, 0x00000085, 0x60840006, 0xC0C00080, 0x00004080, 
0x60000000, 0x00000006, 0x00000000, 0x00000201, 0x00000402, 0x00000200, 0x0020A000, 0x00200000, 
0x00006860, 0x00000066, 0x00000000, 0x00000000, 0x0000B0B0, 0x00000000, 0x00000000, 0x0580B000, 
0x00000080, 0x00000000, 0xC0A00000, 0xA0A0A0A0, 0x00B0C8C0, 0x00090002, 0x00000000, 0x0000C000, 
0x00000000, 0x00000026, 0x0C0A0000, 0x0B000C06, 0x0000000A, 0x80000300, 0x000000B0, 0x00000000, 
0x00000000, 0x0A0A0000, 0x00000000, 0x00000000, 0x7070A000, 0x00000000, 0x00000000, 0x00009000, 
0x00000000, 0x00000066, 0xAB0A0000, 0x000020C0, 0x0000000B, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x20000008, 0x40000000, 0x05050707, 0x0A0A0000, 0x00000C0B, 0x00000000, 0x00000C00, 
0x00000000, 0x00000066, 0x00200000, 0x00000000, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00202000, 0x2000000C, 0x00004000, 0x00000000, 0x00006000, 
0x00000000, 0x00000046, 0x060A0000, 0x08000608, 0x0000000A, 0xA0000000, 0xC00060C0, 0x000060A0, 
0x00000000, 0x08080808, 0x800000A0, 0x00400C0C, 0x00000088, 0x00000000, 0x00000000, 0x00000000, 
0x00000202, 0x00000046, 0x22CC0000, 0x02900000, 0x000020CC, 0x00C00080, 0x00000000, 0x00000000, 
0x00000000, 0x08080868, 0x00000000, 0x00002C0A, 0x00004428, 0x00002200, 0x00000000, 0x00000000, 
0x00005500, 0x00000066, 0x2C990000, 0x8A006C0C, 0x000000A4, 0x00001200, 0x00000000, 0x00000000, 
0x00000000, 0x86808080, 0x00000000, 0x0000C5A0, 0x00000085, 0x00003000, 0x00000000, 0x00000700, 
0x0000101A, 0x00000026, 0x00000000, 0x00000000, 0x00200000, 0x84000000, 0x00A60C08, 0x0084A200, 
0xC6A00000, 0x00000000, 0x4040B000, 0x46470000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000063, 0xC0800000, 0x0B0008A0, 0x00000081, 0x00000700, 0x00000000, 0x00000000, 
0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00004040, 0x00000064, 0x00000000, 0x00000000, 0x00004040, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000040, 0x00000000, 0x20404020, 0x8C000000, 0x0000A085, 0x00000000, 0x00000300, 
0x00000000, 0x00000076, 0x2AC80000, 0xC0006012, 0x000000C2, 0x00006000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x0000C0C0, 0x00000020, 0x00000000, 0x00000400, 0x00000000, 
0x00000A00, 0x00000066, 0xA0A00000, 0x00000080, 0x00202040, 0x00000000, 0x00000040, 0x0A040100, 
0x0000010C, 0x40000000, 0x05030000, 0x4A484000, 0x00003078, 0x00000000, 0x00004000, 0x00000000, 
0x0000A000, 0x00000046, 0x2C820000, 0x0094080C, 0x00008080, 0x00C00090, 0x80000000, 0x00000000, 
0x00000000, 0x42400000, 0x00000000, 0x00000000, 0x00000000, 0x00040000, 0x00000000, 0x00000800, 
0x00006202, 0x00000068, 0x080B0000, 0xC6000400, 0x000707CB, 0x00000402, 0x00000000, 0x00000000, 
0x00000000, 0x00000104, 0x00000000, 0x00000C0C, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 
0x00000004, 0x00000024, 0x0C000000, 0x00000C00, 0x00200000, 0x60000000, 0x00C08060, 0x00606000, 
0xC0A00000, 0x00000000, 0x40400000, 0x40400000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000016, 0x0C003000, 0x00000C0C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000400, 0x00000000, 0x00000000, 0x00007000, 0x00004000, 
0x00000002, 0x00000043, 0x00000000, 0x00000000, 0x00000000, 0xB0000000, 0xC08060C0, 0x000060C0, 
0x00000000, 0x00000000, 0x000000A0, 0x00000000, 0x000C0300, 0x00000000, 0x00000000, 0x00008900, 
0x00000000, 0x00000042, 0x00000000, 0x00200000, 0x00000000, 0xC0100000, 0xC00A00C0, 0x00000AC0, 
0x0C080000, 0x00000000, 0x04140000, 0x04040000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x0C008040, 0x00C0B08C, 
0x00006060, 0x00000000, 0x80808082, 0xA0C00000, 0x000061A0, 0x00006160, 0x00000000, 0x00000000, 
0x00000001, 0x00000046, 0x09080000, 0x65008009, 0x00000002, 0xA0000000, 0x00C060C0, 0x00006000, 
0xC0500000, 0x06050000, 0x20000000, 0x20200200, 0x00000606, 0x00000000, 0x00000200, 0x00000000, 
0x00000A00, 0x00000086, 0x60A00000, 0x40002080, 0x40000080, 0x0C000000, 0x0A06060A, 0x02070C0C, 
0x09020806, 0x40404040, 0x06060606, 0x0A0AA0C0, 0x00000624, 0x0000A406, 0x00000000, 0x00000000, 
0x00002020, 0x00000086, 0x01000000, 0x00000000, 0x00000000, 0x20000000, 0x00000000, 0x70A06040, 
0x00000090, 0x00000000, 0x60000014, 0xC0400000, 0x07000000, 0x00000A0B, 0x00000000, 0x00000000, 
0x00000000, 0x00000046, 0x01080000, 0x00000000, 0x00000008, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000004, 0x00000004, 0x02080802, 0x08B09000, 0x00000A0C, 0x00000000, 0x00000000, 
0x00000003, 0x00000086, 0x00000000, 0x00000000, 0x00000000, 0x66000000, 0x00000C2C, 0xC0A06080, 
0x0000C0A0, 0x00000000, 0xC0C00000, 0x44866000, 0x000080A0, 0x00000000, 0x00000000, 0x00000900, 
0x00000000, 0x00000060, 0x20200000, 0x00000020, 0x00000020, 0x00000000, 0x00000000, 0x22000000, 
0x00004202, 0x60000000, 0x60080000, 0x60608060, 0x00008080, 0x00000000, 0x00000000, 0x00000000, 
0x00002000, 0x00000006, 0x00020000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x30000000, 
0x00000030, 0x00000002, 0x60000002, 0x01220201, 0x08001040, 0x00000200, 0x00000000, 0x00000000, 
0x00000004, 0x00000032, 0x00000000, 0x00000000, 0x00000000, 0x3A000000, 0xAA000090, 0x02184ABC, 
0x09001A02, 0x00000000, 0x02000404, 0x02020000, 0x00000002, 0x00000200, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0xC87A0000, 0x004280C8, 0x00000246, 0x00020002, 0x00000000, 0x00000000, 
0x00000000, 0x28600000, 0x00000000, 0x00000400, 0x00000706, 0x00007000, 0x00000000, 0x00000000, 
0x00002A80, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0xB0000000, 0xA0001000, 0x2796B2C0, 
0x0000803C, 0x00000000, 0x40004040, 0x6C870000, 0x00000020, 0x00002000, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0xCBCA0000, 0x40484A24, 0x200022C4, 0x00600000, 0x00000000, 0x00000000, 
0x00000000, 0x66606060, 0x00000000, 0x0002A6A0, 0x00006046, 0x00004040, 0x00000000, 0x00000800, 
0x0000606A, 0x00000006, 0x00000000, 0x0C000200, 0x00000000, 0x00000100, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00A00080, 0x00000000, 0x00000000, 
0x00000000, 0x00000022, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 0x00602010, 0x1080A000, 
0xCA600020, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000084, 0x86980000, 0x064CAC42, 0xC0C060B8, 0x068800C0, 0x0C0C0008, 0x00000406, 
0x06000000, 0xC0C00000, 0x00000000, 0x0000A080, 0x00408C80, 0x00000000, 0x00020A00, 0x00028600, 
0x00008606, 0x00000064, 0x00000000, 0x00000000, 0x03000000, 0x80000000, 0xB040A0C0, 0x000000A0, 
0x00002000, 0x00080000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00000300, 0x00000066, 0xA0800000, 0x4000A020, 0x080C0A21, 0x00000C0A, 0x00000000, 0x00000000, 
0x00000000, 0x00006060, 0x00000000, 0x00002000, 0x00000000, 0x00006080, 0x00002000, 0x00008000, 
0x000000C0, 0x00000066, 0x0B4C0000, 0x060A0A0A, 0x0202024C, 0x00080201, 0x00000000, 0x20000010, 
0x00004000, 0x86060608, 0x90100000, 0xA080CA8A, 0x0000A6C8, 0x00000404, 0x00000000, 0x00000000, 
0x00004808, 0x00000066, 0x0C0A0000, 0x000A0A08, 0x00000005, 0x00000000, 0x00000000, 0x00002000, 
0x00000000, 0x00000000, 0x20000000, 0x00000100, 0x00803000, 0x20000001, 0x00000000, 0x00000000, 
0x00004A0A, 0x00000066, 0x00000000, 0x00000000, 0x00000000, 0x88000000, 0x50001680, 0x1A1C480A, 
0x080A0A12, 0x00000000, 0x06060606, 0x070A0000, 0x00000604, 0x00000406, 0x00000000, 0x00002000, 
0x00000000, 0x00000046, 0xAA0C0000, 0x0BA20A22, 0x0202020C, 0x60A20200, 0xA00000A0, 0x00000060, 
0x00000000, 0x06060908, 0x00000000, 0x00000A06, 0x00000604, 0x00000404, 0x00004000, 0x00000000, 
0x00006828, 0x00000066, 0xC0A00000, 0xA000C060, 0x000000A0, 0x00008000, 0x00000000, 0x0B080200, 
0x0000080C, 0xA0A00000, 0x00000000, 0x00206040, 0x00000020, 0x00000050, 0x00000000, 0x00007000, 
0x000000A0, 0xC0C0B046, 0x200480C0, 0x0C000500, 0x00000007, 0x00000700, 0x00000040, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00000605, 0x00002000, 0x00000020, 0x00004000, 0x00000000, 
0x00002020, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0x04000000, 0x04C80C8C, 0x00020200, 
0xC0800000, 0x00000000, 0x00000000, 0x20420000, 0x00000000, 0x00030000, 0x00300000, 0x00100000, 
0x00000000, 0x00000062, 0x26400000, 0xA0008022, 0x20202080, 0x00008000, 0x00000208, 0x00000000, 
0x30300000, 0x00004040, 0x00000000, 0x00007060, 0x00006040, 0x00004060, 0x00000C00, 0x00000000, 
0x00000000, 0x00000066, 0xC0800000, 0x004080C0, 0x00000000, 0x0A000000, 0x0A0C080C, 0x00000400, 
0x08000000, 0x20600000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
0x00002020, 0x00000026, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 0x00A01060, 0x1C24B404, 
0xC0500C02, 0x00000000, 0x2C090000, 0x89840000, 0x00000209, 0x00000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000062, 0xC0A00000, 0xA000C060, 0x000000A0, 0x00000000, 0x000A0000, 0x00000000, 
0x0C0A0000, 0xA0A00080, 0x00000000, 0x00246040, 0x00000020, 0x00000020, 0x00000000, 0x00000000, 
0x000000A0, 0x00000086, 0x8CC90000, 0xC600AC0C, 0x105050C0, 0x00006020, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x0000C4C0, 0x00000404, 0x00000020, 0x00000000, 0x00000000, 
0x00000042, 0x04010086, 0x00000104, 0x00000000, 0x00000000, 0x69000000, 0x0A40083B, 0xB0606493, 
0x4000C0A0, 0x00000000, 0xB0C00000, 0x60806000, 0x000080A0, 0x40000000, 0x00000000, 0x00000000, 
0x00000000, 0x00000082, 0x00200000, 0x00000000, 0x00000020, 0x0C000000, 0x0A080000, 0x02080C0C, 
0x0B000802, 0x00000000, 0x06000404, 0x0A0AA0C0, 0x00000082, 0x00004200, 0x00000000, 0x00000000, 
0x00000000, 0x00000066, 0xC2640000, 0x0A00C0C0, 0x060C0A28, 0x00000C00, 0x00000000, 0x00000000, 
0x00000000, 0x0060000A, 0x00000000, 0x0000080A, 0x00000000, 0x0000B800, 0x00000000, 0x00000000, 
0x00000000, 0x00000026, 0x00020000, 0x00000000, 0x00000002, 0x04000002, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00020200, 0x00520504, 0x60600000, 0x00000000, 0x00008000, 
0x00000000, 0x00000044, 0x02290000, 0x00770000, 0x0020222C, 0x00CC0088, 0x00000000, 0x00000000, 
0x00000000, 0x00000000, 0x00000000, 0x00006823, 0x00000055, 0x00002200, 0x00000000, 0x00000000, 
0x00000400, 0x00000004, 0x00000000, 0x00000700, 0x00000000, 0x08000000, 0x000C0008, 0x00000200, 
0x0C070000, 0x00000000, 0x02000000, 0x00000000, 0x00000000, 0xB0000080, 0x00000000, 0x00000000, 
0x00000090, 0x00000064, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0C00000B, 0x80400005, 
0x000000C0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000080, 0x00000000, 
0x00000000, 0x00000066, 0x00000000, 0x00000000, 0x00000000, 0xA0000000, 0x00004020, 0x0C2AA080, 
0x040C6060, 0x00000000, 0x80808484, 0xA0C00000, 0x006060A0, 0x00006060, 0x00000000, 0x00006000, 
0x00000000, 0x00000086, 0x22880000, 0x40002000, 0xC0844488, 0x0A020068, 0x00000000, 0x00000600, 
0x00000000, 0x46404040, 0x02000000, 0x0608A8C2, 0x0008092A, 0x0000A000, 0x00000000, 0x00000700, 
0x00002420, 0x00000060, 0xA0C00000, 0x60A0A020, 0x2C2020C0, 0x00802000, 0x00000000, 0x00000000, 
0x00000000, 0x60AC6080, 0x00000000, 0x0000A0A0, 0x00006040, 0x00064060, 0x00000000, 0x00008000, 
0x00008080, 0x00000026, 0x0C040000, 0x0004080C, 0x00000000, 0x60000000, 0x60000000, 0x408090A0, 
0x0000A020, 0x02000000, 0x30000010, 0x20300000, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 
0x00000202, 0x00000026, 0x200C0000, 0x0C000420, 0x0400000C, 0x00000200, 0x00002020, 0x00000000, 
0x00000000, 0x00000600, 0x00000000, 0x00000200, 0x00000000, 0x00000000, 0x0000C000, 0x00000000, 
0x00004044, 0x00000046, 0x60400000, 0x00000000, 0x00000040, 0x60000000, 0x00004090, 0x0C074007, 
0x00000C08, 0x00000000, 0x0C080000, 0x02040000, 0x0000020A, 0x00000000, 0x0000A000, 0x00000000, 
0x00000000, 0x00000044, 0x66A40000, 0x008C0082, 0x00708084, 0x06780090, 0x0C000009, 0x0000040A, 
0x00000000, 0x70040000, 0x00000000, 0x00008000, 0x00000090, 0x00000000, 0x00000A00, 0x00000000, 
0x00006606, 0x00000066, 0x00000000, 0x00000000, 0x00000000, 0xA4000000, 0xA4A482CC, 0x00004000, 
0x00000000, 0x00000000, 0x40000003, 0x00000000, 0x00000060, 0x00000000, 0x00000000, 0x00000800, 
0x00000000, 0x00000024, 0x00000000, 0x000A0000, 0x00000000, 0x80080000, 0x0AC00000, 0x0080A005, 
0xC0800000, 0x00000000, 0x20000000, 0x70700000, 0x00000060, 0x00000000, 0x00000A00, 0x00000000, 
0x00000000, 0x00000042, 0xC0800000, 0x00C00020, 0x00000050, 0x8A800000, 0xC40000C0, 0x00064C9C, 
0x00000200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00006000, 0x00000000, 
0x00007060, 0x00000044, 0x62880000, 0x60CCC020, 0x00000888, 0x600C000A, 0xC8C000A0, 0x00004068, 
0xA0000000, 0x04040000, 0x00000000, 0x60000400, 0x00000466, 0x00000000, 0x0010A000, 0x00100000, 
0x00006660, 0x00000046, 0xCACA0000, 0xC000C048, 0x206062C4, 0x0000B000, 0x00000004, 0x00200000, 
0x00000000, 0x04000060, 0x00000000, 0x0000A060, 0x00002320, 0x00002020, 0x00000400, 0x00000000, 
0x00000A80, 0x00000016, 0x12080000, 0x00000010, 0x00040408, 0x0A020008, 0x00000000, 0x00001900, 
0x10100006, 0x06000000, 0x02000000, 0x06080802, 0x0008A80C, 0x00000000, 0x00000000, 0x00000000, 
0x00001400, 0x00000002, 0x00000000, 0x00000000, 0xC0000000, 0x00000000, 0x000C0000, 0x00000000, 
0x0C000000, 0x00C00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00008000, 
0x00002000, 0x00000061, 0x02000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0xC0400080, 
0x0000C060, 0x00000000, 0xC0900000, 0x80600000, 0x000020A0, 0x02000008, 0x00000000, 0x00000600, 
0x0000000B, 0xC0C0C0C0, 0xC6CCC6C0, 0xC0C0C1C3, 0xC0C0C0C0, 0x0B0B0B0B, 0x0BCC0B0B, 0x0B0B0B0B, 
0x0B0B0B0B, 0x9A9A9A9A, 0xABCCAB9A, 0x9A9A9A9A, 0x9A9A8A9A, 0x8C8C8B80, 0xA7CCAC9C, 0x80808193, 
0x80808080, 0x73737374, 0x97CC9773, 0x73737485, 0x73737373, 0xC1C0C000, 0xBCCCC8C4, 0x1B2C5C8C, 
0x00000000, 0xC4C0A070, 0x9CCCCAC8, 0x7B7C7C8C, 0x70707070, 0x51515151, 0x86CC8651, 0x51515263, 
0x51515151, 0xCCCCBC00, 0xB7CCCCCC, 0x879594A4, 0x4747B0B0, 0x46464666, 0x89CC8946, 0x46465657, 
0x46464646, 0xCCCC9C4A, 0x8CCCCCCC, 0x4A4B5C6C, 0x4A4A4A4A, 0x4C0C0C00, 0xC8CCCCAC, 0x5181B2C5, 
0x01030000, 0x99794909, 0xBCCCBAB9, 0x0B1C4C8C, 0x0909090A, 0xBCCCCB90, 0xA8CCCCCC, 0x98989796, 
0x90909392, 0xCAB5B080, 0xA7CCCCCB, 0x80808194, 0x80808080, 0x7C7C7B70, 0xC9CC9C7C, 0x85B5C5C7, 
0x70707170, 0xB0A0A070, 0xCCCCC6B0, 0xCCCCCCCC, 0xC0C07071, 0xAC8C6A05, 0x68CCBCAC, 0x05154546, 
0x05051505, 0x07050300, 0x8BCC8B49, 0x03050749, 0x00000000, 0x8A5A2A09, 0xCCCCBCAC, 0x7CACBCCC, 
0x09090809, 0x29272360, 0x7CCC7C3B, 0x2C2C3C4C, 0x29202020, 0xC4C2B150, 0xC6CCCAC8, 0x507091B3, 
0x50505050, 0x40201000, 0xAACCA670, 0x00224479, 0x20303020, 0xBABABABA, 0xCACABABA, 0xCACACACA, 
0xBCBCBABA, 0x60404040, 0xC0C0B0A0, 0xC0C0C0C0, 0x4C4C4040, 0xCBCAC600, 0x67ACBCCC, 0x00101134, 
0x70600000, 0xA6A19000, 0xABCCAC9B, 0x0054688A, 0x00000000, 0xCBCCCC73, 0x97CCCBBB, 0x63746575, 
0x63636363, 0xCC8C5B50, 0xBCCCCCCC, 0x516679AA, 0x50505050, 0xC5CAC500, 0xA6CCC9C6, 0xA3A4A3A3, 
0x03030000, 0xC2C2C242, 0xCCCCCCC7, 0x32436497, 0x32323232, 0xBCCCCC30, 0x34598CAC, 0x00000112, 
0x00011010, 0xC8C7C707, 0xAACCCCCB, 0x07174899, 0x37370707, 0xCCCCCC00, 0x69BCBCCC, 0x00111236, 
0x11213001, 0xC8C7C570, 0xCCCCCCCA, 0xC2C3B5CB, 0x70707070, 0xC8C7B900, 0x7CCCCAB9, 0x0C5C5C5C, 
0x00020000, 0xA9B9B8A0, 0xCCCCBBBA, 0xB4C9CBCC, 0x30306060, 0x9C6C6B60, 0x9CCCCCCC, 0x686A6B7B, 
0x6A6B6160, 0xCCCCCC00, 0x77BBBBCB, 0x22223253, 0x07074151, 0xC7C4C2C0, 0x9CACBCBB, 0x10426589, 
0x00000808, 0xCBCCBB0C, 0xBACBCBCB, 0x033465A8, 0x05063604, 0x63235306, 0xBCCCB7A3, 0xA8ACBCBC, 
0x73030303, 0xACACACA7, 0xC7C8CABC, 0xB7B7B7C7, 0xA7A7A7A7, 0x9C9C6805, 0xCCCCCCAC, 0x1B8BBBCB, 
0x05050505, 0xA794410C, 0x9ACCBABB, 0x01132649, 0x01010101, 0x88481708, 0xCCCCCCAA, 0x0C1C3C6C, 
0x07070607, 0x9B985505, 0xCCCCCCBB, 0x0C4C7C9C, 0x05050505, 0x9B9B9B77, 0xCCCC9C8C, 0xC7CBCCCC, 
0x77070707, 0xCCCCBB00, 0xA9CCCCCC, 0xA3A5A7A8, 0x82841020, 0xC8C8C808, 0x88C8C8C8, 0x484A4A59, 
0x1C0C1919, 0xC7C4C1A0, 0xBCCCCCCB, 0xA0A3A6AC, 0xA1A0A0A0, 0xCCCCCB06, 0xB9CCCCCC, 0x396999A8, 
0x41410301, 0x95716000, 0x6CCCBCA9, 0x21426568, 0x00000000, 0x9CCCBC00, 0xB8CC9B7C, 0xA4C3B2B4, 
0x95940000, 0xC4C2B000, 0xC8CCC8C5, 0x30527596, 0x05061675, 0x4C4C4B40, 0xAA8C6C4C, 0xC7C8C8C9, 
0x46A04040, 0xB8949060, 0xCBCCCAC9, 0xCACACBCB, 0x50707050, 0x68666460, 0xCCCC9C6B, 0xC2C5C8CA, 
0x60666660, 0xB7CBB7A3, 0xCBCCBBA9, 0xC3C7CCCB, 0xC3B3A3A3, 0x05020000, 0x7CBB6723, 0xCCCCAC8C, 
0x50200010, 0x88686868, 0xBBC9B8B8, 0xCCCCAC8C, 0x68686868, 0xC8C8B808, 0x9BCCCAC8, 0x998B8B7B, 
0x2808C8C8, 0x4080B000, 0x765C2610, 0xCBCBA7A5, 0x10008CAC, 0xBCCCCC07, 0x2C6C6BAB, 0x47270819, 
0x0C2C77B7, 0x280B0B15, 0xB7CCB986, 0x02022375, 0x02020202, 0xC7986B66, 0x9BCCAC99, 0x66C7C8AA, 
0xCCACC6C6, 0x7C4B2900, 0xC9CCCCAC, 0x00225497, 0x00000000, 0xCBC7C500, 0x8CCCBCBC, 0x2043174B, 
0x10300000, 0x5B1C0C00, 0xC1C3C6A9, 0x003060A0, 0x00000000, 0x67130000, 0xCCCCBCAB, 0x967C6B8A, 
0x00000500, 0xCCCAA986, 0xC8CCCCCC, 0x83A9C9C7, 0xC3C3C3C3, 0xC6824140, 0xCCCCCBC8, 0xC6CACCCC, 
0xA0404040, 0xC2C2C203, 0x8CCCC8C3, 0x7B6C6C6C, 0x13120202, 0xCAA57060, 0x9BCCBCBC, 0x6062657A, 
0x60606060, 0xAC9C7B00, 0xCACCCCBC, 0x7A89A9BA, 0x85665070, 0x05020206, 0xCCCC6B08, 0x99BCBCCC, 
0x01320707, 0x9B7A5909, 0xCACCCCBC, 0xB9C9C9C9, 0x29190919, 0x6783A200, 0xACCC8C4C, 0x70514387, 
0x06070000, 0xCCCCBB00, 0xBCCCCCCC, 0x394A6B9C, 0x36480000, 0x97777776, 0xBACCCCC9, 0x76B6C7B8, 
0x76767676, 0xC0C0B060, 0x95CAB5B0, 0x6090C1A2, 0x6C6C6060, 0xC8C7C600, 0x96CCCBCA, 0x6C6B6773, 
0x40400010, 0xB4A6C580, 0xCACBC7C4, 0x8CCCCBCB, 0x868080A0, 0x5A473400, 0xCCCC9C6B, 0xB7C9CBCC, 
0x10201001, 0x94541400, 0xBCCCC9C6, 0x1C5C8C7C, 0x03010000, 0xB4A56650, 0xCACBB694, 0x5C8C9CCB, 
0xC7C95050, 0x855A5950, 0xA8CCC8C4, 0x55546385, 0x50505050, 0x7682A000, 0x8CCC9B98, 0x4636285B, 
0x0020BBB7, 0x11205000, 0x373C1702, 0xC9854133, 0x0000CCCC, 0x47261402, 0xCCBB8A78, 0xCCCCCCCC, 
0x02010000, 0x15030200, 0xCBCBA957, 0x7CBCCBCB, 0x08070626, 0x94756340, 0xCBCAB7A5, 0x9CACBCCC, 
0x50565050, 0x74616060, 0xCCCCBB88, 0x60B1C3C7, 0x60606060, 0xBBBCBC09, 0x73C4C5B8, 0x03439373, 
0x03030303, 0x04020000, 0xCCBC6B28, 0xC2C5C8CA, 0xB3B01020, 0x91411300, 0xCBCBC6A2, 0xBCCCCCCC, 
0x06060000, 0x58657575, 0x8CCC8C5C, 0x5CAC9C7C, 0x55555555, 0x42424268, 0xC5A47352, 0xCCCCCBC8, 
0x62625466, 0xB2B2A296, 0xCBCAC7C4, 0x9C9CBBCC, 0x94939495, 0xBBAB7500, 0x8CCCCCCC, 0x0013365B, 
0x77761000, 0x2C5C7C06, 0xC8CC7B2C, 0xC3B3B4B5, 0x0C1BC3C3, 0x48253301, 0xCCCC9B6A, 0xCCCCCCCC, 
0x84640404, 0xB9BABA88, 0xBBCCC9C8, 0x5C6C8C9C, 0x3C3C3939, 0x897C7C05, 0xC8CCAA98, 0xB5C5C5C6, 
0x85750505, 0x090C0906, 0x996C0B0A, 0xC6C6C6B7, 0x06063616, 0xC7B9B700, 0x376C89A7, 0x70300114, 
0xC0C00000, 0x6B3C2C40, 0xC5CBCAAB, 0x204071B2, 0x26242023, 0xC5C4C404, 0x6CBCBCC8, 0x142C1C3C, 
0x24240404, 0xC9A94C06, 0xCCCCCCCA, 0xC6C6C7C9, 0x06065676, 0x67539376, 0xC7CCCC9C, 0x3976A3C5, 
0x23232526, 0xCA884840, 0xC7CCCBCA, 0x48587593, 0x47484040, 0x5A4C3C20, 0xCCCCAB7A, 0xC8CBCBCC, 
0x27217084, 0x9C9C6C00, 0xCCCCAB8C, 0xCCCCCCCC, 0x40800407, 0xACACABA0, 0xA7CC8B8C, 0xB8A6A4B4, 
0xA0C00004, 0xCBCBC724, 0xBCCCCCCC, 0xC4CA9B6C, 0x74242424, 0xC9C7B620, 0xCCCCCCCB, 0xC18A4B7C, 
0x20A02423, 0x54010000, 0x6CCCBAA8, 0x0C8C5C3C, 0x08590000, 0x8C6C4C0B, 0xC8CBBCAC, 0x029393A5, 
0x07070000, 0x07090C05, 0xACCCBC59, 0x0C6C9C9C, 0x05050505, 0x4C2C2C40, 0xCACCCC8C, 0xA0C1C3C6, 
0x20202020, 0xC7CAB500, 0xBCCCC8C5, 0x6B7C8C9C, 0x00700050, 0xB7CAC900, 0x67CCB8A4, 0x09AA8663, 
0xC0C00001, 0xC8C9C600, 0xCCCCBAC9, 0xBCCCCCCC, 0x11000B1A, 0xCBCCCBC4, 0x5C8CACBC, 0x040B0C2B, 
0x0404C4C4, 0x24444400, 0xBCCCAB67, 0x098CACAC, 0x40700000, 0xC7977760, 0xCCCCCAC8, 0xC1C3C5CA, 
0x60606060, 0x59170500, 0xCCCCBCAB, 0xC4B7A8AB, 0x00000000, 0xABB6B200, 0x8BCCAC9C, 0x70615356, 
0x00100000, 0x3160C000, 0xA2A06113, 0xCCA99795, 0x6C4C60A0, 0x00040970, 0x07040100, 0x40230405, 
0x00204C6C, 0x88882600, 0x93966788, 0x00274491, 0xCCCC0000, 0x2050B00C, 0xB0CC8A5C, 0xC0C0C0B0, 
0x000040B0, 0x73737303, 0x65885533, 0x0A263344, 0xCCCC0303, 0xC6C9BCA0, 0xBCCCC8C5, 0x8CACABBB, 
0x5C5C5B5B, 0x1030700C, 0x205C2000, 0xC0C0C070, 0xC0C00000, 0xC0C09000, 0xA8C8C4C0, 0x0CBCAA99, 
0x0790B008, 0x1B1B3BC0, 0xCBCC8B4B, 0xBCCBBACB, 0x0307605B, 0xC6885C03, 0x68CCC9C8, 0x0CAA6737, 
0x76970507, 0xC2C4C950, 0x75AAC7C4, 0x59C98A57, 0x9C9CC050, 0x04040404, 0xCCCC6804, 0x74A5C6C8, 
0x04049B8A, 0x33265300, 0xA5BA8551, 0xCCC9B5A2, 0xA400ACCC, 0x4A85C000, 0xB7CC7826, 0x85BBB8B4, 
0x0000C0C0, 0xB2A5BB00, 0x88C6C5C3, 0x4C3C3C4A, 0xCCCC0400, 0x8C7C4CB0, 0xC9CCCBAC, 0x436483A6, 
0x8AB9B889, 0x8B9BA500, 0xBBCCCCBB, 0xCA894779, 0xC0804070, 0x8866CB02, 0xB7CCBCAB, 0x6CA9A6A4, 
0xC2C20202, 0xAA8A7700, 0x6BCCC9C6, 0xCAA7754A, 0xC0C00000, 0x4A0B0802, 0xCCCCAA99, 0x7C9CCCCC, 
0xCBCA020B, 0x19396400, 0x6CCC6A09, 0xC9CB9C6C, 0x8C0C0000, 0xCCCCCCA5, 0x988C9CBC, 0xC5C5C5B6, 
0x0505CCCC, 0xCCCCCBC0, 0x76BCBCCC, 0x16131133, 0x1010171B, 0x4B4A6603, 0x6BCC8947, 0x5A38263A, 
0xC3C30A03, 0xA1929500, 0xC8C6A490, 0x0C7C9BB9, 0xB0B00C0C, 0x00000000, 0x60100000, 0xC0C0C0C0, 
0x00700000, 0x4A5AA800, 0x8CAC6B3B, 0x695C5C5C, 0xC7C90730, 0x275BB704, 0x6CCC6815, 0x34251638, 
0x08040404, 0x9A7A5A3A, 0xC8CCC8B8, 0x9AAABCC8, 0x03080ABA, 0xBC6C2B20, 0xBCCC9C6C, 0x253C5C9C, 
0x20202620, 0xBCCCCC70, 0x769C8C9C, 0x40405163, 0xB0B04049, 0x01060800, 0xCC6C0703, 0xCCCCCCCC, 
0x00600003, 0x4949C900, 0xCBAC7B59, 0xC6C7C8C9, 0x06760000, 0x50200000, 0xB8C77321, 0xCCCCCBB9, 
0x08070497, 0x9B8A6A70, 0x76CC8865, 0x1A152143, 0x10101010, 0x3968B410, 0x66CC7A2A, 0x14122133, 
0xC0C01010, 0x98B89700, 0x9CCC8A78, 0xCBCCCCBC, 0xB5B07670, 0x48494540, 0x87CC8A49, 0xC7895665, 
0xC4C34044, 0xBCBC5C04, 0xCCCCCCCC, 0x54CBCCCC, 0xA4040C04, 0x88553470, 0x7CCCBC9B, 0x282B3C5C, 
0x20202726, 0x79380609, 0xABCCAC9B, 0x989A9B9B, 0x80800000, 0x4779CA62, 0x8BCC7725, 0xCCAB6A4A, 
0x3404589A, 0x6C6C7C00, 0xC9CC9C7B, 0xC8C8C8C7, 0x52070CAC, 0x23212000, 0x1B1A1715, 0x2C2C2C1C, 
0xC0800C0C, 0x6AB96827, 0x7ACC8C4C, 0xB1A49887, 0x20202020, 0xC7C6B400, 0x8BCCCAC8, 0x0B1A2A4B, 
0x14158080, 0xC6C6C600, 0x96CCC6B6, 0x20324366, 0x40306080, 0xCCCBBB65, 0xCCCCBCAC, 0xC5CBBCAC, 
0xC5656C6B, 0xCCCCAC96, 0xACCCCAC9, 0x8C9C9CAC, 0x0626764C, 0xC1C1C1C1, 0x396C6893, 0x71473B39, 
0x314181B1, 0x61215101, 0xC6CCC6B1, 0x01B1C2C3, 0x090B0101, 0x9CACAC90, 0xABCCACAC, 0x8596A8AA, 
0x20212521, 0x9CAC9C00, 0xC9CCCCAC, 0xC0C8C7C6, 0xA2C70050, 0xC4C08000, 0x6CCCCCC8, 0xB0B3764C, 
0x06090000, 0x6B4A1900, 0xCCCCCCAC, 0x6078ABBB, 0x60646060, 0x9C7C3C04, 0xCCCCCCBC, 0xB4A5B6C8, 
0x946A04A4, 0xBAAA9A0A, 0xC9CCC9CA, 0xA9C9C9C9, 0x00721606, 0x4B8CCB03, 0xAACC7C2B, 0xCBCCCAB9, 
0x830A0303, 0xACCCCB00, 0xA8CCAC9C, 0x70605194, 0x7B787370, 0x9C9CCC60, 0xA98CBCAC, 0x667797C7, 
0xCBC56364, 0x92C09060, 0xC6C4C2A4, 0x6CCCCAC8, 0x606060B0, 0x86592B00, 0xACCCC8C5, 0xAC7C5C8B, 
0x8C9C2000, 0x9BB5C070, 0x98CC9C7C, 0x2C4C78B4, 0x20202020, 0xCBCBCB00, 0xACCCCCCB, 0x9B9BAC9C, 
0x5B3B0B6B, 0x3A294700, 0x86CCAA69, 0x55645455, 0x03000020, 0x0C0A0A00, 0xACCC6C0C, 0xAB8C7C8C, 
0x49480606, 0x0B0B0702, 0x7C3C4B2B, 0xC5B9BCBC, 0x08080252, 0xB2B4B900, 0xA5C5B3A1, 0x9CAA98A6, 
0x0200CCCC, 0xC0B08000, 0x95C2B0C0, 0x5C7C8B89, 0x00000000, 0x3C3C3C33, 0xB7CC7C3C, 0x334364A5, 
0x333A3333, 0xCBBB9AC0, 0x81C9C9CA, 0x22212040, 0x30202425, 0x9C7CBB09, 0xC9CCCBBB, 0x29394989, 
0x50202151, 0xCACCCB00, 0xB6CCCCCB, 0x5A453173, 0x20800000, 0x7C4C2C00, 0xC3C6CAAB, 0x60B0C0C0, 
0x65850100, 0x3366CC00, 0x30704011, 0x59270512, 0x00000000, 0x3346BA00, 0xB8BC5815, 0xC0C0C0C4, 
0x60600000, 0xCCCCCCA0, 0x88CCCCAC, 0xC0874655, 0x30304076, 0xCABCAB07, 0xCBCCCCCB, 0xAC8A88A9, 
0x07077787, 0xAC9B4903, 0xAACCCCCC, 0x90613377, 0x03030303, 0xCB6B0C00, 0xCCCCCCCB, 0x3C9CACBC, 
0x06070004, 0x89ACBC10, 0xC6CB8787, 0xC0B0A0B3, 0xC0C01010, 0x93814000, 0xCCCCB8A5, 0xC0C5C8CA, 
0x45350505, 0xCCCCBB00, 0x9ACCCCCC, 0x76788889, 0x90870000, 0xC8C8A704, 0xBCCCC9C8, 0xBCACACBC, 
0xBCC81608, 0x290A0900, 0x8ABC8B5A, 0xC0C2B4A8, 0x85400000, 0x7996C402, 0x9CCCAC8A, 0xCCAC9987, 
0x070232C2, 0xA1500000, 0x6CCC8751, 0x0C0B1B3B, 0x00000C0C, 0xCAC8A400, 0xBCCCCCCC, 0x909B98A6, 
0xB0C00000, 0x0C0B0B00, 0x67CC6C0C, 0xB5A38263, 0xC3B01400, 0xB6A65606, 0xA9CCA996, 0xB6764697, 
0x0C8C0606, 0x3868A808, 0x98C88848, 0x08184868, 0x08180C0C, 0x4987C500, 0xCC9C5C6A, 0x95BACCCC, 
0x09090959, 0xBC8C6C00, 0xC6CCCBCC, 0x8AA8BAC8, 0xB0800A0A, 0x88967300, 0xCCCCAB8A, 0x93A6C8CB, 
0x00400A05, 0x0C0C0A00, 0xBCCC7C2C, 0xCCCCCCCC, 0x58290000, 0x4A3B2B08, 0xBCAC8B5A, 0xCCCCCCCB, 
0x88882C2C, 0x78787878, 0x78787878, 0x7C7C7A78, 0xC8C87878, 0x64849410, 0xCBCC8644, 0x3C7CBBCB, 
0x4C7C4010, 0x10214200, 0xCCCB8640, 0xCCCCCCCC, 0x02060000, 0x0A0B0B09, 0x7C7C3A09, 0xCBCCAC8C, 
0x69080808, 0x60A06020, 0xC5C78340, 0x8CBAC7C5, 0x2322252A, 0x65281B05, 0xC7CCC894, 0xC3C3C4C5, 
0x83030303, 0xCACCC970, 0x9CCCCAC9, 0x7C7C7C8C, 0xCB7B7070, 0x5C2C0C0C, 0xC5CAAC7C, 0x70A0C0C1, 
0x50700808, 0x888A4730, 0xCCCCCBCB, 0x2C699BCB, 0x35633307, 0x92A1C1AB, 0x58AC5875, 0x91819174, 
0x61816171, 0x97743900, 0xCCCCCBBA, 0x077AACCC, 0x00000030, 0x97866300, 0xCCCCCAB9, 0x8CACBCCC, 
0x00000002, 0x6757B300, 0xCCCC9977, 0xCACCCCCC, 0x50005050, 0xC0C0A000, 0xC2C1C0C0, 0x6C9CA9B5, 
0x00000408, 0x9B8C4C00, 0x64C9896A, 0x00001132, 0x06000000, 0xA9A98909, 0xC9CCC9B9, 0xC9C9C9C9, 
0x80600000, 0xC9B9B939, 0xBACCBAB9, 0x899BACAA, 0x3B0B3607, 0xBB9A4700, 0xCCCCCCCC, 0xCCCCCCCC, 
0x43930000, 0xACBCBCC0, 0x95BA9CAC, 0x93929192, 0x50504141, 0x5C4C4C41, 0xC6CCCC9C, 0x496A9BC8, 
0x41415151, 0x4C2C0C08, 0xCACC7B2C, 0xC9CAC9C8, 0x72710202, 0xC7C7A797, 0xA9CCB9C7, 0xC7B7C7A8, 
0xA78C9797, 0x5080C000, 0xCBC8C480, 0xBCCCCCCC, 0x00003050, 0x9C8C7C03, 0xC6C9BCAC, 0x03837374, 
0x03030303, 0xC4B1B000, 0xCCCCCAC9, 0x0089BACB, 0x90900000, 0xB8C4C000, 0xA9CCCBC9, 0x204588A9, 
0x90802000, 0xC7C5C100, 0x4C8C9CBA, 0x0024373A, 0x00073740, 0x8A9A5A00, 0x6CCCAC9B, 0x08091A3C, 
0x07080000, 0xCBC9C800, 0x9CCCBBBB, 0x4A4C4C6C, 0x0000C0C1, 0x67575707, 0xCCCCAC89, 0xCCCCCCCC, 
0x67072C2B, 0xCCCCAB00, 0xC7CCCCCC, 0x064391C3, 0xC0C00000, 0xAB8B66A0, 0xACCCCC9C, 0x80C2C5AA, 
0xA0C08060, 0xBBAB9BCC, 0xCBCBCBCB, 0xABBBCBCB, 0x9B9B9B9B, 0x9C9B9BCC, 0xCCBCAC9C, 0xCBCBCCCC, 
0xABCBCBCB, 0x9A9999CC, 0xBC9C9C9B, 0xBBCCCCCC, 0x99999A9A, 0xBCAC9CBC, 0xBBCCCCCC, 0x9C9B9B9B, 
0x9B9C9C9C, 0xC9C9C9CC, 0xC9C9C9C9, 0x9C9C9CAB, 0x999B9B9C, 0xCCBBB8CB, 0xCBBBBCBC, 0xC0C1C4C7, 
0xC0C0C0B0, 0xCBCABACB, 0xCCCCCCCC, 0xACBCCCCC, 0x999A9BAC, 0xA99999CC, 0xCBB9A9A9, 0xCCCCCCCB, 
0x9BACCBCB, 0xCCCCBBAC, 0xABCBCBCC, 0x0B1B4B8B, 0x0B0B0B0B, 0xB9B9B9CC, 0xBCBBBBBB, 0xCCCCCCBC, 
0xBACCCCCC, 0xC9B999CB, 0xC9C9C9C9, 0xCCC9C9C9, 0xABCCCCCC, 0xC9A9798C, 0xBCCCCCCB, 0x0A0A3C7C, 
0x09090909, 0xBCCCCCAC, 0x17497BAC, 0x00010204, 0x00000000, 0xCCCBB9CC, 0xACBCBCCC, 0xA9AACBBC, 
0xA9A9A9A9, 0xC9B999CC, 0xCCCBCACA, 0xAABCCCBC, 0x99C9B999, 0x0B0A07C4, 0x3A18070A, 0xC8CCCC9C, 
0x123283A5, 0x0C0C0C0C, 0x090A0B0C, 0xC9893909, 0x99C9C9C9, 0x8C8C8CCC, 0x8C8C8C8C, 0xCACACCBC, 
0x8A8C8B8A, 0x9B7B5A38, 0x7C8CAC9C, 0xC7B99