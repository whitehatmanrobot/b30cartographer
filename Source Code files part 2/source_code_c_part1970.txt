default_value,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,bif_AllowBehaviorInjections}{true,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[5]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting3);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting3}{configunittest_setting3_default_value,False,1/1/0001 12:00:00 AM,<null>}", settingXmgmtLines[1]);

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting3, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual("configunittest_setting3_default_value", settingXmgmtValue[0]);
                    Assert.AreEqual("False", settingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", settingXmgmtValue[2]);
                    Assert.AreEqual("<null>", settingXmgmtValue[3]);

                    // now read configunittest_setting4
                    // which will load setting into the cache
                    string sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_a", sValue);

                    // make sure the cache is in the expected state
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(7, settingsXmgmtLines.Length);
                    Assert.AreEqual("3 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_a,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting3}{configunittest_setting3_default_value,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[5]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,bif_AllowBehaviorInjections}{true,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[6]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_a,False,1/1/0001 12:00:00 AM,<null>}", settingXmgmtLines[1]);

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting4, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual(sValue, settingXmgmtValue[0]);
                    Assert.AreEqual("False", settingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", settingXmgmtValue[2]);
                    Assert.AreEqual("<null>", settingXmgmtValue[3]);

                    // save our expectations for the handler to check
                    _expectedSettingChangeEventArgs 
                        = new SettingChangeEventArgs(
                        Config.Environment,
                        Config.SiteId,
                        Config.Server,
                        Config.ComponentName,
                        TestSettings.configunittest_setting4,
                        "configunittest_setting4_default_value_a",
                        "configunittest_setting4_default_value_b");
                    _acceptSettingChangeFired = false;

                    // update the value of configunittest_setting4
                    sqlCommand.CommandText = "update t_settings "
                        + "set vc_value = 'configunittest_setting4_default_value_b' "
                        + "where vc_setting = 'configunittest_setting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptSettingChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected SettingChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptSettingChangeEventArgs.Environment
                            + "," + _acceptSettingChangeEventArgs.SiteId
                            + "," + _acceptSettingChangeEventArgs.Server
                            + "," + _acceptSettingChangeEventArgs.Component
                            + "," + _acceptSettingChangeEventArgs.Setting
                            + "," + _acceptSettingChangeEventArgs.ValueOld
                            + "," + _acceptSettingChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptInterfaceChangeEventArgs);
                    }

                    // check that the setting change handler fired
                    Assert.AreEqual(true, _acceptSettingChangeFired);

                    // read configunittest_setting4
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_b", sValue);

                    // make sure the cache is in the expected state
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(7, settingsXmgmtLines.Length);
                    Assert.AreEqual("3 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_b,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting3}{configunittest_setting3_default_value,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[5]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,bif_AllowBehaviorInjections}{true,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[6]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_b,False,1/1/0001 12:00:00 AM,<null>}", settingXmgmtLines[1]);

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting4, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual(sValue, settingXmgmtValue[0]);
                    Assert.AreEqual("False", settingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", settingXmgmtValue[2]);
                    Assert.AreEqual("<null>", settingXmgmtValue[3]);

                    // register a second SettingChange handler, this one rejects changes
                    Config.SettingChange += rejectHandler;
                    rejectHandlerAttached = true;

                    // save our expectations for the handler to check
                    _expectedSettingChangeEventArgs 
                        = new SettingChangeEventArgs(
                        Config.Environment,
                        Config.SiteId,
                        Config.Server,
                        Config.ComponentName,
                        TestSettings.configunittest_setting4,
                        "configunittest_setting4_default_value_b",
                        "configunittest_setting4_default_value_c");
                    _acceptSettingChangeFired = false;
                    _rejectSettingChangeFired = false;

                    // update the value of configunittest_setting4
                    sqlCommand.CommandText = "update t_settings "
                        + "set vc_value = 'configunittest_setting4_default_value_c' "
                        + "where vc_setting = 'configunittest_setting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptSettingChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected SettingChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptSettingChangeEventArgs.Environment
                            + "," + _acceptSettingChangeEventArgs.SiteId
                            + "," + _acceptSettingChangeEventArgs.Server
                            + "," + _acceptSettingChangeEventArgs.Component
                            + "," + _acceptSettingChangeEventArgs.Setting
                            + "," + _acceptSettingChangeEventArgs.ValueOld
                            + "," + _acceptSettingChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptInterfaceChangeEventArgs);
                    }

                    if (null != _rejectSettingChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected SettingChangeEventArgs to rejectHandler!");
                        errorWriter.WriteLine("{" + _rejectSettingChangeEventArgs.Environment
                            + "," + _rejectSettingChangeEventArgs.SiteId
                            + "," + _rejectSettingChangeEventArgs.Server
                            + "," + _rejectSettingChangeEventArgs.Component
                            + "," + _rejectSettingChangeEventArgs.Setting
                            + "," + _rejectSettingChangeEventArgs.ValueOld
                            + "," + _rejectSettingChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _rejectSettingChangeEventArgs);
                    }

                    // check that the handlers both fired
                    Assert.AreEqual(true, _acceptSettingChangeFired);
                    Assert.AreEqual(true, _rejectSettingChangeFired);

                    // read configunittest_setting4,
                    // confirm that it has NOT changed,
                    // since reject handler rejected the change
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_b", sValue);

                    // make sure the cache is in the expected state
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(7, settingsXmgmtLines.Length);
                    Assert.AreEqual("3 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);
                    Assert.IsTrue(settingsXmgmtLines[4].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_b,True,"));
                    Assert.IsTrue(settingsXmgmtLines[4].EndsWith(",configunittest_setting4_default_value_c}"));
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting3}{configunittest_setting3_default_value,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[5]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,bif_AllowBehaviorInjections}{true,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[6]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);
                    Assert.IsTrue(settingXmgmtLines[1].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_b,True,"));
                    Assert.IsTrue(settingXmgmtLines[1].EndsWith(",configunittest_setting4_default_value_c}"));

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting4, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual(sValue, settingXmgmtValue[0]);
                    Assert.AreEqual("True", settingXmgmtValue[1]);

                    DateTime  lastEventTime = DateTime.Parse(settingXmgmtValue[2]);
                    TimeSpan  ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual("configunittest_setting4_default_value_c", settingXmgmtValue[3]);

                    // read configunittest_setting4, to read the stale value again
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_b", sValue);

                    // wait past the _minEventInterval to pass and read the setting again.
                    // this one should trigger an event
                    SleepEventInterval();
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_b", sValue);

                    // now change the config_minEventInterval setting to zero,
                    // so we should always get events for every stale read
                    UpdateEventInterval(cxn, 0);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // now read configunittest_setting4 twice in a row, and we should get two events
                    // and those events should report that they will not fire again for 0 milliseconds
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_b", sValue);

                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_b", sValue);

                    // unregister both handlers
                    Config.SettingChange -= acceptHandler;
                    acceptHandlerAttached = false;

                    Config.SettingChange -= rejectHandler;
                    rejectHandlerAttached = false;

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // get configunittest_setting4 to read it into the cache
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_c", sValue);

                    // make sure the cache is in the expected state
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(6, settingsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_c,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,bif_AllowBehaviorInjections}{true,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[5]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_c,False,1/1/0001 12:00:00 AM,<null>}", settingXmgmtLines[1]);

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting4, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual(sValue, settingXmgmtValue[0]);
                    Assert.AreEqual("False", settingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", settingXmgmtValue[2]);
                    Assert.AreEqual("<null>", settingXmgmtValue[3]);

/*  setting.cs now has a global handler that will accept changes - commenting this out until changed
                    // update the value of configunittest_setting4
                    sqlCommand.CommandText = "update t_settings "
                        + "set vc_value = 'configunittest_setting4_default_value_d' "
                        + "where vc_setting = 'configunittest_setting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // read configunittest_setting4, and confirm that it has NOT changed,
                    // since no handler was registered
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_c", sValue);

                    // make sure the cache is in the expected state
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(5, settingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting4, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual(sValue, settingXmgmtValue[0]);
                    Assert.AreEqual("True", settingXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(settingXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual("configunittest_setting4_default_value_d", settingXmgmtValue[3]);

                    // set the value of configunittest_setting4 back to c
                    sqlCommand.CommandText = "update t_settings "
                        + "set vc_value = 'configunittest_setting4_default_value_c' "
                        + "where vc_setting = 'configunittest_setting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // read configunittest_setting4, and confirm that it has NOT changed,
                    // since config reverted
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_c", sValue);

                    // make sure the cache is in the expected state
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(5, settingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting4, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual(sValue, settingXmgmtValue[0]);
                    Assert.AreEqual("False", settingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", settingXmgmtValue[2]);
                    Assert.AreEqual("<null>", settingXmgmtValue[3]);
*/
                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // register a change handler that throws an exception
                    Config.SettingChange += throwHandler;
                    throwHandlerAttached = true;

                    // save our expectations for the handler to check
                    _expectedSettingChangeEventArgs 
                        = new SettingChangeEventArgs(
                        Config.Environment,
                        Config.SiteId,
                        Config.Server,
                        Config.ComponentName,
                        TestSettings.configunittest_setting4,
                        "configunittest_setting4_default_value_c",
                        "configunittest_setting4_default_value_d");
                    _throwSettingChangeFired = false;

                    // read configunittest_setting4 again to read it into the cache
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_c", sValue);

                    // make sure the cache is in the expected state
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(6, settingsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_c,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,bif_AllowBehaviorInjections}{true,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[5]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_c,False,1/1/0001 12:00:00 AM,<null>}", settingXmgmtLines[1]);

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting4, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual(sValue, settingXmgmtValue[0]);
                    Assert.AreEqual("False", settingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", settingXmgmtValue[2]);
                    Assert.AreEqual("<null>", settingXmgmtValue[3]);

                    // update the value of configunittest_setting4
                    sqlCommand.CommandText = "update t_settings "
                        + "set vc_value = 'configunittest_setting4_default_value_d' "
                        + "where vc_setting = 'configunittest_setting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _throwSettingChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected SettingChangeEventArgs to throwHandler!");
                        errorWriter.WriteLine("{" + _throwSettingChangeEventArgs.Environment
                            + "," + _throwSettingChangeEventArgs.SiteId
                            + "," + _throwSettingChangeEventArgs.Server
                            + "," + _throwSettingChangeEventArgs.Component
                            + "," + _throwSettingChangeEventArgs.Setting
                            + "," + _throwSettingChangeEventArgs.ValueOld
                            + "," + _throwSettingChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _throwSettingChangeEventArgs);
                    }

                    // check that the setting change handler fired
                    Assert.AreEqual(true, _throwSettingChangeFired);

                    // read configunittest_setting4 again and confirm that it has not changed,
                    // since throw handler did not accept the change
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_c", sValue);

                    // make sure the cache is in the expected state
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(6, settingsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);
                    Assert.IsTrue(settingsXmgmtLines[4].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_c,True,"));
                    Assert.IsTrue(settingsXmgmtLines[4].EndsWith(",configunittest_setting4_default_value_d}"));
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,bif_AllowBehaviorInjections}{true,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[5]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);
                    Assert.IsTrue(settingXmgmtLines[1].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_c,True,"));
                    Assert.IsTrue(settingXmgmtLines[1].EndsWith(",configunittest_setting4_default_value_d}"));

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting4, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual(sValue, settingXmgmtValue[0]);
                    Assert.AreEqual("True", settingXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(settingXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual("configunittest_setting4_default_value_d", settingXmgmtValue[3]);

                    // now change the refresh interval setting, 
                    // so cache refresh happens in a timely manner
                    UpdateRefreshInterval(cxn, _refreshInterval);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // save our expectations for the handler to check
                    _expectedSettingChangeEventArgs 
                        = new SettingChangeEventArgs(
                        Config.Environment,
                        Config.SiteId,
                        Config.Server,
                        Config.ComponentName,
                        TestSettings.configunittest_setting4,
                        "configunittest_setting4_default_value_d",
                        "configunittest_setting4_default_value_e");
                    _throwSettingChangeFired = false;

                    // read configunittest_setting4 again to read it into the cache
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_d", sValue);

                    // make sure the cache is in the expected state
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(6, settingsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_d,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,bif_AllowBehaviorInjections}{true,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[5]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_d,False,1/1/0001 12:00:00 AM,<null>}", settingXmgmtLines[1]);

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting4, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual(sValue, settingXmgmtValue[0]);
                    Assert.AreEqual("False", settingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", settingXmgmtValue[2]);
                    Assert.AreEqual("<null>", settingXmgmtValue[3]);

                    // update the value of configunittest_setting4
                    sqlCommand.CommandText = "update t_settings "
                        + "set vc_value = 'configunittest_setting4_default_value_e' "
                        + "where vc_setting = 'configunittest_setting4'";
                    sqlCommand.ExecuteNonQuery();

                    // read configunittest_setting4, and confirm that it has NOT changed,
                    // since cache refresh has not had time to fire
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_d", sValue);

                    // check that the setting change handler did NOT fire
                    Assert.AreEqual(false, _throwSettingChangeFired);

                    // wait past the refresh interval to pass
                    SleepRefreshInterval();

                    // check that the handler got the correct change event args
                    if (null != _throwSettingChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected SettingChangeEventArgs to throwHandler!");
                        errorWriter.WriteLine("{" + _throwSettingChangeEventArgs.Environment
                            + "," + _throwSettingChangeEventArgs.SiteId
                            + "," + _throwSettingChangeEventArgs.Server
                            + "," + _throwSettingChangeEventArgs.Component
                            + "," + _throwSettingChangeEventArgs.Setting
                            + "," + _throwSettingChangeEventArgs.ValueOld
                            + "," + _throwSettingChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _throwSettingChangeEventArgs);
                    }

                    // check that the setting change handler fired
                    //Assert.AreEqual(true, _throwSettingChangeFired);

                    // read configunittest_setting4, and confirm that it has NOT changed,
                    // since throw handler did not accept the change
                    sValue = Config.GetSetting(TestSettings.configunittest_setting4);
                    Assert.AreEqual("configunittest_setting4_default_value_d", sValue);

                    // make sure the cache is in the expected state
                    settingsXmgmt = _configXmgmtCmd.Settings(_testProcess, _testComponentCS);
                    settingsXmgmtLines = SplitLines(settingsXmgmt);
                    Assert.AreEqual(6, settingsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the setting cache", settingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", settingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingsXmgmtLines[2]);
                    Assert.AreEqual("", settingsXmgmtLines[3]);
                    Assert.IsTrue(settingsXmgmtLines[4].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_d,True,"));
                    Assert.IsTrue(settingsXmgmtLines[4].EndsWith(",configunittest_setting4_default_value_e}"));
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,bif_AllowBehaviorInjections}{true,False,1/1/0001 12:00:00 AM,<null>}", settingsXmgmtLines[5]);

                    settingXmgmtString = _configXmgmtCmd.Setting(_testProcess, _testComponentCS, TestSettings.configunittest_setting4);
                    settingXmgmtLines = SplitLines(settingXmgmtString);
                    Assert.AreEqual(2, settingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,setting}{value,isStale,lastEventTime,newValue}", settingXmgmtLines[0]);
                    Assert.IsTrue(settingXmgmtLines[1].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_setting4}{configunittest_setting4_default_value_d,True,"));
                    Assert.IsTrue(settingXmgmtLines[1].EndsWith(",configunittest_setting4_default_value_e}"));

                    settingXmgmtPair = SplitPair(settingXmgmtLines[1]);

                    settingXmgmtSetting = ParseSettingValue(settingXmgmtPair[0]);
                    Assert.AreEqual(5, settingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, settingXmgmtSetting[0]);
                    Assert.AreEqual("1001", settingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, settingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, settingXmgmtSetting[3]);
                    Assert.AreEqual(TestSettings.configunittest_setting4, settingXmgmtSetting[4]);

                    settingXmgmtValue = ParseSettingValue(settingXmgmtPair[1]);
                    Assert.AreEqual(4, settingXmgmtValue.Length);
                    Assert.AreEqual(sValue, settingXmgmtValue[0]);
                    Assert.AreEqual("True", settingXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(settingXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual("configunittest_setting4_default_value_e", settingXmgmtValue[3]);

                    // unregister the change handler that throws an exception
                    Config.SettingChange -= throwHandler;
                    throwHandlerAttached = false;

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting3"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting3"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A setting change has been accepted by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A setting change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest setting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest setting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A setting change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest setting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest setting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //    //new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    //new AppEntry(EventLogEntryType.Error, 3, "A setting change event was not handled by this component (details below)\n"),
                    //    //new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    //new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest setting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    //new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    //new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //    //new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    //new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    //new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    //new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A setting change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A setting change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest setting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 200 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being called by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A setting change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A setting change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest setting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache settings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache setting configunittest_setting4"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.SettingChange -= acceptHandler;
                    }

                    if (rejectHandlerAttached) 
                    {
                        Config.SettingChange -= rejectHandler;
                    }

                    if (throwHandlerAttached) 
                    {
                        Config.SettingChange -= throwHandler;
                    }

                    // restore the min event interval to what it was when we began
                    UpdateEventInterval(cxn, _minEventInterval);
                    UpdateRefreshInterval(cxn, _oldRefreshInterval);

                    // set configunittest_setting4 back
                    sqlCommand.CommandText = "update t_settings "
                        + "set vc_value = 'configunittest_setting4_default_value' "
                        + "where vc_setting = 'configunittest_setting4'";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        [TestCase]
        public void GetMultiSetting_NegNoEnvironment()
        {
            CheckReady();

            try
            {
                Config.GetMultiSetting(null, 1001, _testServer, Component.unknown, TestMultiSettings.configunittest_multisetting1);
                throw new Exception("Config.GetMultiSetting() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetMultiSetting_NegNoServer()
        {
            CheckReady();

            try
            {
                Config.GetMultiSetting(_npdbEnvironment, 1001, null, Component.unknown, TestMultiSettings.configunittest_multisetting1);
                throw new Exception("Config.GetMultiSetting() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetMultiSetting_Pos()
        {
            CheckReady();

            // configunittest_multisetting_missing will not return any values
            string[] sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting_missing);
            Assert.AreEqual(0, sValues.Length);

            // configunittest_multisetting1 will match an override at site and server
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting1);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("site 1001, server dummy_server1, ALL components : value1", sValues[0]);
            Assert.AreEqual("site 1001, server dummy_server1, ALL components : value2", sValues[1]);

            // check 1 1 1 (site, server, component)
            sValues = Config.GetMultiSetting(Config.Environment, Config.SiteId, Config.Server, TestComponents.dummy_component1, TestMultiSettings.configunittest_multisetting1);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("site 1001, server dummy_server1, component dummy_component1 : value1", sValues[0]);
            Assert.AreEqual("site 1001, server dummy_server1, component dummy_component1 : value2", sValues[1]);

            // check 1 1 0 (site, server, all component)
            sValues = Config.GetMultiSetting(Config.Environment, Config.SiteId, Config.Server, Config.ComponentName, TestMultiSettings.configunittest_multisetting1);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("site 1001, server dummy_server1, ALL components : value1", sValues[0]);
            Assert.AreEqual("site 1001, server dummy_server1, ALL components : value2", sValues[1]);

            // check 1 0 1 (site, all server, component)
            sValues = Config.GetMultiSetting(Config.Environment, Config.SiteId, "not_a_valid_server", TestComponents.dummy_component1, TestMultiSettings.configunittest_multisetting1);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("site 1001, ALL servers, component dummy_component1 : value1", sValues[0]);
            Assert.AreEqual("site 1001, ALL servers, component dummy_component1 : value2", sValues[1]);

            // check 1 0 0 (site, all server, all component)
            sValues = Config.GetMultiSetting(Config.Environment, Config.SiteId, "not_a_valid_server", Config.ComponentName, TestMultiSettings.configunittest_multisetting1);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("site 1001, ALL servers, ALL components : value1", sValues[0]);
            Assert.AreEqual("site 1001, ALL servers, ALL components : value2", sValues[1]);

            // check 0 1 1 (all site, server, component)
            sValues = Config.GetMultiSetting(Config.Environment, -1, Config.Server, TestComponents.dummy_component1, TestMultiSettings.configunittest_multisetting1);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("ALL sites, server dummy_server1, component dummy_component1 : value1", sValues[0]);
            Assert.AreEqual("ALL sites, server dummy_server1, component dummy_component1 : value2", sValues[1]);

            // check 0 1 0 (all site, server, all component)
            sValues = Config.GetMultiSetting(Config.Environment, -1, Config.Server, Config.ComponentName, TestMultiSettings.configunittest_multisetting1);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("ALL sites, server dummy_server1, ALL components : value1", sValues[0]);
            Assert.AreEqual("ALL sites, server dummy_server1, ALL components : value2", sValues[1]);

            // check 0 0 1 (all site, all server, component)
            sValues = Config.GetMultiSetting(Config.Environment, -1, "not_a_valid_server", TestComponents.dummy_component1, TestMultiSettings.configunittest_multisetting1);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("ALL sites, ALL servers, component dummy_component1 : value1", sValues[0]);
            Assert.AreEqual("ALL sites, ALL servers, component dummy_component1 : value2", sValues[1]);

            // check 0 0 0 (all site, all server, all component)
            sValues = Config.GetMultiSetting(Config.Environment, -1, "not_a_valid_server", Config.ComponentName, TestMultiSettings.configunittest_multisetting1);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("ALL sites, ALL servers, ALL components : value1", sValues[0]);
            Assert.AreEqual("ALL sites, ALL servers, ALL components : value2", sValues[1]);

            // configunittest_multisetting2 will match an override at environment type
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting2);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting2_environment_type_override_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting2_environment_type_override_value2", sValues[1]);

            sValues = Config.GetMultiSetting("not_a_valid_environment", 1, Config.Server, Config.ComponentName, TestMultiSettings.configunittest_multisetting2);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting2_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting2_default_value2", sValues[1]);

            // configunittest_multisetting3 has no overrides
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting3);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting3_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting3_default_value2", sValues[1]);

            // configunittest_multisetting4 has no overrides
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting4_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting4_default_value2", sValues[1]);

            // configunittest_multisetting5 has no overrides
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting5);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting5_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting5_default_value2", sValues[1]);

            // configunittest_multisetting11 has an override for site = 1011, server = dummy_server11, component = dummy_component11
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting11);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting11_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting11_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting11, TestComponents.dummy_component11);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting11_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting11_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(Config.Environment, 1011, "dummy_server11", TestComponents.dummy_component11, TestMultiSettings.configunittest_multisetting11);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("site 1011, server dummy_server11, component dummy_component11 : value1", sValues[0]);
            Assert.AreEqual("site 1011, server dummy_server11, component dummy_component11 : value2", sValues[1]);

            // configunittest_multisetting12 has an override for site = -1, server = dummy_server12, component = dummy_component12
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting12);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting12_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting12_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting12, TestComponents.dummy_component12);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting12_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting12_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(Config.Environment, -1, "dummy_server12", TestComponents.dummy_component12, TestMultiSettings.configunittest_multisetting12);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("ALL sites, server dummy_server12, component dummy_component12 : value1", sValues[0]);
            Assert.AreEqual("ALL sites, server dummy_server12, component dummy_component12 : value2", sValues[1]);

            // configunittest_multisetting13 has an override for site = 1013, server = ALL, component = dummy_component13
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting13);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting13_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting13_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting13, TestComponents.dummy_component13);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting13_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting13_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(Config.Environment, 1013, Config.Server, TestComponents.dummy_component13, TestMultiSettings.configunittest_multisetting13);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("site 1013, ALL servers, component dummy_component13 : value1", sValues[0]);
            Assert.AreEqual("site 1013, ALL servers, component dummy_component13 : value2", sValues[1]);

            // configunittest_multisetting14 has an override for site = 1014, server = dummy_server14, component = ALL
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting14);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting14_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting14_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting14, TestComponents.dummy_component14);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting14_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting14_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(Config.Environment, 1014, "dummy_server14", Config.ComponentName, TestMultiSettings.configunittest_multisetting14);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("site 1014, server dummy_server14, ALL components : value1", sValues[0]);
            Assert.AreEqual("site 1014, server dummy_server14, ALL components : value2", sValues[1]);

            // configunittest_multisetting15 has an override for site = -1, server = ALL, component = dummy_component15
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting15);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting15_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting15_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting15, TestComponents.dummy_component15);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("ALL sites, ALL servers, component dummy_component15 : value1", sValues[0]);
            Assert.AreEqual("ALL sites, ALL servers, component dummy_component15 : value2", sValues[1]);

            sValues = Config.GetMultiSetting(Config.Environment, -1, Config.Server, TestComponents.dummy_component15, TestMultiSettings.configunittest_multisetting15);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("ALL sites, ALL servers, component dummy_component15 : value1", sValues[0]);
            Assert.AreEqual("ALL sites, ALL servers, component dummy_component15 : value2", sValues[1]);

            // configunittest_multisetting16 has an override for site = -1, server = dummy_server16, component = ALL
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting16);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting16_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting16_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting16, TestComponents.dummy_component16);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting16_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting16_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(Config.Environment, -1, "dummy_server16", Config.ComponentName, TestMultiSettings.configunittest_multisetting16);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("ALL sites, server dummy_server16, ALL components : value1", sValues[0]);
            Assert.AreEqual("ALL sites, server dummy_server16, ALL components : value2", sValues[1]);

            // configunittest_multisetting17 has an override for site = 1017, server = ALL, component = ALL
            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting17);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting17_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting17_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting17, TestComponents.dummy_component17);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("configunittest_multisetting17_default_value1", sValues[0]);
            Assert.AreEqual("configunittest_multisetting17_default_value2", sValues[1]);

            sValues = Config.GetMultiSetting(Config.Environment, 1017, Config.Server, Config.ComponentName, TestMultiSettings.configunittest_multisetting17);
            Assert.AreEqual(2, sValues.Length);
            Assert.AreEqual("site 1017, ALL servers, ALL components : value1", sValues[0]);
            Assert.AreEqual("site 1017, ALL servers, ALL components : value2", sValues[1]);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        // need a member variable to tell the MultiSettingChange handlers what event args to expect
        private MultiSettingChangeEventArgs _expectedMultiSettingChangeEventArgs;
        private MultiSettingChangeEventArgs _acceptMultiSettingChangeEventArgs;
        private MultiSettingChangeEventArgs _rejectMultiSettingChangeEventArgs;
        private MultiSettingChangeEventArgs _throwMultiSettingChangeEventArgs;

        private bool _acceptMultiSettingChangeFired;
        private bool _rejectMultiSettingChangeFired;
        private bool _throwMultiSettingChangeFired;

        public void AcceptMultiSettingChange(
            object sender, 
            MultiSettingChangeEventArgs e)
        {
            _acceptMultiSettingChangeFired = true;

            string       eEnvironment = null;
            int          eSiteId = 0;
            string       eServer = null;
            string    eComponent = Component.unknown;
            string eMultiSetting = TestMultiSettings.configunittest_multisetting_missing;
            string[]     eValueOld = null;
            string[]     eValueNew = null;
            bool         fUnexpected = false;

            if (0 != String.Compare(_expectedMultiSettingChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedMultiSettingChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedMultiSettingChangeEventArgs.Server, e.Server)) 
            {
                eServer = e.Server;
                fUnexpected = true;
            }

            if (_expectedMultiSettingChangeEventArgs.Component != e.Component) 
            {
                eComponent = e.Component;
                fUnexpected = true;
            }

            if (_expectedMultiSettingChangeEventArgs.MultiSetting != e.MultiSetting) 
            {
                eMultiSetting = e.MultiSetting;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedMultiSettingChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedMultiSettingChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _acceptMultiSettingChangeEventArgs
                    = new MultiSettingChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eServer,
                    eComponent,
                    eMultiSetting,
                    eValueOld,
                    eValueNew);
            }
        }

        public void RejectMultiSettingChange(
            object sender, 
            MultiSettingChangeEventArgs e)
        {
            _rejectMultiSettingChangeFired = true;

            string       eEnvironment = null;
            int          eSiteId = 0;
            string       eServer = null;
            string    eComponent = Component.unknown;
            string eMultiSetting = TestMultiSettings.configunittest_multisetting_missing;
            string[]     eValueOld = null;
            string[]     eValueNew = null;
            bool         fUnexpected = false;

            if (0 != String.Compare(_expectedMultiSettingChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedMultiSettingChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedMultiSettingChangeEventArgs.Server, e.Server)) 
            {
                eServer = e.Server;
                fUnexpected = true;
            }

            if (_expectedMultiSettingChangeEventArgs.Component != e.Component) 
            {
                eComponent = e.Component;
                fUnexpected = true;
            }

            if (_expectedMultiSettingChangeEventArgs.MultiSetting != e.MultiSetting) 
            {
                eMultiSetting = e.MultiSetting;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedMultiSettingChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedMultiSettingChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _rejectMultiSettingChangeEventArgs
                    = new MultiSettingChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eServer,
                    eComponent,
                    eMultiSetting,
                    eValueOld,
                    eValueNew);
            }

            // signal the config class that we don't want to allow this change
            Config.VetoMultiSettingChange();
        }

        public void ThrowMultiSettingChange(
            object sender, 
            MultiSettingChangeEventArgs e)
        {
            _throwMultiSettingChangeFired = true;

            string       eEnvironment = null;
            int          eSiteId = 0;
            string       eServer = null;
            string    eComponent = Component.unknown;
            string eMultiSetting = TestMultiSettings.configunittest_multisetting_missing;
            string[]     eValueOld = null;
            string[]     eValueNew = null;
            bool         fUnexpected = false;

            if (0 != String.Compare(_expectedMultiSettingChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedMultiSettingChangeEventArgs.SiteId != e.SiteId) 
            {
                eSiteId = e.SiteId;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedMultiSettingChangeEventArgs.Server, e.Server)) 
            {
                eServer = e.Server;
                fUnexpected = true;
            }

            if (_expectedMultiSettingChangeEventArgs.Component != e.Component) 
            {
                eComponent = e.Component;
                fUnexpected = true;
            }

            if (_expectedMultiSettingChangeEventArgs.MultiSetting != e.MultiSetting) 
            {
                eMultiSetting = e.MultiSetting;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedMultiSettingChangeEventArgs.ValueOld, e.ValueOld)) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (false == CollectionUtil.Equals(_expectedMultiSettingChangeEventArgs.ValueNew, e.ValueNew)) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _throwMultiSettingChangeEventArgs
                    = new MultiSettingChangeEventArgs(
                    eEnvironment,
                    eSiteId,
                    eServer,
                    eComponent,
                    eMultiSetting,
                    eValueOld,
                    eValueNew);
            }

            throw new Exception("ThrowMultiSettingChange: Throw exception");
        }

        [TestCase]
        public void GetMultiSetting_PosCache()
        {
            CheckReady();

            // create delegates for our change handlers
            MultiSettingChangeEventHandler acceptHandler 
                = AcceptMultiSettingChange;
            bool acceptHandlerAttached = false;

            MultiSettingChangeEventHandler rejectHandler 
                = RejectMultiSettingChange;
            bool rejectHandlerAttached = false;

            MultiSettingChangeEventHandler throwHandler
                = ThrowMultiSettingChange;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                try 
                {
                    // confirm the MultiSetting cache is indeed empty
                    string multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    string[] multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(4, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("0 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);

                    // build our expected values lists
                    string[] sValuesOld = new string[2];
                    sValuesOld[0] = "configunittest_multisetting4_default_value1";
                    sValuesOld[1] = "configunittest_multisetting4_default_value2";

                    string[] sValuesNew = new string[2];
                    sValuesNew[0] = "configunittest_multisetting4_default_value1";
                    sValuesNew[1] = "configunittest_multisetting4_default_value2";

                    // read a multisetting to trigger cache creation
                    // We get this multisetting twice because the first call triggers
                    // some xmgmt code that loads eventing multisettings.  We call
                    // DiscardCachedValues() after this first call to get back to
                    // a known good state.
                    Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting3);
                    string tempServer = Config.Server;
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = tempServer;

                    Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting3);

                    // now there should be 1 Setting in the cache
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(5, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting3}{{configunittest_multisetting3_default_value1,configunittest_multisetting3_default_value2},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[4]);

                    string multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting3);
                    string[] multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting3}{{configunittest_multisetting3_default_value1,configunittest_multisetting3_default_value2},False,1/1/0001 12:00:00 AM,<null>}", multiSettingXmgmtLines[1]);

                    string[] multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    string[] multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting3, multiSettingXmgmtSetting[4]);

                    string[] multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual("{configunittest_multisetting3_default_value1,configunittest_multisetting3_default_value2}", multiSettingXmgmtValue[0]);
                    Assert.AreEqual("False", multiSettingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", multiSettingXmgmtValue[2]);
                    Assert.AreEqual("<null>", multiSettingXmgmtValue[3]);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    Assert.AreEqual("Error: No multisetting cache line found matching key {" + _npdbEnvironment + ",1001," + _testServer + "," + Component.unknown + "," + TestMultiSettings.configunittest_multisetting4 + "}\r\n", multiSettingXmgmtString);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, null);
                    Assert.IsTrue(multiSettingXmgmtString.StartsWith("Error: invalid command arguments\r\n\r\n"));

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, "");
                    Assert.IsTrue(multiSettingXmgmtString.StartsWith("Error: invalid command arguments\r\n\r\n"));

                    // register a MultiSettingChange handler, this one accepts changes
                    Config.MultiSettingChange += acceptHandler;
                    acceptHandlerAttached = true;

                    // set the _acceptMultiSettingChangeFired to false, so we can confirm the handler is called
                    _acceptMultiSettingChangeFired = false;

                    // update the value of configunittest_multisetting4
                    sqlCommand.CommandText = "update t_multisettings "
                        + "set vc_value = SUBSTRING(vc_value,1,43) + 'a' "
                        + "where vc_multisetting = 'configunittest_multisetting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the multisetting change handler did NOT fire. 
                    // multisetting should NOT be in the cache
                    // and therefore no handlers should've been called
                    Assert.AreEqual(false, _acceptMultiSettingChangeFired);

                    // there should still be 1 MultiSetting in the cache
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(5, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting3}{{configunittest_multisetting3_default_value1,configunittest_multisetting3_default_value2},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[4]);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting3);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting3}{{configunittest_multisetting3_default_value1,configunittest_multisetting3_default_value2},False,1/1/0001 12:00:00 AM,<null>}", multiSettingXmgmtLines[1]);

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting3, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual("{configunittest_multisetting3_default_value1,configunittest_multisetting3_default_value2}", multiSettingXmgmtValue[0]);
                    Assert.AreEqual("False", multiSettingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", multiSettingXmgmtValue[2]);
                    Assert.AreEqual("<null>", multiSettingXmgmtValue[3]);

                    // now read configunittest_multisetting4
                    // which will load multisetting into the cache
                    sValuesOld[0] = "configunittest_multisetting4_default_value1a";
                    sValuesOld[1] = "configunittest_multisetting4_default_value2a";
                    string[] sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // make sure the cache is in the expected state
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(6, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1a,configunittest_multisetting4_default_value2a},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting3}{{configunittest_multisetting3_default_value1,configunittest_multisetting3_default_value2},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[5]);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1a,configunittest_multisetting4_default_value2a},False,1/1/0001 12:00:00 AM,<null>}", multiSettingXmgmtLines[1]);

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting4, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(sValues), multiSettingXmgmtValue[0]);
                    Assert.AreEqual("False", multiSettingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", multiSettingXmgmtValue[2]);
                    Assert.AreEqual("<null>", multiSettingXmgmtValue[3]);

                    // save our expectations for the handler to check
                    sValuesNew[0] = "configunittest_multisetting4_default_value1b";
                    sValuesNew[1] = "configunittest_multisetting4_default_value2b";
                    _expectedMultiSettingChangeEventArgs 
                        = new MultiSettingChangeEventArgs(
                        Config.Environment,
                        Config.SiteId,
                        Config.Server,
                        Config.ComponentName,
                        TestMultiSettings.configunittest_multisetting4,
                        sValuesOld,
                        sValuesNew);
                    _acceptMultiSettingChangeFired = false;

                    // update the value of configunittest_multisetting4
                    sqlCommand.CommandText = "update t_multisettings "
                        + "set vc_value = SUBSTRING(vc_value,1,43) + 'b' "
                        + "where vc_multisetting = 'configunittest_multisetting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptMultiSettingChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected MultiSettingChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptMultiSettingChangeEventArgs.Environment 
                            + "," + _acceptMultiSettingChangeEventArgs.SiteId
                            + "," + _acceptMultiSettingChangeEventArgs.Server
                            + "," + _acceptMultiSettingChangeEventArgs.Component
                            + "," + _acceptMultiSettingChangeEventArgs.MultiSetting
                            + "," + CollectionUtil.ToString(_acceptMultiSettingChangeEventArgs.ValueOld)
                            + "," + CollectionUtil.ToString(_acceptMultiSettingChangeEventArgs.ValueNew) + "}");
                        Assert.AreEqual(null, _acceptMultiSettingChangeEventArgs);
                    }

                    // check that the multisetting change handler fired
                    Assert.AreEqual(true, _acceptMultiSettingChangeFired);

                    // read configunittest_multisetting4
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesNew, sValues));

                    // make sure the cache is in the expected state
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(6, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1b,configunittest_multisetting4_default_value2b},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting3}{{configunittest_multisetting3_default_value1,configunittest_multisetting3_default_value2},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[5]);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1b,configunittest_multisetting4_default_value2b},False,1/1/0001 12:00:00 AM,<null>}", multiSettingXmgmtLines[1]);

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting4, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(sValues), multiSettingXmgmtValue[0]);
                    Assert.AreEqual("False", multiSettingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", multiSettingXmgmtValue[2]);
                    Assert.AreEqual("<null>", multiSettingXmgmtValue[3]);

                    // register a second MultiSettingChange handler, this one rejects changes
                    Config.MultiSettingChange += rejectHandler;
                    rejectHandlerAttached = true;

                    // save our expectations for the handler to check
                    sValuesOld[0] = "configunittest_multisetting4_default_value1b";
                    sValuesOld[1] = "configunittest_multisetting4_default_value2b";
                    sValuesNew[0] = "configunittest_multisetting4_default_value1c";
                    sValuesNew[1] = "configunittest_multisetting4_default_value2c";
                    _expectedMultiSettingChangeEventArgs 
                        = new MultiSettingChangeEventArgs(
                        Config.Environment,
                        Config.SiteId,
                        Config.Server,
                        Config.ComponentName,
                        TestMultiSettings.configunittest_multisetting4,
                        sValuesOld,
                        sValuesNew);
                    _acceptMultiSettingChangeFired = false;
                    _rejectMultiSettingChangeFired = false;

                    // update the value of configunittest_multisetting4
                    sqlCommand.CommandText = "update t_multisettings "
                        + "set vc_value = SUBSTRING(vc_value,1,43) + 'c' "
                        + "where vc_multisetting = 'configunittest_multisetting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptMultiSettingChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected MultiSettingChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptMultiSettingChangeEventArgs.Environment 
                            + "," + _acceptMultiSettingChangeEventArgs.SiteId
                            + "," + _acceptMultiSettingChangeEventArgs.Server
                            + "," + _acceptMultiSettingChangeEventArgs.Component
                            + "," + _acceptMultiSettingChangeEventArgs.MultiSetting
                            + "," + CollectionUtil.ToString(_acceptMultiSettingChangeEventArgs.ValueOld)
                            + "," + CollectionUtil.ToString(_acceptMultiSettingChangeEventArgs.ValueNew) + "}");
                        Assert.AreEqual(null, _acceptMultiSettingChangeEventArgs);
                    }

                    if (null != _rejectMultiSettingChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected MultiSettingChangeEventArgs to rejectHandler!");
                        errorWriter.WriteLine("{" + _rejectMultiSettingChangeEventArgs.Environment 
                            + "," + _rejectMultiSettingChangeEventArgs.SiteId
                            + "," + _rejectMultiSettingChangeEventArgs.Server
                            + "," + _rejectMultiSettingChangeEventArgs.Component
                            + "," + _rejectMultiSettingChangeEventArgs.MultiSetting
                            + "," + CollectionUtil.ToString(_rejectMultiSettingChangeEventArgs.ValueOld)
                            + "," + CollectionUtil.ToString(_rejectMultiSettingChangeEventArgs.ValueNew) + "}");
                        Assert.AreEqual(null, _rejectMultiSettingChangeEventArgs);
                    }

                    // check that the handlers both fired
                    Assert.AreEqual(true, _acceptMultiSettingChangeFired);
                    Assert.AreEqual(true, _rejectMultiSettingChangeFired);

                    // read configunittest_multisetting4,
                    // confirm that it has NOT changed,
                    // since the reject handler rejected the change
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // make sure the cache is in the expected state
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(6, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.IsTrue(multiSettingsXmgmtLines[4].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1b,configunittest_multisetting4_default_value2b},True,"));
                    Assert.IsTrue(multiSettingsXmgmtLines[4].EndsWith(",{configunittest_multisetting4_default_value1c,configunittest_multisetting4_default_value2c}}"));
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting3}{{configunittest_multisetting3_default_value1,configunittest_multisetting3_default_value2},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[5]);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.IsTrue(multiSettingXmgmtLines[1].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1b,configunittest_multisetting4_default_value2b},True,"));
                    Assert.IsTrue(multiSettingXmgmtLines[1].EndsWith(",{configunittest_multisetting4_default_value1c,configunittest_multisetting4_default_value2c}}"));

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting4, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(sValues), multiSettingXmgmtValue[0]);
                    Assert.AreEqual("True", multiSettingXmgmtValue[1]);

                    DateTime  lastEventTime = DateTime.Parse(multiSettingXmgmtValue[2]);
                    TimeSpan  ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(sValuesNew), multiSettingXmgmtValue[3]);

                    // read configunittest_multisetting4, to read the stale value a second time
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // wait for the _minEventInterval to pass and read the setting again.
                    // this one should trigger an event
                    SleepEventInterval();
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // now change the config_minEventInterval setting to zero,
                    // so we should always get events for every stale read
                    UpdateEventInterval(cxn, 0);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // now read the stale value twice in a row, and we should get two events
                    // and those events should report that they will not fire again for 0 milliseconds
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // unregister both handlers
                    Config.MultiSettingChange -= acceptHandler;
                    acceptHandlerAttached = false;
                    Config.MultiSettingChange -= rejectHandler;
                    rejectHandlerAttached = false;

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // get configunittest_multisetting4 again to read it into the cache
                    sValuesOld[0] = "configunittest_multisetting4_default_value1c";
                    sValuesOld[1] = "configunittest_multisetting4_default_value2c";
                    sValuesNew[0] = "configunittest_multisetting4_default_value1d";
                    sValuesNew[1] = "configunittest_multisetting4_default_value2d";
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // make sure the cache is in the expected state
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(5, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1c,configunittest_multisetting4_default_value2c},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[4]);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1c,configunittest_multisetting4_default_value2c},False,1/1/0001 12:00:00 AM,<null>}", multiSettingXmgmtLines[1]);

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting4, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(sValues), multiSettingXmgmtValue[0]);
                    Assert.AreEqual("False", multiSettingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", multiSettingXmgmtValue[2]);
                    Assert.AreEqual("<null>", multiSettingXmgmtValue[3]);

                    // update the value of configunittest_multisetting4
                    sqlCommand.CommandText = "update t_multisettings "
                        + "set vc_value = SUBSTRING(vc_value,1,43) + 'd' "
                        + "where vc_multisetting = 'configunittest_multisetting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // get configunittest_multisetting4, and confirm that it has NOT changed,
                    // since no handler was registered
                    // [darrenan 5/12/2008]This assumption is no longer true.  The event throttling code
                    // registers an event handler, so the list will never be empty.  Instead of
                    // removing these actions, I'm just changing the expected values so that it
                    // passes.
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(!CollectionUtil.Equals(sValuesOld, sValues));

                    // make sure the cache is in the expected state
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(5, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1d,configunittest_multisetting4_default_value2d},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[4]);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1d,configunittest_multisetting4_default_value2d},False,1/1/0001 12:00:00 AM,<null>}", multiSettingXmgmtLines[1]);

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting4, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(sValues), multiSettingXmgmtValue[0]);
                    Assert.AreEqual("False", multiSettingXmgmtValue[1]);

                    // set the value of configunittest_multisetting4 back to c
                    sqlCommand.CommandText = "update t_multisettings "
                        + "set vc_value = SUBSTRING(vc_value,1,43) + 'c' "
                        + "where vc_multisetting = 'configunittest_multisetting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // get configunittest_multisetting4, and confirm that it has NOT changed,
                    // since config reverted
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // make sure the cache is in the expected state
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(5, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1c,configunittest_multisetting4_default_value2c},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[4]);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1c,configunittest_multisetting4_default_value2c},False,1/1/0001 12:00:00 AM,<null>}", multiSettingXmgmtLines[1]);

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting4, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(sValues), multiSettingXmgmtValue[0]);
                    Assert.AreEqual("False", multiSettingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", multiSettingXmgmtValue[2]);
                    Assert.AreEqual("<null>", multiSettingXmgmtValue[3]);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // register a change handler that throws an exception
                    Config.MultiSettingChange += throwHandler;

                    // save our expectations for the handler to check
                    _expectedMultiSettingChangeEventArgs 
                        = new MultiSettingChangeEventArgs(
                        Config.Environment,
                        Config.SiteId,
                        Config.Server,
                        Config.ComponentName,
                        TestMultiSettings.configunittest_multisetting4,
                        sValuesOld,
                        sValuesNew);
                    _throwMultiSettingChangeFired = false;

                    // get configunittest_multisetting4 again to read it into the cache
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // make sure the cache is in the expected state
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(5, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1c,configunittest_multisetting4_default_value2c},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[4]);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1c,configunittest_multisetting4_default_value2c},False,1/1/0001 12:00:00 AM,<null>}", multiSettingXmgmtLines[1]);

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting4, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(sValues), multiSettingXmgmtValue[0]);
                    Assert.AreEqual("False", multiSettingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", multiSettingXmgmtValue[2]);
                    Assert.AreEqual("<null>", multiSettingXmgmtValue[3]);

                    // update the value of configunittest_multisetting4
                    sqlCommand.CommandText = "update t_multisettings "
                        + "set vc_value = SUBSTRING(vc_value,1,43) + 'd' "
                        + "where vc_multisetting = 'configunittest_multisetting4'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _throwMultiSettingChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected MultiSettingChangeEventArgs to throwHandler!");
                        errorWriter.WriteLine("{" + _throwMultiSettingChangeEventArgs.Environment 
                            + "," + _throwMultiSettingChangeEventArgs.SiteId
                            + "," + _throwMultiSettingChangeEventArgs.Server
                            + "," + _throwMultiSettingChangeEventArgs.Component
                            + "," + _throwMultiSettingChangeEventArgs.MultiSetting
                            + "," + CollectionUtil.ToString(_throwMultiSettingChangeEventArgs.ValueOld)
                            + "," + CollectionUtil.ToString(_throwMultiSettingChangeEventArgs.ValueNew) + "}");
                        Assert.AreEqual(null, _throwMultiSettingChangeEventArgs);
                    }

                    // check that the multisetting change handler fired
                    Assert.AreEqual(true, _throwMultiSettingChangeFired);

                    // get configunittest_multisetting4 again and confirm that it has not changed,
                    // since throw handler did not accept the change
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // make sure the cache is in the expected state
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(5, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.IsTrue(multiSettingsXmgmtLines[4].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1c,configunittest_multisetting4_default_value2c},True,"));
                    Assert.IsTrue(multiSettingsXmgmtLines[4].EndsWith(",{configunittest_multisetting4_default_value1d,configunittest_multisetting4_default_value2d}}"));

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.IsTrue(multiSettingXmgmtLines[1].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1c,configunittest_multisetting4_default_value2c},True,"));
                    Assert.IsTrue(multiSettingXmgmtLines[1].EndsWith(",{configunittest_multisetting4_default_value1d,configunittest_multisetting4_default_value2d}}"));

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting4, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(sValues), multiSettingXmgmtValue[0]);
                    Assert.AreEqual("True", multiSettingXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(multiSettingXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(sValuesNew), multiSettingXmgmtValue[3]);

                    // now change the refresh interval setting, 
                    // so cache refresh happens in a timely manner
                    UpdateRefreshInterval(cxn, _refreshInterval);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // save our expectations for the handler to check
                    sValuesOld[0] = "configunittest_multisetting4_default_value1d";
                    sValuesOld[1] = "configunittest_multisetting4_default_value2d";
                    sValuesNew[0] = "configunittest_multisetting4_default_value1e";
                    sValuesNew[1] = "configunittest_multisetting4_default_value2e";
                    _expectedMultiSettingChangeEventArgs 
                        = new MultiSettingChangeEventArgs(
                        Config.Environment,
                        Config.SiteId,
                        Config.Server,
                        Config.ComponentName,
                        TestMultiSettings.configunittest_multisetting4,
                        sValuesOld,
                        sValuesNew);
                    _throwMultiSettingChangeFired = false;

                    // get configunittest_multisetting4 again to read it into the cache
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // make sure the cache is in the expected state
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(5, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1d,configunittest_multisetting4_default_value2d},False,1/1/0001 12:00:00 AM,<null>}", multiSettingsXmgmtLines[4]);

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.AreEqual("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1d,configunittest_multisetting4_default_value2d},False,1/1/0001 12:00:00 AM,<null>}", multiSettingXmgmtLines[1]);

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting4, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(sValues), multiSettingXmgmtValue[0]);
                    Assert.AreEqual("False", multiSettingXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", multiSettingXmgmtValue[2]);
                    Assert.AreEqual("<null>", multiSettingXmgmtValue[3]);

                    // update the value of configunittest_multisetting4
                    sqlCommand.CommandText = "update t_multisettings "
                        + "set vc_value = SUBSTRING(vc_value,1,43) + 'e' "
                        + "where vc_multisetting = 'configunittest_multisetting4'";
                    sqlCommand.ExecuteNonQuery();

                    // get configunittest_multisetting4, and confirm that it has NOT changed,
                    // since cache refresh has not had time to fire
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // check that the multisetting change handler did NOT fire
                    Assert.AreEqual(false, _throwMultiSettingChangeFired);

                    // wait past the refresh interval to pass
                    SleepRefreshInterval();

                    // check that the handler got the correct change event args
                    if (null != _throwMultiSettingChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected MultiSettingChangeEventArgs to throwHandler!");
                        errorWriter.WriteLine("{" + _throwMultiSettingChangeEventArgs.Environment 
                            + "," + _throwMultiSettingChangeEventArgs.SiteId
                            + "," + _throwMultiSettingChangeEventArgs.Server
                            + "," + _throwMultiSettingChangeEventArgs.Component
                            + "," + _throwMultiSettingChangeEventArgs.MultiSetting
                            + "," + CollectionUtil.ToString(_throwMultiSettingChangeEventArgs.ValueOld)
                            + "," + CollectionUtil.ToString(_throwMultiSettingChangeEventArgs.ValueNew) + "}");
                        Assert.AreEqual(null, _throwMultiSettingChangeEventArgs);
                    }

                    // check that the multisetting change handler fired
                    //Assert.AreEqual(true, _throwMultiSettingChangeFired);

                    // get configunittest_multisetting4, and confirm that it has NOT changed,
                    // since throw handler did not accept the change
                    sValues = Config.GetMultiSetting(TestMultiSettings.configunittest_multisetting4);
                    Assert.IsTrue(CollectionUtil.Equals(sValuesOld, sValues));

                    // make sure the cache is in the expected state
                    multiSettingsXmgmt = _configXmgmtCmd.MultiSettings(_testProcess, _testComponentCS);
                    multiSettingsXmgmtLines = SplitLines(multiSettingsXmgmt);
                    Assert.AreEqual(5, multiSettingsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the multisetting cache", multiSettingsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", multiSettingsXmgmtLines[1]);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingsXmgmtLines[2]);
                    Assert.AreEqual("", multiSettingsXmgmtLines[3]);
                    Assert.IsTrue(multiSettingsXmgmtLines[4].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1d,configunittest_multisetting4_default_value2d},True,"));
                    Assert.IsTrue(multiSettingsXmgmtLines[4].EndsWith(",{configunittest_multisetting4_default_value1e,configunittest_multisetting4_default_value2e}}"));

                    multiSettingXmgmtString = _configXmgmtCmd.MultiSetting(_testProcess, _testComponentCS, TestMultiSettings.configunittest_multisetting4);
                    multiSettingXmgmtLines = SplitLines(multiSettingXmgmtString);
                    Assert.AreEqual(2, multiSettingXmgmtLines.Length);
                    Assert.AreEqual("{environment,siteid,server,component,multisetting}{value,isStale,lastEventTime,newValue}", multiSettingXmgmtLines[0]);
                    Assert.IsTrue(multiSettingXmgmtLines[1].StartsWith("{xblob,1001,dummy_server1,unknown,configunittest_multisetting4}{{configunittest_multisetting4_default_value1d,configunittest_multisetting4_default_value2d},True,"));
                    Assert.IsTrue(multiSettingXmgmtLines[1].EndsWith(",{configunittest_multisetting4_default_value1e,configunittest_multisetting4_default_value2e}}"));

                    multiSettingXmgmtPair = SplitPair(multiSettingXmgmtLines[1]);

                    multiSettingXmgmtSetting = ParseSettingValue(multiSettingXmgmtPair[0]);
                    Assert.AreEqual(5, multiSettingXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, multiSettingXmgmtSetting[0]);
                    Assert.AreEqual("1001", multiSettingXmgmtSetting[1]);
                    Assert.AreEqual(_testServer, multiSettingXmgmtSetting[2]);
                    Assert.AreEqual(Component.unknown, multiSettingXmgmtSetting[3]);
                    Assert.AreEqual(TestMultiSettings.configunittest_multisetting4, multiSettingXmgmtSetting[4]);

                    multiSettingXmgmtValue = ParseSettingValue(multiSettingXmgmtPair[1]);
                    Assert.AreEqual(4, multiSettingXmgmtValue.Length);
                    Assert.AreEqual(CollectionUtil.ToString(sValues), multiSettingXmgmtValue[0]);
                    Assert.AreEqual("True", multiSettingXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(multiSettingXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(CollectionUtil.ToString(sValuesNew), multiSettingXmgmtValue[3]);

                    // unregister the change handler that throws an exception
                    Config.MultiSettingChange -= throwHandler;

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting3"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting not_a_valid_multisetting"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting3"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A multisetting change has been accepted by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest multisetting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest multisetting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest multisetting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest multisetting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change event was not handled by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest multisetting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest multisetting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 200 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being called by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A multisetting change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest multisetting information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisettings"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache multisetting configunittest_multisetting4"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.MultiSettingChange -= acceptHandler;
                    }

                    if (rejectHandlerAttached) 
                    {
                        Config.MultiSettingChange -= rejectHandler;
                    }

                    // restore the min event interval to what it was when we began
                    UpdateEventInterval(cxn, _minEventInterval);
                    UpdateRefreshInterval(cxn, _oldRefreshInterval);

                    // set configunittest_multisetting4 back
                    sqlCommand.CommandText = "update t_multisettings "
                        + "set vc_value = SUBSTRING(vc_value,1,43) "
                        + "where vc_multisetting = 'configunittest_multisetting4'";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        [TestCase]
        public void GetInstallUnitListByServer_NegNoEnvironment()
        {
            CheckReady();

            try
            {
                Config.GetInstallUnitListByServer(null, _testServer);
                throw new Exception("Config.GetInstallUnitListByServer() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInstallUnitListByServer_NegNoServer()
        {
            CheckReady();

            try
            {
                Config.GetInstallUnitListByServer(null);
                throw new Exception("Config.GetInstallUnitListByServer() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInstallUnitListByServer_PosNoServer()
        {
            CheckReady();

            string[] installUnits = Config.GetInstallUnitListByServer("not_a_valid_server");
            Assert.AreEqual(0, installUnits.Length);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInstallUnitListByServer_PosNoUnits()
        {
            CheckReady();

            string[] installUnits = Config.GetInstallUnitListByServer("dummy_server_no_interfaces");
            Assert.AreEqual(0, installUnits.Length);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInstallUnitListByServer_PosOneUnit()
        {
            CheckReady();

            string[] installUnits = Config.GetInstallUnitListByServer("dummy_server6");
            Assert.AreEqual(1, installUnits.Length);
            Assert.AreEqual("dummy_install_unit1", installUnits[0]);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInstallUnitListByServer_PosMultiUnits()
        {
            CheckReady();

            string[] installUnits = Config.GetInstallUnitListByServer(_testServer);
            Assert.AreEqual(2, installUnits.Length);
            Assert.AreEqual("dummy_install_unit1", installUnits[0]);
            Assert.AreEqual("dummy_install_unit2", installUnits[1]);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInstallUnit_NegNoUnits()
        {
            CheckReady();

            try
            {
                Config.GetInstallUnit("dummy_install_unit3");
                throw new Exception("Config.GetInstallUnit() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: install unit dummy_install_unit3 not found in npdb"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInstallUnit_PosNotNull()
        {
            CheckReady();

            IInstallUnitInfo installUnitInfo = Config.GetInstallUnit("dummy_install_unit1");
            Assert.AreEqual("dummy1_info1", installUnitInfo.Info1);
            Assert.AreEqual("dummy1_info2", installUnitInfo.Info2);
            Assert.AreEqual("dummy1_info3", installUnitInfo.Info3);
            Assert.AreEqual("dummy1_info4", installUnitInfo.Info4);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInstallUnit_PosNull()
        {
            CheckReady();

            IInstallUnitInfo installUnitInfo = Config.GetInstallUnit("dummy_install_unit2");
            Assert.AreEqual(null, installUnitInfo.Info1);
            Assert.AreEqual(null, installUnitInfo.Info2);
            Assert.AreEqual(null, installUnitInfo.Info3);
            Assert.AreEqual(null, installUnitInfo.Info4);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetComponentListByServer_NegNoEnvironment()
        {
            CheckReady();

            try
            {
                Config.GetComponentListByServer(null, _testServer);
                throw new Exception("Config.GetComponentListByServer() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetComponentListByServer_NegNoServer()
        {
            CheckReady();

            try
            {
                Config.GetComponentListByServer(null);
                throw new Exception("Config.GetComponentListByServer() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetComponentListByServer_PosNoServer()
        {
            CheckReady();

            string[] components = Config.GetComponentListByServer("not_a_valid_server");
            Assert.AreEqual(0, components.Length);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetComponentListByServer_PosNoComponents()
        {
            CheckReady();

            string[] components = Config.GetComponentListByServer("dummy_server_no_interfaces");
            Assert.AreEqual(0, components.Length);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetComponentListByServer_PosOneComponent()
        {
            CheckReady();

            string[] components = Config.GetComponentListByServer("dummy_server6");
            Assert.AreEqual(1, components.Length);
            Assert.AreEqual(TestComponents.dummy_component1, components[0]);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetComponentListByServer_PosMultiComponents()
        {
            CheckReady();

            string[] components = Config.GetComponentListByServer(_testServer);
            Assert.AreEqual(2, components.Length);
            Assert.AreEqual(TestComponents.dummy_component1, components[0]);
            Assert.AreEqual(TestComponents.dummy_component2, components[1]);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetComponent_NegNoComponent()
        {
            CheckReady();

            try
            {
                Config.GetComponent(Component.unknown);
                throw new Exception("Config.GetComponent() did not throw an exception");
            }
            catch (ArgumentException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentException: Component.unknown cannot be passed to Config.GetComponent"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetComponent_NegNoUnit()
        {
            CheckReady();

            try
            {
                Config.GetComponent(TestComponents.dummy_component3);
                throw new Exception("Config.GetComponent() did not throw an exception");
            }
            catch (ArgumentException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentException: component dummy_component3 not found in npdb"),

            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetComponent_PosNotNull()
        {
            CheckReady();

            IComponentInfo componentInfo = Config.GetComponent(TestComponents.dummy_component1);
            Assert.AreEqual(Component.unknown, componentInfo.Component);
            Assert.AreEqual("dummy_component1_executable", componentInfo.Executable);
            Assert.AreEqual(Installer.installutil, componentInfo.Installer);
            Assert.AreEqual("dummy_username", componentInfo.Username);
            Assert.AreEqual("dummy_password", componentInfo.Password);
            Assert.AreEqual("dummy_component1_info1", componentInfo.Info1);
            Assert.AreEqual("dummy_component1_info2", componentInfo.Info2);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetComponent_PosNull()
        {
            CheckReady();

            IComponentInfo componentInfo = Config.GetComponent(TestComponents.dummy_component2);
            Assert.AreEqual(Component.unknown, componentInfo.Component);
            Assert.AreEqual(null, componentInfo.Executable);
            Assert.AreEqual(Installer.unspecified, componentInfo.Installer);
            Assert.AreEqual(null, componentInfo.Username);
            Assert.AreEqual(null, componentInfo.Password);
            Assert.AreEqual(null, componentInfo.Info1);
            Assert.AreEqual(null, componentInfo.Info2);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInterfaceListByServer_NegNoEnvironment()
        {
            CheckReady();

            try
            {
                Config.GetInterfaceListByServer(null, _testServer);
                throw new Exception("Config.GetInterfaceListByServer() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: environment"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        public void GetInterfaceListByServer_NegNoServer()
        {
            CheckReady();

            try
            {
                Config.GetInterfaceListByServer(null);
                throw new Exception("Config.GetInterfaceListByServer() did not throw an exception");
            }
            catch (ArgumentNullException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ArgumentNullException: Value cannot be null.\r\nParameter name: server"),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInterfaceListByServer_PosServer()
        {
            CheckReady();

            string[] interfaces = Config.GetInterfaceListByServer("not_a_valid_server");
            Assert.AreEqual(0, interfaces.Length);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInterfaceListByServer_PosNoInterfaces()
        {
            CheckReady();

            string[] interfaces = Config.GetInterfaceListByServer("dummy_server_no_interfaces");
            Assert.AreEqual(0, interfaces.Length);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInterfaceListByServer_PosOneInterface()
        {
            CheckReady();

            string[] interfaces = Config.GetInterfaceListByServer("dummy_server6");
            Assert.AreEqual(1, interfaces.Length);
            Assert.AreEqual(TestInterfaces.dummy_interface6, interfaces[0]);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetInterfaceListByServer_PosMultiInterfaces()
        {
            CheckReady();

            string[] interfaces = Config.GetInterfaceListByServer(_testServer);
            Assert.AreEqual(16, interfaces.Length);
            Assert.AreEqual(TestInterfaces.dummy_interface1A, interfaces[0]);
            Assert.AreEqual(TestInterfaces.dummy_interface1B, interfaces[1]);
            Assert.AreEqual(TestInterfaces.dummy_interface1C, interfaces[2]);
            Assert.AreEqual(TestInterfaces.dummy_interface1D, interfaces[3]);
            Assert.AreEqual(TestInterfaces.dummy_interface1E, interfaces[4]);
            Assert.AreEqual(TestInterfaces.dummy_interface1F, interfaces[5]);
            Assert.AreEqual(TestInterfaces.dummy_interface1G, interfaces[6]);
            Assert.AreEqual(TestInterfaces.dummy_interface2A, interfaces[7]);
            Assert.AreEqual(TestInterfaces.dummy_interface2B, interfaces[8]);
            Assert.AreEqual(TestInterfaces.dummy_interface2C, interfaces[9]);
            Assert.AreEqual(TestInterfaces.dummy_interface2D, interfaces[10]);
            Assert.AreEqual(TestInterfaces.dummy_interface2E, interfaces[11]);
            Assert.AreEqual(TestInterfaces.dummy_interface2F, interfaces[12]);
            Assert.AreEqual(TestInterfaces.dummy_interface2G, interfaces[13]);
            Assert.AreEqual(TestInterfaces.dummy_interface3A, interfaces[14]);
            Assert.AreEqual(TestInterfaces.dummy_interface3B, interfaces[15]);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetBucketCount_NegNoInterface()
        {
            CheckReady();

            try
            {
                Config.GetBucketCount(Interface.None);
                throw new Exception("Config.GetBucketCount() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: No interface buckets found for specified interface " + Interface.None + ".  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_partition_count(" + _npdbEnvironment + "," + Interface.None + ") did not return any results!  Check npdb.t_interface_buckets."),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetBucketCount_Pos()
        {
            CheckReady();

            uint count = Config.GetBucketCount(TestInterfaces.dummy_interface4);
            Assert.AreEqual(count, 6);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetBucketNum_NegNoInterface()
        {
            CheckReady();

            try
            {
                Config.GetBucketNum(Interface.None, 1234);
                throw new Exception("Config.GetBucketNum() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: No interface buckets found for specified interface " + Interface.None + ".  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_partition_count(" + _npdbEnvironment + "," + Interface.None + ") did not return any results!  Check npdb.t_interface_buckets."),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase]
        public void GetBucketNum_Pos()
        {
            CheckReady();

            uint num = Config.GetBucketNum(TestInterfaces.dummy_interface4, 1234);
            Assert.AreEqual(num, 4);

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
            //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
            //};
            //Assert.IsTrue(LogVerifyEventList(appEntries));
        }

        [TestCase] 
        public void GetBucketServer_NegNoInterface()
        {
            CheckReady();

            try
            {
                Config.GetBucketServer(Interface.None, 0);
                throw new Exception("Config.GetBucketServer() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Specified interface bucket was not found.  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_bucket(" + _npdbEnvironment + "," + Interface.None + ",0,0) did not return any results!  Check npdb.t_interface_buckets."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase] 
        public void GetBucketServer_NegNoBucket()
        {
            CheckReady();

            try
            {
                Config.GetBucketServer(TestInterfaces.dummy_interface4, 1234);
                throw new Exception("Config.GetBucketServer() did not throw an exception");
            }
            catch (ApplicationException) {}

            //AppEntry[]  appEntries = {
            //    new AppEntry(EventLogEntryType.Error, 3, "System.ApplicationException: Specified interface bucket was not found.  This probably indicates a configuration error.  Details below.\n\np_config_get_interface_bucket(" + _npdbEnvironment + "," + TestInterfaces.dummy_interface4 + ",0,1234) did not return any results!  Check npdb.t_interface_buckets."),
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase] 
        public void GetBucketServer_BucketServer_ToString()
        {
            CheckReady();

            IBucketServer bucketServer = new BucketServer(Interface.None);

            Assert.AreEqual(bucketServer.ToString(),
                "{None,"                   // interface
                + "<null>,"                // current server name
                + "<null>,"                // next server name
                + "1/1/0001 12:00:00 AM,"  // next server start
                + "<null>,"                // info1
                + "<null>,"                // info2
                + "<null>,"                // info3
                + "<null>}");              // info4

            bucketServer = Config.GetBucketServer(TestInterfaces.dummy_interface4, 0);

            Assert.AreEqual(bucketServer.ToString(),
                "{dummy_interface4,"        // interface
                + "DUMMY_BUCKET_SERVER1,"   // current server name
                + "DUMMY_BUCKET_SERVER1,"   // next server name
                + "1/1/2111 1:11:00 AM,"    // next server start
                + "dummy_bucket1_info1,"    // info1
                + "dummy_bucket1_info2,"    // info2
                + "dummy_bucket1_info3,"    // info3
                + "dummy_bucket1_info4}");  // info4

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase] 
        public void GetBucketServer_Pos()
        {
            CheckReady();

            // build our expected interface info objects
            InterfaceInfo interfaceInfo_1 = new InterfaceInfo();
            interfaceInfo_1.Interface = TestInterfaces.dummy_interface4;
            interfaceInfo_1.Protocol = "http";
            interfaceInfo_1.IPAddress = IPAddress.Parse("101.0.0.1");
            interfaceInfo_1.ServerName = "DUMMY_BUCKET_SERVER1";

            IBucketServer bucketServer = Config.GetBucketServer(TestInterfaces.dummy_interface4, 0);
            Assert.AreEqual(interfaceInfo_1.ToString(), bucketServer.CurrentServer.ToString());
            Assert.AreEqual("DUMMY_BUCKET_SERVER1", bucketServer.CurrentServerName);
            Assert.AreEqual(interfaceInfo_1.ToString(), bucketServer.NextServer.ToString());
            Assert.AreEqual("DUMMY_BUCKET_SERVER1", bucketServer.NextServerName);
            Assert.AreEqual("1/1/2111 1:11:00 AM", bucketServer.NextServerStart.ToString());
            Assert.AreEqual("dummy_bucket1_info1", bucketServer.Info1);
            Assert.AreEqual("dummy_bucket1_info2", bucketServer.Info2);
            Assert.AreEqual("dummy_bucket1_info3", bucketServer.Info3);
            Assert.AreEqual("dummy_bucket1_info4", bucketServer.Info4);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase] 
        public void GetBucketServer_PosNext()
        {
            CheckReady();

            // build our expected interface info objects
            InterfaceInfo interfaceInfo_1 = new InterfaceInfo();
            interfaceInfo_1.Interface = TestInterfaces.dummy_interface4;
            interfaceInfo_1.Protocol = "http";
            interfaceInfo_1.IPAddress = IPAddress.Parse("101.0.0.1");
            interfaceInfo_1.ServerName = "DUMMY_BUCKET_SERVER1";

            InterfaceInfo interfaceInfo_4 = new InterfaceInfo();
            interfaceInfo_4.Interface = TestInterfaces.dummy_interface4;
            interfaceInfo_4.Protocol = "http";
            interfaceInfo_4.IPAddress = IPAddress.Parse("101.0.0.4");
            interfaceInfo_4.ServerName = "DUMMY_BUCKET_SERVER4";

            IBucketServer bucketServer = Config.GetBucketServer(TestInterfaces.dummy_interface4, 3);
            Assert.AreEqual(interfaceInfo_1.ToString(), bucketServer.CurrentServer.ToString());
            Assert.AreEqual("DUMMY_BUCKET_SERVER1", bucketServer.CurrentServerName);
            Assert.AreEqual(interfaceInfo_4.ToString(), bucketServer.NextServer.ToString());
            Assert.AreEqual("DUMMY_BUCKET_SERVER4", bucketServer.NextServerName);
            Assert.AreEqual("1/1/2111 1:11:00 AM", bucketServer.NextServerStart.ToString());
            Assert.AreEqual("dummy_bucket4_info1", bucketServer.Info1);
            Assert.AreEqual("dummy_bucket4_info2", bucketServer.Info2);
            Assert.AreEqual("dummy_bucket4_info3", bucketServer.Info3);
            Assert.AreEqual("dummy_bucket4_info4", bucketServer.Info4);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase] 
        public void GetTitleBucketServer_Pos()
        {
            CheckReady();

            // build our expected interface info objects
            InterfaceInfo interfaceInfo_1 = new InterfaceInfo();
            interfaceInfo_1.Interface = TestInterfaces.dummy_interface4;
            interfaceInfo_1.Protocol = "http";
            interfaceInfo_1.IPAddress = IPAddress.Parse("101.0.0.2");
            interfaceInfo_1.ServerName = "DUMMY_BUCKET_SERVER2";

            IBucketServer bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
            Assert.AreEqual(interfaceInfo_1.ToString(), bucketServer.CurrentServer.ToString());
            Assert.AreEqual("DUMMY_BUCKET_SERVER2", bucketServer.CurrentServerName);
            Assert.AreEqual(interfaceInfo_1.ToString(), bucketServer.NextServer.ToString());
            Assert.AreEqual("DUMMY_BUCKET_SERVER2", bucketServer.NextServerName);
            Assert.AreEqual("1/1/2111 1:11:00 AM", bucketServer.NextServerStart.ToString());
            Assert.AreEqual("dummy_bucket2_info1", bucketServer.Info1);
            Assert.AreEqual("dummy_bucket2_info2", bucketServer.Info2);
            Assert.AreEqual("dummy_bucket2_info3", bucketServer.Info3);
            Assert.AreEqual("dummy_bucket2_info4", bucketServer.Info4);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        [TestCase] 
        public void GetTitleBucketServer_PosNext()
        {
            CheckReady();

            // build our expected interface info objects
            InterfaceInfo interfaceInfo_1 = new InterfaceInfo();
            interfaceInfo_1.Interface = TestInterfaces.dummy_interface4;
            interfaceInfo_1.Protocol = "http";
            interfaceInfo_1.IPAddress = IPAddress.Parse("101.0.0.2");
            interfaceInfo_1.ServerName = "DUMMY_BUCKET_SERVER2";

            InterfaceInfo interfaceInfo_4 = new InterfaceInfo();
            interfaceInfo_4.Interface = TestInterfaces.dummy_interface4;
            interfaceInfo_4.Protocol = "http";
            interfaceInfo_4.IPAddress = IPAddress.Parse("101.0.0.5");
            interfaceInfo_4.ServerName = "DUMMY_BUCKET_SERVER5";

            IBucketServer bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 4);
            Assert.AreEqual(interfaceInfo_1.ToString(), bucketServer.CurrentServer.ToString());
            Assert.AreEqual("DUMMY_BUCKET_SERVER2", bucketServer.CurrentServerName);
            Assert.AreEqual(interfaceInfo_4.ToString(), bucketServer.NextServer.ToString());
            Assert.AreEqual("DUMMY_BUCKET_SERVER5", bucketServer.NextServerName);
            Assert.AreEqual("1/1/2111 1:11:00 AM", bucketServer.NextServerStart.ToString());
            Assert.AreEqual("dummy_bucket5_info1", bucketServer.Info1);
            Assert.AreEqual("dummy_bucket5_info2", bucketServer.Info2);
            Assert.AreEqual("dummy_bucket5_info3", bucketServer.Info3);
            Assert.AreEqual("dummy_bucket5_info4", bucketServer.Info4);

            //AppEntry[]  appEntries = {
            //};
            //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
        }

        // need a member variable to tell the InterfaceBucketChange handlers 
        // what event args to expect
        private InterfaceBucketChangeEventArgs _expectedInterfaceBucketChangeEventArgs;
        private InterfaceBucketChangeEventArgs _acceptInterfaceBucketChangeEventArgs;
        private InterfaceBucketChangeEventArgs _rejectInterfaceBucketChangeEventArgs;
        private InterfaceBucketChangeEventArgs _throwInterfaceBucketChangeEventArgs;

        private bool _acceptInterfaceBucketChangeFired;
        private bool _rejectInterfaceBucketChangeFired;
        private bool _throwInterfaceBucketChangeFired;

        public void AcceptInterfaceBucketChange(
            object sender, 
            InterfaceBucketChangeEventArgs e)
        {
            _acceptInterfaceBucketChangeFired = true;

            string         eEnvironment = null;
            uint           eTitleId = 0;
            uint           eBucket = 0;
            string      eInterface = Interface.None;
            IBucketServer  eValueOld = null;
            IBucketServer  eValueNew = null;
            bool           fUnexpected = false;

            if (0 != String.Compare(_expectedInterfaceBucketChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedInterfaceBucketChangeEventArgs.TitleId != e.TitleId) 
            {
                eTitleId = e.TitleId;
                fUnexpected = true;
            }

            if (_expectedInterfaceBucketChangeEventArgs.Bucket != e.Bucket) 
            {
                eBucket = e.Bucket;
                fUnexpected = true;
            }

            if (_expectedInterfaceBucketChangeEventArgs.Interface != e.Interface) 
            {
                eInterface = e.Interface;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceBucketChangeEventArgs.ValueOld.ToString(), e.ValueOld.ToString())) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceBucketChangeEventArgs.ValueNew.ToString(), e.ValueNew.ToString())) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _acceptInterfaceBucketChangeEventArgs
                    = new InterfaceBucketChangeEventArgs(
                    eEnvironment,
                    eTitleId,
                    eBucket,
                    eInterface,
                    eValueOld,
                    eValueNew);
            }
        }

        public void RejectInterfaceBucketChange(
            object sender, 
            InterfaceBucketChangeEventArgs e)
        {
            _rejectInterfaceBucketChangeFired = true;

            string         eEnvironment = null;
            uint           eTitleId = 0;
            uint           eBucket = 0;
            string      eInterface = Interface.None;
            IBucketServer  eValueOld = null;
            IBucketServer  eValueNew = null;
            bool           fUnexpected = false;

            if (0 != String.Compare(_expectedInterfaceBucketChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedInterfaceBucketChangeEventArgs.TitleId != e.TitleId) 
            {
                eTitleId = e.TitleId;
                fUnexpected = true;
            }

            if (_expectedInterfaceBucketChangeEventArgs.Bucket != e.Bucket) 
            {
                eBucket = e.Bucket;
                fUnexpected = true;
            }

            if (_expectedInterfaceBucketChangeEventArgs.Interface != e.Interface) 
            {
                eInterface = e.Interface;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceBucketChangeEventArgs.ValueOld.ToString(), e.ValueOld.ToString())) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceBucketChangeEventArgs.ValueNew.ToString(), e.ValueNew.ToString())) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _rejectInterfaceBucketChangeEventArgs
                    = new InterfaceBucketChangeEventArgs(
                    eEnvironment,
                    eTitleId,
                    eBucket,
                    eInterface,
                    eValueOld,
                    eValueNew);
            }

            // signal the config class that we don't want to allow this change
            Config.VetoInterfaceBucketChange();
        }

        public void ThrowInterfaceBucketChange(
            object sender, 
            InterfaceBucketChangeEventArgs e)
        {
            _throwInterfaceBucketChangeFired = true;

            string         eEnvironment = null;
            uint           eTitleId = 0;
            uint           eBucket = 0;
            string         eInterface = Interface.None;
            IBucketServer  eValueOld = null;
            IBucketServer  eValueNew = null;
            bool           fUnexpected = false;

            if (0 != String.Compare(_expectedInterfaceBucketChangeEventArgs.Environment, e.Environment)) 
            {
                eEnvironment = e.Environment;
                fUnexpected = true;
            }

            if (_expectedInterfaceBucketChangeEventArgs.TitleId != e.TitleId) 
            {
                eTitleId = e.TitleId;
                fUnexpected = true;
            }

            if (_expectedInterfaceBucketChangeEventArgs.Bucket != e.Bucket) 
            {
                eBucket = e.Bucket;
                fUnexpected = true;
            }

            if (_expectedInterfaceBucketChangeEventArgs.Interface != e.Interface) 
            {
                eInterface = e.Interface;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceBucketChangeEventArgs.ValueOld.ToString(), e.ValueOld.ToString())) 
            {
                eValueOld = e.ValueOld;
                fUnexpected = true;
            }

            if (0 != String.Compare(_expectedInterfaceBucketChangeEventArgs.ValueNew.ToString(), e.ValueNew.ToString())) 
            {
                eValueNew = e.ValueNew;
                fUnexpected = true;
            }

            if (fUnexpected) 
            {
                _throwInterfaceBucketChangeEventArgs
                    = new InterfaceBucketChangeEventArgs(
                    eEnvironment,
                    eTitleId,
                    eBucket,
                    eInterface,
                    eValueOld,
                    eValueNew);
            }

            throw new Exception("ThrowInterfaceBucketChange: Throw exception");
        }

        [TestCase]
        public void GetTitleBucketServer_PosCache()
        {
            CheckReady();

            // create delegates for our change handlers
            InterfaceBucketChangeEventHandler acceptHandler 
                = AcceptInterfaceBucketChange;
            bool acceptHandlerAttached = false;

            InterfaceBucketChangeEventHandler rejectHandler 
                = RejectInterfaceBucketChange;
            bool rejectHandlerAttached = false;

            InterfaceBucketChangeEventHandler throwHandler
                = ThrowInterfaceBucketChange;
            bool throwHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                try 
                {
                    // confirm that the InterfaceBucket cache is indeed empty
                    string interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    string[] interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(4, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("0 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);

                    // build our expected bucket server objects
                    BucketServer bucketServer_0 = new BucketServer(TestInterfaces.dummy_interface4);
                    bucketServer_0.CurrentServerName = "DUMMY_BUCKET_SERVER1";
                    bucketServer_0.NextServerName = "DUMMY_BUCKET_SERVER1";
                    bucketServer_0.NextServerStart = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                    bucketServer_0.Info1 = "dummy_bucket1_info1";
                    bucketServer_0.Info2 = "dummy_bucket1_info2";
                    bucketServer_0.Info3 = "dummy_bucket1_info3";
                    bucketServer_0.Info4 = "dummy_bucket1_info4";

                    BucketServer bucketServer_1234_Old = new BucketServer(TestInterfaces.dummy_interface4);
                    bucketServer_1234_Old.CurrentServerName = "DUMMY_BUCKET_SERVER2";
                    bucketServer_1234_Old.NextServerName = "DUMMY_BUCKET_SERVER2";
                    bucketServer_1234_Old.NextServerStart = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                    bucketServer_1234_Old.Info1 = "dummy_bucket2_info1";
                    bucketServer_1234_Old.Info2 = "dummy_bucket2_info2";
                    bucketServer_1234_Old.Info3 = "dummy_bucket2_info3";
                    bucketServer_1234_Old.Info4 = "dummy_bucket2_info4";

                    BucketServer bucketServer_1234_New = new BucketServer(TestInterfaces.dummy_interface4);
                    bucketServer_1234_New.CurrentServerName = "DUMMY_BUCKET_SERVER2";
                    bucketServer_1234_New.NextServerName = "DUMMY_BUCKET_SERVER2";
                    bucketServer_1234_New.NextServerStart = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                    bucketServer_1234_New.Info1 = "dummy_bucket2_info1";
                    bucketServer_1234_New.Info2 = "dummy_bucket2_info2";
                    bucketServer_1234_New.Info3 = "dummy_bucket2_info3";
                    bucketServer_1234_New.Info4 = "dummy_bucket2_info4";

                    // read a bucket to trigger cache creation
                    Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 0, 0);

                    // now there should be 1 InterfaceBucket in the cache
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,0}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);

                    string interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    string[] interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,0}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);

                    string[] interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    string[] interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[3]);

                    string[] interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer_0.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, null);
                    Assert.IsTrue(interfaceBucketXmgmtString.StartsWith("Error: invalid command arguments\r\n\r\n"));

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, "");
                    Assert.IsTrue(interfaceBucketXmgmtString.StartsWith("Error: invalid command arguments\r\n\r\n"));

                    // register an InterfaceBucketChange handler, this one accepts changes
                    Config.InterfaceBucketChange += acceptHandler;
                    acceptHandlerAttached = true;

                    // set _acceptInterfaceBucketChangeFired to false, so we can confirm the handler is called
                    _acceptInterfaceBucketChangeFired = false;

                    // update the info1 column of title 1234 bucket 1 for dummy_interface4
                    sqlCommand.CommandText = "update t_interface_buckets "
                        + "set vc_info1 = 'dummy_bucket2_info1a' "
                        + "where vc_interface = 'dummy_interface4' "
                        + "and i_title_id = 1234 "
                        + "and i_bucket = 1 "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the interface bucket change handler did NOT fire.
                    // title 1234 bucket 1 for dummy_interface4 should NOT in any cached interface bucket list
                    // and therefore no handlers should've been called
                    Assert.AreEqual(false, _acceptInterfaceBucketChangeFired);

                    // there should still be 1 InterfaceBucket in the cache
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,0}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,0}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer_0.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // now read title 1234 bucket 1 for dummy_interface4
                    // which will load interface bucket into the cache
                    bucketServer_1234_Old.Info1 = "dummy_bucket2_info1a";
                    IBucketServer bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(6, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,0}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1a,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[5]);

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(3, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,0}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1a,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[2]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer_0.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[2]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("1", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // save our expectations for the handler to check
                    bucketServer_1234_New.Info1 = "dummy_bucket2_info1b";
                    _expectedInterfaceBucketChangeEventArgs 
                        = new InterfaceBucketChangeEventArgs(
                        Config.Environment,
                        1234,
                        1,
                        TestInterfaces.dummy_interface4,
                        bucketServer_1234_Old,
                        bucketServer_1234_New);
                    _acceptInterfaceBucketChangeFired = false;

                    // update the info1 column of title 1234 bucket 1 for dummy_interface4
                    sqlCommand.CommandText = "update t_interface_buckets "
                        + "set vc_info1 = 'dummy_bucket2_info1b' "
                        + "where vc_interface = 'dummy_interface4' "
                        + "and i_title_id = 1234 "
                        + "and i_bucket = 1 "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptInterfaceBucketChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceBucketChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptInterfaceBucketChangeEventArgs.Environment
                            + "," + _acceptInterfaceBucketChangeEventArgs.Interface
                            + "," + _acceptInterfaceBucketChangeEventArgs.TitleId
                            + "," + _acceptInterfaceBucketChangeEventArgs.Bucket
                            + "," + _acceptInterfaceBucketChangeEventArgs.ValueOld
                            + "," + _acceptInterfaceBucketChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptInterfaceChangeEventArgs);
                    }

                    // check that the interface bucket change handler fired
                    Assert.AreEqual(true, _acceptInterfaceBucketChangeFired);

                    // read title 1234 bucket 1 for dummy_interface4
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_New.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(6, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,0}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1b,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[5]);

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(3, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,0}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1b,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[2]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer_0.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[2]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("1", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // register a second InterfaceBucketChange handler, this one rejects changes
                    Config.InterfaceBucketChange += rejectHandler;
                    rejectHandlerAttached = true;

                    // save our expectations for the handler to check
                    bucketServer_1234_Old.Info1 = "dummy_bucket2_info1b";
                    bucketServer_1234_New.Info1 = "dummy_bucket2_info1c";
                    _expectedInterfaceBucketChangeEventArgs 
                        = new InterfaceBucketChangeEventArgs(
                        Config.Environment,
                        1234,
                        1,
                        TestInterfaces.dummy_interface4,
                        bucketServer_1234_Old,
                        bucketServer_1234_New);
                    _acceptInterfaceBucketChangeFired = false;
                    _rejectInterfaceBucketChangeFired = false;

                    // update the info1 column of title 1234 bucket 1 for dummy_interface4
                    sqlCommand.CommandText = "update t_interface_buckets "
                        + "set vc_info1 = 'dummy_bucket2_info1c' "
                        + "where vc_interface = 'dummy_interface4' "
                        + "and i_title_id = 1234 "
                        + "and i_bucket = 1 "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptInterfaceBucketChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceBucketChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptInterfaceBucketChangeEventArgs.Environment
                            + "," + _acceptInterfaceBucketChangeEventArgs.Interface
                            + "," + _acceptInterfaceBucketChangeEventArgs.TitleId
                            + "," + _acceptInterfaceBucketChangeEventArgs.Bucket
                            + "," + _acceptInterfaceBucketChangeEventArgs.ValueOld
                            + "," + _acceptInterfaceBucketChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptInterfaceChangeEventArgs);
                    }

                    if (null != _rejectInterfaceBucketChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceBucketChangeEventArgs to rejectHandler!");
                        errorWriter.WriteLine("{" + _rejectInterfaceBucketChangeEventArgs.Environment
                            + "," + _rejectInterfaceBucketChangeEventArgs.Interface
                            + "," + _rejectInterfaceBucketChangeEventArgs.TitleId
                            + "," + _rejectInterfaceBucketChangeEventArgs.Bucket
                            + "," + _rejectInterfaceBucketChangeEventArgs.ValueOld
                            + "," + _rejectInterfaceBucketChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _rejectInterfaceBucketChangeEventArgs);
                    }

                    // check that the handlers both fired
                    Assert.AreEqual(true, _acceptInterfaceBucketChangeFired);
                    Assert.AreEqual(true, _rejectInterfaceBucketChangeFired);

                    // read title 1234 bucket 1 for dummy_interface4,
                    // confirm that it has NOT changed,
                    // since reject handler rejected the change
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(6, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("2 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,0}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);
                    Assert.IsTrue(interfaceBucketsXmgmtLines[5].StartsWith("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1b,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},True,"));
                    Assert.IsTrue(interfaceBucketsXmgmtLines[5].EndsWith(",{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}}"));

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(3, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,0}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER1,1/1/2111 1:11:00 AM,dummy_bucket1_info1,dummy_bucket1_info2,dummy_bucket1_info3,dummy_bucket1_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);
                    Assert.IsTrue(interfaceBucketXmgmtLines[2].StartsWith("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1b,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},True,"));
                    Assert.IsTrue(interfaceBucketXmgmtLines[2].EndsWith(",{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}}"));

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer_0.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[2]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("1", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("True", interfaceBucketXmgmtValue[1]);

                    DateTime  lastEventTime = DateTime.Parse(interfaceBucketXmgmtValue[2]);
                    TimeSpan  ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(bucketServer_1234_New.ToString(), interfaceBucketXmgmtValue[3]);

                    // read title 1234 bucket 1 for dummy_interface4, to read the state value a second time
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // wait past the _minEventInterval to pass and read the setting again.
                    // this one should trigger an event
                    SleepEventInterval();
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // now change the config_minEventInterval setting to zero,
                    // so we should always get events for every stale read
                    UpdateEventInterval(cxn, 0);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // now read title 1234 bucket 1 for dummy_interface4 twice in a row, and we should get two events
                    // and those events should report that they will not fire again for 0 milliseconds
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // unregister both handlers
                    Config.InterfaceBucketChange -= acceptHandler;
                    acceptHandlerAttached = false;
                    Config.InterfaceBucketChange -= rejectHandler;
                    rejectHandlerAttached = false;

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // get title 1234 bucket 1 for dummy_interface4 again to read it into the cache
                    bucketServer_1234_Old.Info1 = "dummy_bucket2_info1c";
                    bucketServer_1234_New.Info1 = "dummy_bucket2_info1d";
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("1", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // update the info1 column of title 1234 bucket 1 for dummy_interface4
                    sqlCommand.CommandText = "update t_interface_buckets "
                        + "set vc_info1 = 'dummy_bucket2_info1d' "
                        + "where vc_interface = 'dummy_interface4' "
                        + "and i_title_id = 1234 "
                        + "and i_bucket = 1 "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // read title 1234 bucket 1 for dummy_interface4, and confirm that it has NOT changed,
                    // since no handler was registered
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.IsTrue(interfaceBucketsXmgmtLines[4].StartsWith("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},True,"));
                    Assert.IsTrue(interfaceBucketsXmgmtLines[4].EndsWith(",{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1d,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}}"));

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.IsTrue(interfaceBucketXmgmtLines[1].StartsWith("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},True,"));
                    Assert.IsTrue(interfaceBucketXmgmtLines[1].EndsWith(",{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1d,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}}"));

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("1", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("True", interfaceBucketXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(interfaceBucketXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(bucketServer_1234_New.ToString(), interfaceBucketXmgmtValue[3]);

                    // set the info1 column of title 1234 bucket 1 for dummy_interface4 back to info1c
                    sqlCommand.CommandText = "update t_interface_buckets "
                        + "set vc_info1 = 'dummy_bucket2_info1c' "
                        + "where vc_interface = 'dummy_interface4' "
                        + "and i_title_id = 1234 "
                        + "and i_bucket = 1 "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // read title 1234 bucket 1 for dummy_interface4, and confirm that it has NOT changed,
                    // since config reverted
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("1", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // register a change handler that throws an exception
                    Config.InterfaceBucketChange += throwHandler;
                    throwHandlerAttached = true;

                    // save our expectations for the handler to check
                    _expectedInterfaceBucketChangeEventArgs 
                        = new InterfaceBucketChangeEventArgs(
                        Config.Environment,
                        1234,
                        1,
                        TestInterfaces.dummy_interface4,
                        bucketServer_1234_Old,
                        bucketServer_1234_New);
                    _throwInterfaceBucketChangeFired = false;

                    // read title 1234 bucket 1 for dummy_interface4 again to read it into the cache
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("1", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // update the info1 column of title 1234 bucket 1 for dummy_interface4
                    sqlCommand.CommandText = "update t_interface_buckets "
                        + "set vc_info1 = 'dummy_bucket2_info1d' "
                        + "where vc_interface = 'dummy_interface4' "
                        + "and i_title_id = 1234 "
                        + "and i_bucket = 1 "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _throwInterfaceBucketChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceBucketChangeEventArgs to throwHandler!");
                        errorWriter.WriteLine("{" + _throwInterfaceBucketChangeEventArgs.Environment
                            + "," + _throwInterfaceBucketChangeEventArgs.Interface
                            + "," + _throwInterfaceBucketChangeEventArgs.TitleId
                            + "," + _throwInterfaceBucketChangeEventArgs.Bucket
                            + "," + _throwInterfaceBucketChangeEventArgs.ValueOld
                            + "," + _throwInterfaceBucketChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _throwInterfaceBucketChangeEventArgs);
                    }

                    // check that the interface bucket change handler fired
                    Assert.AreEqual(true, _throwInterfaceBucketChangeFired);

                    // get title 1234 bucket 1 for dummy_interface4 again and confirm that it has not changed,
                    // since throw handler did not accept the change
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.IsTrue(interfaceBucketsXmgmtLines[4].StartsWith("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},True,"));
                    Assert.IsTrue(interfaceBucketsXmgmtLines[4].EndsWith(",{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1d,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}}"));

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.IsTrue(interfaceBucketXmgmtLines[1].StartsWith("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1c,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},True,"));
                    Assert.IsTrue(interfaceBucketXmgmtLines[1].EndsWith(",{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1d,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}}"));

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("1", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("True", interfaceBucketXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(interfaceBucketXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(bucketServer_1234_New.ToString(), interfaceBucketXmgmtValue[3]);

                    // now change the refresh interval setting, 
                    // so cache refresh happens in a timely manner
                    UpdateRefreshInterval(cxn, _refreshInterval);

                    // discard all cached values to reset the cache
                    Config.DiscardCachedValues();
                    Config.ServerSet_TestOnly_DoNotUse = _testServer;

                    // save our expectations for the handler to check
                    bucketServer_1234_Old.Info1 = "dummy_bucket2_info1d";
                    bucketServer_1234_New.Info1 = "dummy_bucket2_info1e";
                    _expectedInterfaceBucketChangeEventArgs 
                        = new InterfaceBucketChangeEventArgs(
                        Config.Environment,
                        1234,
                        1,
                        TestInterfaces.dummy_interface4,
                        bucketServer_1234_Old,
                        bucketServer_1234_New);
                    _throwInterfaceBucketChangeFired = false;

                    // read title 1234 bucket 1 for dummy_interface4 again to read it into the cache
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1d,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1d,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("1", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // update the info1 column of title 1234 bucket 1 for dummy_interface4
                    sqlCommand.CommandText = "update t_interface_buckets "
                        + "set vc_info1 = 'dummy_bucket2_info1e' "
                        + "where vc_interface = 'dummy_interface4' "
                        + "and i_title_id = 1234 "
                        + "and i_bucket = 1 "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();

                    // read title 1234 bucket 1 for dummy_interface4, and confirm that it has NOT changed,
                    // since cache refresh has not had time to fire
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // check that the interface bucket change handler did NOT fire
                    Assert.AreEqual(false, _throwInterfaceBucketChangeFired);

                    // wait past the refresh interval to pass
                    SleepRefreshInterval();

                    // check that the handler got the correct change event args
                    if (null != _throwInterfaceBucketChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceBucketChangeEventArgs to throwHandler!");
                        errorWriter.WriteLine("{" + _throwInterfaceBucketChangeEventArgs.Environment
                            + "," + _throwInterfaceBucketChangeEventArgs.Interface
                            + "," + _throwInterfaceBucketChangeEventArgs.TitleId
                            + "," + _throwInterfaceBucketChangeEventArgs.Bucket
                            + "," + _throwInterfaceBucketChangeEventArgs.ValueOld
                            + "," + _throwInterfaceBucketChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _throwInterfaceBucketChangeEventArgs);
                    }

                    // check that the interface bucket change handler fired
                    //Assert.AreEqual(true, _throwInterfaceBucketChangeFired);

                    // read title 1234 bucket 1 for dummy_interface4, and confirm that it has NOT changed,
                    // since throw handler did not accept the change
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 1);
                    Assert.AreEqual(bucketServer_1234_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.IsTrue(interfaceBucketsXmgmtLines[4].StartsWith("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1d,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},True,"));
                    Assert.IsTrue(interfaceBucketsXmgmtLines[4].EndsWith(",{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1e,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}}"));

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.IsTrue(interfaceBucketXmgmtLines[1].StartsWith("{xblob,dummy_interface4,1234,1}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1d,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4},True,"));
                    Assert.IsTrue(interfaceBucketXmgmtLines[1].EndsWith(",{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER2,1/1/2111 1:11:00 AM,dummy_bucket2_info1e,dummy_bucket2_info2,dummy_bucket2_info3,dummy_bucket2_info4}}"));

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("1", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("True", interfaceBucketXmgmtValue[1]);

                    lastEventTime = DateTime.Parse(interfaceBucketXmgmtValue[2]);
                    ts = lastEventTime - DateTime.Now;
                    Assert.IsTrue(Math.Abs(ts.TotalSeconds) < 2);

                    Assert.AreEqual(bucketServer_1234_New.ToString(), interfaceBucketXmgmtValue[3]);

                    // unregister the change handler that throws an exception
                    Config.InterfaceBucketChange -= throwHandler;
                    throwHandlerAttached = false;

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "An interface bucket change has been accepted by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface bucket information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface bucket information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 100 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface bucket information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface bucket information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change event was not handled by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface bucket information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 60000 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface bucket information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "ServerSet_TestOnly_DoNotUse should never be called in Production!\nServer is being explicitly set to " + _testServer + ".\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current environment is " + _npdbEnvironment),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Unable to determine current component, using Component.unknown. Component specific overrides will not be used by this component."),
                    //    new AppEntry(EventLogEntryType.Information, 1, "Current component is unknown"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The minimum interval between consecutive stale data events is set to 0 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component will check for updates in NPDB every 200 milliseconds"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being created by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "The NPDB refresh timer is being called by a thread using the following windows identity: " + Environment.UserDomainName + "\\" + Environment.UserName),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change handler threw an exception! (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An interface bucket change has been rejected by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "This component is not using the latest interface bucket information from NPDB (details below)\nOperator action may be required. Please investigate!\nNote: This event will not be logged again for this particular problem until at least 0 milliseconds have elapsed\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.InterfaceBucketChange -= acceptHandler;
                    }

                    if (rejectHandlerAttached) 
                    {
                        Config.InterfaceBucketChange -= rejectHandler;
                    }

                    if (throwHandlerAttached) 
                    {
                        Config.InterfaceBucketChange -= throwHandler;
                    }

                    // restore the min event interval to what it was when we began
                    UpdateEventInterval(cxn, _minEventInterval);
                    UpdateRefreshInterval(cxn, _oldRefreshInterval);

                    // set dummy_interface4 back
                    sqlCommand.CommandText = "update t_interface_buckets "
                        + "set vc_info1 = 'dummy_bucket2_info1' "
                        + "where vc_interface = 'dummy_interface4' "
                        + "and i_title_id = 1234 "
                        + "and i_bucket = 1 "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        [TestCase]
        public void CompleteMigration_Pos()
        {
            CheckReady();

            // create delegates for our change handlers
            InterfaceBucketChangeEventHandler acceptHandler 
                = this.AcceptInterfaceBucketChange;
            bool acceptHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                try 
                {
                    // confirm that the InterfaceBucket cache is indeed empty
                    string interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    string[] interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(4, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("0 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);

                    // build our expected bucket server objects
                    BucketServer bucketServer_0_Old = new BucketServer(TestInterfaces.dummy_interface4);
                    bucketServer_0_Old.CurrentServerName = "DUMMY_BUCKET_SERVER1";
                    bucketServer_0_Old.NextServerName = "DUMMY_BUCKET_SERVER4";
                    bucketServer_0_Old.NextServerStart = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                    bucketServer_0_Old.Info1 = "dummy_bucket4_info1";
                    bucketServer_0_Old.Info2 = "dummy_bucket4_info2";
                    bucketServer_0_Old.Info3 = "dummy_bucket4_info3";
                    bucketServer_0_Old.Info4 = "dummy_bucket4_info4";

                    BucketServer bucketServer_0_New = new BucketServer(TestInterfaces.dummy_interface4);
                    bucketServer_0_New.CurrentServerName = "DUMMY_BUCKET_SERVER4";
                    bucketServer_0_New.NextServerName = "DUMMY_BUCKET_SERVER4";
                    bucketServer_0_New.NextServerStart = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                    bucketServer_0_New.Info1 = "dummy_bucket4_info1";
                    bucketServer_0_New.Info2 = "dummy_bucket4_info2";
                    bucketServer_0_New.Info3 = "dummy_bucket4_info3";
                    bucketServer_0_New.Info4 = "dummy_bucket4_info4";

                    // register an InterfaceBucketChange handler, this one accepts changes
                    Config.InterfaceBucketChange += acceptHandler;
                    acceptHandlerAttached = true;

                    // set _acceptInterfaceBucketChangeFired to false, so we can confirm the handler is called
                    _acceptInterfaceBucketChangeFired = false;

                    // now read bucket 3 for dummy_interface4
                    // which will load interface bucket into the cache
                    IBucketServer bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 0, 3);
                    Assert.AreEqual(bucketServer_0_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,3}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER4,1/1/2111 1:11:00 AM,dummy_bucket4_info1,dummy_bucket4_info2,dummy_bucket4_info3,dummy_bucket4_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);

                    string interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    string[] interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,3}{{dummy_interface4,DUMMY_BUCKET_SERVER1,DUMMY_BUCKET_SERVER4,1/1/2111 1:11:00 AM,dummy_bucket4_info1,dummy_bucket4_info2,dummy_bucket4_info3,dummy_bucket4_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);

                    string[] interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    string[] interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("3", interfaceBucketXmgmtSetting[3]);

                    string[] interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // save our expectations for the handler to check
                    _expectedInterfaceBucketChangeEventArgs 
                        = new InterfaceBucketChangeEventArgs(
                        Config.Environment,
                        0,
                        3,
                        TestInterfaces.dummy_interface4,
                        bucketServer_0_Old,
                        bucketServer_0_New);
                    _acceptInterfaceBucketChangeFired = false;

                    // complete migration
                    Config.CompleteMigration(TestInterfaces.dummy_interface4, 3);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptInterfaceBucketChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceBucketChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptInterfaceBucketChangeEventArgs.Environment
                            + "," + _acceptInterfaceBucketChangeEventArgs.Interface
                            + "," + _acceptInterfaceBucketChangeEventArgs.TitleId
                            + "," + _acceptInterfaceBucketChangeEventArgs.Bucket
                            + "," + _acceptInterfaceBucketChangeEventArgs.ValueOld
                            + "," + _acceptInterfaceBucketChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptInterfaceChangeEventArgs);
                    }

                    // check that the interface bucket change handler fired
                    Assert.AreEqual(true, _acceptInterfaceBucketChangeFired);

                    // read bucket 3 for dummy_interface4
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 0, 3);
                    Assert.AreEqual(bucketServer_0_New.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,3}{{dummy_interface4,DUMMY_BUCKET_SERVER4,DUMMY_BUCKET_SERVER4,1/1/2111 1:11:00 AM,dummy_bucket4_info1,dummy_bucket4_info2,dummy_bucket4_info3,dummy_bucket4_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,0,3}{{dummy_interface4,DUMMY_BUCKET_SERVER4,DUMMY_BUCKET_SERVER4,1/1/2111 1:11:00 AM,dummy_bucket4_info1,dummy_bucket4_info2,dummy_bucket4_info3,dummy_bucket4_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("0", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("3", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // unregister the change handler
                    Config.InterfaceBucketChange -= acceptHandler;
                    acceptHandlerAttached = false;

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "An interface bucket change has been accepted by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.InterfaceBucketChange -= acceptHandler;
                    }

                    // set dummy_interface4 back
                    sqlCommand.CommandText = "update t_interface_buckets "
                        + "set vc_server = 'DUMMY_BUCKET_SERVER1' "
                        + "where vc_interface = 'dummy_interface4' "
                        + "and i_title_id = 0 "
                        + "and i_bucket = 3 "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        [TestCase]
        public void CompleteTitleMigration_Pos()
        {
            CheckReady();

            // create delegates for our change handlers
            InterfaceBucketChangeEventHandler acceptHandler 
                = this.AcceptInterfaceBucketChange;
            bool acceptHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                try 
                {
                    // confirm that the InterfaceBucket cache is indeed empty
                    string interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    string[] interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(4, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("0 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);

                    // build our expected bucket server objects
                    BucketServer bucketServer_0_Old = new BucketServer(TestInterfaces.dummy_interface4);
                    bucketServer_0_Old.CurrentServerName = "DUMMY_BUCKET_SERVER2";
                    bucketServer_0_Old.NextServerName = "DUMMY_BUCKET_SERVER5";
                    bucketServer_0_Old.NextServerStart = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                    bucketServer_0_Old.Info1 = "dummy_bucket5_info1";
                    bucketServer_0_Old.Info2 = "dummy_bucket5_info2";
                    bucketServer_0_Old.Info3 = "dummy_bucket5_info3";
                    bucketServer_0_Old.Info4 = "dummy_bucket5_info4";

                    BucketServer bucketServer_0_New = new BucketServer(TestInterfaces.dummy_interface4);
                    bucketServer_0_New.CurrentServerName = "DUMMY_BUCKET_SERVER5";
                    bucketServer_0_New.NextServerName = "DUMMY_BUCKET_SERVER5";
                    bucketServer_0_New.NextServerStart = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                    bucketServer_0_New.Info1 = "dummy_bucket5_info1";
                    bucketServer_0_New.Info2 = "dummy_bucket5_info2";
                    bucketServer_0_New.Info3 = "dummy_bucket5_info3";
                    bucketServer_0_New.Info4 = "dummy_bucket5_info4";

                    // register an InterfaceBucketChange handler, this one accepts changes
                    Config.InterfaceBucketChange += acceptHandler;
                    acceptHandlerAttached = true;

                    // set _acceptInterfaceBucketChangeFired to false, so we can confirm the handler is called
                    _acceptInterfaceBucketChangeFired = false;

                    // now read title 1234 bucket 4 for dummy_interface4
                    // which will load interface bucket into the cache
                    IBucketServer bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 4);
                    Assert.AreEqual(bucketServer_0_Old.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,4}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER5,1/1/2111 1:11:00 AM,dummy_bucket5_info1,dummy_bucket5_info2,dummy_bucket5_info3,dummy_bucket5_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);

                    string interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    string[] interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,4}{{dummy_interface4,DUMMY_BUCKET_SERVER2,DUMMY_BUCKET_SERVER5,1/1/2111 1:11:00 AM,dummy_bucket5_info1,dummy_bucket5_info2,dummy_bucket5_info3,dummy_bucket5_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);

                    string[] interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    string[] interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("4", interfaceBucketXmgmtSetting[3]);

                    string[] interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // save our expectations for the handler to check
                    _expectedInterfaceBucketChangeEventArgs 
                        = new InterfaceBucketChangeEventArgs(
                        Config.Environment,
                        1234,
                        4,
                        TestInterfaces.dummy_interface4,
                        bucketServer_0_Old,
                        bucketServer_0_New);
                    _acceptInterfaceBucketChangeFired = false;

                    // complete migration
                    Config.CompleteTitleMigration(TestInterfaces.dummy_interface4, 1234, 4);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // check that the handler got the correct change event args
                    if (null != _acceptInterfaceBucketChangeEventArgs) 
                    {
                        TextWriter  errorWriter = Console.Error;
                        errorWriter.WriteLine("Unexpected InterfaceBucketChangeEventArgs to acceptHandler!");
                        errorWriter.WriteLine("{" + _acceptInterfaceBucketChangeEventArgs.Environment
                            + "," + _acceptInterfaceBucketChangeEventArgs.Interface
                            + "," + _acceptInterfaceBucketChangeEventArgs.TitleId
                            + "," + _acceptInterfaceBucketChangeEventArgs.Bucket
                            + "," + _acceptInterfaceBucketChangeEventArgs.ValueOld
                            + "," + _acceptInterfaceBucketChangeEventArgs.ValueNew + "}");
                        Assert.AreEqual(null, _acceptInterfaceChangeEventArgs);
                    }

                    // check that the interface bucket change handler fired
                    Assert.AreEqual(true, _acceptInterfaceBucketChangeFired);

                    // read title 1234 bucket 4 for dummy_interface4
                    bucketServer = Config.GetTitleBucketServer(TestInterfaces.dummy_interface4, 1234, 4);
                    Assert.AreEqual(bucketServer_0_New.ToString(), bucketServer.ToString());

                    // make sure the cache is in the expected state
                    interfaceBucketsXmgmt = _configXmgmtCmd.InterfaceBuckets(_testProcess, _testComponentCS);
                    interfaceBucketsXmgmtLines = SplitLines(interfaceBucketsXmgmt);
                    Assert.AreEqual(5, interfaceBucketsXmgmtLines.Length);
                    Assert.AreEqual("1 lines are present in the interface bucket cache", interfaceBucketsXmgmtLines[0]);
                    Assert.AreEqual("Format of cache lines is:", interfaceBucketsXmgmtLines[1]);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketsXmgmtLines[2]);
                    Assert.AreEqual("", interfaceBucketsXmgmtLines[3]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,4}{{dummy_interface4,DUMMY_BUCKET_SERVER5,DUMMY_BUCKET_SERVER5,1/1/2111 1:11:00 AM,dummy_bucket5_info1,dummy_bucket5_info2,dummy_bucket5_info3,dummy_bucket5_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketsXmgmtLines[4]);

                    interfaceBucketXmgmtString = _configXmgmtCmd.InterfaceBucket(_testProcess, _testComponentCS, TestInterfaces.dummy_interface4);
                    interfaceBucketXmgmtLines = SplitLines(interfaceBucketXmgmtString);
                    Assert.AreEqual(2, interfaceBucketXmgmtLines.Length);
                    Assert.AreEqual("{environment,interface,titleid,bucket}{value,isStale,lastEventTime,newValue}", interfaceBucketXmgmtLines[0]);
                    Assert.AreEqual("{xblob,dummy_interface4,1234,4}{{dummy_interface4,DUMMY_BUCKET_SERVER5,DUMMY_BUCKET_SERVER5,1/1/2111 1:11:00 AM,dummy_bucket5_info1,dummy_bucket5_info2,dummy_bucket5_info3,dummy_bucket5_info4},False,1/1/0001 12:00:00 AM,<null>}", interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtPair = SplitPair(interfaceBucketXmgmtLines[1]);

                    interfaceBucketXmgmtSetting = ParseSettingValue(interfaceBucketXmgmtPair[0]);
                    Assert.AreEqual(4, interfaceBucketXmgmtSetting.Length);
                    Assert.AreEqual(_npdbEnvironment, interfaceBucketXmgmtSetting[0]);
                    Assert.AreEqual(TestInterfaces.dummy_interface4, interfaceBucketXmgmtSetting[1]);
                    Assert.AreEqual("1234", interfaceBucketXmgmtSetting[2]);
                    Assert.AreEqual("4", interfaceBucketXmgmtSetting[3]);

                    interfaceBucketXmgmtValue = ParseSettingValue(interfaceBucketXmgmtPair[1]);
                    Assert.AreEqual(4, interfaceBucketXmgmtValue.Length);
                    Assert.AreEqual(bucketServer.ToString(), interfaceBucketXmgmtValue[0]);
                    Assert.AreEqual("False", interfaceBucketXmgmtValue[1]);
                    Assert.AreEqual("1/1/0001 12:00:00 AM", interfaceBucketXmgmtValue[2]);
                    Assert.AreEqual("<null>", interfaceBucketXmgmtValue[3]);

                    // unregister the change handler
                    Config.InterfaceBucketChange -= acceptHandler;
                    acceptHandlerAttached = false;

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "An interface bucket change has been accepted by this component (details below)\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebuckets"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcache interfacebucket dummy_interface4"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.InterfaceBucketChange -= acceptHandler;
                    }

                    // set dummy_interface4 back
                    sqlCommand.CommandText = "update t_interface_buckets "
                        + "set vc_server = 'DUMMY_BUCKET_SERVER2' "
                        + "where vc_interface = 'dummy_interface4' "
                        + "and i_title_id = 1234 "
                        + "and i_bucket = 4 "
                        + "and vc_environment = '" + _npdbEnvironment + "'";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        // need a member variable to tell if the change handler fired
        private bool _acceptGameConfigChangeFired;
        private bool _throwGameConfigChangeFired;

        public void AcceptGameConfigChange(
            object sender,
            EventArgs e)
        {
            _acceptGameConfigChangeFired = true;
        }

        public void ThrowGameConfigChange(
            object sender,
            EventArgs e)
        {
            _throwGameConfigChangeFired = true;

            throw new Exception("ThrowGameConfigChange: Throw Exception");
        }

        [TestCase]
        public void GameConfigChange_Pos()
        {
            CheckReady();

            // IMPORTANT!!!
            //
            // If any additional files are needed here, they should also
            // be added to the testdata file array above
            //
            // Then the files will be checked if they exist before proceeding
            //

            // create delegates for our change handlers
            GameConfigChangeEventHandler acceptHandler
                = AcceptGameConfigChange;
            bool acceptHandlerAttached = false;

            GameConfigChangeEventHandler throwHandler
                = ThrowGameConfigChange;
            bool throwHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                // force commonconfig to query db, get the latest change id, and start the refresh timer
                Config.GetSetting(Setting.config_cacheRefreshInterval);

                try 
                {
                    _acceptGameConfigChangeFired = false;
                    _throwGameConfigChangeFired = false;

                    // insert row into t_game_config
                    DbUtil.ExecuteSqlFile(cxn, _testAddGameConfig1Sql);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler did NOT fire
                    Assert.AreEqual(false, _acceptGameConfigChangeFired);

                    // register a GameConfigChange handler
                    Config.GameConfigChange += acceptHandler;
                    acceptHandlerAttached = true;
                    _acceptGameConfigChangeFired = false;

                    // insert row into t_game_config
                    DbUtil.ExecuteSqlFile(cxn, _testAddGameConfig2Sql);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler fired
                    Assert.AreEqual(true, _acceptGameConfigChangeFired);

                    // register a GameConfigChange handler
                    Config.GameConfigChange += throwHandler;
                    throwHandlerAttached = true;
                    _acceptGameConfigChangeFired = false;
                    _throwGameConfigChangeFired = false;

                    // delete row from t_game_config
                    sqlCommand.CommandText 
                        = "delete t_game_config where "
                        + "i_title_id = 0xFFFF0005";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler fired
                    Assert.AreEqual(true, _acceptGameConfigChangeFired);
                    Assert.AreEqual(true, _throwGameConfigChangeFired);

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A game config change handler threw an exception! (details below)"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.GameConfigChange -= acceptHandler;
                    }

                    if (throwHandlerAttached) 
                    {
                        Config.GameConfigChange -= throwHandler;
                    }

                    // delete row from t_game_config
                    sqlCommand.CommandText 
                        = "delete t_game_config where "
                        + "i_title_id = 0xFFFF0004 or "
                        + "i_title_id = 0xFFFF0005";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        [TestCase]
        public void LiveTitleConfigChange_Pos()
        {
            CheckReady();

            // IMPORTANT!!!
            //
            // If any additional files are needed here, they should also
            // be added to the testdata file array above
            //
            // Then the files will be checked if they exist before proceeding
            //

            // create delegates for our change handlers
            GameConfigChangeEventHandler acceptHandler
                = AcceptGameConfigChange;
            bool acceptHandlerAttached = false;

            GameConfigChangeEventHandler throwHandler
                = ThrowGameConfigChange;
            bool throwHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                // before we can insert rows into t_live_title_config, we have to setup some
                // other tables that t_live_title_config references
                DbUtil.ExecuteSqlFile(cxn, _testAddGameConfig1Sql);
                DbUtil.ExecuteSqlFile(cxn, _testAddGameConfig2Sql);

                // force commonconfig to query db, get the latest change id, and start the refresh timer
                Config.GetSetting(Setting.config_cacheRefreshInterval);

                try 
                {
                    _acceptGameConfigChangeFired = false;
                    _throwGameConfigChangeFired = false;

                    // insert row into t_live_title_config
                    DbUtil.ExecuteSqlFile(cxn, _testAddTitleConfig1Sql);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler did NOT fire
                    Assert.AreEqual(false, _acceptGameConfigChangeFired);

                    // register a GameConfigChange handler
                    Config.GameConfigChange += acceptHandler;
                    acceptHandlerAttached = true;
                    _acceptGameConfigChangeFired = false;

                    // insert row into t_live_title_config
                    DbUtil.ExecuteSqlFile(cxn, _testAddTitleConfig2Sql);
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler fired
                    Assert.AreEqual(true, _acceptGameConfigChangeFired);

                    // register a GameConfigChange handler
                    Config.GameConfigChange += throwHandler;
                    throwHandlerAttached = true;
                    _acceptGameConfigChangeFired = false;
                    _throwGameConfigChangeFired = false;

                    // delete row from t_live_title_config
                    sqlCommand.CommandText 
                        = "delete t_live_title_config where "
                        + "i_title_id = 0xFFFF0005";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler fired
                    Assert.AreEqual(true, _acceptGameConfigChangeFired);
                    Assert.AreEqual(true, _throwGameConfigChangeFired);

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_game_config in NPDB"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "A game config change handler threw an exception! (details below)"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.GameConfigChange -= acceptHandler;
                    }

                    if (throwHandlerAttached) 
                    {
                        Config.GameConfigChange -= throwHandler;
                    }

                    // delete row from t_live_title_config
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText 
                        = "delete t_live_title_config where "
                        + "i_title_id = 0xFFFF0004 or "
                        + "i_title_id = 0xFFFF0005";
                    sqlCommand.ExecuteNonQuery();

                    // delete row from t_game_config
                    sqlCommand.CommandText 
                        = "delete t_game_config where "
                        + "i_title_id = 0xFFFF0004 or "
                        + "i_title_id = 0xFFFF0005";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        // need a member variable to tell if the change handler fired
        private bool _acceptXdelaySettingsChangeFired;
        private bool _throwXdelaySettingsChangeFired;

        public void AcceptXdelaySettingsChange(
            object sender,
            EventArgs e)
        {
            _acceptXdelaySettingsChangeFired = true;
        }

        public void ThrowXdelaySettingsChange(
            object sender,
            EventArgs e)
        {
            _throwXdelaySettingsChangeFired = true;

            throw new Exception("ThrowGameConfigChange: Throw Exception");
        }

        [TestCase]
        public void XdelaySettingsChange_Pos()
        {
            CheckReady();

            // create delegates for our change handlers
            XdelaySettingsChangeEventHandler acceptHandler
                = AcceptXdelaySettingsChange;
            bool acceptHandlerAttached = false;

            XdelaySettingsChangeEventHandler throwHandler
                = ThrowXdelaySettingsChange;
            bool throwHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                // force commonconfig to query db, get the latest change id, and start the refresh timer
                Config.GetSetting(Setting.config_cacheRefreshInterval);

                try 
                {
                    _acceptXdelaySettingsChangeFired = false;
                    _throwXdelaySettingsChangeFired = false;

                    // insert row into t_xdelay_settings
                    sqlCommand.CommandText 
                        = "insert into t_xdelay_settings "
                        + "select '" + TestComponents.dummy_component1 + "',0xFFFF0004,'request1',5000, 0";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler did NOT fire
                    Assert.AreEqual(false, _acceptXdelaySettingsChangeFired);

                    // register a XdelaySettingsChange handler
                    Config.XdelaySettingsChange += acceptHandler;
                    acceptHandlerAttached = true;
                    _acceptXdelaySettingsChangeFired = false;

                    // insert row into t_xdelay_settings
                    sqlCommand.CommandText 
                        = "insert into t_xdelay_settings "
                        + "select '" + TestComponents.dummy_component1 + "',0xFFFF0005,'request2',5000, 0";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler fired
                    Assert.AreEqual(true, _acceptXdelaySettingsChangeFired);

                    // register a XdelaySettingsChange handler
                    Config.XdelaySettingsChange += throwHandler;
                    throwHandlerAttached = true;
                    _acceptXdelaySettingsChangeFired = false;
                    _throwXdelaySettingsChangeFired = false;

                    // delete row from t_xdelay_settings
                    sqlCommand.CommandText 
                        = "delete t_xdelay_settings where "
                        + "vc_component = '" + TestComponents.dummy_component1 + "' and "
                        + "i_title_id = 0xFFFF0005";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler fired
                    Assert.AreEqual(true, _acceptXdelaySettingsChangeFired);
                    Assert.AreEqual(true, _throwXdelaySettingsChangeFired);

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xdelay_settings in NPDB"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xdelay_settings in NPDB"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xdelay_settings in NPDB"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An xdelay settings change handler threw an exception! (details below)"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.XdelaySettingsChange -= acceptHandler;
                    }

                    if (throwHandlerAttached) 
                    {
                        Config.XdelaySettingsChange -= throwHandler;
                    }

                    // delete row from t_xdelay_settings
                    sqlCommand.CommandText 
                        = "delete t_xdelay_settings where "
                        + "vc_component = '" + TestComponents.dummy_component1 + "'";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        // need a member variable to tell if the change handler fired
        private bool _acceptXrlMappingsChangeFired;
        private bool _throwXrlMappingsChangeFired;

        public void AcceptXrlMappingsChange(
            object sender,
            EventArgs e)
        {
            _acceptXrlMappingsChangeFired = true;
        }

        public void ThrowXrlMappingsChange(
            object sender,
            EventArgs e)
        {
            _throwXrlMappingsChangeFired = true;

            throw new Exception("ThrowXrlMappingsChange: Throw Exception");
        }

        [TestCase]
        public void XrlMappingsChange_Pos()
        {
            CheckReady();

            // create delegates for our change handlers
            XrlMappingsChangeEventHandler acceptHandler
                = AcceptXrlMappingsChange;
            bool acceptHandlerAttached = false;

            XrlMappingsChangeEventHandler throwHandler
                = ThrowXrlMappingsChange;
            bool throwHandlerAttached = false;

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();

                // force commonconfig to query db, get the latest change id, and start the refresh timer
                Config.GetSetting(Setting.config_cacheRefreshInterval);

                try 
                {
                    _acceptXrlMappingsChangeFired = false;
                    _throwXrlMappingsChangeFired = false;

                    // insert row into t_xrl_virtual_interface_mappings
                    sqlCommand.CommandText
                        = "insert into t_xrl_virtual_interface_mappings "
                        + "select 'xrlA','dummy_vinterface1A',1,2,3,4,5,6,7,8,9,10,11,'xblob_test'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler did NOT fire
                    Assert.AreEqual(false, _acceptXrlMappingsChangeFired);

                    // register a XrlMappingsChangeFired handler
                    Config.XrlMappingsChange += acceptHandler;
                    acceptHandlerAttached = true;
                    _acceptXrlMappingsChangeFired = false;

                    // insert row into t_xrl_virtual_interface_mappings
                    sqlCommand.CommandText
                        = "insert into t_xrl_virtual_interface_mappings "
                        + "select 'xrlB','dummy_vinterface1A',1,2,3,4,5,6,7,8,9,10,11,'xblob_test'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler fired
                    Assert.AreEqual(true, _acceptXrlMappingsChangeFired);

                    // register a XrlMappingsChangeFired handler
                    Config.XrlMappingsChange += throwHandler;
                    throwHandlerAttached = true;
                    _acceptXrlMappingsChangeFired = false;
                    _throwXrlMappingsChangeFired = false;

                    // delete row from t_xrl_virtual_interface_mappings
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText 
                        = "delete t_xrl_virtual_interface_mappings where "
                        + "vc_xrl = 'xrlA'";
                    sqlCommand.ExecuteNonQuery();
                    _configXmgmtCmd.ConfigCacheRefresh(_testProcess, _testComponentCS);

                    // make sure the config change handler fired
                    Assert.AreEqual(true, _acceptXrlMappingsChangeFired);
                    Assert.AreEqual(true, _throwXrlMappingsChangeFired);

                    //AppEntry[]  appEntries = {
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xrl_virtual_interface_mappings in NPDB"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xrl_virtual_interface_mappings in NPDB"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "A configuration change has been detected in NPDB\nNPDB will now be examined for relevant changes\n"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "This component has been notified of a change to t_xrl_virtual_interface_mappings in NPDB"),
                    //    new AppEntry(EventLogEntryType.Error, 3, "An xrl mappings change handler threw an exception! (details below)"),
                    //    new AppEntry(EventLogEntryType.Information, 1, "In Config.OnControlRequest\nargs.FullCommand: configcacherefresh"),
                    //};
                    //Assert.IsTrue(LogVerifyEventList(CS_AppEntries, appEntries));
                }
                finally 
                {
                    // unregister any change handlers
                    if (acceptHandlerAttached) 
                    {
                        Config.XrlMappingsChange -= acceptHandler;
                    }

                    if (throwHandlerAttached) 
                    {
                        Config.XrlMappingsChange -= throwHandler;
                    }

                    // delete row from t_xrl_virtual_interface_mappings
                    sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText 
                        = "delete t_xrl_virtual_interface_mappings where "
                        + "vc_xrl = 'xrlA' or "
                        + "vc_xrl = 'xrlB'";
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        [TestCase]
        public void VerifyOverridenNpdbByConstructor()
        {
            string npdbServer = @"FooIp";
            string npdbDatabase = @"FooDb";
            string expectedConnectionStringSnippet = "Data Source=" + npdbServer
                    + ";Initial Catalog=" + npdbDatabase
                    + ";Integrated Security=SSPI";

            // Create an instance of the ConfigInstance class using the overriden constructor, then check the connection string property
            // to ensure that settings were abided by
            ConfigInstance inst = ConfigInstance.Create(npdbServer, npdbDatabase);
            Assert.IsTrue( inst.NpdbConnectionString.StartsWith(expectedConnectionStringSnippet, StringComparison.OrdinalIgnoreCase) );
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\protocol\BlobTest.cs ===
using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.protocol;
using xonline.common.service;
using xonline.common.diagnostics;
using xonline.common.utilities2;

#pragma warning disable 1718

namespace xonline.common.test.protocol
{

    [TestGroup, DVT, Description("Tests the Blob class in \\private\\common\\core\\utilities2\\Blob.cs")]
    public class Blobs : TestNode
    {
        [TestCase, Description("")]
        public void Equality()
        {
            byte[] ba1 = new byte[] { };
            byte[] ba2 = new byte[] { 0 };
            byte[] ba3 = new byte[] { 1, 255 };
            byte[] ba4 = new byte[] { 1 };
            Blob b1 = ba1;
            Blob b2 = ba2;
            Blob b3 = ba3;
            Blob b3b = ba3;
            Blob b3c = b3;
            Blob b4 = ba4;

            Assert.IsTrue(b1 == ba1);
            Assert.IsTrue(b1 == b1);
            Assert.IsTrue(b1 == new byte[] { });
            Assert.IsTrue(b1 != new byte[] { 0 });
            //Assert.IsTrue(b1 != null); 
            Assert.IsTrue(b1 != b2);
            Assert.IsTrue(b1 != b3);
            Assert.IsTrue(b1 != ba2);
            Assert.IsTrue(b1 != ba3);

            Assert.IsTrue(b2 == ba2);
            Assert.IsTrue(b2 == b2);
            Assert.IsTrue(b2 == new byte[] { 0 });
            Assert.IsTrue(b2 != new byte[] { });
            Assert.IsTrue(b2 != new byte[] { 1 });
            Assert.IsTrue(b2 != b1);
            Assert.IsTrue(b2 != b3);
            Assert.IsTrue(b2 != ba1);
            Assert.IsTrue(b2 != ba3);

            Assert.IsTrue(b3 == ba3);
            Assert.IsTrue(b3 == b3);
            Assert.IsTrue(b3 == b3b);
            Assert.IsTrue(b3 == b3c);
            Assert.IsTrue(b3b == b3c);
            Assert.IsTrue(b3 == new byte[] { 1, 255 });
            Assert.IsTrue(b3 != new byte[] { });
            Assert.IsTrue(b3 != new byte[] { 1 });
            Assert.IsTrue(b3 != new byte[] { 255 });
            
            Assert.IsTrue(b4 == ba4);
            Assert.IsTrue(b4 == b4);
            Assert.IsTrue(b4 == new byte[] { 1 });
            Assert.IsTrue(b4 != new byte[] { });
            Assert.IsTrue(b4 != new byte[] { 0 });
            Assert.IsTrue(b4 != b1);
            Assert.IsTrue(b4 != b2);
            Assert.IsTrue(b4 != b3);
            Assert.IsTrue(b4 != b3b);
            Assert.IsTrue(b4 != b3c);
        }

        [TestCase, Description("")]
        public void Compare()
        {
            Blob b1 = new byte[] { };
            Blob b2 = new byte[] { 0 };
            Blob b3 = new byte[] { 1, 6 };
            Blob b4 = new byte[] { 1, 4 };
            Blob b5 = new byte[] { 2, 5 };
            Blob b6 = new byte[] { 2 };
            Blob b7 = new byte[] { 2, 5, 0 };
            Blob b8 = new byte[] { 3, 5 };

            Assert.IsTrue(b1.Length == 0);
            Assert.IsTrue(b2.Length == 1);
            Assert.IsTrue(b3.Length == 2);
            Assert.IsTrue(b7.Length == 3);
            
            Assert.IsTrue(b1.CompareTo(b1) == 0);
            Assert.IsTrue(b1.CompareTo(b2) < 0);
            Assert.IsTrue(b1.CompareTo(b3) < 0);
            Assert.IsTrue(b1.CompareTo(b4) < 0);
            Assert.IsTrue(b1.CompareTo(b5) < 0);
            Assert.IsTrue(b1.CompareTo(b6) < 0);
            Assert.IsTrue(b1.CompareTo(b7) < 0);

            Assert.IsTrue(b2.CompareTo(b1) > 0);
            Assert.IsTrue(b2.CompareTo(b2) == 0);
            Assert.IsTrue(b2.CompareTo(b3) < 0);
            Assert.IsTrue(b2.CompareTo(b4) < 0);
            Assert.IsTrue(b2.CompareTo(b5) < 0);
            Assert.IsTrue(b2.CompareTo(b6) < 0);
            Assert.IsTrue(b2.CompareTo(b7) < 0);

            Assert.IsTrue(b3.CompareTo(b1) > 0);
            Assert.IsTrue(b3.CompareTo(b2) > 0);
            Assert.IsTrue(b3.CompareTo(b3) == 0);
            Assert.IsTrue(b3.CompareTo(b4) > 0);
            Assert.IsTrue(b3.CompareTo(b5) < 0);
            Assert.IsTrue(b3.CompareTo(b6) > 0);
            Assert.IsTrue(b3.CompareTo(b7) < 0);

            Assert.IsTrue(b4.CompareTo(b3) < 0);
            Assert.IsTrue(b4.CompareTo(b4) == 0);
            Assert.IsTrue(b4.CompareTo(b5) < 0);

            Assert.IsTrue(b5.CompareTo(b3) > 0);
            Assert.IsTrue(b5.CompareTo(b4) > 0);
            Assert.IsTrue(b5.CompareTo(b5) == 0);
            Assert.IsTrue(b5.CompareTo(b6) > 0);
            Assert.IsTrue(b5.CompareTo(b7) < 0);

            Assert.IsTrue(b6.CompareTo(b7) < 0);

            Assert.IsTrue(b7.CompareTo(b4) > 0);
            Assert.IsTrue(b7.CompareTo(b5) > 0);
            Assert.IsTrue(b7.CompareTo(b6) > 0);
            Assert.IsTrue(b7.CompareTo(b7) == 0);
            Assert.IsTrue(b7.CompareTo(b8) > 0);

            Assert.IsTrue(b8.CompareTo(b7) < 0);
        }

        [TestCase, Description("")]
        public void CastingAndIndexing()
        {

            byte[] ba1 = new byte[] { 1, 255 };
            Blob b1 = ba1;
            Assert.IsTrue(b1.Length == 2);
            Assert.IsTrue(b1[0] == ba1[0]);
            Assert.IsTrue(b1[1] == ba1[1]);
            Assert.IsTrue(b1 == ba1);

            // Change original array does change blob
            Blob b2 = b1;
            ba1[0]++;
            Assert.IsTrue(b1[0] == 2);
            Assert.IsTrue(b1[1] == 255);
            Assert.IsTrue(b1 == ba1);

            // But copy of that original blob also gets changed
            // @@@ is this what we want?
            Assert.IsTrue(b2[0] == b1[0]);
            Assert.IsTrue(b2[0] == 2);
            Assert.IsTrue(b2[1] == 255);
            Assert.IsTrue(b1 == b2);
            Assert.IsTrue(b2 == ba1);

            // New blob, new array, but same values
            Blob b3 = new byte[] { 2, 255 };
            Assert.IsTrue(b2 == b3);
            b3[0]++;
            Assert.IsTrue(b2 != b3);
        }


        [TestCase, Description("")]
        public void Parse_Neg()
        {
            Blob b1;

            Assert.IsTrue(!Blob.TryParse("foo", out b1));
            Blob.TryParse("foo", out b1);
            Assert.IsTrue(b1.Length == 0);

            Assert.IsTrue(!Blob.TryParse(" 10", out b1));
            Assert.IsTrue(!Blob.TryParse("10 ", out b1));
            Assert.IsTrue(!Blob.TryParse("10X", out b1));
            Assert.IsTrue(!Blob.TryParse("0X10", out b1));

            // null or empty not allow
            Assert.IsTrue(!Blob.TryParse("", out b1));
            Assert.IsTrue(!Blob.TryParse(null, out b1));

            Assert.IsTrue(Blob.TryParse("0x", out b1));
            Assert.IsTrue(b1.Length == 0);
        }

        [TestCase, Description("")]
        public void Parse_Pos()
        {
            Blob b1;

            b1 = Blob.Parse("0x1");
            Assert.IsTrue(b1 == new byte[] { 0x1 });

            b1 = Blob.Parse("0x01");
            Assert.IsTrue(b1 == new byte[] { 0x1 });

            b1 = Blob.Parse("0");
            Assert.IsTrue(b1 == new byte[] { 0x0 });

            b1 = Blob.Parse("1");
            Assert.IsTrue(b1 == new byte[] { 0x1 });

            b1 = Blob.Parse("01");
            Assert.IsTrue(b1 == new byte[] { 0x1 });

            b1 = Blob.Parse("0x001");
            Assert.IsTrue(b1 == new byte[] { 0x0, 0x1 });

            b1 = Blob.Parse("0x0001");
            Assert.IsTrue(b1 == new byte[] { 0x0, 0x1 });

            b1 = Blob.Parse("001");
            Assert.IsTrue(b1 == new byte[] { 0x0, 0x1 });

            b1 = Blob.Parse("0001");
            Assert.IsTrue(b1 == new byte[] { 0x0, 0x1 });

            b1 = Blob.Parse("F");
            Assert.IsTrue(b1 == new byte[] { 0xF });

            b1 = Blob.Parse("FF");
            Assert.IsTrue(b1 == new byte[] { 0xFF });

            b1 = Blob.Parse("0FF");
            Assert.IsTrue(b1 == new byte[] { 0x0, 0xFF });

            b1 = Blob.Parse("00FF");
            Assert.IsTrue(b1 == new byte[] { 0x0, 0xFF });

            b1 = Blob.Parse("0x00FF");
            Assert.IsTrue(b1 == new byte[] { 0x0, 0xFF });

            b1 = Blob.Parse("FAFB");
            Assert.IsTrue(b1 == new byte[] { 0xFA, 0xFB });

            b1 = Blob.Parse("fafb");
            Assert.IsTrue(b1 == new byte[] { 0xFA, 0xFB });

            b1 = Blob.Parse("0xfafb");
            Assert.IsTrue(b1 == new byte[] { 0xFA, 0xFB });
        }

        [TestCase, Description("")]
        public void String()
        {
            Blob b1;

            b1 = new byte[] { };
            Assert.IsTrue(b1.ToString() == "");

            b1 = new byte[] { 0x0 };
            Assert.IsTrue(b1.ToString() == "00");

            b1 = new byte[] { 0x1 };
            Assert.IsTrue(b1.ToString() == "01");

            b1 = new byte[] { 0x8F };
            Assert.IsTrue(b1.ToString() == "8F");

            b1 = new byte[] { 0x0, 0x1 };
            Assert.IsTrue(b1.ToString() == "0001");

            b1 = new byte[] { 0xFF, 0x1 };
            Assert.IsTrue(b1.ToString() == "FF01");

        }

        [TestCase, Description("")]
        public void Xml()
        {
            // todo!
        }




    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\puidmgr\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\protocol\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\rpttarget\StdAfx.cpp ===
// stdafx.cpp : source file that includes just the standard includes

#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\rpttarget\rpttest.cpp ===
#include "stdafx.h"

XomDefineArea(Test);

DWORD WINAPI XMgmtLoggingThread( LPVOID lpThreadNum )
{
    int iThreadNum = ( int ) lpThreadNum;
    int iSleepTime = 100;
    int i = 0;

    while( 1 )
    {
        XomLog( Test, "Thread: %d Message: %d", iThreadNum, i++ );
        Sleep( iSleepTime );
    }
}

__cdecl wmain()
{
    HRESULT hr = S_OK;
    HANDLE rgLoggingThreads[ 4 ];
    DWORD dwThreadId;

    for( int i = 0; i < 4; i++ )
    {
        rgLoggingThreads[i] = NULL;
    }

    hr = ::CoInitialize( NULL );
    
    // Init core logging and tracing
    hr = g_xomcentral.Init("Test");
    
    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_COMMON_CONFIG_284, "Unrecoverable failure while initializing: Failed to init g_xomcentral: hr=0x%X", hr);
        goto lDone;
    }

    for( int i = 0; i < 4; i++ )
    {
        rgLoggingThreads[i] = ::CreateThread( NULL, 0, XMgmtLoggingThread, ( LPVOID ) i, 0, &dwThreadId );
    }

    Sleep( 50000000 );

lDone:

    g_xomcentral.Term();

    ::CoUninitialize( );

    return;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\protocol\VortexProtTest.cs ===
using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.protocol;
using xonline.common.service;
using xonline.common.diagnostics;
using xonline.common.utilities2;

namespace xonline.common.test.protocol
{

    [TestGroup, DVT]
    public class VortexProtocol : TestNode
    {
        private void DumpStream(MemoryStream ms)
        {
            Global.RO.Debug("Event bytes:");
            string[] hexlines = ByteConvert.ToFormattedStrings(ms.ToArray());
            int count = 0;
            foreach (string s in hexlines)
            {
                Global.RO.Debug("  {0:X4}:  {1}", count, s);
                count += 16;
            }
        }

        private byte[] MakeVxEvent(Blob producerId, uint eventId, params object[] fields)
        {
            MemoryStream ms = new MemoryStream(1000);
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            VxEvent ve = new VxEvent(producerId, eventId, DateTime.UtcNow);
            uint fieldOrdinal = 1;
            // Each field
            foreach (object o in fields)
            {
                if (o != null)
                {
                    ve.EventFields.AddField(fieldOrdinal, o);
                }
                fieldOrdinal++;
            }
            ve.WriteStream(bw);

            return ms.ToArray();
        }

        private MemoryStream MakeRawEvent()
        {
            MemoryStream ms = new MemoryStream(1000);
            BinaryWriter bw = new BinaryWriter(ms);

            // Event 
            bw.Write((byte)1);  // producer blob length
            bw.Write((byte[])new byte[] { 16 });  // producer
            bw.Write((byte)32); // event id
            bw.Write((byte)0);  // delta timestamp;
            
            // Field1, varint
            bw.Write((byte)((1 << 3) | 1));
            bw.Write((byte)0x7F);
            // Field3, varint
            bw.Write((byte)((3 << 3) | 1));
            bw.Write((byte)0x82);
            bw.Write((byte)0x1);  // 82 01 = 130
            // Field4, SpecialField1, varint
            bw.Write((byte)((4 << 3) | 7));
            bw.Write((byte)((1 << 3) | 1));
            bw.Write((byte)4);
            // Field5, blob
            bw.Write((byte)((5 << 3) | 2));
            bw.Write((byte)4);
            bw.Write((byte[])new byte[] { 1, 2, 3, 4 });
            // Terminator
            bw.Write((byte)0);

            ms.Position = 0;
            return ms;
        }

        private void VerifyRawEvent(VxEvent vxevent)
        {
            Assert.IsTrue(vxevent.ProducerId == new byte[] { 16 });
            Assert.IsTrue((ulong)vxevent.EventId == (ulong)32);
            Assert.IsTrue(vxevent.EventFields.GetUInt32(1) == 127);
            Assert.IsTrue(vxevent.EventFields.GetUInt32(3) == 130);
            uint[] sfo = vxevent.EventFields.SpecialFieldOrdinals;
            Assert.IsTrue(sfo.Length == 1);
            Assert.IsTrue(sfo[0] == 4);
            Assert.IsTrue((uint)vxevent.EventFields.GetSpecialField(4).Id == 1);
            Assert.IsTrue((ulong)vxevent.EventFields.GetSpecialField(4).Value == 4);
            byte[] blob = vxevent.EventFields.GetBytes(5);
            Assert.IsTrue(blob[0] == 1);
            Assert.IsTrue(blob[1] == 2);
            Assert.IsTrue(blob[2] == 3);
            Assert.IsTrue(blob[3] == 4);
            Global.RO.Debug("VxEvent time: {0}", vxevent.Timestamp.ToString());

            // Try some negative cases
            try
            {
                vxevent.EventFields.GetUInt32(2);
                Assert.IsTrue(false);
            }
            catch (IndexOutOfRangeException)
            {
            }

            try
            {
                vxevent.EventFields.GetSingle(1);
                Assert.IsTrue(false);
            }
            catch (InvalidCastException)
            {
            }

            try
            {
                vxevent.EventFields.GetString(1);
                Assert.IsTrue(false);
            }
            catch (InvalidCastException)
            {
            }

            Global.RO.Debug(vxevent.ToString());
            Global.RO.Debug(vxevent.ToString(false));

            // Strings!
            string str1 = vxevent.ToString();
            string[] fields1 = str1.Split(new char[] { '|' });
            string str2 = vxevent.ToString(false);
            string[] fields2 = str2.Split(new char[] { '|' });
            Assert.IsTrue(fields1.Length == 7);
            Assert.IsTrue(fields2.Length == 6);

            Assert.IsTrue(fields1[0] == "1601/01/01 00:00:00.000");
            Assert.IsTrue(fields1[1] == "10@32");
            Assert.IsTrue(fields1[2] == "7F");
            Assert.IsTrue(fields1[3] == "");
            Assert.IsTrue(fields1[4] == "82");
            Assert.IsTrue(fields1[5] == "4");
            Assert.IsTrue(fields1[6] == "01020304");

            //fields1[0] is timestamp
            Assert.IsTrue(fields1[1] == fields2[0]);
            Assert.IsTrue(fields1[2] == fields2[1]);
            Assert.IsTrue(fields1[3] == fields2[2]);
            Assert.IsTrue(fields1[4] == fields2[3]);
            Assert.IsTrue(fields1[5] == fields2[4]);
            Assert.IsTrue(fields1[6] == fields2[5]);

        }            

        [TestCase, Description("Test a simple VxEvent by constructing it manually, with VortexBinaryWriter")]
        public void TestVxEvent_Basic()
        {
            MemoryStream ms = MakeRawEvent();

            DumpStream(ms);

            ms.Position = 0;
            var vxevent = new VxEvent(new VortexBinaryReader(ms), Blob.Empty, 0);
            VerifyRawEvent(vxevent);
        }

        [TestCase, Description("Test a simple VxEvent by constructing it manually, with VortexBinaryWriter")]
        public void TestVxEvent_BasicVortexBinaryWriter()
        {
            MemoryStream ms = new MemoryStream(1000);
            
            // Use the easier VorexBinaryWriter. Encode it with same values as raw event 
            // above.
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);
            
            // Event headers
            bw.WriteBlob(new byte[] { 16 });  // producer id
            bw.Write7BitEncodedUInt64(32);  // message id
            bw.Write7BitEncodedInt64((long)0);  // delta timestamp;

            SpecialField sf1 = new SpecialField()
            {
                Id = 1,
                Value = (uint)4
            };

            // Fields. This test puts the signed number here.
            bw.WriteVxField(1, (uint)127);
            bw.WriteVxField(3, (uint)130);
            bw.WriteVxField(4, sf1);
            bw.WriteVxField(5, new byte[] { 1, 2, 3, 4 });
            bw.Write((byte)0);

            // Verify it
            DumpStream(ms);

            ms.Position = 0;
            var vxevent = new VxEvent(new VortexBinaryReader(ms));
            VerifyRawEvent(vxevent);
        }

        [TestCase, Description("Test a simple VxEvent by manually populating and serializing it")]
        public void TestVxEvent_BasicVxEvent()
        {
            SpecialField sf1 = new SpecialField()
            {
                Id = 1,
                Value = (ulong)4
            };

            VxEvent vxevent = new VxEvent(new byte[] { 16 }, 32, DateTime.FromFileTimeUtc(0));
            vxevent.EventFields.AddField(1, (ulong)127);
            vxevent.EventFields.AddField(3, (ulong)130);
            vxevent.EventFields.AddField(4, sf1);
            vxevent.EventFields.AddField(5, new byte[] { 1, 2, 3, 4 });
            
            VerifyRawEvent(vxevent);

            // Now serialize it and check again
            MemoryStream ms = new MemoryStream(1000);
            vxevent.WriteStream(new VortexBinaryWriter(ms), Blob.Empty, 0);
            DumpStream(ms);
            ms.Position = 0;

            // Deserialize
            var vxevent2 = new VxEvent(new VortexBinaryReader(ms), Blob.Empty, 0);
            VerifyRawEvent(vxevent2);
        }

        [TestCase, Description("Test a VxEvent with various variable-sized integers, signed and unsigned")]
        public void TestVxEvent_Integers()
        {
            DateTime now = DateTime.UtcNow;
            MemoryStream ms = new MemoryStream(1000);
            
            // Use the easier VorexBinaryWriter
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);
            
            // Event headers
            bw.WriteBlob(new byte[0]);
            bw.Write7BitEncodedUInt64(10000);  // message id
            bw.Write7BitEncodedInt64((long)now.ToFileTimeUtc());  // delta timestamp;

            // Fields. This test puts the signed number here.
            bw.WriteVxField(0, (sbyte)0);
            bw.WriteVxField(1, (short)0);
            bw.WriteVxField(2, (int)0);
            bw.WriteVxField(3, (long)0);
            bw.WriteVxField(10, (sbyte)1);
            bw.WriteVxField(11, (short)1);
            bw.WriteVxField(12, (int)1);
            bw.WriteVxField(13, (long)1);
            bw.WriteVxField(20, (sbyte)sbyte.MaxValue);
            bw.WriteVxField(21, (short)short.MaxValue);
            bw.WriteVxField(22, (int)int.MaxValue);
            bw.WriteVxField(23, (long)long.MaxValue);
            bw.WriteVxField(30, (sbyte)sbyte.MinValue);
            bw.WriteVxField(31, (short)short.MinValue);
            bw.WriteVxField(32, (int)int.MinValue);
            bw.WriteVxField(33, (long)long.MinValue);
            bw.WriteVxField(40, (sbyte)-1);
            bw.WriteVxField(41, (short)-1);
            bw.WriteVxField(42, (int)-1);
            bw.WriteVxField(43, (long)-1);

            bw.WriteVxField(50, (byte)0);
            bw.WriteVxField(51, (ushort)0);
            bw.WriteVxField(52, (uint)0);
            bw.WriteVxField(53, (ulong)0);
            bw.WriteVxField(60, (byte)1);
            bw.WriteVxField(61, (ushort)1);
            bw.WriteVxField(62, (uint)1);
            bw.WriteVxField(63, (ulong)1);
            bw.WriteVxField(70, (byte)byte.MaxValue);
            bw.WriteVxField(71, (ushort)ushort.MaxValue);
            bw.WriteVxField(72, (uint)uint.MaxValue);
            bw.WriteVxField(73, (ulong)ulong.MaxValue);

            // Terminator
            bw.Write((byte)0);

            DumpStream(ms);

            ms.Position = 0;
            var ve = new VxEvent(new VortexBinaryReader(ms));
            Global.RO.Debug(ve.ToString());

            Assert.IsTrue(ve.ProducerId == new byte[0]);
            Assert.IsTrue(ve.EventId == 10000);
            Assert.IsTrue(ve.Timestamp == now);

            Assert.IsTrue(ve.EventFields.Count == 32); 
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 73);
            Assert.IsTrue(ve.EventFields.GetSByte(0) == 0);
            Assert.IsTrue(ve.EventFields.GetInt16(1) == 0);
            Assert.IsTrue(ve.EventFields.GetInt32(2) == 0);
            Assert.IsTrue(ve.EventFields.GetInt64(3) == 0);
            Assert.IsTrue(ve.EventFields.GetSByte(10) == 1);
            Assert.IsTrue(ve.EventFields.GetInt16(11) == 1);
            Assert.IsTrue(ve.EventFields.GetInt32(12) == 1);
            Assert.IsTrue(ve.EventFields.GetInt64(13) == 1);
            Assert.IsTrue(ve.EventFields.GetSByte(20) == sbyte.MaxValue);
            Assert.IsTrue(ve.EventFields.GetInt16(21) == short.MaxValue);
            Assert.IsTrue(ve.EventFields.GetInt32(22) == int.MaxValue);
            Assert.IsTrue(ve.EventFields.GetInt64(23) == long.MaxValue);
            Assert.IsTrue(ve.EventFields.GetSByte(30) == sbyte.MinValue);
            Assert.IsTrue(ve.EventFields.GetInt16(31) == short.MinValue);
            Assert.IsTrue(ve.EventFields.GetInt32(32) == int.MinValue);
            Assert.IsTrue(ve.EventFields.GetInt64(33) == long.MinValue);
            Assert.IsTrue(ve.EventFields.GetSByte(40) == -1);
            Assert.IsTrue(ve.EventFields.GetInt16(41) == -1);
            Assert.IsTrue(ve.EventFields.GetInt32(42) == -1);
            Assert.IsTrue(ve.EventFields.GetInt64(43) == -1);

            Assert.IsTrue(ve.EventFields.GetByte(50) == 0);
            Assert.IsTrue(ve.EventFields.GetUInt16(51) == 0);
            Assert.IsTrue(ve.EventFields.GetUInt32(52) == 0);
            Assert.IsTrue(ve.EventFields.GetUInt64(53) == 0);
            Assert.IsTrue(ve.EventFields.GetByte(60) == 1);
            Assert.IsTrue(ve.EventFields.GetUInt16(61) == 1);
            Assert.IsTrue(ve.EventFields.GetUInt32(62) == 1);
            Assert.IsTrue(ve.EventFields.GetUInt64(63) == 1);
            Assert.IsTrue(ve.EventFields.GetByte(70) == byte.MaxValue);
            Assert.IsTrue(ve.EventFields.GetUInt16(71) == ushort.MaxValue);
            Assert.IsTrue(ve.EventFields.GetUInt32(72) == uint.MaxValue);
            Assert.IsTrue(ve.EventFields.GetUInt64(73) == ulong.MaxValue);

        }

        [TestCase, Description("Test a VxEvent with various floats and doubles")]
        public void TestVxEvent_Floats()
        {
            DateTime now = DateTime.UtcNow;
            MemoryStream ms = new MemoryStream(1000);

            // Use the easier VorexBinaryWriter
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            // Event headers
            bw.WriteBlob(new byte[0]);
            bw.Write7BitEncodedUInt64(10000);  // message id
            bw.Write7BitEncodedInt64((long)now.ToFileTimeUtc());  // delta timestamp;

            // Fields.
            bw.WriteVxField(0, (float)0);
            bw.WriteVxField(1, (float)1);
            bw.WriteVxField(2, (float)-1);
            bw.WriteVxField(3, (float)1.5);
            bw.WriteVxField(4, (float)-1.5);
            bw.WriteVxField(5, (float)float.MaxValue);
            bw.WriteVxField(6, (float)float.MinValue);
            bw.WriteVxField(7, (float)float.PositiveInfinity);
            bw.WriteVxField(8, (float)float.NegativeInfinity);
            bw.WriteVxField(9, (float)float.NaN);
            bw.WriteVxField(20, (double)0);
            bw.WriteVxField(21, (double)1);
            bw.WriteVxField(22, (double)-1);
            bw.WriteVxField(23, (double)1.5);
            bw.WriteVxField(24, (double)-1.5);
            bw.WriteVxField(25, (double)double.MaxValue);
            bw.WriteVxField(26, (double)double.MinValue);
            bw.WriteVxField(27, (double)double.PositiveInfinity);
            bw.WriteVxField(28, (double)double.NegativeInfinity);
            bw.WriteVxField(29, (double)double.NaN);

            // Terminator
            bw.Write((byte)0);

            DumpStream(ms);
            ms.Position = 0;
            var ve = new VxEvent(new VortexBinaryReader(ms));
            Global.RO.Debug(ve.ToString());

            Assert.IsTrue(ve.EventFields.Count == 20);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 29);

            // Reverse the field order, extra test
            Assert.IsTrue(ve.EventFields.GetDouble(20) == 0);
            Assert.IsTrue(ve.EventFields.GetDouble(21) == 1);
            Assert.IsTrue(ve.EventFields.GetDouble(22) == -1);
            Assert.IsTrue(ve.EventFields.GetDouble(23) == 1.5);
            Assert.IsTrue(ve.EventFields.GetDouble(24) == -1.5);
            Assert.IsTrue(ve.EventFields.GetDouble(25) == double.MaxValue);
            Assert.IsTrue(ve.EventFields.GetDouble(26) == double.MinValue);
            Assert.IsTrue(ve.EventFields.GetDouble(27) == double.PositiveInfinity);
            Assert.IsTrue(ve.EventFields.GetDouble(28) == double.NegativeInfinity);

            // unclear why this assertion fails. it IS returning NaN.
            //Assert.IsTrue(ve.EventFields.GetDouble(29) == double.NaN);
            double d = ve.EventFields.GetDouble(29);

            Assert.IsTrue(ve.EventFields.GetSingle(0) == 0);
            Assert.IsTrue(ve.EventFields.GetSingle(1) == 1);
            Assert.IsTrue(ve.EventFields.GetSingle(2) == -1);
            Assert.IsTrue(ve.EventFields.GetSingle(3) == 1.5);
            Assert.IsTrue(ve.EventFields.GetSingle(4) == -1.5);
            Assert.IsTrue(ve.EventFields.GetSingle(5) == float.MaxValue);
            Assert.IsTrue(ve.EventFields.GetSingle(6) == float.MinValue);
            Assert.IsTrue(ve.EventFields.GetSingle(7) == float.PositiveInfinity);
            Assert.IsTrue(ve.EventFields.GetSingle(8) == float.NegativeInfinity);

            // unclear why this assertion fails. it IS returning NaN.
            //Assert.IsTrue(ve.EventFields.GetSingle(9) == float.NaN);
            float f = ve.EventFields.GetSingle(8);

        }

        [TestCase, Description("Test a VxEvent with various blobs - string, byte[], Guid")]
        public void TestVxEvent_Blobs()
        {
            MemoryStream ms = new MemoryStream(1000);

            // Use the easier VorexBinaryWriter
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            // Event headers
            bw.WriteBlob(new byte[0]); // producer 
            bw.Write7BitEncodedUInt64(10000);  // message id
            bw.Write7BitEncodedInt64((long)DateTime.UtcNow.ToFileTimeUtc());  // delta timestamp;

            // Fields.
            bw.WriteVxField(0, "Hello world");
            bw.WriteVxField(1, String.Empty);
            bw.WriteVxField(2, " ");

            string bigstring = "Big string: ";
            for (int i = 0; i < 1000; i++)
            {
                bigstring += "a";
            }
            bigstring += ". Done!";
            bw.WriteVxField(3, bigstring);

            byte[] bytes = new byte[] { 0, 2, 4, 6, 8, 10 };
            bw.WriteVxField(4, bytes);

            Guid guid = new Guid();
            bw.WriteVxField(5, guid);

            DateTime now = DateTime.UtcNow;
            bw.WriteVxField(6, now);
            
            // Terminator
            bw.Write((byte)0);

            DumpStream(ms);
            ms.Position = 0;
            var ve = new VxEvent(new VortexBinaryReader(ms));
            Global.RO.Debug(ve.ToString());

            Assert.IsTrue(ve.EventFields.Count == 7);
            Assert.IsTrue(ve.EventFields.GetString(0) == "Hello world");
            Assert.IsTrue(ve.EventFields.GetString(1) == String.Empty);
            Assert.IsTrue(ve.EventFields.GetString(2) == " ");
            Assert.IsTrue(ve.EventFields.GetString(3) == bigstring);

            byte[] bytesOut = ve.EventFields.GetBytes(4);
            Assert.IsTrue(
                bytesOut[0] == 0 && 
                bytesOut[1] == 2 &&
                bytesOut[2] == 4 &&
                bytesOut[3] == 6 &&
                bytesOut[4] == 8 &&
                bytesOut[5] == 10 &&
                bytesOut.Length == 6);

            Assert.IsTrue(ve.EventFields.GetGuid(5) == guid);
            Assert.IsTrue(ve.EventFields.GetDateTime(6) == now);
        }

        [TestCase, Description("Test a VxEvent with special fields")]
        public void TestVxEvent_SpecialFields()
        {
            MemoryStream ms = new MemoryStream(1000);

            // Use the easier VorexBinaryWriter
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            // Event headers
            bw.WriteBlob(new byte[0]); // producer 
            bw.Write7BitEncodedUInt64(10000);  // message id
            bw.Write7BitEncodedInt64((long)DateTime.UtcNow.ToFileTimeUtc());  // delta timestamp;

            SpecialField sf1 = new SpecialField()
            {
                Id = 1,
                Value = (int)-1
            };

            SpecialField sf2 = new SpecialField()
            {
                Id = 10,
                Value = "Foo bar"
            };

            SpecialField sf3 = new SpecialField()
            {
                Id = 11,
                Value = null
            };

            // Fields.
            bw.WriteVxField(0, "Hello world");
            bw.WriteVxField(1, (uint)1);
            bw.WriteVxField(2, sf1);
            bw.WriteVxField(3, (short)-2);
            bw.WriteVxField(5, sf2);
            bw.WriteVxField(11, sf3);
            bw.WriteVxField(12, (int)1000);
            // Terminator
            bw.Write((byte)0);

            DumpStream(ms);
            ms.Position = 0;
            var ve = new VxEvent(new VortexBinaryReader(ms));
            Global.RO.Debug(ve.ToString());

            uint[] sfo = ve.EventFields.SpecialFieldOrdinals;

            Assert.IsTrue(ve.EventFields.Count == 7);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 12);
            Assert.IsTrue(sfo.Length == 3);
            Assert.IsTrue(sfo[0] == 2);
            Assert.IsTrue(sfo[1] == 5);
            Assert.IsTrue(sfo[2] == 11);
            Assert.IsTrue(ve.EventFields.GetString(0) == "Hello world");
            Assert.IsTrue(ve.EventFields.GetUInt32(1) == (uint)1);
            Assert.IsTrue(ve.EventFields.GetInt16(3) == (short)-2);
            Assert.IsTrue(ve.EventFields.GetSpecialField(2).Id == 1);
            Assert.IsTrue((int)(long)ve.EventFields.GetSpecialField(2).Value == (int)-1);
            Assert.IsTrue(ve.EventFields.GetSpecialField(5).Id == 10);
            Assert.IsTrue((string)ve.EventFields.GetSpecialField(5).Value == (string)"Foo bar");
            Assert.IsTrue(ve.EventFields.GetSpecialField(11).Id == 11);
            Assert.IsTrue(ve.EventFields.GetSpecialField(11).Value == null);
            Assert.IsTrue(ve.EventFields.GetInt32(12) == (int)1000);
        }

        [TestCase, Description("Duplicate fields, out of order, and boundaries")]
        public void TestVxEvent_Fields()
        {
            DateTime now = DateTime.UtcNow;
            MemoryStream ms = new MemoryStream(1000);

            // Use the easier VorexBinaryWriter
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            // Event headers
            bw.WriteBlob(new byte[] { 0xFF }); // producer 
            bw.Write7BitEncodedUInt64(10000);  // message id
            bw.Write7BitEncodedInt64((long)now.ToFileTimeUtc());  // delta timestamp;

            // Out of order and duplicates.
            bw.WriteVxField(4, (int)4);
            bw.WriteVxField(0, (int)0);
            bw.WriteVxField(1, (int)1);
            bw.WriteVxField(4, (int)40);
            bw.WriteVxField(2, (int)2);
            bw.WriteVxField(255, (ushort)0xF00F);
            bw.WriteVxField(256, (short)30000);
            bw.WriteVxField(257, (ushort)0xF00F);

            // Boundaries of id and values.
            bw.WriteVxField(10, (uint)10);
            bw.WriteVxField(11, (uint)uint.MaxValue);
            bw.WriteVxField(uint.MinValue, "MinValue");
            bw.WriteVxField(536870911, "MaxValue");  // MaxValue - 3 bits

            try
            {
                bw.WriteVxField(536870912, "MaxValue+1");
                Assert.IsTrue(false);
            }
            catch (ArgumentOutOfRangeException)
            { }

            try
            {
                bw.WriteVxField(uint.MaxValue, "uint.MaxValue");
                Assert.IsTrue(false);
            }
            catch (ArgumentOutOfRangeException)
            { }

            bw.Write((byte)0);

            DumpStream(ms);
            ms.Position = 0;
            var ve = new VxEvent(new VortexBinaryReader(ms));

            Assert.IsTrue(ve.EventFields.Count == 10);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 536870911);

            Assert.IsTrue(ve.EventFields.GetInt32(1) == 1);
            Assert.IsTrue(ve.EventFields.GetInt32(2) == 2);
            Assert.IsTrue(ve.EventFields.GetInt32(4) == 40);
            Assert.IsTrue(ve.EventFields.GetString(536870911) == "MaxValue");
            Assert.IsTrue(ve.EventFields.GetString(uint.MinValue) == "MinValue");

            Assert.IsTrue(ve.EventFields.GetField(0) is string);
            Assert.IsTrue(ve.EventFields.GetString(0) == "MinValue");

            // Use object accessor
            Assert.IsTrue((uint)(ulong)ve.EventFields.GetField(10) == (uint)10);
            Assert.IsTrue((ulong)ve.EventFields.GetField(11) == uint.MaxValue);
            Assert.IsTrue((uint)Convert.ChangeType(ve.EventFields.GetField(10), typeof(uint)) == (uint)10);
            Assert.IsTrue((int)(uint)Convert.ChangeType(ve.EventFields.GetField(10), typeof(uint)) == (int)10);
            Assert.IsTrue((uint)(int)Convert.ChangeType(ve.EventFields.GetField(10), typeof(int)) == (uint)10);
            Assert.IsTrue((uint)Convert.ChangeType(ve.EventFields.GetField(11), typeof(uint)) == uint.MaxValue);
            try
            {
                // It is a uint, but being boxed as a UInt64
                Assert.IsTrue((uint)ve.EventFields.GetField(10) == 10);
                Assert.IsTrue(false);
            }
            catch (InvalidCastException) 
            { }
            try
            {
                // Can't convert a big uint to an int
                Convert.ChangeType(ve.EventFields.GetField(11), typeof(int));
                Assert.IsTrue(false);
            }
            catch (OverflowException) 
            { }

            // Check the string representation. We have a very large fieldid in here, 
            // which would normally cause a StackOverflow, but ToString() on the VxEvent 
            // is supposed to cap it at 256 fields.
            Global.RO.Debug(ve.ToString());
            string dt = now.ToString("yyyy/MM/dd HH:mm:ss.fff");
            string expected = String.Format("{0}|FF@10000|1|2||40||||||A|FFFFFFFF{1}|F00F|30000",
                                            dt, new String('|', 256 - 13));
            Global.RO.Debug(expected);
            Assert.IsTrue(ve.ToString() == expected);

            // OverflowException, @@@ investigate, not expected with the unchecked()
            //Assert.IsTrue(unchecked((int)Convert.ChangeType(ve.EventFields.GetField(11), 
            //typeof(int))) == int.MaxValue);
        }

        [TestCase, Description("Test RemoveField in VxEvent")]
        public void TestVxEvent_RemoveField()
        {
            MemoryStream ms = new MemoryStream(1000);

            // Use the easier VorexBinaryWriter
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            // Event headers
            bw.WriteBlob(new byte[0]); // producer 
            bw.Write7BitEncodedUInt64(10000);  // message id
            bw.Write7BitEncodedInt64((long)DateTime.UtcNow.ToFileTimeUtc());  // delta timestamp;

            SpecialField sf1 = new SpecialField()
            {
                Id = (uint)VxProtocol.VxSpecialFieldTypeId.VortexDeletedField,
                Value = (string)"MyLogStringId"
            };

            // Fields.
            bw.WriteVxField(1, (uint)1);
            bw.WriteVxField(2, sf1);
            bw.WriteVxField(3, (short)-2);
            bw.WriteVxField(4, (string)"hi");
            // Terminator
            bw.Write((byte)0);

            ms.Position = 0;
            var ve = new VxEvent(new VortexBinaryReader(ms));
            Global.RO.Debug(ve.ToString());

            Assert.IsTrue(ve.EventFields.Count == 4);

            // Middle, mainline case for SpecialField
            ve.EventFields.RemoveField(2, true);
            Global.RO.Debug("RemoveField(2, true): " + ve.ToString());
            Assert.IsTrue(ve.EventFields.Count == 3);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 3);
            Assert.IsTrue(ve.EventFields.GetUInt32(1) == (uint)1);
            Assert.IsTrue(ve.EventFields.GetInt16(2) == (short)-2);
            Assert.IsTrue(ve.EventFields.GetString(3) == "hi");

            // Last
            ve.EventFields.RemoveField(3, true);
            Global.RO.Debug("RemoveField(3, true): " + ve.ToString());
            Assert.IsTrue(ve.EventFields.Count == 2);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 2);
            Assert.IsTrue(ve.EventFields.GetUInt32(1) == (uint)1);
            Assert.IsTrue(ve.EventFields.GetInt16(2) == (short)-2);

            // Non-existant
            ve.EventFields.RemoveField(4, true);
            Global.RO.Debug("RemoveField(4, true): " + ve.ToString());
            Assert.IsTrue(ve.EventFields.Count == 2);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 2);
            Assert.IsTrue(ve.EventFields.GetUInt32(1) == (uint)1);
            Assert.IsTrue(ve.EventFields.GetInt16(2) == (short)-2);

            // First, no shift
            ve.EventFields.RemoveField(1, false);
            Global.RO.Debug("RemoveField(1, false): " + ve.ToString());
            Assert.IsTrue(ve.EventFields.Count == 1);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 2);
            Assert.IsTrue(ve.EventFields.GetInt16(2) == (short)-2);

            // No more fields
            ve.EventFields.RemoveField(2, true);
            Global.RO.Debug("RemoveField(2, true): " + ve.ToString());
            Assert.IsTrue(ve.EventFields.Count == 0);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 0);

        }

        private VxEvent MakeRemoveFieldOutOfOrder()
        {
            MemoryStream ms = new MemoryStream(1000);

            // Use the easier VorexBinaryWriter
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            // Event headers
            bw.WriteBlob(new byte[0]); // producer 
            bw.Write7BitEncodedUInt64(10000);  // message id
            bw.Write7BitEncodedInt64((long)DateTime.UtcNow.ToFileTimeUtc());  // delta timestamp;

            SpecialField sf1 = new SpecialField()
            {
                Id = (uint)VxProtocol.VxSpecialFieldTypeId.VortexDeletedField,
                Value = (string)"MyLogStringId"
            };

            // Fields.
            bw.WriteVxField(1, (uint)1);
            bw.WriteVxField(3, (short)-2);
            bw.WriteVxField(2, sf1);
            // gap
            bw.WriteVxField(5, (string)"hi");
            // Terminator
            bw.Write((byte)0);

            ms.Position = 0;
            var ve = new VxEvent(new VortexBinaryReader(ms));
            return ve;
        }

        [TestCase, Description("Test RemoveField in VxEvent with out-of-order fields")]
        public void TestVxEvent_RemoveField_OutOfOrder()
        {
            VxEvent ve = MakeRemoveFieldOutOfOrder();
            Global.RO.Debug(ve.ToString());

            Assert.IsTrue(ve.EventFields.Count == 4);

            // Middle, mainline case for SpecialField
            ve.EventFields.RemoveField(2, true);
            Global.RO.Debug("RemoveField(2, true): " + ve.ToString());
            Assert.IsTrue(ve.EventFields.Count == 3);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 4);
            Assert.IsTrue(ve.EventFields.GetUInt32(1) == (uint)1);
            Assert.IsTrue(ve.EventFields.GetInt16(2) == (short)-2);
            Assert.IsTrue(ve.EventFields.GetString(4) == "hi");

            // Last (reset)
            ve = MakeRemoveFieldOutOfOrder();
            ve.EventFields.RemoveField(5, true);
            Global.RO.Debug("RemoveField(5, true): " + ve.ToString());
            Assert.IsTrue(ve.EventFields.Count == 3);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 3);
            Assert.IsTrue(ve.EventFields.GetUInt32(1) == (uint)1);
            Assert.IsTrue(ve.EventFields.GetSpecialField(2) != null);
            Assert.IsTrue(ve.EventFields.GetInt16(3) == (short)-2);

            // Non-existant (reset)
            ve = MakeRemoveFieldOutOfOrder();
            ve.EventFields.RemoveField(4, true);
            Global.RO.Debug("RemoveField(4, true): " + ve.ToString());
            Assert.IsTrue(ve.EventFields.Count == 4);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 5);
            Assert.IsTrue(ve.EventFields.GetUInt32(1) == (uint)1);
            Assert.IsTrue(ve.EventFields.GetSpecialField(2) != null);
            Assert.IsTrue(ve.EventFields.GetInt16(3) == (short)-2);
            Assert.IsTrue(ve.EventFields.GetString(5) == "hi");

            // First, no shift (reset)
            ve = MakeRemoveFieldOutOfOrder();
            ve.EventFields.RemoveField(1, false);
            Global.RO.Debug("RemoveField(1, false): " + ve.ToString());
            Assert.IsTrue(ve.EventFields.Count == 3);
            Assert.IsTrue(ve.EventFields.MaxFieldOrdinal == 5);
            Assert.IsTrue(ve.EventFields.GetSpecialField(2) != null);
            Assert.IsTrue(ve.EventFields.GetInt16(3) == (short)-2);
            Assert.IsTrue(ve.EventFields.GetString(5) == "hi");

        }

        [TestCase, Description("Test producer id in VxEvent")]
        public void TestVxEvent_Producer_Guid()
        {
            Guid guid = Guid.NewGuid();
            byte[] guidBytes = guid.ToByteArray();

            VxEvent vxevent = new VxEvent(guidBytes, 32, DateTime.FromFileTimeUtc(0));
            vxevent.EventFields.AddField(1, "Test");
            vxevent.EventFields.AddField(2, (int)-10000);
            
            // Serialize
            MemoryStream ms = new MemoryStream(1000);
            vxevent.WriteStream(new VortexBinaryWriter(ms));
            ms.Position = 0;

            // Deserialize and check
            var ve = new VxEvent(new VortexBinaryReader(ms));
            Global.RO.Debug(ve.ToString());
            Assert.IsTrue(ve.ProducerId == guidBytes);
            Assert.IsTrue(ve.EventId == 32);
            Assert.IsTrue(ve.EventFields.Count == 2);
            Assert.IsTrue(ve.EventFields.SpecialFieldOrdinals.Length == 0);
            Assert.IsTrue(ve.EventFields.GetString(1) == "Test");
            Assert.IsTrue(ve.EventFields.GetInt32(2) == -10000);

            guidBytes[0] ^= 1;
            Assert.IsTrue(ve.ProducerId != guidBytes);
        }

        [TestCase, Description("Test producer id in VxEvent")]
        public void TestVxEvent_Producer_String()
        {
            string prodId = "IAmTheKing";
            byte[] prodIdBytes = Encoding.UTF8.GetBytes(prodId);

            VxEvent vxevent = new VxEvent(prodIdBytes, 32, DateTime.FromFileTimeUtc(0));
            vxevent.EventFields.AddField(1, "Test");
            vxevent.EventFields.AddField(2, (int)-10000);
            
            // Serialize
            MemoryStream ms = new MemoryStream(1000);
            vxevent.WriteStream(new VortexBinaryWriter(ms));
            ms.Position = 0;

            // Deserialize and check
            var ve = new VxEvent(new VortexBinaryReader(ms));
            Global.RO.Debug(ve.ToString());
            Assert.IsTrue(ve.ProducerId == prodIdBytes);
            Assert.IsTrue(ve.EventId == 32);
            Assert.IsTrue(ve.EventFields.Count == 2);
            Assert.IsTrue(ve.EventFields.SpecialFieldOrdinals.Length == 0);
            Assert.IsTrue(ve.EventFields.GetString(1) == "Test");
            Assert.IsTrue(ve.EventFields.GetInt32(2) == -10000);

            string prodId2 = Encoding.UTF8.GetString(ve.ProducerId);
            Assert.IsTrue(prodId2 == "IAmTheKing");
        }


        [TestCase, Description("Test VxEvent ToString functions")]
        public void TestVxEvent_ToString()
        {
            Guid guid = Guid.NewGuid();
            byte[] guidBytes = guid.ToByteArray();

            DateTime now = DateTime.UtcNow;
            VxEvent vxevent = new VxEvent(guidBytes, 32, now);
            vxevent.EventFields.AddField(1, (int)-10000);
            vxevent.EventFields.AddField(2, (uint)0xFFFE07D1);
            vxevent.EventFields.AddField(5, "Test string");
            vxevent.EventFields.AddField(4, new byte[] { 1, 2, 3, 4, 100, 101, 102, 255 });
            vxevent.EventFields.AddField(6, (int)10000);
            
            // Serialize
            MemoryStream ms = new MemoryStream(1000);
            vxevent.WriteStream(new VortexBinaryWriter(ms));
            ms.Position = 0;

            // Deserialize and check
            var ve = new VxEvent(new VortexBinaryReader(ms));
            Assert.IsTrue(ve.ProducerId == guidBytes);
            Assert.IsTrue(ve.EventId == 32);
            Assert.IsTrue(ve.LogStringId == String.Format("{0}@32", ((Blob)guidBytes).ToString()));
            Assert.IsTrue(ve.EventFields.Count == 5);
            Assert.IsTrue(ve.EventFields.GetInt32(1) == -10000);
            Assert.IsTrue(ve.EventFields.GetUInt32(2) == 0xFFFE07D1);
            Assert.IsTrue((Blob)ve.EventFields.GetBytes(4) == (Blob)new byte[] { 1, 2, 3, 4, 100, 101, 102, 255 });
            Assert.IsTrue(ve.EventFields.GetString(5) == "Test string");
            Assert.IsTrue(ve.EventFields.GetInt32(6) == 10000);

            string expected1 = String.Format("{0}|{1}@32|-10000|FFFE07D1||01020304646566FF|Test string|10000",
                                             now.ToString("yyyy/MM/dd HH:mm:ss.fff"), ((Blob)guidBytes).ToString());
            string expected2 = String.Format("{0}|LOGPREFIX|-10000|FFFE07D1||01020304646566FF|Test string|10000",
                                             now.ToString("yyyy/MM/dd HH:mm:ss.fff"), ((Blob)guidBytes).ToString());
            string s1 = ve.ToString(true);
            ve.LogStringId = "LOGPREFIX";
            string s2 = ve.ToString(true);
            Global.RO.Debug(s1);
            Global.RO.Debug(s2);

            Assert.IsTrue(s1 == expected1);
            Assert.IsTrue(s2 == expected2);
        }


        [TestCase, Description("Message with 1 basic event in it")]
        public void TestVxMessage_Basic()
        {
            DateTime now = DateTime.UtcNow;
            MemoryStream ms = new MemoryStream(1000);
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            // Protocol
            bw.Write((byte)1);  // 1=Etx
            // Etx headers
            bw.Write((long)now.ToFileTimeUtc());

            // Event headers
            bw.WriteBlob(new byte[0]); // producer 
            bw.Write7BitEncodedUInt64(1);  // message id
            bw.Write7BitEncodedInt64(0);  // delta timestamp;
            // EventFields.
            bw.WriteVxField(0, "Test2");
            bw.WriteVxField(2, (int)200);
            bw.WriteVxField(1, "Test1");
            bw.WriteVxField(3, (int)100);
            // Terminator
            bw.Write((byte)0);

            ms.Seek(0, SeekOrigin.Begin);
            var vxEvents = VxProtocol.ReadStream(ms);
            Assert.IsTrue(vxEvents.Count == 1);

            var ve = vxEvents[0];
            Assert.IsTrue(ve.EventId == 1);
            Assert.IsTrue(ve.EventFields.Count == 4);
            Assert.IsTrue(ve.EventFields.GetInt32(3) == 100);
            Assert.IsTrue(ve.EventFields.GetString(1) == "Test1");
            Assert.IsTrue(ve.EventFields.GetInt32(2) == 200);
            Assert.IsTrue(ve.EventFields.GetString(0) == "Test2");
        }

        [TestCase, Description("Message with 3 events in it, use generic object accessor")]
        public void TestVxMessage_3Events()
        {
            DateTime now = DateTime.UtcNow;
            MemoryStream ms = new MemoryStream(1000);
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            // Protocol
            bw.Write((byte)1);  // 1=Etx
            // Etx headers
            bw.Write((long)now.ToFileTimeUtc());

            // Event1 headers
            bw.WriteBlob(new byte[] { 1, 2 } ); // producer 
            bw.Write7BitEncodedUInt64(1);  // message id
            bw.Write7BitEncodedInt64(0);  // delta timestamp;
            // EventFields.
            bw.WriteVxField(0, "Test2");
            bw.WriteVxField(2, (uint)200);
            bw.WriteVxField(3, (ulong)ulong.MaxValue);
            // Terminator
            bw.Write((byte)0);

            // Event2 headers
            bw.WriteBlob(new byte[0]); // same producer 
            bw.Write7BitEncodedUInt64(2);  // message id
            bw.Write7BitEncodedInt64(1000);  // delta timestamp;
            // EventFields.
            bw.WriteVxField(0, "Test3");
            bw.WriteVxField(2, (int)300);
            bw.WriteVxField(4, (float)3.14);
            // Terminator
            bw.Write((byte)0);

            // Event3 headers
            bw.WriteBlob(new byte[] { 1, 3, 5 } ); // same producer 
            bw.Write7BitEncodedUInt64(3);  // message id
            bw.Write7BitEncodedInt64(-1000);  // delta timestamp;
            // EventFields.
            bw.WriteVxField(5, "Test4");
            // Terminator
            bw.Write((byte)0);

            ms.Seek(0, SeekOrigin.Begin);
            var vxEvents = VxProtocol.ReadStream(ms);
            Assert.IsTrue(vxEvents.Count == 3);

            var ve = vxEvents[0];
            Assert.IsTrue(ve.ProducerId == (Blob)(new byte[] { 1, 2 }));
            Assert.IsTrue(ve.EventId == 1);
            Assert.IsTrue(ve.EventFields.Count == 3);
            Assert.IsTrue((uint)(ulong)ve.EventFields.GetField(2) == 200);
            Assert.IsTrue(ve.EventFields.GetString(0) == "Test2");
            Assert.IsTrue((ulong)ve.EventFields.GetField(3) == ulong.MaxValue);

            ve = vxEvents[1];
            Assert.IsTrue(ve.ProducerId == (Blob)(new byte[] { 1, 2 }));
            Assert.IsTrue(ve.EventId == 2);
            Assert.IsTrue(ve.EventFields.Count == 3);
            Assert.IsTrue(ve.EventFields.GetString(0) == "Test3");
            Assert.IsTrue((int)(long)ve.EventFields.GetField(2) == 300);
            // stupid floats
            Assert.IsTrue((float)ve.EventFields.GetField(4) > 3.13 && (float)ve.EventFields.GetField(4) < 3.15);

            ve = vxEvents[2];
            Assert.IsTrue(ve.ProducerId == (Blob)(new byte[] { 1, 3, 5 }));
            Assert.IsTrue(ve.EventId == 3);
            Assert.IsTrue(ve.EventFields.Count == 1);
            Assert.IsTrue(ve.EventFields.GetString(5) == "Test4");

            Assert.IsTrue(vxEvents[0].Timestamp == now);
            Assert.IsTrue(vxEvents[1].Timestamp > now);
            Assert.IsTrue(vxEvents[2].Timestamp < now);
        }

        [TestCase, Description("Message with 2 events in it, use generic object accessor, and include extra bytes at the end")]
        public void TestVxMessage_2Events_ExtraLong()
        {
            DateTime now = DateTime.UtcNow;
            MemoryStream ms = new MemoryStream(1000);
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            // Protocol
            bw.Write((byte)1);  // 1=Etx
            // Etx headers
            bw.Write((long)now.ToFileTimeUtc());

            // Event1 headers
            bw.WriteBlob(new byte[0]); // producer 
            bw.Write7BitEncodedUInt64(1);  // message id
            bw.Write7BitEncodedInt64(0);  // delta timestamp;
            // EventFields.
            bw.WriteVxField(0, (uint)200);
            // Terminator
            bw.Write((byte)0);

            // Event2 headers
            bw.WriteBlob(new byte[0]); // producer 
            bw.Write7BitEncodedUInt64(2);  // message id
            bw.Write7BitEncodedInt64(0);  // delta timestamp;
            // EventFields.
            bw.WriteVxField(0, "Test3");
            bw.WriteVxField(2, (int)300);
            // Terminator
            bw.Write((byte)0);

            // Extra bytes. Should be interpreted as an invalid message.
            bw.Write((byte)4);

            ms.Seek(0, SeekOrigin.Begin);
            var vxEvents = VxProtocol.ReadStream(ms);
            Assert.IsTrue(vxEvents.Count == 2);

            var ve = vxEvents[0];
            Assert.IsTrue(ve.EventId == 1);
            Assert.IsTrue(ve.EventFields.Count == 1);
            Assert.IsTrue((uint)(ulong)ve.EventFields.GetField(0) == 200);

            ve = vxEvents[1];
            Assert.IsTrue(ve.EventId == 2);
            Assert.IsTrue(ve.EventFields.Count == 2);
            Assert.IsTrue(ve.EventFields.GetString(0) == "Test3");
            Assert.IsTrue((int)(long)ve.EventFields.GetField(2) == 300);
        }

        [ThreadStatic]
        static MemoryStream _MessageStreamWith2Events = null;

        [StressTest]
        [TestCase, Description("Read a message with 2 events, each with 10 fields, 10,000 times")]
        public void DeserializeMessage_2Events_10000X()
        {
            if (_MessageStreamWith2Events == null)
            {
                Global.RO.Info("Initializing message...");

                DateTime now = DateTime.UtcNow;
                MemoryStream ms = new MemoryStream(1000);
                VortexBinaryWriter bw = new VortexBinaryWriter(ms);

                // Protocol
                bw.Write((byte)1);  // 1=Etx
                // Etx headers
                bw.Write((long)now.ToFileTimeUtc());

                // Event1 headers
                bw.WriteBlob(new byte[0]); // producer 
                bw.Write7BitEncodedUInt64(1);  // message id
                bw.Write7BitEncodedInt64(0);  // delta timestamp;
                // EventFields.
                bw.WriteVxField(1, "Test1");
                bw.WriteVxField(10, (int)100);
                bw.WriteVxField(0, "Test2");
                bw.WriteVxField(2, (int)200);
                bw.WriteVxField(3, (uint)3);
                bw.WriteVxField(4, (float)4);
                bw.WriteVxField(5, (uint)uint.MaxValue);
                bw.WriteVxField(6, (byte)6);
                bw.WriteVxField(7, (int)-1000);
                bw.WriteVxField(8, "Bigger string with some spaces 'n stuff in it");
                // Terminator
                bw.Write((byte)0);

                // Event2 headers
                bw.WriteBlob(new byte[0]); // producer 
                bw.Write7BitEncodedUInt64(2);  // message id
                bw.Write7BitEncodedInt64(0);  // delta timestamp;
                // EventFields.
                bw.WriteVxField(0, "Test3");
                bw.WriteVxField(1, (int)300);
                bw.WriteVxField(2, (uint)200000);
                bw.WriteVxField(3, (long)3);
                bw.WriteVxField(4, (ulong)4);
                bw.WriteVxField(5, (int)int.MaxValue);
                bw.WriteVxField(6, (byte)6);
                bw.WriteVxField(7, (ushort)7);
                bw.WriteVxField(8, (byte)byte.MaxValue);
                bw.WriteVxField(10000, (uint)11);
                // Terminator
                bw.Write((byte)0);

                _MessageStreamWith2Events = ms;
            }

            long startTime = Timing.QueryPerformanceCounter();
            for (int i = 0; i < 10000; i++)
            {
                _MessageStreamWith2Events.Seek(0, SeekOrigin.Begin);
                var vxEvents = VxProtocol.ReadStream(_MessageStreamWith2Events);
                Assert.IsTrue(vxEvents.Count == 2);

                var ve = vxEvents[0];
                Assert.IsTrue(ve.EventId == 1);
                Assert.IsTrue(ve.EventFields.Count == 10);
                Assert.IsTrue(ve.EventFields.GetInt32(10) == 100);
                Assert.IsTrue(ve.EventFields.GetString(1) == "Test1");
                Assert.IsTrue(ve.EventFields.GetString(0) == "Test2");
                Assert.IsTrue(ve.EventFields.GetInt32(2) == 200);
                Assert.IsTrue(ve.EventFields.GetUInt32(3) == 3);
                Assert.IsTrue(ve.EventFields.GetSingle(4) == 4);
                Assert.IsTrue(ve.EventFields.GetUInt32(5) == uint.MaxValue);
                Assert.IsTrue(ve.EventFields.GetByte(6) == 6);
                Assert.IsTrue(ve.EventFields.GetInt32(7) == -1000);
                Assert.IsTrue(ve.EventFields.GetString(8) == "Bigger string with some spaces 'n stuff in it");

                ve = vxEvents[1];
                Assert.IsTrue(ve.EventId == 2);
                Assert.IsTrue(ve.EventFields.Count == 10);
                Assert.IsTrue(ve.EventFields.GetString(0) == "Test3");
                Assert.IsTrue(ve.EventFields.GetInt32(1) == 300);
                Assert.IsTrue(ve.EventFields.GetUInt32(2) == 200000);
                Assert.IsTrue(ve.EventFields.GetInt64(3) == 3);
                Assert.IsTrue(ve.EventFields.GetUInt64(4) == 4);
                Assert.IsTrue(ve.EventFields.GetInt32(5) == int.MaxValue);
                Assert.IsTrue(ve.EventFields.GetByte(6) == 6);
                Assert.IsTrue(ve.EventFields.GetUInt16(7) == 7);
                Assert.IsTrue(ve.EventFields.GetByte(8) == byte.MaxValue);
                Assert.IsTrue(ve.EventFields.GetUInt32(10000) == 11);
            }
            long stopTime = Timing.QueryPerformanceCounter();
            double elapsedSeconds = Timing.CalculatePerformanceDelta(startTime, stopTime);
            Global.RO.Debug("1000X: Elapsed ms: {0}, Elapsed ticks: {1}", elapsedSeconds * 1000, (stopTime - startTime));
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\rpttargetcs\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\plugins\ProvisionPluginTest.cs ===
// 
// ProvisioningTest.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Xbox Online Service
// 

using System;
using System.Collections;
using System.Data;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.plugins;
//using xonline.common.protocol;
//using xonline.common.service;
//using xonline.server.cron.plugins;
//using xonline.server.cron.plugins.cronlib;
//using xonline.server.cron.plugins.provisioning;



namespace xonline.common.plugins
{
    //
    // NOTE: IN ORDER FOR ALL TESTS TO WORK:
    //       - CRON MUST BE RUNNING
    //       - EXECUTION INTERVAL MUST BE SET LONG ENOUGH FOR THE TEST TO FIND NEW TASKS BEFORE THEY're PROCESSED
    //

    //tests the string creation class
    //- check parameters
    //- confirm string is correct for each type
    // I know, for one line of real code this seems a bit much, but this function 
    // creates a string which is critical to the operation of this feature... 
    // plus, the string may change in the future... 
    [TestGroup]
    public class ProvisioningJobNameTest : TestNode
    {

        [Test]
        public void BadZeroEventParameter()
        {
            Console.WriteLine( "Starting BadZeroEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateProvisioningJobName( 0, 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Zero event value not caught." );
            }
        }

        [Test]
        public void BadMaxEventParameter()
        {
            Console.WriteLine( "BadMaxEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateProvisioningJobName( ( ProvisioningEvent.MaxEvent + 1 ), 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Max event value not caught." );
            }
        }

        [Test]
        public void BadZeroPUIDParameter()
        {
            Console.WriteLine( "Starting BadZeroPUIDParameter" );
            //can't be 0, 
            //type checking prevents negative PUID, so no worries about that case
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 0, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Zero PUID parameter not caught." );
            }

        }

        [Test]
        public void BadMinPUIDParameter()
        {
            Console.WriteLine( "Starting BadMinPUIDParameter" );
            //can't be less than MinValue of PUID
            //type checking makes sure it's less than max PUID ... ;-)
            bool caughtException = false;
            try
            {   
                //try a PUID one less than our PUID range
                string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 2533274790395903, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Undervalue PUID not caught." );
            }

        }

        [Test]
        public void BadSvcComponentParameter()
        {
            Console.WriteLine( "Starting BadSvcComponentParameter" );
            //string of length ???
            bool caughtException = false;
            try
            {   
                //try a PUID one less than our PUID range
                string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 2533274790395914, "JCUC" );
            }
            catch ( InvalidProvisioningTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Short service component ID not caught." );
            }            
        }

        //Yeah, this is probably overkill, BUT, I'll be relying on the format of this
        // string to search for stuff, so it's pretty important this format doesn't change casually.
        [Test]
        public void ProvisioningEventIDStringMatch()
        {
            Console.WriteLine( "Starting ProvisioningEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Provision, 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Provision + " PUID=2533274790395914 " + ProvConst.bstrServiceComponentId + "=BBBE8103-BB3C-40CD-96BD-A37A7CA73314";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Provision Event String did not match." );
            }
        }

        [Test]
        public void DeprovisioningEventIDStringMatch()
        {
            Console.WriteLine( "Starting DeprovisioningEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Deprovision, 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Deprovision + " PUID=2533274790395914 " + ProvConst.bstrServiceComponentId + "=BBBE8103-BB3C-40CD-96BD-A37A7CA73314";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Deprovision Event String did not match." );
            }
        }

        [Test]
        public void DisableServiceEventIDStringMatch()
        {
            Console.WriteLine( "Starting DisableServiceEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Disable, 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Disable + " PUID=2533274790395914 " + ProvConst.bstrServiceComponentId + "=BBBE8103-BB3C-40CD-96BD-A37A7CA73314";
            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Disable Event String did not match." );
            }
        }

        [Test]
        public void EnableServiceEventIDStringMatch()
        {
            Console.WriteLine( "Starting EnableServiceEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateProvisioningJobName( ProvisioningEvent.Enable, 2533274790395914, "BBBE8103-BB3C-40CD-96BD-A37A7CA73314" );
            string expectedResult = ProvConst.ProvisionJobPreface + ProvisioningEvent.Enable + " PUID=2533274790395914 " + ProvConst.bstrServiceComponentId + "=BBBE8103-BB3C-40CD-96BD-A37A7CA73314";
            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                throw new Exception( "Enable Event String did not match." );
            }
        }

    }



    [TestGroup]
    public class ServiceJobNameTest : TestNode
    {
        //tasks going to a service-specific plug-in
        //they get the same info as provisioning plus an "action ID" from NPDB

//        //what tests should I have here?
//        [Test]
//        public void BadActionParameter()
//        {
//            Console.WriteLine( "Starting BadActionParameter" );
//            // can't be negative
//            bool caughtException = false;
//            try
//            {
//                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
//                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1 );
//            }
//            catch ( InvalidServiceTaskNameException )
//            {
//                caughtException = true;
//                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
//            }
//
//            if ( !caughtException )
//            {
//                throw new Exception( "Bad Action parameter not caught." );
//            }
//        }

        [Test]
        public void BadZeroEventParameter()
        {
            Console.WriteLine( "Starting BadZeroEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( 0, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Bad ZeroEvent parameter not caught." );
            }
        }

        [Test]
        public void BadMaxEventParameter()
        {
            Console.WriteLine( "Starting BadMaxEventParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ( ProvisioningEvent.MaxEvent + 1 ), 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Bad MaxEvent parameter not caught." );
            }
        }

        [Test]
        public void BadZeroPUIDParameter()
        {
            Console.WriteLine( "Starting BadZeroPUIDParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 0, "JCUCAAAAAAABAAEA", "Teams", 1 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "BadZeroPUIDParameter not caught." );
            }
        }

        [Test]
        public void BadMinPUIDParameter()
        {
            Console.WriteLine( "Starting BadActionParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395903, "JCUCAAAAAAABAAEA", "Teams", 21 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Bad Action parameter not caught." );
            }
        }

        [Test]
        public void BadSvcComponentParameter()
        {
            Console.WriteLine( "Starting BadSvcComponentParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395914, "", "Teams", 21 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "BadSvcComponentParameter not caught." );
            }
        }

        [Test]
        public void BadServiceParameter()
        {
            Console.WriteLine( "Starting BadServiceParameter" );
            // can't be negative
            bool caughtException = false;
            try
            {
                //CreateServiceSpecificJobName( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395914, "JCUCAAAAAAABAAEA", "", 21 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidServiceTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "BadServiceParameter not caught." );
            }
        }

        //this one reflects a real bug I found during testing!
        //t_cron_jobs.vc_name only allows 100 characters... 
        [Test]
        public void SvcTaskLengthMax()
        {

            Console.WriteLine( "Starting Long Name test..." );
            // can't be negative
            bool caughtException = false;
            try
            {
                string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395914, "JCUCAAAAAAABAAEA", "0123456789012345678901234567890123456789", 1 );
            }
            catch ( InvalidServiceTaskNameException )
            {
                caughtException = true;
                Console.WriteLine( "Caught InvalidProvisioningTaskNameException." );
            }

            if ( !caughtException )
            {
                throw new Exception( "Long service task name not caught." );
            }

        } // max length


        //Positive Cases

        //Yeah, this is probably overkill, BUT, I'll be relying on the format of this
        // string to search for stuff, so it's pretty important this format doesn't change casually.
        [Test]
        public void SvcStringMatchProvisioning()
        {
            Console.WriteLine( "Starting ProvisioningEventIDStringMatch" );
                                                                        // ( ProvisioningEvent eventType, long puid, string svcComponentID, string service, byte svcAction )
            string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Provision, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1 );
            string expectedResult = ProvConst.ServiceJobPreface + " " + (int) ProvisioningEvent.Provision + " " + ProvConst.PUIDKey + "=2533274790395914 " + ProvConst.bstrServiceComponentId + "=JCUCAAAAAAABAAEA " + ProvConst.SvcPreface + "=Teams " + ProvConst.SvcActionPreface + "=1";
                                    
            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                Console.WriteLine( "receieved: " + testString );
                Console.WriteLine( "expected : " + expectedResult );
                throw new Exception( "Provision Event String did not match." );
            }
        }

        [Test]
        public void SvcStringMatchDeprovisioning()
        {
            Console.WriteLine( "Starting DeprovisioningEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Deprovision, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1  );
            string expectedResult = ProvConst.ServiceJobPreface + " " + (int) ProvisioningEvent.Deprovision + " " + ProvConst.PUIDKey + "=2533274790395914 " + ProvConst.bstrServiceComponentId + "=JCUCAAAAAAABAAEA " + ProvConst.SvcPreface + "=Teams " + ProvConst.SvcActionPreface + "=1";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                Console.WriteLine( "receieved: " + testString );
                Console.WriteLine( "expected : " + expectedResult );
                throw new Exception( "Deprovision Event String did not match." );
            }
        }

        [Test]
        public void SvcStringMatchDisable()
        {
            Console.WriteLine( "Starting DisableServiceEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Disable, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1  );
            string expectedResult = ProvConst.ServiceJobPreface + " " + (int) ProvisioningEvent.Disable + " " + ProvConst.PUIDKey + "=2533274790395914 " + ProvConst.bstrServiceComponentId + "=JCUCAAAAAAABAAEA " + ProvConst.SvcPreface + "=Teams " + ProvConst.SvcActionPreface + "=1";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                Console.WriteLine( "receieved: " + testString );
                Console.WriteLine( "expected : " + expectedResult );
                throw new Exception( "Disable Event String did not match." );
            }
        }

        [Test]
        public void SvcStringMatchEnable()
        {
            Console.WriteLine( "Starting EnableServiceEventIDStringMatch" );

            string testString = ProvisioningUtil.CreateServiceSpecificJobName( ProvisioningEvent.Enable, 2533274790395914, "JCUCAAAAAAABAAEA", "Teams", 1  );
            string expectedResult = ProvConst.ServiceJobPreface + " " + (int) ProvisioningEvent.Enable + " " + ProvConst.PUIDKey + "=2533274790395914 " + ProvConst.bstrServiceComponentId + "=JCUCAAAAAAABAAEA " + ProvConst.SvcPreface + "=Teams " + ProvConst.SvcActionPreface + "=1";

            if ( String.Compare( testString, expectedResult ) != 0 )
            {
                Console.WriteLine( "receieved: " + testString );
                Console.WriteLine( "expected : " + expectedResult );
                throw new Exception( "Enable Event String did not match." );
            }
        }

    }


} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\puidmgr\PuidMgrDevTest.cs ===
using System;
using System.Net;

using ServerTestFramework;

using xonline.common.puidmgr;
using xonline.common.config;
using xonline.common.diagnostics;

namespace ServerTestFramework.LiveService.common.config.PuidMgr
{
    /// <summary>
    /// This whole testGroup is a DVT test, which means any testCase in 
    /// this group is a DVT testCase even though they don't have a DVT
    /// attribute associated with it
    /// </summary>
    [TestGroup, DVT]
    public class PuidMgrTestBaseGroup : TestNode
    {
        [TestCase]
        public void GetNewPUID()
        {
            ulong puid = PUIDMgr.GetNewPUID();

            Assert.IsTrue(puid != 0);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\rpttarget\stdafx.h ===
// Copyright (c) Microsoft Corporation.  All rights reserved

// stdafx.h : include file for standard system include files,
//  or project specific include files that are used frequently, but
//      are changed infrequently
//

#pragma once


#ifdef UNICODE
#undef UNICODE
#endif

#ifdef _UNICODE
#undef _UNICODE
#endif

// Disable warning: unreferenced formal parameter
#pragma warning( disable : 4100 )
// Disable warning: conditional expression is constant
#pragma warning( disable : 4127 )

#define INCL_WINSOCK_API_TYPEDEFS 1
#include <windows.h>
#include <winsock2.h>
#include <wininet.h>
#include <stdio.h>
#include <stdlib.h>
#include <icecap.h>

#import "CommonConfig.tlb" raw_interfaces_only, no_smart_pointers
using namespace XblConfig;


#include "xboxverp.h"
#include "wmsstd.h"
#include "xalloc.h"
#include "xmgmt.h"
#include "wsockntp.h"
#include "xonlinep.h"
#include "servsock.h"
#include "tcpcnt.h"
#include "xeventids.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\protocol\wiredatatest.cs ===
using System;
using System.IO;
using System.Reflection;
using System.Collections;
using System.Text;

using ServerTestFramework;
using WD = xonline.common.service.reflection;
using xonline.common.protocol;
using CG = xonline.common.service;
using xonline.common.service;

namespace xonline.common.test.protocol
{

    public struct SimpleStruct
    {
        public int x;

    }

    public struct StructEx
    {
        public int x;
        public override string ToString()
        {
            return " { x=" + x + " }";
        }
    }

    public sealed class SimpleData : CG.WireData
    {
        public int val = 10;
    }

    public sealed class CustomType<T>
    {
        T val;

        public CustomType(T x)
        {
            val = x;
        }

        public static explicit operator CustomType<T>(T value)
        {
            return new CustomType<T>(value);
        }

        public static explicit operator T(CustomType<T> value)
        {
            return value != null ? value.val : default(T);
        }
    }

    public sealed class GamertagData : CG.WireData
    {
        [CG.WireInfo(ArraySize=16)]
        public string gamertag;

        public GamertagData()
        { }

        public GamertagData(string s)
        { gamertag = s; }

        public static explicit operator string(GamertagData d)
        {
            return d != null ? d.gamertag : null;
        }

        public static implicit operator GamertagData(string s)
        {
            return s != null ? new GamertagData(s) : null;
        }
    }

    public class WireSubClass : WD.WireData
    {
        public int str1Len;

        [WD.WireInfo(NullTerminate = true)]
        public string str1;

        public int len2;

        [WD.WireInfo(SizeParam = "len2")]
        public string str2;

        [WD.WireInfo(MinSchemaVersion="2.0")]
        public int newVal;

        [WD.WireInfo(MaxSchemaVersion="2.0")]
        public int oldVal;

        [WD.WireInfo(MinSchemaVersion = "1.3", MaxSchemaVersion = "2.4")]
        public long tempVal;

        public override void WriteStream(BinaryWriter bw)
        {
            base.WriteStream(bw);
        }
        public override WD.WireData ReadStream(BinaryReader br)
        {
            return base.ReadStream(br);
        }
    }

    public class WireDataTestClass : WD.WireData
    {
        public bool boolVal;
        public byte byteVal;
        public char charVal;
        public decimal decVal;
        public double dblVal;
        public short shVal;

        [WD.WireInfo(Min=10, Max=40)]
        public int iVal;

        public long lVal;
        public sbyte sbVal;
        public float fVal;
        public ushort usVal;

        [WD.WireInfo(HexString=true)]
        public uint uiVal;
        public ulong ulVal;
        public DateTime dtVal;
        public Guid gVal;

        [WD.WireInfo(SizeParam="lVal", HexString=true)]
        public byte[] bzVal;

        public WireSubClass subClass;

        public int subArrayLen;
        public WireSubClass[] subArray;

        public int len;
        [WD.WireInfo(SizeParam="len", ArraySize=10)]
        public int[] subInts;
    }

    public class WireCGSubClass : CG.WireData
    {
        public int str1Len;

        [CG.WireInfo(NullTerminate = true)]
        public string str1;

        public int len2;

        [CG.WireInfo(SizeParam = "len2", LimitString=true)]
        public string str2;

        [CG.WireInfo(MinSchemaVersion="2.0")]
        public int newVal;

        [CG.WireInfo(MaxSchemaVersion = "2.0")]
        public int oldVal;

        [CG.WireInfo(MinSchemaVersion = "1.3", MaxSchemaVersion = "2.4")]
        public long tempVal;

        [CG.WireInfo(ArraySize = 100, MaskString = true)]
        public string str3;

        [CG.WireInfo(ArraySize = 10, NullTerminate = true)]
        public string str4;

        [CG.WireInfo(ArraySize = 2, SerializeAs = typeof(GamertagData))]
        public string[] strGamertags;

        public override void WriteStream(BinaryWriter bw)
        {
            base.WriteStream(bw);
        }
        //public override CG.WireData ReadStream(BinaryReader br)
        //{
        //    return base.ReadStream(br);
        //}
    }

    public class ByteSwapSubClass : CG.WireData
    {
        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public short shVal;
        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public ushort usVal;

        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public int iVal;
        [CG.WireInfo(BigEndian = true, HexString = true, MaskString = true)]
        public uint uiVal;

        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public long lVal;
        [CG.WireInfo(BigEndian = true, HexString = true, MaskString = true)]
        public ulong ulVal;

        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public float flVal;
        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public double dbVal;

        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public DateTime dtVal;
        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public BindingFlags flagVal;
        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public HResult hr;
        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public TitleId title;
        [CG.WireInfo(BigEndian = true, MaskString = true)]
        public Puid puid;
        [CG.WireInfo(BigEndian = true)]
        public Guid guid;

        [CG.WireInfo(ArraySize = 100, MaskString = true)]
        public byte[] bzVal;

        [CG.WireInfo(BigEndian = true, ArraySize = 2, MaskString = true)]
        public int[] subInts;
        [CG.WireInfo(BigEndian = true, ArraySize = 2, MaskString = true)]
        public CG.HResult[] hrs;
        [CG.WireInfo(BigEndian = true, ArraySize = 2, MaskString = true)]
        public CG.TitleId[] titles;
        [CG.WireInfo(BigEndian = true, ArraySize = 2, MaskString = true)]
        public CG.Puid[] puids;
        [CG.WireInfo(BigEndian = true, ArraySize = 2)]
        public Guid[] guids;
    }

    public class WireDataCGTestClass : CG.WireData
    {
        public bool boolVal;
        public byte byteVal;
        public char charVal;
        public decimal decVal;
        public double dblVal;
        public short shVal;

        [CG.WireInfo(Min = 10, Max = 40)]
        public int iVal;

        public long lVal;
        public sbyte sbVal;
        public float fVal;
        public ushort usVal;

        [CG.WireInfo(HexString = true, Min = 1)]
        public uint uiVal;
        [CG.WireInfo(HexString = true, LimitString = true)]
        public ulong ulVal;
        public DateTime dtVal;
        public Guid gVal;
        public BindingFlags flagVal;
        public HResult hr;
        public TitleId title;
        public Puid puid;

        [CG.WireInfo(Serialize = false)]
        public SimpleStruct structVal;

        [CG.WireInfo(SerializeAs = typeof(int))]
        public CustomType<int> ctInt;

        [CG.WireInfo(SerializeAs = typeof(Guid))]
        public CustomType<Guid> ctGuid;

        [CG.WireInfo(SerializeAs = typeof(SimpleData))]
        public CustomType<SimpleData> ctData;

        [CG.WireInfo(HexString = true, ArraySize = 100)]
        public byte[] bzVal;

        public WireCGSubClass subClass;

        public int subArrayLen;
        [CG.WireInfo(ArraySize = 2)]
        public WireCGSubClass[] subArray;

        public int len;
        [CG.WireInfo(SizeParam = "len", HexString = true)]
        public int[] subInts;

        public int len2;
        [CG.WireInfo(SizeParam = "len2")]
        public long[] subLongs;

        [CG.WireInfo(ArraySize = 2)]
        public long[] longs;

        [CG.WireInfo(ArraySize = 2)]
        public Guid[] guids;

        [CG.WireInfo(ArraySize = 2)]
        public DateTime[] dates;

        [CG.WireInfo(ArraySize = 2)]
        public Decimal[] decimals;

        [CG.WireInfo(ArraySize = 2)]
        public BindingFlags[] flags;

        [CG.WireInfo(ArraySize = 2)]
        public CG.HResult[] hrs;

        [CG.WireInfo(ArraySize = 2)]
        public CG.TitleId[] titles;

        [CG.WireInfo(ArraySize = 2)]
        public CG.Puid[] puids;

        [CG.WireInfo(SerializeAs = typeof(int), ArraySize = 2)]
        public CustomType<int>[] ctInts;

        [CG.WireInfo(SerializeAs = typeof(SimpleData), ArraySize = 2)]
        public CustomType<SimpleData>[] ctDatas;

        [CG.WireInfo(Serialize = false, ArraySize = 2)]
        public SimpleStruct[] structs = new SimpleStruct[2];

        [CG.WireInfo(Serialize = false, ArraySize = 2)]
        public StructEx[] structExs = new StructEx[2];

        [CG.WireInfo(MinSchemaVersion = "2.0")]
        public ByteSwapSubClass bSwapClass;
    }

    [xonline.core.wiredata.WireDataEncryption(AsOfSchemaVersion = "1.1")]
    public class WiredataEncryptionClass : CG.WireData
    {
    }

    [TestGroup, DVT]
    public class FuncSimpleGroup : TestNode
    {
        [TestCase, Description("TestWireData")]
        class TestWireData : TestBase
        {
            private void SetValue(xonline.common.service.WireData m)
            {
                if (m == null) return;
                FieldInfo[] fieldsRaw = m.GetType().GetFields();

                for (int i = 0; i < fieldsRaw.Length; i++) if (fieldsRaw[i].Name != "SchemaVersion")
                {
                    object[] customAttrs = fieldsRaw[i].GetCustomAttributes(typeof(xonline.common.service.WireInfoAttribute), false);
                    xonline.common.service.WireInfoAttribute wdattr = customAttrs.Length == 1 ? (xonline.common.service.WireInfoAttribute)customAttrs[0] : null;
                    if (fieldsRaw[i].IsLiteral) continue;
                    if (fieldsRaw[i].FieldType == typeof(string))
                    {
                        string s = "";
                        int x = 1;
                        if (wdattr != null && wdattr.SizeParam != null)
                        {
                            FieldInfo myFieldInfo = m.GetType().GetField(wdattr.SizeParam);
                            string ss = myFieldInfo.GetValue(m).ToString();
                            x = int.Parse(ss);
                            if (wdattr.NullTerminate)
                                myFieldInfo.SetValue(m, (ushort)(x + 1));

                        }
                        if (wdattr != null && wdattr.ArraySize != -1) x = wdattr.ArraySize;
                        for (int j = 0; j < x; j++) s += "a";
                        fieldsRaw[i].SetValue(m, s);
                    }
                    else
                        if (fieldsRaw[i].FieldType == typeof(DateTime))
                        {
                            fieldsRaw[i].SetValue(m, new DateTime(2007, 1, 1));
                        }
                        else
                            if (fieldsRaw[i].FieldType.IsArray)
                            {                                
                                Type elemType = fieldsRaw[i].FieldType.GetElementType();
                                int length = 1;

                                if (wdattr != null && wdattr.SizeParam != null)
                                {
                                    FieldInfo myFieldInfo = m.GetType().GetField(wdattr.SizeParam);
                                    string ss = myFieldInfo.GetValue(m).ToString();
                                    length = int.Parse(ss);
                                }
                                if (wdattr != null && wdattr.ArraySize != -1) length = wdattr.ArraySize;
                                Array a = Array.CreateInstance(elemType, length);
                                if (elemType.IsSubclassOf(typeof(xonline.common.service.WireData)))
                                {
                                    for (int j = 0; j < a.Length; j++)
                                    {
                                        xonline.common.service.WireData w = (xonline.common.service.WireData)elemType.GetConstructor(Type.EmptyTypes).Invoke(null);
                                        SetValue(w);
                                        a.SetValue(w, j);
                                    }
                                }
                                fieldsRaw[i].SetValue(m, a);
                            }
                            else if (fieldsRaw[i].FieldType.IsSubclassOf(typeof(xonline.common.service.WireData)))
                            {
                                xonline.common.service.WireData w = (xonline.common.service.WireData)fieldsRaw[i].FieldType.GetConstructor(Type.EmptyTypes).Invoke(null);
                                SetValue(w);
                                fieldsRaw[i].SetValue(m, w);
                            }
                            else
                            {
                                Type fieldType = fieldsRaw[i].FieldType;

                                long val = 1;
                                if (wdattr != null && wdattr.MaxSet) val = wdattr.Max;
                                if (wdattr != null && wdattr.MinSet) val = wdattr.Min;
                                if (wdattr == null || !wdattr.MinSet) val = 1;
                                string s = "" + val;

                                if (fieldType == typeof(sbyte)) fieldsRaw[i].SetValue(m, Convert.ToSByte(s));
                                if (fieldType == typeof(byte)) fieldsRaw[i].SetValue(m, Convert.ToByte(s));
                                if (fieldType == typeof(Int16)) fieldsRaw[i].SetValue(m, Convert.ToInt16(s));
                                if (fieldType == typeof(UInt16)) fieldsRaw[i].SetValue(m, Convert.ToUInt16(s));
                                if (fieldType == typeof(Int32)) fieldsRaw[i].SetValue(m, Convert.ToInt32(s));
                                if (fieldType == typeof(UInt32)) fieldsRaw[i].SetValue(m, Convert.ToUInt32(s));
                                if (fieldType == typeof(Int64)) fieldsRaw[i].SetValue(m, Convert.ToInt64(s));
                                if (fieldType == typeof(UInt64)) fieldsRaw[i].SetValue(m, Convert.ToUInt64(s));
                                if (fieldType == typeof(float)) fieldsRaw[i].SetValue(m, Convert.ToSingle(s));
                                if (fieldType == typeof(double)) fieldsRaw[i].SetValue(m, Convert.ToDouble(s));
                                if (fieldType == typeof(decimal)) fieldsRaw[i].SetValue(m, Convert.ToDecimal(s));
                                if (fieldsRaw[i].Name =="dwMsgLen" && m is BaseHeader)
                                {
                                    fieldsRaw[i].SetValue(m, (uint) 0);
                                }
                            }
                }
            }

            protected override void Execute()
            {
                TimeSpan totalTime = DateTime.Now - DateTime.Now;
                Assembly assembly = Assembly.GetExecutingAssembly();
                int failed = 0, total = 0;
                foreach (Type type in assembly.GetTypes())
                {
                    if (type.IsSubclassOf(typeof(xonline.common.service.WireData)))
                        //&& type.Name == "EnumerateMessagesMsg")
                    {
                        if (type.GetMethod("WriteStream", BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance) != null) continue;
                        if (type.GetMethod("ReadStream", BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance) != null) continue;
                        //Console.Write("Testing " + type + "...");
                        try
                        {
                            total++;
                            xonline.common.service.WireData w = (xonline.common.service.WireData)type.GetConstructor(Type.EmptyTypes).Invoke(null);
                            xonline.common.service.WireData wr = (xonline.common.service.WireData)type.GetConstructor(Type.EmptyTypes).Invoke(null);
                            SetValue(w);
                            DateTime start = DateTime.Now;
                            for (int k = 0; k < 1; k++)
                            {
                                MemoryStream ms = new MemoryStream();
                                BinaryWriter bw = new BinaryWriter(ms);
                                w.WriteStream(bw);

                                FileStream fs = File.OpenWrite("c:\\bulk\\" + type.Name + ".dat");
                                fs.Write(ms.GetBuffer(), 0, (int)ms.Position);
                                fs.Close();

                                BinaryReader br = new BinaryReader(ms);
                                ms.Seek(0, SeekOrigin.Begin);
                                wr.ReadStream(br);
                                if (type.Name == "ReportMessageBase" && k == 0)
                                    start = DateTime.Now;
                            }
                            TimeSpan ts = DateTime.Now - start;
                            //Console.WriteLine(type.Name + ", " + ts.TotalSeconds);
                            totalTime += ts;
                            //Console.WriteLine("passed");
                        }
                        catch
                        {
                            Console.WriteLine(type.Name + " failed");
                            failed++;
                        }
                    }
                }
                Console.WriteLine(totalTime);
                if (failed == 0) ResultCode = TEST_RESULTS.PASSED;
            }
        }

        //class MyReader : BinaryReader
        //{
        //    public MyReader(Stream s) : base(s) { }

        //    public override int ReadInt32()
        //    {
        //        Global.RO.Debug("Read Bytes");
        //        return base.ReadInt32();
        //    }
        //}

        [TestCase, Description("TestInternalWireData")]
        class TestInternalWireData : TestBase
        {

            //public event EventHandler newEvent;

            protected override void Execute()
            {
                CG.WireDataSerializerCache.GenerateSerializers("dynamicasm", this.GetType().Assembly, typeof(CG.WireData).Assembly);
                InitWireDataCG();
                // InitWireData();

                ResultCode = TEST_RESULTS.PASSED;
            }

            void InitWireDataCG()
            {
                WireDataCGTestClass test = new WireDataCGTestClass();

                test.boolVal = true;
                test.byteVal = 34;
                test.charVal = 'Z';
                test.decVal = 123.456M;
                test.dblVal = 456.789;
                test.shVal = 8192;
                test.iVal = 35;
                test.lVal = 10;
                test.sbVal = -1;
                test.fVal = 987.654F;
                test.usVal = 20000;
                test.uiVal = 0xBEEFFEED;
                test.ulVal = 0xBADDBEEF;
                test.dtVal = DateTime.Now;
                test.gVal = Guid.NewGuid();
                test.flagVal = BindingFlags.ExactBinding;
                test.hr = CG.HResult.XONLINE_E_SERVER_ERROR;
                test.title = XOn.FUSION_TITLE_ID;
                test.puid = 2L;
                test.ctInt = new CustomType<int>(1);
                test.ctGuid = new CustomType<Guid>(Guid.NewGuid());
                test.ctData = new CustomType<SimpleData>(new SimpleData());
                test.bzVal = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

                test.subClass = new WireCGSubClass();
                test.subClass.str1Len = 5;
                test.subClass.str1 = "hello";
                test.subClass.len2 = 7;
                test.subClass.str2 = "goodbye";
                test.subClass.newVal = 20;
                test.subClass.oldVal = 60;
                test.subClass.tempVal = 23;
                test.subClass.strGamertags = new string[] { "WhosDaMan", "ImDaMan" };
                //test.subClass.str4 = String.Empty;

                test.subArrayLen = 7;
                test.subArray = new WireCGSubClass[2];
                test.subArray[0] = new WireCGSubClass();
                test.subArray[0].str1Len = 7;
                test.subArray[0].str1 = "goodbye";
                test.subArray[0].len2 = 5;
                test.subArray[0].str2 = "hello";
                test.subArray[0].newVal = 30;
                test.subArray[0].oldVal = 70;
                test.subArray[0].tempVal = 32;
                test.subArray[0].strGamertags = new string[] { "XboxLive", "GreatestEver" };
                test.subArray[1] = test.subClass;

                test.len = 1;
                test.subInts = new int[1];
                test.subInts[0] = 0xbad;

                test.guids = new Guid[] { Guid.NewGuid(), Guid.Empty };

                test.hrs = new HResult[] { HResult.XONLINE_E_INVALID_REQUEST, HResult.XONLINE_E_ACCESS_DENIED };
                test.titles = new TitleId[] { XOn.DASH_TITLE_ID, XOn.PC_DASH_TITLE_ID };
                test.puids = new Puid[] { 0L, 1L };

                test.ctInts = new CustomType<int>[2] { (CustomType<int>)12, (CustomType<int>)20 };
                
                test.ctDatas = new CustomType<SimpleData>[2];
                test.ctDatas[0] = test.ctDatas[1] = (CustomType<SimpleData>)new SimpleData();

                test.bSwapClass = new ByteSwapSubClass();
                test.bSwapClass.iVal = 35;
                test.bSwapClass.lVal = 10;
                test.bSwapClass.usVal = 20000;
                test.bSwapClass.uiVal = 0xBEEFFEED;
                test.bSwapClass.ulVal = 0xBADDBEEF;
                test.bSwapClass.flVal = 1;
                test.bSwapClass.dbVal = 2.0;
                test.bSwapClass.dtVal = DateTime.Now;
                test.bSwapClass.flagVal = BindingFlags.ExactBinding;
                test.bSwapClass.hr = CG.HResult.XONLINE_E_SERVER_ERROR;
                test.bSwapClass.title = XOn.FUSION_TITLE_ID;
                test.bSwapClass.puid = 2L;
                test.bSwapClass.guid = Guid.NewGuid();
                test.bSwapClass.bzVal = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
                test.bSwapClass.hrs = new HResult[] { 0x80040005, HResult.XONLINE_E_ACCESS_DENIED };
                test.bSwapClass.titles = new TitleId[] { XOn.DASH_TITLE_ID, XOn.PC_DASH_TITLE_ID };
                test.bSwapClass.puids = new Puid[] { 0L, 1L };
                test.bSwapClass.guids = test.guids;

                
                byte[] bytes = (byte[])test;

                byte[] dumpBytes = (byte[])test.subClass;

                Global.RO.Debug("Subclass sizeOf=" + test.subClass.SerializedSize);
                Global.RO.Debug("Len=" + dumpBytes.Length);

                Global.RO.Debug("SizeOf=" + test.SerializedSize);
                Global.RO.Debug("Len="+bytes.Length);
                string s = xonline.common.service.ByteConvert.ToString(bytes);

                for (int i = 0; i <= s.Length / 64; i++)
                {
                    int strLen = Math.Min(s.Length - i * 64, 64);
                    if (strLen > 0)
                        Global.RO.Debug(String.Format("{0:D4}:{1}",i*64, s.Substring(i*64, strLen)));
                }

                WireDataCGTestClass test2 = new WireDataCGTestClass();
                //CG.WireData.fieldTrace += delegate(string s) { Global.RO.Debug("Reading " + s); };
                test2.ReadStream(new BinaryReader(new MemoryStream(bytes)));
                Global.RO.Info("\n" + test2.ToString());

                byte[] bytes2 = (byte[])test2;

                Global.RO.Debug("SizeOf=" + test2.SerializedSize);
                Global.RO.Debug("Len=" + bytes2.Length);
                s = xonline.common.service.ByteConvert.ToString(bytes2);

                for (int i = 0; i <= s.Length / 64; i++)
                {
                    int strLen = Math.Min(s.Length - i * 64, 64);
                    if (strLen > 0)
                        Global.RO.Debug(String.Format("{0:D4}:{1}", i * 64, s.Substring(i * 64, strLen)));
                }

                if (bytes.Length != bytes2.Length)
                {
                    throw new Exception(String.Format("Byte arrays do not match on second serialization -- lengths differ: {0}, {1}", bytes.Length, bytes2.Length));
                }

                //for (int i = 0; i < bytes.Length; i++)
                //{
                //    if (bytes[i] != bytes2[i])
                //    {
                //        throw new Exception(String.Format("Byte arrays do not match on second serialization -- offset {0} differs", i));
                //    }
                //}
            }

            void InitWireData()
            {
                WireDataTestClass test = new WireDataTestClass();

                test.boolVal = true;
                test.byteVal = 34;
                test.charVal = 'Z';
                test.decVal = 123.456M;
                test.dblVal = 456.789;
                test.shVal = 8192;
                test.iVal = 35;
                test.lVal = 10;
                test.sbVal = -1;
                test.fVal = 987.654F;
                test.usVal = 20000;
                test.uiVal = 0xBEEF;
                test.ulVal = 0xBADDBEEF;
                test.dtVal = DateTime.Now;
                test.gVal = Guid.NewGuid();
                test.bzVal = new byte[10];
                test.bzVal[0] = 0;
                test.bzVal[1] = 1;
                test.bzVal[2] = 2;
                test.bzVal[3] = 3;
                test.bzVal[4] = 4;
                test.bzVal[5] = 5;
                test.bzVal[6] = 6;
                test.bzVal[7] = 7;
                test.bzVal[8] = 8;
                test.bzVal[9] = 9;

                //test.subClass = new WireSubClass();
                //test.subClass.str1Len = 5;
                //test.subClass.str1 = "hello";
                //test.subClass.len2 = 7;
                //test.subClass.str2 = "goodbye";
                //test.subClass.newVal = 20;
                //test.subClass.oldVal = 60;
                //test.subClass.tempVal = 23;

                //test.subArrayLen = 2;
                //test.subArray = new WireSubClass[2];
                //test.subArray[0] = new WireSubClass();
                //test.subArray[0].str1Len = 7;
                //test.subArray[0].str1 = "goodbye";
                //test.subArray[0].len2 = 5;
                //test.subArray[0].str2 = "hello";
                //test.subArray[0].newVal = 30;
                //test.subArray[0].oldVal = 70;
                //test.subArray[0].tempVal = 32;
                //test.subArray[1] = test.subClass;

                //test.len = 1;
                //test.subInts = new int[1];
                //test.subInts[0] = 1234;

            }

            void Function(StringBuilder sb)
            {
                string a = "foo";
                int i = 1;
                sb.Append(a);
                sb.Append(a ?? "llama");
                sb.Append(a + "[" + i + "]=");
                long lla = DateTime.FromFileTimeUtc(0).ToFileTimeUtc();
            }
        }

        [TestCase, Description("TestWebSvcSerializer")]
        class TestWebSvcSerializer : TestBase
        {
            protected override void Execute()
            {
                Global.RO.Debug("Starting");
                LivecacheWebSvcRequest req = new LivecacheWebSvcRequest();
                req.NameValuePairs.Add(new WebServiceNameValuePair("foo", "bar"));
                req.NameValuePairs.Add(new WebServiceNameValuePair("bad&mojo", "value"));
                req.NameValuePairs.Add(new WebServiceNameValuePair("test=me", "today"));
                req.NameValuePairs.Add(new WebServiceNameValuePair("foo", "bar"));
                for (int i = 0; i < 1000; i++)
                {
                    req.NameValuePairs.Add(new WebServiceNameValuePair("name"+i, i.ToString()));
                }

                MemoryStream m = new MemoryStream();

                req.WriteStream(m);
                m.Position = 0;
                Global.RO.Debug(Encoding.UTF8.GetString(m.GetBuffer()));

                LivecacheWebSvcRequest confirm = new LivecacheWebSvcRequest();
                confirm.ReadStream(m);

                if (req.NameValuePairs.Count != confirm.NameValuePairs.Count)
                {
                    Global.RO.Error("Counts don't match! req=" + req.NameValuePairs.Count + ", confirm=" + confirm.NameValuePairs.Count);
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                Global.RO.Info("Counts match");

                for (int i = 0; i < req.NameValuePairs.Count; i++)
                {
                    WebServiceNameValuePair first = req.NameValuePairs[i];
                    WebServiceNameValuePair second = confirm.NameValuePairs[i];
                    if (first.name != second.name || first.value != second.value)
                    {
                        Global.RO.Error(String.Format("Entry {0} Doesn't match: first={1}, second={2}", i, first, second));
                        ResultCode = TEST_RESULTS.FAILED;
                        return;
                    }
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("TestWireDataEncryption attribute")]
        class TestEncryptionAttribute : TestBase
        {
            MethodBase encProp = typeof(CG.WireData).GetProperty("EncryptionRequired",
                                                                    BindingFlags.Instance | BindingFlags.NonPublic).GetGetMethod(true);
            bool AssertEncryptionForSchemaVersion(CG.WireData obj, string schemaVersion, bool desiredState)
            {
                uint ver = CG.WireInfoAttribute.StringToVersion(schemaVersion);

                obj.SchemaVersion = ver;

                bool val = (bool)encProp.Invoke(obj, null);
                if (val != desiredState)
                {
                    Global.RO.Error("Object failed to return correct result for Schemaversion {0}: Expected: {1}, Received {2}",
                        schemaVersion, desiredState, val);
                    return false;
                }

                return true;
            }

            protected override void Execute()
            {
                WiredataEncryptionClass obj = new WiredataEncryptionClass();


                if (!AssertEncryptionForSchemaVersion(obj, "1.0", false))
                {
                    ResultCode = TEST_RESULTS.FAILED; 
                    return;
                }

                if (!AssertEncryptionForSchemaVersion(obj, "1.1", true))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                if (!AssertEncryptionForSchemaVersion(obj, "1.2", true))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\rwlock\Tests.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

using xonline.common.config;
using xonline.common.service;

using ServerTestFramework;
using ServerTestFramework.Core;

namespace xonline.common.service.test 
{
    [Description("Verifies simple RWLock usage."), Owner("mattchil"), TestFrequency("Daily"), EnvRequirement("DVT")]
    public class UnitTest_Simple : BasicTest 
    {
        protected RWLock m_rwLock = new RWLock();
        protected bool fStop = false;
        protected int cReaders = 0;
        protected int cWriters = 0;
        protected ManualResetEvent evtFailure = new ManualResetEvent(false);
        
        protected override void ExecuteTest() 
        {
            using (RWLockHandle lh = new RWLockHandle(m_rwLock))
            {
            }

            m_rwLock.WriteLock();
            m_rwLock.WriteUnlock();

            using (RWLockHandle lh = new RWLockHandle(m_rwLock))
            {
                lh.UpgradeToWriter();
            }
        }
    }

    [Description("Verifies stressed RWLock usage."), Owner("mattchil"), TestFrequency("Daily"), EnvRequirement("DVT")]
    public class UnitTest_Stress : BasicTest 
    {
        protected RWLock m_rwLock;
        protected volatile bool fStop;
        protected int cReaders;
        protected int cWriters;
        protected ManualResetEvent evtFailure;
        protected Thread[] rgReaders;
        protected Thread[] rgWriters;
        protected string sMessage;

        public void Setup()
        {
            m_rwLock = new RWLock();
            fStop = false;
            cReaders = 0;
            cWriters = 0;
            evtFailure = new ManualResetEvent(false);
            rgReaders = new Thread[50];
            rgWriters = new Thread[5];
            sMessage = null;
        }
        
        protected override void ExecuteTest() 
        {
            Setup();
            
            for (int iThread = 0; iThread < rgReaders.Length; iThread++)
            {
                rgReaders[iThread] = new Thread(ReaderThread);
                rgReaders[iThread].Start();
            }
            
            for (int iThread = 0; iThread < rgWriters.Length; iThread++)
            {
                rgWriters[iThread] = new Thread(WriterThread);
                rgWriters[iThread].Start();
            }

            if (evtFailure.WaitOne(60 * 1000, false))
            {
                throw new Exception(sMessage);
            }

            Cleanup();
        }

        protected override void Cleanup()
        {
            fStop = true;

            Thread.Sleep(500 * rgWriters.Length);

            for (int iThread = 0; iThread < rgWriters.Length; iThread++)
            {
                if (!rgWriters[iThread].Join(1000))
                {
                    throw new Exception("timed out waiting for writer thread to join");
                }
            }

            Thread.Sleep(1000);

            for (int iThread = 0; iThread < rgReaders.Length; iThread++)
            {
                if (!rgReaders[iThread].Join(1000))
                {
                    throw new Exception("timed out waiting for reader thread to join");
                }
            }
            
        }
        
        protected virtual void ReaderThread()
        {
            while (!fStop)
            {
                m_rwLock.ReadLock();
                Interlocked.Increment(ref cReaders);

                if (0 != cWriters)
                {
                    sMessage = "reader thread found a writer";
                    evtFailure.Set();
                }

                Thread.Sleep(1);

                Interlocked.Decrement(ref cReaders);
                m_rwLock.ReadUnlock();

                Thread.Sleep(1);
            }
        }

        protected virtual void WriterThread()
        {
            while (!fStop)
            {
                m_rwLock.WriteLock();
                if (1 != Interlocked.Increment(ref cWriters))
                {
                    sMessage = "writer thread found an extra writer";
                    evtFailure.Set();
                }

                if (0 != cReaders)
                {
                    sMessage = "writer thread found a reader";
                    evtFailure.Set();
                }

                Thread.Sleep(500);

                Interlocked.Decrement(ref cWriters);
                m_rwLock.WriteUnlock();

                Thread.Sleep(1);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\FastFailTests.cs ===
using System;
using System.Net;
using System.Web;
using System.Web.Hosting;
using System.IO;
using System.Collections.Generic;
using System.Threading;

using xonline.common.diagnostics;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.stfutil;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;

namespace xonline.common.test.service 
{


[TestGroup, DVT, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
public class FailFastDvt : ServiceDVTTestBaseGroup
{
    public int blockTime = 2;
    public int thresholdTime = 2;

    public TestFastFailInternal fastFail;

    public void Reset()
    {
        // 2 failures in 2 seconds fails for 2 seconds
        fastFail = new TestFastFailInternal(2, thresholdTime, blockTime, 0, 0);
    }

    [TestCase, TestCasePriority(1), Description("Run through a full cycle for 1 resource"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
    public void Mainline()
    {
        Reset();

        for (int i = 0; i < 2; i++)
        {
            // Ok
            Assert.IsTrue(!fastFail.InFastFailState("a"));
            fastFail.ReportSuccess("a");
            Assert.IsTrue(!fastFail.InFastFailState("a"));
            fastFail.ReportFailure("a", "boom");
            Assert.IsTrue(!fastFail.InFastFailState("a"));
            fastFail.ReportFailure("a", "boom");

            // Failure
            Assert.IsTrue(fastFail.InFastFailState("a"));
            Thread.Sleep(blockTime * 1000 + 1);

            // Recovery 1
            Assert.IsTrue(!fastFail.InFastFailState("a"));

            // Recovery 2
            Assert.IsTrue(fastFail.InFastFailState("a"));
            Assert.IsTrue(fastFail.InFastFailState("a"));

            // Back to ok
            fastFail.ReportSuccess("a");
            Assert.IsTrue(!fastFail.InFastFailState("a"));
            Assert.IsTrue(!fastFail.InFastFailState("a"));
        }
    }

    [TestCase, TestCasePriority(1), Description("After a failure, report a success. Should have no affect."), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
    public void OutOfPlaceSuccess()
    {
        Reset();

        // Ok -> Failure
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(fastFail.InFastFailState("a"));
        
        // Wrong time for this
        fastFail.ReportSuccess("a");

        // Still in failure
        Assert.IsTrue(fastFail.InFastFailState("a"));

        Thread.Sleep(blockTime * 1000 + 1);

        // Recovery
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        Assert.IsTrue(fastFail.InFastFailState("a"));

        // Back to ok
        fastFail.ReportSuccess("a");
        Assert.IsTrue(!fastFail.InFastFailState("a"));

    }

    [TestCase, TestCasePriority(1), Description("During a recovery, report failure again"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
    public void BadRecovery()
    {
        Reset();

        // Ok -> Failure
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(fastFail.InFastFailState("a"));

        Thread.Sleep(blockTime * 1000 + 1);

        // Recovery
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        Assert.IsTrue(fastFail.InFastFailState("a"));

        // Back to failure
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(fastFail.InFastFailState("a"));
        
        Thread.Sleep(blockTime * 1000 + 1);

        // Recovery
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        Assert.IsTrue(fastFail.InFastFailState("a"));

        // Back to ok
        fastFail.ReportSuccess("a");
        Assert.IsTrue(!fastFail.InFastFailState("a"));
    }

    [TestCase, TestCasePriority(1), Description("Mainline test for 2 resources, with them intermingled"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
    public void MultiResource()
    {
        Reset();

        for (int i = 0; i < 2; i++)
        {
            // Ok -> Failure A
            Assert.IsTrue(!fastFail.InFastFailState("a"));
            fastFail.ReportFailure("a", "boom");
            Assert.IsTrue(!fastFail.InFastFailState("a"));
            fastFail.ReportFailure("a", "boom");
            Assert.IsTrue(fastFail.InFastFailState("a"));

            Thread.Sleep(blockTime / 2 * 1000 + 1);

            // Ok -> semi Failure B
            Assert.IsTrue(!fastFail.InFastFailState("b"));
            fastFail.ReportFailure("b", "boom");
            Assert.IsTrue(!fastFail.InFastFailState("b"));

            Thread.Sleep(blockTime / 2 * 1000 + 1);

            // Recovery A
            Assert.IsTrue(!fastFail.InFastFailState("a"));
            Assert.IsTrue(fastFail.InFastFailState("a"));

            // semi Failure -> Failure B
            fastFail.ReportFailure("b", "boom");
            Assert.IsTrue(fastFail.InFastFailState("b"));

            Thread.Sleep(blockTime * 1000 + 1);

            // Back to failure A
            fastFail.ReportFailure("a", "boom");
            Assert.IsTrue(fastFail.InFastFailState("a"));

            // Recovery B
            Assert.IsTrue(!fastFail.InFastFailState("b"));
            Assert.IsTrue(fastFail.InFastFailState("b"));

            // Back to ok B
            fastFail.ReportSuccess("b");
            Assert.IsTrue(!fastFail.InFastFailState("b"));

            Thread.Sleep(blockTime * 1000 + 1);

            // Recovery A
            Assert.IsTrue(!fastFail.InFastFailState("a"));
            Assert.IsTrue(fastFail.InFastFailState("a"));

            // Back to ok A
            fastFail.ReportSuccess("a");
            Assert.IsTrue(!fastFail.InFastFailState("a"));

            // And B is still ok
            Assert.IsTrue(!fastFail.InFastFailState("b"));

        }
        
    }

    [TestCase, TestCasePriority(1), Description("Test the threshold time window"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
    public void AlmostFail()
    {
        Reset();

        fastFail.ReportSuccess("a");
        Assert.IsTrue(!fastFail.InFastFailState("a"));

        // Fail 1/2
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        
        fastFail.ReportSuccess("a");
        Assert.IsTrue(!fastFail.InFastFailState("a"));

        Thread.Sleep(thresholdTime / 2 * 1000 + 1);

        fastFail.ReportSuccess("a");
        Assert.IsTrue(!fastFail.InFastFailState("a"));

        Thread.Sleep(thresholdTime / 2 * 1000 + 1);
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        
        // Fail 1/2
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(!fastFail.InFastFailState("a"));

        fastFail.ReportSuccess("a");
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        
        Thread.Sleep(thresholdTime / 2 * 1000);
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        
        // Fail 2/2
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(fastFail.InFastFailState("a"));

        Thread.Sleep(blockTime / 2 * 1000 );
        Assert.IsTrue(fastFail.InFastFailState("a"));

        Thread.Sleep(blockTime / 2 * 1000 + 1);
        
        // Recovery
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        Assert.IsTrue(fastFail.InFastFailState("a"));
        fastFail.ReportSuccess("a");
        
        // Ok
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        Assert.IsTrue(!fastFail.InFastFailState("a"));

    }

    [TestCase, TestCasePriority(1), Description("Test the periodic recovery and expiration"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
    public void RecoveryExpiration()
    {
        Reset();
        
        // Make it fail
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(fastFail.InFastFailState("a"));

        // Wait for recovery
        Thread.Sleep(thresholdTime * 1000 + 1);

        // Should release 4 times now within the blocking period time
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        Assert.IsTrue(fastFail.InFastFailState("a"));
        Thread.Sleep(thresholdTime * 1000 / 4 + 1);
        
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        Assert.IsTrue(fastFail.InFastFailState("a"));
        Thread.Sleep(thresholdTime * 1000 / 4 + 1);
        
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        Assert.IsTrue(fastFail.InFastFailState("a"));
        Thread.Sleep(thresholdTime * 1000 / 4 + 1);
       
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        Assert.IsTrue(fastFail.InFastFailState("a"));
        Thread.Sleep(thresholdTime * 1000 / 4 + 1);

        // Time expired with no ReportSuccess/ReportFailure, so it goes back to Ok state
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        Assert.IsTrue(!fastFail.InFastFailState("a"));
        fastFail.ReportFailure("a", "boom");
        Assert.IsTrue(!fastFail.InFastFailState("a"));

    }




}


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\rpttargetcs\rpttest.cs ===
using System;
using System.Threading;
using xonline.common.config;
using xonline.common.mgmt;

[assembly: XomAreaDefinition(XomAreaName.Test)]

namespace ReportTargetTest
{
    public class ReportTargetTest
    {
        [STAThread]
        static void Main( string[] args )
        {
            Thread[] rgThreads;

            rgThreads = new Thread[ 4 ];

            XomLoggingControl.Init();

            for( int i = 0; i < rgThreads.Length; i++ )
            {
                LogThread lt = new LogThread( );
                lt.iThreadId = i;

                rgThreads[ i ] = new Thread( new ThreadStart( lt.ThreadProc ) );
                rgThreads[ i ].Start();
            }

            Thread.Sleep( Int32.MaxValue );
        }

        private class LogThread
        {
            public int iThreadId = 0;

            public void ThreadProc( )
            {
                int iMsg = 0;
            
                while( true )
                {
                    Xom.Log(XomAreaName.Test, "Thread: " + iThreadId + " Message: " + iMsg++ );
                    Thread.Sleep( 100 );
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\rwlock\Groups.cs ===
﻿using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.config;
using xonline.common.service;

namespace xonline.common.service.test {
   [TestGroup, Owner("mattchil"), TestFrequency("Daily"), EnvRequirement("DVT")]
   public class RWLockUnitTestGroup : BasicTest {
      public RWLockUnitTestGroup()
         : base("RWLockUnitTest")
      {
         AddFunctional(new UnitTest_Simple());
         AddFunctional(new UnitTest_Stress());
      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\FastFailUnitCommon.cs ===
namespace unit.common.service {
   using System;
	using System.Collections.Generic;
	using System.Reflection;

	using ServerTestFramework;

   using xonline.common.service;

   public class UnitClock : FastFailClock {
      public static UnitClock Instance = null;

      public UnitClock() {
         Set( DateTime.UtcNow );
      }

      public void Add(TimeSpan span) {
         _offset += span;
      }

      public void Set(DateTime now) {
         _start  = now;
         _offset = TimeSpan.Zero;
      }

      public override DateTime Now {
         get { return _start + _offset; }
      }

      private DateTime _start;
      private TimeSpan _offset;
   }

   public struct Case {
      public Case(string name, object parameter) 
         : this(name, parameter, true) { }

      public Case(string name, object parameter, bool positive) {
         Name = name;
         Parameter = parameter;
         Positive = positive;
      }

      public string Name;
      public object Parameter;
      public bool   Positive;
   }

   public class CaseVector {
      public CaseVector(params Case[] cases) {
         _cases = new List<Case>();
         _cases.AddRange(cases);
      }

      public CaseVector(IEnumerable<Case> cases) {
         _cases = new List<Case>();
         _cases.AddRange(cases);
      }

      public void AddCases(params Case[] cases) {
         _cases.AddRange(cases);
      }

      public void AddCases(IEnumerable<Case> cases) {
         _cases.AddRange(cases);
      }

      public void Clear() {
         _cases.Clear();
      }

      public Case[] Cases {
         get { return _cases.ToArray(); }
      }

      private List<Case> _cases;
   }

   public class FastFailGroupBase : TestNode {
      public virtual void GenerateCases() {

      }
   }

   public class FastFailUnitBase : TestBase {
      public class ExecutionTargetAttribute : Attribute { }

      public FastFailUnitBase(params object[] parameters) {
         Type type = GetType();

         _parameters = new List<object>();
         _parameters.AddRange(parameters);

         lock (_cachedExecutionTarget) {
            if (_cachedExecutionTarget.ContainsKey(type))
               _executionTarget = _cachedExecutionTarget[type];
            else {
               _cachedExecutionTarget.Add(type, null);

               foreach (MethodInfo method in type.GetMethods()) {
                  if (Attribute.IsDefined(method, typeof(ExecutionTargetAttribute))) {
                     _cachedExecutionTarget[type] = _executionTarget = method;
                     break;
                  }
               }
            }
         }
      }

      public virtual List<CaseVector> GenerateMatrix() {
         return new List<CaseVector>();   
      }

      protected override void Execute() {
         if (null == _executionTarget)
            throw new InvalidOperationException("Execution target not defined.");

         _executionTarget.Invoke(this, _parameters.ToArray());
      }

      MethodInfo   _executionTarget;
      List<object> _parameters;
      
      static Dictionary<Type, MethodInfo> _cachedExecutionTarget = new Dictionary<Type, MethodInfo>();
   }

   public static class FastFailHelper {
      public static void Compare<T>(string name, T realValue, T expectedValue) where T : IComparable {
         if (realValue.CompareTo(expectedValue) != 0) {
            throw new Exception(
               string.Format("{0} = {1}, when was {2} expected.", name, realValue, expectedValue));
         }
      }

      public static FastFailResourceConfig CreateConfig(uint Tmin, uint Tmax, TimeSpan captureWindow, FastFailThrottleSelector selector) {
         FastFailResourceConfig Config = new FastFailResourceConfig();

         Config.MinimumThreshold = Tmin;
         Config.MaximumThreshold = Tmax;
         Config.CaptureTimeWindow = captureWindow;
         Config.ThrottlingSelector = selector;

         return Config;
      }

      public static FastFailResourceConfig CreateConfig(uint Tmin, uint Tmax, TimeSpan captureWindow, float throttle) {
         return CreateConfig(Tmin, Tmax, captureWindow, new FastFailThrottleSelector(throttle));
      }

      public static FastFailResource CreateResource(string name, uint Tmin, uint Tmax, TimeSpan captureWindow, FastFailThrottleSelector selector) {
         return new FastFailResource(name, CreateConfig(Tmin, Tmax, captureWindow, selector));
      }

      public static FastFailResource CreateResource(string name, uint Tmin, uint Tmax, TimeSpan captureWindow, float throttle) {
         return CreateResource(name, Tmin, Tmax, captureWindow, new FastFailThrottleSelector(throttle));
      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\rwlock\BasicTest.cs ===
﻿using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

using xonline.common.config;
using xonline.common.service;

using ServerTestFramework;

namespace xonline.common.service.test 
{
   public abstract class BasicTest : TestBase {
      protected BasicTest() {
         Name = GetType().Name;
      }

      protected BasicTest(string name) {
         Name = name;
      }

      protected void AddFunctional(TestBase child) {
         AddChild(child, true, false);
      }

      protected virtual void ExecuteTest() {

      }

      protected virtual void Cleanup() {

      }

      protected override void Execute() {
         Config.CheckForUpdates();

         try {
            ResultCode = TEST_RESULTS.FAILED;
            ExecuteTest();
            ResultCode = TEST_RESULTS.PASSED;
         }
         finally {
            Cleanup();
         }
      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\FastFailUnitConfiguration.cs ===
namespace unit.common.service {
   using System;
   using System.Collections.Generic;

   using ServerTestFramework;
   using ServerTestFramework.LiveService;
   using ServerTestFramework.Utilities;

   using xonline.common.diagnostics;
   using xonline.common.service;

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
   public class FastFailUnitConfiguration : TestNode {
		public FastFailUnitConfiguration() {

		}

		private void Configure(FastFailResourceConfig config) {
			_resource = FastFail.ConfigureResource("unit_configure", config);
		}

		private void CheckConfig(uint max, uint min, float window, float throttle) {
			float win 	 = (float)_resource.Statistics.CaptureTimeWindow.TotalSeconds;
			float output = _resource.ThrottlingSelector.SelectThrottle(_resource.Statistics);

			ValueCheck.IsTrue(_resource.MaximumThreshold == max, string.Format("Max threshold = {0} not {1}", _resource.MaximumThreshold, max));
			ValueCheck.IsTrue(_resource.MinimumThreshold == min, string.Format("Max threshold = {0} not {1}", _resource.MinimumThreshold, min));
			ValueCheck.IsTrue(win == window, string.Format("Expiration window = {0} not {1}", win, window));
			ValueCheck.IsTrue(output == throttle, string.Format("Throttling value = {0} not {1}", output, throttle));
		}

		[TestCase, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
		public void NormalInitialization() {
			FastFailResourceConfig  config = new FastFailResourceConfig();

			config.MaximumThreshold   = 20;
         config.MinimumThreshold   = 5;
         config.CaptureTimeWindow  = TimeSpan.FromSeconds(20.5f);
         config.ThrottlingSelector = new FastFailThrottleSelector(0.7f);
     
			Configure(config);

			CheckConfig(20, 5, 20.5f, 0.7f);
		}

		[TestCase, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
		public void SwappedInitialization() {
			FastFailResourceConfig  config = new FastFailResourceConfig();

			config.MaximumThreshold   = 5;
         config.MinimumThreshold   = 20;
         config.CaptureTimeWindow  = TimeSpan.FromSeconds(18.5f);
         config.ThrottlingSelector = new FastFailThrottleSelector(0.3f);
     
			Configure(config);

			CheckConfig(20, 5, 18.5f, 0.3f);
		}

		FastFailResource _resource;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\FastFailUnitStatisticExpiration.cs ===
namespace unit.common.service {
   using System;
   using System.Collections.Generic;

   using ServerTestFramework;
   using ServerTestFramework.LiveService;
   using ServerTestFramework.Utilities;

   using xonline.common.diagnostics;
   using xonline.common.service;

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
   public class FastFailUnitStatisticExpiration : TestNode {
      public FastFailUnitStatisticExpiration() {
         FastFailClock.Clock = UnitClock.Instance = new UnitClock();
         
			_halfLife = TimeSpan.FromSeconds(1);
      }

		private void InitializeResource() {
			FastFailResourceConfig  config = new FastFailResourceConfig();

			config.MaximumThreshold   = 1;
         config.MinimumThreshold   = 1;
         config.CaptureTimeWindow  = TimeSpan.FromSeconds(2*FastFailFeature.BucketCount);
         config.ThrottlingSelector = new FastFailThrottleSelector();
        
         _resource = FastFail.ConfigureResource("unit_statistics_expiration", config);

			_allRequests = _resource.Statistics.AggregatedFeatures.AllRequests;
         _allSuccess  = _resource.Statistics.AggregatedFeatures.SuccessfulRequests;
         _allFailures = _resource.Statistics.AggregatedFeatures.FailedRequests;
         _allTimeouts = _resource.Statistics.AggregatedFeatures.TimedoutRequests;
		}

      private void CheckFeatures(uint c, uint m) {
         ValueCheck.IsTrue(_allSuccess.Count == (float)m, string.Format("success[{0}] = {1} not {2}", c, _allSuccess.Count, m));
         ValueCheck.IsTrue(_allFailures.Count == (float)m, string.Format("failures[{0}] = {1} not {2}", c, _allFailures.Count, m));
         ValueCheck.IsTrue(_allTimeouts.Count == (float)m, string.Format("timeouts[{0}] = {1} not {2}", c, _allTimeouts.Count, m));
         ValueCheck.IsTrue(_allRequests.Count == (float)(m*3), string.Format("all requests[{0}] = {1} not {2}", c, _allRequests.Count, m*3));
      }

		[TestCase, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
		public void ZeroGrowth() {
			InitializeResource();

         for (uint c=1; c<=_allRequests.Buckets*4; c++) {
            UnitClock.Instance.Add(_halfLife);
            
				_resource.Statistics.AdvanceWindow();

            CheckFeatures(c, 0);
         }
		}

		[TestCase, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
		public void OneItem() {
			FastFailTracker tracker;

			InitializeResource();

			using (tracker = new FastFailTracker(_resource)) {
            tracker.IndicateSuccess();
         }
         using (tracker = new FastFailTracker(_resource)) {
            tracker.IndicateFailure();
         }
         using (tracker = new FastFailTracker(_resource)) {
            tracker.IndicateTimeout();
         }

			for (uint c=1; c<=_allRequests.Buckets*2; c++) {
				_resource.Statistics.AdvanceWindow();

            UnitClock.Instance.Add(_halfLife);

            CheckFeatures(c, 1);
         }

			_resource.Statistics.AdvanceWindow();

			CheckFeatures(_allRequests.Buckets*2 + 1, 0);
		}

      [TestCase, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
      public void LinearGrowth() {
         FastFailTracker tracker;

			InitializeResource();

			Global.RO.Info("Spinning Up events");
         for (uint c=1; c<=_allRequests.Buckets*4; c++) {
            uint m = c;
				
				// bucket expirations triggered
				if (c > _allRequests.Buckets*2)
					m = _allRequests.Buckets*2 - c%2;
            
				using (tracker = new FastFailTracker(_resource)) {
               tracker.IndicateSuccess();
            }
            using (tracker = new FastFailTracker(_resource)) {
               tracker.IndicateFailure();
            }
            using (tracker = new FastFailTracker(_resource)) {
               tracker.IndicateTimeout();
            }

            UnitClock.Instance.Add(_halfLife);
            CheckFeatures(c, m);
				Global.RO.Info("OK: cycle[{0}] contains {1}", c, m);
         }

         Global.RO.Info("Expiring events");
         for (int c=1; c<=(int)_allRequests.Buckets*2; c++) {
				//remember tick added after last spin up
            int m = Math.Max(2 * ((int)_allRequests.Buckets - c/2) - 2, 0);

            UnitClock.Instance.Add(_halfLife);
            _resource.Statistics.AdvanceWindow();

            CheckFeatures((uint)c, (uint)m);
				Global.RO.Info("OK: cycle[{0}] contains {1}", c, _allSuccess.Count);
         }
      }

      [TestCase, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
      public void PolynomialGrowth() {
         FastFailTracker tracker;
         uint            m = 0;

			InitializeResource();

			Global.RO.Info("Spinning Up events");
         for (uint c=1; c<=_allRequests.Buckets; c++) {
            m = (c*(c+1)) / 2;

				Global.RO.Info("Adding {0} more events", c);
            for (uint i=0; i<c; i++) {
               using (tracker = new FastFailTracker(_resource)) {
                  tracker.IndicateSuccess();
               }
               using (tracker = new FastFailTracker(_resource)) {
                  tracker.IndicateFailure();
               }
               using (tracker = new FastFailTracker(_resource)) {
                  tracker.IndicateTimeout();
               }
            }

	         UnitClock.Instance.Add(_resource.Statistics.ExpirationPeriod);
            CheckFeatures(c, m);
				Global.RO.Info("OK: cycle[{0}] contains {1}", c, m);
         }

         Global.RO.Info("Expiring events");
         for (uint c=0; c<_allRequests.Buckets*2; c++) {
				// remember tick added after last spin up
            uint n = (c/2); n = (n*(n+1))/2;
 
            UnitClock.Instance.Add(_halfLife);
            _resource.Statistics.AdvanceWindow();

            //CheckFeatures(c, m - Math.Min(n, m));
				Global.RO.Info("OK: cycle[{0}] contains {1}", c, _allSuccess.Count);
         }
      }

      FastFailResource _resource;
      FastFailFeature  _allRequests;
      FastFailFeature  _allSuccess;
      FastFailFeature  _allFailures;
      FastFailFeature  _allTimeouts;
		TimeSpan         _halfLife;
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\FlokenTests.cs ===
using System;
using System.Net;
using System.Web;
using System.Web.Hosting;
using System.IO;
using System.Collections.Generic;
using System.Threading;

using xonline.common.service;
using xonline.common.diagnostics;
using xonline.common.stfutil;

using ServerTestFramework;
//using ServerTestFramework.LiveService;

namespace xonline.common.test.service 
{


[TestGroup, DVT, Owner("kgoodier"), TestFrequency("Regression"), EnvRequirement("")]
public class FlokenDVT : ServiceDVTTestBaseGroup
{
    [TestCase, Description("Validate constructors")]
    public void Constructors()
    {
        Floken f;

        f = new Floken();
        Assert.IsTrue(!f.IsValid);
        f = Floken.NewFloken();
        Assert.IsTrue(f.IsValid);

        f = new Floken("");
        Assert.IsTrue(!f.IsValid);
        Assert.IsTrue(f.FlowToken == 0);

        f = new Floken((string)null);
        Assert.IsTrue(!f.IsValid);
        Assert.IsTrue(f.FlowToken == 0);

        f = new Floken("1F");
        Assert.IsTrue(f.IsValid);
        Assert.IsTrue(f.FlowToken == 31);

        f = new Floken("0x1F");
        Assert.IsTrue(f.IsValid);
        Assert.IsTrue(f.FlowToken == 31);

        f = new Floken("0xFFFFFFFFFFFFFFFF");
        Assert.IsTrue(f.IsValid);
        Assert.IsTrue(f.FlowToken == 0xFFFFFFFFFFFFFFFF);

        f = new Floken("FT1F");
        Assert.IsTrue(f.IsValid);
        Assert.IsTrue(f.FlowToken == 31);

        f = new Floken("FTFFFFFFFFFFFFFFFF");
        Assert.IsTrue(f.IsValid);
        Assert.IsTrue(f.FlowToken == 0xFFFFFFFFFFFFFFFF);

        // The constructor no longer throws an exception for invalid formats
        f = new Floken("FT0x1F");
        Assert.IsTrue(!f.IsValid);

        f = new Floken((string)null);
        Assert.IsTrue(!f.IsValid);
    }

    [TestCase, Description("Verify structs are pass-by-value")]
    public void StructsAndNone()
    {
        Floken f1 = Floken.None;
        Floken f2 = Floken.None;

        Assert.IsTrue(f1 == f2);
        Assert.IsTrue(f1.FlowToken == f2.FlowToken);
        Assert.IsTrue(!f1.IsValid);
        Assert.IsTrue(!f2.IsValid);

        f1 = Floken.NewFloken();
        Assert.IsTrue(f1 != f2);
        Assert.IsTrue(f1.FlowToken != f2.FlowToken);
        Assert.IsTrue(f1.IsValid);
        Assert.IsTrue(!f2.IsValid);

        Floken f3 = f1;
        Assert.IsTrue(f1 == f3);
        Assert.IsTrue(f1.FlowToken == f3.FlowToken);

        f3 = Floken.NewFloken();
        Assert.IsTrue(f1 != f3);
        Assert.IsTrue(f1.FlowToken != f3.FlowToken);
    }

    [TestCase, Description("Verify serializers")]
    public void Serializers()
    {
        Floken f1 = Floken.NewFloken();
        MemoryStream ms = new MemoryStream();
        BinaryWriter bw = new BinaryWriter(ms);
        BinaryReader br = new BinaryReader(ms);

        f1.Write(bw);
        Assert.IsTrue(ms.Length == 8); 

        ms.Position = 0;
        Floken f2 = new Floken(br);
        Assert.IsTrue(f2 == f1);

        Floken f3 = new Floken(f1.ToString());
        Assert.IsTrue(f3 == f1);
    }

    [TestCase, Description("Verify Floken == and .Equals behavior")]
    public void Equality()
    {
        Floken f1 = Floken.NewFloken();
        Floken f2 = Floken.NewFloken();
        Floken f2a = new Floken(f2.ToString());
        DateTime dt = DateTime.Now;

        Assert.IsTrue(f1 != null);
        Assert.IsTrue(f1 != f2);
        Assert.IsTrue(f2 == f2a);
        Assert.IsTrue(!f1.Equals(null));
        Assert.IsTrue(!f1.Equals(f2));
        Assert.IsTrue(f2.Equals(f2a));
        Assert.IsTrue(!f1.Equals(dt));
        Assert.IsTrue(!f1.Equals(0));
    }

    [TestCase, Description("Verify Floken.Current behavior")]
    public void Current()
    {
        // hard to really test this without being able to plug in our own backing 
        // HttpContext-like store. maybe in the future...

        Assert.IsTrue(Floken.Current == Floken.None);

        // @@@ can i create an HttpContext and plug it into HttpContext.Current? I don't 
        // think so...
    }

}


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\FastFailUnitTests.cs ===
using System;
using System.IO;
using System.Collections.Generic;
using System.Threading;
using System.Data.SqlClient;
using System.Data;
using System.Reflection;
using System.Runtime.Serialization;
using System.Diagnostics;

using xonline.common.diagnostics;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.stfutil;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.common.service;
using xonline.common.config;
using Config = xonline.common.config.Config;

namespace xonline.common.test.service
{
    [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
    public class FastFailUnitTests : TestNode
    {
        [Serializable]
        public class UnexpectedTestResultException : Exception
        {
            public UnexpectedTestResultException(string message) : base(message) { }
            public UnexpectedTestResultException() { }
            public UnexpectedTestResultException(string message, Exception innerException) : base(message, innerException) { }
            public UnexpectedTestResultException(SerializationInfo serializationInfo, StreamingContext streamingContext)
                : base(serializationInfo, streamingContext) { }
        }

        public class FastFailTestNode : TestNode
        {
            private uint _maximumAllocationLimit = 500;
            public uint MaximumAllocationLimit
            {
                set { _maximumAllocationLimit = value; }
                get { return _maximumAllocationLimit; }
            }
            private uint _suggestedAllocationAmount = 50;
            public uint SuggestedAllocationAmount
            {
                get { return _suggestedAllocationAmount; }
            }
            private readonly static TimeSpan DefaultWindowSize = TimeSpan.FromSeconds(30);
            private readonly static FastFailThrottleSelector DefaultThrottleSelector = new FastFailThrottleSelector();

            public uint AllocateAllResources(string resourceName)
            {
                uint allocationCount = 0;
                List<FastFailTracker> resources = new List<FastFailTracker>();
                try
                {
                    while (allocationCount < MaximumAllocationLimit)
                    {
                        resources.Add(new FastFailTracker(resourceName));
                        allocationCount++;
                    }
                }
                catch (FastFailException)
                {
                }
                finally
                {
                    Random random = new Random();
                    while (resources.Count != 0)
                    {
                        int index = random.Next(resources.Count);
                        resources[index].IndicateSuccess();
                        resources.RemoveAt(index);
                    }
                }

                AssertNotEqual<uint>(allocationCount, MaximumAllocationLimit, "Single Resource allocation never resulted in fast failure.");
                return allocationCount;
            }
            public static void Fail(string message)
            {
                throw new UnexpectedTestResultException(message);
            }
            public delegate void AssertionDelegate();
            public void AssertThrowsException(AssertionDelegate d, Type expectedExceptionType)
            {
                bool caughtExpectedException = false;
                try
                {
                    d();
                }
                catch (Exception e)
                {
                    Type actualExceptionType = e.GetType();
                    if (actualExceptionType != expectedExceptionType)
                    {
                        throw new UnexpectedTestResultException(String.Format("Expected exception {0} to be thrown. Caught {1} instead.", expectedExceptionType, actualExceptionType), e);
                    }
                    caughtExpectedException = true;
                }

                if (!caughtExpectedException)
                    throw new UnexpectedTestResultException(String.Format("Expected exception {0} to be thrown. No exception actually caught.", expectedExceptionType));
            }
            public void AssertNotEqual<T>(T value1, T value2, string message) where T : IEquatable<T>
            {
                if (value1.Equals(value2))
                {
                    if (message == null)
                        message = "Tested values are not supposed to be equal.";
                    message = String.Format("{0}: {1} == {2}", message, value1, value2);
                    throw new UnexpectedTestResultException(message);
                }
            }
            public void AssertEqual<T>(T value1, T value2, string message) where T : IEquatable<T>
            {
                if (!value1.Equals(value2))
                {
                    if (message == null)
                        message = "Tested values are supposed to be equal.";
                    message = String.Format("{0}: {1} != {2}", message, value1, value2);
                    throw new UnexpectedTestResultException(message);
                }
            }
            public void AssertReferencesEqual<T>(T a, T b, string message)
            {
                if (!object.ReferenceEquals(a, b))
                {
                    if (message == null)
                        message = "Tested values are supposed to have equal references.";
                    throw new UnexpectedTestResultException(message);
                }
            }
            public FastFailResourceConfig CreateConfigWithLowAndHighBounds(uint lowBound, uint highBound)
            {
                return CreateConfigWithBoundsAndSelector(lowBound, highBound, DefaultThrottleSelector);
            }
            public FastFailResourceConfig CreateConfigWithBoundsAndSelector(uint lowBound, uint highBound, FastFailThrottleSelector selector)
            {
                return CreateConfig(lowBound, highBound, selector, DefaultWindowSize);
            }
            public FastFailResourceConfig CreateConfig(uint lowBound, uint highBound, FastFailThrottleSelector selector, TimeSpan captureTimeWindow)
            {
                FastFailResourceConfig config = new FastFailResourceConfig();
                config.MinimumThreshold = lowBound;
                config.MaximumThreshold = highBound;
                config.ThrottlingSelector = selector;
                config.CaptureTimeWindow = captureTimeWindow;
                return config;
            }
            public string GetRandomResourceName()
            {
                return Guid.NewGuid().ToString();
            }
            public virtual void AssertResourceIsUsingConfig(FastFailResource resource, FastFailResourceConfig config)
            {
                // FastFail allows configurations where the mimumum and maximum thresholds are inverted. Normalize.
                uint minimumThreshold = Math.Min(config.MinimumThreshold, config.MaximumThreshold);
                uint maximumThreshold = Math.Max(config.MinimumThreshold, config.MaximumThreshold);
                AssertEqual<uint>(minimumThreshold, resource.MinimumThreshold, "Minimum Thresholds Mismatch");
                AssertEqual<uint>(maximumThreshold, resource.MaximumThreshold, "Maximum Thresholds Mismatch");

                AssertEqual(config.ThrottlingSelector.GetType().FullName, resource.ThrottlingSelector.GetType().FullName, "ThrottlingSelectors Mismatch");
                AssertEqual(config.CaptureTimeWindow, resource.Statistics.CaptureTimeWindow, "CaptureTimeWindow Mismatch");
            }
            public void AssertResourceIsUsingConfig(string resourceName, FastFailResourceConfig config)
            {
                AssertResourceIsUsingConfig(FastFail.GetResource(resourceName), config);
            }
            public void AssertNotNull(object o, string message)
            {
                if (o == null)
                    throw new UnexpectedTestResultException(message); ;
            }
        }
        public abstract class DistantTestNode : FastFailTestNode
        {
            private ReverseDistantTestNodeBridge _reverseBridge;
            public ReverseDistantTestNodeBridge ReverseBridge
            {
                get { return _reverseBridge; }
                set { _reverseBridge = value; }
            }

            public class ReverseDistantTestNodeBridge : MarshalByRefObject
            {
                public void OverrideSetting(string setting, string value)
                {
                    try
                    {
                        Global.XEnv.OverrideSetting("ALL", "ALL", setting, value, -1);
                    }
                    catch (Exception e)
                    {
                        //almost none of the STFExceptions are remotable. We need to wrap them.
                        if (e.GetType().FullName.Contains("ServerTestFramework"))
                            throw new UnexpectedTestResultException(e.Message + "\n" + e.StackTrace);
                        else
                            throw;
                    }
                }
            }

            public class DistantTestNodeBridge : MarshalByRefObject
            {
                private Type _testNodeType;
                public Type TestNodeType
                {
                    get { return _testNodeType; }
                    set { _testNodeType = value; }
                }

                public void Run(ReverseDistantTestNodeBridge bridge)
                {
                    Assembly assembly = Assembly.GetAssembly(_testNodeType);
                    DistantTestNode node = (DistantTestNode)assembly.CreateInstance(_testNodeType.FullName);
                    node.ReverseBridge = bridge;
                    try
                    {
                        using (node)
                        {
                            node.RunTest();
                        }
                    }
                    catch (Exception e)
                    {
                        //almost none of the STFExceptions are remotable. We need to wrap them.
                        if (e.GetType().FullName.Contains("ServerTestFramework"))
                            throw new UnexpectedTestResultException(e.Message + "\n" + e.StackTrace);
                        else
                            throw;
                    }
                }
            }
            public override void Run()
            {
                RunTestInSandbox();
            }

            protected void RunTest()
            {
                DistantPreRun();
                DistantRun();
                DistantPostRun();
            }

            protected Assembly OnAssemblyResolve(object sender, ResolveEventArgs args)
            {
                if (args.Name == Assembly.GetExecutingAssembly().GetName().FullName)
                    return Assembly.GetExecutingAssembly();
                else return null;
            }

            protected void RunTestInSandbox()
            {
                AppDomainSetup setup = new AppDomainSetup();
                setup.ApplicationName = AppDomain.CurrentDomain.SetupInformation.ApplicationName;
                setup.ApplicationBase = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;
                setup.PrivateBinPath = "Suites";

                AppDomain domain = AppDomain.CreateDomain("DistantDomain", AppDomain.CurrentDomain.Evidence, setup);
                AppDomain.CurrentDomain.AssemblyResolve += OnAssemblyResolve;
                try
                {

                    DistantTestNodeBridge bridge = (DistantTestNodeBridge)domain.CreateInstanceAndUnwrap(Assembly.GetExecutingAssembly().FullName, typeof(DistantTestNodeBridge).FullName);
                    bridge.TestNodeType = this.GetType();

                    ReverseDistantTestNodeBridge reverseBridge = new ReverseDistantTestNodeBridge();
                    bridge.Run(reverseBridge);
                }
                finally
                {
                    AppDomain.CurrentDomain.AssemblyResolve -= OnAssemblyResolve;
                    AppDomain.Unload(domain);
                }
            }
            public virtual void DistantPostRun() { }
            public virtual void DistantPreRun() { }
            public virtual void DistantRun() { }
        }

        public class ConfigTestNode : DistantTestNode
        {
            protected string _resourceName;

            public string ResourceName
            {
                get { return _resourceName; }
            }

            public override void DistantPreRun()
            {
                _resourceName = GetRandomResourceName();
            }

        }
        public class NpdbTestNode : ConfigTestNode
        {
            private readonly string[] _settingSuffixes = new string[] { "_fastFailMaxThreshold", "_fastFailMinThreshold", "_fastFailWindow" };
            public string[] SettingSuffixes
            {
                get { return (string[])_settingSuffixes.Clone(); }
            }

            public void ChangeSettingToValue(string settingName, string value)
            {
                ReverseBridge.OverrideSetting(settingName, value);
            }

            public override void DistantPreRun()
            {
                base.DistantPreRun();
                _resourceName = "PassportCreation";
            }

            public override void DistantPostRun()
            {
                base.DistantPostRun();
            }

            public override void AssertResourceIsUsingConfig(FastFailResource resource, FastFailResourceConfig config)
            {
                // This method wont work for NPDB backed resources until the resource has been utilized.
                FastFailTracker tracker = new FastFailTracker(resource.Name);
                tracker.IndicateSuccess();
                base.AssertResourceIsUsingConfig(resource, config);
            }

            public FastFailResourceConfig CreateNpdbConfigWithLowAndHighBounds(string resourceName, uint lowBound, uint highBound)
            {
                return CreateNpdbConfigWithBoundsAndSelector(resourceName, lowBound, highBound, new FastFailThrottleSelector());
            }
            public FastFailResourceConfig CreateNpdbConfigWithBoundsAndSelector(string resourceName, uint lowBound, uint highBound, FastFailThrottleSelector selector)
            {
                return CreateNpdbConfig(resourceName, lowBound, highBound, selector, TimeSpan.FromSeconds(30));
            }
            public FastFailResourceConfig CreateNpdbConfig(string resourceName, uint lowBound, uint highBound, FastFailThrottleSelector selector, TimeSpan captureTimeWindow)
            {

                // Common Config caches settings and this interferes with checking resources multiple times
                ChangeSettingToValue(resourceName + "_fastFailMaxThreshold", highBound.ToString());
                ChangeSettingToValue(resourceName + "_fastFailMinThreshold", lowBound.ToString());
                ChangeSettingToValue(resourceName + "_fastFailWindow", ((int)captureTimeWindow.TotalSeconds).ToString());

                Config.CheckForUpdates();
                FastFailResourceConfig config = new FastFailResourceConfig(null, resourceName, false);
                config.ThrottlingSelector = selector;

                AssertEqual<uint>(lowBound, config.MinimumThreshold, "MinThreshold misread from npdb");
                AssertEqual<uint>(highBound, config.MaximumThreshold, "MaxThreshold misread from npdb");
                AssertEqual<long>(captureTimeWindow.Ticks, config.CaptureTimeWindow.Ticks, "CaptureTimeWindow misread from npdb");
                return config;
            }
        }


        [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
        public class Configuration : TestNode
        {
            [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public class ViaCode : TestNode
            {
                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithNoArguments : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        AssertThrowsException(delegate() { FastFail.ConfigureResource(null, null); }, typeof(System.ArgumentNullException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithOnlyResourceName : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        AssertThrowsException(delegate() { FastFail.ConfigureResource(ResourceName, null); }, typeof(System.ArgumentNullException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithNoResourceName : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        AssertThrowsException(delegate() { FastFail.ConfigureResource(null, new FastFailResourceConfig()); }, typeof(System.ArgumentNullException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithNoThrottleFunction : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig resourceConfig = new FastFailResourceConfig();
                        resourceConfig.ThrottlingSelector = null;
                        AssertThrowsException(delegate() { FastFail.ConfigureResource(ResourceName, resourceConfig); }, typeof(System.ArgumentNullException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithZeroWindowSize : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig resourceConfig = new FastFailResourceConfig();
                        resourceConfig.CaptureTimeWindow = TimeSpan.Zero;
                        AssertThrowsException(delegate() { FastFail.ConfigureResource(ResourceName, resourceConfig); }, typeof(System.ArgumentException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithAlmostLegalWindowSize : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig resourceConfig = new FastFailResourceConfig();
                        resourceConfig.CaptureTimeWindow = new TimeSpan(TimeSpan.FromSeconds(1).Ticks - 1);
                        AssertThrowsException(delegate() { FastFail.ConfigureResource(ResourceName, resourceConfig); }, typeof(System.ArgumentException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithSmallestAllowableWindowSize : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig resourceConfig = new FastFailResourceConfig();
                        resourceConfig.CaptureTimeWindow = new TimeSpan(0, 0, 1);
                        FastFail.ConfigureResource(ResourceName, resourceConfig);
                        AssertResourceIsUsingConfig(ResourceName, resourceConfig);
                        AllocateAllResources(ResourceName);
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithDefaultConfig : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig resourceConfig = new FastFailResourceConfig();
                        FastFail.ConfigureResource(ResourceName, resourceConfig);
                        AssertResourceIsUsingConfig(ResourceName, resourceConfig);
                        AllocateAllResources(ResourceName);
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithDifferentResourceCasing : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig resourceConfig = new FastFailResourceConfig();
                        FastFail.ConfigureResource(ResourceName.ToUpper(), resourceConfig);
                        AssertResourceIsUsingConfig(ResourceName.ToLower(), resourceConfig);
                        AllocateAllResources(ResourceName.ToLower());
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithInvertedThreshold : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig config = CreateConfigWithLowAndHighBounds(SuggestedAllocationAmount, 0);
                        FastFail.ConfigureResource(ResourceName, config);
                        AssertResourceIsUsingConfig(ResourceName, config);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithInvertedThresholdThenFix : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig invertedConfig = CreateConfigWithLowAndHighBounds(2 * SuggestedAllocationAmount, 0);
                        FastFail.ConfigureResource(ResourceName, invertedConfig);
                        AssertResourceIsUsingConfig(ResourceName, invertedConfig);

                        FastFailResourceConfig fixedConfig = CreateConfigWithLowAndHighBounds(0, SuggestedAllocationAmount);
                        FastFail.ConfigureResource(ResourceName, fixedConfig);
                        AssertResourceIsUsingConfig(ResourceName, fixedConfig);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithIdenticalThresholds : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig resourceConfig = CreateConfigWithLowAndHighBounds(SuggestedAllocationAmount, SuggestedAllocationAmount);

                        FastFail.ConfigureResource(ResourceName, resourceConfig);
                        AssertResourceIsUsingConfig(ResourceName, resourceConfig);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithIdenticalThresholdsThenFix : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateConfigWithLowAndHighBounds(SuggestedAllocationAmount, SuggestedAllocationAmount));
                        AllocateAllResources(ResourceName);

                        FastFailResourceConfig resourceConfig = CreateConfigWithLowAndHighBounds(0, 2 * SuggestedAllocationAmount);
                        FastFail.ConfigureResource(ResourceName, resourceConfig);
                        AssertResourceIsUsingConfig(ResourceName, resourceConfig);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(2 * SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct."); ;
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")] // For LSG 5590
                public class ConfigureResourceChangeToLowerThreshold : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateConfigWithLowAndHighBounds(3 * SuggestedAllocationAmount, 4 * SuggestedAllocationAmount));

                        FastFailResourceConfig lowerConfig = CreateConfigWithLowAndHighBounds(SuggestedAllocationAmount, 2 * SuggestedAllocationAmount);
                        FastFail.ConfigureResource(ResourceName, lowerConfig);
                        AssertResourceIsUsingConfig(ResourceName, lowerConfig);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(2 * SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")] // For LSG 5590
                public class ConfigureResourceChangeToHigherThreshold : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateConfigWithLowAndHighBounds(SuggestedAllocationAmount, 2 * SuggestedAllocationAmount));

                        FastFailResourceConfig higherConfig = CreateConfigWithLowAndHighBounds(3 * SuggestedAllocationAmount, 4 * SuggestedAllocationAmount);
                        FastFail.ConfigureResource(ResourceName, higherConfig);
                        AssertResourceIsUsingConfig(ResourceName, higherConfig);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(4 * SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ChangeUpperThreadCapBoundAtRuntime : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateConfigWithLowAndHighBounds(0, SuggestedAllocationAmount));
                        uint initialAllocationCount = AllocateAllResources(ResourceName);

                        FastFailResourceConfig newConfig = CreateConfigWithLowAndHighBounds(0, 2 * SuggestedAllocationAmount);
                        FastFail.ConfigureResource(ResourceName, newConfig);
                        AssertResourceIsUsingConfig(ResourceName, newConfig);

                        uint reconfiguredAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(initialAllocationCount * 2, reconfiguredAllocationCount, "Resource allocations are not equal.");

                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ChangeLowerThreadCapBoundAtRuntime : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        CustomFastFailThrottleSelector selector = new CustomFastFailThrottleSelector();
                        selector.ReturnValue = 0;

                        FastFail.ConfigureResource(ResourceName, CreateConfigWithBoundsAndSelector(0, 2 * SuggestedAllocationAmount, selector));
                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(0, initialAllocationCount, "Resource allocation is not correct.");

                        FastFail.ConfigureResource(ResourceName, CreateConfigWithBoundsAndSelector(SuggestedAllocationAmount, 2 * SuggestedAllocationAmount, selector));
                        uint reconfiguredAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(SuggestedAllocationAmount, reconfiguredAllocationCount, "Resource allocation did not increase appropriately.");

                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ChangeThrottleFunctionAtRuntime : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateConfigWithLowAndHighBounds(SuggestedAllocationAmount, 2 * SuggestedAllocationAmount));
                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(2 * SuggestedAllocationAmount, initialAllocationCount, "Resource allocation is not correct.");

                        CustomFastFailThrottleSelector selector = new CustomFastFailThrottleSelector();
                        selector.ReturnValue = 0;
                        FastFail.ConfigureResource(ResourceName, CreateConfigWithBoundsAndSelector(SuggestedAllocationAmount, 2 * SuggestedAllocationAmount, selector));
                        uint reconfiguredAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(SuggestedAllocationAmount, reconfiguredAllocationCount, "Resource allocation is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceCopiesResourceConfig : ConfigTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig config = CreateConfigWithLowAndHighBounds(SuggestedAllocationAmount, 2 * SuggestedAllocationAmount);
                        FastFail.ConfigureResource(ResourceName, config);

                        FastFailResourceConfig oldConfig = new FastFailResourceConfig();
                        oldConfig.MinimumThreshold = config.MinimumThreshold;
                        oldConfig.MaximumThreshold = config.MaximumThreshold;
                        oldConfig.ThrottlingSelector = config.ThrottlingSelector;
                        oldConfig.CaptureTimeWindow = config.CaptureTimeWindow;

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(2 * SuggestedAllocationAmount, initialAllocationCount, "Resource allocation is not correct.");

                        // intentionally unregistered changes
                        CustomFastFailThrottleSelector selector = new CustomFastFailThrottleSelector();
                        selector.ReturnValue = 0;
                        config.MinimumThreshold = 0;
                        config.MaximumThreshold = 3 * SuggestedAllocationAmount;
                        config.ThrottlingSelector = selector;
                        config.CaptureTimeWindow = new TimeSpan(config.CaptureTimeWindow.Ticks * 2);

                        uint reconfiguredAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(2 * SuggestedAllocationAmount, reconfiguredAllocationCount, "Resource allocation is not correct.");
                        AssertResourceIsUsingConfig(ResourceName, oldConfig);
                    }
                }
            }

            [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public class ViaNpdb : TestNode
            {
                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithInvertedThreshold : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig config = CreateNpdbConfigWithLowAndHighBounds(ResourceName, SuggestedAllocationAmount, 0);
                        FastFail.ConfigureResource(ResourceName, config);
                        AssertResourceIsUsingConfig(ResourceName, config);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithInvertedThresholdThenFix : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig invertedConfig = CreateNpdbConfigWithLowAndHighBounds(ResourceName, 2 * SuggestedAllocationAmount, 0);
                        FastFail.ConfigureResource(ResourceName, invertedConfig);
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);
                        AssertResourceIsUsingConfig(ResourceName, invertedConfig);

                        FastFailResourceConfig fixedConfig = CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, SuggestedAllocationAmount);
                        AssertResourceIsUsingConfig(ResourceName, fixedConfig);
                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithIdenticalThresholds : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFailResourceConfig resourceConfig = CreateNpdbConfigWithLowAndHighBounds(ResourceName, SuggestedAllocationAmount, SuggestedAllocationAmount);
                        FastFail.ConfigureResource(ResourceName, resourceConfig);
                        AssertResourceIsUsingConfig(ResourceName, resourceConfig);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ConfigureResourceWithIdenticalThresholdsThenFix : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, SuggestedAllocationAmount, SuggestedAllocationAmount));
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);
                        AllocateAllResources(ResourceName);

                        FastFailResourceConfig resourceConfig = CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, 2 * SuggestedAllocationAmount);
                        AssertResourceIsUsingConfig(ResourceName, resourceConfig);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(2 * SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")] // For LSG 5590
                public class ConfigureResourceChangeToLowerThreshold : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, 3 * SuggestedAllocationAmount, 4 * SuggestedAllocationAmount));
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);

                        FastFailResourceConfig lowerConfig = CreateNpdbConfigWithLowAndHighBounds(ResourceName, SuggestedAllocationAmount, 2 * SuggestedAllocationAmount);
                        AssertResourceIsUsingConfig(ResourceName, lowerConfig);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(2 * SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")] // For LSG 5590
                public class ConfigureResourceChangeToHigherThreshold : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, SuggestedAllocationAmount, 2 * SuggestedAllocationAmount));
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);

                        FastFailResourceConfig higherConfig = CreateNpdbConfigWithLowAndHighBounds(ResourceName, 3 * SuggestedAllocationAmount, 4 * SuggestedAllocationAmount);
                        AssertResourceIsUsingConfig(ResourceName, higherConfig);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(4 * SuggestedAllocationAmount, initialAllocationCount, "Maximum number of allocations is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ChangeUpperThreadCapBoundAtRuntime : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, SuggestedAllocationAmount));
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);

                        FastFailResourceConfig newConfig = CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, 2 * SuggestedAllocationAmount);
                        AssertResourceIsUsingConfig(ResourceName, newConfig);

                        uint reconfiguredAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(initialAllocationCount * 2, reconfiguredAllocationCount, "Resource allocations are not equal.");

                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ChangeLowerThreadCapBoundAtRuntime : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        CustomFastFailThrottleSelector selector = new CustomFastFailThrottleSelector();
                        selector.ReturnValue = 0;
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithBoundsAndSelector(ResourceName, 0, 2 * SuggestedAllocationAmount, selector));
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(0, initialAllocationCount, "Resource allocation is not correct.");

                        CreateNpdbConfigWithBoundsAndSelector(ResourceName, SuggestedAllocationAmount, 2 * SuggestedAllocationAmount, selector);
                        uint reconfiguredAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(SuggestedAllocationAmount, reconfiguredAllocationCount, "Resource allocation did not increase appropriately.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class ChangeThrottleFunctionAtRuntime : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, SuggestedAllocationAmount, 2 * SuggestedAllocationAmount));
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);

                        uint initialAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(2 * SuggestedAllocationAmount, initialAllocationCount, "Resource allocation is not correct.");

                        CustomFastFailThrottleSelector selector = new CustomFastFailThrottleSelector();
                        selector.ReturnValue = 0;

                        //configureresource is required b/c throttling selector is changed.
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithBoundsAndSelector(ResourceName, SuggestedAllocationAmount, 2 * SuggestedAllocationAmount, selector));
                        uint reconfiguredAllocationCount = AllocateAllResources(ResourceName);
                        AssertEqual<uint>(SuggestedAllocationAmount, reconfiguredAllocationCount, "Resource allocation is not correct.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")] // For LSG 6555
                public class ChangeNpdbSettingsAndCheckForThrottleFunction : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        CustomFastFailThrottleSelector selector = new CustomFastFailThrottleSelector();
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithBoundsAndSelector(ResourceName, 0, 2 * SuggestedAllocationAmount, selector));
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);

                        AllocateAllResources(ResourceName);

                        CreateNpdbConfigWithBoundsAndSelector(ResourceName, SuggestedAllocationAmount, 2 * SuggestedAllocationAmount, selector);
                        AllocateAllResources(ResourceName);

                        AssertReferencesEqual<FastFailThrottleSelector>(selector, FastFail.GetResource(ResourceName).ThrottlingSelector, "The throttling selector changed unexpectedly.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")] // For LSG 6556
                public class CopyConfigFromResourceCopiesThrottleFunction : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        CustomFastFailThrottleSelector selector = new CustomFastFailThrottleSelector();
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithBoundsAndSelector(ResourceName, 0, 2 * SuggestedAllocationAmount, selector));
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);

                        AllocateAllResources(ResourceName);

                        FastFailResourceConfig config = FastFailResourceConfig.CreateFromResource(FastFail.GetResource(ResourceName), ResourceName, false);

                        AssertReferencesEqual<FastFailThrottleSelector>(selector, config.ThrottlingSelector, "The throttling selector changed unexpectedly.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")] // For LSG 6556
                public class CopyConfigFromResourceCopiesThrottleFunction2 : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        CustomFastFailThrottleSelector selector = new CustomFastFailThrottleSelector();
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithBoundsAndSelector(ResourceName, 0, 2 * SuggestedAllocationAmount, selector));
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);

                        AllocateAllResources(ResourceName);

                        FastFailResourceConfig config = FastFailResourceConfig.CreateFromResource(FastFail.GetResource(ResourceName), ResourceName, true);

                        AssertReferencesEqual<FastFailThrottleSelector>(selector, config.ThrottlingSelector, "The throttling selector changed unexpectedly.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")] // For LSG 6555
                public class CreateFromResourceWithNullResource : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        AssertThrowsException(delegate { FastFailResourceConfig.CreateFromResource(null, ResourceName, true); }, typeof(ArgumentNullException)); 
                    }
                }
            }

            [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public class GetResource : TestNode
            {
                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class GetResourceWithNoArguments : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        AssertThrowsException(delegate() { FastFail.GetResource(null); }, typeof(System.ArgumentNullException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class GetResourceWithNonExistentResource : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        AssertThrowsException(delegate() { FastFail.GetResource(ResourceName); }, typeof(FastFailTrackerMissingException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class GetResourceWithExistingResource : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateConfigWithLowAndHighBounds(0, SuggestedAllocationAmount));

                        AssertNotNull(FastFail.GetResource(ResourceName), "GetResource did not return a resource.");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class GetResourceAfterResourceReconfiguration : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, CreateConfigWithLowAndHighBounds(0, SuggestedAllocationAmount));
                        FastFailResource resource1 = FastFail.GetResource(ResourceName);

                        FastFail.ConfigureResource(ResourceName, CreateConfig(SuggestedAllocationAmount, SuggestedAllocationAmount, new CustomFastFailThrottleSelector(), new TimeSpan(0, 0, 60)));
                        FastFailResource resource2 = FastFail.GetResource(ResourceName);
                        AssertReferencesEqual(resource1, resource2, "GetResource returned two different instances for the same resource.");
                    }
                }
            }
            [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public class RegisterNpdbListener : TestNode
            {
                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class WithNoArguments : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        AssertThrowsException(delegate() { FastFail.RegisterNpdbListener(null, null); }, typeof(ArgumentNullException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class WithOnlyNonExistingResourceName : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        AssertThrowsException(delegate() { FastFail.RegisterNpdbListener(ResourceName, null); }, typeof(ArgumentNullException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class WithOnlyExistingResourceName : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.ConfigureResource(ResourceName, new FastFailResourceConfig());
                        AssertThrowsException(delegate() { FastFail.RegisterNpdbListener(ResourceName, null); }, typeof(ArgumentNullException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class WithOnlyPrefix : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        AssertThrowsException(delegate() { FastFail.RegisterNpdbListener(null, ResourceName); }, typeof(ArgumentNullException));
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class WithNonExistentResourceNameAndPrefix : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        FastFail.RegisterNpdbListener(ResourceName, "non existent resource prefix");
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")] //LSG 5958
                public class WithNonExistentResourceNameAndSettingChanges : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        foreach (string suffix in SettingSuffixes)
                        {
                            ChangeSettingToValue(ResourceName + suffix, "30");
                        }

                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);

                        foreach (string suffix in SettingSuffixes)
                        {
                            // make sure config caches the values so we can get change notifications
                            Config.GetSetting(ResourceName + suffix);
                            ChangeSettingToValue(ResourceName + suffix, "100");
                        }

                        Config.CheckForUpdates();

                        foreach (string suffix in SettingSuffixes)
                        {
                            // if the change machinery throws an exception, these will retain their old value.
                            AssertEqual(Config.GetSetting(ResourceName + suffix), "100", "CommonConfig has stale setting data.");
                        }
                    }
                }

                [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
                public class WithAwkwardSettingCaptialization : NpdbTestNode
                {
                    public override void DistantRun()
                    {
                        foreach (string suffix in SettingSuffixes)
                        {
                            ChangeSettingToValue(ResourceName + suffix, "30");
                        }
                        FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName.ToUpper(), 20, 20));
                        FastFail.RegisterNpdbListener(ResourceName, ResourceName);

                        foreach (string suffix in SettingSuffixes)
                        {
                            ChangeSettingToValue((ResourceName + suffix).ToUpper(), "100");
                        }
                        Config.CheckForUpdates();

                        AssertResourceIsUsingConfig(ResourceName, CreateConfig(100, 100, new FastFailThrottleSelector(), TimeSpan.FromSeconds(100)));
                    }
                }
            }
        }

        [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
        public class Throttle : FastFailTestNode
        {
            static readonly uint MinBound = 0;
            static readonly uint MaxBound = 8;
            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public void ThrottleResultsGetUsed()
            {
                string resourceName = GetRandomResourceName();
                CustomFastFailThrottleSelector selector = new CustomFastFailThrottleSelector();
                FastFailResourceConfig config = CreateConfigWithBoundsAndSelector(0, 8, selector);
                FastFail.ConfigureResource(resourceName, config);

                // don't try to start this out with zero - by design, this will get stuck forever.
                foreach (float returnValue in new float[] { 0.25F, 0.5F, 0.75F, 1 })
                {
                    selector.ReturnValue = returnValue;
                    uint allocatedResourceCount = AllocateAllResources(resourceName);
                    AssertEqual<uint>((uint)(returnValue * 8), allocatedResourceCount, "allocationCount is off");
                }
            }


            public void ParameterizedClampTest(uint lowBounds, uint highBounds, float throttleValue, uint expectedResult)
            {
                string resourceName = GetRandomResourceName();
                CustomFastFailThrottleSelector selector = new CustomFastFailThrottleSelector();
                FastFailResourceConfig config = CreateConfigWithBoundsAndSelector(lowBounds, highBounds, selector);
                FastFail.ConfigureResource(resourceName, config);

                selector.ReturnValue = throttleValue;
                uint allocatedResourceCount = AllocateAllResources(resourceName);
                AssertEqual<uint>(expectedResult, allocatedResourceCount, "Allocated a different number of resources than expected.");
            }
            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public void ClampToZero()
            {
                ParameterizedClampTest(MinBound, MaxBound, -1, MinBound);
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public void ClampToZeroFromLargeNegativeNumber()
            {
                ParameterizedClampTest(MinBound, MaxBound, float.MinValue, MinBound);
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public void ClampToZeroFromNegativeInfinity()
            {
                ParameterizedClampTest(MinBound, MaxBound, float.NegativeInfinity, MinBound);
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public void ClampToOne()
            {
                ParameterizedClampTest(MinBound, MaxBound, 1.1F, MaxBound);
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public void ClampToOneFromLargeNumber()
            {
                ParameterizedClampTest(MinBound, MaxBound, float.MaxValue, MaxBound);
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public void ClampToOneFromPositiveInfinity()
            {
                ParameterizedClampTest(MinBound, MaxBound, float.PositiveInfinity, MaxBound);
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")] // LSG 5962
            public void NotANumber()
            {
                AssertThrowsException(delegate() { ParameterizedClampTest(MinBound, MaxBound, float.NaN, MaxBound); }, typeof(InvalidOperationException));
            }
        }

        [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
        public class AcquireResource : TestNode
        {
            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public class WithNullName : ConfigTestNode
            {
                public override void DistantRun()
                {
                    AssertThrowsException(delegate() { new FastFailTracker((string)null); }, typeof(ArgumentNullException));
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public class WithNonExistentResourceName : ConfigTestNode
            {
                public override void DistantRun()
                {
                    AssertThrowsException(delegate() { new FastFailTracker(ResourceName); }, typeof(FastFailTrackerMissingException));
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public class WithExistingResource : ConfigTestNode
            {
                public override void DistantRun()
                {
                    FastFail.ConfigureResource(ResourceName, new FastFailResourceConfig());
                    new FastFailTracker(ResourceName);
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
            public class WithAlternativeCasing : ConfigTestNode
            {
                public override void DistantRun()
                {
                    FastFail.ConfigureResource(ResourceName.ToUpper(), new FastFailResourceConfig());
                    new FastFailTracker(ResourceName.ToLower());
                }
            }
        }

        [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
        public class PerformanceCounters : TestNode
        {
            public class PerformanceCounterTestNode : NpdbTestNode
            {
                private static readonly string CounterCategory = "FastFail - PassportCreation";
                private static readonly string CounterInstance = "_total_"; // because we we're not in a real component, this is the instance that gets created for us.

                //private PerformanceCounter _totalSuccessCounter;
                private PerformanceCounter _totalTimeoutCounter;
                private PerformanceCounter _totalFailureCounter;
                private PerformanceCounter _totalDenialCounter;

                private float _startingDenialCount;
                private float _startingTimeoutCount;
                private float _startingFailureCount;

                private float _denialCount;
                private float _timeoutCount;
                private float _failureCount;

                public float DenialCount
                {
                    get { return _denialCount; }
                }
                public float TimeoutCount
                {
                    get { return _timeoutCount; }
                }
                public float FailureCount
                {
                    get { return _failureCount; }
                }

                public void UpdateCounterValues()
                {
                    // wait for the BCL to read the next perf counter values
                    Thread.Sleep(50); // this value pulled from the MSDN next value sample.
                    _failureCount = _totalFailureCounter.NextValue() - _startingFailureCount;
                    _timeoutCount = _totalTimeoutCounter.NextValue() - _startingTimeoutCount;
                    _denialCount = _totalDenialCounter.NextValue() - _startingDenialCount;
                }


                public delegate void NestedTestCallback(FastFailTracker t);
                public void PerformOperationOnManyResources(uint resourceCount, NestedTestCallback callback)
                {
                    FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, resourceCount));
                    List<FastFailTracker> trackerList = new List<FastFailTracker>();
                    for (uint i = 0; i < resourceCount; i++)
                    {
                        trackerList.Add(new FastFailTracker(ResourceName));
                    }
                    foreach (FastFailTracker tracker in trackerList)
                    {
                        callback(tracker);
                    }
                }

                public override void DistantPreRun()
                {
                    base.DistantPreRun();

                    // InitPerfCtrs no longer causes the performance counters to come up, however, forcing
                    // one to be incremented will.
                    FastFailPerformanceCategory.InitPerfCtrs();
                    FastFail.ConfigureResource(ResourceName, new FastFailResourceConfig());
                    FastFailTracker tracker = new FastFailTracker(ResourceName);
                    tracker.IndicateFailure();

                    _totalFailureCounter = new PerformanceCounter(CounterCategory, "Failure, Total", CounterInstance);
                    _totalTimeoutCounter = new PerformanceCounter(CounterCategory, "Timeout, Total", CounterInstance);
                    _totalDenialCounter = new PerformanceCounter(CounterCategory, "Denial, Total", CounterInstance);

                    _startingFailureCount = _totalFailureCounter.NextValue();
                    _startingTimeoutCount = _totalTimeoutCounter.NextValue();
                    _startingDenialCount = _totalDenialCounter.NextValue();
                }

                public override void DistantPostRun()
                {
                    _totalFailureCounter.Dispose();
                    _totalTimeoutCounter.Dispose();
                    _totalDenialCounter.Dispose();
                    base.DistantPostRun();
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class IndicateSuccess : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, 50));
                    FastFailTracker tracker = new FastFailTracker(ResourceName);
                    tracker.IndicateSuccess();
                    UpdateCounterValues();

                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class IndicateFailure : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, 50));
                    FastFailTracker tracker = new FastFailTracker(ResourceName);
                    tracker.IndicateFailure();
                    UpdateCounterValues();

                    AssertEqual<float>(FailureCount, 1, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class IndicateFailureUsingDispose : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, 50));
                    FastFailTracker tracker = new FastFailTracker(ResourceName);
                    using (tracker) { }

                    UpdateCounterValues();

                    AssertEqual<float>(FailureCount, 1, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class IndicateTimeout : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, 50));
                    FastFailTracker tracker = new FastFailTracker(ResourceName);
                    tracker.IndicateTimeout();
                    UpdateCounterValues();

                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 1, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class Denial : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, 0));
                    try
                    {
                        FastFailTracker tracker = new FastFailTracker(ResourceName);
                    }
                    catch (FastFailException) { }

                    UpdateCounterValues();

                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 1, "Denial count is incorrect.");
                }
            }



            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class NestedSuccess : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(50, delegate(FastFailTracker t) { t.IndicateSuccess(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }
            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class NestedFailure : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(50, delegate(FastFailTracker t) { t.IndicateFailure(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 50, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class NestedTimeout : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(50, delegate(FastFailTracker t) { t.IndicateTimeout(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 50, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }
            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class RepeatedDenial : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    FastFail.ConfigureResource(ResourceName, CreateNpdbConfigWithLowAndHighBounds(ResourceName, 0, 0));
                    for (int i = 0; i < 50; i++)
                    {
                        try
                        {
                            new FastFailTracker(ResourceName);
                        }
                        catch (FastFailException) { }
                    }
                    UpdateCounterValues();

                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 50, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class SuccessThenFailure : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(1, delegate(FastFailTracker t) { t.IndicateSuccess(); t.IndicateFailure(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }
            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class SuccessThenTimeout : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(1, delegate(FastFailTracker t) { t.IndicateSuccess(); t.IndicateTimeout(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class SuccessThenSuccess : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(1, delegate(FastFailTracker t) { t.IndicateSuccess(); t.IndicateSuccess(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class TimeoutThenFailure : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(1, delegate(FastFailTracker t) { t.IndicateTimeout(); t.IndicateFailure(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 1, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }
            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class TimeoutThenTimeout : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(1, delegate(FastFailTracker t) { t.IndicateTimeout(); t.IndicateTimeout(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 1, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class TimeoutThenSuccess : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(1, delegate(FastFailTracker t) { t.IndicateTimeout(); t.IndicateSuccess(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 0, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 1, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class FailureThenFailure : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(1, delegate(FastFailTracker t) { t.IndicateFailure(); t.IndicateFailure(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 1, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }
            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class FailureThenTimeout : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(1, delegate(FastFailTracker t) { t.IndicateFailure(); t.IndicateTimeout(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 1, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class FailureThenSuccess : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    PerformOperationOnManyResources(1, delegate(FastFailTracker t) { t.IndicateFailure(); t.IndicateSuccess(); });
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 1, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }

            [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("Manual")]
            public class CaseInsensitiveResourceLookup : PerformanceCounterTestNode
            {
                public override void DistantRun()
                {
                    FastFail.ConfigureResource(ResourceName.ToUpper(), CreateNpdbConfigWithLowAndHighBounds(ResourceName.ToUpper(), 0, 50));
                    FastFailTracker tracker = new FastFailTracker(ResourceName.ToLower());
                    tracker.IndicateFailure();
                    UpdateCounterValues();
                    AssertEqual<float>(FailureCount, 1, "Failure count is incorrect.");
                    AssertEqual<float>(TimeoutCount, 0, "Timeout count is incorrect.");
                    AssertEqual<float>(DenialCount, 0, "Denial count is incorrect.");
                }
            }
        }

        public class CustomFastFailThrottleSelector : FastFailThrottleSelector
        {
            private float _returnValue;
            public float ReturnValue
            {
                set { _returnValue = value; }
                get { return _returnValue; }
            }

            public override float SelectThrottle(FastFailStatistics statistics)
            {
                return _returnValue;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\ServiceDVT.cs ===
using System;
using System.Net;
using System.Web;
using System.Web.Hosting;
using System.IO;
using System.Collections.Generic;

using xonline.common.diagnostics;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.stfutil;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;

namespace xonline.common.test.service 
{

public class ServiceDVTTestBaseGroup : TestNode
{



}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\FastFailUnitThrottlingStatistics.cs ===
namespace unit.common.service {
   using System;
   using System.Collections.Generic;
   using System.Threading;

   using ServerTestFramework;
   using ServerTestFramework.LiveService;
   using ServerTestFramework.Utilities;

   using xonline.common.diagnostics;
   using xonline.common.service;

   public class ThrottlingStatisticsControl {
      public ThrottlingStatisticsControl(string resourceName) {
         ResourceName = resourceName;

         Zero();
      }

      public void Zero() {
         ExitEvent       = new ManualResetEvent(false);
         FinishedCycle   = new AutoResetEvent(false);
         SamplingEvent   = new ManualResetEvent(true);
         ActiveCycles    = 0;

         SuccessTicks    = 0;
         FailureTicks    = 0;
         TimeoutTicks    = 0;
         MiliSecondTicks = 0;
         ThrottleTicks   = 0;
      }

      public string           ResourceName;

      public ManualResetEvent ExitEvent;
      public AutoResetEvent   FinishedCycle;
      public ManualResetEvent SamplingEvent;
      public int              ActiveCycles;

      public int              SuccessTicks;
      public int              FailureTicks;
      public int              TimeoutTicks;
      public int              MiliSecondTicks;
      public int              ThrottleTicks;
   }

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
   public class FastFailUnitThrottlingStatistics : TestNode {
      public const uint MIX_SUCCESS_FLAG = 1;
      public const uint MIX_FAILURE_FLAG = 2;
      public const uint MIX_TIMEOUT_FLAG = 4;
      public const uint MIX_SLEEPER_FLAG = 8;

      public FastFailUnitThrottlingStatistics() {
         uint duration = 1000 * 6;

         //1 mix
         AddChild(new ThrottlingStatisticsUnit("OnlySuccess100", MIX_SUCCESS_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("OnlyFailure100", MIX_FAILURE_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("OnlyTimeout100", MIX_TIMEOUT_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("OnlySleeper100", MIX_SLEEPER_FLAG, 100, duration));

         //2 mix
         AddChild(new ThrottlingStatisticsUnit("SuccessFailure100", MIX_SUCCESS_FLAG | MIX_FAILURE_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("SuccessTimeout100", MIX_SUCCESS_FLAG | MIX_TIMEOUT_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("SuccessSleeper100", MIX_SUCCESS_FLAG | MIX_SLEEPER_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("FailureTimeout100", MIX_FAILURE_FLAG | MIX_TIMEOUT_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("FailureSleeper100", MIX_FAILURE_FLAG | MIX_SLEEPER_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("TimeoutSleeper100", MIX_TIMEOUT_FLAG | MIX_SLEEPER_FLAG, 100, duration));

         //3 mix
         AddChild(new ThrottlingStatisticsUnit("SuccessFailureTimeout100", MIX_SUCCESS_FLAG | MIX_FAILURE_FLAG | MIX_TIMEOUT_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("SuccessFailureSleeper100", MIX_SUCCESS_FLAG | MIX_FAILURE_FLAG | MIX_SLEEPER_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("SuccessTimeoutSleeper100", MIX_SUCCESS_FLAG | MIX_TIMEOUT_FLAG | MIX_SLEEPER_FLAG, 100, duration));
         AddChild(new ThrottlingStatisticsUnit("FailureTimeoutSleeper100", MIX_FAILURE_FLAG | MIX_TIMEOUT_FLAG | MIX_SLEEPER_FLAG, 100, duration));

         //4 mix
         AddChild(new ThrottlingStatisticsUnit("SuccessFailureTimeoutSleeper100", MIX_SUCCESS_FLAG | MIX_FAILURE_FLAG | MIX_TIMEOUT_FLAG | MIX_SLEEPER_FLAG, 100, duration));
      }
   }

   public class ThrottlingStatisticsSelector : FastFailThrottleSelector {
      public delegate void Sampler();

      public ThrottlingStatisticsSelector(ThrottlingStatisticsControl control, Sampler sampler) {
         _control = control;
         _sampler = sampler;
      }

      private void EnterSampler() {
         lock (_control) {
            _control.SamplingEvent.Reset();

            Global.RO.Info("Sampler waiting for {0} active cyles.", _control.ActiveCycles-1);

            while (_control.ActiveCycles > 1)
               _control.FinishedCycle.WaitOne();
         }
         
         Global.RO.Info("Sampler finished waiting proceding with sampling...");
      }

      private void LeaveSampler() {
         _control.SamplingEvent.Set();
      }

      public override float SelectThrottle(FastFailStatistics statistics) {
         if (0 == (Interlocked.Increment(ref _control.ThrottleTicks) % 1000)) {
            EnterSampler();
           
            try { _sampler(); }
            catch {
               _control.ExitEvent.Set();
               throw;
            }
            finally { LeaveSampler(); }
         }

         return 1.0f;
      }

      ThrottlingStatisticsControl _control;
      Sampler                     _sampler;
   }

   [Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
   public class ThrottlingStatisticsUnit : TestBase {
      public ThrottlingStatisticsUnit(
         string name,
         uint flags,
         uint threadCount,
         uint duration)
         : this(name, Guid.NewGuid().ToString(), flags, threadCount, duration) { }
         
      public ThrottlingStatisticsUnit(
         string name,
         string resourceName, 
         uint flags, 
         uint threadCount,
         uint duration) 
         : base(name)
      {
         _control     = new ThrottlingStatisticsControl(resourceName);
         _threadCount = threadCount;
         _duration    = duration;
         _flags       = flags;
      }

      protected void ThreadProc(object obj) {
         ((ThrottlingStatisticsBase)obj).Execute(_flags);
      }

      private void SampleStatistics() {
         FastFailStatistics         statistics;
         FastFailFeatureAggregation aggregation;
         uint                       expected, actual;

         statistics  = FastFail.GetResource(_control.ResourceName).Statistics;
         aggregation = statistics.AggregatedFeatures;

         Global.RO.Info("SuccessfulRequests.Count = {0}", aggregation.SuccessfulRequests.Count);
         Global.RO.Info("Control.SuccessTicks     = {0}", _control.SuccessTicks);
         Global.RO.Info("FailedRequests.Count     = {0}", aggregation.FailedRequests.Count);
         Global.RO.Info("Control.FailureTicks     = {0}", _control.FailureTicks);
         Global.RO.Info("TimedoutRequests.Count   = {0}", aggregation.TimedoutRequests.Count);
         Global.RO.Info("Control.TimeoutTicks     = {0}", _control.TimeoutTicks);
         Global.RO.Info("AllRequests.Count        = {0}", aggregation.AllRequests.Count);
         Global.RO.Info("Control.AllTicks         = {0}", _control.SuccessTicks + _control.FailureTicks + _control.TimeoutTicks);
         
         // checking success count
         expected = (uint)aggregation.SuccessfulRequests.Count;
         actual   = (uint)_control.SuccessTicks;
         ValueCheck.IsTrue(expected == actual, string.Format("incorrect success count: {0} != {1}.", expected, actual));

         // checking failure count
         expected = (uint)aggregation.FailedRequests.Count;
         actual   = (uint)_control.FailureTicks;
         ValueCheck.IsTrue(expected == actual, string.Format("incorrect failure count: {0} != {1}.", expected, actual));

         // checking timeout count
         expected = (uint)aggregation.TimedoutRequests.Count;
         actual   = (uint)_control.TimeoutTicks;
         ValueCheck.IsTrue(expected == actual, string.Format("incorrect timeout count: {0} != {1}.", expected, actual));

         // checking all count
         expected = (uint)aggregation.AllRequests.Count;
         actual   = (uint)(_control.SuccessTicks + _control.FailureTicks + _control.TimeoutTicks);
         ValueCheck.IsTrue(expected == actual, string.Format("incorrect all request count: {0} != {1}.", expected, actual));
      }

      private void ConfigureResource() {
         FastFailResourceConfig config;
         
         config = new FastFailResourceConfig();

         //conjure up a new configuration values for this resource
         config.MaximumThreshold   = 100; // hoccus-poccus
         config.MinimumThreshold   = 1;   // abracadabra
         config.CaptureTimeWindow  = TimeSpan.FromHours(1);
         config.ThrottlingSelector = new ThrottlingStatisticsSelector(_control, SampleStatistics);

         //configure this resource
         FastFail.ConfigureResource(_control.ResourceName, config);
      }

      private void InitializeTest() {
         ConfigureResource();
         _control.Zero();
      }

      private void GoIdle() {
         Thread.Sleep((int)_duration);

         _control.ExitEvent.Set();
      }

      private void WaitForThreads(XboxLiveThread[] threads) {
         for (uint c=0; c<threads.Length; c++) {
            threads[c].Join();

            if (null != threads[c].ThreadException)
               throw new Exception("a thread encountered an exception during the test", threads[c].ThreadException);
         }
      }

      protected override void Execute() {
         XboxLiveThread[] threads;

         InitializeTest();

         threads = new XboxLiveThread[_threadCount];
         for (uint c=0; c<_threadCount; c++) {
            threads[c] = new XboxLiveThread(ThreadProc);
            threads[c].Name = "unit" + c.ToString();
            threads[c].Start(new ThrottlingStatisticsBase(_control));
         }

         GoIdle();

         WaitForThreads(threads);

         //one more for good measure
         SampleStatistics();

         ResultCode = TEST_RESULTS.PASSED;
      }

      ThrottlingStatisticsControl _control;
      uint                        _threadCount;
      uint                        _flags;
      uint                        _duration;
   }

   public class ThrottlingStatisticsBase {
      public ThrottlingStatisticsBase(ThrottlingStatisticsControl control) {
         _control   = control;
         _generator = new Random();
      } 

      private void SuccessTick() {
         int sleep = _generator.Next(1, 5);

         using (FastFailTracker tracker = new FastFailTracker(_control.ResourceName)) {
            Interlocked.Increment(ref _control.ActiveCycles);

            Thread.Sleep(sleep);
            tracker.IndicateSuccess();

            Interlocked.Increment(ref _control.SuccessTicks);
            Interlocked.Add(ref _control.MiliSecondTicks, sleep);
            
            Interlocked.Decrement(ref _control.ActiveCycles);
         }
      }
      
      private void FailureTick() {
         int sleep = _generator.Next(1, 5);

         using (FastFailTracker tracker = new FastFailTracker(_control.ResourceName)) {
            Interlocked.Increment(ref _control.ActiveCycles);

            Thread.Sleep(sleep);
            tracker.IndicateFailure();

            Interlocked.Increment(ref _control.FailureTicks);
            Interlocked.Add(ref _control.MiliSecondTicks, sleep);
            
            Interlocked.Decrement(ref _control.ActiveCycles);
         }
      }

      private void TimeoutTick() {
         int sleep = _generator.Next(1, 5);

         using (FastFailTracker tracker = new FastFailTracker(_control.ResourceName)) {
            Interlocked.Increment(ref _control.ActiveCycles);

            Thread.Sleep(sleep);
            tracker.IndicateTimeout();

            Interlocked.Decrement(ref _control.ActiveCycles);

            Interlocked.Increment(ref _control.TimeoutTicks);
            Interlocked.Add(ref _control.MiliSecondTicks, sleep);
         }
      }

      private void SleeperTick() {
         Thread.Sleep(_generator.Next(5, 100));
      }

      private void AddMixer(List<ThreadStart> mixers, string name, uint mixFlags, uint flag, ThreadStart mixer) {
         if (0 != (mixFlags & flag))
            mixers.Add(mixer);
      }

      private void EnterCycle() {
         lock (_control) {
            _control.SamplingEvent.WaitOne(); 
         }
      }

      private void LeaveCycle() {
         _control.FinishedCycle.Set();
      }

      public void Execute(uint mixFlags) {
         List<ThreadStart> mixers;

         mixers = new List<ThreadStart>();
         
         AddMixer(mixers, "success", mixFlags, FastFailUnitThrottlingStatistics.MIX_SUCCESS_FLAG, SuccessTick);
         AddMixer(mixers, "failure", mixFlags, FastFailUnitThrottlingStatistics.MIX_FAILURE_FLAG, FailureTick);
         AddMixer(mixers, "timeout", mixFlags, FastFailUnitThrottlingStatistics.MIX_TIMEOUT_FLAG, TimeoutTick);
         AddMixer(mixers, "sleeper", mixFlags, FastFailUnitThrottlingStatistics.MIX_SLEEPER_FLAG, SleeperTick);

         while (!_control.ExitEvent.WaitOne(0, false) && (mixers.Count > 0)) {
            EnterCycle();
            try { mixers[_generator.Next(0, mixers.Count)](); }
            finally { LeaveCycle(); }
         }
      }

      ThrottlingStatisticsControl _control;
      Random                      _generator;
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\TestFastFail.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Runtime.CompilerServices;
using System.Data.SqlClient;

using xonline.common.mgmt;
using xonline.common.config;

// seemingly unnecessary, but stflive  rewrites
// this class under a different namespace 

using xonline.common.service;

namespace xonline.common.service
{
    // Inherits from the FastFail class so that we can access the internal constructor overload (i.e. modify protected members)
    public class TestFastFailInternal : FastFailInternal
    {
        internal TestFastFailInternal()
            : base()
        { }

        internal TestFastFailInternal(
            int thresholdCount,
            int thresholdIntervalSeconds,
            int blockIntervalSeconds,
            XEvent.Id eventIdEnter,
            XEvent.Id eventIdExit)

            : this()
        {
            m_thresholdCount            = thresholdCount;
            m_thresholdIntervalSeconds  = thresholdIntervalSeconds;
            m_blockIntervalSeconds      = blockIntervalSeconds;
            m_eventIdEnterFailure       = eventIdEnter;
            m_eventIdExitFailure        = eventIdExit;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_servicedvt_none_12.4.56.0_none_333452d5d8cd2894
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=servicedvt
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70.manifest
XP_MANIFEST_PATH=manifests\msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70.cat
XP_CATALOG_PATH=manifests\msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70.cat
XP_PAYLOAD_PATH=msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=servicedvt,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\XomTargetTests.cs ===
using System;
using System.Net;
using System.Net.Sockets;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Threading;
using System.Diagnostics;

using xonline.common.service;
using xonline.common.diagnostics;
using xonline.common.stfutil;
using xonline.common.mgmt;
using xonline.common.config;

using ServerTestFramework;
//using ServerTestFramework.LiveService;

namespace xonline.common.test.service 
{

    // class XomRemoteTarget_Old {{{
public class XomRemoteTarget_Old : XomLogTarget
{
    const int DEFAULT_REMOTE_PORT = 4101;

    public XomRemoteTarget_Old( string[,] parameters )
    {
        Init( parameters );
    }

    public override void Init( string[,] parameters )
    {
        string address = null;
        int port = DEFAULT_REMOTE_PORT;

        for( int n = 0; n < parameters.GetLength( 0 ); n++ )
        {
            switch( parameters[ n, 0 ].ToLower() )
            {
            case "type":
                // already know this
                break;

            case "address":
                address = parameters[ n, 1 ];
                break;

            case "port":
                port = Convert.ToInt32( parameters[ n, 1 ] );
                break;

            default:
                parameters[n,0] = null;
                break;
            }

        }

        if( address == null )
        {
            throw new ArgumentNullException( "address", "Address not specified!" );
        }

        IPAddress remoteAddr;

        //  First try to parse the address as an IP address.  If
        //  that fails, then we'll try a DNS lookup.
        try
        {
            remoteAddr = IPAddress.Parse(address);
        }
        catch
        {
            remoteAddr = Dns.GetHostEntry( address ).AddressList[ 0 ];
        }

        _socket = new UdpClient();
        _socket.Connect( remoteAddr, port );

    }


    public override void Log( XomLogTargetContext msgCtx, string area, sbyte level, ushort msgId, byte[] msgData, string message, Exception e)
    {
        byte[] dg;

        string szProcessName = Process.GetCurrentProcess().MainModule.ModuleName;
        string szCurrentDomain = AppDomain.CurrentDomain.ToString();
        string szAssemblyPath = Path.GetFileNameWithoutExtension(Config.AssemblyPath);
        string szThreadHashCode = Thread.CurrentThread.GetHashCode().ToString();
        string szLevel = level.ToString();

        if (e != null)
        {
            message += "\r\n" + EventBuilder.ExceptionToString(e);
        }

        string header = szProcessName + ";" +
                        szCurrentDomain + ";" +
                        szAssemblyPath + ";" +
                        szThreadHashCode + ";" +
                        area + ";" + 
                        szLevel + ";" + 
                        msgId + ";" +
                        msgCtx.FlowToken.ToString() + "::";

        dg = _enc.GetBytes(header + message);

        _socket.Send( dg, dg.Length );
    }

    public override void Close()
    {
        _socket.Close();
    }

    private UdpClient _socket;
    private UTF8Encoding _enc = new UTF8Encoding();
}


    // }}}

[TestGroup, DVT, Owner("kgoodier"), TestFrequency("Regression"), EnvRequirement("")]
public class XomTargetDVT : ServiceDVTTestBaseGroup
{
    private UdpClient           _UdpClient;
    private XomRemoteTarget     _RemoteTarget;
    private XomRemoteTarget_Old _RemoteTargetOld;
    private ASCIIEncoding       _AsciiEnc = new ASCIIEncoding();
    private readonly string[]   c_Separators = new string[] { ";", "::" };
    
    [TestGroupSetup]
    public void Setup()
    {
        XomLoggingControl.Init();

        _UdpClient = new UdpClient();
        IPEndPoint localEPBind = new IPEndPoint(IPAddress.Any, 0);
        _UdpClient.Client.Bind(localEPBind);

        IPEndPoint localEP = _UdpClient.Client.LocalEndPoint as IPEndPoint;

        string targetParams = String.Format("type=Remote;Address={0};Port={1}", 
                                            "127.0.0.1", //localEP.Address, 
                                            localEP.Port);

        _RemoteTarget = new XomRemoteTarget(ConfigUtil.GetParams(targetParams));
        _RemoteTargetOld = new XomRemoteTarget_Old(ConfigUtil.GetParams(targetParams));

    }

    private string Recv()
    {
        byte[] recvBuffer;
        IPEndPoint remoteEP = null;
        recvBuffer = _UdpClient.Receive(ref remoteEP);
        string recvMsg = _AsciiEnc.GetString(recvBuffer);

        return recvMsg;
    }

    private void LogAndVerify(string msg)
    {
        Floken flowToken = Floken.NewFloken();
        string area = "XomTargetDVT";
        sbyte level = 0;
        ushort msgId = 0;
        byte[] msgData = null;
        string message = msg;
        Exception e = null;

        _RemoteTarget.Log(new XomLogTargetContext(flowToken), area, level, msgId, msgData, message, e);

        // Receive it
        string recvMsg = Recv();

        Global.RO.Debug("Received: {0}", recvMsg);

        string[] fields = recvMsg.Split(c_Separators, StringSplitOptions.None);
        int doubleColon = recvMsg.IndexOf("::");
        string payload = "";
        if (doubleColon > -1)
        {
            payload = recvMsg.Substring(doubleColon + 2);
        }

//         ProcessName = fields[0],
//         Domain/ProcessId = fields[1],
//         Path/ComponentName = fields[2],
//         ThreadHashCode/ThreadId = fields[3],
//         Area = fields[4],
//         Level = fields[5],
//         MessageId = fields[6],
//         FlowToken = fields.Length > 7 ? fields[7] : null,
//         Message = payload

        string szProcessName = Process.GetCurrentProcess().ProcessName;
        string szProcessId = Process.GetCurrentProcess().Id.ToString();
        string szComponentName = Config.ComponentName;
        string szThreadId = Thread.CurrentThread.ManagedThreadId.ToString();

        Assert.IsTrue(fields[0].Equals(szProcessName));
        Assert.IsTrue(fields[1].Equals(szProcessId));
        Assert.IsTrue(fields[2].Equals(szComponentName));
        Assert.IsTrue(fields[3].Equals(szThreadId));
        Assert.IsTrue(fields[4].Equals(area));
        Assert.IsTrue(fields[5].Equals(level.ToString()));
        Assert.IsTrue(fields[6].Equals(msgId.ToString()));
        Assert.IsTrue(new Floken(fields[7]).Equals(flowToken));
        Assert.IsTrue(payload.Equals(message));

    }

    public void Reset()
    {
    }

    [TestCase, Description("Basic verification of new XomRemoteTarget"), Owner("kgoodier"), TestFrequency("Regression"), EnvRequirement("")]
    public void NewTarget_Recv_Verify()
    {
        Reset();
        LogAndVerify("NewTarget_Recv_Verify");
    }

    [TestCase, Description("Basic test of new XomRemoteTarget"), Owner("kgoodier"), TestFrequency("Regression"), EnvRequirement("")]
    public void NewTarget_Recv_NoVerify()
    {
        Reset();
        _RemoteTarget.Log(new XomLogTargetContext(Floken.None), "XomTargetDVT", 0, 0, null, "NewTarget_Recv_NoVerify", null);
        string recvMsg = Recv();
        Global.RO.Debug("Received: {0}", recvMsg);
    }

    [TestCase, Description("Basic test of old XomRemoteTarget"), Owner("kgoodier"), TestFrequency("Regression"), EnvRequirement("")]
    public void OldTarget_Recv_NoVerify()
    {
        Reset();
        _RemoteTargetOld.Log(new XomLogTargetContext(Floken.None), "XomTargetDVT", 0, 0, null, "OldTarget_Recv_NoVerify", null);
        string recvMsg = Recv();
        Global.RO.Debug("Received: {0}", recvMsg);
    }

    [TestCase]
    [StressTest]
    public void NewTarget_SendOnly()
    {
        _RemoteTarget.Log(new XomLogTargetContext(Floken.None), "XomTargetDVT", 0, 0, null, "NewTarget_SendOnly", null);
    }

    [TestCase]
    [StressTest]
    public void OldTarget_SendOnly()
    {
        _RemoteTargetOld.Log(new XomLogTargetContext(Floken.None), "XomTargetDVT", 0, 0, null, "OldTarget_SendOnly", null);
    }
}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\SGInfoTests.cs ===
using System;
using System.Net;
using System.Web;
using System.Web.Hosting;
using System.IO;
using System.Collections.Generic;
using System.Threading;

using xonline.common.service;
using xonline.common.diagnostics;
using xonline.common.stfutil;

using ServerTestFramework;
//using ServerTestFramework.LiveService;

namespace xonline.common.test.service 
{


[TestGroup, DVT, Owner("kgoodier"), TestFrequency("Regression"), EnvRequirement("")]
public class SGInfoDVT : ServiceDVTTestBaseGroup
{

    public class DvtSGInfo : xonline.common.service.SGInfo
    {
        public DvtSGInfo()
        {
        }

        public new void GetInfoFromHttp(string httpAuthData)
        {
            base.GetInfoFromHttp(httpAuthData);
        }

        public bool UseOldProtocol 
        {
            get { return _useOldProtocol; }
            set { _useOldProtocol = value; }
        }

        public int SupportedHttpAuthDataVersion
        {
            get { return _supportedHttpAuthDataVersion; }
            set { _supportedHttpAuthDataVersion = value; }
        }

    }

    public class DvtHTTPAuthData : xonline.common.service.HTTPAuthData
    {
        public DvtHTTPAuthData(Floken flowToken, ushort port, uint ip, ulong requestId, ulong xboxID, ulong userID, uint titleID, uint serviceId1, uint serviceId2)
            : base(flowToken, port, ip, requestId, xboxID, userID, titleID, serviceId1, serviceId2)
        {
        }

        public DvtHTTPAuthData(Floken flowToken, ushort port, uint ip, ulong requestId, ulong xboxID, XUIDAndTrust[] users, uint titleID, uint serviceId1, uint serviceId2)
            : base(flowToken, port, ip, requestId, xboxID, users, titleID, serviceId1, serviceId2)
        {
        }

        public bool UseOldProtocol 
        {
            get { return _useOldProtocol; }
            set { _useOldProtocol = value; }
        }

        public int SupportedHttpAuthDataVersion
        {
            get { return _supportedHttpAuthDataVersion; }
            set { _supportedHttpAuthDataVersion = value; }
        }

    }



    public class DvtOldSGInfo : xonline.common.test.service.backcompat.SGInfo
    {
        public DvtOldSGInfo()
        {
        }

        public new void GetInfoFromHttp(string httpAuthData)
        {
            base.GetInfoFromHttp(httpAuthData);
        }

        public ushort AuthDataVersion { get { return wAuthDataVersion; } }

        public ushort AuthDataSize { get { return wAuthDataSize; } }
    }

    public class DvtOldHTTPAuthData : xonline.common.test.service.backcompat.HTTPAuthData
    {
        public DvtOldHTTPAuthData(ushort port, uint ip, ulong requestId, ulong xboxID, ulong userID, uint titleID, uint serviceId1, uint serviceId2)
            : base(port, ip, requestId, xboxID, userID, titleID, serviceId1, serviceId2)
        {
        }

    }

    
    [TestGroup, DVT, Owner("kgoodier"), TestFrequency("Regression"), EnvRequirement("")]
    public class HTTPAuthDataDVT : ServiceDVTTestBaseGroup
    {
        ushort port = 300;
        uint ip = 0x01020304;
        ulong requestId = 1234;
        ulong xboxId = 0xFA00000012345678;
        ulong userId1 = 0x0009000012345678;
        //ulong userId2 = 0x0000000012345679;
        uint titleId = 0xFFFF0000;
        uint serviceId1 = 1;
        uint serviceId2 = 2;
        float trustRating = 1.5f;
        Floken myFloken = Floken.NewFloken();
        XUIDAndTrust[] users = new XUIDAndTrust[] {
            new XUIDAndTrust(0x0009000012345678, 0, 0.0F),
            new XUIDAndTrust(0x0009000012345679, 0, 0.0F),
            new XUIDAndTrust(0, 0, 0.0F),
            new XUIDAndTrust(0, 0, 0.0F)
        };

        public void Reset()
        {
        }

        [TestCase, Description("@@@"), Owner("kgoodier"), TestFrequency("Regression"), EnvRequirement("")]
        public void Constructors()
        {
            Reset();

            HTTPAuthData ad;
            
            //(Floken flowToken)

            ad = new HTTPAuthData();
            Assert.IsTrue(ad.MachineId == 0);
            Assert.IsTrue(!ad.FlowToken.IsValid);
            Assert.IsTrue(!ad.IsServicePresent(1));
            ad.SetPrivilege(1);
            Assert.IsTrue(ad.IsServicePresent(1));

            ad = new HTTPAuthData(myFloken);
            Assert.IsTrue(ad.MachineId == 0);
            Assert.IsTrue(ad.FlowToken.IsValid);
            Assert.IsTrue(ad.FlowToken == myFloken);

            //(Floken flowToken, ushort port, uint ip, ulong requestId, ulong xboxID, 
            //ulong userID, uint titleID, uint serviceId1, uint serviceId2)

            ad = new HTTPAuthData(port, ip, requestId, xboxId, userId1, titleId, serviceId1, serviceId2);
            Assert.IsTrue(!ad.FlowToken.IsValid);
            Assert.IsTrue(ad.Nonce == requestId);
            Assert.IsTrue(ad.MachineId == xboxId);
            Assert.IsTrue(ad.IsUserPresent(userId1));
            Assert.IsTrue(ad.TitleId == titleId);
            Assert.IsTrue(ad.IsServicePresent((int)serviceId1));
            Assert.IsTrue(ad.IsServicePresent((int)serviceId2));

            ad = new HTTPAuthData(myFloken, port, ip, requestId, xboxId, userId1, titleId, serviceId1, serviceId2);
            Assert.IsTrue(ad.FlowToken.IsValid);
            Assert.IsTrue(ad.FlowToken == myFloken);
            Assert.IsTrue(ad.Nonce == requestId);
            Assert.IsTrue(ad.MachineId == xboxId);
            Assert.IsTrue(ad.IsUserPresent(userId1));
            Assert.IsTrue(ad.TitleId == titleId);
            Assert.IsTrue(ad.IsServicePresent((int)serviceId1));
            Assert.IsTrue(ad.IsServicePresent((int)serviceId2));
        }

        [TestCase, Description("@@@"), Owner("kgoodier"), TestFrequency("Regression"), EnvRequirement("")]
        public void Serialization_NewClass()
        {
            Reset();

            DvtHTTPAuthData httpinfo;
            DvtSGInfo sginfo;
            string hdrvalv3;
            string hdrvalv4;

            httpinfo = new DvtHTTPAuthData(myFloken, port, ip, requestId, xboxId, users, titleId, serviceId1, serviceId2);
            httpinfo.OverrideConsoleTrustRating = trustRating;
            httpinfo.SetUserPrivilege(0, 224);
            httpinfo.SetUserPrivilege(0, 225);
            httpinfo.SetUserPrivilege(1, 224);
            Assert.IsTrue(httpinfo.AuthDataVersion == 4);
            Assert.IsTrue(httpinfo.OverrideUserPrivileges[0,7] == 0x00000003);
            Assert.IsTrue(httpinfo.OverrideUserPrivileges[1,7] == 0x00000001);
            Assert.IsTrue(httpinfo.OverridePrivileges[7] == 0x00000001);

            httpinfo.SupportedHttpAuthDataVersion = 3;
            hdrvalv3 = httpinfo.ConstructBase64String();
            httpinfo.SupportedHttpAuthDataVersion = 4;
            hdrvalv4 = httpinfo.ConstructBase64String();

            Assert.IsTrue(hdrvalv3.Length < hdrvalv4.Length);

            // From new v3 to new v3
            sginfo = new DvtSGInfo();
            sginfo.SupportedHttpAuthDataVersion = 3;
            sginfo.GetInfoFromHttp(hdrvalv3);
            Global.RO.Debug(sginfo.ToString());
            Assert.IsTrue(sginfo.AuthDataVersion == 3);
            Assert.IsTrue(sginfo.MachineId == xboxId);
            Assert.IsTrue(sginfo.FlowToken == Floken.None);
            Assert.IsTrue(sginfo.ConsoleTrustRating == 0);
            Assert.IsTrue(sginfo.OverrideUserPrivileges[0,7] == 0x00000001);
            Assert.IsTrue(sginfo.OverrideUserPrivileges[1,7] == 0x00000001);
            Assert.IsTrue(sginfo.OverridePrivileges[7] == 0x00000001);

            // From new v4 to new v3
            sginfo = new DvtSGInfo();
            sginfo.SupportedHttpAuthDataVersion = 3;
            sginfo.GetInfoFromHttp(hdrvalv4);
            Global.RO.Debug(sginfo.ToString());
            Assert.IsTrue(sginfo.AuthDataVersion == 3);
            Assert.IsTrue(sginfo.MachineId == xboxId);
            Assert.IsTrue(sginfo.FlowToken == Floken.None);
            Assert.IsTrue(sginfo.ConsoleTrustRating == 0);
            Assert.IsTrue(sginfo.OverrideUserPrivileges[0,7] == 0x00000001);
            Assert.IsTrue(sginfo.OverrideUserPrivileges[1,7] == 0x00000001);
            Assert.IsTrue(sginfo.OverridePrivileges[7] == 0x00000001);

            // From new v3 to new v4
            sginfo = new DvtSGInfo();
            sginfo.SupportedHttpAuthDataVersion = 4;
            sginfo.GetInfoFromHttp(hdrvalv3);
            Global.RO.Debug(sginfo.ToString());
            Assert.IsTrue(sginfo.AuthDataVersion == 3);
            Assert.IsTrue(sginfo.MachineId == xboxId);
            Assert.IsTrue(sginfo.FlowToken == Floken.None);
            Assert.IsTrue(sginfo.ConsoleTrustRating == 0);
            Assert.IsTrue(sginfo.OverrideUserPrivileges[0,7] == 0x00000001);
            Assert.IsTrue(sginfo.OverrideUserPrivileges[1,7] == 0x00000001);
            Assert.IsTrue(sginfo.OverridePrivileges[7] == 0x00000001);

            // From new v4 to new v4
            sginfo = new DvtSGInfo();
            sginfo.SupportedHttpAuthDataVersion = 4;
            sginfo.GetInfoFromHttp(hdrvalv4);
            Global.RO.Debug(sginfo.ToString());
            Assert.IsTrue(sginfo.AuthDataVersion == 4);
            Assert.IsTrue(sginfo.MachineId == xboxId);
            Assert.IsTrue(sginfo.FlowToken == myFloken);
            Assert.IsTrue(sginfo.ConsoleTrustRating == trustRating);
            Assert.IsTrue(sginfo.OverrideUserPrivileges[0,7] == 0x00000003);
            Assert.IsTrue(sginfo.OverrideUserPrivileges[1,7] == 0x00000001);
            Assert.IsTrue(sginfo.OverridePrivileges[7] == 0x00000001);
        }

        [TestCase, Description("@@@"), Owner("kgoodier"), TestFrequency("Regression"), EnvRequirement("")]
        public void Serialization_BackCompat()
        {
            Reset();

            DvtHTTPAuthData httpinfo;
            DvtOldSGInfo sginfo;  // old endpoint
            string hdrvalv3;
            string hdrvalv4;

            httpinfo = new DvtHTTPAuthData(myFloken, port, ip, requestId, xboxId, users, titleId, serviceId1, serviceId2);
            httpinfo.OverrideConsoleTrustRating = trustRating;
            Assert.IsTrue(httpinfo.AuthDataVersion == 4);
            httpinfo.SetUserPrivilege(0, 224);
            httpinfo.SetUserPrivilege(0, 225);
            httpinfo.SetUserPrivilege(1, 224);
            Assert.IsTrue(httpinfo.AuthDataVersion == 4);
            Assert.IsTrue(httpinfo.OverrideUserPrivileges[0,7] == 0x00000003);
            Assert.IsTrue(httpinfo.OverrideUserPrivileges[1,7] == 0x00000001);
            Assert.IsTrue(httpinfo.OverridePrivileges[7] == 0x00000001);

            httpinfo.SupportedHttpAuthDataVersion = 3;
            hdrvalv3 = httpinfo.ConstructBase64String();
            httpinfo.SupportedHttpAuthDataVersion = 4;
            hdrvalv4 = httpinfo.ConstructBase64String();

            Assert.IsTrue(hdrvalv3.Length < hdrvalv4.Length);

            // From new v3 to old v3
            sginfo = new DvtOldSGInfo();
            sginfo.GetInfoFromHttp(hdrvalv3);
            Global.RO.Debug(sginfo.ToString());
            Assert.IsTrue(sginfo.AuthDataVersion == 3);
            Assert.IsTrue(sginfo.MachineId == xboxId);
            Assert.IsTrue(sginfo.OverridePrivileges[7] == 0x00000001);

            // From new v4 to old v3
            sginfo = new DvtOldSGInfo();
            sginfo.GetInfoFromHttp(hdrvalv4);
            Global.RO.Debug(sginfo.ToString());
            Assert.IsTrue(sginfo.AuthDataVersion == 3);
            Assert.IsTrue(sginfo.MachineId == xboxId);
            Assert.IsTrue(sginfo.OverridePrivileges[7] == 0x00000001);

        }
    }




}


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\sql\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\XboxLiveThread.cs ===
namespace ServerTestFramework.LiveService.common.service {
   using System;
   using System.Threading;

   using xonline.common.service;

   [TestGroup, Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
   public class XboxLiveThreadUnits : TestNode {
      public void DivisionByZero() {
         throw new DivideByZeroException("you cant just go dividing things by zero.");
      }

      public void DivisionByZero(object aFloat) {
         throw new DivideByZeroException("you cant just go dividing things by zero.");
      }

      [TestCase, Description("Verifies unhandled exceptions get handled correctly, parameterless version"), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
      public void UnitParameterlessDefault() {
         XboxLiveThread thread;

         thread = new XboxLiveThread(new ThreadStart(DivisionByZero));

         thread.Start();
         thread.Join();

         if (null == thread.ThreadException)
            throw new Exception("XboxLiveThread did not capture the exception");

         if (!(thread.ThreadException is DivideByZeroException))
            throw new Exception(
               string.Format("XboxLiveThread did not report a DivideByZeroException ({0}).", 
                  thread.ThreadException.GetType().Name));
      }

      [TestCase, Description("Verifies unhandled exceptions get handled correctly, parameterless version and max stack size"), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
      public void UnitParameterlessMaxStack() {
         XboxLiveThread thread;

         thread = new XboxLiveThread(
            new ThreadStart(DivisionByZero),
            1024);

         thread.Start();
         thread.Join();

         if (null == thread.ThreadException)
            throw new Exception("XboxLiveThread did not capture the exception");

         if (!(thread.ThreadException is DivideByZeroException))
            throw new Exception(
               string.Format("XboxLiveThread did not report a DivideByZeroException ({0}).", 
                  thread.ThreadException.GetType().Name));
      }

      [TestCase, Description("Verifies unhandled exceptions get handled correctly, parameterless version"), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
      public void UnitParameteredDefault() {
         XboxLiveThread thread;

         thread = new XboxLiveThread(new ParameterizedThreadStart(DivisionByZero));

         thread.Start(0.0f);
         thread.Join();

         if (null == thread.ThreadException)
            throw new Exception("XboxLiveThread did not capture the exception");

         if (!(thread.ThreadException is DivideByZeroException))
            throw new Exception(
               string.Format("XboxLiveThread did not report a DivideByZeroException ({0}).", 
                  thread.ThreadException.GetType().Name));
      }

      [TestCase, Description("Verifies unhandled exceptions get handled correctly, parameterless version and max stack size"), Owner("jojohn"), TestFrequency("Daily"), EnvRequirement("")]
      public void UnitParameteredMaxStack() {
         XboxLiveThread thread;

         thread = new XboxLiveThread(
            new ParameterizedThreadStart(DivisionByZero),
            1024);

         thread.Start(0.0f);
         thread.Join();

         if (null == thread.ThreadException)
            throw new Exception("XboxLiveThread did not capture the exception");

         if (!(thread.ThreadException is DivideByZeroException))
            throw new Exception(
               string.Format("XboxLiveThread did not report a DivideByZeroException ({0}).", 
                  thread.ThreadException.GetType().Name));
      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_servicedvt_none_12.4.56.0_none_333452d5d8cd2894
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=servicedvt
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70.manifest
XP_MANIFEST_PATH=manifests\msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70.cat
XP_CATALOG_PATH=manifests\msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70.cat
XP_PAYLOAD_PATH=msil_servicedvt_no-public-key_12.4.56.0_x-ww_6e827e70
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=servicedvt,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\sql\WsClient3Test.cs ===
using System;
using ServerTestFramework;

namespace WsClient3Test
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\statemachine\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\statemachine\statemachinefactory.cs ===
using System;
using System.Linq;
using System.Collections.Generic;
using System.Reflection;

using xonline.common.statemachine;

namespace xonline.common.test.statemachine
{
    class TestStateMachineFactory<TEnum>
    {
        internal readonly StateMachineInfo smInfo = new StateMachineInfo();

        class ActionResult : IActionResult
        {
            public string EventRaised { get; set; }
            public Exception Exception { get; set; }
        }

        static List<KeyValuePair<string, TEnum>> stateNames;

        static TestStateMachineFactory()
        {
            // Reflection done once per type, as this does not change over different allocations
            stateNames = typeof(TEnum)
                            .GetFields(BindingFlags.Static | BindingFlags.DeclaredOnly | BindingFlags.Public)
                            .Select((f) => new KeyValuePair<string, TEnum>(f.Name, (TEnum)f.GetValue(null)))
                            .ToList();
        }

        public TestStateMachineFactory()
        {
            foreach (var state in stateNames)
            {
                string name = state.Key;
                smInfo.States.Add(name, new State(name, name + "Action", GenerateAction(state.Value)));
            }
        }

        public void EnableTransition(TEnum stateStart, TEnum stateEnd)
        {
            EnableTransition(stateStart, "On" + stateStart.ToString(), stateEnd);
        }

        public void EnableTransition(TEnum stateStart, string eventName, TEnum stateEnd)
        {
            smInfo.StateTransitions.Add(new Transition(eventName, stateStart.ToString()), smInfo.States[stateEnd.ToString()]);
        }

        public void EnableTransitions(IEnumerable<KeyValuePair<TEnum, TEnum>> pairs)
        {
            foreach (var pair in pairs)
            {
                EnableTransition(pair.Key, pair.Value);
            }
        }

        public void UpdateState(TEnum state, State.ActionDelegate newDelegate)
        {
            State s = smInfo.States[state.ToString()];

            smInfo.States[state.ToString()] = new State(s.StateName, s.ActionName, newDelegate);
        }

        private State.ActionDelegate GenerateAction(TEnum state)
        {
            string eventStr = "On" + state.ToString();
            return GenerateAction(state, eventStr);
        }

        internal static State.ActionDelegate GenerateAction(TEnum state, string eventStr)
        {
            string stateStr = state.ToString();

            if (stateStr == "End")
            {
                return (c) => { return new ActionResult(); };
            }
            else
            {
                return (c) => { return new ActionResult { EventRaised = eventStr }; };
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\config\ConfigDatabaseDevTest.cs ===
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Reflection;
using System.Xml;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.diagnostics;
using xonline.common.stfutil;

namespace ServerTestFramework.LiveService.common.config
{

    /// <summary>
    /// I am not marking this as a DVT test, since it's something that I don't
    /// expect other devs to run. It should be used to test changes or additions
    /// to the NPDB sql code related to config tables. It does not need to be
    /// run on a routine basis. 
    ///
    /// The test will create a new database called "npdb_configdevtest" using the 
    /// config related SQL code in the tree. It will then call a series of 
    /// stored procs and issue other SQL statements to test the stored procs
    /// and audit triggers on the tables. The test database will remain on 
    /// the localhost after the tests have run so it may be examined.
    ///
    /// If database "npdb_configdevtest" already exists when the test is run, it will
    /// be dropped and recreated.
    ///
    /// </summary>
    public class ConfigDatabaseTest : TestNode
    {
        private bool   _fReady = false;

        private void CheckReady() 
        {
            if (false == _fReady) 
            {
                throw(new Exception("Not Ready."));
            }
        }

        private string _npdbServer = null;
        private string _npdbDatabase = null;
        private string _sqlNpdb = null;
        private string _sqlUodb = null;
        private string _sitecfgAll = null;
        private string _sitecfgXblob = null;
        private readonly string _testData = Directory.GetCurrentDirectory();

        private readonly string[] _sqlUodbFiles = {
            "t_countries.sql",
            "countries_data.sql"
        };

        private readonly string[] _sqlFilesPhaseOne = {
            @"ddl\table\t_postal_codes.sql",
            @"ddl\table\t_cron_jobs.sql",
            @"ddl\table\t_query_datasets.sql",
            @"ddl\table\t_query_plugins.sql",
            @"ddl\table\t_query_config.sql",
            @"ddl\table\t_game_config.sql",
            @"ddl\table\t_game_schema.sql",
            @"ddl\table\t_live_title_config.sql",
            @"ddl\table\t_storage_allowed.sql",
            @"ddl\table\t_storage_domains.sql",
            @"ddl\table\t_storage_operations.sql",
            @"ddl\table\t_storage_domain_permissions.sql",
            @"ddl\table\t_stringsvr_strings.sql",
            @"ddl\table\t_stringsvr_string_ids.sql",
            @"ddl\table\t_svc_downtime.sql",
            @"ddl\table\t_xmsg_system_message_ids.sql",
            @"ddl\table\t_countries.sql",
            @"ddl\table\t_adjective_suggestions.sql",
            @"ddl\table\t_blacklisted_digests.sql",
            @"ddl\table\t_blacklisted_machines.sql",
            @"ddl\table\t_blacklisted_titles.sql",
            @"ddl\table\t_blacklisted_users.sql",
            @"ddl\table\t_forbidden_names.sql",
            @"ddl\table\t_noun_suggestions.sql",
            @"ddl\table\t_puid_idgen.sql",
            @"ddl\table\t_xprof_team_idgen.sql",
            @"ddl\table\t_match_titles.sql",
            @"ddl\table\t_config_log.sql",
            @"ddl\table\t_protocols.sql",
            @"ddl\table\t_nic_roles.sql",
            @"ddl\table\t_user_roles.sql",
            @"ddl\table\t_install_units.sql",
            @"ddl\table\t_components.sql",
            @"ddl\table\t_interfaces.sql",
            @"ddl\table\t_virtual_interfaces.sql",
            @"ddl\table\t_environment_types.sql",
            @"ddl\table\t_environment_type_interface_overrides.sql",
            @"ddl\table\t_environment_type_virtual_interface_overrides.sql",
            @"ddl\table\t_settings.sql",
            @"ddl\table\t_environment_type_setting_overrides.sql",
            @"ddl\table\t_multisetting_names.sql",
            @"ddl\table\t_multisettings.sql",
            @"ddl\table\t_environment_type_multisetting_overrides.sql",
            @"ddl\table\t_domains.sql",
            @"ddl\table\t_environments.sql",
            @"ddl\table\t_sites.sql",
            @"ddl\table\t_site_regions.sql",
            @"ddl\table\t_server_states.sql",
            @"ddl\table\t_servers.sql",
            @"ddl\table\t_server_nics.sql",
            @"ddl\table\t_environment_interface_overrides.sql",
            @"ddl\table\t_server_interface_overrides.sql",
            @"ddl\table\t_setting_overrides.sql",
            @"ddl\table\t_multisetting_overrides.sql",
            @"ddl\table\t_site_virtual_interface_ips.sql",
            @"ddl\table\t_site_virtual_interface_overrides.sql",
            @"ddl\table\t_environment_user_roles.sql",
            @"ddl\table\t_interface_buckets.sql",
            @"ddl\table\t_xrl_virtual_interface_mappings.sql",
            @"ddl\table\t_stats_competition_partitions.sql",
            @"ddl\table\t_stats_competition_templates.sql",
            @"ddl\table\t_stats_leaderboards.sql",
            @"ddl\table\t_stats_title_limits.sql",
            @"ddl\table\t_stats_user_setting_ids.sql",
            @"ddl\table\t_name_resolution_mappings.sql",
            @"ddl\table\t_livecache_apis.sql",
            @"ddl\table\t_xdelay_settings.sql",
            @"ddl\sproc\p_xuacs_get_countries.sql",
            @"ddl\sproc\p_xuacs_get_postal_code.sql",
            @"ddl\sproc\p_nr_get_all_mappings.sql",
            @"ddl\sproc\p_cron_add_job.sql",
            @"ddl\sproc\p_cron_get_next_job.sql",
            @"ddl\sproc\p_cron_load_job.sql",
            @"ddl\sproc\p_cron_find_jobs.sql",
            @"ddl\sproc\p_cron_remove_job.sql",
            @"ddl\sproc\p_cron_update_job.sql",
            @"ddl\sproc\p_query_get_dataset_info.sql",
            @"ddl\sproc\p_query_get_config.sql",
            @"ddl\sproc\p_query_save_config.sql",
            @"ddl\sproc\p_query_get_plugin_info.sql",
            @"ddl\sproc\p_storage_get_domains.sql",
            @"ddl\sproc\p_storage_get_domain_permissions.sql",
            @"ddl\sproc\p_stringsvr_string_add_by_id.sql",
            @"ddl\sproc\p_stringsvr_string_add_default.sql",
            @"ddl\sproc\p_stringsvr_strings_delete_expired.sql",
            @"ddl\sproc\p_stringsvr_strings_get.sql",
            @"ddl\sproc\p_stringsvr_strings_get_by_title_and_id.sql",
            @"ddl\sproc\p_stringsvr_string_delete.sql",
            @"ddl\sproc\p_svc_get_downtime.sql",
            @"ddl\sproc\p_xmsg_system_messages_get_ids.sql",
            @"ddl\sproc\p_svc_get_all_downtimes.sql",
            @"ddl\sproc\p_svc_set_downtime.sql",
            @"ddl\sproc\p_svc_del_downtime.sql",
            @"ddl\sproc\p_xcbt_blacklist_digest.sql",
            @"ddl\sproc\p_xcbt_blacklist_machine.sql",
            @"ddl\sproc\p_xcbt_blacklist_title.sql",
            @"ddl\sproc\p_xcbt_blacklist_user.sql",
            @"ddl\sproc\p_xsig_get_blacklisted_digests.sql",
            @"ddl\sproc\p_xsig_get_blacklisted_machines.sql",
            @"ddl\sproc\p_xsig_get_blacklisted_titles.sql",
            @"ddl\sproc\p_xsig_get_blacklisted_users.sql",
            @"ddl\sproc\p_xuacs_add_forbidden_name.sql",
            @"ddl\sproc\p_xuacs_adjectives.sql",
            @"ddl\sproc\p_xuacs_banned_names.sql",
            @"ddl\sproc\p_xuacs_get_adjective_suggestions.sql",
            @"ddl\sproc\p_xuacs_get_forbidden_names.sql",
            @"ddl\sproc\p_xuacs_get_noun_suggestions.sql",
            @"ddl\sproc\p_xuacs_nouns.sql",
            @"ddl\sproc\p_puid_get_next_id.sql",
            @"ddl\sproc\p_team_get_next_id.sql",
            @"ddl\sproc\p_match_title_insert.sql",
            @"ddl\sproc\p_match_title_get_all.sql",
            @"ddl\sproc\p_match_title_get.sql",
            @"ddl\sproc\p_match_title_update_db.sql",
            @"ddl\sproc\p_match_title_delete.sql",
            @"ddl\sproc\p_config_get_latest_change_id.sql",
            @"ddl\sproc\p_config_get_modified_tables.sql",
            @"ddl\sproc\p_config_get_server_list_by_interface.sql",
            @"ddl\sproc\p_config_get_interface.sql",
            @"ddl\sproc\p_config_get_environment_type_interface_overrides.sql",
            @"ddl\sproc\p_config_get_environment_interface_overrides.sql",
            @"ddl\sproc\p_config_get_server_interface_overrides.sql",
            @"ddl\sproc\p_config_get_site_regions.sql",
            @"ddl\sproc\p_config_get_virtual_interface.sql",
            @"ddl\sproc\p_config_get_environment_type_virtual_interface_overrides.sql",
            @"ddl\sproc\p_config_get_site_virtual_interface_overrides.sql",
            @"ddl\sproc\p_config_get_virtual_interface_list_by_site.sql",
            @"ddl\sproc\p_config_get_setting.sql",
            @"ddl\sproc\p_config_get_environment_type_setting_override.sql",
            @"ddl\sproc\p_config_get_setting_overrides.sql",
            @"ddl\sproc\p_config_get_multisetting.sql",
            @"ddl\sproc\p_config_get_environment_type_multisetting_override.sql",
            @"ddl\sproc\p_config_get_multisetting_overrides.sql",
            @"ddl\sproc\p_config_get_install_unit_list_by_server.sql",
            @"ddl\sproc\p_config_get_install_unit.sql",
            @"ddl\sproc\p_config_get_component_list_by_server.sql",
            @"ddl\sproc\p_config_get_component.sql",
            @"ddl\sproc\p_config_get_interface_list_by_server.sql",
            @"ddl\sproc\p_config_get_current_environment.sql",
            @"ddl\sproc\p_config_get_server_info.sql",
            @"ddl\sproc\p_config_complete_bucket_migration.sql",
            @"ddl\sproc\p_config_get_interface_bucket.sql",
            @"ddl\sproc\p_config_get_interface_partition_count.sql",
            @"ddl\sproc\p_config_get_interface_all_buckets.sql",
            @"ddl\sproc\p_xrlscan_get_valid_xrls.sql",
            @"ddl\sproc\p_livepxy_get_forward_service_list.sql",
            @"ddl\sproc\p_websg_get_wbca_mappings.sql",
            @"ddl\sproc\p_stats_competition_leaderboard_create.sql",
            @"ddl\sproc\p_stats_competition_partition_add.sql",
            @"ddl\sproc\p_stats_competition_partition_get_all.sql",
            @"ddl\sproc\p_stats_competition_template_add.sql",
            @"ddl\sproc\p_stats_competition_template_get_all.sql",
            @"ddl\sproc\p_stats_lb_add.sql",
            @"ddl\sproc\p_stats_lb_delete.sql",
            @"ddl\sproc\p_stats_lb_get.sql",
            @"ddl\sproc\p_stats_lb_get_all.sql",
            @"ddl\sproc\p_stats_title_delete.sql",
            @"ddl\sproc\p_stats_title_get_limits.sql",
            @"ddl\sproc\p_stats_title_set_limits.sql",
            @"ddl\sproc\p_stats_get_setting_ids.sql",
            @"ddl\sproc\p_livecache_get_forward_service_list.sql",
            @"ddl\sproc\p_game_get_config.sql",
            @"ddl\sproc\p_game_get_all_configs.sql",
            @"ddl\sproc\p_game_save_config.sql",
            @"ddl\sproc\p_game_delete_config.sql",
            @"ddl\sproc\p_game_schema_get.sql",
            @"ddl\sproc\p_game_schema_set.sql",
            @"ddl\sproc\p_live_title_config_delete.sql",
            @"ddl\sproc\p_live_title_config_get.sql",
            @"ddl\sproc\p_live_title_config_set.sql",
            @"ddl\sproc\p_cron_update_queue_counter.sql",
            @"ddl\sproc\p_xdelay_get_settings.sql",
        };

        private readonly string[] _sqlFilesPhaseTwo = {
            "adjective_suggestions_data.sql",
            "noun_suggestions_data.sql",
            "forbidden_names_data.sql",
            "init_puid_idgen.sql",
            "init_puid_teamgen.sql",
            "npdb_stats_user_setting_ids.sql",
            // "init_game_schema.sql"
        };

        private readonly string[] _sitecfgAllFiles = {
            "\\npdb_config_all_environments.sql",
            "\\npdb_stringsvr_populate_common.sql"
        };

        private readonly string[] _sitecfgXblobFiles = {
            "\\npdb_config_environment.sql",
            "\\npdb_stringsvr_populate.sql"
        };

        private readonly string[] _testDataFiles = {
            "\\npdb_config_add_database_data.sql",
            "\\npdb_config_add_gameconfig_1.xml",
            "\\npdb_config_add_gameconfig_2.xml",
            "\\npdb_config_add_titleconfig_1.xml",
            "\\npdb_config_add_titleconfig_2.xml"
        };

        // We turn pooling off to avoid exceptions when re-running these tests
        // without restarting the stfrunner.exe process. If we use connection pooling,
        // we get an exception in the first one or two tests because we recreate the
        // database, but the connection pool hasn't yet figured out that the connection
        // is no longer valid.
        private string _npdbConnectionString 
        {
            get 
            {
                return "Data Source="+_npdbServer+";Initial Catalog="+_npdbDatabase+";Integrated Security=SSPI;Application Name=ConfigDevTest;Pooling=false";
            }
        }

        [TestGroupSetup]
        public void Setup()
        {
            _fReady = false;

            // Check for configdevtest.xml that contains all the information about npdb, sitecfg, and test data
            string testConfigFile = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "ConfigDevTest_envconfig.xml");

            if (false == File.Exists(testConfigFile))
            {
                throw (new Exception(string.Format("\"{0}\" is missing.  Please correct before proceeding.", testConfigFile)));
            }

            // Get the information about npdb, sitecfg, and test data
            XmlDocument testConfigXmlDoc = new XmlDocument();
            try 
            {
                testConfigXmlDoc.Load(testConfigFile);

                XmlNode npdbServerNode = testConfigXmlDoc.SelectSingleNode("/commonconfig/databasedevtest/npdb/@server");
                if (null != npdbServerNode) 
                {
                    _npdbServer = npdbServerNode.Value;
                }

                XmlNode npdbDatabaseNode = testConfigXmlDoc.SelectSingleNode("/commonconfig/databasedevtest/npdb/@test_database");
                if (null != npdbDatabaseNode) 
                {
                    _npdbDatabase = npdbDatabaseNode.Value;
                }

                XmlNode sqlNpdbNode = testConfigXmlDoc.SelectSingleNode("/commonconfig/databasedevtest/sql/@npdb");
                if (null != sqlNpdbNode) 
                {
                    _sqlNpdb = sqlNpdbNode.Value;
                }

                XmlNode sqlUodbNode = testConfigXmlDoc.SelectSingleNode("/commonconfig/databasedevtest/sql/@uodb");
                if (null != sqlUodbNode) 
                {
                    _sqlUodb = sqlUodbNode.Value;
                }

                XmlNode sitecfgAllNode = testConfigXmlDoc.SelectSingleNode("/commonconfig/databasedevtest/sitecfg/@all");
                if (null != sitecfgAllNode) 
                {
                    _sitecfgAll = sitecfgAllNode.Value;
                }

                XmlNode sitecfgXblobNode = testConfigXmlDoc.SelectSingleNode("/commonconfig/databasedevtest/sitecfg/@xblob");
                if (null != sitecfgXblobNode) 
                {
                    _sitecfgXblob = sitecfgXblobNode.Value;
                }
            }
            catch (XmlException e)
            {
                Console.WriteLine(e.ToString());
            }

            // Check the information about npdb, sitecfg, and test data
            if ((null == _npdbServer) || (null == _npdbDatabase) || (null == _sqlNpdb) || (null == _sqlUodb) || (null == _sitecfgAll) || (null == _sitecfgXblob)) 
            {
                throw(new Exception("ConfigDevTest.xml is incomplete.  Please correct before proceeding."));
            }

            // Check that the sql files to populate npdb exist
            foreach (string sqlFile in _sqlFilesPhaseOne) 
            {
                if (-1 == Array.IndexOf(_sqlUodbFiles, sqlFile)) 
                {
                    if (false == File.Exists(_sqlNpdb + "\\" + sqlFile)) 
                    {
                        throw(new Exception(_sqlNpdb + "\\" + sqlFile + " is missing.  Please correct before proceeding."));
                    }
                }
                else 
                {
                    if (false == File.Exists(_sqlUodb + "\\" + sqlFile)) 
                    {
                        throw(new Exception(_sqlUodb + "\\" + sqlFile + " is missing.  Please correct before proceeding."));
                    }
                }
            }

            // Check that the sql files to populate npdb exist
            foreach (string sqlFile in _sqlFilesPhaseTwo) 
            {
                if (-1 == Array.IndexOf(_sqlUodbFiles, sqlFile)) 
                {
                    if (false == File.Exists(_sqlNpdb + "\\" + sqlFile)) 
                    {
                        throw(new Exception(_sqlNpdb + "\\" + sqlFile + " is missing.  Please correct before proceeding."));
                    }
                }
                else 
                {
                    if (false == File.Exists(_sqlUodb + "\\" + sqlFile)) 
                    {
                        throw(new Exception(_sqlUodb + "\\" + sqlFile + " is missing.  Please correct before proceeding."));
                    }
                }
            }

            // Check that the sql files to configure the site exist
            foreach (string sitecfgFile in _sitecfgAllFiles) 
            {
                if (false == File.Exists(_sitecfgAll + sitecfgFile)) 
                {
                    throw(new Exception(_sitecfgAll + sitecfgFile + " is missing.  Please correct before proceeding."));
                }
            }

            // Check that the sql files to configure the site exist
            foreach (string sitecfgFile in _sitecfgXblobFiles) 
            {
                if (false == File.Exists(_sitecfgXblob + sitecfgFile)) 
                {
                    throw(new Exception(_sitecfgXblob + sitecfgFile + " is missing.  Please correct before proceeding."));
                }
            }

            // Check that the sql files to populate the test data exist
            foreach (string testDataFile in _testDataFiles) 
            {
                if (false == File.Exists(_testData + testDataFile)) 
                {
                    throw(new Exception(_testData + testDataFile + " is missing.  Please correct before proceeding."));
                }
            }

            if (0 == String.Compare(_npdbServer, "localhost", true)) 
            {
                _npdbServer = Environment.GetEnvironmentVariable("COMPUTERNAME");
            }

            Console.WriteLine("_npdbServer = " + _npdbServer);
            Console.WriteLine("_npdbDatabase = " + _npdbDatabase);
            Console.WriteLine("_sqlNpdb = " + _sqlNpdb);
            Console.WriteLine("_sqlUodb = " + _sqlUodb);
            Console.WriteLine("_sitecfgAll = " + _sitecfgAll);
            Console.WriteLine("_sitecfgXblob = " + _sitecfgXblob);
            Console.WriteLine("_testData = " + _testData);

            using (SqlConnection cxn = DbUtil.CreateDb(_npdbServer, _npdbDatabase))
            {
                string sqlfile;

                foreach (string sqlFile in _sqlFilesPhaseOne) 
                {
                    if (-1 == Array.IndexOf(_sqlUodbFiles, sqlFile)) 
                    {
                        Console.WriteLine("sqlFile = " + _sqlNpdb + "\\" + sqlFile);
                        DbUtil.ExecuteSqlFile(cxn, _sqlNpdb + "\\" + sqlFile);
                    }
                    else 
                    {
                        Console.WriteLine("sqlFile = " + _sqlUodb + "\\" + sqlFile);
                        DbUtil.ExecuteSqlFile(cxn, _sqlUodb + "\\" + sqlFile);
                    }
                }

                // IMPORTANT!!!
                //
                // If any additional files are needed here, they should also
                // be added to the appropriate sitecfg file array above
                //
                // Then the files will be checked if they exist before proceeding
                //

                // populate the database with the environment configurations
                sqlfile =  _sitecfgAll + "\\npdb_config_all_environments.sql";
                Console.WriteLine("sqlFile = " + sqlfile);
                DbUtil.ExecuteSqlFile(cxn, sqlfile);

                // set the flag to indicate that this environment is an xbl box (single box) environment
                sqlfile =  _sitecfgXblob + "\\npdb_config_environment.sql";
                Console.WriteLine("sqlFile = " + sqlfile);
                DbUtil.ExecuteSqlFile(cxn, sqlfile);

                sqlfile =  _sitecfgAll + "\\npdb_stringsvr_populate_common.sql";
                Console.WriteLine("sqlFile = " + sqlfile);
                DbUtil.ExecuteSqlFile(cxn, sqlfile);

                sqlfile =  _sitecfgXblob + "\\npdb_stringsvr_populate.sql";
                Console.WriteLine("sqlFile = " + sqlfile);
                DbUtil.ExecuteSqlFile(cxn, sqlfile);

                foreach (string sqlFile in _sqlFilesPhaseTwo) 
                {
                    if (-1 == Array.IndexOf(_sqlUodbFiles, sqlFile)) 
                    {
                        Console.WriteLine("sqlFile = " + _sqlNpdb + "\\" + sqlFile);
                        DbUtil.ExecuteSqlFile(cxn, _sqlNpdb + "\\" + sqlFile);
                    }
                    else 
                    {
                        Console.WriteLine("sqlFile = " + _sqlUodb + "\\" + sqlFile);
                        DbUtil.ExecuteSqlFile(cxn, _sqlUodb + "\\" + sqlFile);
                    }
                }

                // IMPORTANT!!!
                //
                // If any additional files are needed here, they should also
                // be added to the testdata file array above
                //
                // Then the files will be checked if they exist before proceeding
                //

                // populate the database with unit test data suitable for testing
                // all the override tables. 
                sqlfile =  _testData + "\\npdb_config_add_database_data.sql";
                Console.WriteLine("sqlFile = " + sqlfile);
                DbUtil.ExecuteSqlFile(cxn, sqlfile);

                cxn.Close();

                _fReady = true;
            }
        }

        [TestCase]
        public void tr_game_config_Pos()
        {
            CheckReady();

            // IMPORTANT!!!
            //
            // If any additional files are needed here, they should also
            // be added to the testdata file array above
            //
            // Then the files will be checked if they exist before proceeding
            //

            string      addGameConfigFile1 = _testData + "\\npdb_config_add_gameconfig_1.xml";
            string      addGameConfigFile2 = _testData + "\\npdb_config_add_gameconfig_2.xml";

            XmlDocument addGameConfigXmlDoc1 = new XmlDocument();
            XmlDocument addGameConfigXmlDoc2 = new XmlDocument();

            addGameConfigXmlDoc1.Load(addGameConfigFile1);
            addGameConfigXmlDoc2.Load(addGameConfigFile2);

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_game_config
                sqlCommand.CommandText 
                    = "insert into t_game_config "
                    + "select 0xFFFF0004,'" + addGameConfigXmlDoc1.InnerXml + "','version1',getutcdate() "
                    + "union all "
                    + "select 0xFFFF0005,'" + addGameConfigXmlDoc2.InnerXml + "','version2',getutcdate() ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_game_config", sqlDataReader["vc_table"]);

                char[]   delims = "(,)\n".ToCharArray();
                string[] split = ((string)sqlDataReader["nt_inserted"]).Split(delims);
                Assert.AreEqual("-65532", split[1]);
                Assert.AreEqual("-65531", split[5]);

                DateTime dt1 = DateTime.Parse(split[2]);
                DateTime dt2 = DateTime.Parse(split[6]);

                TimeSpan ts1 = dt1 - dateTime;
                TimeSpan ts2 = dt2 - dateTime;

                Assert.IsTrue(Math.Abs(ts1.TotalSeconds) < 60);
                Assert.IsTrue(Math.Abs(ts2.TotalSeconds) < 60);

                Assert.AreEqual("(" + split[1] + "," + split[2] + ")\n(" + split[5] + "," + split[6] + ")\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_game_config
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_game_config "
                    + "set vc_xdk_version=vc_xdk_version+'A' where i_title_id=0xFFFF0004 or i_title_id=0xFFFF0005";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_game_config", sqlDataReader["vc_table"]);

                split = ((string)sqlDataReader["nt_inserted"]).Split(delims);
                Assert.AreEqual("-65532", split[1]);
                Assert.AreEqual("-65531", split[5]);

                dt1 = DateTime.Parse(split[2]);
                dt2 = DateTime.Parse(split[6]);

                ts1 = dt1 - dateTime;
                ts2 = dt2 - dateTime;

                Assert.IsTrue(Math.Abs(ts1.TotalSeconds) < 60);
                Assert.IsTrue(Math.Abs(ts2.TotalSeconds) < 60);

                Assert.AreEqual("(" + split[1] + "," + split[2] + ")\n(" + split[5] + "," + split[6] + ")\n", sqlDataReader["nt_inserted"]);

                split = ((string)sqlDataReader["nt_deleted"]).Split(delims);
                Assert.AreEqual("-65532", split[1]);
                Assert.AreEqual("-65531", split[5]);

                dt1 = DateTime.Parse(split[2]);
                dt2 = DateTime.Parse(split[6]);

                ts1 = dt1 - dateTime;
                ts2 = dt2 - dateTime;

                Assert.IsTrue(Math.Abs(ts1.TotalSeconds) < 60);
                Assert.IsTrue(Math.Abs(ts2.TotalSeconds) < 60);

                Assert.AreEqual("(" + split[1] + "," + split[2] + ")\n(" + split[5] + "," + split[6] + ")\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_game_config
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_game_config where i_title_id=0xFFFF0004 or i_title_id=0xFFFF0005";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_game_config", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);

                split = ((string)sqlDataReader["nt_deleted"]).Split(delims);
                Assert.AreEqual("-65532", split[1]);
                Assert.AreEqual("-65531", split[5]);

                dt1 = DateTime.Parse(split[2]);
                dt2 = DateTime.Parse(split[6]);

                ts1 = dt1 - dateTime;
                ts2 = dt2 - dateTime;

                Assert.IsTrue(Math.Abs(ts1.TotalSeconds) < 60);
                Assert.IsTrue(Math.Abs(ts2.TotalSeconds) < 60);

                Assert.AreEqual("(" + split[1] + "," + split[2] + ")\n(" + split[5] + "," + split[6] + ")\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_live_title_config_Pos()
        {
            CheckReady();

            // IMPORTANT!!!
            //
            // If any additional files are needed here, they should also
            // be added to the testdata file array above
            //
            // Then the files will be checked if they exist before proceeding
            //

            string      addGameConfigFile1 = _testData + "\\npdb_config_add_gameconfig_1.xml";
            string      addGameConfigFile2 = _testData + "\\npdb_config_add_gameconfig_2.xml";

            XmlDocument addGameConfigXmlDoc1 = new XmlDocument();
            XmlDocument addGameConfigXmlDoc2 = new XmlDocument();

            addGameConfigXmlDoc1.Load(addGameConfigFile1);
            addGameConfigXmlDoc2.Load(addGameConfigFile2);

            string      addTitleConfigFile1 = _testData + "\\npdb_config_add_titleconfig_1.xml";
            string      addTitleConfigFile2 = _testData + "\\npdb_config_add_titleconfig_2.xml";

            XmlDocument addTitleConfigXmlDoc1 = new XmlDocument();
            XmlDocument addTitleConfigXmlDoc2 = new XmlDocument();

            addTitleConfigXmlDoc1.Load(addTitleConfigFile1);
            addTitleConfigXmlDoc2.Load(addTitleConfigFile2);

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_live_title_config, we have to setup some
                // other tables that t_live_title_config references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_game_config "
                    + "select 0xFFFF0004,'" + addGameConfigXmlDoc1.InnerXml + "','version1',getutcdate() "
                    + "union all "
                    + "select 0xFFFF0005,'" + addGameConfigXmlDoc2.InnerXml + "','version2',getutcdate() ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_live_title_config
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_live_title_config "
                    + "select 0xFFFF0004,getutcdate(),'" + addTitleConfigXmlDoc1.InnerXml + "' "
                    + "union all "
                    + "select 0xFFFF0005,getutcdate(),'" + addTitleConfigXmlDoc2.InnerXml + "'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_live_title_config", sqlDataReader["vc_table"]);

                char[]   delims = "(,)\n".ToCharArray();
                string[] split = ((string)sqlDataReader["nt_inserted"]).Split(delims);
                Assert.AreEqual("-65532", split[1]);
                Assert.AreEqual("-65531", split[5]);

                DateTime dt1 = DateTime.Parse(split[2]);
                DateTime dt2 = DateTime.Parse(split[6]);

                TimeSpan ts1 = dt1 - dateTime;
                TimeSpan ts2 = dt2 - dateTime;

                Assert.IsTrue(Math.Abs(ts1.TotalSeconds) < 60);
                Assert.IsTrue(Math.Abs(ts2.TotalSeconds) < 60);

                Assert.AreEqual("(" + split[1] + "," + split[2] + ")\n(" + split[5] + "," + split[6] + ")\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_live_title_config
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_live_title_config "
                    + "set dt_changed=getutcdate() where i_title_id=0xFFFF0004 or i_title_id=0xFFFF0005";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_live_title_config", sqlDataReader["vc_table"]);

                split = ((string)sqlDataReader["nt_inserted"]).Split(delims);
                Assert.AreEqual("-65532", split[1]);
                Assert.AreEqual("-65531", split[5]);

                dt1 = DateTime.Parse(split[2]);
                dt2 = DateTime.Parse(split[6]);

                ts1 = dt1 - dateTime;
                ts2 = dt2 - dateTime;

                Assert.IsTrue(Math.Abs(ts1.TotalSeconds) < 60);
                Assert.IsTrue(Math.Abs(ts2.TotalSeconds) < 60);

                Assert.AreEqual("(" + split[1] + "," + split[2] + ")\n(" + split[5] + "," + split[6] + ")\n", sqlDataReader["nt_inserted"]);

                split = ((string)sqlDataReader["nt_deleted"]).Split(delims);
                Assert.AreEqual("-65532", split[1]);
                Assert.AreEqual("-65531", split[5]);

                dt1 = DateTime.Parse(split[2]);
                dt2 = DateTime.Parse(split[6]);

                ts1 = dt1 - dateTime;
                ts2 = dt2 - dateTime;

                Assert.IsTrue(Math.Abs(ts1.TotalSeconds) < 60);
                Assert.IsTrue(Math.Abs(ts2.TotalSeconds) < 60);

                Assert.AreEqual("(" + split[1] + "," + split[2] + ")\n(" + split[5] + "," + split[6] + ")\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_live_title_config
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_live_title_config where i_title_id=0xFFFF0004 or i_title_id=0xFFFF0005";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_live_title_config", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);

                split = ((string)sqlDataReader["nt_deleted"]).Split(delims);
                Assert.AreEqual("-65532", split[1]);
                Assert.AreEqual("-65531", split[5]);

                dt1 = DateTime.Parse(split[2]);
                dt2 = DateTime.Parse(split[6]);

                ts1 = dt1 - dateTime;
                ts2 = dt2 - dateTime;

                Assert.IsTrue(Math.Abs(ts1.TotalSeconds) < 60);
                Assert.IsTrue(Math.Abs(ts2.TotalSeconds) < 60);

                Assert.AreEqual("(" + split[1] + "," + split[2] + ")\n(" + split[5] + "," + split[6] + ")\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_game_config where i_title_id=0xFFFF0004 or i_title_id=0xFFFF0005";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_protocols_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_protocols
                sqlCommand.CommandText 
                    = "insert into t_protocols select ('protocol1') union all select ('protocol2')";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_protocols", sqlDataReader["vc_table"]);
                Assert.AreEqual("('protocol1')\n('protocol2')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_protocols
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_protocols set vc_protocol=vc_protocol+'A' where vc_protocol='protocol1' or vc_protocol='protocol2'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_protocols", sqlDataReader["vc_table"]);
                Assert.AreEqual("('protocol1A')\n('protocol2A')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('protocol1')\n('protocol2')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_protocols
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_protocols where vc_protocol='protocol1A' or vc_protocol='protocol2A'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_protocols", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('protocol1A')\n('protocol2A')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_nic_roles_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_nic_roles
                sqlCommand.CommandText 
                    = "insert into t_nic_roles select ('nic_role1') union all select ('nic_role2')";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_nic_roles", sqlDataReader["vc_table"]);
                Assert.AreEqual("('nic_role1')\n('nic_role2')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_nic_roles
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_nic_roles set vc_nic_role=vc_nic_role+'A' where vc_nic_role='nic_role1' or vc_nic_role='nic_role2'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_nic_roles", sqlDataReader["vc_table"]);
                Assert.AreEqual("('nic_role1A')\n('nic_role2A')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('nic_role1')\n('nic_role2')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_nic_roles
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_nic_roles where vc_nic_role='nic_role1A' or vc_nic_role='nic_role2A'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_nic_roles", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('nic_role1A')\n('nic_role2A')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_user_roles_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_user_roles
                sqlCommand.CommandText 
                    = "insert into t_user_roles select ('user_role1') union all select ('user_role2')";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_user_roles", sqlDataReader["vc_table"]);
                Assert.AreEqual("('user_role1')\n('user_role2')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_user_roles
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_user_roles set vc_user_role=vc_user_role+'A' where vc_user_role='user_role1' or vc_user_role='user_role2'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_user_roles", sqlDataReader["vc_table"]);
                Assert.AreEqual("('user_role1A')\n('user_role2A')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('user_role1')\n('user_role2')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_user_roles
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_user_roles where vc_user_role='user_role1A' or vc_user_role='user_role2A'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_user_roles", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('user_role1A')\n('user_role2A')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_install_units_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_install_units
                sqlCommand.CommandText 
                    = "insert into t_install_units "
                    + "select 'install_unitA', 'vc_info1A', 'vc_info2A', 'vc_info3A', 'vc_info4A' "
                    + "union all "
                    + "select 'install_unitB', 'vc_info1B', 'vc_info2B', 'vc_info3B', 'vc_info4B'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_install_units", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('install_unitA','vc_info1A','vc_info2A','vc_info3A','vc_info4A')\n"
                    +"('install_unitB','vc_info1B','vc_info2B','vc_info3B','vc_info4B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_install_units
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_install_units set vc_install_unit=vc_install_unit+'x' "
                    + "where vc_install_unit='install_unitA' or vc_install_unit='install_unitB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_install_units", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('install_unitAx','vc_info1A','vc_info2A','vc_info3A','vc_info4A')\n"
                    +"('install_unitBx','vc_info1B','vc_info2B','vc_info3B','vc_info4B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('install_unitA','vc_info1A','vc_info2A','vc_info3A','vc_info4A')\n"
                    +"('install_unitB','vc_info1B','vc_info2B','vc_info3B','vc_info4B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_install_units
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_install_units where vc_install_unit='install_unitAx' or vc_install_unit='install_unitBx'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_install_units", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('install_unitAx','vc_info1A','vc_info2A','vc_info3A','vc_info4A')\n"
                    +"('install_unitBx','vc_info1B','vc_info2B','vc_info3B','vc_info4B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_components_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_components, we have to setup some
                // other tables that t_components references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_components
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_components "
                    + "select 'componentA', 'install_unitA', 'executableA', 'installerA', 'user_roleA', 'vc_info1A', 'vc_info2A' "
                    + "union all "
                    + "select 'componentB', 'install_unitB', 'executableB', 'installerB', 'user_roleB', 'vc_info1B', 'vc_info2B' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_components", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('componentA','install_unitA','executableA','installerA','user_roleA','vc_info1A','vc_info2A')\n"
                    +"('componentB','install_unitB','executableB','installerB','user_roleB','vc_info1B','vc_info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_components
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_components set vc_info1=vc_info1+'x' "
                    + "where vc_component='componentA' or vc_component='componentB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_components", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('componentA','install_unitA','executableA','installerA','user_roleA','vc_info1Ax','vc_info2A')\n"
                    +"('componentB','install_unitB','executableB','installerB','user_roleB','vc_info1Bx','vc_info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('componentA','install_unitA','executableA','installerA','user_roleA','vc_info1A','vc_info2A')\n"
                    +"('componentB','install_unitB','executableB','installerB','user_roleB','vc_info1B','vc_info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_components
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_components where vc_component='componentA' or vc_component='componentB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_components", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('componentA','install_unitA','executableA','installerA','user_roleA','vc_info1Ax','vc_info2A')\n"
                    +"('componentB','install_unitB','executableB','installerB','user_roleB','vc_info1Bx','vc_info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_interfaces_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_interfaces, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_interfaces
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_interfaces "
                    + "select 'interfaceA', 'componentA', 'nic_roleA', 'protocolA', 1, 2, 'vsiteA', 3, 'vdirA', 'dbnameA', 'sharenameA', 4, 5, 'service_nameA', 0, 'state_change_urlA', 'title_change_urlA', 'dead_xbox_urlA', 'user_roleA', 'vc_info1A', 'vc_info2A' "
                    + "union all "
                    + "select 'interfaceB', 'componentB', 'nic_roleB', 'protocolB', 6, 7, 'vsiteB', 8, 'vdirB', 'dbnameB', 'sharenameB', 9, 10, 'service_nameB', 1, 'state_change_urlB', 'title_change_urlB', 'dead_xbox_urlB', 'user_roleB', 'vc_info1B', 'vc_info2B' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_interfaces", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('interfaceA','componentA','nic_roleA','protocolA',1,2,'vsiteA',3,'vdirA','dbnameA','sharenameA',4,5,'service_nameA',0,'state_change_urlA','title_change_urlA','dead_xbox_urlA','user_roleA','vc_info1A','vc_info2A')\n"
                    +"('interfaceB','componentB','nic_roleB','protocolB',6,7,'vsiteB',8,'vdirB','dbnameB','sharenameB',9,10,'service_nameB',1,'state_change_urlB','title_change_urlB','dead_xbox_urlB','user_roleB','vc_info1B','vc_info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_interfaces
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_interfaces set vc_info1=vc_info1+'x' "
                    + "where vc_interface='interfaceA' or vc_interface='interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_interfaces", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('interfaceA','componentA','nic_roleA','protocolA',1,2,'vsiteA',3,'vdirA','dbnameA','sharenameA',4,5,'service_nameA',0,'state_change_urlA','title_change_urlA','dead_xbox_urlA','user_roleA','vc_info1Ax','vc_info2A')\n"
                    +"('interfaceB','componentB','nic_roleB','protocolB',6,7,'vsiteB',8,'vdirB','dbnameB','sharenameB',9,10,'service_nameB',1,'state_change_urlB','title_change_urlB','dead_xbox_urlB','user_roleB','vc_info1Bx','vc_info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('interfaceA','componentA','nic_roleA','protocolA',1,2,'vsiteA',3,'vdirA','dbnameA','sharenameA',4,5,'service_nameA',0,'state_change_urlA','title_change_urlA','dead_xbox_urlA','user_roleA','vc_info1A','vc_info2A')\n"
                    +"('interfaceB','componentB','nic_roleB','protocolB',6,7,'vsiteB',8,'vdirB','dbnameB','sharenameB',9,10,'service_nameB',1,'state_change_urlB','title_change_urlB','dead_xbox_urlB','user_roleB','vc_info1B','vc_info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_interfaces
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_interfaces", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('interfaceA','componentA','nic_roleA','protocolA',1,2,'vsiteA',3,'vdirA','dbnameA','sharenameA',4,5,'service_nameA',0,'state_change_urlA','title_change_urlA','dead_xbox_urlA','user_roleA','vc_info1Ax','vc_info2A')\n"
                    +"('interfaceB','componentB','nic_roleB','protocolB',6,7,'vsiteB',8,'vdirB','dbnameB','sharenameB',9,10,'service_nameB',1,'state_change_urlB','title_change_urlB','dead_xbox_urlB','user_roleB','vc_info1Bx','vc_info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_virtual_interfaces_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_virtual_interfaces, we have to setup some
                // other tables that t_virtual_interfaces references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol, vc_user_role) values ('interfaceA', 'componentA', 'nic_roleA', 'protocolA', 'user_roleA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol, vc_user_role) values ('interfaceB', 'componentB', 'nic_roleB', 'protocolB', 'user_roleB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_virtual_interfaces
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_virtual_interfaces "
                    + "select 'virtual_interfaceA','interfaceA',1,2,'vdirA','webstore_appA',3,4,5,'info1A','info2A' "
                    + "union all "
                    + "select 'virtual_interfaceB','interfaceB',6,7,'vdirB','webstore_appB',8,9,10,'info1B','info2B' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_virtual_interfaces", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('virtual_interfaceA','interfaceA',1,2,'vdirA','webstore_appA',3,4,5,'info1A','info2A')\n"
                    +"('virtual_interfaceB','interfaceB',6,7,'vdirB','webstore_appB',8,9,10,'info1B','info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_virtual_interfaces
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_virtual_interfaces set vc_info1=vc_info1+'x' "
                    + "where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_virtual_interfaces", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('virtual_interfaceA','interfaceA',1,2,'vdirA','webstore_appA',3,4,5,'info1Ax','info2A')\n"
                    +"('virtual_interfaceB','interfaceB',6,7,'vdirB','webstore_appB',8,9,10,'info1Bx','info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('virtual_interfaceA','interfaceA',1,2,'vdirA','webstore_appA',3,4,5,'info1A','info2A')\n"
                    +"('virtual_interfaceB','interfaceB',6,7,'vdirB','webstore_appB',8,9,10,'info1B','info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_virtual_interfaces
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_virtual_interfaces where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_virtual_interfaces", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('virtual_interfaceA','interfaceA',1,2,'vdirA','webstore_appA',3,4,5,'info1Ax','info2A')\n"
                    +"('virtual_interfaceB','interfaceB',6,7,'vdirB','webstore_appB',8,9,10,'info1Bx','info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_server_types_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_server_types
                sqlCommand.CommandText 
                    = "insert into t_server_types select ('server_typeA') union all select ('server_typeB')";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_types", sqlDataReader["vc_table"]);
                Assert.AreEqual("('server_typeA')\n('server_typeB')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_server_types
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_server_types set vc_server_type=vc_server_type+'x' "
                    + "where vc_server_type='server_typeA' or vc_server_type='server_typeB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_types", sqlDataReader["vc_table"]);
                Assert.AreEqual("('server_typeAx')\n('server_typeBx')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('server_typeA')\n('server_typeB')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_server_types
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_server_types where vc_server_type='server_typeAx' or vc_server_type='server_typeBx'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_types", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('server_typeAx')\n('server_typeBx')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_server_type_interfaces_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_server_type_interfaces, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol, vc_user_role) values ('interfaceA', 'componentA', 'nic_roleA', 'protocolA', 'user_roleA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol, vc_user_role) values ('interfaceB', 'componentB', 'nic_roleB', 'protocolB', 'user_roleB') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeA') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeB') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeAx') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeBx') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_server_type_interfaces
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_server_type_interfaces "
                    + "select 'server_typeA','interfaceA' "
                    + "union all "
                    + "select 'server_typeB','interfaceB' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_type_interfaces", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('server_typeA','interfaceA')\n"
                    +"('server_typeB','interfaceB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_server_type_interfaces
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_server_type_interfaces set vc_server_type=vc_server_type+'x' "
                    + "where vc_server_type='server_typeA' or vc_server_type='server_typeB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_type_interfaces", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('server_typeAx','interfaceA')\n"
                    +"('server_typeBx','interfaceB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('server_typeA','interfaceA')\n"
                    +"('server_typeB','interfaceB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_server_type_interfaces
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_server_type_interfaces where vc_server_type='server_typeAx' or vc_server_type='server_typeBx'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_type_interfaces", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('server_typeAx','interfaceA')\n"
                    +"('server_typeBx','interfaceB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_server_types where vc_server_type='server_typeA' or vc_server_type='server_typeB' "
                    + "delete from t_server_types where vc_server_type='server_typeAx' or vc_server_type='server_typeBx' "
                    + "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_environment_types_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_environment_types
                sqlCommand.CommandText 
                    = "insert into t_environment_types select ('environment_typeA') union all select ('environment_typeB')";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_types", sqlDataReader["vc_table"]);
                Assert.AreEqual("('environment_typeA')\n('environment_typeB')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_environment_types
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_environment_types set vc_environment_type=vc_environment_type+'x' "
                    + "where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_types", sqlDataReader["vc_table"]);
                Assert.AreEqual("('environment_typeAx')\n('environment_typeBx')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('environment_typeA')\n('environment_typeB')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_environment_types
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_environment_types where vc_environment_type='environment_typeAx' or vc_environment_type='environment_typeBx'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_types", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('environment_typeAx')\n('environment_typeBx')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_environment_type_interface_overrides_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_environment_type_interface_overrides, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol, vc_user_role) values ('interfaceA', 'componentA', 'nic_roleA', 'protocolA', 'user_roleA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol, vc_user_role) values ('interfaceB', 'componentB', 'nic_roleB', 'protocolB', 'user_roleB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_environment_type_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_environment_type_interface_overrides "
                    + "select 'environment_typeA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',3,'info1A','info2A' "
                    + "union all "
                    + "select 'environment_typeB','interfaceB',4,5,'vdirB','dbnameB','sharenameB',6,'info1B','info2B' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environment_typeA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',3,'info1A','info2A')\n"
                    +"('environment_typeB','interfaceB',4,5,'vdirB','dbnameB','sharenameB',6,'info1B','info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_environment_type_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_environment_type_interface_overrides set vc_info1=vc_info1+'x' "
                    + "where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environment_typeA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',3,'info1Ax','info2A')\n"
                    +"('environment_typeB','interfaceB',4,5,'vdirB','dbnameB','sharenameB',6,'info1Bx','info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environment_typeA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',3,'info1A','info2A')\n"
                    +"('environment_typeB','interfaceB',4,5,'vdirB','dbnameB','sharenameB',6,'info1B','info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_environment_type_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_environment_type_interface_overrides "
                    + "where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environment_typeA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',3,'info1Ax','info2A')\n"
                    +"('environment_typeB','interfaceB',4,5,'vdirB','dbnameB','sharenameB',6,'info1Bx','info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_environment_type_virtual_interface_overrides_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_environment_type_virtual_interface_overrides, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol, vc_user_role) values ('interfaceA', 'componentA', 'nic_roleA', 'protocolA', 'user_roleA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol, vc_user_role) values ('interfaceB', 'componentB', 'nic_roleB', 'protocolB', 'user_roleB') "
                    + "insert into t_virtual_interfaces (vc_virtual_interface, vc_interface) values ('virtual_interfaceA', 'interfaceA') "
                    + "insert into t_virtual_interfaces (vc_virtual_interface, vc_interface) values ('virtual_interfaceB', 'interfaceB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_environment_type_virtual_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_environment_type_virtual_interface_overrides "
                    + "select 'environment_typeA','virtual_interfaceA',1,2,'vdirA','webstore_appA',3,4,5,'info1A','info2A' "
                    + "union all "
                    + "select 'environment_typeB','virtual_interfaceB',6,7,'vdirB','webstore_appB',8,9,10,'info1B','info2B' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_virtual_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environment_typeA','virtual_interfaceA',1,2,'vdirA','webstore_appA',3,4,5,'info1A','info2A')\n"
                    +"('environment_typeB','virtual_interfaceB',6,7,'vdirB','webstore_appB',8,9,10,'info1B','info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_environment_type_virtual_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_environment_type_virtual_interface_overrides set vc_info1=vc_info1+'x' "
                    + "where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_virtual_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environment_typeA','virtual_interfaceA',1,2,'vdirA','webstore_appA',3,4,5,'info1Ax','info2A')\n"
                    +"('environment_typeB','virtual_interfaceB',6,7,'vdirB','webstore_appB',8,9,10,'info1Bx','info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environment_typeA','virtual_interfaceA',1,2,'vdirA','webstore_appA',3,4,5,'info1A','info2A')\n"
                    +"('environment_typeB','virtual_interfaceB',6,7,'vdirB','webstore_appB',8,9,10,'info1B','info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_environment_type_virtual_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_environment_type_virtual_interface_overrides "
                    + "where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_virtual_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environment_typeA','virtual_interfaceA',1,2,'vdirA','webstore_appA',3,4,5,'info1Ax','info2A')\n"
                    +"('environment_typeB','virtual_interfaceB',6,7,'vdirB','webstore_appB',8,9,10,'info1Bx','info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_virtual_interfaces where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB' "
                    + "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_settings_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_settings
                sqlCommand.CommandText 
                    = "insert into t_settings "
                    + "select 'settingA','valueA' "
                    + "union all "
                    + "select 'settingB','valueB' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_settings", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('settingA','valueA')\n"
                    +"('settingB','valueB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_settings
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_settings set vc_value=vc_value+'x' "
                    + "where vc_setting='settingA' or vc_setting='settingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_settings", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('settingA','valueAx')\n"
                    +"('settingB','valueBx')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('settingA','valueA')\n"
                    +"('settingB','valueB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_settings
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_settings where vc_setting='settingA' or vc_setting='settingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_settings", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('settingA','valueAx')\n"
                    +"('settingB','valueBx')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_environment_type_setting_overrides_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_environment_type_setting_overrides, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_settings (vc_setting, vc_value) values ('settingA','valueA') "
                    + "insert into t_settings (vc_setting, vc_value) values ('settingB','valueB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_environment_type_setting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_environment_type_setting_overrides "
                    + "select 'environment_typeA','settingA','valueA' "
                    + "union all "
                    + "select 'environment_typeB','settingB','valueB' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_setting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environment_typeA','settingA','valueA')\n"
                    +"('environment_typeB','settingB','valueB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_environment_type_setting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_environment_type_setting_overrides set vc_value=vc_value+'x' "
                    + "where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_setting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environment_typeA','settingA','valueAx')\n"
                    +"('environment_typeB','settingB','valueBx')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environment_typeA','settingA','valueA')\n"
                    +"('environment_typeB','settingB','valueB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_environment_type_setting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_environment_type_setting_overrides "
                    + "where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_setting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environment_typeA','settingA','valueAx')\n"
                    +"('environment_typeB','settingB','valueBx')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_settings where vc_setting='settingA' or vc_setting='settingB' ";
                sqlCommand.ExecuteNonQuery();
            }

        }

        [TestCase]
        public void tr_multisetting_names_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_multisetting_names
                sqlCommand.CommandText 
                    = "insert into t_multisetting_names select ('multisettingA') union all select ('multisettingB')";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_multisetting_names", sqlDataReader["vc_table"]);
                Assert.AreEqual("('multisettingA')\n('multisettingB')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_multisetting_names
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_multisetting_names set vc_multisetting=vc_multisetting+'x' "
                    + "where vc_multisetting='multisettingA' or vc_multisetting='multisettingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_multisetting_names", sqlDataReader["vc_table"]);
                Assert.AreEqual("('multisettingAx')\n('multisettingBx')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('multisettingA')\n('multisettingB')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_multisetting_names
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_multisetting_names where vc_multisetting='multisettingAx' or vc_multisetting='multisettingBx'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_multisetting_names", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('multisettingAx')\n('multisettingBx')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_multisettings_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_multisettings, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_multisetting_names (vc_multisetting) values ('multisettingA') "
                    + "insert into t_multisetting_names (vc_multisetting) values ('multisettingB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_multisettings
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_multisettings "
                    + "select 'multisettingA','valueA' "
                    + "union all "
                    + "select 'multisettingB','valueB' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_multisettings", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('multisettingA','valueA')\n"
                    +"('multisettingB','valueB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_multisettings
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_multisettings set vc_value=vc_value+'x' "
                    + "where vc_multisetting='multisettingA' or vc_multisetting='multisettingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_multisettings", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('multisettingA','valueAx')\n"
                    +"('multisettingB','valueBx')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('multisettingA','valueA')\n"
                    +"('multisettingB','valueB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_multisettings
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_multisettings where vc_multisetting='multisettingA' or vc_multisetting='multisettingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_multisettings", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('multisettingA','valueAx')\n"
                    +"('multisettingB','valueBx')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_multisetting_names where vc_multisetting='multisettingA' or vc_multisetting='multisettingB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_environment_type_multisetting_overrides_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_environment_type_multisetting_overrides, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_multisetting_names (vc_multisetting) values ('multisettingA') "
                    + "insert into t_multisetting_names (vc_multisetting) values ('multisettingB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_environment_type_multisetting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_environment_type_multisetting_overrides "
                    + "select 'environment_typeA','multisettingA','valueA' "
                    + "union all "
                    + "select 'environment_typeB','multisettingB','valueB' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_multisetting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environment_typeA','multisettingA','valueA')\n"
                    +"('environment_typeB','multisettingB','valueB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_environment_type_multisetting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_environment_type_multisetting_overrides set vc_value=vc_value+'x' "
                    + "where vc_multisetting='multisettingA' or vc_multisetting='multisettingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_multisetting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environment_typeA','multisettingA','valueAx')\n"
                    +"('environment_typeB','multisettingB','valueBx')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environment_typeA','multisettingA','valueA')\n"
                    +"('environment_typeB','multisettingB','valueB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_environment_type_multisetting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_environment_type_multisetting_overrides where vc_multisetting='multisettingA' or vc_multisetting='multisettingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_type_multisetting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environment_typeA','multisettingA','valueAx')\n"
                    +"('environment_typeB','multisettingB','valueBx')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_multisetting_names where vc_multisetting='multisettingA' or vc_multisetting='multisettingB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_domains_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_domains
                sqlCommand.CommandText 
                    = "insert into t_domains select ('domainA') union all select ('domainB')";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_domains", sqlDataReader["vc_table"]);
                Assert.AreEqual("('domainA')\n('domainB')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_domains
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_domains set vc_domain=vc_domain+'x' "
                    + "where vc_domain='domainA' or vc_domain='domainB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_domains", sqlDataReader["vc_table"]);
                Assert.AreEqual("('domainAx')\n('domainBx')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('domainA')\n('domainB')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_domains
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_domains where vc_domain='domainAx' or vc_domain='domainBx'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_domains", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('domainAx')\n('domainBx')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_environments_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_environments, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_environments
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_environments "
                    + "select 'environmentA','environment_typeA',0"
                    + "union all "
                    + "select 'environmentB','environment_typeB',0";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environments", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','environment_typeA',0)\n"
                    +"('environmentB','environment_typeB',0)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_environments
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_environments set vc_environment=vc_environment+'x' "
                    + "where vc_environment='environmentA' or vc_environment='environmentB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environments", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentAx','environment_typeA',0)\n"
                    +"('environmentBx','environment_typeB',0)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','environment_typeA',0)\n"
                    +"('environmentB','environment_typeB',0)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_environments
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_environments where vc_environment='environmentAx' or vc_environment='environmentBx'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environments", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentAx','environment_typeA',0)\n"
                    +"('environmentBx','environment_typeB',0)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_environments_update()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // ensure the current state is what we expect
                sqlCommand.CommandText = "p_config_get_current_environment";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("xblob", sqlDataReader["vc_environment"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                // try to update the database to mark production environment as current
                // the trigger should rollback this command and nothing should be changed
                // a raiserror should cause a SqlException to be thrown
                sqlCommand.CommandText = "update t_environments set b_current=1 where vc_environment='prodnet'";
                sqlCommand.CommandType = CommandType.Text;
                try
                {
                    sqlCommand.ExecuteNonQuery();
                    Assert.IsTrue(false);
                }
                catch (SqlException e)
                {
                    Assert.IsTrue(e.Message.IndexOf("Attempt to mark more than one environment with b_current=1") != -1);
                }

                // confirm that the state hasn't changed
                sqlCommand.CommandText = "p_config_get_current_environment";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("xblob", sqlDataReader["vc_environment"]);

                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // retrieve the latest log row and confirm that it hasn't changed
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlCommand.CommandType = CommandType.Text;
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId2 = (Int64)sqlDataReader["bi_change_id"];

                Assert.AreEqual(changeId1, changeId2);

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_sites_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_sites, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) "
                    + "insert into t_domains (vc_domain) values ('domainA') "
                    + "insert into t_domains (vc_domain) values ('domainB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_sites
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_sites "
                    + "select 'environmentA',1,'domainA'"
                    + "union all "
                    + "select 'environmentB',2,'domainB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_sites", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA',1,'domainA')\n"
                    +"('environmentB',2,'domainB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_sites
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_sites set i_site_id=i_site_id+2 "
                    + "where vc_environment='environmentA' or vc_environment='environmentB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_sites", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA',3,'domainA')\n"
                    +"('environmentB',4,'domainB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA',1,'domainA')\n"
                    +"('environmentB',2,'domainB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_sites
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_sites where vc_environment='environmentA' or vc_environment='environmentB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_sites", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA',3,'domainA')\n"
                    +"('environmentB',4,'domainB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_domains where vc_domain='domainA' or vc_domain='domainB' "
                    + "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_server_states_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_server_states
                sqlCommand.CommandText 
                    = "insert into t_server_states select ('server_stateA') union all select ('server_stateB')";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_states", sqlDataReader["vc_table"]);
                Assert.AreEqual("('server_stateA')\n('server_stateB')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_server_states
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_server_states set vc_server_state=vc_server_state+'x' "
                    + "where vc_server_state='server_stateA' or vc_server_state='server_stateB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_states", sqlDataReader["vc_table"]);
                Assert.AreEqual("('server_stateAx')\n('server_stateBx')\n", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('server_stateA')\n('server_stateB')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_server_states
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_server_states where vc_server_state='server_stateAx' or vc_server_state='server_stateBx'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_states", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual("('server_stateAx')\n('server_stateBx')\n", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void tr_servers_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_servers, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) "
                    + "insert into t_domains (vc_domain) values ('domainA') "
                    + "insert into t_domains (vc_domain) values ('domainB') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentA',1,'domainA') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentB',2,'domainB') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeA') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeB') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateA') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_servers
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_servers "
                    + "select 'environmentA','serverA','server_typeA',1,'server_stateA',1001"
                    + "union all "
                    + "select 'environmentB','serverB','server_typeB',2,'server_stateB',2001";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_servers", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','serverA','server_typeA',1,'server_stateA',1001)\n"
                    +"('environmentB','serverB','server_typeB',2,'server_stateB',2001)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_sites
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_servers set vc_server=vc_server+'x' "
                    + "where vc_server='serverA' or vc_server='serverB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_servers", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','serverAx','server_typeA',1,'server_stateA',1001)\n"
                    +"('environmentB','serverBx','server_typeB',2,'server_stateB',2001)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','serverA','server_typeA',1,'server_stateA',1001)\n"
                    +"('environmentB','serverB','server_typeB',2,'server_stateB',2001)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_servers
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_servers where vc_server='serverAx' or vc_server='serverBx'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_servers", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','serverAx','server_typeA',1,'server_stateA',1001)\n"
                    +"('environmentB','serverBx','server_typeB',2,'server_stateB',2001)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_server_states where vc_server_state='server_stateA' or vc_server_state='server_stateB' "
                    + "delete from t_server_types where vc_server_type='server_typeA' or vc_server_type='server_typeB' "
                    + "delete from t_sites where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_domains where vc_domain='domainA' or vc_domain='domainB' "
                    + "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_server_nics_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_server_nics, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) "
                    + "insert into t_domains (vc_domain) values ('domainA') "
                    + "insert into t_domains (vc_domain) values ('domainB') "
                    + "insert into t_sites (vc_environment, i_site_id, vc_domain) values ('environmentA',1,'domainA') "
                    + "insert into t_sites (vc_environment, i_site_id, vc_domain) values ('environmentB',2,'domainB') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateA') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateB') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeA') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeB') "
                    + "insert into t_servers (vc_environment, vc_server, vc_server_type, i_site_id, vc_server_state, i_server_id) values ('environmentA','serverA','server_typeA',1,'server_stateA',1001) "
                    + "insert into t_servers (vc_environment, vc_server, vc_server_type, i_site_id, vc_server_state, i_server_id) values ('environmentB','serverB','server_typeB',2,'server_stateB',2001) ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_server_nics
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_server_nics "
                    + "select 'environmentA','serverA','nic_roleA','ipA','ip_netmaskA','ip_default_gatewayA','macA','sg_ip_beginA','sg_ip_endA',1,2,'wiretap_ipA',0 "
                    + "union all "
                    + "select 'environmentB','serverB','nic_roleB','ipB','ip_netmaskB','ip_default_gatewayB','macB','sg_ip_beginB','sg_ip_endB',3,4,'wiretap_ipB',1 ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_nics", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','serverA','nic_roleA','ipA','ip_netmaskA','ip_default_gatewayA','macA','sg_ip_beginA','sg_ip_endA',1,2,'wiretap_ipA',0)\n"
                    +"('environmentB','serverB','nic_roleB','ipB','ip_netmaskB','ip_default_gatewayB','macB','sg_ip_beginB','sg_ip_endB',3,4,'wiretap_ipB',1)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_server_nics
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_server_nics set vc_ip=vc_ip+'x' "
                    + "where vc_environment='environmentA' or vc_environment='environmentB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_nics", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','serverA','nic_roleA','ipAx','ip_netmaskA','ip_default_gatewayA','macA','sg_ip_beginA','sg_ip_endA',1,2,'wiretap_ipA',0)\n"
                    +"('environmentB','serverB','nic_roleB','ipBx','ip_netmaskB','ip_default_gatewayB','macB','sg_ip_beginB','sg_ip_endB',3,4,'wiretap_ipB',1)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','serverA','nic_roleA','ipA','ip_netmaskA','ip_default_gatewayA','macA','sg_ip_beginA','sg_ip_endA',1,2,'wiretap_ipA',0)\n"
                    +"('environmentB','serverB','nic_roleB','ipB','ip_netmaskB','ip_default_gatewayB','macB','sg_ip_beginB','sg_ip_endB',3,4,'wiretap_ipB',1)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_server_nics
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_server_nics where vc_environment='environmentA' or vc_environment='environmentB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_nics", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','serverA','nic_roleA','ipAx','ip_netmaskA','ip_default_gatewayA','macA','sg_ip_beginA','sg_ip_endA',1,2,'wiretap_ipA',0)\n"
                    +"('environmentB','serverB','nic_roleB','ipBx','ip_netmaskB','ip_default_gatewayB','macB','sg_ip_beginB','sg_ip_endB',3,4,'wiretap_ipB',1)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_servers where vc_server='serverA' or vc_server='serverB' "
                    + "delete from t_server_types where vc_server_type='server_typeA' or vc_server_type='server_typeB' "
                    + "delete from t_server_states where vc_server_state='server_stateA' or vc_server_state='server_stateB' "
                    + "delete from t_sites where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_domains where vc_domain='domainA' or vc_domain='domainB' "
                    + "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_environment_interface_overrides_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_environment_interface_overrides, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceA','componentA','nic_roleA','protocolA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceB','componentB','nic_roleB','protocolB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_environment_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_environment_interface_overrides "
                    + "select 'environmentA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',4,'vc_info1A','vc_info2A' "
                    + "union all "
                    + "select 'environmentB','interfaceB',1,2,'vdirB','dbnameB','sharenameB',4,'vc_info1B','vc_info2B' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',4,'vc_info1A','vc_info2A')\n"
                    +"('environmentB','interfaceB',1,2,'vdirB','dbnameB','sharenameB',4,'vc_info1B','vc_info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_environment_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_environment_interface_overrides set vc_info1=vc_info1+'x' "
                    + "where vc_interface='interfaceA' or vc_interface='interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',4,'vc_info1Ax','vc_info2A')\n"
                    +"('environmentB','interfaceB',1,2,'vdirB','dbnameB','sharenameB',4,'vc_info1Bx','vc_info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',4,'vc_info1A','vc_info2A')\n"
                    +"('environmentB','interfaceB',1,2,'vdirB','dbnameB','sharenameB',4,'vc_info1B','vc_info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_environment_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_environment_interface_overrides where vc_interface='interfaceA' or vc_interface='interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',4,'vc_info1Ax','vc_info2A')\n"
                    +"('environmentB','interfaceB',1,2,'vdirB','dbnameB','sharenameB',4,'vc_info1Bx','vc_info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_server_interface_overrides_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_server_interface_overrides, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceA','componentA','nic_roleA','protocolA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceB','componentB','nic_roleB','protocolB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) "
                    + "insert into t_domains (vc_domain) values ('domainA') "
                    + "insert into t_domains (vc_domain) values ('domainB') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentA',1,'domainA') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentB',2,'domainB') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeA') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeB') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateA') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateB') "
                    + "insert into t_servers (vc_environment,vc_server,vc_server_type,i_site_id,vc_server_state, i_server_id) values ('environmentA','serverA','server_typeA',1,'server_stateA',1001) "
                    + "insert into t_servers (vc_environment,vc_server,vc_server_type,i_site_id,vc_server_state, i_server_id) values ('environmentB','serverB','server_typeB',2,'server_stateB',2001) ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_server_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_server_interface_overrides "
                    + "select 'environmentA','serverA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',4,'vc_info1A','vc_info2A' "
                    + "union all "
                    + "select 'environmentB','serverB','interfaceB',1,2,'vdirB','dbnameB','sharenameB',4,'vc_info1B','vc_info2B' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','serverA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',4,'vc_info1A','vc_info2A')\n"
                    +"('environmentB','serverB','interfaceB',1,2,'vdirB','dbnameB','sharenameB',4,'vc_info1B','vc_info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_server_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_server_interface_overrides set vc_info1=vc_info1+'x' "
                    + "where vc_interface='interfaceA' or vc_interface='interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','serverA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',4,'vc_info1Ax','vc_info2A')\n"
                    +"('environmentB','serverB','interfaceB',1,2,'vdirB','dbnameB','sharenameB',4,'vc_info1Bx','vc_info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','serverA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',4,'vc_info1A','vc_info2A')\n"
                    +"('environmentB','serverB','interfaceB',1,2,'vdirB','dbnameB','sharenameB',4,'vc_info1B','vc_info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_server_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_server_interface_overrides where vc_interface='interfaceA' or vc_interface='interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_server_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','serverA','interfaceA',1,2,'vdirA','dbnameA','sharenameA',4,'vc_info1Ax','vc_info2A')\n"
                    +"('environmentB','serverB','interfaceB',1,2,'vdirB','dbnameB','sharenameB',4,'vc_info1Bx','vc_info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "delete from t_servers where vc_server='serverA' or vc_server='serverB' "
                    + "delete from t_server_states where vc_server_state='server_stateA' or vc_server_state='server_stateB' "
                    + "delete from t_server_types where vc_server_type='server_typeA' or vc_server_type='server_typeB' "
                    + "delete from t_sites where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_domains where vc_domain='domainA' or vc_domain='domainB' "
                    + "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_setting_overrides_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_setting_overrides, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit) values ('componentA', 'install_unitA') "
                    + "insert into t_components (vc_component, vc_install_unit) values ('componentB', 'install_unitB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) "
                    + "insert into t_domains (vc_domain) values ('domainA') "
                    + "insert into t_domains (vc_domain) values ('domainB') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentA',1,'domainA') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentB',2,'domainB') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeA') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeB') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateA') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateB') "
                    + "insert into t_servers (vc_environment,vc_server,vc_server_type,i_site_id,vc_server_state, i_server_id) values ('environmentA','serverA','server_typeA',1,'server_stateA',1001) "
                    + "insert into t_servers (vc_environment,vc_server,vc_server_type,i_site_id,vc_server_state, i_server_id) values ('environmentB','serverB','server_typeB',2,'server_stateB',2001) "
                    + "insert into t_settings (vc_setting,vc_value) values ('settingA','valueA') "
                    + "insert into t_settings (vc_setting,vc_value) values ('settingB','valueB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_setting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_setting_overrides "
                    + "select 'environmentA','componentA',1,'serverA','settingA','valueA' "
                    + "union all "
                    + "select 'environmentB','componentB',2,'serverB','settingB','valueB' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_setting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','componentA',1,'serverA','settingA','valueA')\n"
                    +"('environmentB','componentB',2,'serverB','settingB','valueB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_setting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_setting_overrides set vc_value=vc_value+'x' "
                    + "where vc_setting='settingA' or vc_setting='settingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_setting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','componentA',1,'serverA','settingA','valueAx')\n"
                    +"('environmentB','componentB',2,'serverB','settingB','valueBx')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','componentA',1,'serverA','settingA','valueA')\n"
                    +"('environmentB','componentB',2,'serverB','settingB','valueB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_setting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_setting_overrides where vc_setting='settingA' or vc_setting='settingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_setting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','componentA',1,'serverA','settingA','valueAx')\n"
                    +"('environmentB','componentB',2,'serverB','settingB','valueBx')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "delete from t_settings where vc_setting='settingA' or vc_setting='settingB' "
                    + "delete from t_servers where vc_server='serverA' or vc_server='serverB' "
                    + "delete from t_server_states where vc_server_state='server_stateA' or vc_server_state='server_stateB' "
                    + "delete from t_server_types where vc_server_type='server_typeA' or vc_server_type='server_typeB' "
                    + "delete from t_sites where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_domains where vc_domain='domainA' or vc_domain='domainB' "
                    + "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_multisetting_overrides_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_multisetting_overrides, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit) values ('componentA', 'install_unitA') "
                    + "insert into t_components (vc_component, vc_install_unit) values ('componentB', 'install_unitB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) "
                    + "insert into t_domains (vc_domain) values ('domainA') "
                    + "insert into t_domains (vc_domain) values ('domainB') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentA',1,'domainA') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentB',2,'domainB') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeA') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeB') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateA') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateB') "
                    + "insert into t_servers (vc_environment,vc_server,vc_server_type,i_site_id,vc_server_state, i_server_id) values ('environmentA','serverA','server_typeA',1,'server_stateA',1001) "
                    + "insert into t_servers (vc_environment,vc_server,vc_server_type,i_site_id,vc_server_state, i_server_id) values ('environmentB','serverB','server_typeB',2,'server_stateB',2001) "
                    + "insert into t_multisetting_names (vc_multisetting) values ('multisettingA') "
                    + "insert into t_multisetting_names (vc_multisetting) values ('multisettingB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_multisetting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_multisetting_overrides "
                    + "select 'environmentA','componentA',1,'serverA','multisettingA','valueA' "
                    + "union all "
                    + "select 'environmentB','componentB',2,'serverB','multisettingB','valueB' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_multisetting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','componentA',1,'serverA','multisettingA','valueA')\n"
                    +"('environmentB','componentB',2,'serverB','multisettingB','valueB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_multisetting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_multisetting_overrides set vc_value=vc_value+'x' "
                    + "where vc_multisetting='multisettingA' or vc_multisetting='multisettingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_multisetting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','componentA',1,'serverA','multisettingA','valueAx')\n"
                    +"('environmentB','componentB',2,'serverB','multisettingB','valueBx')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','componentA',1,'serverA','multisettingA','valueA')\n"
                    +"('environmentB','componentB',2,'serverB','multisettingB','valueB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_setting_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_multisetting_overrides where vc_multisetting='multisettingA' or vc_multisetting='multisettingB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_multisetting_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','componentA',1,'serverA','multisettingA','valueAx')\n"
                    +"('environmentB','componentB',2,'serverB','multisettingB','valueBx')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "delete from t_multisetting_names where vc_multisetting='multisettingA' or vc_multisetting='multisettingB' "
                    + "delete from t_servers where vc_server='serverA' or vc_server='serverB' "
                    + "delete from t_server_states where vc_server_state='server_stateA' or vc_server_state='server_stateB' "
                    + "delete from t_server_types where vc_server_type='server_typeA' or vc_server_type='server_typeB' "
                    + "delete from t_sites where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_domains where vc_domain='domainA' or vc_domain='domainB' "
                    + "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_site_virtual_interface_ips_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_site_virtual_interface_ips, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit) values ('componentA', 'install_unitA') "
                    + "insert into t_components (vc_component, vc_install_unit) values ('componentB', 'install_unitB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceA','componentA','nic_roleA','protocolA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceB','componentB','nic_roleB','protocolB') "
                    + "insert into t_virtual_interfaces (vc_virtual_interface,vc_interface) values ('virtual_interfaceA','interfaceA') "
                    + "insert into t_virtual_interfaces (vc_virtual_interface,vc_interface) values ('virtual_interfaceB','interfaceB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) "
                    + "insert into t_domains (vc_domain) values ('domainA') "
                    + "insert into t_domains (vc_domain) values ('domainB') "
                    + "insert into t_sites (vc_environment, i_site_id, vc_domain) values ('environmentA',1,'domainA') "
                    + "insert into t_sites (vc_environment, i_site_id, vc_domain) values ('environmentB',1,'domainB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_site_virtual_interface_ips
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_site_virtual_interface_ips "
                    + "select 'environmentA',1,'virtual_interfaceA','ipA' "
                    + "union all "
                    + "select 'environmentB',1,'virtual_interfaceB','ipB' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_site_virtual_interface_ips", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA',1,'virtual_interfaceA','ipA')\n"
                    +"('environmentB',1,'virtual_interfaceB','ipB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_environment_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_site_virtual_interface_ips set vc_ip=vc_ip+'x' "
                    + "where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_site_virtual_interface_ips", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA',1,'virtual_interfaceA','ipAx')\n"
                    +"('environmentB',1,'virtual_interfaceB','ipBx')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA',1,'virtual_interfaceA','ipA')\n"
                    +"('environmentB',1,'virtual_interfaceB','ipB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_environment_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_site_virtual_interface_ips where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_site_virtual_interface_ips", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA',1,'virtual_interfaceA','ipAx')\n"
                    +"('environmentB',1,'virtual_interfaceB','ipBx')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_sites where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_domains where vc_domain='domainA' or vc_domain='domainB' "
                    + "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_virtual_interfaces where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB' "
                    + "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_site_virtual_interface_overrides_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_site_virtual_interface_overrides, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceA','componentA','nic_roleA','protocolA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceB','componentB','nic_roleB','protocolB') "
                    + "insert into t_virtual_interfaces (vc_virtual_interface,vc_interface) values ('virtual_interfaceA','interfaceA') "
                    + "insert into t_virtual_interfaces (vc_virtual_interface,vc_interface) values ('virtual_interfaceB','interfaceB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) "
                    + "insert into t_domains (vc_domain) values ('domainA') "
                    + "insert into t_domains (vc_domain) values ('domainB') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentA',1,'domainA') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentB',2,'domainB') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeA') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeB') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateA') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateB') "
                    + "insert into t_servers (vc_environment,vc_server,vc_server_type,i_site_id,vc_server_state, i_server_id) values ('environmentA','serverA','server_typeA',1,'server_stateA',1001) "
                    + "insert into t_servers (vc_environment,vc_server,vc_server_type,i_site_id,vc_server_state, i_server_id) values ('environmentB','serverB','server_typeB',2,'server_stateB',2001) ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_site_virtual_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_site_virtual_interface_overrides "
                    + "select 'environmentA',1,'virtual_interfaceA',2,3,'vdirA','webstore_appA',4,5,6,'vc_info1A','vc_info2A' "
                    + "union all "
                    + "select 'environmentB',2,'virtual_interfaceB',8,9,'vdirB','webstore_appB',10,11,12,'vc_info1B','vc_info2B' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_site_virtual_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA',1,'virtual_interfaceA',2,3,'vdirA','webstore_appA',4,5,6,'vc_info1A','vc_info2A')\n"
                    +"('environmentB',2,'virtual_interfaceB',8,9,'vdirB','webstore_appB',10,11,12,'vc_info1B','vc_info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_server_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_site_virtual_interface_overrides set vc_info1=vc_info1+'x' "
                    + "where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_site_virtual_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA',1,'virtual_interfaceA',2,3,'vdirA','webstore_appA',4,5,6,'vc_info1Ax','vc_info2A')\n"
                    +"('environmentB',2,'virtual_interfaceB',8,9,'vdirB','webstore_appB',10,11,12,'vc_info1Bx','vc_info2B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA',1,'virtual_interfaceA',2,3,'vdirA','webstore_appA',4,5,6,'vc_info1A','vc_info2A')\n"
                    +"('environmentB',2,'virtual_interfaceB',8,9,'vdirB','webstore_appB',10,11,12,'vc_info1B','vc_info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_server_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_site_virtual_interface_overrides where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_site_virtual_interface_overrides", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA',1,'virtual_interfaceA',2,3,'vdirA','webstore_appA',4,5,6,'vc_info1Ax','vc_info2A')\n"
                    +"('environmentB',2,'virtual_interfaceB',8,9,'vdirB','webstore_appB',10,11,12,'vc_info1Bx','vc_info2B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "delete from t_servers where vc_server='serverA' or vc_server='serverB' "
                    + "delete from t_server_states where vc_server_state='server_stateA' or vc_server_state='server_stateB' "
                    + "delete from t_server_types where vc_server_type='server_typeA' or vc_server_type='server_typeB' "
                    + "delete from t_sites where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_domains where vc_domain='domainA' or vc_domain='domainB' "
                    + "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_virtual_interfaces where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB' "
                    + "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_environment_user_roles_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_environment_user_roles, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_environment_interface_overrides
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_environment_user_roles "
                    + "select 'environmentA','user_roleA','usernameA','passwordA' "
                    + "union all "
                    + "select 'environmentB','user_roleB','usernameB','passwordB' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_user_roles", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','user_roleA','usernameA','passwordA')\n"
                    +"('environmentB','user_roleB','usernameB','passwordB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_environment_user_roles
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_environment_user_roles set vc_username=vc_username+'x' "
                    + "where vc_user_role='user_roleA' or vc_user_role='user_roleB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_user_roles", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','user_roleA','usernameAx','passwordA')\n"
                    +"('environmentB','user_roleB','usernameBx','passwordB')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','user_roleA','usernameA','passwordA')\n"
                    +"('environmentB','user_roleB','usernameB','passwordB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_environment_user_roles
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_environment_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_environment_user_roles", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','user_roleA','usernameAx','passwordA')\n"
                    +"('environmentB','user_roleB','usernameBx','passwordB')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_interface_buckets_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_site_virtual_interface_overrides, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceA','componentA','nic_roleA','protocolA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceB','componentB','nic_roleB','protocolB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) "
                    + "insert into t_domains (vc_domain) values ('domainA') "
                    + "insert into t_domains (vc_domain) values ('domainB') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentA',1,'domainA') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentB',2,'domainB') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeA') "
                    + "insert into t_server_types (vc_server_type) values ('server_typeB') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateA') "
                    + "insert into t_server_states (vc_server_state) values ('server_stateB') "
                    + "insert into t_servers (vc_environment,vc_server,vc_server_type,i_site_id,vc_server_state, i_server_id) values ('environmentA','serverA','server_typeA',1,'server_stateA',1001) "
                    + "insert into t_servers (vc_environment,vc_server,vc_server_type,i_site_id,vc_server_state, i_server_id) values ('environmentB','serverB','server_typeB',2,'server_stateB',2001) ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_interface_buckets
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_interface_buckets "
                    + "select 'environmentA','interfaceA',1,2,'serverA','serverA','2004-10-02 22:00:14','info1A','info2A','info3A','info4A' "
                    + "union all "
                    + "select 'environmentB','interfaceB',3,4,'serverB','serverB','2004-10-02 22:01:00','info1B','info2B','info3B','info4B' ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_interface_buckets", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','interfaceA',1,2,'serverA','serverA',2004-10-02 22:00:14.000,'info1A','info2A','info3A','info4A')\n"
                    +"('environmentB','interfaceB',3,4,'serverB','serverB',2004-10-02 22:01:00.000,'info1B','info2B','info3B','info4B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_interface_buckets
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_interface_buckets set vc_info1=vc_info1+'x' "
                    + "where vc_interface='interfaceA' or vc_interface='interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_interface_buckets", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','interfaceA',1,2,'serverA','serverA',2004-10-02 22:00:14.000,'info1Ax','info2A','info3A','info4A')\n"
                    +"('environmentB','interfaceB',3,4,'serverB','serverB',2004-10-02 22:01:00.000,'info1Bx','info2B','info3B','info4B')\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','interfaceA',1,2,'serverA','serverA',2004-10-02 22:00:14.000,'info1A','info2A','info3A','info4A')\n"
                    +"('environmentB','interfaceB',3,4,'serverB','serverB',2004-10-02 22:01:00.000,'info1B','info2B','info3B','info4B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_interface_buckets
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_interface_buckets where vc_interface='interfaceA' or vc_interface='interfaceB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_interface_buckets", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','interfaceA',1,2,'serverA','serverA',2004-10-02 22:00:14.000,'info1Ax','info2A','info3A','info4A')\n"
                    +"('environmentB','interfaceB',3,4,'serverB','serverB',2004-10-02 22:01:00.000,'info1Bx','info2B','info3B','info4B')\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "delete from t_servers where vc_server='serverA' or vc_server='serverB' "
                    + "delete from t_server_states where vc_server_state='server_stateA' or vc_server_state='server_stateB' "
                    + "delete from t_server_types where vc_server_type='server_typeA' or vc_server_type='server_typeB' "
                    + "delete from t_sites where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_domains where vc_domain='domainA' or vc_domain='domainB' "
                    + "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_xrl_virtual_interface_mappings_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_xrl_virtual_interface_mappings, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceA','componentA','nic_roleA','protocolA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceB','componentB','nic_roleB','protocolB') "
                    + "insert into t_virtual_interfaces (vc_virtual_interface,vc_interface) values ('virtual_interfaceA','interfaceA') "
                    + "insert into t_virtual_interfaces (vc_virtual_interface,vc_interface) values ('virtual_interfaceB','interfaceB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_xrl_virtual_interface_mappings
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_xrl_virtual_interface_mappings "
                    + "select 'xrlA','virtual_interfaceA',1,2,3,4,5,6,7,8,9 "
                    + "union all "
                    + "select 'xrlB','virtual_interfaceB',0,1,2,3,4,5,6,7,8";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_xrl_virtual_interface_mappings", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('xrlA','virtual_interfaceA',1,2,3,4,5,6,7,8,9)\n"
                    +"('xrlB','virtual_interfaceB',0,1,2,3,4,5,6,7,8)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_xrl_virtual_interface_mappings
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_xrl_virtual_interface_mappings set vc_xrl=vc_xrl+'x' "
                    + "where vc_xrl='xrlA' or vc_xrl='xrlB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_xrl_virtual_interface_mappings", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('xrlAx','virtual_interfaceA',1,2,3,4,5,6,7,8,9)\n"
                    +"('xrlBx','virtual_interfaceB',0,1,2,3,4,5,6,7,8)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('xrlA','virtual_interfaceA',1,2,3,4,5,6,7,8,9)\n"
                    +"('xrlB','virtual_interfaceB',0,1,2,3,4,5,6,7,8)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_xrl_virtual_interface_mappings
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_xrl_virtual_interface_mappings where vc_xrl='xrlAx' or vc_xrl='xrlBx'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_xrl_virtual_interface_mappings", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('xrlAx','virtual_interfaceA',1,2,3,4,5,6,7,8,9)\n"
                    +"('xrlBx','virtual_interfaceB',0,1,2,3,4,5,6,7,8)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "delete from t_virtual_interfaces where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB' "
                    + "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_name_resolution_mappings_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // before we can insert rows into t_name_resolution_mappings, we have to setup some
                // other tables that it references
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') "
                    + "insert into t_user_roles (vc_user_role) values ('user_roleB') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleA') "
                    + "insert into t_nic_roles (vc_nic_role) values ('nic_roleB') "
                    + "insert into t_protocols (vc_protocol) values ('protocolA') "
                    + "insert into t_protocols (vc_protocol) values ('protocolB') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitA') "
                    + "insert into t_install_units (vc_install_unit) values ('install_unitB') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentA', 'install_unitA', 'user_roleA') "
                    + "insert into t_components (vc_component, vc_install_unit, vc_user_role) values ('componentB', 'install_unitB', 'user_roleB') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceA','componentA','nic_roleA','protocolA') "
                    + "insert into t_interfaces (vc_interface, vc_component, vc_nic_role, vc_protocol) values ('interfaceB','componentB','nic_roleB','protocolB') "
                    + "insert into t_virtual_interfaces (vc_virtual_interface,vc_interface) values ('virtual_interfaceA','interfaceA') "
                    + "insert into t_virtual_interfaces (vc_virtual_interface,vc_interface) values ('virtual_interfaceB','interfaceB') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeA') "
                    + "insert into t_environment_types (vc_environment_type) values ('environment_typeB') "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentA','environment_typeA',0) "
                    + "insert into t_environments (vc_environment, vc_environment_type, b_current) values ('environmentB','environment_typeB',0) "
                    + "insert into t_domains (vc_domain) values ('domainA') "
                    + "insert into t_domains (vc_domain) values ('domainB') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentA',1,'domainA') "
                    + "insert into t_sites (vc_environment,i_site_id,vc_domain) values ('environmentB',2,'domainB') ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row and get the change id
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_name_resolution_mappings
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_name_resolution_mappings "
                    + "select 'environmentA','domainA','virtual_interfaceA',1,'2004-10-02 22:00:14',3 "
                    + "union all "
                    + "select 'environmentB','domainB','virtual_interfaceB',2,'2004-10-02 22:01:00',4 ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_name_resolution_mappings", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','domainA','virtual_interfaceA',1,2004-10-02 22:00:14.000,3)\n"
                    +"('environmentB','domainB','virtual_interfaceB',2,2004-10-02 22:01:00.000,4)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual("", sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_interface_buckets
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_name_resolution_mappings set i_flags=i_flags+10 "
                    + "where vc_environment='environmentA' or vc_environment='environmentB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_name_resolution_mappings", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('environmentA','domainA','virtual_interfaceA',1,2004-10-02 22:00:14.000,13)\n"
                    +"('environmentB','domainB','virtual_interfaceB',2,2004-10-02 22:01:00.000,14)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','domainA','virtual_interfaceA',1,2004-10-02 22:00:14.000,3)\n"
                    +"('environmentB','domainB','virtual_interfaceB',2,2004-10-02 22:01:00.000,4)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_interface_buckets
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_name_resolution_mappings where vc_environment='environmentA' or vc_environment='environmentB'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_name_resolution_mappings", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('environmentA','domainA','virtual_interfaceA',1,2004-10-02 22:00:14.000,13)\n"
                    +"('environmentB','domainB','virtual_interfaceB',2,2004-10-02 22:01:00.000,14)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // restore the database to the state it was in when we started
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "delete from t_sites where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_domains where vc_domain='domainA' or vc_domain='domainB' "
                    + "delete from t_environments where vc_environment='environmentA' or vc_environment='environmentB' "
                    + "delete from t_environment_types where vc_environment_type='environment_typeA' or vc_environment_type='environment_typeB' "
                    + "delete from t_virtual_interfaces where vc_virtual_interface='virtual_interfaceA' or vc_virtual_interface='virtual_interfaceB' "
                    + "delete from t_interfaces where vc_interface='interfaceA' or vc_interface='interfaceB' "
                    + "delete from t_components where vc_component='componentA' or vc_component='componentB' "
                    + "delete from t_install_units where vc_install_unit='install_unitA' or vc_install_unit='install_unitB' "
                    + "delete from t_protocols where vc_protocol='protocolA' or vc_protocol='protocolB' "
                    + "delete from t_nic_roles where vc_nic_role='nic_roleA' or vc_nic_role='nic_roleB' "
                    + "delete from t_user_roles where vc_user_role='user_roleA' or vc_user_role='user_roleB' ";
                sqlCommand.ExecuteNonQuery();
            }
        }

        [TestCase]
        public void tr_xdelay_settings_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                Int64  changeId1;
                Int64  changeId2;

                cxn.Open();

                // retrieve the latest log row and get the change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                changeId1 = (Int64)sqlDataReader["bi_change_id"];
                sqlDataReader.Close();

                // insert two rows into t_xdelay_settings
                sqlCommand.CommandText 
                    = "insert into t_xdelay_settings "
                    + "select 'dummy_component1',0xFFFF0004,'in',30, 0 "
                    + "union all "
                    + "select 'dummy_component1',0xFFFF0004,'out',60, 0 ";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                DateTime  dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                DateTime dateTime = (DateTime)sqlDataReader["dt_change"];
                TimeSpan deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_xdelay_settings", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('dummy_component1',-65532,'in',30,0)\n"
                    +"('dummy_component1',-65532,'out',60,0)\n",
                    sqlDataReader["nt_inserted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // update two rows in t_live_title_config
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "update t_xdelay_settings "
                    + "set i_title_id=0xFFFF0005 where vc_component='dummy_component1'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);
                changeId1 = changeId2;

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_xdelay_settings", sqlDataReader["vc_table"]);
                Assert.AreEqual(
                    "('dummy_component1',-65531,'in',30,0)\n"
                    +"('dummy_component1',-65531,'out',60,0)\n",
                    sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('dummy_component1',-65532,'in',30)\n"
                    +"('dummy_component1',-65532,'out',60)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // delete two rows in t_xdelay_settings
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_xdelay_settings where vc_component='dummy_component1'";
                sqlCommand.ExecuteNonQuery();

                // retrieve the latest log row, and check the contents
                sqlCommand.CommandText
                    = "select top 1 * from t_config_log order by bi_change_id desc";
                sqlDataReader = sqlCommand.ExecuteReader();
                Assert.AreEqual(true, sqlDataReader.Read());

                // if the row we retrieved matches what we expect, then we know that
                // the bi_change_id column is probably correctly incrementing, since
                // we asked for the row with the highest change id.

                // Get the change id
                changeId2 = (Int64)sqlDataReader["bi_change_id"];
                Assert.AreEqual(changeId1 + 1, changeId2);

                // Get the server time
                dtServer = RemoteTime.GetRemoteDateTime(_npdbServer);

                // we'll consider the datetime to be correct if it is within a second
                // of the current time
                dateTime = (DateTime)sqlDataReader["dt_change"];
                deltaTime = dtServer - dateTime;
                Assert.IsTrue(deltaTime.TotalSeconds < 2);

                Assert.AreEqual(
                    Environment.UserDomainName.ToLower() + "\\" + Environment.UserName.ToLower(),
                    ((string)sqlDataReader["vc_username"]).ToLower());
                Assert.AreEqual("ConfigDevTest", sqlDataReader["vc_appname"]);
                Assert.AreEqual("t_xdelay_settings", sqlDataReader["vc_table"]);
                Assert.AreEqual("", sqlDataReader["nt_inserted"]);
                Assert.AreEqual(
                    "('dummy_component1',-65531,'in',30,0)\n"
                    +"('dummy_component1',-65531,'out',60,0)\n",
                    sqlDataReader["nt_deleted"]);

                // confirm we only retrieved one row, and close the reader
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_latest_change_id_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();

                // get the largest change id
                SqlCommand sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_latest_change_id";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                Int64 biFirst = (Int64)sqlCommand.ExecuteScalar();

                // get the list of tables modified
                sqlCommand.CommandText = "p_config_get_modified_tables";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@bi_change_id", SqlDbType.BigInt).Value = biFirst;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // should be no rows
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // now add a row to an audited table
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_user_roles (vc_user_role) values ('user_roleA') ";
                sqlCommand.ExecuteNonQuery();

                // now the change id should be one larger
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_latest_change_id";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                Int64 biSecond = (Int64)sqlCommand.ExecuteScalar();
                Assert.AreEqual(biFirst+1, biSecond);

                // get the list of tables modified
                sqlCommand.CommandText = "p_config_get_modified_tables";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@bi_change_id", SqlDbType.BigInt).Value = biFirst;
                sqlDataReader = sqlCommand.ExecuteReader();

                // should be one row with t_user_roles
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("t_user_roles", sqlDataReader["vc_table"]);

                // should only be one row
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // add another row to an audited table
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "insert into t_install_units (vc_install_unit) values ('dummy_install_unitA') ";
                sqlCommand.ExecuteNonQuery();

                // now the change id should be one larger
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_latest_change_id";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                Int64 biThird = (Int64)sqlCommand.ExecuteScalar();
                Assert.AreEqual(biSecond+1, biThird);

                // there should be two tables listed as changed now
                sqlCommand.CommandText = "p_config_get_modified_tables";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@bi_change_id", SqlDbType.BigInt).Value = biFirst;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                ArrayList tables = new ArrayList();
                tables.Add(sqlDataReader["vc_table"]);
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                tables.Add(sqlDataReader["vc_table"]);

                // should only be two rows
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // should be t_user_roles and t_install_units in
                // array list now
                Assert.IsTrue(tables.Contains("t_user_roles"));
                Assert.IsTrue(tables.Contains("t_install_units"));

                // remove the rows we added
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText 
                    = "delete t_user_roles where vc_user_role='user_roleA' "
                    + "delete t_install_units where vc_install_unit='dummy_install_unitA' ";
                sqlCommand.ExecuteNonQuery();

                // the change id should've jumped by 2
                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_latest_change_id";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                Int64 biFourth = (Int64)sqlCommand.ExecuteScalar();
                Assert.AreEqual(biThird+2, biFourth);

                // but there should still be only two tables listed as changed since biFirst
                sqlCommand.CommandText = "p_config_get_modified_tables";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@bi_change_id", SqlDbType.BigInt).Value = biFirst;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                tables = new ArrayList();
                tables.Add(sqlDataReader["vc_table"]);
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                tables.Add(sqlDataReader["vc_table"]);

                // should only be two rows
                Assert.AreEqual(false, sqlDataReader.Read());
                sqlDataReader.Close();

                // should be t_user_roles and t_install_units in
                // array list now
                Assert.IsTrue(tables.Contains("t_user_roles"));
                Assert.IsTrue(tables.Contains("t_install_units"));
            }
        }

        [TestCase]
        public void p_config_get_server_list_by_interface_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_list_by_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_server2", sqlDataReader["vc_server"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_list_by_interface_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_list_by_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_server2", sqlDataReader["vc_server"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_list_by_interface_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_list_by_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_list_by_interface_xblob_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_list_by_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_list_by_interface_xblob_test_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_list_by_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // dummy_interface1A supplies all fields
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(30, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1A", sqlDataReader["vc_interface"]);
                Assert.AreEqual("http", sqlDataReader["vc_protocol"]);
                Assert.AreEqual("1.1.1.1", sqlDataReader["vc_ip"]);
                Assert.AreEqual("255.255.255.0", sqlDataReader["vc_ip_netmask"]);
                Assert.AreEqual("1.0.0.1", sqlDataReader["vc_ip_default_gateway"]);
                Assert.AreEqual(1, sqlDataReader["i_port"]);
                Assert.AreEqual(5, sqlDataReader["i_port_end"]);
                Assert.AreEqual("dummy_interface1A_vsite", sqlDataReader["vc_vsite"]);
                Assert.AreEqual(101, sqlDataReader["i_vsite_id"]);
                Assert.AreEqual("dummy_interface1A_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("dummy_interface1A_dbname", sqlDataReader["vc_dbname"]);
                Assert.AreEqual("dummy_interface1A_sharename", sqlDataReader["vc_sharename"]);
                Assert.AreEqual(5, sqlDataReader["i_timeout"]);
                Assert.AreEqual(101, sqlDataReader["i_service_id"]);
                Assert.AreEqual("SERVICE_101", sqlDataReader["vc_service_name"]);
                Assert.AreEqual("01:01:01:01:00:00", sqlDataReader["vc_mac"]);
                Assert.AreEqual("10.0.0.1", sqlDataReader["vc_sg_ip_begin"]);
                Assert.AreEqual("10.0.0.255", sqlDataReader["vc_sg_ip_end"]);
                Assert.AreEqual(101, sqlDataReader["i_sg_port_begin"]);
                Assert.AreEqual(199, sqlDataReader["i_sg_port_end"]);
                Assert.AreEqual(true, (bool)sqlDataReader["b_need_sg_info"]);
                Assert.AreEqual("dummy_interface1A_state_change_url", sqlDataReader["vc_xbox_state_change_notification_url"]);
                Assert.AreEqual("dummy_interface1A_title_change_url", sqlDataReader["vc_title_change_notification_url"]);
                Assert.AreEqual("dummy_interface1A_dead_xbox_url"   , sqlDataReader["vc_dead_xbox_notification_url"]);
                Assert.AreEqual("10.0.10.1", sqlDataReader["vc_wiretap_ip"]);
                Assert.AreEqual(true, (bool)sqlDataReader["b_disabled"]);
                Assert.AreEqual("dummy_username", sqlDataReader["vc_username"]);
                Assert.AreEqual("dummy_password", sqlDataReader["vc_password"]);
                Assert.AreEqual("dummy_interface1A_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_interface1A_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_test_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // dummy_interface1A supplies all fields
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(30, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1A", sqlDataReader["vc_interface"]);
                Assert.AreEqual("http", sqlDataReader["vc_protocol"]);
                Assert.AreEqual("2.1.1.1", sqlDataReader["vc_ip"]);
                Assert.AreEqual("255.255.255.0", sqlDataReader["vc_ip_netmask"]);
                Assert.AreEqual("2.0.0.1", sqlDataReader["vc_ip_default_gateway"]);
                Assert.AreEqual(1, sqlDataReader["i_port"]);
                Assert.AreEqual(5, sqlDataReader["i_port_end"]);
                Assert.AreEqual("dummy_interface1A_vsite", sqlDataReader["vc_vsite"]);
                Assert.AreEqual(101, sqlDataReader["i_vsite_id"]);
                Assert.AreEqual("dummy_interface1A_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("dummy_interface1A_dbname", sqlDataReader["vc_dbname"]);
                Assert.AreEqual("dummy_interface1A_sharename", sqlDataReader["vc_sharename"]);
                Assert.AreEqual(5, sqlDataReader["i_timeout"]);
                Assert.AreEqual(101, sqlDataReader["i_service_id"]);
                Assert.AreEqual("SERVICE_101", sqlDataReader["vc_service_name"]);
                Assert.AreEqual("02:02:02:02:00:00", sqlDataReader["vc_mac"]);
                Assert.AreEqual("20.0.0.1", sqlDataReader["vc_sg_ip_begin"]);
                Assert.AreEqual("20.0.0.255", sqlDataReader["vc_sg_ip_end"]);
                Assert.AreEqual(201, sqlDataReader["i_sg_port_begin"]);
                Assert.AreEqual(299, sqlDataReader["i_sg_port_end"]);
                Assert.AreEqual(true, (bool)sqlDataReader["b_need_sg_info"]);
                Assert.AreEqual("dummy_interface1A_state_change_url", sqlDataReader["vc_xbox_state_change_notification_url"]);
                Assert.AreEqual("dummy_interface1A_title_change_url", sqlDataReader["vc_title_change_notification_url"]);
                Assert.AreEqual("dummy_interface1A_dead_xbox_url"   , sqlDataReader["vc_dead_xbox_notification_url"]);
                Assert.AreEqual("20.0.10.1", sqlDataReader["vc_wiretap_ip"]);
                Assert.AreEqual(true, (bool)sqlDataReader["b_disabled"]);
                Assert.AreEqual("xblob_test_username", sqlDataReader["vc_username"]);
                Assert.AreEqual("xblob_test_password", sqlDataReader["vc_password"]);
                Assert.AreEqual("dummy_interface1A_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_interface1A_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface2A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // dummy_interface2A supplies null wherever allowed
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(30, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2A", sqlDataReader["vc_interface"]);
                Assert.AreEqual("http", sqlDataReader["vc_protocol"]);
                Assert.AreEqual("1.1.1.1", sqlDataReader["vc_ip"]);
                Assert.AreEqual("255.255.255.0", sqlDataReader["vc_ip_netmask"]);
                Assert.AreEqual("1.0.0.1", sqlDataReader["vc_ip_default_gateway"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vsite"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_vsite_id"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dbname"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_sharename"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_service_id"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_service_name"]);
                Assert.AreEqual("01:01:01:01:00:00", sqlDataReader["vc_mac"]);
                Assert.AreEqual("10.0.0.1", sqlDataReader["vc_sg_ip_begin"]);
                Assert.AreEqual("10.0.0.255", sqlDataReader["vc_sg_ip_end"]);
                Assert.AreEqual(101, sqlDataReader["i_sg_port_begin"]);
                Assert.AreEqual(199, sqlDataReader["i_sg_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["b_need_sg_info"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_xbox_state_change_notification_url"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_title_change_notification_url"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dead_xbox_notification_url"]);
                Assert.AreEqual("10.0.10.1", sqlDataReader["vc_wiretap_ip"]);
                Assert.AreEqual(true, (bool)sqlDataReader["b_disabled"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_username"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_password"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_test_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface2A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // dummy_interface2A supplies null wherever allowed
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(30, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2A", sqlDataReader["vc_interface"]);
                Assert.AreEqual("http", sqlDataReader["vc_protocol"]);
                Assert.AreEqual("2.1.1.1", sqlDataReader["vc_ip"]);
                Assert.AreEqual("255.255.255.0", sqlDataReader["vc_ip_netmask"]);
                Assert.AreEqual("2.0.0.1", sqlDataReader["vc_ip_default_gateway"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vsite"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_vsite_id"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dbname"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_sharename"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_service_id"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_service_name"]);
                Assert.AreEqual("02:02:02:02:00:00", sqlDataReader["vc_mac"]);
                Assert.AreEqual("20.0.0.1", sqlDataReader["vc_sg_ip_begin"]);
                Assert.AreEqual("20.0.0.255", sqlDataReader["vc_sg_ip_end"]);
                Assert.AreEqual(201, sqlDataReader["i_sg_port_begin"]);
                Assert.AreEqual(299, sqlDataReader["i_sg_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["b_need_sg_info"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_xbox_state_change_notification_url"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_title_change_notification_url"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dead_xbox_notification_url"]);
                Assert.AreEqual("20.0.10.1", sqlDataReader["vc_wiretap_ip"]);
                Assert.AreEqual(true, (bool)sqlDataReader["b_disabled"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_username"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_password"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_NegNoNic()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_no_nics";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_test_NegNoNic()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_no_nics";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_NegServerOffline()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_offline";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_test_NegServerOffline()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_offline";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_NegServerDraining()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_draining";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_test_NegServerDraining()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_draining";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_NegNoServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "not_a_valid_server";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_test_NegNoServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "not_a_valid_server";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_xblob_test_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_interface_overrides_xblob_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1B";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_port"]);
                Assert.AreEqual(1010, sqlDataReader["i_port_end"]);
                Assert.AreEqual("environment_type_override_1B_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("environment_type_override_1B_dbname", sqlDataReader["vc_dbname"]);
                Assert.AreEqual("environment_type_override_1B_sharename", sqlDataReader["vc_sharename"]);
                Assert.AreEqual(1005, sqlDataReader["i_timeout"]);
                Assert.AreEqual("environment_type_override_1B_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("environment_type_override_1B_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_interface_overrides_xblob_test_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1B";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(2001, sqlDataReader["i_port"]);
                Assert.AreEqual(2010, sqlDataReader["i_port_end"]);
                Assert.AreEqual("xblob_test_environment_type_override_1B_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("xblob_test_environment_type_override_1B_dbname", sqlDataReader["vc_dbname"]);
                Assert.AreEqual("xblob_test_environment_type_override_1B_sharename", sqlDataReader["vc_sharename"]);
                Assert.AreEqual(2005, sqlDataReader["i_timeout"]);
                Assert.AreEqual("xblob_test_environment_type_override_1B_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_environment_type_override_1B_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_interface_overrides_xblob_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1C";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dbname"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_sharename"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_interface_overrides_xblob_test_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1C";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dbname"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_sharename"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_interface_overrides_xblob_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_interface_overrides_xblob_test_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_interface_overrides_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1B";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_interface_overrides_xblob_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_interface_overrides_xblob_test_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_interface_overrides_xblob_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1D";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(1101, sqlDataReader["i_port"]);
                Assert.AreEqual(1110, sqlDataReader["i_port_end"]);
                Assert.AreEqual("environment_override_1D_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("environment_override_1D_dbname", sqlDataReader["vc_dbname"]);
                Assert.AreEqual("environment_override_1D_sharename", sqlDataReader["vc_sharename"]);
                Assert.AreEqual(1105, sqlDataReader["i_timeout"]);
                Assert.AreEqual("environment_override_1D_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("environment_override_1D_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_interface_overrides_xblob_test_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1D";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(2101, sqlDataReader["i_port"]);
                Assert.AreEqual(2110, sqlDataReader["i_port_end"]);
                Assert.AreEqual("xblob_test_environment_override_1D_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("xblob_test_environment_override_1D_dbname", sqlDataReader["vc_dbname"]);
                Assert.AreEqual("xblob_test_environment_override_1D_sharename", sqlDataReader["vc_sharename"]);
                Assert.AreEqual(2105, sqlDataReader["i_timeout"]);
                Assert.AreEqual("xblob_test_environment_override_1D_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_environment_override_1D_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_interface_overrides_xblob_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1E";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dbname"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_sharename"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_interface_overrides_xblob_test_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1E";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dbname"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_sharename"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_interface_overrides_xblob_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1B";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_interface_overrides_xblob_test_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1B";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_interface_overrides_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1D";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_interface_overrides_xblob_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_interface_overrides_xblob_test_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_xblob_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1F";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(1301, sqlDataReader["i_port"]);
                Assert.AreEqual(1310, sqlDataReader["i_port_end"]);
                Assert.AreEqual("server_override_1F_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("server_override_1F_dbname", sqlDataReader["vc_dbname"]);
                Assert.AreEqual("server_override_1F_sharename", sqlDataReader["vc_sharename"]);
                Assert.AreEqual(1205, sqlDataReader["i_timeout"]);
                Assert.AreEqual("server_override_1F_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("server_override_1F_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_xblob_test_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1F";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(2301, sqlDataReader["i_port"]);
                Assert.AreEqual(2310, sqlDataReader["i_port_end"]);
                Assert.AreEqual("xblob_test_server_override_1F_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("xblob_test_server_override_1F_dbname", sqlDataReader["vc_dbname"]);
                Assert.AreEqual("xblob_test_server_override_1F_sharename", sqlDataReader["vc_sharename"]);
                Assert.AreEqual(2205, sqlDataReader["i_timeout"]);
                Assert.AreEqual("xblob_test_server_override_1F_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_server_override_1F_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_xblob_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1G";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dbname"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_sharename"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_xblob_test_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1G";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(8, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dbname"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_sharename"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_xblob_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1D";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_xblob_test_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1D";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1F";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_xblob_NegNoServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "not_a_valid_server";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1F";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_xblob_test_NegNoServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "not_a_valid_server";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface1F";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_xblob_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_interface_overrides_xblob_test_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_list_by_site_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface_list_by_site";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1A", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1B", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1C", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1D", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1E", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2A", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2B", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2C", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2D", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2E", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface5", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_list_by_site_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface_list_by_site";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1A", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1B", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1C", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1D", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1E", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2A", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2B", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2C", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2D", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2E", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface5", sqlDataReader["vc_virtual_interface"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_xblob_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(19, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1A", sqlDataReader["vc_virtual_interface"]);
                Assert.AreEqual("dummy_interface1A", sqlDataReader["vc_interface"]);
                Assert.AreEqual("http", sqlDataReader["vc_protocol"]);
                Assert.AreEqual("10.1.1.1", sqlDataReader["vc_ip"]);
                Assert.AreEqual(6, sqlDataReader["i_port"]);
                Assert.AreEqual(10, sqlDataReader["i_port_end"]);
                Assert.AreEqual("dummy_vinterface1A_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("dummy_vinterface1A_webstore_app", sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(5, sqlDataReader["i_timeout"]);
                Assert.AreEqual(101, sqlDataReader["i_service_id"]);
                Assert.AreEqual("SERVICE_101", sqlDataReader["vc_service_name"]);
                Assert.AreEqual(true, (bool)sqlDataReader["b_need_sg_info"]);
                Assert.AreEqual("dummy_interface1A_state_change_url", sqlDataReader["vc_xbox_state_change_notification_url"]);
                Assert.AreEqual("dummy_interface1A_title_change_url", sqlDataReader["vc_title_change_notification_url"]);
                Assert.AreEqual("dummy_interface1A_dead_xbox_url", sqlDataReader["vc_dead_xbox_notification_url"]);
                Assert.AreEqual(10006, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(10010, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual("dummy_vinterface1A_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_vinterface1A_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_xblob_test_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(19, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface1A", sqlDataReader["vc_virtual_interface"]);
                Assert.AreEqual("dummy_interface1A", sqlDataReader["vc_interface"]);
                Assert.AreEqual("http", sqlDataReader["vc_protocol"]);
                Assert.AreEqual("20.1.1.1", sqlDataReader["vc_ip"]);
                Assert.AreEqual(6, sqlDataReader["i_port"]);
                Assert.AreEqual(10, sqlDataReader["i_port_end"]);
                Assert.AreEqual("dummy_vinterface1A_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("dummy_vinterface1A_webstore_app", sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(5, sqlDataReader["i_timeout"]);
                Assert.AreEqual(101, sqlDataReader["i_service_id"]);
                Assert.AreEqual("SERVICE_101", sqlDataReader["vc_service_name"]);
                Assert.AreEqual(true, (bool)sqlDataReader["b_need_sg_info"]);
                Assert.AreEqual("dummy_interface1A_state_change_url", sqlDataReader["vc_xbox_state_change_notification_url"]);
                Assert.AreEqual("dummy_interface1A_title_change_url", sqlDataReader["vc_title_change_notification_url"]);
                Assert.AreEqual("dummy_interface1A_dead_xbox_url", sqlDataReader["vc_dead_xbox_notification_url"]);
                Assert.AreEqual(10006, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(10010, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual("dummy_vinterface1A_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_vinterface1A_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_xblob_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface2A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(19, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2A", sqlDataReader["vc_virtual_interface"]);
                Assert.AreEqual("dummy_interface2A", sqlDataReader["vc_interface"]);
                Assert.AreEqual("http", sqlDataReader["vc_protocol"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_ip"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_service_id"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_service_name"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["b_need_sg_info"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_xbox_state_change_notification_url"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_title_change_notification_url"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dead_xbox_notification_url"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_xblob_test_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface2A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(19, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_vinterface2A", sqlDataReader["vc_virtual_interface"]);
                Assert.AreEqual("dummy_interface2A", sqlDataReader["vc_interface"]);
                Assert.AreEqual("http", sqlDataReader["vc_protocol"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_ip"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_service_id"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_service_name"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["b_need_sg_info"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_xbox_state_change_notification_url"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_title_change_notification_url"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_dead_xbox_notification_url"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_xblob_NegNoVIP()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1002;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_xblob_test_NegNoVIP()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1002;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_xblob_NegNoVirtualInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "not_a_valid_vinterface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_virtual_interface_xblob_test_NegNoVirtualInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_virtual_interface";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "not_a_valid_vinterface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_virtual_interface_overrides_xblob_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1B";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(9, sqlDataReader.FieldCount);
                Assert.AreEqual(1401, sqlDataReader["i_port"]);
                Assert.AreEqual(1410, sqlDataReader["i_port_end"]);
                Assert.AreEqual("environment_type_override_1B_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("environment_type_override_1B_webstore_app", sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(1305, sqlDataReader["i_timeout"]);
                Assert.AreEqual(11006, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(11010, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual("environment_type_override_1B_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("environment_type_override_1B_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_virtual_interface_overrides_xblob_test_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1B";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(9, sqlDataReader.FieldCount);
                Assert.AreEqual(2401, sqlDataReader["i_port"]);
                Assert.AreEqual(2410, sqlDataReader["i_port_end"]);
                Assert.AreEqual("xblob_test_environment_type_override_1B_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("xblob_test_environment_type_override_1B_webstore_app", sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(2305, sqlDataReader["i_timeout"]);
                Assert.AreEqual(12006, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(12010, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual("xblob_test_environment_type_override_1B_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_environment_type_override_1B_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_virtual_interface_overrides_xblob_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1C";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(9, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_virtual_interface_overrides_xblob_test_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1C";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(9, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_virtual_interface_overrides_xblob_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_virtual_interface_overrides_xblob_test_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1A";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_virtual_interface_overrides_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1B";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_virtual_interface_overrides_xblob_NegNoVirtualInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "not_a_valid_vinterface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_virtual_interface_overrides_xblob_test_NegNoVirtualInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "not_a_valid_vinterface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_site_virtual_interface_overrides_xblob_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_site_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1D";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(9, sqlDataReader.FieldCount);
                Assert.AreEqual(1501, sqlDataReader["i_port"]);
                Assert.AreEqual(1510, sqlDataReader["i_port_end"]);
                Assert.AreEqual("site_override_1D_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("site_override_1D_webstore_app", sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(1405, sqlDataReader["i_timeout"]);
                Assert.AreEqual(21006, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(21010, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual("site_override_1D_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("site_override_1D_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_site_virtual_interface_overrides_xblob_test_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_site_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1D";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(9, sqlDataReader.FieldCount);
                Assert.AreEqual(2501, sqlDataReader["i_port"]);
                Assert.AreEqual(2510, sqlDataReader["i_port_end"]);
                Assert.AreEqual("xblob_test_site_override_1D_vdir", sqlDataReader["vc_vdir"]);
                Assert.AreEqual("xblob_test_site_override_1D_webstore_app", sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(2405, sqlDataReader["i_timeout"]);
                Assert.AreEqual(22006, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(22010, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual("xblob_test_site_override_1D_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_site_override_1D_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_site_virtual_interface_overrides_xblob_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_site_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1E";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(9, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_site_virtual_interface_overrides_xblob_test_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_site_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1E";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(9, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_vdir"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_webstore_app"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_timeout"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["i_internet_port_end"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_site_virtual_interface_overrides_xblob_NegNoOverrides()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_site_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1C";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_site_virtual_interface_overrides_xblob_test_NegNoOverrides()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_site_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "dummy_vinterface1C";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_site_virtual_interface_overrides_xblob_NegNoVirtualInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_site_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "not_a_valid_vinterface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_site_virtual_interface_overrides_xblob_test_NegNoVirtualInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {            
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_site_virtual_interface_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.Int).Value = 1001;
                sqlCommand.Parameters.Add("@vc_virtual_interface", SqlDbType.NVarChar).Value = "not_a_valid_vinterface";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("configunittest_setting1_default_value", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_NegNoSetting()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "not_a_valid_setting";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_setting_override_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_setting_override";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("configunittest_setting2_environment_type_override_value", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_setting_override_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_setting_override";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("xblob_test_configunittest_setting2_environment_type_override_value", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_setting_override_xblob_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_setting_override";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting5";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_setting_override_xblob_test_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_setting_override";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting5";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                // 0 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                // 0 1 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, component dummy_component1", sqlDataReader["vc_value"]);

                // 1 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 1 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                // 1 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                // 1 1 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, server dummy_server1, component dummy_component1", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                // 0 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                // 0 1 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, component dummy_component1", sqlDataReader["vc_value"]);

                // 1 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 1 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                // 1 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                // 1 1 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, server dummy_server1, component dummy_component1", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosSite2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                // 0 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                // 0 1 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, component dummy_component1", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosSite2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                // 0 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                // 0 1 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, component dummy_component1", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosServer2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                // 1 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 1 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosServer2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                // 1 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 1 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosComponent2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                // 1 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 1 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosComponent2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                // 1 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 1 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosSite2Server2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosSite2Server2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosSite2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosSite2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 0 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosServer2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 1 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosServer2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                // 1 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosSite2Server2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosSite2Server2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosExact111()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1011;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server11";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component11";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting11";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 1 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1011, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server11", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component11", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1011, server dummy_server11, component dummy_component11", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosExact111()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1011;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server11";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component11";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting11";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 1 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1011, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server11", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component11", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1011, server dummy_server11, component dummy_component11", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosExact011()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1012;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server12";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component12";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting12";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 1 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server12", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component12", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server12, component dummy_component12", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosExact011()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1012;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server12";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component12";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting12";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 1 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server12", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component12", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server12, component dummy_component12", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosExact101()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1013;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server13";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component13";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting13";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1013, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component13", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1013, ALL servers, component dummy_component13", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosExact101()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1013;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server13";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component13";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting13";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1013, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component13", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1013, ALL servers, component dummy_component13", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosExact110()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1014;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server14";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component14";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting14";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1014, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server14", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1014, server dummy_server14, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosExact110()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1014;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server14";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component14";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting14";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1014, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server14", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1014, server dummy_server14, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosExact001()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1015;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server15";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component15";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting15";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component15", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component15", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosExact001()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1015;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server15";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component15";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting15";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component15", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component15", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosExact010()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1016;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server16";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component16";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting16";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server16", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server16, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosExact010()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1016;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server16";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component16";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting16";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 1 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server16", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server16, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_PosExact100()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1017;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server17";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component17";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting17";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1017, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1017, ALL servers, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_PosExact100()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1017;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server17";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component17";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting17";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 0 0
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1017, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1017, ALL servers, ALL components", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_setting_overrides_xblob_test_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_setting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_setting", SqlDbType.NVarChar).Value = "configunittest_setting2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("configunittest_multisetting1_default_value1", sqlDataReader["vc_value"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("configunittest_multisetting1_default_value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_NegNoSetting()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "not_a_valid_multisetting";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_multisetting_override_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_multisetting_override";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("configunittest_multisetting2_environment_type_override_value1", sqlDataReader["vc_value"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("configunittest_multisetting2_environment_type_override_value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_multisetting_override_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_multisetting_override";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("xblob_test_configunittest_multisetting2_environment_type_override_value1", sqlDataReader["vc_value"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("xblob_test_configunittest_multisetting2_environment_type_override_value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_multisetting_override_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_multisetting_override";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting5";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_environment_type_multisetting_override_xblob_test_NegNoOverride()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_environment_type_multisetting_override";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting5";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                // 0 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 1 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 1 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                // 1 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 1 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                // 1 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 1 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, server dummy_server1, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 1 1 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, server dummy_server1, component dummy_component1 : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                // 0 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 1 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 1 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                // 1 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 1 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                // 1 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 1 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, server dummy_server1, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 1 1 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, server dummy_server1, component dummy_component1 : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosSite2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                // 0 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 1 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 1 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosSite2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                // 0 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 1 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 1 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosServer2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 0 1 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 0 1 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                // 1 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 0 1 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 1 0 1 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosServer2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 0 1 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 0 1 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                // 1 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 0 1 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 1 0 1 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosComponent2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 1 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 1 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 1 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 1 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosComponent2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 1 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 1 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 1 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 1 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosSite2Server2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosSite2Server2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1 : value1", sqlDataReader["vc_value"]);

                // 0 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component1 : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosSite2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosSite2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 0 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server1, ALL components : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosServer2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1001, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosServer2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                // 1 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1001, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosSite2Server2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosSite2Server2Component2()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1002;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server2";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 0 : value1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 0 0 : value2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosExact111()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1011;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server11";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component11";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting11";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 1 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1011, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server11", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component11", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1011, server dummy_server11, component dummy_component11 : value1", sqlDataReader["vc_value"]);

                // 1 1 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1011, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server11", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component11", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1011, server dummy_server11, component dummy_component11 : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosExact111()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1011;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server11";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component11";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting11";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 1 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1011, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server11", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component11", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1011, server dummy_server11, component dummy_component11 : value1", sqlDataReader["vc_value"]);

                // 1 1 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1011, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server11", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component11", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1011, server dummy_server11, component dummy_component11 : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosExact011()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1012;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server12";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component12";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting12";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 1 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server12", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component12", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server12, component dummy_component12 : value1", sqlDataReader["vc_value"]);

                // 0 1 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server12", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component12", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server12, component dummy_component12 : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosExact011()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1012;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server12";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component12";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting12";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 1 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server12", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component12", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server12, component dummy_component12 : value1", sqlDataReader["vc_value"]);

                // 0 1 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server12", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component12", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server12, component dummy_component12 : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosExact101()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1013;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server13";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component13";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting13";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1013, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component13", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1013, ALL servers, component dummy_component13 : value1", sqlDataReader["vc_value"]);

                // 1 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1013, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component13", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1013, ALL servers, component dummy_component13 : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosExact101()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1013;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server13";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component13";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting13";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1013, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component13", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1013, ALL servers, component dummy_component13 : value1", sqlDataReader["vc_value"]);

                // 1 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1013, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component13", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1013, ALL servers, component dummy_component13 : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosExact110()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1014;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server14";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component14";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting14";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1014, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server14", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1014, server dummy_server14, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1014, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server14", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1014, server dummy_server14, ALL components : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosExact110()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1014;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server14";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component14";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting14";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1014, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server14", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1014, server dummy_server14, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1014, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server14", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1014, server dummy_server14, ALL components : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosExact001()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1015;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server15";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component15";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting15";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component15", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component15 : value1", sqlDataReader["vc_value"]);

                // 0 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component15", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, ALL servers, component dummy_component15 : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosExact001()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1015;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server15";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component15";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting15";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 0 1 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component15", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component15 : value1", sqlDataReader["vc_value"]);

                // 0 0 1 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_component15", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, ALL servers, component dummy_component15 : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosExact010()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1016;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server16";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component16";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting16";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server16", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server16, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server16", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("ALL sites, server dummy_server16, ALL components : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosExact010()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1016;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server16";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component16";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting16";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 0 1 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server16", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server16, ALL components : value1", sqlDataReader["vc_value"]);

                // 0 1 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(-1, sqlDataReader["i_site_id"]);
                Assert.AreEqual("dummy_server16", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test ALL sites, server dummy_server16, ALL components : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_PosExact100()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1017;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server17";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component17";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting17";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1017, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1017, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1017, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("site 1017, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_PosExact100()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1017;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server17";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component17";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting17";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                // 1 0 0 : value 1
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1017, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1017, ALL servers, ALL components : value1", sqlDataReader["vc_value"]);

                // 1 0 0 : value 2
                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(1017, sqlDataReader["i_site_id"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_server"]);
                Assert.AreEqual("ALL", sqlDataReader["vc_component"]);
                Assert.AreEqual("xblob_test site 1017, ALL servers, ALL components : value2", sqlDataReader["vc_value"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_Neg()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_multisetting_overrides_xblob_test_Neg()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_multisetting_overrides";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@i_site_id", SqlDbType.NVarChar).Value = 1001;
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                sqlCommand.Parameters.Add("@vc_multisetting", SqlDbType.NVarChar).Value = "configunittest_multisetting2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_install_unit_list_by_server_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_install_unit_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_install_unit1", sqlDataReader["vc_install_unit"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_install_unit2", sqlDataReader["vc_install_unit"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_install_unit_list_by_server_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_install_unit_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_install_unit1", sqlDataReader["vc_install_unit"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_install_unit2", sqlDataReader["vc_install_unit"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_install_unit_list_by_server_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_install_unit_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_install_unit_list_by_server_xblob_NegNoInterfaces()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_install_unit_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_no_interfaces";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_install_unit_list_by_server_xblob_test_NegNoInterfaces()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_install_unit_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_no_interfaces";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_install_unit_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_install_unit";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_install_unit", SqlDbType.NVarChar).Value = "dummy_install_unit1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy1_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy1_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("dummy1_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("dummy1_info4", sqlDataReader["vc_info4"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_install_unit_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_install_unit";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_install_unit", SqlDbType.NVarChar).Value = "dummy_install_unit2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(4, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info3"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info4"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_install_unit_NegNoInstallUnit()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_install_unit";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_install_unit", SqlDbType.NVarChar).Value = "not_an_install_unit";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_list_by_server_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_component2", sqlDataReader["vc_component"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_list_by_server_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_component1", sqlDataReader["vc_component"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_component2", sqlDataReader["vc_component"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_list_by_server_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_list_by_server_xblob_NegNoInterfaces()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_no_interfaces";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_list_by_server_xblob_test_NegNoInterfaces()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_no_interfaces";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_xblob_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(6, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_component1_executable", sqlDataReader["vc_executable"]);
                Assert.AreEqual("installutil", sqlDataReader["vc_installer"]);
                Assert.AreEqual("dummy_username", sqlDataReader["vc_username"]);
                Assert.AreEqual("dummy_password", sqlDataReader["vc_password"]);
                Assert.AreEqual("dummy_component1_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_component1_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_xblob_test_PosNotNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(6, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_component1_executable", sqlDataReader["vc_executable"]);
                Assert.AreEqual("installutil", sqlDataReader["vc_installer"]);
                Assert.AreEqual("xblob_test_username", sqlDataReader["vc_username"]);
                Assert.AreEqual("xblob_test_password", sqlDataReader["vc_password"]);
                Assert.AreEqual("dummy_component1_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_component1_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_xblob_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(6, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_executable"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_installer"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_username"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_password"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_xblob_test_PosNull()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component2";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(6, sqlDataReader.FieldCount);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_executable"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_installer"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_username"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_password"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info1"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_PosNullUserPassword()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "dummy_component1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(6, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_component1_executable", sqlDataReader["vc_executable"]);
                Assert.AreEqual("installutil", sqlDataReader["vc_installer"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_username"]);
                Assert.AreEqual(DBNull.Value, sqlDataReader["vc_password"]);
                Assert.AreEqual("dummy_component1_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_component1_info2", sqlDataReader["vc_info2"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_xblob_NegNoComponent()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "not_a_valid_component";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_component_xblob_test_NegNoComponent()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_component";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_component", SqlDbType.NVarChar).Value = "not_a_valid_component";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_list_by_server_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1A", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1B", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1C", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1D", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1E", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1F", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1G", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2A", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2B", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2C", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2D", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2E", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2F", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2G", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface3A", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface3B", sqlDataReader["vc_interface"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_list_by_server_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1A", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1B", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1C", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1D", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1E", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1F", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface1G", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2A", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2B", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2C", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2D", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2E", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2F", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface2G", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface3A", sqlDataReader["vc_interface"]);

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_interface3B", sqlDataReader["vc_interface"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_list_by_server_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_list_by_server_xblob_NegNoInterfaces()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_no_interfaces";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_list_by_server_xblob_test_NegNoInterfaces()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_list_by_server";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server_no_interfaces";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_current_environment_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_current_environment";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("xblob", sqlDataReader["vc_environment"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_current_environment_Neg()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                // ensure the current state is what we expect
                sqlCommand.CommandText = "p_config_get_current_environment";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("xblob", sqlDataReader["vc_environment"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                // update the database to mark all environments as not current
                sqlCommand.CommandText = "update t_environments set b_current=0";
                sqlCommand.CommandType = CommandType.Text;
                sqlCommand.ExecuteNonQuery();

                // check that no rows are returned
                sqlCommand.CommandText = "p_config_get_current_environment";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                // restore the database to it's original state
                sqlCommand.CommandText = "update t_environments set b_current=1 where vc_environment='xblob'";
                sqlCommand.CommandType = CommandType.Text;
                sqlCommand.ExecuteNonQuery();

                // make sure the database is back
                sqlCommand.CommandText = "p_config_get_current_environment";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(1, sqlDataReader.FieldCount);
                Assert.AreEqual("xblob", sqlDataReader["vc_environment"]);

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_info_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_info";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(6, sqlDataReader.FieldCount);
                Assert.AreEqual("xblob", sqlDataReader["vc_environment"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_server_type1", sqlDataReader["vc_server_type"]);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("online", sqlDataReader["vc_server_state"]);
                Assert.AreEqual(100199001, sqlDataReader["i_server_id"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_info_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_info";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(6, sqlDataReader.FieldCount);
                Assert.AreEqual("xblob_test", sqlDataReader["vc_environment"]);
                Assert.AreEqual("dummy_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_server_type1", sqlDataReader["vc_server_type"]);
                Assert.AreEqual(1001, sqlDataReader["i_site_id"]);
                Assert.AreEqual("online", sqlDataReader["vc_server_state"]);
                Assert.AreEqual(200199001, sqlDataReader["i_server_id"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_info_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_info";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "dummy_server1";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_info_xblob_NegNoServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_info";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "not_a_valid_server";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_server_info_xblob_test_NegNoServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_server_info";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_server", SqlDbType.NVarChar).Value = "not_a_valid_server";
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_partition_count_xblob_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_partition_count";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add(new SqlParameter("@i_num_buckets", 0));
                sqlCommand.Parameters[2].SqlDbType = SqlDbType.Int;
                sqlCommand.Parameters[2].Direction = ParameterDirection.Output;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(5, sqlCommand.Parameters[2].Value);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_partition_count_xblob_test_Pos()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_partition_count";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add(new SqlParameter("@i_num_buckets", 0));
                sqlCommand.Parameters[2].SqlDbType = SqlDbType.Int;
                sqlCommand.Parameters[2].Direction = ParameterDirection.Output;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(5, sqlCommand.Parameters[2].Value);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_partition_count_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_partition_count";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add(new SqlParameter("@i_num_buckets", 0));
                sqlCommand.Parameters[2].SqlDbType = SqlDbType.Int;
                sqlCommand.Parameters[2].Direction = ParameterDirection.Output;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(DBNull.Value, sqlCommand.Parameters[2].Value);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_partition_count_xblob_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_partition_count";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_server";
                sqlCommand.Parameters.Add(new SqlParameter("@i_num_buckets", 0));
                sqlCommand.Parameters[2].SqlDbType = SqlDbType.Int;
                sqlCommand.Parameters[2].Direction = ParameterDirection.Output;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(DBNull.Value, sqlCommand.Parameters[2].Value);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_partition_count_xblob_test_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_partition_count";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_server";
                sqlCommand.Parameters.Add(new SqlParameter("@i_num_buckets", 0));
                sqlCommand.Parameters[2].SqlDbType = SqlDbType.Int;
                sqlCommand.Parameters[2].Direction = ParameterDirection.Output;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(DBNull.Value, sqlCommand.Parameters[2].Value);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_PosCurrentServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("dummy_bucket1_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_bucket1_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("dummy_bucket1_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("dummy_bucket1_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_test_PosCurrentServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2222, 2, 2, 2, 22, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("xblob_test_dummy_bucket1_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_dummy_bucket1_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("xblob_test_dummy_bucket1_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("xblob_test_dummy_bucket1_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_PosTitleCurrentServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 1234;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 1;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server2", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server2", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("dummy_bucket2_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_bucket2_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("dummy_bucket2_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("dummy_bucket2_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_test_PosTitleCurrentServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 1234;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 1;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server2", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server2", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2222, 2, 2, 2, 22, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("xblob_test_dummy_bucket2_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_dummy_bucket2_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("xblob_test_dummy_bucket2_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("xblob_test_dummy_bucket2_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_PosNextServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 3;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server4", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("dummy_bucket4_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_bucket4_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("dummy_bucket4_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("dummy_bucket4_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_test_PosNextServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 3;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server4", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2222, 2, 2, 2, 22, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("xblob_test_dummy_bucket4_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_dummy_bucket4_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("xblob_test_dummy_bucket4_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("xblob_test_dummy_bucket4_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_PosTitleNextServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 1234;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 4;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server2", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server5", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("dummy_bucket5_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_bucket5_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("dummy_bucket5_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("dummy_bucket5_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_test_PosTitleNextServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 1234;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 4;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server2", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server5", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2222, 2, 2, 2, 22, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("xblob_test_dummy_bucket5_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_dummy_bucket5_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("xblob_test_dummy_bucket5_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("xblob_test_dummy_bucket5_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_test_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_NegNoTitleId()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = -1;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_test_NegNoTitleId()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = -1;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_NegNoBucket()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = -1;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_get_interface_bucket_xblob_test_NegNoBucket()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = -1;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_PosCurrentServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("dummy_bucket1_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_bucket1_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("dummy_bucket1_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("dummy_bucket1_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_test_PosCurrentServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2222, 2, 2, 2, 22, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("xblob_test_dummy_bucket1_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_dummy_bucket1_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("xblob_test_dummy_bucket1_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("xblob_test_dummy_bucket1_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_PosTitleCurrentServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 1234;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 1;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("dummy_bucket1_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_bucket1_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("dummy_bucket1_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("dummy_bucket1_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_test_PosTitleCurrentServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 1234;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 1;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server1", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2222, 2, 2, 2, 22, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("xblob_test_dummy_bucket1_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_dummy_bucket1_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("xblob_test_dummy_bucket1_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("xblob_test_dummy_bucket1_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_PosNextServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 3;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 3;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server4", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server4", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("dummy_bucket4_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_bucket4_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("dummy_bucket4_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("dummy_bucket4_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_test_PosNextServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 3;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 3;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server4", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server4", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2222, 2, 2, 2, 22, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("xblob_test_dummy_bucket4_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_dummy_bucket4_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("xblob_test_dummy_bucket4_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("xblob_test_dummy_bucket4_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_PosTitleNextServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 1234;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 4;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 1234;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 4;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server5", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server5", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2111, 1, 1, 1, 11, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("dummy_bucket5_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("dummy_bucket5_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("dummy_bucket5_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("dummy_bucket5_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_test_PosTitleNextServer()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 1234;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 4;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();

                sqlCommand = cxn.CreateCommand();
                sqlCommand.CommandText = "p_config_get_interface_bucket";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 1234;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 4;
                sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(true, sqlDataReader.Read());
                Assert.AreEqual(7, sqlDataReader.FieldCount);
                Assert.AreEqual("dummy_bucket_server5", sqlDataReader["vc_server"]);
                Assert.AreEqual("dummy_bucket_server5", sqlDataReader["vc_next_server"]);
                DateTime dateTime1 = (DateTime)sqlDataReader["dt_migration_start"];
                DateTime dateTime2 = new DateTime(2222, 2, 2, 2, 22, 0, 0);
                Assert.IsTrue(0 == DateTime.Compare(dateTime1, dateTime2));
                Assert.AreEqual("xblob_test_dummy_bucket5_info1", sqlDataReader["vc_info1"]);
                Assert.AreEqual("xblob_test_dummy_bucket5_info2", sqlDataReader["vc_info2"]);
                Assert.AreEqual("xblob_test_dummy_bucket5_info3", sqlDataReader["vc_info3"]);
                Assert.AreEqual("xblob_test_dummy_bucket5_info4", sqlDataReader["vc_info4"]);
                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_NegNoEnvironment()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "not_a_valid_environment";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_test_NegNoInterface()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "not_a_valid_interface";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_NegNoTitle()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = -1;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_test_NegNoTitle()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = -1;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = 0;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_NegNoBucket()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = -1;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }

        [TestCase]
        public void p_config_complete_bucket_migration_xblob_test_NegNoBucket()
        {
            CheckReady();

            using (SqlConnection cxn = new SqlConnection(_npdbConnectionString))
            {
                cxn.Open();
                SqlCommand sqlCommand = cxn.CreateCommand();

                sqlCommand.CommandText = "p_config_complete_bucket_migration";
                sqlCommand.CommandType = CommandType.StoredProcedure;
                sqlCommand.Parameters.Add("@vc_environment", SqlDbType.NVarChar).Value = "xblob_test";
                sqlCommand.Parameters.Add("@vc_interface", SqlDbType.NVarChar).Value = "dummy_interface4";
                sqlCommand.Parameters.Add("@i_title_id", SqlDbType.Int).Value = 0;
                sqlCommand.Parameters.Add("@i_bucket", SqlDbType.Int).Value = -1;
                SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                Assert.AreEqual(false, sqlDataReader.Read());

                sqlDataReader.Close();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\statemachine\statemachinetests.cs ===
using System;
using System.Collections.Generic;
using System.Linq;

using ServerTestFramework;

using xonline.common.statemachine;

namespace xonline.common.test.statemachine
{
    [TestGroup, DVT, Description("Tests the transition and error state logic of the statemachine")]
    public class StateMachineTests : TestNode
    {
        class TestContext<TEnum> : Context
        {
            public TEnum CurrentState
            {
                get
                {
                    return (TEnum)Enum.Parse(typeof(TEnum), CurrentStateName);
                }

                set
                {
                    CurrentStateName = value.ToString();
                }
            }
        }

        class TestAuditor : IStateMachineAuditor
        {
            public List<KeyValuePair<string, string>> stateAudits = new List<KeyValuePair<string, string>>();

            public void AuditStateResult(State state, Context context, IActionResult result)
            {
                stateAudits.Add(new KeyValuePair<string, string>(state.StateName, result.EventRaised));
            }
        }

        enum TransitionStates
        {
            Initial,
            Middle,
            Middle2,
            End
        }

        [TestCase, Description("Mainline single transition confirm case")]
        public void SingleTransition()
        {
            TestStateMachineFactory<TransitionStates> sm = new TestStateMachineFactory<TransitionStates>();
            sm.EnableTransition(TransitionStates.Initial, TransitionStates.End);

            var validStateSequence = new List<TransitionStates>
            {
                TransitionStates.Initial,
                TransitionStates.End
            };

            ExecuteAndValidate(sm, TransitionStates.Initial, validStateSequence);
        }

        [TestCase, Description("Mainline multiple transition confirm case")]
        public void MultipleTransition()
        {
            TestStateMachineFactory<TransitionStates> sm = new TestStateMachineFactory<TransitionStates>();
            sm.EnableTransition(TransitionStates.Initial, TransitionStates.Middle);
            sm.EnableTransition(TransitionStates.Middle, TransitionStates.End);

            var validStateSequence = new List<TransitionStates>
            {
                TransitionStates.Initial,
                TransitionStates.Middle,
                TransitionStates.End
            };

            ExecuteAndValidate(sm, TransitionStates.Initial, validStateSequence);
        }

        [TestCase, Description("Mainline multiple transition confirm case")]
        public void DivergentTransitions()
        {
            TestStateMachineFactory<TransitionStates> sm = new TestStateMachineFactory<TransitionStates>();

            State.ActionDelegate newAction = TestStateMachineFactory<TransitionStates>.GenerateAction(TransitionStates.Initial, "OnGotoMiddle2");
            sm.UpdateState(TransitionStates.Initial, newAction);

            sm.EnableTransition(TransitionStates.Initial, TransitionStates.Middle);
            sm.EnableTransition(TransitionStates.Initial, "OnGotoMiddle2", TransitionStates.Middle2);
            sm.EnableTransition(TransitionStates.Middle2, TransitionStates.End);

            var validStateSequence = new List<TransitionStates>
            {
                TransitionStates.Initial,
                TransitionStates.Middle2,
                TransitionStates.End
            };

            ExecuteAndValidate(sm, TransitionStates.Initial, validStateSequence);
        }

        [TestCase, Description("Negative: Starting state machine with an invalid start state")]
        public void NegInvalidStartState()
        {
            TestStateMachineFactory<TransitionStates> sm = new TestStateMachineFactory<TransitionStates>();
            sm.EnableTransition(TransitionStates.Initial, TransitionStates.End);

            TestAuditor auditor = new TestAuditor();
            TestContext<TransitionStates> ctx = new TestContext<TransitionStates>();
            ctx.CurrentStateName = "SomeState";

            StateManager mgr = null;
            try
            {
                mgr = new StateManager(sm.smInfo, auditor, ctx);

                // This should be unreachable considering the starting state is invalid.
                throw new Exception("Failed to stop invalid start state from initializing the machine");
            }
            catch (InvalidOperationException)
            {
                // Expected exception
            }
        }

        [TestCase, Description("Negative: Missing transition from state machine")]
        public void NegInvalidTransition()
        {
            TestStateMachineFactory<TransitionStates> sm = new TestStateMachineFactory<TransitionStates>();

            // Define the only transition supported, which does not include the initial state
            sm.EnableTransition(TransitionStates.Middle, TransitionStates.End);


            TestAuditor auditor = new TestAuditor();
            TestContext<TransitionStates> ctx = new TestContext<TransitionStates>();
            ctx.CurrentState = TransitionStates.Initial;

            StateManager mgr = new StateManager(sm.smInfo, auditor, ctx);
            try
            {
                mgr.StartExecution();

                // This should be unreachable, because the transition should cause an exception
                throw new Exception("Failed to stop invalid transition in state machine");
            }
            catch (InvalidOperationException)
            {
                // Expected exception
            }
        }

        private static void ExecuteAndValidate(TestStateMachineFactory<TransitionStates> sm, TransitionStates initialState, List<TransitionStates> validStateSequence)
        {
            TestAuditor auditor = new TestAuditor();
            
            TestContext<TransitionStates> ctx = new TestContext<TransitionStates>();
            ctx.CurrentState = initialState;

            StateManager mgr = new StateManager(sm.smInfo, auditor, ctx);

            mgr.StartExecution();

            

            if (ctx.CurrentState != TransitionStates.End || !ValidateTransitions(auditor, validStateSequence))
            {
                string msg = String.Format("Validation Failed: FinalState={0}, States={1}\nExpected:{2}",
                                    ctx.CurrentStateName,
                                    String.Join(", ", auditor.stateAudits.Select(p => p.Key).ToArray()),
                                    String.Join(", ", validStateSequence.Select(e => e.ToString()).ToArray()));
                throw new Exception(msg);
            }
        }

        private static bool ValidateTransitions<TEnum>(TestAuditor auditor, IEnumerable<TEnum> expectedStates)
        {
            return ValidateTransitions(auditor, expectedStates.Select(e => e.ToString()));
        }

        private static bool ValidateTransitions(TestAuditor auditor, IEnumerable<string> expectedStates)
        {
            return auditor.stateAudits.Select(p => p.Key).SequenceEqual(expectedStates);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\sql\FuncWsClient.cs ===
using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Security.Cryptography;
using ServerTestFramework;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.puidmgr;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.common.user;
using xonline.common.utilities;

namespace BasicTest
{
    /// <summary>
    /// This whole testGroup is a DVT test, which means any testCase in
    /// this group is a DVT testCase even though they don't have a DVT
    /// attribute associated with it
    /// </summary>
    [TestGroup, DVT]
    public class FuncSimpleGroup : TestNode
    {
        internal static RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
        internal static byte[] GetRandomBytes(uint len)
        {
            byte[] ret = new byte[len];
            rng.GetBytes(ret);
            return ret;
        }

        [TestCase, Description("TransactionBasicTest")]
        class TransactionBasicTest : TestBase
        {
            protected override void Execute()
            {
                // get a noun from the list in UODB
                NounList nounList = NounList.CreateInstance(103);
                string noun = nounList.RandomItem();

                // get an adjective from the list in UODB
                AdjectiveList adjList = AdjectiveList.CreateInstance(103);
                string adjective = adjList.RandomItem();

                // try updating the noun in each of the partitions
                using (WstConnection c = new WstConnection(ConfigUtil.UodbWebstoreApp))
                {
                    c.Open();

                    WSClient[] cmds = new WSClient[c.SqlPartitions.Count];
                    for (int i=0; i < cmds.Length; i++)
                    {
                        cmds[i] = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE);
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.PhysicalPartition = i;
                        ws.BeginTransaction();
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        uint hr;
                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_nouns";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@noun", noun);
                        ws.AddParameter("@add_or_remove", 0);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");

                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_nouns";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@noun", noun);
                        ws.AddParameter("@add_or_remove", 1);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.CommitTransaction();
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.PhysicalPartition = i;
                        ws.BeginTransaction();
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        uint hr;
                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_adjectives";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@adjective", adjective);
                        ws.AddParameter("@add_or_remove", 0);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");

                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_adjectives";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@adjective", adjective);
                        ws.AddParameter("@add_or_remove", 1);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.CommitTransaction();
                    }

                    // test the rollback
                    noun = nounList.RandomItem();

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.PhysicalPartition = i;
                        ws.BeginTransaction();
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        uint hr;
                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_nouns";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@noun", noun);
                        ws.AddParameter("@add_or_remove", 0);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");

                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_nouns";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@noun", noun);
                        ws.AddParameter("@add_or_remove", 1);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.RollbackTransaction();
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("TransactionRollbackTest")]
        class TransactionRollbackTest : TestBase
        {
            protected override void Execute()
            {
                // get a noun from the list in UODB
                NounList nounList = NounList.CreateInstance(103);
                string noun = nounList.RandomItem();

                // get an adjective from the list in UODB
                AdjectiveList adjList = AdjectiveList.CreateInstance(103);
                string adjective = adjList.RandomItem();

                // try updating the noun in each of the partitions
                using (WstConnection c = new WstConnection(ConfigUtil.UodbWebstoreApp))
                {
                    c.Open();

                    WSClient[] cmds = new WSClient[c.SqlPartitions.Count];
                    for (int i=0; i < cmds.Length; i++)
                    {
                        cmds[i] = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE);
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.PhysicalPartition = i;
                        ws.BeginTransaction();
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        uint hr;
                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_nouns";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@noun", noun);
                        ws.AddParameter("@add_or_remove", 0);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");

                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_nouns";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@noun", noun);
                        ws.AddParameter("@add_or_remove", 1);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.RollbackTransaction();
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("MultiTransactionTest")]
        class MultiTransactionTest : TestBase
        {
            protected override void Execute()
            {
                // get a noun from the list in UODB
                NounList nounList = NounList.CreateInstance(103);
                string noun = nounList.RandomItem();

                // get an adjective from the list in UODB
                AdjectiveList adjList = AdjectiveList.CreateInstance(103);
                string adjective = adjList.RandomItem();

                // try updating the noun in each of the partitions
                using (WstConnection c = new WstConnection(ConfigUtil.UodbWebstoreApp))
                {
                    c.Open();

                    WSClient[] cmds = new WSClient[c.SqlPartitions.Count];
                    for (int i=0; i < cmds.Length; i++)
                    {
                        cmds[i] = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE);
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.PhysicalPartition = i;
                        ws.BeginTransaction();
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        uint hr;
                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_nouns";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@noun", noun);
                        ws.AddParameter("@add_or_remove", 0);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");

                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_nouns";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@noun", noun);
                        ws.AddParameter("@add_or_remove", 1);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.CommitTransaction();
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.PhysicalPartition = i;
                        ws.BeginTransaction();
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        uint hr;
                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_adjectives";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@adjective", adjective);
                        ws.AddParameter("@add_or_remove", 0);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");

                        ws.ClearParameters();
                        ws.StoredProc = "dbo.p_xuacs_adjectives";
                        ws.PhysicalPartition = i;
                        ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                        ws.AddParameter("@country_id", 103);
                        ws.AddParameter("@adjective", adjective);
                        ws.AddParameter("@add_or_remove", 1);
                        ws.ExecuteNonQuery();
                        hr = (uint) ws.GetIntParameter("@hr");
                    }

                    for (int i=0; i < cmds.Length; i++)
                    {
                        WSClient ws = cmds[i];
                        ws.CommitTransaction();
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("NegNestedBeginTransaction")]
        class NegNestedBeginTransaction : TestBase
        {
            protected override void Execute()
            {
                WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE);
                ws.BeginTransaction();

                try
                {
                    ws.BeginTransaction();
                }
                catch (Exception)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("NegNestedCommitTransaction")]
        class NegNestedCommitTransaction : TestBase
        {
            protected override void Execute()
            {
                WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE);

                ws.BeginTransaction();

                // get a noun from the list in UODB
                NounList nounList = NounList.CreateInstance(103);
                string noun = nounList.RandomItem();

                uint hr;
                ws.ClearParameters();
                ws.StoredProc = "dbo.p_xuacs_nouns";
                ws.PhysicalPartition = WstCommand.AnyPartition;
                ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                ws.AddParameter("@country_id", 103);
                ws.AddParameter("@noun", noun);
                ws.AddParameter("@add_or_remove", 0);
                ws.ExecuteNonQuery();
                hr = (uint) ws.GetIntParameter("@hr");

                ws.CommitTransaction();

                try
                {
                    ws.CommitTransaction();
                }
                catch (Exception)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("NegNestedRollbackTransaction")]
        class NegNestedRollbackTransaction : TestBase
        {
            protected override void Execute()
            {
                WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE);

                ws.BeginTransaction();

                // get a noun from the list in UODB
                NounList nounList = NounList.CreateInstance(103);
                string noun = nounList.RandomItem();

                uint hr;
                ws.ClearParameters();
                ws.StoredProc = "dbo.p_xuacs_nouns";
                ws.PhysicalPartition = WstCommand.AnyPartition;
                ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                ws.AddParameter("@country_id", 103);
                ws.AddParameter("@noun", noun);
                ws.AddParameter("@add_or_remove", 0);
                ws.ExecuteNonQuery();
                hr = (uint) ws.GetIntParameter("@hr");

                ws.RollbackTransaction();

                try
                {
                    ws.CommitTransaction();
                }
                catch (Exception)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("NegCommitRollbackTransaction")]
        class NegCommitRollbackTransaction : TestBase
        {
            protected override void Execute()
            {
                WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE);

                ws.BeginTransaction();

                // get a noun from the list in UODB
                NounList nounList = NounList.CreateInstance(103);
                string noun = nounList.RandomItem();

                uint hr;
                ws.ClearParameters();
                ws.StoredProc = "dbo.p_xuacs_nouns";
                ws.PhysicalPartition = WstCommand.AnyPartition;
                ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                ws.AddParameter("@country_id", 103);
                ws.AddParameter("@noun", noun);
                ws.AddParameter("@add_or_remove", 0);
                ws.ExecuteNonQuery();
                hr = (uint) ws.GetIntParameter("@hr");

                ws.CommitTransaction();

                try
                {
                    ws.RollbackTransaction();
                }
                catch (Exception)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("NegRollbackCommitTransaction")]
        class NegRollbackCommitTransaction : TestBase
        {
            protected override void Execute()
            {
                WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE);

                ws.BeginTransaction();

                // get a noun from the list in UODB
                NounList nounList = NounList.CreateInstance(103);
                string noun = nounList.RandomItem();

                uint hr;
                ws.ClearParameters();
                ws.StoredProc = "dbo.p_xuacs_nouns";
                ws.PhysicalPartition = WstCommand.AnyPartition;
                ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                ws.AddParameter("@country_id", 103);
                ws.AddParameter("@noun", noun);
                ws.AddParameter("@add_or_remove", 0);
                ws.ExecuteNonQuery();
                hr = (uint) ws.GetIntParameter("@hr");

                ws.RollbackTransaction();

                try
                {
                    ws.CommitTransaction();
                }
                catch (Exception)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\DeActivatorTest.cs ===
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Xml.Serialization;

//using NUnit.Framework;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.billing;
using xonline.tools.framework;


namespace xonline.common.test.tools
{

    // This file is organzed as follows:
    // - DeActivatorProcessHashTest -> end to end tests for the *hashonly* case 
    // - Tests of Hash And User are more difficult, so I broke them up:
    // - DeActivatorDecisionTest_HashandUser --> tests just the decision logic
    // - DeActivatorActionTest_HashandUser --> tests just the action logic


    //==============================================================================
    //ProcessHash tests of ( voucher, hashonly, reportonly ) where hashonly == true

    public class DeActivatorProcessHashTest : TestNode
    {

        public const string testVoucherString = "K45KQ-63L1B-B6W9J-A2VDL-4FDS0";
        // [SetUp]
        public void DeActivatorProcessHashTestSetup()
        {
            Console.WriteLine("======================================================================");
        }


        //====================================================
        //1.    Account Does not matter - DeactivateHash
        //====================================================
        //1.1   voucher, hashonly-true, reportonly-true
        //1.2   voucher, hashonly-true, reportonly-false ( )
        //1.3   voucher + use, hashonly-true, reportonly-true (batch deactivate hash prep)
        //1.4   voucher + use, hashonly-true, reportonly-false (batch deactivate hash)

        //test voucher not present
        //[ExpectedException( typeof( VoucherNotFoundException ) )]    
        [Test]
        public void VoucherNotPresent()
        {

            Console.WriteLine("In VoucherNotPresent " + testVoucherString );

            ActionDecision action = ActionDecision.NoAction;
            // call process hash with non-existent hash
            ProcessingResult result = DeActivator.ProcessHash( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ), true, true, out action );
            if ( result != ProcessingResult.VoucherNotFound )
            {
                throw new Exception("Did not detect Voucher not found!");
            }

            VoucherTest.DeleteTestVoucherAndUses( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ) );            

        }


        //test voucher is invalid (we'll get garbage sometimes... can we handle it?)
        // call process hash with an invalid hash
        // [ExpectedException( typeof( ArgumentException ) )]    
        [Test]
        public void VoucherNotValid()
        {
            bool success = false;
            ActionDecision action = ActionDecision.NoAction;

            Console.WriteLine("In VoucherNotValid " + testVoucherString );
            try 
            {
                DeActivator.ProcessHash( VoucherUtil2.SubcodeStringToHashByte( testVoucherString.Substring(0,24) ), true, true, out action );
            }
            catch (ArgumentException)
            {
                success = true;
                Console.WriteLine( "Success!! " );
            }

            if ( !success )
            {
                throw new Exception("Argument Exception Expected but did not occur!");
            }

            VoucherTest.DeleteTestVoucherAndUses( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ) );            
        }


        //1.1 test voucher, no users, reportonly
        [Test]
        public void VoucherNoUserReportOnly()
        {

            Console.WriteLine( "In VoucherNoUserReportOnly" );
            //create a voucher
            Voucher v = Voucher.Create( testVoucherString );

            //add an offer
            v.AddOffer( VoucherTest.testOffer1, 0, Voucher.VoucherStatusActiveByte );

            //save
            v.Save();

            ActionDecision action = ActionDecision.NoAction;

            //call process hash, should result in Deactivate decision, NoAction result
            ProcessingResult result = DeActivator.ProcessHash( v.voucherhash, true, true, out action );
            if ( ( result != ProcessingResult.NoAction ) || ( action != ActionDecision.DeactivateHash ) )
            {
                Console.WriteLine("Error:  Processing result was " + result + " and Decision was " + action );
                throw new Exception( "Voucher changed in ReadOnly mode!" );
            }

            //load voucher
            Voucher v2 = Voucher.Load( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ) );
            Console.WriteLine( "\r\nbefore:\r\n " + v.ToString() + "\r\n  After \r\n " + v2.ToString() );

            //confirm the voucher remains active
            foreach ( VoucherOffer vo in v2.VoucherOffers )
            {
                if ( vo.status != Voucher.VoucherStatusActiveByte )
                {
                    throw new Exception( "Voucher changed in REPORT ONLY mode." );
                }
            }

            VoucherTest.DeleteTestVoucherAndUses( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ) );            
        }


        //1.2 test voucher, no users, !reportonly
        [Test]
        public void VoucherNoUsers()
        {

            Console.WriteLine( "In VoucherNoUsers" );

            //create a voucher
            Voucher v = Voucher.Create( testVoucherString );

            //add offers
            v.AddOffer( VoucherTest.testOffer1, 0, Voucher.VoucherStatusActiveByte );
            v.AddOffer( VoucherTest.testOffer2, 0, Voucher.VoucherStatusActiveByte );

            //save
            v.Save();

            ActionDecision action = ActionDecision.NoAction;

            //call process hash
            ProcessingResult result = DeActivator.ProcessHash( v.voucherhash, true, false, out action );
            Debug.Assert( result == ProcessingResult.VoucherDisabled );
            Debug.Assert( action == ActionDecision.DeactivateHash );

            //load voucher
            Voucher v2 = Voucher.Load( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ) );

            Console.WriteLine( "\r\nbefore:\r\n " + v.ToString() + "\r\n  After \r\n " + v2.ToString() );
            //confirm the voucheroffers are disabled 
            foreach ( VoucherOffer vo in v2.VoucherOffers )
            {
                Debug.Assert( vo.status == Voucher.VoucherStatusDisabledByte );
            }

            VoucherTest.DeleteTestVoucherAndUses( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ) );            

        }


        //1.3 test voucher, single user, reportonly
        [Test]
        public void VoucherUsersReportOnly()
        {
            Console.WriteLine( "In VoucherUsersReportOnly" );

            //create a voucher
            Voucher v = Voucher.Create( testVoucherString );

            //add an offer, and a use
            v.AddOffer( VoucherTest.testOffer1, 1, Voucher.VoucherStatusActiveByte );
            v.Save();

            v.AddUse( VoucherTest.testPUID, System.DateTime.UtcNow );

            ActionDecision action = ActionDecision.NoAction;

            //call process hash
            ProcessingResult result = DeActivator.ProcessHash( v.voucherhash, true, true, out action );

            //a used voucher should remain untouched in voucher(hash)-only, report-only mode
            Debug.Assert( result == ProcessingResult.NoAction );
            Debug.Assert( action == ActionDecision.NoAction );
            
            //load voucher
            Voucher v2 = Voucher.Load( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ) );

            Console.WriteLine( "\r\nbefore:\r\n " + v.ToString() + "\r\n  After \r\n " + v2.ToString() );
            
            //confirm the voucher remains active
            foreach ( VoucherOffer vo in v2.VoucherOffers )
            {
                Debug.Assert( vo.status == Voucher.VoucherStatusActiveByte );
            }

            VoucherTest.DeleteTestVoucherAndUses( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ) );                        
        }


        //1.4 test voucher, user, !reportonly
        [Test]
        public void VoucherUsers()
        {

            Console.WriteLine( "In VoucherUsers" );

            //create a voucher
            Voucher v = Voucher.Create( testVoucherString );

            //add an offer
            v.AddOffer( VoucherTest.testOffer1, 1, Voucher.VoucherStatusActiveByte );
            v.Save();
            v.AddUse( VoucherTest.testPUID, System.DateTime.UtcNow );

            ActionDecision action = ActionDecision.NoAction;

            //call process hash
            ProcessingResult result = DeActivator.ProcessHash( v.voucherhash, true, false, out action );
            Debug.Assert( result == ProcessingResult.NoAction );
            Debug.Assert( action == ActionDecision.NoAction );

            //load voucher
            Voucher v2 = Voucher.Load( testVoucherString );

            Console.WriteLine( "\r\nbefore:\r\n " + v.ToString() + "\r\nAfter\r\n " + v2.ToString() );
            
            //confirm the voucher remains active
            foreach ( VoucherOffer vo in v2.VoucherOffers )
            {
                Debug.Assert( vo.status == Voucher.VoucherStatusActiveByte );
            }
            
            VoucherTest.DeleteTestVoucherAndUses( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ) );
        }

    }


    //==============================================================================
    //DecideAction - tests of the decision logic
    //since the billing-related scenarios are more complex,
    //I'm going to do individual tests of the decision and action trees
    //for those cases where a user's account will be involved

    //to be used in the class below to simplify test code...
    public class DecisionTriplet
    {
        public string CurrentOffer;
        public string RenewalOffer;
        public ulong  ReturnOfferID;
        public byte Country;
        public ActionDecision Decision;

        public DecisionTriplet()
        {
            this.CurrentOffer = "";
            this.RenewalOffer = "";
            this.ReturnOfferID = 0;
        }

        public DecisionTriplet( string Current, string Renewal, ulong ReturnID, ActionDecision ActionDecision, byte Country )
        {
            this.CurrentOffer = Current;
            this.RenewalOffer = Renewal;
            this.ReturnOfferID = ReturnID;
            this.Country = Country;
            this.Decision = ActionDecision;
        }
    }


    public class SubCodeTestHelper
    {

        public const string testVoucherString = "K45KQ-63L1B-B6W9J-A2VDL-4FDS0";

        public static void PreTest( ref Voucher v, ref User2 u, ref UserBillingInfo ubi )
        {

            //clear all variables, and ready them for tests

            //create a test User2 in memory
            u = User2.Create();
            // needed for logging (random puid)
            u.OwnerPuid = 21358205934;
            // needed for decision
            u.CountryID = 103;

            // create a test voucher in memory
            v = Voucher.Create( "22222-22222-22222-22222-22222" );

            // the UBI is a little more of a pain to mock up... 
            ubi = UserBillingInfo.Create();
            ubi.Subscriptions = new SubscriptionInfoSet();
            ubi.Subscriptions.Items = new SubscriptionInfoSetSubscriptionInfo[ 1 ];
            ubi.Subscriptions.Items[ 0 ] = new SubscriptionInfoSetSubscriptionInfo();
            ubi.Subscriptions.Items[ 0 ].SubscriptionStatusInfo = new SubscriptionInfoSetSubscriptionInfoSubscriptionStatusInfo();
            ubi.Subscriptions.Items[ 0 ].SubscriptionStatusInfo.SubscriptionStatus = BillingConstants.SubscriptionInfoEnabledString;

            ubi.Subscriptions.Items[ 0 ].ServiceInstanceSet = new SubscriptionInfoSetSubscriptionInfoServiceInstanceSetServiceInstance[1];
            ubi.Subscriptions.Items[ 0 ].ServiceInstanceSet[ 0 ] = new SubscriptionInfoSetSubscriptionInfoServiceInstanceSetServiceInstance();
            ubi.Subscriptions.Items[ 0 ].ServiceInstanceSet[ 0 ].ServiceInstanceId = "ghQAAAAAAAABAAEA";
            ubi.Subscriptions.Items[ 0 ].ServiceInstanceSet[ 0 ].ServiceComponentId = "BBBE8103-BB3C-40CD-96BD-A37A7CA73314";
            ubi.Subscriptions.Items[ 0 ].ServiceInstanceSet[ 0 ].ProvisioningStatus = "PROVISIONED";
            ubi.Subscriptions.Items[ 0 ].ServiceInstanceSet[ 0 ].ProvisioningErrorCode = "0";

            XmlSerializer subSerializer = new XmlSerializer( typeof( SubscriptionInfoSetSubscriptionInfo ) );
            StringWriter subXmlString = new StringWriter();
            subSerializer.Serialize(subXmlString, ubi.Subscriptions.Items[ 0 ]);

            //Console.WriteLine( "SubscriptionInfo Object = " + subXmlString.ToString() );

            //Console.WriteLine( "offending line is " + ubi.Subscriptions.Items[ 0 ].SubscriptionStatusInfo.SubscriptionStatus );
            
            // not directly relevant at this point, but it needs to be set so the logic gets activated
            VoucherUse vu = new VoucherUse();
            vu.puid = 21358205934;
            vu.whenUsed = System.DateTime.UtcNow;
            v.VoucherUsage.Add( vu );

            VoucherOffer vo = new VoucherOffer();
            vo.offerID = VoucherTest.testOffer1;
            vo.status = Voucher.VoucherStatusDisabledByte;
            vo.useCount = 1;
            v.VoucherOffers.Add( vo );
            
        }


        public static void PreTestWithRealUser(  ref Voucher v, ref User2 u, ref UserBillingInfo ubi )
        {

            //totally backwards from the real world where we create a voucher... then the user.

            //create a new user
            ulong testUser = UserBillingInfoTest.CreateUserForTesting( Owner.Country.US );
            Console.WriteLine( "UserCreated " + testUser.ToString() );
            u = User2.Load( testUser );
            Console.WriteLine( "" );
            Console.WriteLine( "UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );
            Console.WriteLine( "\n\n " + u.ToString() + "\n\n" );

            ubi = new UserBillingInfo();
            ubi.LoadBilling( u );
            Console.WriteLine( ubi.RawXML );
            
            //while it shouldn't be there... delete it just to make sure.
            VoucherTest.DeleteTestVoucherAndUses( VoucherUtil2.SubcodeStringToHashByte( testVoucherString ) );

            // then create a voucher for that user... 
            v = Voucher.Create( testVoucherString );
            //add offers
            v.AddOffer( VoucherTest.testOffer1, 1, Voucher.VoucherStatusActiveByte );
            v.Save();

            // add usage to voucher to reflect user's "usage"
            v.AddUse( u.OwnerPuid, System.DateTime.UtcNow );
            v.Save();

            Console.WriteLine( "Voucher is now: " + v.ToString() );

        }

    }


//    [TestFixture]         
    public class DeActivatorDecisionTest_HashandUser : TestNode
    {

        // billing guids useful for testing the decision logic
        // StarterKit, PrePaidYear, 3-Month, GameTrial, ConsoleTrial, AnnualRenewal, MonthlyRenewal
        // this makes the tests easier to read

        // see OfferValues class for actual ulong values... 
//        public const ulong Beta16 =         0xFFFE000080000001;
//        public const ulong Beta15 =         0xFFFE000080000002;
//        public const ulong Beta14 =         0xFFFE000080000003;
//        public const ulong Beta13 =         0xFFFE000080000004;
//        public const ulong Promo16 =        0xFFFE000080000005;
//        public const ulong Test16            = 0xFFFE000080000006;
//        public const ulong Unknown           = 0xFFFE000080000007;
//        public const ulong StarterKit        = 0xFFFE000080000008;
//        public const ulong GameTrial         = 0xFFFE000080000009;
//        public const ulong ConsoleTrial      = 0xFFFE00008000000A;
//        public const ulong MonthlyRenewal    = 0xFFFE00008000000B;
//        public const ulong YearlyRenewal     = 0xFFFE00008000000C;
//        public const ulong PrepaidYear       = 0xFFFE00008000000D;
//        public const ulong ThreeMonthPrePaid = 0xFFFE00008000000E;

        //this makes the tests easier to read, though I should probably use the array from UserBillingInfo
        public const string US_Starter              = "70bd2684-080f-4b18-8744-b983cb300a26";       //8
        public const string US_GameTrial            = "5babfdd3-4151-41c3-b674-14302bccc128";       //9
        public const string US_ConsoleTrial         = "82ae5a61-d261-4a3e-a5b6-a8f56c132b65";       //A
        public const string US_MonthlyRenewal       = "38352eb2-c6cf-4a1e-b1e5-6176973d66a9";       //B
        public const string US_AnnualRenewal        = "ac47cd5a-99b5-4c0d-aa58-1e80e59be88c";       //C
        public const string US_PrePaidYear          = "12a7b2d8-5644-43ff-9782-b2f3f944e593";       //D
        public const string US_PrePaid3month        = "c5fd0189-78be-42fd-9946-d9a31e12a1af";       //E

        public const string JP_Starter              = "a8fd080b-c8cb-412a-a847-a072397affdd";       //8
        public const string JP_GameTrial            = "703a930b-a225-413c-8e3f-af435ffca377";       //9
        public const string JP_ConsoleTrial         = "dfa02846-103d-4e21-9154-9f41c43a45f0";       //A
        public const string JP_MonthlyRenewal       = "a308b3f3-9363-4aad-9b84-cce6a830a10d";       //B
        public const string JP_AnnualRenewal        = "0d2769bc-87f4-452d-ae78-e869d0e5353e";       //C
        public const string JP_PrePaidYear          = "2e0f4eeb-cedc-4591-a126-0e469b122332";       //D
        public const string JP_PrePaid3month        = "d162a8b9-d271-491f-8f40-83e105b86de7";       //E


        //NOTE: VERY IMPORTANT TO CHANGE THE SIZE OF THE ARRAY IF YOU ADD CASES!
        public DecisionTriplet[] testMatrix = new DecisionTriplet[ 80 ];

        //use the constructor as a "TestFixtureSetup"
        public DeActivatorDecisionTest_HashandUser()
        {
            //==========================================================================================
            //2.    Account Matters - Deactivate Hash and User Accounts too... (hashonly = false)
            //==========================================================================================
            // Current Offer, Renewal Offer, Returned Offer, Returned Offer Used?
            // Annual, PrePaidYear, 3-Month, GameTrial, ConsoleTrial, AnnualRenewal, MonthlyRenewal
            // 7^3 x 2 = 686 possibilities!  ... and that's just for US offers..

            //note 1: I suppose one could create an enum which you then loop through in a triple-nested loop (outermost loop for current offer, inner for renewal, innermost for return)
            //        to achieve a similar effect, but there are a number of combinations that don't need testing
            //        and are impossible to achieve in real life due to our business rules.

            //note 2: it's also quite possible to have structured the code a little better around the patterns I'm seeing only now when I'm done.  :-\

            //note 3: 103 = US Country code.  53 = Japan country code

            //==================================================================
            //2.1  Tests of Decision logic
            //==================================================================

            //==================================================================
            //1     User Current Offer is: Starter Kit, with... 

            //1.1   starter kit renewal, returns starter kit or equal -> convert renewal (return)            
            testMatrix[ 0] = new DecisionTriplet( US_Starter, US_Starter, OfferValues.StarterKit, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //1.1a  starter kit renewal, return != starter kit -> Log for PSS
            testMatrix[ 1] = new DecisionTriplet( US_Starter, US_Starter, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //1.2   12 month Pre-Paid renewal, returns 12-month pre-paid or equal -> convert renewal (return)
            testMatrix[ 2] = new DecisionTriplet( US_Starter, US_PrePaidYear, OfferValues.StarterKit, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );
 
            //1.2a  12 month Pre-Paid renewal, return != 12-month pre-paid equivalent -> Log for PSS (return)
            testMatrix[ 3] = new DecisionTriplet( US_Starter, US_PrePaidYear, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //1.3   3-month Pre-Paid renewal, returns 3-month pre-paid -> convert renewal (return)
            testMatrix[ 4] = new DecisionTriplet( US_Starter, US_PrePaid3month, OfferValues.PrePaid3Month, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //1.3a  3-month Pre-Paid renewal, return != 3-month pre-paid -> Log for PSS (return)
            testMatrix[ 5] = new DecisionTriplet( US_Starter, US_PrePaid3month, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );

            //1.4  n/a -- Can't have a trial offer as your renewal

            //1.5   Monthly renewal, return starter kit -> Cancel Subscriptions (return)
            testMatrix[ 6] = new DecisionTriplet( US_Starter, US_MonthlyRenewal, OfferValues.StarterKit, ActionDecision.DeactivateHashAndAccount, 103 );

            //1.5a  Monthly renewal, return != starter kit -> Log for PSS (if used.  already deactivated hash in the unused case)
            testMatrix[ 7] = new DecisionTriplet( US_Starter, US_MonthlyRenewal, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //1.6   Annual renewal, return starter kit -> Cancel Subscriptions (return)
            testMatrix[ 8] = new DecisionTriplet( US_Starter, US_AnnualRenewal, OfferValues.StarterKit, ActionDecision.DeactivateHashAndAccount, 103 );

            //1.6a  Annual renewal, return != starter kit -> Log for PSS (if used.  already deactivated hash in the unused case)
            testMatrix[ 9] = new DecisionTriplet( US_Starter, US_AnnualRenewal, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );


            //==================================================================
            //2     User Current Offer is: 12-month PrePaid with renewal of...

            //2.1   Starter Kit, returns 12-month pre-paid or equal -> convert renewal (return)
            testMatrix[10] = new DecisionTriplet( US_PrePaidYear, US_Starter, OfferValues.PrePaidYear, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //2.1a  Starter Kit, return != 12-month pre-paid card -> Log for PSS ( unused return? )
            testMatrix[11] = new DecisionTriplet( US_PrePaidYear, US_Starter, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //2.2   12-month Prepaid, return == 12-Month PrePaid -> convert renewal (return)
            testMatrix[12] = new DecisionTriplet( US_PrePaidYear, US_PrePaidYear, OfferValues.PrePaidYear, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //2.2a  12-month Prepaid, return != 12-Month PrePaid -> Log for PSS (unused return ? )
            testMatrix[12] = new DecisionTriplet( US_PrePaidYear, US_PrePaidYear, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //2.3   3-month prepaid, return == 3-month prepaid -> convert renewal (return)
            testMatrix[13] = new DecisionTriplet( US_PrePaidYear, US_PrePaid3month, OfferValues.PrePaid3Month, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //2.3a  3-month prepaid, return != 3-month prepaid -> Log for PSS (return)
            testMatrix[14] = new DecisionTriplet( US_PrePaidYear, US_PrePaid3month, OfferValues.PrePaidYear, ActionDecision.LogForPSS, 103 );

            //2.4   n/a -- Can't have a trial offer as your renewal

            //2.5   Monthly renewal, return == 12-month prepaid -> Cancel Subscriptions (return)
            testMatrix[15] = new DecisionTriplet( US_PrePaidYear, US_MonthlyRenewal, OfferValues.PrePaidYear, ActionDecision.DeactivateHashAndAccount, 103 );

            //2.5a  Monthly renewal, return != 12-month prepaid -> Log for PSS (return)
            testMatrix[16] = new DecisionTriplet( US_PrePaidYear, US_MonthlyRenewal, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //2.6   Annual renewal, return == 12-month prepaid -> Cancel Subscriptions (return)
            testMatrix[17] = new DecisionTriplet( US_PrePaidYear, US_AnnualRenewal, OfferValues.PrePaidYear, ActionDecision.DeactivateHashAndAccount, 103 );

            //2.6a  Annual renewal, return != 12-month prepaid -> Log for PSS (return)
            testMatrix[18] = new DecisionTriplet( US_PrePaidYear, US_AnnualRenewal, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );


            //==================================================================
            //3     User Current Offer is 3-month PrePaid with renewal of

            //3.1   Starter Kit, return == starter kit -> convert renewal (return) 
            testMatrix[19] = new DecisionTriplet( US_PrePaid3month, US_Starter, OfferValues.StarterKit, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //3.1a  Starter Kit, return != starter kit -> Log for PSS (return) 
            testMatrix[20] = new DecisionTriplet( US_PrePaid3month, US_Starter, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //3.2   12-month pre-paid, return == 12 month prepaid -> convert renewal (return) 
            testMatrix[21] = new DecisionTriplet( US_PrePaid3month, US_PrePaidYear, OfferValues.StarterKit, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //3.2a  12-month pre-paid, return != 12 month prepaid -> Log for PSS (return) 
            testMatrix[22] = new DecisionTriplet( US_PrePaid3month, US_PrePaidYear, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //3.4   n/a -- Can't have a trial offer as your renewal

            //3.3   3-month prepaid, return == 3-month prepaid -> convert renewal (return)
            testMatrix[23] = new DecisionTriplet( US_PrePaid3month, US_PrePaid3month, OfferValues.PrePaid3Month, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //3.3a   3-month prepaid, return != 3-month prepaid -> Log for PSS (return)
            testMatrix[24] = new DecisionTriplet( US_PrePaid3month, US_PrePaid3month, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );

            //3.5   Monthly renewal, return == 3-month prepaid -> Cancel Subscriptions (return)
            testMatrix[25] = new DecisionTriplet( US_PrePaid3month, US_MonthlyRenewal, OfferValues.PrePaid3Month, ActionDecision.DeactivateHashAndAccount, 103 );

            //3.5a  Monthly renewal, return != 3-month prepaid -> Log for PSS (return)
            testMatrix[26] = new DecisionTriplet( US_PrePaid3month, US_MonthlyRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );

            //3.6   Annual renewal, return == 3-month prepaid -> Cancel Subscriptions (return)
            testMatrix[27] = new DecisionTriplet( US_PrePaid3month, US_AnnualRenewal, OfferValues.PrePaid3Month, ActionDecision.DeactivateHashAndAccount, 103 );

            //3.6a  Annual renewal, return != 3-month prepaid -> Log for PSS (return)
            testMatrix[28] = new DecisionTriplet( US_PrePaid3month, US_AnnualRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );


            //==================================================================
            //4     User Current Offer is Game Trial with renewal of

            //4.1   Starter Kit, return == starter kit -> convert renewal (return) 
            testMatrix[29] = new DecisionTriplet( US_GameTrial, US_Starter, OfferValues.StarterKit, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //4.1a  Starter Kit, return != starter kit -> Log for PSS (return) 
            testMatrix[30] = new DecisionTriplet( US_GameTrial, US_Starter, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //4.2   12-month pre-paid, return == 12 month prepaid -> convert renewal (return) 
            testMatrix[31] = new DecisionTriplet( US_GameTrial, US_PrePaidYear, OfferValues.StarterKit, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //4.2a  12-month pre-paid, return != 12 month prepaid -> Log for PSS (return) 
            testMatrix[32] = new DecisionTriplet( US_GameTrial, US_PrePaidYear, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //4.3   3-month prepaid, return == 3-month prepaid -> convert renewal (return)
            testMatrix[33] = new DecisionTriplet( US_GameTrial, US_PrePaid3month, OfferValues.PrePaid3Month, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //4.3a  3-month prepaid, return != 3-month prepaid -> Log for PSS (return)
            testMatrix[34] = new DecisionTriplet( US_GameTrial, US_PrePaid3month, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );

            //4.4   n/a -- Can't have a trial offer as your renewal

            //4.5   Monthly renewal, return == Game Trial -> Cancel Subscriptions (return)
            testMatrix[35] = new DecisionTriplet( US_GameTrial, US_MonthlyRenewal, OfferValues.GameTrial, ActionDecision.DeactivateHashAndAccount, 103);

            //4.5a  Monthly renewal, return != Game Trial -> Log for PSS (return)
            testMatrix[36] = new DecisionTriplet( US_GameTrial, US_MonthlyRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );

            //4.6   Annual renewal, return == Game Trial -> Cancel Subscriptions (return)
            testMatrix[37] = new DecisionTriplet( US_GameTrial, US_AnnualRenewal, OfferValues.GameTrial, ActionDecision.DeactivateHashAndAccount, 103 );

            //4.6a  Annual renewal, return != Game Trial -> Log for PSS (return)
            testMatrix[38] = new DecisionTriplet( US_GameTrial, US_AnnualRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );


            //==================================================================
            //5     User Current Offer is Console Trial with renewal of...

            //5.1   Starter Kit, return == starter kit -> convert renewal (return) 
            testMatrix[39] = new DecisionTriplet( US_ConsoleTrial, US_Starter, OfferValues.StarterKit, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //5.1a  Starter Kit, return != starter kit -> Log for PSS (return) 
            testMatrix[40] = new DecisionTriplet( US_ConsoleTrial, US_Starter, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //5.2   12-month pre-paid, return == 12 month prepaid -> convert renewal (return) 
            testMatrix[41] = new DecisionTriplet( US_ConsoleTrial, US_PrePaidYear, OfferValues.StarterKit, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //5.2a  12-month pre-paid, return != 12 month prepaid -> Log for PSS (return) 
            testMatrix[42] = new DecisionTriplet( US_ConsoleTrial, US_PrePaidYear, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //5.3   3-month prepaid, return == 3-month prepaid -> convert renewal (return)
            testMatrix[43] = new DecisionTriplet( US_ConsoleTrial, US_PrePaid3month, OfferValues.PrePaid3Month, ActionDecision.DeactivateHashChangeRenewalAnnual, 103 );

            //5.3a   3-month prepaid, return != 3-month prepaid -> Log for PSS (return)
            testMatrix[44] = new DecisionTriplet( US_ConsoleTrial, US_PrePaid3month, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );

            //5.4   n/a -- Can't have a trial offer as your renewal

            //5.5   Monthly renewal, return == Console Trial -> Cancel Subscriptions (return)
            testMatrix[45] = new DecisionTriplet( US_ConsoleTrial, US_MonthlyRenewal, OfferValues.ConsoleTrial, ActionDecision.DeactivateHashAndAccount, 103 );

            //5.5a   Monthly renewal, return != Console Trial -> Log for PSS (return)
            testMatrix[46] = new DecisionTriplet( US_ConsoleTrial, US_MonthlyRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );

            //5.6   Annual renewal, return == Console Trial -> Cancel Subscriptions (return)
            testMatrix[47] = new DecisionTriplet( US_ConsoleTrial, US_AnnualRenewal, OfferValues.ConsoleTrial, ActionDecision.DeactivateHashAndAccount, 103 );

            //5.6a  Annual renewal, return != Console Trial -> Log for PSS (return)
            testMatrix[48] = new DecisionTriplet( US_ConsoleTrial, US_AnnualRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );

            //==================================================================
            //6     User Current Offer is Monthly Renewal with renewal of
            //6.1   n/a - can't be in a CC offer with pre-paid renewal
            //6.2   n/a - can't be in a CC offer with pre-paid renewal
            //6.3   n/a - can't be in a CC offer with pre-paid renewal
            //6.4   n/a - can't be in a CC offer with Trial renewal

            //6.5   Monthly Renwal -> Log for PSS regardless of Return Offer
            testMatrix[49] = new DecisionTriplet( US_MonthlyRenewal, US_MonthlyRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );
            testMatrix[50] = new DecisionTriplet( US_MonthlyRenewal, US_MonthlyRenewal, OfferValues.PrePaidYear, ActionDecision.LogForPSS, 103 );
            testMatrix[51] = new DecisionTriplet( US_MonthlyRenewal, US_MonthlyRenewal, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //6.6   Annual Renwal -> Log for PSS regardless of Return Offer
            testMatrix[52] = new DecisionTriplet( US_MonthlyRenewal, US_AnnualRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );
            testMatrix[53] = new DecisionTriplet( US_MonthlyRenewal, US_AnnualRenewal, OfferValues.PrePaidYear, ActionDecision.LogForPSS, 103 );
            testMatrix[54] = new DecisionTriplet( US_MonthlyRenewal, US_AnnualRenewal, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //==================================================================
            //7     User Current Offer is Annual Renewal with renewal of

            //7.1   n/a - can't be in a CC offer with pre-paid renewal
            //7.2   n/a - can't be in a CC offer with pre-paid renewal
            //7.3   n/a - can't be in a CC offer with pre-paid renewal
            //7.4   n/a - can't be in a CC offer with Trial renewal

            //7.5   Monthly Renwal -> Log for PSS regardless of Return Offer
            testMatrix[55] = new DecisionTriplet( US_AnnualRenewal, US_MonthlyRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );
            testMatrix[56] = new DecisionTriplet( US_AnnualRenewal, US_MonthlyRenewal, OfferValues.PrePaidYear, ActionDecision.LogForPSS, 103 );
            testMatrix[57] = new DecisionTriplet( US_AnnualRenewal, US_MonthlyRenewal, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //7.6   Annual Renwal -> Log for PSS regardless of Return Offer
            testMatrix[58] = new DecisionTriplet( US_AnnualRenewal, US_AnnualRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 103 );
            testMatrix[59] = new DecisionTriplet( US_AnnualRenewal, US_AnnualRenewal, OfferValues.PrePaidYear, ActionDecision.LogForPSS, 103 );
            testMatrix[60] = new DecisionTriplet( US_AnnualRenewal, US_AnnualRenewal, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 103 );

            //==============================================================================
            //8     Japanese Users - Test renewal scenarios have the correct result
            //      --> make sure the appropriate cases are taken care of for this group

            //8.1   Starter Kit, return == starter kit -> convert renewal (return) 
            testMatrix[61] = new DecisionTriplet( JP_ConsoleTrial, JP_Starter, OfferValues.StarterKit, ActionDecision.DeactivateHashChangeRenewalMonthly, 53 );

            //8.1a  Starter Kit, return != starter kit -> Log for PSS (return) 
            testMatrix[62] = new DecisionTriplet( JP_ConsoleTrial, JP_Starter, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 53 );

            //8.2   12-month pre-paid, return == 12 month prepaid -> convert renewal (return) 
            testMatrix[63] = new DecisionTriplet( JP_ConsoleTrial, JP_PrePaidYear, OfferValues.StarterKit, ActionDecision.DeactivateHashChangeRenewalMonthly, 53 );

            //8.2a  12-month pre-paid, return != 12 month prepaid -> Log for PSS (return) 
            testMatrix[64] = new DecisionTriplet( JP_ConsoleTrial, JP_PrePaidYear, OfferValues.PrePaid3Month, ActionDecision.LogForPSS, 53 );

            //8.3   3-month prepaid, return == 3-month prepaid -> convert renewal (return)
            testMatrix[65] = new DecisionTriplet( JP_ConsoleTrial, JP_PrePaid3month, OfferValues.PrePaid3Month, ActionDecision.DeactivateHashChangeRenewalMonthly, 53 );

            //8.3a   3-month prepaid, return != 3-month prepaid -> Log for PSS (return)
            testMatrix[66] = new DecisionTriplet( JP_ConsoleTrial, JP_PrePaid3month, OfferValues.StarterKit, ActionDecision.LogForPSS, 53 );

            //8.4   n/a -- Can't have a trial offer as your renewal

            //8.5   Monthly renewal, return == Console Trial -> Cancel Subscriptions (return)
            testMatrix[67] = new DecisionTriplet( JP_ConsoleTrial, JP_MonthlyRenewal, OfferValues.ConsoleTrial, ActionDecision.DeactivateHashAndAccount, 53 );

            //8.5a   Monthly renewal, return != Console Trial -> Log for PSS (return)
            testMatrix[68] = new DecisionTriplet( JP_ConsoleTrial, JP_MonthlyRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 53 );

            //8.6   Annual renewal, return == Console Trial -> Cancel Subscriptions (return)
            testMatrix[69] = new DecisionTriplet( JP_ConsoleTrial, JP_AnnualRenewal, OfferValues.ConsoleTrial, ActionDecision.DeactivateHashAndAccount, 53 );

            //8.6a  Annual renewal, return != Console Trial -> Log for PSS (return)
            testMatrix[70] = new DecisionTriplet( JP_ConsoleTrial, JP_AnnualRenewal, OfferValues.StarterKit, ActionDecision.LogForPSS, 53 );

        }


        [Test]
        public void RunNormalDecisionTests()
        {
            Console.WriteLine("\n");

            Voucher v = null;
            User2 u = null;
            UserBillingInfo ubi = null;

            SubCodeTestHelper.PreTest( ref v, ref u, ref ubi );
            VoucherOffer vo = (VoucherOffer) v.VoucherOffers[ 0 ];

            //Console.WriteLine( "Voucher is: " + v.ToString() );
            bool allTestsPass = true;
            string failingTestList = "Failed Tests: ";
            int iLoop = 0;
            while ( ( iLoop < testMatrix.Length ) && ( testMatrix[ iLoop ] != null ) )
            {

                Console.WriteLine( "Now Testing case {0}:  ", iLoop ); 
                Console.WriteLine( "\tcur - " + testMatrix[iLoop].CurrentOffer + "\n\trnw - " + testMatrix[iLoop].RenewalOffer + "\n\trtn - 0x" + testMatrix[iLoop].ReturnOfferID.ToString( "X" ) );
                // set current and renewal offers
                // SPS returns the GUID for users, so setting current offer is easier for this test... 
                ubi.Subscriptions.Items[ 0 ].OfferingGUID = testMatrix[iLoop].CurrentOffer;
                ubi.Subscriptions.Items[ 0 ].RenewOfferingId = testMatrix[iLoop].RenewalOffer;

                // set the offer of the returned item, sort of round about...
                // Vouchers have OfferID's which we'll match to an Offer GUID via UODB
                vo.offerID = testMatrix[iLoop].ReturnOfferID;

                u.CountryID = testMatrix[iLoop].Country;

                //Console.WriteLine( "Voucher is: " + v.ToString() );
                    
                //run test to determine what action we should take...
                ActionDecision action = DeActivator.DecideAction( v, u, ubi );
                Console.WriteLine("\tExpected:\t{0}\n\t\t\tgot {1}\n", testMatrix[iLoop].Decision, action );
                if ( action != testMatrix[iLoop].Decision )
                {   
                    allTestsPass = false;
                    failingTestList += " " + iLoop.ToString();
                    Console.WriteLine("Decision Test FAILURE\n");  //  - curr {0}, renew {1}, rtn {2} -> Expected {3} but got {4}", testMatrix[iLoop].CurrentOffer, testMatrix[iLoop].RenewalOffer, testMatrix[iLoop].ReturnOfferID, testMatrix[iLoop].Decision, action );
                    //throw new Exception("Test Failed");
                }
                else
                {
                    Console.WriteLine("Decision Test SUCCESS\n");
                }

                iLoop++;
            } // loop through cases
            
            if ( allTestsPass )
            {
                Console.WriteLine( "\nALL DECISION TESTS PASSED\n" );
            }
            else
            {
                Console.WriteLine( "\nONE OR MORE DECISION TESTS FAILED\n" + failingTestList );
                Console.WriteLine(  );
                //throw new Exception("Test Failed");

            }
        
        }//runnormaldecisiontests


        //thanks to bug 17266
        //another test in User2Test.cs confirms we can load this case.
        //so this test just confirms we make the right decision.
        [Test]
        public void Bug17266_UserAcctNeedsMgmt()
        {
            Console.WriteLine("\n     UserAcctNeedsMgmt Test");

            Voucher v = null;
            User2 u = null;
            UserBillingInfo ubi = null;
            uint prevValue = 0;

            SubCodeTestHelper.PreTest( ref v, ref u, ref ubi );
            
            //tests should not affect each other... 
            prevValue = u.BillingAccountStatus;
            u.BillingAccountStatus = 0x80151200;
            ActionDecision action = DeActivator.DecideAction( v, u, ubi );

            Console.WriteLine("\tExpected:\t{0}\n\t\t\tgot {1}\n", ActionDecision.LogForPSS, action );

            u.BillingAccountStatus = prevValue;
            if ( action != ActionDecision.LogForPSS )
            {
                throw new Exception("Test Failed");
            }

        }


        #region old obsolete stuff
        //==================================================================
        //    tests for edge cases which might yield diminishing returns
        //==================================================================        
        // voucher with no offers - what if t_offer regions doesn't have a guid for this?
        // offer guids that are not in UODB
        // vouchers with more than 1 user ??
        // vouchers with multiple offers?

//task: delete not needed code.
//        public SubscriptionInfoSet sub;
//        // [TestFixtureSetUp]
//        public void DeActivatorHashandUserDecisionTestFixtureSetup()
//        {
//
//            SubscriptionInfoSet subInfo = new SubscriptionInfoSet();
//            //create the item array
//            subInfo.Items = new SubscriptionInfoSetSubscriptionInfo[ 1 ];
//            //create an item for the first element to point to
//            subInfo.Items[ 0 ] = new SubscriptionInfoSetSubscriptionInfo();
//            //assign this variable to point to that element, to lessen the amount of typing... ;-)
//            SubscriptionInfoSetSubscriptionInfo sub = subInfo.Items[ 0 ];
//            
//            sub.ActivationDate = "2004-05-19";
//            sub.AnniversaryDate = "19";
//            sub.BillingPeriod = "200406";
//            //not present in this test case
//            // sub.DelayedConversion = "";
//            sub.EndDate = "2005-05-19";
//            sub.FriendlyName = "raffi";
//            sub.InternalSubscriptionDescription = "XBX-10049 12 mo Starter kit yearly subscription to XBOX Live (0.00/mth) USD ";
//            sub.OfferingGUID = "70BD2684-080F-4B18-8744-B983CB300A26";
//            sub.PaymentInstrumentId = "ghQAAAAAAAABAACA";
//            sub.PurchaseDate = "2004-05-19";
//            sub.RenewalGracePeriod = "60";
//            sub.RenewOfferingId = "AC47CD5A-99B5-4C0D-AA58-1E80E59BE88C";
//            
//            sub.ServiceInstanceSet = new SubscriptionInfoSetSubscriptionInfoServiceInstanceSetServiceInstance[1];
//            sub.ServiceInstanceSet[ 0 ] = new SubscriptionInfoSetSubscriptionInfoServiceInstanceSetServiceInstance();
//            sub.ServiceInstanceSet[ 0 ].ServiceInstanceId = "ghQAAAAAAAABAAEA";
//            sub.ServiceInstanceSet[ 0 ].ServiceComponentId = "BBBE8103-BB3C-40CD-96BD-A37A7CA73314";
//            sub.ServiceInstanceSet[ 0 ].ProvisioningStatus = "PROVISIONED";
//            sub.ServiceInstanceSet[ 0 ].ProvisioningErrorCode = "0";
//
//            sub.ShippingAddressId = "ghQAAAAAAAABAACg";
//            sub.SubscriptionDescription = "Starter Kit pre-paid yearly subscription to Xbox Live";
//            sub.SubscriptionId = "ghQAAAAAAAAAAAEA";
//            sub.SubscriptionPriceDescription = "Were glad that youve chosen to challenge your friends in the ultimate high-speed gaming arena...";
//            sub.SubscriptionStatusInfo = new SubscriptionInfoSetSubscriptionInfoSubscriptionStatusInfo();
//            sub.SubscriptionStatusInfo.SubscriptionStatus = "ENABLED";
//            // sub.SubscriptionStatusInfo.ViolationSet = "";
//            sub.TermCommitCyclesRemaining = "0";
//            // sub.
//
//            //        <TermCommitStartDate>2004-05-19</TermCommitStartDate>
//            //        <TermCommitDescription>Starter Kit pre-paid yearly subscription to Xbox Live</TermCommitDescription>
//            //        <TermCommitPriceDescription>Were glad that youve chosen to challenge your friends in the ultimate high-speed gaming arena, with access to downloads, tournaments, and exclusive features like your unique gamertag and friends list across every game. Your Starter Kit Pre-Paid yearly  subscription to Xbox Live covers 12 months of Xbox Live service. For this subscription you will be charged $0.00. Unless you cancel your subscription beforeit ends,you will automatically renew to the currently selected renewal subscription type at the then current price, which is viewable in the Account Management section of theXbox Dashboard. For informationabout cancelling your subscription and the refund policy for your subscription, please see http://www.xbox.com/live/accounts. 
//            //        </TermCommitPriceDescription>
//            //        <TermCommitCyclesRemaining>0</TermCommitCyclesRemaining>
//            //
//            //        <SubscriptionCoBrand>MSFT</SubscriptionCoBrand>
//            //        <Prepaid>FALSE</Prepaid>
//            //        <PrepaidRenewal>FALSE</PrepaidRenewal>
//            //        <CurrentSubscriptionAgreementId></CurrentSubscriptionAgreementId>
//            //        <CurrentSubscriptionAgreementVersion></CurrentSubscriptionAgreementVersion>
//            //        <SignatureInfoSet></SignatureInfoSet>
//            //        <HasResources>NO</HasResources>
//            //        </SubscriptionInfo>
//            //        </SubscriptionInfoSet>";
//            //        /// <remarks/>
//            //        public SubscriptionInfoSetSubscriptionInfoSubscriptionStatusInfo SubscriptionStatusInfo;
//            //        
//            //        /// <remarks/>
//            //        public SubscriptionInfoSetSubscriptionInfoDelayedConversion DelayedConversion;
//            //        
//            //        /// <remarks/>
//            //        [System.Xml.Serialization.XmlArrayItemAttribute("ServiceInstance", IsNullable=false)]
//            //        public SubscriptionInfoSetSubscriptionInfoServiceInstance[] ServiceInstanceSet;
//        }
        #endregion

    }


    //================================================================================
    // Tests of TakeAction( voucher, action, reportonly )
    // Included in the tests of ProcessHash

    //================================================================================
    // Tests of TakeAction( voucher, user, ubi, action, reportonly )

    //2.2   Action logic
    //============================
    //2.2.0 No Action
    //2.2.1 Deactivate Hash ( same as tested above, except called from this function )
    //2.2.2 Deactivate Hash and Cancel User Account 
    //2.2.3 Deactivate Hash and Change Renewal to Annual Default offer ( annual renewal countries )
    //2.2.4 Deactivate Hash and Change Renewal to Monthly Default offer ( Japan User )
    //2.2.5 Log for PSS

    // [TestFixture]
    public class DeActivatorActionTest_HashandUser : TestNode
    {

        [Test]
        public void NoAction()
        {

            Voucher v = null;
            User2 u = null;
            UserBillingInfo ubi = null;

            SubCodeTestHelper.PreTestWithRealUser( ref v, ref u, ref ubi );

            ProcessingResult pr = DeActivator.TakeAction( v, u, ubi, ActionDecision.NoAction, false );
            if ( pr == ProcessingResult.NoAction )
            {
                //task: check results to make sure they're correct
                //load UBI 
                //confirm base subscription status is canceled
                Console.WriteLine( "Test: DeactivateHashCancelAccount - SUCCESS!" );
            }
            else
            {
                Console.WriteLine( "Test: DeactivateHashCancelAccount - FAILURE" );
                throw new Exception("Test: DeactivateHashCancelAccount - Failed!" );
            }

            VoucherTest.DeleteTestVoucherAndUses( v.voucherhash );
        }


        [Test]
        public void DeactivateHash()
        {

            bool success = false;
            Voucher v = null;
            User2 u = null;
            UserBillingInfo ubi = null;

            SubCodeTestHelper.PreTestWithRealUser( ref v, ref u, ref ubi );

            try
            {
                ProcessingResult pr =  DeActivator.TakeAction( v, u, ubi, ActionDecision.DeactivateHash, false );
            }
            catch (Exception e)
            {
                if ( e.Message.IndexOf( "DeactivateHash is an invalid action in DeactivateAccounts" ) >= 0 )
                {
                    success = true;
                    Console.WriteLine( "Caught the correct exception: " + e.Message );
                }
                else
                {
                    Console.WriteLine( "Some other exception occurred: " + e.Message );
                    throw e;
                }
            }
            finally
            {
                VoucherTest.DeleteTestVoucherAndUses( v.voucherhash );
            }
            if ( success )
            {
                Console.WriteLine( "Test passed successfully!" );
            }
//            if ( pr == ProcessingResult.VoucherDisabled )
//            {
//                //task: check result
//                //load UBI
//                //confirm base subscription status is canceled
//
//                Console.WriteLine( "Test: DeactivateHashCancelAccount - SUCCESS!" );
//            }
//            else
//            {
//                Console.WriteLine( "Test: DeactivateHashCancelAccount - FAILURE" );
//                throw new Exception("Test: DeactivateHashCancelAccount - Failed!" );
//            }

            VoucherTest.DeleteTestVoucherAndUses( v.voucherhash );
        }


        [Test]
        public void DeactivateHashCancelAccount()
        {
            Voucher v = null;
            User2 u = null;
            UserBillingInfo ubi = null;

            SubCodeTestHelper.PreTestWithRealUser( ref v, ref u, ref ubi );

            ProcessingResult pr =  DeActivator.TakeAction( v, u, ubi, ActionDecision.DeactivateHashAndAccount, false );

            if ( pr == ProcessingResult.VoucherAndUserDisabled )
            {
                //task: check result
                //load UBI 
                //confirm base subscription status is canceled

                Console.WriteLine( "Test: DeactivateHashCancelAccount - SUCCESS!" );
            }
            else
            {
                Console.WriteLine( "Test: DeactivateHashCancelAccount - FAILURE" );
                throw new Exception("Test: DeactivateHashCancelAccount - Failed!" );
            }

            VoucherTest.DeleteTestVoucherAndUses( v.voucherhash );
        }



        [Test]
        public void DeactivateHashChangeRenewalAnnual()
        {
            Voucher v = null;
            User2 u = null;
            UserBillingInfo ubi = null;

            SubCodeTestHelper.PreTestWithRealUser( ref v, ref u, ref ubi );

            ProcessingResult pr =  DeActivator.TakeAction( v, u, ubi, ActionDecision.DeactivateHashChangeRenewalAnnual, false );

            if ( pr == ProcessingResult.VoucherDisabledUserRenewalAnnual )
            {
                //task: check result
                //load UBI 
                //confirm base subscription renewal offer is appropriate (yearly)

                Console.WriteLine( "Test: DeactivateHashChangeRenewalAnnual - SUCCESS!" );
            }
            else
            {
                Console.WriteLine( "Test: DeactivateHashChangeRenewalAnnual - FAILURE" );
                throw new Exception("DeactivateHashChangeRenewalAnnual Failed!" );
            }

            VoucherTest.DeleteTestVoucherAndUses( v.voucherhash );
        }



        [Test]
        public void DeactivateHashChangeRenewalMonthly()
        {
            Voucher v = null;
            User2 u = null;
            UserBillingInfo ubi = null;

            SubCodeTestHelper.PreTestWithRealUser( ref v, ref u, ref ubi );

            ProcessingResult pr =  DeActivator.TakeAction( v, u, ubi, ActionDecision.DeactivateHashChangeRenewalMonthly, false );

            if ( pr == ProcessingResult.VoucherDisabledUserRenewalMonthly )
            {
                //task: check result
                //load UBI 
                //confirm base subscription renewal offer is appropriate (monthly)

                Console.WriteLine( "Test: DeactivateHashChangeRenewalMonthly - SUCCESS!" );
            }
            else
            {
                Console.WriteLine( "Test: DeactivateHashChangeRenewalMonthly - FAILURE" );
                throw new Exception("DeactivateHashChangeRenewalMonthly Failed!" );
            }

            VoucherTest.DeleteTestVoucherAndUses( v.voucherhash );
        }



        [Test]
        public void DeactivateHashCancelAccountMultiSubs()
        {
            Voucher v = null;
            User2 u = null;
            UserBillingInfo ubi = null;

            SubCodeTestHelper.PreTestWithRealUser( ref v, ref u, ref ubi );
            //ubi.PurchaseSubscription( u, offeringGuid, pI, shippingaddress );


            ProcessingResult pr =  DeActivator.TakeAction( v, u, ubi, ActionDecision.DeactivateHashAndAccount, false );

            if ( pr == ProcessingResult.VoucherAndUserDisabled )
            {
                //task: check result
                //load UBI 
                //confirm base subscription status is canceled

                Console.WriteLine( "Test: DeactivateHashCancelAccount - SUCCESS!" );
            }
            else
            {
                Console.WriteLine( "Test: DeactivateHashCancelAccount - FAILURE" );
                throw new Exception("Test: DeactivateHashCancelAccount - Failed!" );
            }

            VoucherTest.DeleteTestVoucherAndUses( v.voucherhash );
        }


        //[Test]
        public void DeactivateHashChangeRenewalBlank()
        {
            Voucher v = null;
            User2 u = null;
            UserBillingInfo ubi = null;

            SubCodeTestHelper.PreTestWithRealUser( ref v, ref u, ref ubi );

            ProcessingResult pr =  DeActivator.TakeAction( v, u, ubi, ActionDecision.DeactivateHashAndAccount, false );

            if ( pr == ProcessingResult.VoucherDisabledUserRenewalBlank )
            {
                //task: check result
                //load UBI 
                //confirm base subscription renewal offer is appropriate (monthly)

                Console.WriteLine( "Test: DeactivateHashChangeRenewalBlank - SUCCESS!" );
            }
            else
            {
                Console.WriteLine( "Test: DeactivateHashChangeRenewalBlank - FAILURE" );
                throw new Exception("DeactivateHashChangeRenewalBlank Failed!" );
            }

            VoucherTest.DeleteTestVoucherAndUses( v.voucherhash );

        }


        [Test]
        public void DeactivateHashAndLogForPSS()
        {

            Voucher v = null;
            User2 u = null;
            UserBillingInfo ubi = null;

            SubCodeTestHelper.PreTestWithRealUser( ref v, ref u, ref ubi );

            // convert user to monthly current, monthly renewal
            ProcessingResult pr =  DeActivator.TakeAction( v, u, ubi, ActionDecision.LogForPSS, false );
            if ( pr == ProcessingResult.LoggedForPSS )
            {
                //task: check result
                //load UBI 
                //confirm current and renewal offers are unchanged from default

                Console.WriteLine( "Test: DeactivateHashAndAccountLogForPSS - SUCCESS!" );
            }
            else
            {
                Console.WriteLine( "Test: DeactivateHashAndAccountLogForPSS - FAILURE" );
                throw new Exception("DeactivateHashAndAccountLogForPSS Failed!" );
            }

            VoucherTest.DeleteTestVoucherAndUses( v.voucherhash );

        }



    } // DeActivatorActionTest_HashandUser



    #region Helper Functions



    #endregion

} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\OfferValuesTest.cs ===
using System;
//using NUnit.Framework;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.diagnostics;
using xonline.tools.framework;


namespace xonline.common.test.tools
{
	/// <summary>
	/// Summary description for OfferValuesTest.
	/// </summary>
	public class OfferValuesTest : TestNode
	{

        //task: come back and finish writing the other not-yet-needed tests for completeness
       
        [Test]
        public void StarterKitAndPrePaidYearOfferValues()
        {
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.StarterKit, OfferValues.StarterKit ) );
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.StarterKit, OfferValues.PrePaidYear ) );

            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.StarterKit, OfferValues.GameTrial ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.StarterKit, OfferValues.ConsoleTrial ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.StarterKit, OfferValues.Beta16 ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.StarterKit, OfferValues.MonthlyRenewal ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.StarterKit, OfferValues.AnnualRenewal ) );

        }

        [Test]
        public void PrePaidYearOfferValues()
        {
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.PrePaidYear, OfferValues.PrePaidYear ) );
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.PrePaidYear, OfferValues.StarterKit ) );

            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaidYear, OfferValues.GameTrial ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaidYear, OfferValues.ConsoleTrial ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaidYear, OfferValues.Beta16 ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaidYear, OfferValues.MonthlyRenewal ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaidYear, OfferValues.AnnualRenewal ) );
        }

        [Test]
        public void PrePaid3MonthOfferValues()
        {
            //how many combinations are necessary for this to strike a balance between extensive testing
            //and what's truly practical?
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.PrePaid3Month, OfferValues.PrePaid3Month ) );

            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaid3Month, OfferValues.StarterKit ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaid3Month, OfferValues.PrePaidYear ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaid3Month, OfferValues.GameTrial ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaid3Month, OfferValues.ConsoleTrial ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaid3Month, OfferValues.Beta16 ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaid3Month, OfferValues.MonthlyRenewal ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.PrePaid3Month, OfferValues.AnnualRenewal ) );
        }

        [Test]
        public void TrialOfferValues()
        {
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.GameTrial, OfferValues.GameTrial ) );
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.GameTrial, OfferValues.ConsoleTrial ) );
            
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.GameTrial, OfferValues.StarterKit ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.GameTrial, OfferValues.PrePaidYear ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.GameTrial, OfferValues.Beta16 ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.GameTrial, OfferValues.MonthlyRenewal ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.GameTrial, OfferValues.AnnualRenewal ) );

            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.ConsoleTrial, OfferValues.ConsoleTrial ) );
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.ConsoleTrial, OfferValues.GameTrial ) );

            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.ConsoleTrial, OfferValues.StarterKit ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.ConsoleTrial, OfferValues.PrePaidYear ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.ConsoleTrial, OfferValues.Beta16 ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.ConsoleTrial, OfferValues.MonthlyRenewal ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.ConsoleTrial, OfferValues.AnnualRenewal ) );

        }

        [Test]
        public void BetaOfferValues()
        {
            //while we probably should do all the combinations, it's probably not productive... 
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.Beta16, OfferValues.Beta16 ) );
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.Beta16, OfferValues.Beta15 ) );
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.Beta16, OfferValues.Beta14 ) );
            Assert.IsTrue( OfferValues.IsOfferPairEquivalent( OfferValues.Beta16, OfferValues.Beta13 ) );

            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.Beta16, OfferValues.StarterKit ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.Beta15, OfferValues.StarterKit ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.Beta14, OfferValues.StarterKit ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.Beta13, OfferValues.StarterKit ) );

            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.Beta16, OfferValues.PrePaidYear ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.Beta15, OfferValues.PrePaidYear ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.Beta14, OfferValues.PrePaidYear ) );
            Assert.IsTrue( ! OfferValues.IsOfferPairEquivalent( OfferValues.Beta13, OfferValues.PrePaidYear ) );
        }


	} // class

} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\MsgManagerTest.cs ===
using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;

using ServerTestFramework;
using ServerTestFramework.Utilities;
//using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;
using xonline.tools.framework;

namespace xonline.common.test.tools
{


//    public class MessageManagerSTFTest : TestNode
//    {
//        // functional test for BasicTest
//        public override InitializerInfo GetRequiredResources()
//        {
//            // need to use fakesg service
//            InitializerInfo ii= new InitializerInfo();
//            ii.UseFakeSG = true;
//            ii.UseUodb = false;
//
//            return ii;
//        }
//
//        public override TestBaseGroupList GetTests()
//        {
//            TestBaseGroupList tbgl = new TestBaseGroupList();
//            tbgl.Add( new AuditTest() );
//            tbgl.Add( new MsgManagerTest() );
//            tbgl.Add( new SerialNumberTest() );
//            tbgl.Add( new OfferValuesTest() );
//            tbgl.Add( new VoucherHelpersTest() );
//            tbgl.Add( new VoucherUtil2Test() );
//            tbgl.Add( new VoucherTest() );
//            tbgl.Add( new UserTest() );
//            tbgl.Add( new DeActivatorProcessHashTest() );
//            return tbgl;
//        }
//    }

	/// <summary>
	/// Summary description for MsgManagerTest.
	/// </summary>
	[TestFixture]
    public class MsgManagerTest : TestNode
    {

        #region Constants, Constructors and Setup/Teardown
        

        public       string     CONNECTION_STRING   = "";
        public const string     TEST_STRING         = "TEST STRING For MSGTool Unit Tests";
        public const string     TEST_STRING2        = "Timendi causa est nescire. Ipsa scientia potestas est. Quid rides?...De te fabula narratur.";
        public const int        TEST_TITLE_ID       = 2147483646;  //not likely to conflict with other titles
        public const int        TEST_TITLE_ID2      = 2147483647;
        public const ushort     TEST_STRING_ID      = 30000;
        public const ushort     TEST_STRING_ID2     = 50000;
        public const ushort     TEST_LANGUAGE_ID    = 3;
        public const ushort     TEST_LANGUAGE_ID2   = 5;
        //task: fix these to be real locales
        public const string     TEST_LOCALE         = "EN-US";
        public const string     TEST_LOCALE2        = "CN-FR";
        public static DateTime  TEST_EXPIRE_DATE    = new DateTime( 2010, 1, 1, 20, 10, 00 );
        public static int       TEST_DASH_TITLE_ID  = - ( System.Convert.ToInt32( ( ~ ( XOn.DASH_TITLE_ID ) ) + 1) );
        public const ushort     TEST_EXPIRATION     = 3600;

        public MsgManagerTest()
        {


            Array InterfaceServerArray = Config.GetServerListByInterface( Interface.npdb );
            //CONNECTION_STRING = "Data Source=" + InterfaceServerArray[0].ToString + ";Trusted_Connection=Yes;Initial Catalog=NPDB";
            CONNECTION_STRING = "Data Source=inspectorgadget;Trusted_Connection=Yes;Initial Catalog=NPDB";           
            foreach (string server in InterfaceServerArray) 
            {
                Console.WriteLine( "Server: " + server );
            }


            // executes once per test run
            // need to wait 10 min after the first run... so that the string svr has time
            // to pick up the new setting... 
            using ( SqlConnection stringCN = new SqlConnection( CONNECTION_STRING ) )
            {             
                stringCN.Open();

                //look, then leap
                // call DB to check that the string isn't there
                SqlCommand stringCmd = stringCN.CreateCommand();                             
                stringCmd.CommandText = "dbo.p_stringsvr_strings_get_by_title_and_id";
                stringCmd.CommandType = CommandType.StoredProcedure;

                stringCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = TEST_TITLE_ID;
                stringCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;  
                
                stringCmd.Parameters.Add( "@i_string_id", SqlDbType.Int ).Value = TEST_STRING_ID;
                stringCmd.Parameters["@i_string_id"].Direction = ParameterDirection.Input;
        
                stringCmd.Parameters.Add( "@RETURN_VALUE", SqlDbType.Int );
                stringCmd.Parameters["@RETURN_VALUE"].Direction = ParameterDirection.ReturnValue;
                
                SqlDataReader findStringRdr = stringCmd.ExecuteReader();

                bool found = false;
                while( findStringRdr.Read() )
                {
                    //is the languageID we expect there?
                    if ( 
                        ( findStringRdr[ "vc_locale" ] != null ) && 
                        System.Convert.ToString( findStringRdr[ "vc_locale" ] ) == TEST_LOCALE 
                        )
                    {
                        //then it's already there...
                        found = true;
                    }

                }

                findStringRdr.Close();

                if ( !found )
                {

                    stringCmd.CommandText = "p_stringsvr_string_add_by_id";
                    stringCmd.CommandType = CommandType.StoredProcedure;

                    stringCmd.Parameters.Clear();

                    stringCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = TEST_TITLE_ID;
                    stringCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;  
                
                    stringCmd.Parameters.Add( "@i_string_id", SqlDbType.Int ).Value = TEST_STRING_ID;
                    stringCmd.Parameters["@i_string_id"].Direction = ParameterDirection.Input;
                
                    stringCmd.Parameters.Add( "@vc_locale", SqlDbType.VarChar ).Value = TEST_LOCALE;
                    stringCmd.Parameters["@vc_locale"].Direction = ParameterDirection.Input;
                                
                    stringCmd.Parameters.Add( "@dt_expire", SqlDbType.DateTime ).Value = TEST_EXPIRE_DATE;
                    stringCmd.Parameters["@dt_expire"].Direction = ParameterDirection.Input;
                                
                    stringCmd.Parameters.Add( "@nvc_text", SqlDbType.NText ).Value = TEST_STRING;
                    stringCmd.Parameters["@nvc_text"].Direction = ParameterDirection.Input;

                    stringCmd.Parameters.Add( "@RETURN_VALUE", SqlDbType.Int );
                    stringCmd.Parameters["@RETURN_VALUE"].Direction = ParameterDirection.ReturnValue;

                    stringCmd.ExecuteNonQuery();

                    throw new Exception( "Inserted New String to DB!  Please Wait 10 min for the stringsvr cache to pick up this new item." );
                }

            } //using

        }  //constructor


        public void WriteDashes()
        {
            Console.WriteLine("======================================================================");
        }


        // run per-test, after test
        public void MsgTestTearDown()
        {

        }


        // executes once at the end of all the tests
        public void MsgTestFixtureTearDown()
        {

        }


        #endregion

        #region Tests

        // ========================================================
        // Tests for:  Add String
        // ========================================================

        //add a string, confirm it can be retrieved (10 min?)
        //--> confirm it's in the DB...
        [Test]
        public void AddString()
        {
            WriteDashes();
            Console.WriteLine( "\n\nTesting AddString" );

            using ( SqlConnection stringCN = new SqlConnection( CONNECTION_STRING ) )
            {             
                stringCN.Open();

                // call DB to check that the string isn't there
                SqlCommand stringCmd = stringCN.CreateCommand();                             
                stringCmd.CommandText = "p_stringsvr_strings_get_by_title_and_id";
                stringCmd.CommandType = CommandType.StoredProcedure;

                //the 0xFFFE0000 value for the TitleID becomes -131072 in the DB
                //so, we'll do the 2's complement operation to get the correct INT value... ugh, conversions are *so* tiresome
//                Console.WriteLine("Inverted value is " +  ( - ( System.Convert.ToInt32( ( ~ XOn.DASH_TITLE_ID ) + 1 ) ) ).ToString() );
                stringCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = TEST_DASH_TITLE_ID;  //   -131072
                stringCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;  
                
                stringCmd.Parameters.Add( "@i_string_id", SqlDbType.Int ).Value = TEST_STRING_ID2;
                stringCmd.Parameters["@i_string_id"].Direction = ParameterDirection.Input;
                
                stringCmd.Parameters.Add( "@RETURN_VALUE", SqlDbType.Int );
                stringCmd.Parameters["@RETURN_VALUE"].Direction = ParameterDirection.ReturnValue;

                SqlDataReader stringRdr = stringCmd.ExecuteReader();

                if (stringRdr.HasRows)
                {
                    throw new Exception( "Test String was already present in the DB!!" );
                }

                stringRdr.Close();
                
                // call add string
                bool result = MsgManager.AddString( TEST_STRING_ID, TEST_LANGUAGE_ID2, TEST_STRING2);

                if ( !result )
                {
                    throw new Exception( "Call to AddString Failed with error!!" );
                }

                // check the DB, confirm it's there
                stringRdr = stringCmd.ExecuteReader();

                if ( stringRdr.Read() )
                {

                    throw new Exception( "Test String was not present in the DB after call to AddString!!" );
                }
                else
                {
                    stringRdr.Close();
                }

                // delete it from the DB
                stringCmd.CommandText = "p_stringsvr_string_delete";             
                stringCmd.Parameters.Add( "@si_language", SqlDbType.Int ).Value = TEST_LANGUAGE_ID2;
                stringCmd.Parameters["@i_string_id"].Direction = ParameterDirection.Input; 
                stringCmd.ExecuteNonQuery();

            } //using

        } //addstring


        // ========================================================
        // Tests for:  Check String Exists
        // ========================================================
        // get oldest string ID from NPDB (so it's likely to have gotten into the cache)
        // check that string exists via string svr
        [Test]
        public void CheckStringExistsTest()
        {
            WriteDashes();
            Console.WriteLine( "\n\nTesting CheckStringExistsTest" );

            if ( MsgManager.CheckStringExists( TEST_STRING_ID, XOn.DASH_TITLE_ID, TEST_LOCALE ) )
            {
                //all is well
                Console.WriteLine( "Default test string was found in StringSvr cache... \n" );
            }
            else
            {
                throw new Exception( "Default String not found by string server: stringid - " + TEST_STRING_ID + " titleid " + TEST_TITLE_ID + " lang - " + TEST_LANGUAGE_ID );
            }
        }


        // ========================================================
        // Tests for:  Add User Messages
        // ========================================================
        // create a user
        // add an existing string to a user message
        // enumerate msgs for this user to confirm it's there
        //
        [Test]
        public void AddRecommendedUserMsg()
        {
            WriteDashes();
            Console.WriteLine( "\n\nTesting Add Recommended UserMsg" );

            //create a new user
            ulong testUser = UserBillingInfoTest.CreateUserForTesting( Owner.Country.US );

            if ( testUser == 0 )
            {
                throw new Exception("User was not created!");
            }
            else
            {
                Console.WriteLine( "UserCreated " + testUser.ToString() );
            }

            bool success = MsgManager.AddUserMessage( testUser, MsgDefs.XONLINE_MSG_FLAG_RECOMMENDED, TEST_STRING_ID, TEST_EXPIRATION );
            EnumerateMessagesReply msgQ = MsgManager.EnumerateUserMessageQueue( testUser );

            //since this is a *BRAND NEW* user, the likelihood of them having a message from another source
            //is unlikely, so this is a reasonable test for now
            if ( null == msgQ )
            {
                throw new Exception( "The reply was a null object." );
            }
            if ( msgQ.cMessages == 0 )
            {
                throw new Exception( "There were no messages returned!" );
            }
                                 
            //it worked
            Console.WriteLine( "Success!  Exactly " + msgQ.cMessages + " message returned. " );
            Console.WriteLine( MsgManager.FormattedUserMessageQueue( msgQ ) );
        }


        [Test]
        public void AddRequiredUserMsg()
        {
            WriteDashes();
            Console.WriteLine( "\n\nTesting Add Required UserMsg" );
            //create a new user
            ulong testUser = UserBillingInfoTest.CreateUserForTesting( Owner.Country.US );

            if ( testUser == 0 )
            {
                throw new Exception("User was not created!");
            }
            else
            {
                Console.WriteLine( "UserCreated " + testUser.ToString() );
            }
            bool success = MsgManager.AddUserMessage( testUser, MsgDefs.XONLINE_MSG_FLAG_REQUIRED, TEST_STRING_ID, TEST_EXPIRATION );
            EnumerateMessagesReply msgQ = MsgManager.EnumerateUserMessageQueue( testUser );

            //since this is a *BRAND NEW* user, the likelihood of them having a message from another source
            //is unlikely, so this is a reasonable test for now
            if ( null == msgQ )
            {
                throw new Exception( "The reply was a null object." );
            }
            if ( msgQ.cMessages == 0 )
            {
                throw new Exception( "There were no messages returned!" );
            }
                                 
            //it worked
            Console.WriteLine( "Success! With exactly " + msgQ.cMessages + " message returned. " );
            Console.WriteLine( MsgManager.FormattedUserMessageQueue( msgQ ) );
        }


        // ========================================================
        // Tests for:  Enumerate User Message Queue 
        // ========================================================
        // Isn't this already handled in the AddMessage tests?
        public void EnumerateUserMsgs()
        {
            Console.WriteLine( "\n\nTesting AddTitleMsg" );
            //EnumerateUserMessageQueue ( ulong qwUserPUID )
            if ( true )
            {
                //it worked
            }
            else
            {
                //it didn't
            }
        }


        // ========================================================
        // Tests for:  Delete User Messages 
        // ========================================================
        // for user context:
        //      Delete means RECIPIENT deletes message
        //      Revoke means SENDER deletes message 
        // Since the tool will generally specify a recipient, DELETE will get implemented

        // create a user
        // confirm no user msg exists
        // add user msg
        // confirm user msg exists
        // delete user msgs
        // confirm no msgs

        [Test]
        public void DeleteRequiredUserMsg()
        {
            WriteDashes();
            Console.WriteLine( "\n\nTesting DeleteRequiredUserMsg" );
            //create a new user
            ulong testUser = UserBillingInfoTest.CreateUserForTesting( Owner.Country.US );

            if ( testUser == 0 )
            {
                throw new Exception("User was not created!");
            }
            else
            {
                Console.WriteLine( "UserCreated " + testUser.ToString() );
            }

            bool success = MsgManager.AddUserMessage( testUser, MsgDefs.XONLINE_MSG_FLAG_REQUIRED, TEST_STRING_ID, TEST_EXPIRATION );
            EnumerateMessagesReply msgQ = MsgManager.EnumerateUserMessageQueue( testUser );

            //since this is a *BRAND NEW* user, the likelihood of them having a message from another source
            //is unlikely, so this is a reasonable test for now
            if ( null == msgQ )
            {
                throw new Exception( "The reply from enumerating msgs was a null object." );
            }
            if ( msgQ.cMessages == 0 )
            {
                throw new Exception( "There were no messages returned after the add!" );
            }
                                 
            //it worked
            Console.WriteLine( "Message Successfully added. With exactly " + msgQ.cMessages + " message returned. " );
            Console.WriteLine( MsgManager.FormattedUserMessageQueue( msgQ ) );

            Console.WriteLine( "\nProceeding to Delete... " );

            MsgManager.DeleteUserMessage( testUser, msgQ.rgMessages[ 0 ].dwMessageID, MsgDefs.XONLINE_MSG_FLAG_REQUIRED );

            msgQ = MsgManager.EnumerateUserMessageQueue( testUser );
 
            if ( msgQ.cMessages != 0 )
            {
                throw new Exception( "Message was not deleted. Message count was: " + msgQ.cMessages );
            }
            else
            {
                Console.WriteLine( "Delete test was successful!" );
            }

        } // delete required msg


        [Test]
        public void DeleteRecommendedUserMsg()
        {
            WriteDashes();
            Console.WriteLine( "\n\nTesting DeleteRecommendedUserMsg" );
            //create a new user
            ulong testUser = UserBillingInfoTest.CreateUserForTesting( Owner.Country.US );

            if ( testUser == 0 )
            {
                throw new Exception("User was not created!");
            }
            else
            {
                Console.WriteLine( "UserCreated " + testUser.ToString() );
            }

            bool success = MsgManager.AddUserMessage( testUser, MsgDefs.XONLINE_MSG_FLAG_RECOMMENDED, TEST_STRING_ID, TEST_EXPIRATION );
            EnumerateMessagesReply msgQ = MsgManager.EnumerateUserMessageQueue( testUser );

            //since this is a *BRAND NEW* user, the likelihood of them having a message from another source
            //is unlikely, so this is a reasonable test for now
            if ( !success || ( null == msgQ ) )
            {
                throw new Exception( "The reply was a null object or request returned an error." );
            }
            if ( msgQ.cMessages == 0 )
            {
                throw new Exception( "There were no messages returned!" );
            }

            //it worked
            Console.WriteLine( "Message Successfully added. With exactly " + msgQ.cMessages + " message returned. " );
            Console.WriteLine( MsgManager.FormattedUserMessageQueue( msgQ ) );

            Console.WriteLine( "\nProceeding to Delete... " );              
            MsgManager.DeleteUserMessage( testUser, msgQ.rgMessages[ 0 ].dwMessageID, MsgDefs.XONLINE_MSG_FLAG_RECOMMENDED );

            msgQ = MsgManager.EnumerateUserMessageQueue( testUser );
 
            if ( msgQ.cMessages != 0 )
            {
                throw new Exception( "Message was not deleted. Message count was: " + msgQ.cMessages );
            }
            else
            {
                Console.WriteLine( "Delete test was successful!" );
            }//it didn't

        } // delete recommended msg



        // ========================================================
        // Tests for:  Add Title Message
        // ========================================================
        // create a user
        // get msgs for title, confirm no messages
        // add title msg
        // get titlemsgs
        [Test]
        public void AddRecommendedTitleMsg()
        {
            WriteDashes();
            Console.WriteLine( "\n\nTesting AddRecommendedTitleMsg" );

            bool success = MsgManager.AddTitleMessage( XOn.DASH_TITLE_ID, MsgDefs.XONLINE_MSG_FLAG_RECOMMENDED, TEST_STRING_ID, TEST_EXPIRATION );

            EnumerateSystemMessagesReply sysMsgs = MsgManager.EnumerateSystemMessages( XOn.DASH_TITLE_ID );

            if ( !success || ( null == sysMsgs ) )
            {
                throw new Exception( "The reply was a null object." );
            }
            if ( sysMsgs.cMessages == 0 )
            {
                throw new Exception( "There were no messages returned!" );
            }

            Console.WriteLine( "Success! With exactly " + sysMsgs.cMessages + " message returned. " );
            Console.WriteLine( MsgManager.FormattedSystemMessageQueue( sysMsgs ) );
        }        



        [Test]
        public void AddRequiredTitleMsg()
        {
            WriteDashes();
            Console.WriteLine( "\n\nTesting AddRequiredTitleMsg" );

            bool success = MsgManager.AddTitleMessage( XOn.DASH_TITLE_ID, MsgDefs.XONLINE_MSG_FLAG_REQUIRED, TEST_STRING_ID, TEST_EXPIRATION );

            EnumerateSystemMessagesReply sysMsgs = MsgManager.EnumerateSystemMessages( XOn.DASH_TITLE_ID );

            if ( !success || ( null == sysMsgs ) )
            {
                throw new Exception( "The reply was a null object." );
            }
            if ( sysMsgs.cMessages == 0 )
            {
                throw new Exception( "There were no messages returned!" );
            }

            Console.WriteLine( "Success! With exactly " + sysMsgs.cMessages + " message returned. " );
            Console.WriteLine( MsgManager.FormattedSystemMessageQueue( sysMsgs ) );
        }



        // ========================================================
        // Tests for:  Add System Message
        // ========================================================
        // create a user
        // get msgs for System, confirm no messages
        // add System msg
        // get System msgs
        [Test]
        public void AddSystemRequiredMsg()
        {
            WriteDashes();
            Console.WriteLine( "\n\nTesting AddSystemRequiredMsg" );

            bool success = MsgManager.AddSystemMessage( MsgDefs.XONLINE_MSG_FLAG_REQUIRED, TEST_STRING_ID, TEST_EXPIRATION );

            EnumerateSystemMessagesReply sysMsgs = MsgManager.EnumerateSystemMessages( 0 );  // 0 means SYSTEM messages

            if ( !success || ( null == sysMsgs ) )
            {
                throw new Exception( "The reply was a null object." );
            }
            if ( sysMsgs.cMessages == 0 )
            {
                throw new Exception( "There were no messages returned!" );
            }

            Console.WriteLine( "Success! With exactly " + sysMsgs.cMessages + " message returned. " );
            Console.WriteLine( MsgManager.FormattedSystemMessageQueue( sysMsgs ) );
        }            


        [Test]
        public void AddSystemRecommendedMsg()
        {
            WriteDashes();
            Console.WriteLine( "\n\nTesting AddSystemRecommendedMsg" );
            // MsgManager.AddSystemMessage( uint dwMessageFlags, uint dwStringID, ushort wExpiration )
            bool success = MsgManager.AddSystemMessage( MsgDefs.XONLINE_MSG_FLAG_RECOMMENDED, TEST_STRING_ID, TEST_EXPIRATION );

            EnumerateSystemMessagesReply sysMsgs = MsgManager.EnumerateSystemMessages( 0 );  // 0 means SYSTEM messages

            if ( !success || ( null == sysMsgs ) )
            {
                throw new Exception( "The reply was a null object." );
            }
            if ( sysMsgs.cMessages == 0 )
            {
                throw new Exception( "There were no messages returned!" );
            }

            Console.WriteLine( "Success! With exactly " + sysMsgs.cMessages + " message returned. " );
            Console.WriteLine( MsgManager.FormattedSystemMessageQueue( sysMsgs ) );
        }  


        // isn't this pretty much tested by the Add/Delete tests?
        // ========================================================
        // Tests for:  Enumerate System Messages
        // ========================================================
        // get msgs for System, confirm no messages
        // add multiple System msgs
        // get System msgs, confirm the ones created exist
        public void EnumerateSystemMsg()
        {
            Console.WriteLine( "\n\nTesting EnumerateSystemMsg" );
            // EnumerateSystemMessages( uint titleID )
            if ( true )
            {
                //it worked
            }
            else
            {
                //it didn't
            }
        }


        // ========================================================
        // Tests for:  Delete System Messages - Title
        // ========================================================
        // get msgs for some titleID (??which one?), confirm no messages
        // add title msg
        // delete title msgs
        // confirm no title msg exists
        public void DeleteTitleMsg()
        {
            Console.WriteLine( "\n\nTesting DeleteTitleMsg" );
            // DeleteSystemMessages( uint titleID, uint msgID, uint revokeFlag )
            if ( true )
            {
                //it worked
            }
            else
            {
                //it didn't
            }
        }


        // ========================================================
        // Tests for:  Delete System Messages - System
        // ========================================================
        // get msgs for System, confirm no messages
        // add System msg
        // delete those System msgs
        // confirm no System msgs exist

        public void DeleteSystemMsgs()
        {
            Console.WriteLine( "\n\nTesting DeleteSystemMsgs" );
            // DeleteSystemMessages( uint titleID, uint msgID, uint revokeFlag )
            if ( true )
            {
                //it worked
            }
            else
            {
                //it didn't
            }
        }


        // ========================================================
        // Tests for:  Enumerate System Messages - System
        // ========================================================
        // get msgs for System, confirm no messages
        // add System msg
        // delete those System msgs
        // confirm no System msgs exist


    }
  
        #endregion

#region Helper Functions

    public class MsgHelper
    {

        //get string SQL
        public static void GetStringSQL( string connectionString, int titleID, int stringID, int langID, out string stringText )
        {

            stringText = "";
            using ( SqlConnection stringCN = new SqlConnection( connectionString ) )
            {             

                stringCN.Open();

                // call DB to check that the string isn't there
                SqlCommand stringCmd = stringCN.CreateCommand();                             
                stringCmd.CommandText = "p_stringsvr_strings_get_by_title_and_id";
                stringCmd.CommandType = CommandType.StoredProcedure;

                stringCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = titleID;
                stringCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;  
                
                stringCmd.Parameters.Add( "@i_string_id", SqlDbType.Int ).Value = stringID;
                stringCmd.Parameters["@i_string_id"].Direction = ParameterDirection.Input;
                
                stringCmd.Parameters.Add( "@RETURN_VALUE", SqlDbType.Int );
                stringCmd.Parameters["@RETURN_VALUE"].Direction = ParameterDirection.ReturnValue;

                SqlDataReader stringRdr = stringCmd.ExecuteReader();

                //look for the langID requested... awkward, but ya gotta request the whole set... 
                while ( stringRdr.Read() )
                {
                    if ( (int) stringRdr["si_language"] == langID )
                    {
                        //break out of the loop, and return this value
                        stringText = (string) stringRdr["nvc_text"];
                    }

                }

                if ( stringText == "" )
                {
                    throw new Exception( "Test String was already present in the DB!!" );
                }

            } // using cn

        } // getstringsql

    } //msghelper
        #endregion


} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\PathInfoTest.cs ===
using System;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.diagnostics;
using xonline.tools.framework;


namespace xonline.common.test.tools
{

	/// <summary>
	/// Summary description for PathInfoTest 
	/// </summary>
    public class PathInfoTest : TestNode
    {

        //task: come back and finish writing the other tests
        [TestCase, Ignore]
        public void ParseTest()
        {

        }

    }

} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\service\OldSGInfoClass.cs ===
// --------------------------------------------------------------------------------------
//
// Note: this is a near-exact copy of pre-R2 SGInfo.cs. I took it from the R1 branch on 
// 6/9/2010. Only very minor changes were made to support using it locally in a DVT test.  
// It is otherwise a pure Authdata V3, not V4, implementation.
//
// kgoodier 6/9/2010
//
// --------------------------------------------------------------------------------------
//
// SGInfo.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
//  This provides a class that exposes ticket/auth client data from the security gateway.
//
//  To use it, simply instantiate SGInfo in front-door code, and use the gettable properties
//  on this object.  Note that due to current limitations in ASP.NET, this class will NOT
//  be able to get good auth data in environments where the SG is doing port translation.
//
// Xbox Online Common Managed Code
// Xbox Online Service
//
// Author: Ben Zotto (benzotto)
//
using System;
using System.Web;
using System.IO;
using System.Net;
using System.Text;
using System.Net.Sockets;
using System.Collections.Specialized;
using System.Threading;
using System.Diagnostics;
using System.Collections;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.utilities;
using xonline.common.utilities2;
using xonline.common.service;


[assembly: XomAreaDefinition(XomAreaName.sginfotrace)]

namespace xonline.common.test.service.backcompat
{
    [ComVisible(false)]
    public class CallSource
    {
        private const string CALL_SOURCE_INFO = "CallSourceInfo";

        public static bool IsVirtualInterfacePort( string viface, ushort port )
        {
            bool isVirtualInterface = false;
            IVirtualInterfaceInfo viinfo;

            viinfo = Config.GetVirtualInterface(viface);
            if (null != viinfo)
            {
                if (viinfo.Port == port)
                {
                    isVirtualInterface = true;
                }
            }

            return isVirtualInterface;
        }

        public static string Check(params string[] virtualInterfaces)
        {
            return Check(HttpContext.Current, virtualInterfaces);
        }

        public static string Check(HttpContext context, params string[] virtualInterfaces)
        {
            // Check the port the request came from
            ushort portUsed = GetPort(context);

            foreach (string virtualInterface in virtualInterfaces)
            {
                if (! IsVirtualInterfacePort(virtualInterface, portUsed)) continue;
                context.Items[CALL_SOURCE_INFO] = virtualInterface;
                return virtualInterface;
            }

            throw new XRLException(
                HResult.XONLINE_E_CALL_SOURCE_INVALID, XEvent.Id.SGINFO_CALL_SOURCE_INVALID,
                string.Format("'{0}' called through invalid port '{1}'", context.Request.Url, portUsed)
            );
        }

        public static ushort GetPort( HttpContext ctx )
        {
            // For some reason, HttpContext.Request.Url is rather slow.
            // To help us out, xrlscan has dropped the request port into an
            // HTTP header, which seems to be quicker than getting the port
            // out of the URL. If the header is there, use it.
            string serverPort = ctx.Request.Headers[XHttpHdr.SERVERPORT];
            if (serverPort != null)
            {
                // Strangely, while the REMOTE_PORT server variable returns the port in network
                // order, so we have to byte swap it, the SERVER_PORT server variable returns
                // the port in host order, so no byte swap is required. Very confusing.
                return Convert.ToUInt16(serverPort);
            }
            else
            {
                return (ushort)(ctx.Request.Url.Port);
            }
        }

        // set the call source directly.   this is used to fake
        // out the SG and is generally only used by INH servers
        public static void Set(HttpContext context, string virtualInterface)
        {
            context.Items[CALL_SOURCE_INFO] = virtualInterface;
        }

        public static string Get(HttpContext context)
        {
            return (string) context.Items[CALL_SOURCE_INFO];
        }
    }

    [ComVisible(false)]
    public struct XUIDAndTrust : IComparable
    {
        private const uint XONLINE_USER_GUEST_MASK           = 0x00000003;
        private const uint XONLINE_USER_VOICE_NOT_ALLOWED    = 0x00010000;
        private const uint XONLINE_USER_PURCHASE_NOT_ALLOWED = 0x00020000;
        private const uint XONLINE_USER_COUNTRY_MASK         = 0x0000FF00;
        private const uint XONLINE_USER_TIER_MASK            = 0x00F00000;
        private const uint XONLINE_USER_PARENTAL_CONTROLLED  = 0x01000000;
        private const uint XONLINE_USER_LANGUAGE_MASK        = 0x3E000000;

        public ulong    qwUserID;
        public uint     dwUserFlags;
        public float    userTrust;

        public static void SetUserFlagCountry(ref uint flags, uint country)
        {
            flags &= ~XONLINE_USER_COUNTRY_MASK;
            flags |= (country<<8) & XONLINE_USER_COUNTRY_MASK;
        }

        public static void SetUserFlagLanguage(ref uint flags, uint language)
        {
            flags &= ~XONLINE_USER_LANGUAGE_MASK;
            flags |= (language<<25) & XONLINE_USER_LANGUAGE_MASK;
        }

        public static void SetUserFlagTier(ref uint flags, uint tier)
        {
            flags &= ~XONLINE_USER_TIER_MASK;
            flags |= (tier<<20) & XONLINE_USER_TIER_MASK;
        }

        public XUIDAndTrust(ulong userID, uint userFlags, float paramUserTrust)
        {
            qwUserID = userID;
            dwUserFlags = userFlags;
            userTrust = paramUserTrust;
        }

        public int CompareTo(object obj)
        {
            return qwUserID.CompareTo(((XUIDAndTrust) obj).qwUserID);
        }

        public uint GuestNumber()
        {
            return dwUserFlags & XONLINE_USER_GUEST_MASK;
        }

        public bool IsGuest()
        {
            return (GuestNumber() != 0);
        }

        public byte UserCountry()
        {
            return (byte)((dwUserFlags & XONLINE_USER_COUNTRY_MASK) >> 8);
        }

        public byte UserTier()
        {
            return (byte)((dwUserFlags & XONLINE_USER_TIER_MASK) >> 20);
        }

        public byte UserLanguage()
        {
            return (byte)((dwUserFlags & XONLINE_USER_LANGUAGE_MASK) >> 25);
        }

        public bool CanPurchase()
        {
            return ((dwUserFlags & (XONLINE_USER_GUEST_MASK | XONLINE_USER_PURCHASE_NOT_ALLOWED)) == 0);
        }
    }

    [ComVisible(false)]
    public class BundledAuthData
    {
        public const ushort HTTP_HEADER_BUNDLED_AUTH_DATA_VERSION = 1;

        public BundledAuthData(uint paramTitleID, XUIDAndTrust[] paramUsers)
        {
            titleID = paramTitleID;
            users = paramUsers;
        }

        public BundledAuthData(string base64EncodedString)
        {
            BinaryReader reader = new BinaryReader(new MemoryStream(Convert.FromBase64String(base64EncodedString)));
            ushort wBundledAuthDataVersion;

            wBundledAuthDataVersion = reader.ReadUInt16();
            if(wBundledAuthDataVersion != HTTP_HEADER_BUNDLED_AUTH_DATA_VERSION)
            {
                throw new ExceptionWithEventId(XEvent.Id.AUTHDATA_BAD_BUNDLED_AUTHDATA, "BundledAuthData: Auth data version ("
                    + wBundledAuthDataVersion + ") is incorrect!");
            }
            users = new XUIDAndTrust[reader.ReadUInt16()];
            titleID = reader.ReadUInt32();
            for (int i=0; i<users.Length; ++i)
            {
                users[i] = new XUIDAndTrust(reader.ReadUInt64(), reader.ReadUInt32(), reader.ReadSingle());
            }
        }

        public string GetBase64EncodedString()
        {
            MemoryStream memStream = new MemoryStream(users.Length * 16 + 8);

            BinaryWriter writer = new BinaryWriter(memStream);

            writer.Write(HTTP_HEADER_BUNDLED_AUTH_DATA_VERSION);
            writer.Write((ushort)users.Length);
            writer.Write(titleID);
            for (int i=0; i<users.Length; ++i)
            {
                writer.Write(users[i].qwUserID);
                writer.Write(users[i].dwUserFlags);
                writer.Write(users[i].userTrust);
            }

            return Convert.ToBase64String(memStream.ToArray());
        }

        public readonly uint     titleID;
        public XUIDAndTrust[]   users;

        public void VerifyTitleId(uint titleId)
        {
            if (AuthToggle.Off)
                return;

            if( titleId != titleID )
            {
                throw new ExceptionWithEventId( XEvent.Id.AUTHDATA_VERIFICATION_ERROR, "BundleAuthData.Verify: Title ID *" + titleId.ToString("X") + "* (Bundle says " + titleID.ToString("X") + ") cannot be verfied.");
            }
        }


    }

    [ComVisible(false)]
    public class HTTPAuthData : SGInfo
    {
        public const ushort HTTP_HEADER_AUTH_DATA_VERSION = 3;

        //use this ONLY if you are using XRL common code and won't have SGInfo available (like for tools)
        public HTTPAuthData( ) : this( 0, 0, 0, 0, 0, 0, 0, 0 )
        {

        }

        public HTTPAuthData(ushort port, uint ip, ulong requestId, ulong userID, uint titleID, uint serviceId1, uint serviceId2)
            : this(port, ip, requestId, 0, userID, titleID, serviceId1, serviceId2)
        {
        }

        public HTTPAuthData(ushort port, uint ip, ulong requestId, ulong xboxID, ulong userID, uint titleID, uint serviceId1, uint serviceId2) : base(port, ip, requestId)
        {
            wAuthDataSize    = 0;
            wMajorVersion    = 0;
            wMinorVersion    = 0;
            wBuildNumber     = 0;
            wQFENumber       = 0;
            dwTitleID        = titleID;
            dwTitleVersion   = 0;
            dwTitleRegion    = 0;
            dwConsoleRegion  = 0;
            dwMediaID        = 0;
            wLanguageID      = 0;
            dwAuthDataFlags  = 0;

            qwXboxID         = xboxID;

            // users (XUIDAndTrust)
            xUsers = new XUIDAndTrust[XOn.XONLINE_MAX_LOGON_USERS];
            xUsers[0] = new XUIDAndTrust(userID, 0, 0.0F);
            for( int i = 1; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
            {
                xUsers[i] = new XUIDAndTrust(0, 0, 0.0F);
            }

            // privileges
            wNumPrivileges = 0;
            dwPrivileges = new uint[XOn.XONLINE_NUM_PRIVILEGE_DWORDS];

            if ( serviceId1 > 0 && serviceId1 < XOn.XONLINE_MAX_PRIVILEGE_ID )
            {
                dwPrivileges[0] |= ((uint)1) << (byte)serviceId1;
                wNumPrivileges++;
            }
            if ( serviceId2 > 0 && serviceId2 < XOn.XONLINE_MAX_PRIVILEGE_ID )
            {
                dwPrivileges[0] |= ((uint)1) << (byte)serviceId2;
                wNumPrivileges++;
            }

            // services
            wNumDwordServices = 0;
            dwServiceIds = new uint[XOn.XONLINE_MAX_DWORD_SERVICEIDS];

            if ( serviceId1 > XOn.XONLINE_MAX_PRIVILEGE_ID )
            {
                dwServiceIds[wNumDwordServices++] = serviceId1;
            }

            if ( serviceId2 > XOn.XONLINE_MAX_PRIVILEGE_ID )
            {
                dwServiceIds[wNumDwordServices++] = serviceId2;
            }

            dwAltTitleID = new uint[XOn.XONLINE_MAX_ALTERNATE_TITLE_ID];
            for( int i = 0; i < XOn.XONLINE_MAX_ALTERNATE_TITLE_ID; i++ )
            {
                dwAltTitleID[i] = 0;
            }

            key = new byte[XOn.XONLINE_KEY_LENGTH];
        }

        public HTTPAuthData(ushort port, uint ip, ulong requestId, ulong xboxID, XUIDAndTrust[] users, uint titleID, uint serviceId1, uint serviceId2) : base(port, ip, requestId)
        {
            wAuthDataSize    = 0;
            wMajorVersion    = 0;
            wMinorVersion    = 0;
            wBuildNumber     = 0;
            wQFENumber       = 0;
            dwTitleID        = titleID;
            dwTitleVersion   = 0;
            dwTitleRegion    = 0;
            dwConsoleRegion  = 0;
            dwMediaID        = 0;
            wLanguageID      = 0;
            dwAuthDataFlags  = 0;

            wNumPrivileges   = 0;
            dwPrivileges = new uint[XOn.XONLINE_NUM_PRIVILEGE_DWORDS];

            qwXboxID         = xboxID;

            // users (XUIDAndTrust)
            xUsers = new XUIDAndTrust[XOn.XONLINE_MAX_LOGON_USERS];
            for( int i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
            {
                if (i < users.Length)
                {
                    xUsers[i] = users[i];
                }
                else
                {
                    xUsers[i] = new XUIDAndTrust(0, 0, 0.0F);
                }
            }

            // privileges and services
            if ( serviceId1 > 0 && serviceId1 < XOn.XONLINE_MAX_PRIVILEGE_ID )
            {
                dwPrivileges[0] |= ((uint)1) << (byte)serviceId1;
                wNumPrivileges++;
            }
            if ( serviceId2 > 0 && serviceId2 < XOn.XONLINE_MAX_PRIVILEGE_ID )
            {
                dwPrivileges[0] |= ((uint)1) << (byte)serviceId2;
                wNumPrivileges++;
            }

            wNumDwordServices = 0;
            dwServiceIds = new uint[XOn.XONLINE_MAX_DWORD_SERVICEIDS];

            if ( serviceId1 > XOn.XONLINE_MAX_PRIVILEGE_ID )
            {
                dwServiceIds[wNumDwordServices++] = serviceId1;
            }

            if ( serviceId2 > XOn.XONLINE_MAX_PRIVILEGE_ID )
            {
                dwServiceIds[wNumDwordServices++] = serviceId2;
            }

            dwAltTitleID = new uint[XOn.XONLINE_MAX_ALTERNATE_TITLE_ID];
            for( int i = 0; i < XOn.XONLINE_MAX_ALTERNATE_TITLE_ID; i++ )
            {
                dwAltTitleID[i] = 0;
            }

            key = new byte[XOn.XONLINE_KEY_LENGTH];
        }

        // This only sets the privilege when it is within XONLINE_MAX_PRIVILEGE_ID - enforced by casting to byte
        public void SetPrivilege(byte privilegeId)
        {
            int nIndex    = privilegeId / 32;
            int nbitIndex = privilegeId % 32;
            uint mask    = ((uint)1) << nbitIndex;

            if ((dwPrivileges[nIndex] & mask) == 0)
            {
                dwPrivileges[nIndex] |= mask;
                wNumPrivileges++;
            }
        }

        public string GetBase64EncodedString()
        {
            return ConstructBase64String();
        }
    }

    [ComVisible(false)]
    [XomPerformanceCounterCategoryAttr(
        "XBox SGInfo",
        "XBox Online CLR Auth check component",
        true /* Shared PerfCategory */)]
    public class SGInfoCounters : XomPerformanceCounterCategory
    {
        [XomPerformanceCounterAttr(
            "Auth requests per second",
            "Auth requests per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter AuthRequestsPerSecond;

        [XomPerformanceCounterAttr(
            "Auth requests total",
            "Auth requests total",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter AuthRequestsTotal;

        [XomPerformanceCounterAttr(
            "Retries per second",
            "Retries per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter RetriesPerSecond;

        [XomPerformanceCounterAttr(
            "Retries total",
            "Retries total",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter RetriesTotal;

        [XomPerformanceCounterAttr(
            "Failed requests per second",
            "Failed requests per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter FailedRequestsPerSecond;

        [XomPerformanceCounterAttr(
            "Failed requests total",
            "Failed requests total",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter FailedRequestsTotal;

        [XomPerformanceCounterAttr(
            "Avg waiting time",
            "Average waiting time spent in auth request",
             PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter AvgWaitingTime;

        [XomPerformanceCounterAttr(
            "Avg waiting time base",
            "Avg waiting time base",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter AvgWaitingTimeBase;

        static public SGInfoCounters Counters = new SGInfoCounters();
    }


    //
    //  AuthToggle: Wraps the guts of turning on/off SG auth checking by config file.
    //
    [ComVisible(false)]
    public class AuthToggle
    {
        private static bool mGotSetting = false;

        // static toggle saying whether to ignore auth data from SG
        // default to TRUE
        //
        private static bool mVerifyAuthData = true;

        // static constructor to get config settings for XBOS.
        private static void GetAuthToggle()
        {
            string r = Config.GetSetting(Setting.sginfo_verifyAuth);
            if(r != null)
            {
                r = r.ToUpper();
                if( r == "FALSE" || r == "NO" || r == "OFF" )
                {
                    // have to tell EventBuilder to not get SGInfo, or else we'll cause
                    // infinite recursion!
                    EventBuilder.ShowSGInfo = false;
                    Xom.NtEvent( XEvent.Id.MC_SGINFO_IS_OFF,
                        "SG AUTH DATA VERIFICATION HAS BEEN TURNED OFF. This should NEVER happen in production." );

                    mVerifyAuthData = false;
                }
            }
            mGotSetting = true;
        }

        public static bool On
        {
            get
            {
                if(mGotSetting == false)
                {
                    GetAuthToggle();
                }
                return (mVerifyAuthData == true);
            }
        }

        public static bool Off
        {
            get
            {
                if(mGotSetting == false)
                {
                    GetAuthToggle();
                }
                return (mVerifyAuthData == false);
            }
        }

    }

    [ComVisible(false)]
    public class SGInfo
    {

        // the following structures are defined in xonline.x for the XSGInfo stuff.
        // they are mirrored here.
        //
        private struct sgMessageHeader
        {
            public ushort _wType;
            public ushort _cbEnt;
        }
        const int sizeMessageHeader = 4;

        private struct sgMessageSpiRequest
        {
            public uint   _dwReqNum;    // request number from requester
            public uint   _ipaZ;        // this is an IN_ADDR with just the "long" part exposed
            public ushort _ipportZ;     // IP port of client on DMZ
        }
        const int sizeMessageSpiRequest = 10;

        private struct sgMessageSpiResponse
        {
            public uint   _dwReqNum;
            public uint   _ipaZ;
            public ushort _ipportZ;
            public byte   _fNotFound;
        }
        const int sizeMessageSpiResponse = 11;

        protected const int XONLINE_MAX_NUMBER_SERVICE_PER_TICKET = 12;

        protected const int XONLINE_SG_MESSAGE_PORT       = 0xFFFF;
        protected const int XONLINE_SG_REQ_RETRIES        = 4;        // Number of retries. Each retry doubles prevous timeout.
        protected const int XONLINE_SG_REQ_TIMEOUT        = 200000;   // 200 milliseconds timeout for first request, doubled every subsequent request
                                                                      // Net result is 4 requests with timeouts of 200, 400, 800, and 1600 milliseconds
        protected const ushort XONLINE_AUTHDATA_VERSION   = 0x02 ;
        protected const ushort XONLINE_XENON_AUTHDATA_VERSION   = 0x03 ;
        protected const ushort SGMSG_TYPE_SPIDATA_REQ     = 0x4710;  // CSgMsgSpiReq2
        protected const ushort SGMSG_TYPE_SPIDATA_REP     = 0x4711;  // CSgMsgSpiRep2

        protected const ushort SGMSG_TYPE_SPIDATA         = 0x4782;  // CSgMsgSpiData2 in the payload
        protected const ushort SGMSG_TYPE_AUTHDATA        = 0x4783;  // CAuthData2 in the payload

        //  the following fields are in the SG Info structure. (XKERB_AD_XENON)
        //

        protected ushort    wAuthDataVersion;
        protected ushort    wAuthDataSize;        // Size of this struct in bytes

        // XBOX_LIBRARY_VERSION     clientVersion;
        protected ushort    wMajorVersion;
        protected ushort    wMinorVersion;
        protected ushort    wBuildNumber;
        protected ushort    wQFENumber;
        //

        protected uint      dwTitleID;
        protected uint      dwTitleVersion;
        protected uint      dwTitleRegion;
        protected uint      dwConsoleRegion;
        protected uint      dwMediaID;
        protected ushort    wLanguageID;

        // authdata flags
        public const uint XONLINE_AUTHDATA_FLAGS_ISXENON_MASK      = 0x01;  // Deprecated!
        public const uint XONLINE_AUTHDATA_FLAGS_ISXENONBACKCOMPAT = 0x02;
        public const uint XONLINE_AUTHDATA_FLAGS_ISDEVKIT          = 0x04;
        public const uint XONLINE_AUTHDATA_FLAGS_ISTESTKIT         = 0x08;
        public const uint XONLINE_AUTHDATA_FLAGS_ISBETAMACHINE     = 0x10;
        public const uint XONLINE_AUTHDATA_FLAGS_ISLIMITEDMACHINE  = 0x20;

        protected uint      dwAuthDataFlags;

        protected ushort    wNumPrivileges;
        protected uint[]    dwPrivileges;

        protected ulong     qwXboxID;

        //List of alternate title IDs
        //DWORD dwAltTitleID[XONLINE_MAX_ALTERNATE_TITLE_ID]
        protected uint[]    dwAltTitleID;

        // Key used for signing data within a session
        protected byte[]    key;

        // The high 16 bits of dwUserFlags should come from the UODB User Table.

        protected XUIDAndTrust[]   xUsers;

        // user guest range
        public const ulong XONLINE_GUEST_XUID_START                = 0x0040000000000000;
        public const ulong XONLINE_GUEST_XUID_END                  = 0x004fffffffffffff;


        protected uint     dwNumServices;
        protected ushort   wNumDwordServices;

        //DWORD dwServiceID[XONLINE_MAX_NUMBER_SERVICE_PER_TICKET];
        protected uint[]   dwServiceIds;
        //

        // the rest of the spidata structure (CSgMsgSpiData)

        protected ushort  _ipportI;                   // IP port of the client on the Internet
        protected uint    _ipaI;                      // IP address of the client on the Internet
        protected byte[]  _sgaddr;                    // SGADDR of the client
        protected ushort  _wVersionKeyEx;             // KeyEx version of the client
        protected ushort  _wFlagsKeyEx;               // Flags sent in KeyEx initiator
        protected ulong   _liNonce;                   // A random nonce associated with this session
        protected ulong   _liTimeInit;                // FILETIME marking session initiation
        protected uint    _fCs;                       // TRUE if SG is providing connection services

        // size of the spidata structure
        protected const int sizeSpiData = 186;
        protected const int sizeSpiData2 = 54;


        // the following is the STATIC request number.  it is initialized to 0, and
        // should only be used with the Interlocked.Increment protection
        //
        protected static int staticRequestNumber = 0;

        // the instance reqnum, set when a request is first made.
        protected int thisRequestNumber;

        // config settings
        //
        protected static int _maxRetries;
        protected static int _sgTimeout;
        protected static bool _verifyTestTitleVersion;

        // SG ip
        protected IPAddress _srcIP;
        protected ushort    _srcPort;

        // indicates whether this is an internal request - that it came from a non-sg
        // source to a internal interface
        protected bool _isInternal = false;

        public static SGInfo Current
        {
            get
            {
                if (AuthToggle.Off)
                    return null;

                SGInfo sg = null;
                if (HttpContext.Current != null)
                {
                    sg = (SGInfo)HttpContext.Current.Items["SGInfo"];
                }

                if (sg == null)
                {
                    sg = new SGInfo();
                    if (HttpContext.Current != null)
                    {
                        HttpContext.Current.Items["SGInfo"] = sg;
                    }
                }

                return sg;
            }
        }

        public static bool IsCached
        {
            get 
            {
                try
                {
                    return HttpContext.Current != null && HttpContext.Current.Items["SGInfo"] != null;
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        public static bool IsAvailable
        {
            get
            {
                if (IsCached)
                {
                    return true;
                }

                // If request definitely came from an SG, say yes. If request did not come 
                // from an SG and there is httpauthdata available, say yes. Otherwise say 
                // no. 
                //
                // What matters is we get close to the right answer.

                try 
                {
                    // TODO: really need a way to pass in the HttpContext
                    if (HttpContext.Current == null || HttpContext.Current.Request == null)
                    {
                        return false;
                    }

                    // Need to be an internal interface for HttpAuthData to be valid.
                    if (CallSource.Get(HttpContext.Current) != null)
                    {
                        string viface = CallSource.Get(HttpContext.Current);
                        if (viface != VirtualInterface.None)
                        {
                            IVirtualInterfaceInfo viinfo = Config.GetVirtualInterface(viface);
                            // Interface configured for SG SGInfo or HttpAuthData SGInfo?
                            if (null != viinfo && !viinfo.NeedSGInfo)
                            {
                                // SGInfo is available if header is present, otherwise no
                                return (null != HttpContext.Current.Request.Headers[XHttpHdr.HTTPAUTHDATA]);
                            }
                        }
                    }

                    // Looks like a real SG. So let's check the source IP/port with known 
                    // SG client ranges.
                    //
                    // @@@ Treat Unknown as yes or no? basically means no httpcontext (not 
                    // true here), no interface info (errr), or from an STF test. I think 
                    // we should go with yes.
                    //
                    SGAddressValidator.Answer ans = SGAddressValidator.Check(HttpContext.Current);
                    switch (ans)
                    {
                    case SGAddressValidator.Answer.Yes:
                    case SGAddressValidator.Answer.Unknown:
                        return true;
                    case SGAddressValidator.Answer.No:
                        return false;
                    default:
                        return false;
                    }
                }
                catch (Exception)
                {
                    return false;
                }
            }
        }

        private static LockFreeStack<SGSocket> _socketPool = new LockFreeStack<SGSocket>();

        class SGSocket
        {
            public NativeSocket _socket;
            public byte[] _buffer;

            public SGSocket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType, int cbBuffer)
            {
                _socket = new NativeSocket(addressFamily, socketType, protocolType);
                _buffer = new byte[cbBuffer];
            }
        }

        static SGInfo()
        {
            // load config settings
            _maxRetries = Config.GetIntSetting(Setting.sginfo_maxRetries);
            Xom.Trace(XomAreaName.sginfotrace, LogLevel.L_LOW, "SGInfo: Set MaxRetries to " + _maxRetries);

            _sgTimeout = Config.GetIntSetting(Setting.sginfo_timeout);
            Xom.Trace(XomAreaName.sginfotrace, LogLevel.L_LOW, "SGInfo: Set Timeout to " + _sgTimeout + " milliseconds.");

            _verifyTestTitleVersion = Config.GetBoolSetting(Setting.sginfo_verifyTestTitleVersion);
            Xom.Trace(XomAreaName.sginfotrace, LogLevel.L_LOW, "SGInfo: Set VerifyTestTitleVersion to " + _verifyTestTitleVersion);
        }


        // This is a special constructor for HTTPAuthData construction
        public SGInfo(ushort port, uint ip, ulong requestId)
        {
            CreateSGInfoData(port, ip, requestId);
        }

        /// <summary>
        /// The default constructor will create a new SGInfo with all the current information from
        /// the security gateway.
        /// </summary>
        public SGInfo() : this(HttpContext.Current)
        {
        }

        public SGInfo(string sIPPort)
        {
            int colon = sIPPort.IndexOf(':');
            if (colon == -1)
            {
                throw new ExceptionWithEventId(XEvent.Id.AUTHDATA_VERIFICATION_ERROR_1, "SGIPPort invalid: " + sIPPort);
            }
            _srcIP = IPAddress.Parse(sIPPort.Substring(0,colon));
            _srcPort = (ushort)IPAddress.HostToNetworkOrder((short)Convert.ToUInt16(sIPPort.Substring(colon + 1)));

            GetInfoFromSG();
        }

        public SGInfo(IPAddress ipAddr, ushort wPort)
        {
            _srcIP = ipAddr;
            _srcPort = (ushort)IPAddress.HostToNetworkOrder((short)wPort);

            GetInfoFromSG();
        }
        
        public SGInfo(HttpContext ctx)
        {
            if (ctx == null)
            {
                return;
            }
            string httpAuthData = ctx.Request.Headers[XHttpHdr.HTTPAUTHDATA];
            string viface = VirtualInterface.None;
            bool fGetSGInfo = true;

            if (CallSource.Get(ctx) != null)
            {
                viface = CallSource.Get(ctx);
            }

            string sgIPPort = ctx.Request.Headers[XHttpHdr.SGIPPORT];
            if (sgIPPort != null)
            {
                // The UDP adaptor adds this header so the front door attempts to talk back to the
                // correct IP and port.
                // XrlScan also adds this header, because the GetServerVariables() call below
                // is incredibly expensive (for reasons beyond our understanding...)
                Xom.Trace(XomAreaName.sginfotrace, LogLevel.L_LOW, "SGIPPort header detected, value: " + sgIPPort + " (note port value is in network order)");
                // USe the last index because the address could be an IPv6 addr if running on xblob.
                int colon = sgIPPort.LastIndexOf(':');
                if (colon == -1)
                {
                    throw new ExceptionWithEventId(XEvent.Id.AUTHDATA_VERIFICATION_ERROR_1, "SGIPPort invalid: " + sgIPPort);
                }
                _srcIP = IPAddress.Parse(sgIPPort.Substring(0,colon));
                _srcPort = (ushort)IPAddress.HostToNetworkOrder((short)Convert.ToUInt16(sgIPPort.Substring(colon + 1)));
            }
            else
            {
                _srcIP = IPAddress.Parse(ctx.Request.UserHostAddress);
                _srcPort = (ushort)IPAddress.HostToNetworkOrder((short)Convert.ToUInt16(ctx.Request.ServerVariables.Get("REMOTE_PORT")));
            }

            if (viface != VirtualInterface.None)
            {
                IVirtualInterfaceInfo viinfo = Config.GetVirtualInterface(viface);
                if (null != viinfo)
                {
                    if (!viinfo.NeedSGInfo)
                    {
                        fGetSGInfo = false;
                    }
                }

            }
            
            if (fGetSGInfo)
            {
                GetInfoFromSG();

                // check this after getting the SGInfo, because we log out the info on the error.
                if (httpAuthData != null)
                {
                    throw new ExceptionWithEventId(XEvent.Id.AUTHDATA_VERIFICATION_ERROR_2, "SGInfo: This SG("+_srcIP+") tried to send us fake HTTP AuthData: " + ToString());
                }
            }
            else
            {
                GetInfoFromHttp(httpAuthData);
            }
        }

        private void GetInfoFromSG()
        {
            BinaryReader sgInfo = null;
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            SGSocket sgsock;
            byte[] sgRequest;
            byte[] sgResponse = null;
            bool haveData = false;
            int recBytes = 0;
            bool fRetry = true;


            lRetry:

            try
            {
                SGInfoCounters.Counters.AuthRequestsPerSecond.Increment();
                SGInfoCounters.Counters.AuthRequestsTotal.Increment();

                Xom.Trace(XomAreaName.sginfotrace, LogLevel.L_LOW, "Requesting auth data from security gateway for user at "
                    + _srcIP.ToString() + ":" + _srcPort + "..." );

                sgsock = _socketPool.Pop();

                if (sgsock == null)
                {
                    sgsock = new SGSocket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp, 1500);
                    // removed:  is this important here?
                    // sock.Blocking = false;
                    IPEndPoint epLocal = new IPEndPoint(IPAddress.Any, 0);
                    sgsock._socket.Bind(epLocal);
                }

                // build SG request.
                sgRequest = BuildRequest(_srcIP, _srcPort);

                IPEndPoint SgMsgPort = new IPEndPoint(_srcIP, XONLINE_SG_MESSAGE_PORT);

                try
                {
                    IPEndPoint ep = new IPEndPoint(IPAddress.Any, 0);

                    // first clear any remaining traffic sitting on this old socket.
                    while (sgsock._socket.Select(0, SelectMode.SelectRead))
                    {
                        sgsock._socket.ReceiveFrom(sgsock._buffer, ref ep);
                    }

                    for(int i=0; i < _maxRetries; i++ )
                    {
                        //send the request
                        sgsock._socket.SendTo(sgRequest, SgMsgPort);

                        if(sgsock._socket.Select(_sgTimeout * 1000 * (1 << i), SelectMode.SelectRead))
                        {
                            sgResponse = sgsock._buffer;

                            recBytes = sgsock._socket.ReceiveFrom(sgResponse, ref ep);

                            if(sgResponse != null && recBytes > 0)
                            {
                                sgInfo = new BinaryReader(new MemoryStream(sgResponse));

                                // we've succeeded in getting results if we're here.
                                // see if they're meaningful.
                                haveData = VerifyResponse(sgInfo, true);

                                if (haveData)
                                {
                                    break;
                                }
                                else
                                {
                                    haveData = false;
                                    sgInfo = null;
                                    sgResponse = null;
                                    recBytes = 0;
                                }
                            }
                        }

                        SGInfoCounters.Counters.RetriesPerSecond.Increment();
                        SGInfoCounters.Counters.RetriesTotal.Increment();
                    }

                    _socketPool.Push(sgsock);
                }
                catch(Exception e)
                {
                    sgsock._socket.Shutdown(SocketShutdown.Both);
                    sgsock._socket.Close();
                    sgsock._socket = null;
                    sgsock._buffer = null;
                    sgsock = null;

                    if (fRetry == false)
                    {
                        throw new ExceptionWithEventId(XEvent.Id.AUTHDATA_SG_COMMUNICATION_ERROR, "SG("+_srcIP+"): " + e);
                    }
                    else
                    {
                        fRetry = false;
                        goto lRetry;
                    }
                }

                if(sgResponse != null && recBytes > 0)
                {
                    sgInfo = new BinaryReader(new MemoryStream(sgResponse));

                    // we've succeeded in getting results if we're here.
                    // see if they're meaningful.
                    haveData = VerifyResponse(sgInfo, true);
                }
                else
                {
                    throw new ExceptionWithEventId(XEvent.Id.COMMON_COMM_31, "SGInfo: Can't talk to SG("+_srcIP+"). Timed out after " + _maxRetries
                        + " attempts! (req #" + thisRequestNumber + ")" );
                }

                // make sure we have valid data.
                if (haveData == false)
                {
                    throw new ExceptionWithEventId(XEvent.Id.AUTHDATA_SG_COMMUNICATION_ERROR_1, "SGInfo: can't successfully contact SG("+_srcIP+") for auth data");
                }

                Xom.Trace(XomAreaName.sginfotrace, LogLevel.L_LOW, "Valid auth data retrieved from SG.  Reading..." );

                ReadSgInfo(sgInfo, false);

                // indicate that request came from a SG source
                _isInternal = false;
            }
            catch(Exception)
            {
                SGInfoCounters.Counters.FailedRequestsPerSecond.Increment();
                SGInfoCounters.Counters.FailedRequestsTotal.Increment();

                throw;
            }
            finally
            {
                long elapsed = timeElapsed.TimeElapsed;

                SGInfoCounters.Counters.AvgWaitingTime.IncrementBy(elapsed);
                SGInfoCounters.Counters.AvgWaitingTimeBase.Increment();
            }
        }

        protected void GetInfoFromHttp(string httpAuthData)
        {
            BinaryReader sgInfo = null;

            if (httpAuthData == null)
            {
                // This is a datacenter call, but the header is missing, so create a placeholder
                CreateSGInfoData(_srcPort, 0, 0);
            }
            else
            {
                byte[] httpBytes = Convert.FromBase64String(httpAuthData);
                sgInfo = new BinaryReader(new MemoryStream(httpBytes));

                ushort version = sgInfo.ReadUInt16();
                if (version == SGMSG_TYPE_SPIDATA_REP)
                {
                    // auth data from an SG, treat it like normal sg information
                    sgInfo.BaseStream.Seek(0, SeekOrigin.Begin);

                    VerifyResponse(sgInfo, false);
                    ReadSgInfo(sgInfo, false);
                }
                else if (version == HTTPAuthData.HTTP_HEADER_AUTH_DATA_VERSION)
                {
                    _ipportI         = sgInfo.ReadUInt16();
                    _ipaI            = sgInfo.ReadUInt32();
                    _sgaddr          = null;
                    _wVersionKeyEx   = 0;
                    _wFlagsKeyEx     = 0;
                    _liNonce         = sgInfo.ReadUInt64();
                    _liTimeInit      = (ulong)DateTime.Now.Ticks;
                    _fCs             = 0;

                    ReadSgInfo(sgInfo, true);
                }
                else
                {
                    throw new ExceptionWithEventId(XEvent.Id.AUTHDATA_BAD_HTTP_AUTHDATA, "SGInfo: HTTP AuthData has bad version: " + version.ToString() );
                }
            }

            // indicate that request came from a non-SG source
            _isInternal = true;
        }

        // This is a special constructor for HTTPAuthData construction
        public void CreateSGInfoData(ushort port, uint ip, ulong requestId)
        {
            wAuthDataVersion = XONLINE_XENON_AUTHDATA_VERSION;
            _ipportI = port;
            _ipaI = ip;
            _liNonce = requestId;

            _sgaddr          = null;
            _wVersionKeyEx   = 0;
            _wFlagsKeyEx     = 0;
            _liTimeInit      = (ulong)DateTime.Now.Ticks;
            _fCs             = 0;

            wNumPrivileges = 0;
            dwPrivileges = new uint[XOn.XONLINE_NUM_PRIVILEGE_DWORDS];

            wNumDwordServices = 0;
            dwServiceIds = new uint[XOn.XONLINE_MAX_DWORD_SERVICEIDS];

            xUsers = new XUIDAndTrust[XOn.XONLINE_MAX_LOGON_USERS];
            for( int i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
            {
                xUsers[i] = new XUIDAndTrust(0, 0, 0.0F);
            }

            dwAltTitleID = new uint[XOn.XONLINE_MAX_ALTERNATE_TITLE_ID];

            key = new byte[XOn.XONLINE_KEY_LENGTH];
        }

        private void ReadSgInfo(BinaryReader reader, bool onlyAuthData)
        {
            sgMessageHeader authHdr;
            authHdr._wType = SGMSG_TYPE_AUTHDATA;
            authHdr._cbEnt = 0;

            // if we're getting more than authdata then get ready to read the spy.
            if (!onlyAuthData)
            {
                _ipportI         = reader.ReadUInt16();
                _ipaI            = reader.ReadUInt32();
                _sgaddr          = reader.ReadBytes(20);
                _wVersionKeyEx   = reader.ReadUInt16();
                _wFlagsKeyEx     = reader.ReadUInt16();
                _liNonce         = reader.ReadUInt64();
                _liTimeInit      = reader.ReadUInt64();
                _fCs             = reader.ReadUInt32();

                // read the spi header.
                authHdr._wType   = reader.ReadUInt16();
                authHdr._cbEnt   = reader.ReadUInt16();
            }

            wAuthDataVersion = reader.ReadUInt16();
            if(wAuthDataVersion == XONLINE_XENON_AUTHDATA_VERSION)
            {
                ReadXenonSgInfo(reader, authHdr, onlyAuthData);
            }
            else if (wAuthDataVersion == XONLINE_AUTHDATA_VERSION)
            {
                ReadV2SgInfo(reader, authHdr, onlyAuthData);
            }
            else
            {
                throw new ExceptionWithEventId(XEvent.Id.AUTHDATA_BAD_SG_AUTHDATA, "SGInfo: Auth data from SG("+_srcIP+") version ("
                    + wAuthDataVersion + ") is incorrect!");
            }

        }

        private void ReadXenonSgInfo(BinaryReader reader, sgMessageHeader authHdr, bool onlyAuthData)
        {

            wAuthDataSize    = reader.ReadUInt16();
            wMajorVersion    = reader.ReadUInt16();
            wMinorVersion    = reader.ReadUInt16();
            wBuildNumber     = reader.ReadUInt16();
            wQFENumber       = reader.ReadUInt16();
            dwTitleID        = reader.ReadUInt32();
            dwTitleVersion   = reader.ReadUInt32();
            dwTitleRegion    = reader.ReadUInt32();
            dwConsoleRegion  = reader.ReadUInt32();
            dwMediaID        = reader.ReadUInt32();
            wLanguageID      = reader.ReadUInt16();
            dwAuthDataFlags  = reader.ReadUInt32();

            wNumPrivileges   = reader.ReadUInt16();

            dwPrivileges = new uint[XOn.XONLINE_NUM_PRIVILEGE_DWORDS];
            for( int i = 0; i < XOn.XONLINE_NUM_PRIVILEGE_DWORDS; i++ )
            {
                dwPrivileges[i] = reader.ReadUInt32();
            }

            // read Xbox puid
            qwXboxID         = reader.ReadUInt64();

            // read users (XUIDAndTrust)
            xUsers = new XUIDAndTrust[XOn.XONLINE_MAX_LOGON_USERS];
            for( int i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
            {
                xUsers[i] = new XUIDAndTrust(reader.ReadUInt64(), reader.ReadUInt32(), 0.0F);
            }
            Xom.Trace(XomAreaName.sginfotrace, LogLevel.L_NORMAL, string.Format("Users:({0},{1},{2},{3})",
                xUsers[0].qwUserID,xUsers[1].qwUserID,xUsers[2].qwUserID,xUsers[3].qwUserID));

            // read user trust factors.
            for( int i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
            {
                // set the user trust factor.
                xUsers[i].userTrust = reader.ReadSingle();
            }

            wNumDwordServices = reader.ReadUInt16();

            dwServiceIds = new uint[XOn.XONLINE_MAX_DWORD_SERVICEIDS];

            // read DWORD service ids
            for( int i = 0; i < XOn.XONLINE_MAX_DWORD_SERVICEIDS; i++ )
            {
                uint serviceID = reader.ReadUInt32();
                if ( serviceID != 0 )
                {
                    dwServiceIds[dwNumServices++] = serviceID;
                }
            }

            dwNumServices = (uint)(wNumPrivileges + wNumDwordServices);

            dwAltTitleID = new uint[XOn.XONLINE_MAX_ALTERNATE_TITLE_ID];

            //  read additional auth data information for later auth data structures.
            // read alternate title IDs
            for( int i = 0; i < XOn.XONLINE_MAX_ALTERNATE_TITLE_ID; i++ )
            {
                dwAltTitleID[i] = reader.ReadUInt32();
            }

            // read ticket key
            key = reader.ReadBytes((int)XOn.XONLINE_KEY_LENGTH);
        }

        private void ReadV2SgInfo(BinaryReader reader, sgMessageHeader authHdr, bool onlyAuthData)
        {

            wAuthDataSize    = reader.ReadUInt16();
            wMajorVersion    = reader.ReadUInt16();
            wMinorVersion    = reader.ReadUInt16();
            wBuildNumber     = reader.ReadUInt16();
            wQFENumber       = reader.ReadUInt16();
            dwTitleID        = reader.ReadUInt32();
            dwTitleVersion   = reader.ReadUInt32();
            dwTitleRegion    = reader.ReadUInt32();
            qwXboxID         = reader.ReadUInt64();

            // read users (XUIDAndTrust)
            xUsers = new XUIDAndTrust[XOn.XONLINE_MAX_LOGON_USERS];
            for( int i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
            {
                xUsers[i] = new XUIDAndTrust(reader.ReadUInt64(), reader.ReadUInt32(), 0.0F);
            }
            Xom.Trace(XomAreaName.sginfotrace, LogLevel.L_NORMAL, string.Format("Users:({0},{1},{2},{3})",
                xUsers[0].qwUserID,xUsers[1].qwUserID,xUsers[2].qwUserID,xUsers[3].qwUserID));

            // read services
            dwNumServices = reader.ReadUInt32();
            dwServiceIds = new uint[XONLINE_MAX_NUMBER_SERVICE_PER_TICKET];
            for( int i = 0; i < XONLINE_MAX_NUMBER_SERVICE_PER_TICKET; i++ )
            {
                dwServiceIds[i]  = reader.ReadUInt32();
            }


            dwAltTitleID = new uint[XOn.XONLINE_MAX_ALTERNATE_TITLE_ID];

            //  read additional auth data information for later auth data structures.
            if ( authHdr._wType  == SGMSG_TYPE_AUTHDATA )
            {
                // read user truct factors.
                for( int i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
                {
                    // set the user trust factor.
                    xUsers[i].userTrust = reader.ReadSingle();
                }

                // read alternate title IDs
                for( int i = 0; i < XOn.XONLINE_MAX_ALTERNATE_TITLE_ID; i++ )
                {
                    dwAltTitleID[i] = reader.ReadUInt32();
                }

                // read ticket key
                key = reader.ReadBytes((int)XOn.XONLINE_KEY_LENGTH);
            }
            else
            {
                for( int i = 0; i < XOn.XONLINE_MAX_ALTERNATE_TITLE_ID; i++ )
                {
                    dwAltTitleID[i] = 0;
                }
                key = new byte[XOn.XONLINE_KEY_LENGTH];
            }

            // dummy data from v3 privs
            dwPrivileges = new uint[XOn.XONLINE_NUM_PRIVILEGE_DWORDS];

        }


        private byte[] BuildRequest(IPAddress ip, ushort port)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter wr = new BinaryWriter(ms);
            sgMessageHeader header;
            sgMessageSpiRequest req;
            byte[] reqSize;

            // build the data into structs for clean maintenance
            header._wType = SGMSG_TYPE_SPIDATA_REQ;
            header._cbEnt = sizeMessageHeader + sizeMessageSpiRequest;
            thisRequestNumber = Interlocked.Increment(ref staticRequestNumber);
            req._dwReqNum = (uint)thisRequestNumber;

            byte[] addr = ip.GetAddressBytes();
            req._ipaZ     = ((uint)addr[0]) + ((uint)addr[1] << 8) + ((uint)addr[2] << 16) + ((uint)addr[3] << 24);
            req._ipportZ  = port;

            // now stream the structs out into a byte array.
            wr.Write(header._wType);
            wr.Write(header._cbEnt);
            wr.Write(req._dwReqNum);
            wr.Write(req._ipaZ);
            wr.Write(req._ipportZ);

            reqSize = ms.ToArray();
            Debug.Assert (reqSize.Length == header._cbEnt);

            return reqSize;
        }

        bool VerifyResponse(BinaryReader br, bool verifyRequestNum)
        {
            sgMessageHeader header;
            sgMessageSpiResponse reply;

            header._wType = br.ReadUInt16();
            if (header._wType != SGMSG_TYPE_SPIDATA_REP)
            {
                throw new ExceptionWithEventId (XEvent.Id.AUTHDATA_BAD_SG_AUTHDATA_1, "SGInfo: Unhandleable response type 0x" + header._wType.ToString("x"));
            }

            header._cbEnt = br.ReadUInt16();
            if (header._cbEnt != (sizeMessageHeader + sizeMessageSpiResponse))
            {
                throw new ExceptionWithEventId (XEvent.Id.AUTHDATA_BAD_SG_AUTHDATA_2, "SGInfo: Unexpected SG reply size (" + header._cbEnt + ")."
                    + " Expected size is " + (sizeMessageHeader + sizeMessageSpiResponse));
            }

            reply._dwReqNum = br.ReadUInt32();
            reply._ipaZ = br.ReadUInt32();
            reply._ipportZ = br.ReadUInt16();
            reply._fNotFound = br.ReadByte();

            // make sure reqnum is the same as the request we sent.
            if (verifyRequestNum && reply._dwReqNum != (uint)thisRequestNumber)
            {
                return false;
            }

            if (reply._fNotFound != 0)
            {
                IPAddress ipZ = new IPAddress (reply._ipaZ);
                throw new ExceptionWithEventId (XEvent.Id.AUTHDATA_BAD_SG_AUTHDATA_3, "SGInfo: SG replies saying auth data NOT FOUND for " +
                    ipZ.ToString() + ":" + reply._ipportZ + " (DMZ)");
            }

            // next reade the header on the auth data itself (as distinct from the
            // header on the SG reply, which is read above).
            header._wType = br.ReadUInt16();
            if (header._wType != SGMSG_TYPE_SPIDATA)
            {
                throw new ExceptionWithEventId (XEvent.Id.AUTHDATA_BAD_SG_AUTHDATA_4, "SGInfo: Unexpected auth payload type 0x" + header._wType.ToString("x")
                    + "... Expected type SGMSG_TYPE_SPIDATA" );
            }

            header._cbEnt = br.ReadUInt16();
            if ( header._cbEnt != sizeSpiData2 )
            {
                throw new ExceptionWithEventId (XEvent.Id.AUTHDATA_BAD_SG_AUTHDATA_5, "SGInfo: Unexpected SG auth data size (" + header._cbEnt + ")."
                    + " Expected size is " + sizeSpiData2);
            }

            // if we made it this far, we should be ready to roll.
            return true;
        }


        public override string ToString()
        {
            try
            {
                int i;
                int count;
                StringBuilder bldr = new StringBuilder();

                // The SGIPPORT header, basically
                bldr.AppendFormat("Source: {0}:{1} ({2})\r\n", 
                                  _srcIP, (ushort)IPAddress.NetworkToHostOrder((short)_srcPort),
                                  _isInternal ? "HTTP" : "SG");

                // From inside the SGInfo data, presumably the Internet IP of the client.  
                // Little fuzzier for HTTPAuthData.
                bldr.AppendFormat("ExternalIP: {0}:{1}\r\n", 
                                  ClientIP, (ushort)IPAddress.NetworkToHostOrder((short)ClientPort));

                bldr.AppendFormat("Nonce: {0:X16}\r\n", _liNonce);
                bldr.AppendFormat("KeyExFlags: 0x{0:X}\r\n", _wFlagsKeyEx);
                bldr.Append("TitleId: 0x");
                bldr.Append(TitleId.ToString("X"));
                bldr.Append("\r\nTitleVer: 0x");
                bldr.Append(dwTitleVersion.ToString("X"));
                bldr.Append("\r\nTitleRgn: 0x");
                bldr.Append(dwTitleRegion.ToString("X"));
                bldr.Append("\r\nConsoleRgn: 0x");
                bldr.Append(dwConsoleRegion.ToString("X"));
                bldr.Append("\r\nMediaID: 0x");
                bldr.Append(dwMediaID.ToString("X"));
                bldr.Append("\r\nLanguageID: ");
                bldr.Append(wLanguageID);
                bldr.Append("\r\nAuthDataFlags: 0x");
                bldr.Append(dwAuthDataFlags.ToString("X"));

                bldr.AppendFormat("\r\nXboxLibVer: {0}.{1}.{2}.{3}", wMajorVersion, wMinorVersion, wBuildNumber, wQFENumber);
                bldr.AppendFormat("\r\nMachineId: 0x{0:X16}", MachineId);
                bldr.AppendFormat("\r\nPlatform: {0}", GetPlatformType());

                count = 0;
                for (i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++)
                {
                    if (xUsers != null && xUsers[i].qwUserID != 0)
                    {
                        bldr.Append("\r\nU" + i.ToString() + ": 0x" + xUsers[i].qwUserID.ToString("X") + " (" + xUsers[i].dwUserFlags.ToString("X") + "," + xUsers[i].userTrust.ToString() + ")\r\n");
                        ++count;
                    }

                }
                if (count == 0)
                {
                    bldr.Append("\r\nno users present.");
                }

                count = 0;
                bldr.Append("\r\nServices: ");
                for (i = 0; i < XOn.XONLINE_MAX_PRIVILEGE_ID / 2; i++)
                {
                    if ( dwPrivileges != null && IsServicePresent(i) )
                    {
                        if (++count > 1)
                            bldr.Append(",");
                        bldr.Append(i.ToString());
                    }
                }
                for (i = 0; i < XOn.XONLINE_MAX_DWORD_SERVICEIDS; i++)
                {
                    if (dwServiceIds != null && dwServiceIds[i] != 0)
                    {
                        if (++count > 1)
                            bldr.Append(",");
                        bldr.Append("0x" + dwServiceIds[i].ToString("X"));
                    }
                }
                if (count == 0)
                {
                    bldr.Append("no services present (WARNING: TEST ONLY!)");
                }

                count = 0;
                bldr.Append("\r\nPrivileges: ");
                for (i = XOn.XONLINE_MAX_PRIVILEGE_ID / 2; i < XOn.XONLINE_MAX_PRIVILEGE_ID; i++)
                {
                    if ( dwPrivileges != null && IsServicePresent(i) )
                    {
                        if (++count > 1)
                            bldr.Append(",");
                        bldr.Append(i.ToString());
                    }
                }

                count = 0;
                for (i = 0; i < XOn.XONLINE_MAX_ALTERNATE_TITLE_ID; i++)
                {
                    if (dwAltTitleID != null && dwAltTitleID[i] != 0)
                    {
                        bldr.Append("\r\nAltTitleID" + i.ToString() + ": 0x" + dwAltTitleID[i].ToString("X"));
                        ++count;
                    }
                }
                if (count == 0)
                {
                    bldr.Append("\r\nno AltTitleID present");
                }

                return bldr.ToString();
            }
            catch(Exception e)
            {
                return "Error building SGInfo.ToString(): " + e.ToString();
            }
        }


        public string ToXomLogString()
        {
            try
            {
                StringBuilder bldr = new StringBuilder();

                bldr.Append(TitleId.ToString("X8")+"|");
                bldr.Append(dwTitleVersion.ToString("X8")+"|");
                bldr.Append(dwTitleRegion.ToString("X8")+"|");
                bldr.Append(ClientIP.ToString() + "|");
                bldr.Append(MachineId.ToString("X16")+"|");

                for (int i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++)
                {
                    if (xUsers != null && xUsers[i].qwUserID != 0)
                    {
                        bldr.Append(xUsers[i].qwUserID.ToString("X16") + "|" );
                    }
                    else
                    {
                        bldr.Append("0|");
                    }

                }

                return bldr.ToString();
            }
            catch(Exception e)
            {
                return "Error building SGInfo.ToXomLogString(): " + e.ToString();
            }
        }


        // public accessors and helper methods
        public ushort MajorVersion { get { return wMajorVersion; } }
        public ushort MinorVersion { get { return wMinorVersion; } }
        public ushort BuildNumber { get { return wBuildNumber; } }
        public ushort QFENumber { get { return wQFENumber; } }

        public uint ClientVersion
        {
            get {
                return (uint) ((MajorVersion &    0xF) << 28) |
                       (uint) ((MinorVersion &    0xF) << 24) |
                       (uint) ((BuildNumber  & 0xFFFF) <<  8) |
                       (uint)  (QFENumber    &   0xFF);
            }
        }

        public uint AltTitleId1 { get { return dwAltTitleID[ 0 ]; } }
        public uint AltTitleId2 { get { return dwAltTitleID[ 1 ]; } }
        public uint AltTitleId3 { get { return dwAltTitleID[ 2 ]; } }
        public uint AltTitleId4 { get { return dwAltTitleID[ 3 ]; } }
        public uint TitleRegion { get { return dwTitleRegion; } }
        public ushort ClientPort { get { return _ipportI; } }

        public uint TitleId
        {
            get { return dwTitleID; }
        }

        public uint TitleVersion
        {
            get { return dwTitleVersion; }
        }

        public uint ConsoleRegion
        {
            get { return dwConsoleRegion; }
        }

        public uint MediaID
        {
            get { return dwMediaID; }
        }

        public ushort LanguageID
        {
            get { return wLanguageID; }
        }

        public uint AuthDataFlags
        {
            get { return dwAuthDataFlags; }
        }

        public ulong MachineId
        {
            get { return qwXboxID; }
        }

        public IPAddress ClientIP
        {
            get { return new IPAddress(_ipaI); }
        }

        public ulong TimeSessionStarted
        {
            get { return _liTimeInit; }
        }

        public XUIDAndTrust[] LogonUsers
        {
            get { return xUsers; }
        }

        public ulong Nonce
        {
            get { return _liNonce; }
        }

        public bool IsUserPresent(ulong xuid)
        {
            int i;

            if (xuid != 0)
            {
                for(i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
                {
                    if(xUsers[i].qwUserID == xuid && !xUsers[i].IsGuest())
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        public bool CanUserPurchase(ulong xuid)
        {
            int i;

            if (xuid != 0)
            {
                for(i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
                {
                    if(xUsers[i].qwUserID == xuid)
                    {
                        if(xUsers[i].CanPurchase())
                        {
                            return true;
                        }
                    }
                }
            }

            // user not found, or can't purchase
            return false;
        }

        public byte GetUserCountry(ulong xuid)
        {
            int i;

            if (xuid != 0)
            {
                for(i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
                {
                    if(xUsers[i].qwUserID == xuid && !xUsers[i].IsGuest())
                    {
                        return (xUsers[i].UserCountry());
                    }
                }
            }

            // user not found
            return 0;
        }

        public byte GetUserLanguage(ulong userId)
        {
            int i;

            if (userId != 0)
            {
                for(i=0; i < XOn.XONLINE_MAX_LOGON_USERS; i++)
                {
                    if(xUsers[i].qwUserID == userId && !xUsers[i].IsGuest())
                    {
                        return xUsers[i].UserLanguage();
                    }
                }
            }

            // user not found
            return 0;
        }

        public byte GetUserTier(ulong xuid)
        {
            int i;

            if (xuid != 0)
            {
                for(i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
                {
                    if(xUsers[i].qwUserID == xuid && !xUsers[i].IsGuest())
                    {
                        return (xUsers[i].UserTier());
                    }
                }
            }

            // user not found
            return 0;
        }

        public float GetUserTrust(ulong xuid)
        {
            int i;

            if (xuid != 0)
            {
                for(i = 0; i < XOn.XONLINE_MAX_LOGON_USERS; i++ )
                {
                    if(xUsers[i].qwUserID == xuid && !xUsers[i].IsGuest())
                    {
                        return (xUsers[i].userTrust);
                    }
                }
            }

            // user not found
            return Single.NaN;
        }

        public bool IsServicePresent(XOService serviceId)
        {
            return IsServicePresent((int) serviceId);
        }

        public bool IsServicePresent(int serviceId)
        {
            // base services are represented using the privilege bits
            // dword services are stored in a separate four element array
            if ( serviceId < XOn.XONLINE_MAX_PRIVILEGE_ID )
            {
                // find the DWORD containing this bit
                int dwordIndex = serviceId / 32;

                // find the bit offset within the DWORD
                int bitIndex = serviceId - dwordIndex*32;

                // create the mask
                uint mask = ((uint)1) << bitIndex;

                if ( (dwPrivileges[dwordIndex] & mask) == mask )
                {
                    return true;
                }
            }
            else
            {
                for (int i=0; i < dwServiceIds.Length; i++)
                {
                    if ( dwServiceIds[i] == (uint)serviceId )
                    {
                        return true;
                    }
                }
            }

            // service not found
            return false;
        }

        // PlatformType
        // Returns the client's platform type. Returns one of the XOn.XPLT_* constants.
        public byte GetPlatformType()
        {
            // Find out what sort of machine the client is. Each platform type has
            // its own range of ids so that's easy to figure out. The only trick is
            // that an Xbox 360 running in backcompat mode should be treated as an
            // Xbox 1.

            if(_isInternal)
            {
                string h = null;
                if (HttpContext.Current != null)
                {
                    h = HttpContext.Current.Request.Headers[XHttpHdr.XPLT];
                }
                if (h == null)
                {
                    // generic bucket
                    return XOn.XPLT_INTERNAL;
                }
                // Expected to be: XPLT_INTERNAL_*
                byte plat = byte.Parse(h);
                return plat;
            }
            else if((this.AuthDataFlags & XONLINE_AUTHDATA_FLAGS_ISXENONBACKCOMPAT) != 0)
            {
                return XOn.XPLT_XBOX1;
            }
            else
            {
                try
                {
                    return XOn.XboxId.GetPlatformType(this.MachineId);
                }
                catch (Exception e)
                {
                    throw new Exception(
                        string.Format("Invalid platform type. Machine-id=0x{0}, Flags=0x{1}",
                                  this.MachineId,
                                  this.AuthDataFlags), e);
                }
            }
        }

        // IsXbox360
        // Returns whether the client is Xbox360
        public bool _IsXbox360()
        {
            return GetPlatformType() == XOn.XPLT_XBOX360;
        }

        // IsXbox
        // Returns whether the client is an original Xbox
        public bool _IsXbox()
        {
            return GetPlatformType() == XOn.XPLT_XBOX1;
        }

        // IsPc
        // Returns whether the client is a PC (Panorama)
        public bool _IsPc()
        {
            return GetPlatformType() == XOn.XPLT_PC;
        }

        public static void VerifyPlatformType(params byte[] xplts)
        {
            if (AuthToggle.Off)
                return;

            SGInfo sg = SGInfo.Current;

            byte xpltFromSg = sg.GetPlatformType();
            if (!Array.Exists(xplts, delegate(byte b) { return b == xpltFromSg; }))
            {
                throw new ExceptionWithEventId(XEvent.Id.AUTHDATA_VERIFICATION_ERROR_10,
                    String.Format(
                    EnumerableFormatter.Instance,
                    "SGInfo.Verify: None of the platform types in {0:ef} cannot be verified (SG says {1}).",
                    xplts, xpltFromSg));
            }
        }

        // IsInternal
        // Returns whether the client is internal (cross-service communication, webcache,
        // etc.)
        public bool _IsInternal()
        {
            byte plat = GetPlatformType();
            return
                plat == XOn.XPLT_INTERNAL ||
                plat == XOn.XPLT_INTERNAL_XBOXCOM ||
                plat == XOn.XPLT_INTERNAL_ZUNE ||
                plat == XOn.XPLT_INTERNAL_XNA ||
                plat == XOn.XPLT_INTERNAL_WGX ||
                plat == XOn.XPLT_INTERNAL_LIVEN;
        }

        // IsFromLiveCache
        // Returns whether the is being made through LiveCache.
        public bool _IsFromLiveCache()
        {
            byte plat = GetPlatformType();
            return
                plat == XOn.XPLT_INTERNAL_XBOXCOM ||
                plat == XOn.XPLT_INTERNAL_ZUNE ||
                plat == XOn.XPLT_INTERNAL_XNA ||
                plat == XOn.XPLT_INTERNAL_WGX ||
                plat == XOn.XPLT_INTERNAL_LIVEN;
        }

        // IsLimited
        // Returns whether the client is marked with the Limited Machine flag
        public bool _IsLimited()
        {
            return ((this.AuthDataFlags & XONLINE_AUTHDATA_FLAGS_ISLIMITEDMACHINE) != 0);
        }

        // IsBeta
        // Returns whether the client has the beta bit set
        public bool _IsBeta()
        {
            return ((this.dwAuthDataFlags & XONLINE_AUTHDATA_FLAGS_ISBETAMACHINE) != 0);
        }

        public byte[] SignWithKey( byte[] data, int offset, int count )
        {
            HMACSHA1 shaM = new HMACSHA1(key);

            shaM.ComputeHash(data, offset, count);

            return shaM.Hash;
        }

        //
        // Set of public functions to perform verification on users, machines, and titles.
        //  All of these functions will throw exceptions if data doesn't match.
        //

        public static void VerifyMachineId(ulong machineId)
        {
            if (AuthToggle.Off)
                return;

            SGInfo sg = SGInfo.Current;

            if( sg.MachineId != machineId )
            {
                throw new ExceptionWithEventId( XEvent.Id.AUTHDATA_VERIFICATION_ERROR_3, "SGInfo.Verify: Machine " + machineId.ToString("X") + " cannot be verfied "
                    + "(SG says " + sg.MachineId.ToString("X") + ")");
            }
        }

        public void VerifyMachineId2(ulong machineId)
        {
            if (AuthToggle.Off)
                return;

            if( this.MachineId != machineId )
            {
                throw new ExceptionWithEventId( XEvent.Id.COMMON_HACK_61, "SGInfo.Verify: Machine " + machineId.ToString("X") + " cannot be verfied "
                    + "(SG says " + this.MachineId.ToString("X") + ")");
            }
        }

        public static void VerifyServiceId(XOService serviceId)
        {
            if (AuthToggle.Off)
                return;

            SGInfo sg = SGInfo.Current;

            if( !sg.IsServicePresent(serviceId) )
            {
                throw new ExceptionWithEventId( XEvent.Id.AUTHDATA_VERIFICATION_ERROR_4, "SGInfo.Verify: Machine " + sg.MachineId.ToString("X") +
                    " is not supposed to have access to this service ("+ (int)serviceId + ")");
            }
        }

        public static void VerifyTitleId(uint titleId)
        {
            if (AuthToggle.Off)
                return;

            SGInfo sg = SGInfo.Current;

            if( titleId != sg.TitleId )
            {
                throw new ExceptionWithEventId( XEvent.Id.AUTHDATA_VERIFICATION_ERROR_5, "SGInfo.Verify: Title ID *" + titleId.ToString("X") + "* (SG says " + sg.TitleId.ToString("X")
                    + ") cannot be verfied [" + "machine " + sg.MachineId.ToString("X") + "]");
            }
        }

        public void VerifyTitleId2(uint titleId)
        {
            if (AuthToggle.Off)
                return;

            if( titleId != this.TitleId )
            {
                throw new ExceptionWithEventId( XEvent.Id.COMMON_HACK_64, "SGInfo.Verify: Title ID *" + titleId.ToString("X") + "* (SG says " + this.TitleId.ToString("X")
                    + ") cannot be verfied [" + "machine " + this.MachineId.ToString("X") + "]");
            }
        }

        // Returns true if the title id in the authdata is the title id of either
        // xbox dashboard, xenon dashboard or xbox.com
        public static bool IsDashboardTitleId()
        {
            if(AuthToggle.Off)
                return true;

            SGInfo sg = SGInfo.Current;

            if(sg.TitleId == XOn.DASH_TITLE_ID)
            {
                if((sg.dwAuthDataFlags & XONLINE_AUTHDATA_FLAGS_ISXENON_MASK) != 0)
                {
                    throw new ExceptionWithEventId(XEvent.Id.COMMON_HACK_65, string.Format(
                        "Detected xbox dashboard title id running on a xenon console. "+
                        "MachineId: 0x{0} Client-Ip: {1}",
                        sg.MachineId.ToString("X"), sg.ClientIP.ToString()));
                }

                return true;
            }
            else if(sg.TitleId == XOn.XENON_DASH_TITLE_ID)
            {
                if((sg.dwAuthDataFlags & XONLINE_AUTHDATA_FLAGS_ISXENON_MASK) == 0)
                {
                    throw new ExceptionWithEventId(XEvent.Id.COMMON_HACK_66, string.Format(
                        "Detected xenon dashboard title id running on a xbox console. "+
                        "MachineId: 0x{0} Client-Ip: {1}",
                        sg.MachineId.ToString("X"), sg.ClientIP.ToString()));
                }

                return true;
            }
            else if(sg.TitleId == XOn.XENON_LIVE_SIGNUP_TITLE_ID)
            {
                if((sg.dwAuthDataFlags & XONLINE_AUTHDATA_FLAGS_ISXENON_MASK) == 0)
                {
                    throw new ExceptionWithEventId(XEvent.Id.COMMON_HACK_67, string.Format(
                        "Detected Xenon Live Signup title id running on an Xbox console. "+
                        "MachineId: 0x{0} Client-Ip: {1}",
                        sg.MachineId.ToString("X"), sg.ClientIP.ToString()));
                }

                return true;
            }
            else if(sg.TitleId == XOn.WEB_TITLE_ID)
            {
                return true;
            }

            return false;
        }

        // Returns true if the title id in the authdata is the title id of xbox.com or zune.net
        public static bool IsWebTitleId()
        {
            if(AuthToggle.Off)
                return true;

            return (SGInfo.Current.TitleId == XOn.WEB_TITLE_ID || SGInfo.Current.TitleId == XOn.ZUNE_TITLE_ID);
        }

        // IsXbox360
        // Returns whether the client is Xbox360
        public static bool IsXbox360()
        {
            return SGInfo.Current._IsXbox360();
        }

        // IsXbox
        // Returns whether the client is an original Xbox
        public static bool IsXbox()
        {
            return SGInfo.Current._IsXbox();
        }

        // IsPc
        // Returns whether the client is a PC (Panorama)
        public static bool IsPc()
        {
            return SGInfo.Current._IsPc();
        }

        // IsInternal
        // Returns whether the client is internal (cross-service communication, webcache,
        // etc.)
        public static bool IsInternal()
        {
            return SGInfo.Current._IsInternal();
        }

        // IsFromLiveCache
        // Returns whether the call is being made through LiveCache.
        public static bool IsFromLiveCache()
        {
            return SGInfo.Current._IsFromLiveCache();
        }

        // IsLimited
        // Returns whether the client is marked with the Limited Machine flag
        public static bool IsLimited()
        {
            return SGInfo.Current._IsLimited();
        }

        // IsBeta
        // Returns whether the client is marked with the Beta Machine flag
        public static bool IsBeta()
        {
            return SGInfo.Current._IsBeta();
        }

        // IsActiveAuth
        // Returns whether this client came from the ActiveAuth module / gateway. If so,
        // SGInfo really doesn't apply, and you should be using AAInfo instead.
        public static bool IsActiveAuth()
        {
            // 1. Check context (from aamodule on local machine).
            // 2. Check headers (from authsg remotely).
            return AAInfo.IsActiveAuthAvailable;
        }

        // PlatformType
        // Returns the client's platform type. Returns one of the XOn.XPLT_* constants.
        public static byte GetPlatform()
        {
            return SGInfo.Current.GetPlatformType();
        }

        // VerifyDashboardTitleId
        // This method started out just checking the title-id but at some point it
        // started doing way more stuff. Its core goal remains, which is to restrict
        // access to account management / PII / billing APIs.
        public static void VerifyDashboardTitleId()
        {
            if(IsXbox() && IsDashboardTitleId())
            {
                // Original Xbox can only access using dashboard title id
                return;
            }

            if(IsXbox360() || IsInternal())
            {
                // Xbox 360 and internal calls have access using whatever title-id.
                // Original comment for historical purposes:
                // Xenon calls lots of account/marketplace SPIs from the HUD which uses
                // the "identity" of whatever title id it's running under. And this check
                // is breaking a bunch of scenarios. We could just remove the check from
                // all of those SPIs except that some of them are also called by Xbox and
                // we've got more confidence on xenon's security than we have on xbox's.
                // Not that this check is going to prevent much, it was more a kind of
                // assert for us anyways.
                return;
            }

            if(IsPc() && Config.GetBoolSetting(Setting.global_enableTestApis))
            {
                // PCs have access only if test APIs are enabled globally
                return;
            }

            // Access is denied to any other configuration

            throw new ExceptionWithEventId(XEvent.Id.COMMON_HACK_68, string.Format(
                    "SGInfo.VerifyDashboardTitleId: Access denied to title-id (0x{0}) / "+
                    "platform ({1}) configuration.",
                    SGInfo.Current.TitleId.ToString("X8"), SGInfo.GetPlatform().ToString()));
        }

        // Verifies if the title id in the authdata is the title id of xbox.com
        // Throws an exception if not
        public static void VerifyWebTitleId()
        {
            if(!IsWebTitleId())
            {
                throw new ExceptionWithEventId(XEvent.Id.COMMON_HACK_69, string.Format(
                    "SGInfo.VerifyDashboardTitleId: xbox.com title Id expected. Instead we got: 0x{0}",
                    SGInfo.Current.TitleId.ToString("X8")));
            }
        }

        public static void VerifyFamilyTitleId(uint titleId)
        {
            if (AuthToggle.Off)
                return;

            SGInfo sg = SGInfo.Current;

            if((titleId & XOn.TITLE_FAMILY_MASK) != (sg.TitleId & XOn.TITLE_FAMILY_MASK))
            {
                throw new ExceptionWithEventId( XEvent.Id.COMMON_HACK_70, "SGInfo.Verify: Title ID *" + titleId.ToString("X") + "* (SG says " + sg.TitleId.ToString("X")
                    + ") is not in the same family!");
            }
        }


        public static void VerifyTitleIdOrAlternate(uint titleId)
        {
            if (AuthToggle.Off)
            {
                return;
            }

            SGInfo sg = SGInfo.Current;

            if( titleId == sg.TitleId )
            {
                return;
            }

            for (int i=0; i < XOn.XONLINE_MAX_ALTERNATE_TITLE_ID; i++)
            {
                if (titleId == sg.dwAltTitleID[i])
                {
                    return;
                }
            }

            throw new XRLException(HResult.XONLINE_E_INVALID_TITLE_ID, XEvent.Id.AUTHDATA_VERIFICATION_ERROR_6, "SGInfo.VerifyTitleIdOrAlternate: Title ID *" + titleId.ToString("X") + "* (SG says " + sg.TitleId.ToString("X")
                + "," + sg.dwAltTitleID[0].ToString("X")
                + "," + sg.dwAltTitleID[1].ToString("X")
                + "," + sg.dwAltTitleID[2].ToString("X")
                + "," + sg.dwAltTitleID[3].ToString("X")
                + ") cannot be verified [" + "machine " + sg.MachineId.ToString("X") + "]");
        }

        public void VerifyTitleIdOrAlternate2(uint titleId)
        {
            if (AuthToggle.Off)
            {
                return;
            }

            if( titleId == this.TitleId )
            {
                return;
            }

            for (int i=0; i < XOn.XONLINE_MAX_ALTERNATE_TITLE_ID; i++)
            {
                if (titleId == this.dwAltTitleID[i])
                {
                    return;
                }
            }

            throw new XRLException(HResult.XONLINE_E_INVALID_TITLE_ID, XEvent.Id.COMMON_HACK_72, "SGInfo.VerifyTitleIdOrAlternate: Title ID *" + titleId.ToString("X") + "* (SG says " + this.TitleId.ToString("X")
                + "," + this.dwAltTitleID[0].ToString("X")
                + "," + this.dwAltTitleID[1].ToString("X")
                + "," + this.dwAltTitleID[2].ToString("X")
                + "," + this.dwAltTitleID[3].ToString("X")
                + ") cannot be verfied [" + "machine " + this.MachineId.ToString("X") + "]");
        }

        public static void VerifyTitleVersion(uint titleVersion)
        {
            if (AuthToggle.Off)
                return;

            SGInfo sg = SGInfo.Current;

            // only applies to test environments when your sginfo version is 0xFFFFFFFF.  
            // This is the special and hopefully temporary hack for the NULL cipher 
            // scenarios.
            if (!_verifyTestTitleVersion && sg.TitleVersion == 0xFFFFFFFF)
            {
                return;
            }

            if( titleVersion != sg.TitleVersion )
            {
                throw new ExceptionWithEventId( XEvent.Id.AUTHDATA_VERIFICATION_ERROR_7, "SGInfo.Verify: Title Version *" + titleVersion.ToString("x") + "* (SG says " + sg.TitleVersion.ToString("x")
                    + ") cannot be verfied [" + "machine " + sg.MachineId + "]");
            }
        }

        public static void VerifyUserId(ulong xuid)
        {
            if (AuthToggle.Off)
                return;

            SGInfo sg = SGInfo.Current;

            if( !sg.IsUserPresent(xuid) )
            {
                throw new ExceptionWithEventId( XEvent.Id.AUTHDATA_VERIFICATION_ERROR_8, "SGInfo.Verify: *User " + xuid.ToString("X") + "* cannot be verified ["
                    + "machine " + sg.MachineId.ToString("X") + "; title " + sg.TitleId.ToString("X") + "]");
            }
        }

        public static void VerifyUserCountryId(ulong xuid, byte countryId)
        {
            if (AuthToggle.Off)
                return;

            SGInfo sg = SGInfo.Current;

            if ( countryId != sg.GetUserCountry(xuid) )
            {
                throw new ExceptionWithEventId( XEvent.Id.AUTHDATA_VERIFICATION_ERROR_9,
                    "SGInfo.Verify: User country (" + xuid.ToString("x") +
                    ";" + countryId + ") cannot be verified [countryId " +
                    sg.GetUserCountry(xuid) + "]");
            }
        }

        public static void VerifyUserTier(ulong xuid, byte tier)
        {
            if (AuthToggle.Off)
                return;

            SGInfo sg = SGInfo.Current;

            if ( tier != sg.GetUserTier(xuid) )
            {
                throw new ExceptionWithEventId( XEvent.Id.COMMON_HACK_76,
                    "SGInfo.Verify: User tier (" + xuid.ToString("x") +
                    ";" + tier + ") cannot be verified [tier " +
                    sg.GetUserTier(xuid) + "]");
            }
        }


        public static void VerifyPrivilege(params byte[] privileges)
        {
            foreach (byte privilege in privileges)
            {
                if (! HasPrivilege(privilege))
                {
                    SGInfo sg = SGInfo.Current;

                    throw new XRLException(
                        HResult.XONLINE_E_ACCESS_DENIED, XEvent.Id.SGINFO_VERIFY_PRIVILEGE,
                        "SGInfo.Verify: User privilege *" + privilege.ToString() + "* cannot be verified, " +
                        "[ machine " + sg.MachineId.ToString("X") + "]"
                    );
                }
            }
        }


        public static bool HasPrivilege(byte priv)
        {
            if (AuthToggle.Off)
                return true;

            SGInfo sg = SGInfo.Current;

            // find the DWORD containing this bit
            int dwordIndex = priv / 32;

            // find the bit offset within the DWORD
            int bitIndex = priv - dwordIndex*32;

            // create the mask
            uint mask = ((uint)1) << bitIndex;

            return ((sg.dwPrivileges[dwordIndex] & mask) == mask);
        }

        // GetUserLocaleList
        // Returns a list of locales for a user sorted by priority. If
        // useUserLanguage==true, the user's live language will be considered
        // and given priority to.
        public static string[] GetUserLocaleList(ulong xuid, bool useUserLanguage)
        {
            string[] list = null;

            try
            {
                if (AuthToggle.Off)
                {
                    return null;
                }

                SGInfo  sg = SGInfo.Current;

                byte    countryId           = sg.GetUserCountry(xuid);
                ushort  userLanguageId      = sg.GetUserLanguage(xuid);
                ushort  consoleLanguageId   = sg.LanguageID;
                string  countryCode         = CountryDictionary.CountryCode(countryId);

                list = Locale.BuildValidLocaleList(
                    consoleLanguageId,
                    useUserLanguage ? userLanguageId : consoleLanguageId,
                    countryCode);
            }
            catch (Exception e)
            {
                Xom.NtEvent(XEvent.Id.COMMON_CODE_58, e, "Attempt to build locale threw exception.");
                list = null;
            }

            return list;
        }

        public string[] GetUserLocaleList2(ulong xuid, bool useUserLanguage)
        {
            string[] list = null;

            try
            {
                if (AuthToggle.Off)
                {
                    return null;
                }

                byte    countryId           = this.GetUserCountry(xuid);
                ushort  userLanguageId      = this.GetUserLanguage(xuid);
                ushort  consoleLanguageId   = this.LanguageID;
                string  countryCode         = CountryDictionary.CountryCode(countryId);

                list = Locale.BuildValidLocaleList(
                    consoleLanguageId,
                    useUserLanguage ? userLanguageId : consoleLanguageId,
                    countryCode);
            }
            catch (Exception e)
            {
                Xom.NtEvent(XEvent.Id.COMMON_CODE_59, e, "Attempt to build locale threw exception.");
                list = null;
            }

            return list;
        }


        // GetUserLocale
        // Get a locale string based on the user's country, the console's
        // language and optionally on the user's language (stored on live)
        public static string GetUserLocale(ulong xuid, bool useUserLanguage)
        {
            string[] list;

            list = GetUserLocaleList(xuid, useUserLanguage);

            if ( (null == list) || (list.Length == 0) )
            {
                list = new string[] {"en-US"};
            }

            return list[0];
        }

        // GetUserLocale
        // Get a locale string based on the console's country and the console's
        // language
        public static string GetUserLocale(ulong xuid)
        {
            return GetUserLocale(xuid, false);
        }

        // GetUserLCID
        // Get a LCID based on the user's country, the console's  language and
        // optionally on the user's language (stored on live)
        public static ushort GetUserLCID(ulong xuid, bool useUserLanguage)
        {
            string locale = GetUserLocale(xuid, useUserLanguage);
            locale = locale.Replace('-', '_');

            return (ushort)(Locales)Enum.Parse(typeof(Locales), locale, false);
        }

        // GetUserLCID
        // Get a LCID based on the console's country and the console's language
        public static ushort GetUserLCID(ulong xuid)
        {
            return GetUserLCID(xuid, false);
        }

        public static bool IsGuestXuid(ulong xuid)
        {
            return (xuid >= XONLINE_GUEST_XUID_START && xuid <= XONLINE_GUEST_XUID_END);
        }


        public static string ToStr()
        {
            try
            {
                return Current != null ? Current.ToString() : "(sgauth=off)";
            }
            catch(Exception e)
            {
                return "Error from SGInfo.ToString(). Exception:\n"+e.ToString();
            }
        }

        public static byte[] GetAuthData()
        {
            if (AuthToggle.Off)
            {
                return new byte[180];
            }

            SGInfo sg = SGInfo.Current;

            return sg.ConstructAuthData();
        }

        public byte[] ConstructAuthData()
        {
            int i;
            MemoryStream m = new MemoryStream();
            BinaryWriter w = new BinaryWriter(m);
            w.Write(XONLINE_XENON_AUTHDATA_VERSION);
            w.Write(wAuthDataSize);
            w.Write(wMajorVersion);
            w.Write(wMinorVersion);
            w.Write(wBuildNumber);
            w.Write(wQFENumber);
            w.Write(dwTitleID);
            w.Write(dwTitleVersion);
            w.Write(dwTitleRegion);
            w.Write(dwConsoleRegion);
            w.Write(dwMediaID);
            w.Write(wLanguageID);
            w.Write(dwAuthDataFlags);

            w.Write(wNumPrivileges);
            Debug.Assert( dwPrivileges.Length == XOn.XONLINE_NUM_PRIVILEGE_DWORDS );
            for (i=0; i < dwPrivileges.Length; i++)
            {
                w.Write(dwPrivileges[i]);
            }

            w.Write(qwXboxID);
            for (i=0; i < xUsers.Length; i++)
            {
                w.Write(xUsers[i].qwUserID);
                w.Write(xUsers[i].dwUserFlags);
            }

            for (i=0; i < xUsers.Length; i++)
            {
                w.Write(xUsers[i].userTrust);
            }

            w.Write(wNumDwordServices);

            for (i=0; i < XOn.XONLINE_MAX_DWORD_SERVICEIDS; i++)
            {
                w.Write(dwServiceIds[i]);
            }

            for (i=0; i < XOn.XONLINE_MAX_ALTERNATE_TITLE_ID; i++)
            {
                w.Write(dwAltTitleID[i]);
            }

            w.Write(key);

            return m.ToArray();
        }

        public static string ToBase64String()
        {
            SGInfo sg;
            if (AuthToggle.Off)
            {
                //return "Auth Data is turned off!";
                sg = new SGInfo(0, 0, 0);
            }
            else
            {
                sg = SGInfo.Current;
            }

            return sg.ConstructBase64String();
        }

        public string ConstructBase64String()
        {
            MemoryStream m = new MemoryStream(200);
            BinaryWriter w = new BinaryWriter(m);
            w.Write(HTTPAuthData.HTTP_HEADER_AUTH_DATA_VERSION);
            w.Write(_ipportI);
            w.Write(_ipaI);
            w.Write(_liNonce);
            w.Write(ConstructAuthData());

            return Convert.ToBase64String(m.ToArray());
        }

        public ushort OverrideMajorVersion
        {
            get { return wMajorVersion; }
            set { wMajorVersion = value; }
        }

        public ushort OverrideMinorVersion
        {
            get { return wMinorVersion; }
            set { wMinorVersion = value; }
        }

        public ushort OverrideBuildNumber
        {
            get { return wBuildNumber; }
            set { wBuildNumber = value; }
        }

        public ushort OverrideQFENumber
        {
            get { return wQFENumber; }
            set { wQFENumber = value; }
        }


        public uint OverrideTitleID
        {
            get { return dwTitleID; }
            set { dwTitleID = value; }
        }

        public uint OverrideTitleVersion
        {
            get { return dwTitleVersion; }
            set { dwTitleVersion = value; }
        }

        public uint OverrideTitleRegion
        {
            get { return dwTitleRegion; }
            set { dwTitleRegion = value; }
        }

        public uint OverrideConsoleRegion
        {
            get { return dwConsoleRegion; }
            set { dwConsoleRegion = value; }
        }

        public uint OverrideMediaID
        {
            get { return dwMediaID; }
            set { dwMediaID = value; }
        }

        public ushort OverrideLanguageID
        {
            get { return wLanguageID; }
            set { wLanguageID = value; }
        }

        public uint OverrideAuthDataFlags
        {
            get { return dwAuthDataFlags; }
            set { dwAuthDataFlags = value; }
        }

        public ushort OverrideNumPrivileges
        {
            get { return wNumPrivileges; }
            set { wNumPrivileges = value; }
        }

        public uint[] OverridePrivileges
        {
            get { return dwPrivileges; }
            set { dwPrivileges = value; }
        }

        public ulong OverrideXboxID
        {
            get { return qwXboxID; }
            set { qwXboxID = value; }
        }

        public byte[] OverrideKey
        {
            get { return key; }
            set { key = value; }
        }

        public uint[] OverrideAltTitleID
        {
            get { return dwAltTitleID; }
            set { dwAltTitleID = value; }
        }

        public XUIDAndTrust[] OverrideXUsers
        {
            get { return xUsers; }
            set { xUsers = value; }
        }

        public uint[] OverrideServiceIds
        {
            get { return dwServiceIds; }
            set { dwServiceIds = value; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\TestGroupFile.cs ===
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;

[assembly: RootNode(typeof(xonline.common.test.tools.ToolsStfTest))]

namespace xonline.common.test.tools
{

    public class ToolsStfTest : TestNode
    {
        public ToolsStfTest()
        {
            AddChild( new MsgManagerTest() );
            AddChild( new OfferValuesTest() );
            AddChild( new PathInfoTest() );
            AddChild( new SerialNumberTest() );
            AddChild( new StUtilCoreTest() );
            AddChild( new UserBillingInfoTest() );
            AddChild( new UserTest() );
            AddChild( new VoucherHelpersTest() );
            AddChild( new VoucherTest() );
            AddChild( new VoucherUtil2Test() );

            //all 3 in the DeActivatorTest.cs file
            AddChild( new DeActivatorProcessHashTest() );
            AddChild( new DeActivatorDecisionTest_HashandUser() );
            AddChild( new DeActivatorActionTest_HashandUser() );
        }
     }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\StUtilCoreTest.cs ===
using System;
//using NUnit.Framework;

using xonline.common.config;
using xonline.common.diagnostics;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.stfutil;
using xonline.common.tools.stutilcore;

using xonline.tools.framework;

using ServerTestFramework;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.UserSettings;
using ServerTestFramework.Utilities;


namespace xonline.common.test.tools
{

	/// <summary>
	/// Summary description for StUtilTest
	/// </summary>
    public class StUtilCoreTest : TestNode
    {

        //task: come back and finish writing the other tests
        [TestCase, Ignore]
        public void StUtilCore_AddYourTestHere()
        {

        }

        [TestCase, Description("Verify blob can be retrieved") ]
        public void BlobRetrieval_POS()
        {

        }

        //positive test case because it's expected behavior, not a boundary case
        [TestCase, Description("Verify non-existent blob request returns null") ]
        public void NoBlobRetrieval_POS()
        {   

            //yup, I lifted this from the Support server DVTs I wrote.. ;-)     

            //create user - User's country doesn't matter for this test... 
            XeUser user = new XeUser(true);
            ulong puid = user.Create();
            Console.WriteLine( "Account created is " + puid );

            //put blobs in storage ('b' for "small" and 'a' for "large")
            //byte[] blob, string  strStorePath
            byte[] blobBigWrite   = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A };
            byte[] blobSmallWrite = { 0x0A, 0x09, 0x08, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };

            // XOn.XENON_DASH_TITLE_ID
            string pathBig = "//pics/u:" + puid.ToString("X8") + "/FFFE0700/gamerpic.a";
            string pathSmall = "//pics/u:" + puid.ToString("X8") + "/FFFE0700/gamerpic.b";
            Console.WriteLine( "BigPath is " + pathBig );
            Console.WriteLine( "SmallPath is " + pathSmall );

            //confirm blobs exist
            Console.WriteLine( "Reading Stored 'files' back from storage: " );
            byte[] blobBigRead = StUtil.DBRead( pathBig );
            byte[] blobSmallRead = StUtil.DBRead( pathSmall );

            Assert.IsTrue( blobBigRead == null );
            Assert.IsTrue( blobSmallRead == null );
            Console.WriteLine( "Both are NULL." );

            Console.WriteLine( "Writing large image... (.a)");
            StUtil.DBWrite( blobBigWrite, pathBig );
            Console.WriteLine( "Writing small image... (.b)");
            StUtil.DBWrite( blobSmallWrite, pathSmall );

            //confirm blobs exist
            Console.WriteLine( "Reading Stored 'files' back from storage: " );
            blobBigRead = StUtil.DBRead( pathBig );
            blobSmallRead = StUtil.DBRead( pathSmall );

            //did it come back correctly?
            Assert.IsTrue( blobBigRead != null );
            Assert.IsTrue( blobSmallRead != null );
            Console.WriteLine( "Both are NOT NULL." );
            Assert.IsTrue( blobBigRead.Length == 11 );
            Assert.IsTrue( blobSmallRead.Length == 11 );
            Console.WriteLine( "Big is " + ByteConvert.ToString( blobBigRead ) + " Small is " + ByteConvert.ToString( blobSmallRead ) );

        }

    }
} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\user\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\SerialNumberTest.cs ===
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Text;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.config;
using xonline.common.diagnostics;
using xonline.tools.framework;

namespace xonline.common.test.tools
{
	/// <summary>
	/// Summary description for SerialNumberTest.
	/// </summary>
    public class SerialNumberTest : TestNode
    {

        #region Constants
        
        //serial combination 1... 
        public const byte GroupID1 = 26;
        public const int Serial1 = 123458905;
        string SerialDBConnection;
        #endregion

        #region Constructors and Test Setup/TearDown
        

        public SerialNumberTest()
        {
        }

        [TestGroupSetup]
        public void SerialNumberTestSetup()
        {
            // insert a few rows of data...
            IInterfaceInfo info = Config.GetSingleInterface( Interface.serialdb );
            SerialDBConnection  = "Data Source=" + info.IPAddressString + ";Trusted_Connection=Yes;Initial Catalog=" + info.DBName;

            //SerialDBConnection = "Data Source=xond2xxxxsql001;Trusted_Connection=Yes;Initial Catalog=SerialDB";
            InsertSerialHash( SerialDBConnection, GroupID1, Serial1, VoucherTest.fakeHashBytes );
        }

        [TestGroupTearDown]
        public void DeActivatorTestFixtureTearDown()
        {
	        bool result;
            // delete the serialnumber / hash combinations we inserted above
            result = DeleteSerialHash( SerialDBConnection, GroupID1, Serial1 );
            Assert.IsTrue( result, "Could not delete test serialnumber" );
            result = DeleteSerialHash( SerialDBConnection, GroupID1, Serial1 + 1 );
            Assert.IsTrue( result, "Could not delete test serialnumber" );
        }

        public void DeActivatorTestTearDown()
        {
	        bool result;
            // delete the serialnumber / hash combinations we inserted above
            result = DeleteSerialHash( SerialDBConnection, GroupID1, Serial1 );
            Assert.IsTrue( result, "Could not delete test serialnumber" );
            result = DeleteSerialHash( SerialDBConnection, GroupID1, Serial1 + 1 );

        }

        #endregion

        #region Tests

        // serial number !present
        [Test]
            //[ExpectedException( typeof( SerialNumberNotFoundException ) )]       
        public void SerialNotPresent()
        {
            try
            {
                SerialNumber sn = SerialNumber.Load( GroupID1, ( Serial1 + 5 ), SerialDBConnection );
            }
            catch( SerialNumberNotFoundException )
            {
                Console.WriteLine( "Correct Exception Caught!" );
            }
        }

        //tests retrieving serial numbers
        [Test]
        public void SerialPresent()
        {
            Console.WriteLine("SerialPresent: Loading GroupID {0}, Serialnum {1} ", GroupID1, Serial1 );
            InsertSerialHash( SerialDBConnection, GroupID1, Serial1, VoucherTest.fakeHashBytes );

            SerialNumber sn = SerialNumber.Load( GroupID1, Serial1, SerialDBConnection );
            Assert.AreEqual( sn.GroupID, GroupID1 );
            Assert.AreEqual( sn.SerialNum, Serial1 );
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( sn.HashBytes ), VoucherTest.fakeHashString  );
        }
        
        // inserting serial number and retrieving it
        //tests retrieving serial numbers
        [Test]
        public void SerialInsertandLoad()
        {
            Console.WriteLine("SerialInsertandLoad: Loading GroupID {0}, Serialnum {1} ", GroupID1, Serial1 + 1 );

            InsertSerialHash( SerialDBConnection, GroupID1, (Serial1 + 1), VoucherTest.fakeHashBytes );
            SerialNumber sn = SerialNumber.Load( GroupID1, (Serial1 + 1), SerialDBConnection );
            Assert.AreEqual( sn.GroupID, GroupID1 );
            Assert.AreEqual( sn.SerialNum, ( Serial1 + 1 ) );
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( sn.HashBytes ), VoucherTest.fakeHashString  );
	    
        }


        // inserting a duplicate serial number and getting an exception
        [Test]
        //[ExpectedException( typeof( SqlException ) ) ]
        public void DuplicateSerialInsert()
        {
            bool caught = false;
            Console.WriteLine("DuplicateSerialInsert: Loading GroupID {0}, Serialnum {1} ", GroupID1, Serial1 + 1 );

            InsertSerialHash( SerialDBConnection, GroupID1, (Serial1 + 1), VoucherTest.fakeHashBytes );
            
            //should get an exception on the second one... 
            try
            {
                InsertSerialHash( SerialDBConnection, GroupID1, (Serial1 + 1), VoucherTest.fakeHashBytes );
            }
            catch( SqlException )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }

            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }

        }


        //what about boundary conditions?
        //tests retrieving serial numbers that are too big?
        //you'll get an exception, since we specify (int) for that parameter

        //what about boundary conditions?
        //tests retrieving groupIDs that are too big?
        //good one, since we specify int, but are retrieving a SQL TinyInt
        [Test]
        //[ExpectedException( typeof( ArgumentException ) )]       
        public void SerialLoadBigGroupID()
        {
            bool caught = false;

            Console.WriteLine("SerialLoadBigGroupID: Loading GroupID {0}, Serialnum {1} ", GroupID1, Serial1 + 1 );

            //try to retrieve a group id  which clearly is too big to be a tinyint...  ( >> 255 )
            try
            {
                SerialNumber sn = SerialNumber.Load( 1024, (Serial1 + 1), SerialDBConnection );
            }
            catch( ArgumentException )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }

            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }

//            Assert.AreEqual( sn.GroupID, GroupID1 );
//            Assert.AreEqual( sn.SerialNum, ( Serial1 + 1 ) );
//            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( sn.HashBytes ), VoucherTest.fakeHashString  );
        }


        // confirm only 1 hash per serial number can be inserted 
        //  so the query never yields multiple results



        #endregion

        #region Other Functions


        // there's no customer requirement for this method, so I just need it here in test for now... 
        //task: should I need this, I'll move it to SerialNumber and refactor... 


        // byte = tinyint
        public static bool InsertSerialHash( string connectionSerial, byte groupID, int serialNumber, byte[] hashBytes )
        {
            // insert some serialnumber / hash combinations
            using (SqlConnection serialConn = new SqlConnection( connectionSerial ) )
            {
                serialConn.Open();
                SqlCommand serialCmd = serialConn.CreateCommand();
                serialCmd.CommandText = "p_InsertSerialHash";
                serialCmd.CommandType = CommandType.StoredProcedure;

                serialCmd.Parameters.Add( "@tiGroupID", SqlDbType.TinyInt ).Value = groupID;
                serialCmd.Parameters["@tiGroupID"].Direction = ParameterDirection.Input;  
                
                serialCmd.Parameters.Add( "@iSerialNumber", SqlDbType.Int ).Value = serialNumber;
                serialCmd.Parameters["@iSerialNumber"].Direction = ParameterDirection.Input;
                
                // it takes 2 char to express each byte
                serialCmd.Parameters.Add( "@hashBytes", SqlDbType.Binary, ( Voucher.VoucherHashSize * 2 ) ).Value = hashBytes;
                serialCmd.Parameters["@hashBytes"].Direction = ParameterDirection.Input;

                // x2 for the bytes to char conversion, x2 for the char to unicode conversion... ugh..
//                serialCmd.Parameters.Add( "@hashString", SqlDbType.Char, ( Voucher.VoucherHashSize * 4 ) ).Value = hashString;
//                serialCmd.Parameters["@hashString"].Direction = ParameterDirection.Input;

                serialCmd.Parameters.Add( "@hr", SqlDbType.Int );
                serialCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;

                serialCmd.ExecuteNonQuery();

                //review: throw a SerialNotInserted Exception?
                if ( (int) serialCmd.Parameters["@hr"].Value == 0 )
                    return true;
                else
                    return false;
            }
        }

        // byte = tinyint
        public static bool DeleteSerialHash( string connectionSerial, byte groupID, int serialNumber )
        {
            // delete some groupid / serialnumber
            using (SqlConnection serialConn = new SqlConnection( connectionSerial ) )
            {
                serialConn.Open();
                SqlCommand serialCmd = serialConn.CreateCommand();
                serialCmd.CommandType = CommandType.StoredProcedure;
                serialCmd.CommandText = "p_DeleteSerialHash";

                serialCmd.Parameters.Add( "@tiGroupID", SqlDbType.TinyInt ).Value = groupID;
                serialCmd.Parameters["@tiGroupID"].Direction = ParameterDirection.Input;  
                
                serialCmd.Parameters.Add( "@iSerialNumber", SqlDbType.Int ).Value = serialNumber;
                serialCmd.Parameters["@iSerialNumber"].Direction = ParameterDirection.Input;
                
                serialCmd.Parameters.Add( "@hr", SqlDbType.Int );
                serialCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;

                serialCmd.ExecuteNonQuery();

                //review: throw a SerialNumberNotDeleted Exception?
//                int returnCode = (int) serialCmd.Parameters["@hr"].Value;
                if ( (int) serialCmd.Parameters["@hr"].Value == 0 )
                    return true;
                else
                    return false;
            }
        }


        #endregion

    } // serial number test
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\user\CommonUserDevTest.cs ===
using System;
using System.Security.Cryptography;
using ServerTestFramework;

using xonline.common.billing;
using xonline.common.diagnostics;
using xonline.common.offer;
using xonline.common.puidmgr;
using xonline.common.service;
using xonline.common.user;
using xonline.common.utilities;

//using xonline.common.test.util;

namespace CommonUserDevTest
{
    public class UserTestUtil
    {
        internal static RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
        internal static byte[] GetRandomBytes(uint len)
        {
            byte[] ret = new byte[len];
            rng.GetBytes(ret);
            return ret;
        }

        internal static User CreateRandomUser()
        {
            return CreateRandomUser(103);
        }

        internal static User CreateRandomUser(byte countryId)
        {
            string gamertag = null;
            DateTime now = DateTime.UtcNow;
            uint hr = 0;

            AdjectiveList a = AdjectiveList.CreateInstance(countryId);
            NounList n = NounList.CreateInstance(countryId);
            gamertag = a.RandomItem() + n.RandomItem();
            if ( gamertag.Length > XOn.XONLINE_NAME_MAX_SIZE )
            {
                gamertag = gamertag.Substring(0, (int)XOn.XONLINE_NAME_MAX_SIZE);
            }

            User u = new User();

            u.Puid = PUIDMgr.GetNewPUID();
            u.OwnerPuid = u.Puid;
            u.MachinePuid = PUIDMgr.GetNewPUID();
            u.GamerTag = gamertag;
            u.CountryId = countryId;
            u.AccountId = BillingProvider.GenerateDummyId(false);
            u.PaymentInfoId = BillingProvider.GenerateDummyId(false);
            u.BillingPIN = PaymentInfo.GetLastFourDigits("1111");
            u.Birthdate = new DateTime(1970,1,1);
            u.AcceptedTOSDate = now;
            u.AccountResumeDate = now;
            u.VoiceResumeDate = now;
            u.ResetDate = now;
            u.AcceptMsSpam = 1;
            u.AcceptPartnerSpam = 1;

            Offer baseOffer = Offer.CreateInstance(0xFFFE000080000008);
            string serviceInstanceId = BillingProvider.GenerateDummyId(false);

            // first reserve the name
            hr = NameUtil.ReserveGamertag(gamertag, 0, u.MachinePuid, 0, null, null, null, null, null, null, null, null);
            Assert.IsTrue(HResult.Succeeded(hr));

            // now create the user with subscription
            u.SaveWithSubscription(baseOffer.OfferId, serviceInstanceId);

            // now mark the reserved name as complete
            // bogus key values are fine
            byte[] key = GetRandomBytes(16);
            byte[] iv = GetRandomBytes(16);
            byte[] sppa = GetRandomBytes(20);
            byte[] ppa = GetRandomBytes(8);

            hr = NameUtil.ReserveGamertag(u.GamerTag, u.Puid, u.MachinePuid, 1, key, iv, sppa, ppa, key, iv, sppa, ppa);
            Assert.IsTrue(HResult.Succeeded(hr));

            // generate a random serial number
            string serialNumber = "SN.";
            byte[] b = new byte[9];
            rng.GetBytes(b);
            for (int i=0; i<b.Length; i++)
            {
                serialNumber += (b[i] % 10).ToString("d");
            }

            // now that the user has been added, add the machine
            Machine m = new Machine();
            m.Puid = u.MachinePuid;
            m.SerialNumber = serialNumber;
            m.Save();

            return u;
        }
    }

    /// <summary>
    /// This whole testGroup is a DVT test, which means any testCase in
    /// this group is a DVT testCase even though they don't have a DVT
    /// attribute associated with it
    /// </summary>
    [TestGroup, DVT]
    public class FuncCommonUserGroup : TestNode
    {
        [TestCase, Description("PUIDMgr.GetNewPUID")]
        class PuidMgrGetNewPuid : TestBase
        {
            protected override void Execute()
            {
                ulong puid = PUIDMgr.GetNewPUID();
                if ( puid != 0 )
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("AdjectiveList.CreateInstance")]
        class AdjectiveListCreateInstance : TestBase
        {
            protected override void Execute()
            {
                byte countryId = 103;
                AdjectiveList a = AdjectiveList.CreateInstance(countryId);
                if ( a.RandomItem() != null )
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("NounList.CreateInstance")]
        class NounListCreateInstance : TestBase
        {
            protected override void Execute()
            {
                byte countryId = 103;
                NounList n = NounList.CreateInstance(countryId);

                if ( n.RandomItem() != null )
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("CountryList.CountryCode")]
        class CountryListCountryCode : TestBase
        {
            protected override void Execute()
            {
                Assert.AreEqual("US", CountryDictionary.CountryCode(103) );
                Assert.AreEqual("JP", CountryDictionary.CountryCode(53) );

                MinAge minAge = CountryDictionary.MinAge(103);
                Assert.IsTrue( minAge.User == 13 && minAge.Billing == 18 );

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Offer.CreateInstance")]
        class OfferCreateInstance : TestBase
        {
            protected override void Execute()
            {
                Offer o = Offer.CreateInstance(0xFFFE000080000008);
                byte countryId = 103;

                if ( o.IsPerMachine ) throw new UnexpectedTestResultException();
                if ( !o.IsPerUser ) throw new UnexpectedTestResultException();
                if ( !o.RequiresVoucher ) throw new UnexpectedTestResultException();
                if ( o.IsXbox1Content ) throw new UnexpectedTestResultException();
                if ( !o.IsCancelable ) throw new UnexpectedTestResultException();
                if ( !o.IsRenewal ) throw new UnexpectedTestResultException();
                if ( o.Bitfilter != 1 ) throw new UnexpectedTestResultException();
                if ( o.BillingOfferId(countryId) == null ) throw new UnexpectedTestResultException();
                if ( !o.OfferingIsOffered(countryId) ) throw new UnexpectedTestResultException();
                if ( !o.OfferingIsFree(countryId) ) throw new UnexpectedTestResultException();

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Offer.ValidateRenewalPath")]
        class OfferValidateRenewalPath : TestBase
        {
            protected override void Execute()
            {
                Offer o = Offer.CreateInstance(0xFFFE000080000008);
                byte countryId = 103;

                User u = UserTestUtil.CreateRandomUser();

                // output parameters
                ulong baseOfferId;
                string instanceId;
                int convertMode;

                uint hr = o.ValidateRenewalPath(u.Puid, XOn.DASH_TITLE_ID, countryId, out baseOfferId, out instanceId, out convertMode);
                Assert.IsTrue( HResult.Succeeded(hr) );

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("NameUtil.ReserveGamertag")]
        class NameUtilReserveGamertag : TestBase
        {
            protected override void Execute()
            {
                byte countryId = 103;
                AdjectiveList aList = AdjectiveList.CreateInstance(countryId);
                NounList nList = NounList.CreateInstance(countryId);
                ulong xboxPuid1 = PUIDMgr.GetNewPUID();
                ulong xboxPuid2 = PUIDMgr.GetNewPUID();
                bool failed = false;

                for (int i=0; i<100; i++)
                {
                    string a = aList.RandomItem();
                    string n = nList.RandomItem();
                    uint hr1 = 0;
                    uint hr2 = 0;
                    string name1 = a + n;

                    if ( name1.Length > XOn.XONLINE_NAME_MAX_SIZE-1 )
                    {
                        name1 = name1.Substring(0, (int)XOn.XONLINE_NAME_MAX_SIZE-1);
                    }

                    hr1 = NameUtil.ReserveGamertag(name1, 0, xboxPuid1, 0, null, null, null, null, null, null, null, null);

                    if ( HResult.Succeeded(hr1) )
                    {
                        string name2 = a + " " + n;

                        if ( name2.Length > XOn.XONLINE_NAME_MAX_SIZE )
                        {
                            name2 = name2.Substring(0, (int)XOn.XONLINE_NAME_MAX_SIZE);
                        }

                        hr2 = NameUtil.ReserveGamertag(name2, 0, xboxPuid2, 0, null, null, null, null, null, null, null, null);
                        if ( hr2 != HResult.XONLINE_E_ACCOUNTS_NAME_TAKEN )
                        {
                            failed = true;
                            break;
                        }
                    }
                }

                if ( !failed )
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, Description("User.SaveWithSubscription")]
        class UserSaveWithSubscription : TestBase
        {
            protected override void Execute()
            {
                byte countryId = 103;
#if false
                string gamertag = null;
                DateTime now = DateTime.UtcNow;
                uint hr = 0;

                AdjectiveList a = AdjectiveList.CreateInstance(countryId);
                NounList n = NounList.CreateInstance(countryId);
                gamertag = a.RandomItem() + n.RandomItem();

                User u = new User();

                u.Puid = PUIDMgr.GetNewPUID();
                u.OwnerPuid = u.Puid;
                u.MachinePuid = PUIDMgr.GetNewPUID();
                u.GamerTag = gamertag;
                u.CountryId = countryId;
                u.AccountId = BillingProvider.GenerateDummyId(false);
                u.PaymentInfoId = BillingProvider.GenerateDummyId(false);
                u.BillingPIN = PaymentInfo.GetLastFourDigits("1111");
                u.Birthdate = new DateTime(1970,1,1);
                u.AcceptedTOSDate = now;
                u.AccountResumeDate = now;
                u.VoiceResumeDate = now;
                u.ResetDate = now;
                u.AcceptMsSpam = 1;
                u.AcceptPartnerSpam = 1;

                Offer baseOffer = Offer.CreateInstance(0xFFFE000080000008);
                string serviceInstanceId = BillingProvider.GenerateDummyId(false);

                // first reserve the name
                hr = NameUtil.ReserveGamertag(gamertag, 0, u.MachinePuid, 0, null, null, null, null, null, null, null, null);
                Assert.IsTrue(HResult.Succeeded(hr));

                // now create the user with subscription
                u.SaveWithSubscription(baseOffer.OfferId, serviceInstanceId);

                // now mark the reserved name as complete
                // bogus key values are fine
                byte[] key = GetRandomBytes(16);
                byte[] iv = GetRandomBytes(16);
                byte[] sppa = GetRandomBytes(20);
                byte[] ppa = GetRandomBytes(8);

                hr = NameUtil.ReserveGamertag(u.GamerTag, u.Puid, u.MachinePuid, 1, key, iv, sppa, ppa, key, iv, sppa, ppa);
                Assert.IsTrue(HResult.Succeeded(hr));
#else
                User u = UserTestUtil.CreateRandomUser(countryId);
#endif
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("User.LoadFromGamerTag")]
        class UserLoadFromGamerTag : TestBase
        {
            protected override void Execute()
            {
#if false
                User u = new User();
                u.LoadFromGamerTag("nunit50bf5b9");
                if ( u.CountryId != 103 ) throw new UnexpectedTestResultException();

                u.Save();
#endif
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("User.BillingPuid")]
        class UserBillingPuid : TestBase
        {
            protected override void Execute()
            {
                ulong childPuid = PUIDMgr.GetNewPUID();
                ulong adultPuid = PUIDMgr.GetNewPUID();

                User adultUser = new User();
                adultUser.Puid = adultPuid;
                adultUser.OwnerPuid = adultPuid;
                adultUser.GamerTag = "foobar";

                Assert.AreEqual( adultUser.BillingPuid, adultUser.Puid );
                Assert.AreEqual( adultUser.BillingPuid, adultUser.OwnerPuid );
                Assert.AreEqual( adultUser.GamerTag, adultUser.BillingPMN );

                User childUser = new User();
                childUser.Puid = childPuid;
                childUser.OwnerPuid = adultPuid;
                childUser.GamerTag = "barfoo";

                Assert.AreEqual( childUser.BillingPuid, childUser.OwnerPuid );
                Assert.AreEqual( childUser.Puid, childPuid );
                Assert.IsTrue( childUser.BillingPuid != childUser.Puid );
                Assert.AreEqual( childUser.GamerTag, childUser.BillingPMN );
                Assert.AreEqual( childUser.GamerTag + ".Owner", childUser.BillingOwnerPMN );

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Profile.Load")]
        class ProfileLoad : TestBase
        {
            protected override void Execute()
            {
#if false
                User u = new User();
                u.LoadFromGamerTag("nunit50bf5b9");

                if ( u.AcceptMsSpam != 0 || u.AcceptPartnerSpam != 0 ) throw new UnexpectedTestResultException();

                u.AcceptMsSpam = 1;
                u.AcceptPartnerSpam = 1;
                u.Save();

                u.AcceptMsSpam = 0;
                u.AcceptPartnerSpam = 0;
                u.Save();
#endif
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("NameUtil.VetName")]
        class NameUtilVetName : TestBase
        {
            protected override void Execute()
            {
                if ( NameUtil.VetName("xbox") == true )  throw new UnexpectedTestResultException();
                if ( NameUtil.VetName("hate") == true )  throw new UnexpectedTestResultException();
                if ( NameUtil.VetName("gary") == false ) throw new UnexpectedTestResultException();

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("NameUtil.VerifyEmail")]
            class NameUtilVerifyEmail : TestBase
        {
            protected override void Execute()
            {
                Assert.IsTrue( NameUtil.VerifyEmail("foo@bar.com") );
                Assert.IsTrue( NameUtil.VerifyEmail("123@456.org") );
                
                // bug 59312
                // two valid Hotmail addresses that were previously rejected by Xbox Live
                Assert.IsTrue( NameUtil.VerifyEmail("spider--grrl@hotmail.com") );
                Assert.IsTrue( NameUtil.VerifyEmail("neil___@hotmail.com") );

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
    }

    /// <summary>
    /// This whole testGroup is a DVT test, which means any testCase in
    /// this group is a DVT testCase even though they don't have a DVT
    /// attribute associated with it
    /// </summary>
    [TestGroup, DVT]
    public class FuncLocaleGroup : TestNode
    {
        [TestCase, Description("Locale.DefaultByCountry")]
        class LocaleDefaultByCountry : TestBase
        {
            protected override void Execute()
            {
                Assert.AreEqual("en-US", Locale.DefaultByCountry("US"));
                Assert.AreEqual("ja-JP", Locale.DefaultByCountry("JP"));
                Assert.AreEqual("en-SG", Locale.DefaultByCountry("SG"));

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Locale.DefaultByLanguage")]
        class LocaleDefaultByLanguage : TestBase
        {
            protected override void Execute()
            {
                Assert.AreEqual("en-US", Locale.DefaultByLanguage(XOn.XC_LANGUAGE_ENGLISH));
                Assert.AreEqual("ja-JP", Locale.DefaultByLanguage(XOn.XC_LANGUAGE_JAPANESE));
                Assert.AreEqual("de-DE", Locale.DefaultByLanguage(XOn.XC_LANGUAGE_GERMAN));
                Assert.AreEqual("fr-FR", Locale.DefaultByLanguage(XOn.XC_LANGUAGE_FRENCH));
                Assert.AreEqual("es-ES", Locale.DefaultByLanguage(XOn.XC_LANGUAGE_SPANISH));
                Assert.AreEqual("it-IT", Locale.DefaultByLanguage(XOn.XC_LANGUAGE_ITALIAN));
                Assert.AreEqual("ko-KR", Locale.DefaultByLanguage(XOn.XC_LANGUAGE_KOREAN));
                Assert.AreEqual("zh-TW", Locale.DefaultByLanguage(XOn.XC_LANGUAGE_TCHINESE));
                Assert.AreEqual("pt-BR", Locale.DefaultByLanguage(XOn.XC_LANGUAGE_PORTUGUESE));

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Locale.NeutralCultureFromLanguage")]
        class LocaleNeutralCultureFromLanguage : TestBase
        {
            protected override void Execute()
            {
                Assert.AreEqual("en", Locale.NeutralCultureFromLanguage(XOn.XC_LANGUAGE_ENGLISH));
                Assert.AreEqual("ja", Locale.NeutralCultureFromLanguage(XOn.XC_LANGUAGE_JAPANESE));
                Assert.AreEqual("de", Locale.NeutralCultureFromLanguage(XOn.XC_LANGUAGE_GERMAN));
                Assert.AreEqual("fr", Locale.NeutralCultureFromLanguage(XOn.XC_LANGUAGE_FRENCH));
                Assert.AreEqual("es", Locale.NeutralCultureFromLanguage(XOn.XC_LANGUAGE_SPANISH));
                Assert.AreEqual("it", Locale.NeutralCultureFromLanguage(XOn.XC_LANGUAGE_ITALIAN));
                Assert.AreEqual("ko", Locale.NeutralCultureFromLanguage(XOn.XC_LANGUAGE_KOREAN));
                Assert.AreEqual("zh", Locale.NeutralCultureFromLanguage(XOn.XC_LANGUAGE_TCHINESE));
                Assert.AreEqual("pt", Locale.NeutralCultureFromLanguage(XOn.XC_LANGUAGE_PORTUGUESE));

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, Description("Locale.IsValidLocale")]
        class LocaleIsValidLocale : TestBase
        {
            protected override void Execute()
            {
                Assert.IsTrue( Locale.IsValidLocale("da-DK") );
                Assert.IsTrue( Locale.IsValidLocale("de-AT") );
                Assert.IsTrue( Locale.IsValidLocale("de-CH") );
                Assert.IsTrue( Locale.IsValidLocale("de-DE") );
                Assert.IsTrue( Locale.IsValidLocale("en-AU") );
                Assert.IsTrue( Locale.IsValidLocale("en-CA") );
                Assert.IsTrue( Locale.IsValidLocale("en-GB") );
                Assert.IsTrue( Locale.IsValidLocale("en-HK") );
                Assert.IsTrue( Locale.IsValidLocale("en-IE") );
                Assert.IsTrue( Locale.IsValidLocale("en-NZ") );
                Assert.IsTrue( Locale.IsValidLocale("en-SG") );
                Assert.IsTrue( Locale.IsValidLocale("en-US") );
                Assert.IsTrue( Locale.IsValidLocale("es-ES") );
                Assert.IsTrue( Locale.IsValidLocale("es-MX") );
                Assert.IsTrue( Locale.IsValidLocale("fi-FI") );
                Assert.IsTrue( Locale.IsValidLocale("fr-BE") );
                Assert.IsTrue( Locale.IsValidLocale("fr-CA") );
                Assert.IsTrue( Locale.IsValidLocale("fr-CH") );
                Assert.IsTrue( Locale.IsValidLocale("fr-FR") );
                Assert.IsTrue( Locale.IsValidLocale("it-IT") );
                Assert.IsTrue( Locale.IsValidLocale("ja-JP") );
                Assert.IsTrue( Locale.IsValidLocale("ko-KR") );
                Assert.IsTrue( Locale.IsValidLocale("nl-BE") );
                Assert.IsTrue( Locale.IsValidLocale("nl-NL") );
                Assert.IsTrue( Locale.IsValidLocale("nb-NO") );
                Assert.IsTrue( Locale.IsValidLocale("sv-SE") );
                Assert.IsTrue( Locale.IsValidLocale("zh-HK") );
                Assert.IsTrue( Locale.IsValidLocale("zh-TW") );
                Assert.IsTrue( Locale.IsValidLocale("en-US") );

                // add a few negative tests
                Assert.IsTrue( !Locale.IsValidLocale("zh-SG") );
                Assert.IsTrue( !Locale.IsValidLocale("fr-US") );
                Assert.IsTrue( !Locale.IsValidLocale("en-FR") );
                Assert.IsTrue( !Locale.IsValidLocale("en-JP") );

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\VoucherUtil2Test.cs ===
using System;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.diagnostics;
using xonline.tools.framework;

namespace xonline.common.test.tools
{
    /// <summary>
    /// Summary description for VoucherUtilTest.
    /// </summary>
    [TestFixture]
    public class VoucherUtil2Test  : TestNode
    {
        public static readonly string fakeSubCodeString = "2222222222222222222222222";
        public static readonly string fakeSubCodeStringWithDashes = "22222-22222-22222-22222-22222";
        // public static readonly string fakeHashString = "the fake hash of 22s";
        public static readonly string fakeHashString = "D454A4B7F1309A014C9942D333505B6030538948";
        public static readonly byte[] fakeHashBytes = new byte[] { 0xD4,0x54,0xA4,0xB7,0xF1,0x30,0x9A,0x01,0x4C,0x99,0x42,0xD3,0x33,0x50,0x5B,0x60,0x30,0x53,0x89,0x48 };	
        public static readonly byte[] fakeHashBytesOnes = new byte[] { 0x46,0x0D,0x1A,0xBD,0x93,0x38,0x33,0xBA,0xD5,0x4F,0x47,0xBC,0x83,0xB0,0x42,0x26,0xE9,0xC9,0x62,0x23 };	
        public static readonly string weirdHashString1 = "K45KQ63L1B-B6W9J-A2VDL-4FDS0";
        public static readonly string weirdHashString2 = "K45KQ-63L1BB6W9J-A2VDL-4FDS0";
        public static readonly string weirdHashString3 = "K45KQ-63L1B-B6W9JA2VDL-4FDS0";
        public static readonly string weirdHashString4 = "K45KQ-63L1B-B6W9J-A2VDL4FDS0";


        // this is great, no need for setup or teardown!!
        [Test]
        public void nullObjectTest()
        {
            Console.WriteLine( "nullObjectTest  " );
            byte [] nullHash = null;
            Assert.AreEqual("", VoucherUtil2.HashByteToHexStr( nullHash ));
        }

        [Test]
        public void fakeHashTest()
        {
            Console.WriteLine( "fakeHashTest  " );
            Assert.AreEqual( fakeHashString, VoucherUtil2.HashByteToHexStr( fakeHashBytes ) );
        }

        [Test]
        public void SubcodeStringToHashByteTest()
        {
            Console.WriteLine( "SubcodeStringToHashByteTest  " + fakeSubCodeString );
            byte [] newBytes = new byte[] { 0xD4,0x54,0xA4,0xB7,0xF1,0x30,0x9A,0x01,0x4C,0x99,0x42,0xD3,0x33,0x50,0x5B,0x60,0x30,0x53,0x89,0x48 };
            byte [] newBytes2 = VoucherUtil2.SubcodeStringToHashByte( fakeSubCodeString );
            //Console.WriteLine( "hash: " + VoucherUtil2.HashByteToHexStr( VoucherUtil2.SubcodeStringToHashByte( fakeSubCodeString ) ) );
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( newBytes ), VoucherUtil2.HashByteToHexStr( newBytes2) );
        }

        [Test]
        public void SubcodeStringWithDashesToHashTest()
        {
            Console.WriteLine( "SubcodeStringWithDashesToHashTest  " );
            Console.WriteLine( fakeSubCodeStringWithDashes );
            Console.WriteLine( "01234567890123456789012345678" );                
            Console.WriteLine( "len " + fakeSubCodeStringWithDashes.Length.ToString() );
            Console.WriteLine( "6: " + fakeSubCodeStringWithDashes[  6 ] + " 11: " + fakeSubCodeStringWithDashes[ 11 ] + " 16: " + fakeSubCodeStringWithDashes[ 16 ] + " 21: " + fakeSubCodeStringWithDashes[ 21 ] );
            Console.WriteLine( "hash: " + VoucherUtil2.HashByteToHexStr( VoucherUtil2.SubcodeStringToHashByte( fakeSubCodeStringWithDashes ) ) );
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( fakeHashBytes ), VoucherUtil2.HashByteToHexStr( VoucherUtil2.SubcodeStringToHashByte( fakeSubCodeStringWithDashes ) ) );
        }
        
        [Test]
//        [ExpectedException( typeof( ArgumentException ) ) ]
        public void SubcodeInvalidStringToHashTest()
        {
            Console.WriteLine( "SubcodeInvalidStringToHashTest  " + weirdHashString1 );
            try
            {
                byte[] result = VoucherUtil2.SubcodeStringToHashByte( weirdHashString1 );
            }
            catch( ArgumentException )
            {
                Console.WriteLine( "Correct Exception Caught!" );
            }
        }

        [Test]
            //        [ExpectedException( typeof( ArgumentException ) ) ]
        public void SubcodeLongStringWithDashesToHashTest()
        {
            string longTestString = fakeSubCodeStringWithDashes + fakeSubCodeStringWithDashes;
            byte[] result;
            Console.WriteLine( "SubcodeLongStringWithDashesToHashTest  " + longTestString );
            
            try
            {
                result = VoucherUtil2.SubcodeStringToHashByte( longTestString );
            }
            catch( ArgumentException )
            {
                Console.WriteLine( "Correct Exception Caught!" );
            }
        }

        [Test]
//        [ExpectedException( typeof( ArgumentException ) ) ]
        public void SubcodeShortStringWithDashesToHashTest()
        {
            string shortTestString = fakeSubCodeStringWithDashes.Substring( 0, 1);
            byte[] result;
            Console.WriteLine( "SubcodeShortStringWithDashesToHashTest  " + shortTestString );
            
            try
            {
                result = VoucherUtil2.SubcodeStringToHashByte( shortTestString );
            }
            catch( ArgumentException )
            {
                Console.WriteLine( "Correct Exception Caught!" );
            }
        }

        [Test]
        public void SubcodeNullTest()
        {
            string nullTestString = null;
            byte[] result;
            Console.WriteLine( "SubcodeNullTest  " + nullTestString );
            result = VoucherUtil2.SubcodeStringToHashByte( nullTestString );
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( result ), VoucherUtil2.HashByteToHexStr( fakeHashBytesOnes ) );
        }

        //what if the string is null?
        [Test]
        //[ExpectedException( typeof( ArgumentException ) ) ]
        public void HashStringNull()
        {
            string teststring = null;
            try 
            {
                byte[] hb = VoucherUtil2.HashBytesStringToHashByte( teststring );
            }
            catch( ArgumentException )
            {
                Console.WriteLine( "Correct Exception Caught!" );
            }
        }

        //... or empty
        [Test]
//        [ExpectedException( typeof( ArgumentException ) ) ]
        public void HashStringEmpty()
        {
            string teststring = "";
            byte[] hb = VoucherUtil2.HashBytesStringToHashByte( teststring );
        }

        //what if the string is too short?
        [Test]
//        [ExpectedException( typeof( ArgumentException ) ) ]
        public void HashStringtoBytesShort()
        {
            string teststring = "b4";
            try
            {
                byte[] hb = VoucherUtil2.HashBytesStringToHashByte( teststring );
            }
            catch( ArgumentException )
            {
                Console.WriteLine( "Correct Exception Caught!" );
            }
        }

        //what if the string is too long?
        [Test]
//        [ExpectedException( typeof( ArgumentException ) ) ]
        public void HashStringtoBytesLong()
        {
            string teststring = "a4b4c4d4a4b4c4d4a4b4c4d4a4b4c4d4a4b4c4d4a4";
            try 
            {
                byte[] hb = VoucherUtil2.HashBytesStringToHashByte( teststring );
            }
            catch( ArgumentException )
            {
                Console.WriteLine( "Correct Exception Caught!" );
            }
        }

        //what if the string has non-convertible characters (G-Z)?
        [Test]
//        [ExpectedException( typeof( ArgumentException ) ) ]
        public void HashStringtoBytesNonHexChar()
        {
            string teststring = "a4z4c4d4a4b4c4d4a4b4c4d4a4b4c4d4a4b4c4d4";
            try
            {
                byte[] hb = VoucherUtil2.HashBytesStringToHashByte( teststring );
            }
            catch( ArgumentException )
            {
                Console.WriteLine( "Correct Exception Caught!" );
            }
        }

        //what if the string is just right?
        [Test]
        public void HashStringtoBytes()
        {
            //do the operation
            byte[] hb = VoucherUtil2.HashBytesStringToHashByte( fakeHashString );
            //assert roundtrip-ability
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( hb ), fakeHashString );
        }

        // no teardown!
    }

}  // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\UserBillingInfoTest.cs ===
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Threading;
using System.Web.Services.Protocols;
// using XBOX.Online.Accounts;

using Microsoft.Webstore.WstClient;
// using NUnit.Framework;
// using PsoLib;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.service;
using xonline.common.billing;
using xonline.tools.framework;

namespace xonline.common.test.tools
{


//    public class BillingInfoSTFTest : TestSuite
//    {
//        // functional test for BasicTest
//        public override InitializerInfo GetRequiredResources()
//        {
//            // need to use fakesg service
//            InitializerInfo ii= new InitializerInfo();
//            ii.UseFakeSG = true;
//            ii.UseUodb = false;
//
//            // Uacs support
//            Global.Env.UACSServer = new LiveServer( "UACS","10.10.2.19:85" );
//
//            return ii;
//        }
//
//
//        public override TestBaseGroupList GetTests()
//        {
//            TestBaseGroupList tbgl = new TestBaseGroupList();
//            tbgl.Add( new UserBillingInfoTest() );
//            tbgl.Add( new DeActivatorProcessHashTest() );
//            tbgl.Add( new DeActivatorDecisionTest_HashandUser() );
//            tbgl.Add( new DeActivatorActionTest_HashandUser() );
//            return tbgl;
//        }
//     }


    /// <summary>
    /// Summary description for UserBillingInfo.
    /// </summary>
    [TestFixture]
    public class UserBillingInfoTest : TestNode
    {

        //test if the test connection works
        //does the connection code have what it needs to run?
        [Test]
        public void UBITestConnectionTest()
        {
            Console.WriteLine("UBITestConnectionTest");
            UserBillingInfo ubi = new UserBillingInfo();
        }


        //task: test guard clauses - create new object and try methods!
        //test user doesn't exist
        [Test]
        public void LoadNonExistentAccount()
        {
            Console.WriteLine("======================================================================");
            Console.WriteLine("LoadNonExistentAccount");
            //re-use test code... ;-)
            User2 u = User2.Load( UserTest.GetSingleUserPUIDFromUODB() );

            UserBillingInfo ubi = new UserBillingInfo();
            u.Puid = 100000;  // should put the puid in the "impossible to be a puid" range...
            u.AccountID = "AAAAAA";  // should make the account ID unlikely..
            try
            {
                ubi.LoadBilling( u );
            }
            catch ( SoapException se )
            {
                Console.WriteLine("Caught SOAP Exception..." + se.ToString() );
            }

            //debug: Console.WriteLine( ubi.RawXML );
            //shouldn't be marked as loaded, in any case...
            //task: but what other tests might we have??
            if ( ubi.IsSPSLoaded )
            {
                throw new Exception("Load non-existing account didn't work.");
            }

        }



        //test user exists --> what to confirm?  anything in common between UODB and SPS to use?
        [Test]
        public void LoadExistingAccount()
        {
            Console.WriteLine("======================================================================");
            Console.WriteLine("LoadExistingAccount");

            //create a new user
            ulong testUser = CreateUserForTesting( Owner.Country.US );
            Console.WriteLine( "UserCreated " + testUser.ToString() );
            User2 u = User2.Load( testUser );
            Console.WriteLine( "" );
            Console.WriteLine( "UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );
            Console.WriteLine( "\n\n " + u.ToString() + "\n\n" );

            UserBillingInfo ubi = new UserBillingInfo();
            ubi.LoadBilling( u );
            Console.WriteLine( ubi.RawXML );

            SubscriptionInfoSetSubscriptionInfo sub;
            for ( int iLoop = 0; iLoop < ubi.Subscriptions.Items.Length; iLoop++ )
            {
                sub = ubi.Subscriptions.Items[iLoop];
                Console.WriteLine( sub.ToString() );
                Console.WriteLine( "\n FriendlyName " + sub.FriendlyName + "  OfferingGUID " + sub.OfferingGUID.ToString() + "\n PurchaseInstrumentID " + sub.PaymentInstrumentId.ToString() );
                if ( sub.DelayedConversion != null )
                {
                    foreach( SubscriptionInfoSetSubscriptionInfoDelayedConversion dc in sub.DelayedConversion )
                    {
                        Console.WriteLine( " DelayedConversion:  Offer - " + dc.OfferingGUID + "  ConversionDate - " + dc.ConversionDate );
                    }
                }
                else
                {
                    Console.WriteLine( "\n DelayedConversion is null. " );
                }
            }

            //while I'm not testing everything, this is enough to be reasonably sure
            //do I really need to confirm XUACS and SPS are consistent in all variables?
            //task: do more thorough checks to confirm this is the expected user's info, like offerGUID, etc...
            Console.WriteLine( "IsLoaded: {0}, GT: {1} - {2}, Acct: {3} - {4}, Pymt: {5} - {6}",
                                ubi.IsSPSLoaded,
                                u.GamerTag, ubi.Subscriptions.Items[0].FriendlyName,
                                u.AccountID, ubi.Subscriptions.Items[0].SubscriptionId,
                                u.PaymentInfoID, ubi.Subscriptions.Items[0].PaymentInstrumentId
                             );
            if (
                ( ! ubi.IsSPSLoaded ) ||
                ( u.GamerTag != ubi.Subscriptions.Items[0].FriendlyName ) ||
                //the subscriptionID *contains* the accountID
                ( 0 < ubi.Subscriptions.Items[0].SubscriptionId.IndexOf( u.AccountID, 0, ubi.Subscriptions.Items[0].SubscriptionId.Length ) ) ||
                ( u.PaymentInfoID != ubi.Subscriptions.Items[0].PaymentInstrumentId )
                )
            {
                throw new Exception("Failed to Load Existing Account");
            }

        }


        [Test]
        public void FindBaseSubscription()
        {
            // create a user with base subscription
            Console.WriteLine("======================================================================");
            Console.WriteLine( "bFindBaseSubscription" );

            //create a new user
            ulong testUser = CreateUserForTesting( Owner.Country.US );
            User2 u = User2.Load( testUser );
            Console.WriteLine( "" );
            Console.WriteLine( "UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );

            // load SPS info for that user
            UserBillingInfo ubi = new UserBillingInfo();
            ubi.LoadBilling( u );

            if ( ! ubi.IsSPSLoaded )
            {
                throw new Exception( "ubiSPSLoad not successful!" );
            }

            int indexBaseSubscription;
            indexBaseSubscription = ubi.GetBaseSubscriptionIndex();
            Console.WriteLine( "BaseSubIndex {0}", indexBaseSubscription );
            bool success = false;

            // do we return the correct subscription index?
            // is there a better way than just re-running the same code?
            for ( int iLoop = 0; iLoop < ubi.Subscriptions.Items.Length ; iLoop++ )
            {
                Console.WriteLine( "iLoop: {0} ServiceComponentID {1}", iLoop, ubi.Subscriptions.Items[ indexBaseSubscription ].ServiceInstanceSet[ iLoop ].ServiceComponentId );

                //the base subscription is a subscription which is enabled and
                //contains the "Base Service Offering"
                if ( ubi.Subscriptions.Items[ indexBaseSubscription ].ServiceInstanceSet[ iLoop ].ServiceComponentId == BillingConstants.BaseServiceOfferingGUID )
                {
                    //remember the enabled subscription which has a service componentID which is a BaseSubscription to XBL Service
                    success = true;
                }

            }//for serviceinstances

            if (! success )
            {
                throw new Exception( "Failed to identify Base Subscription!" );
            }
        }


        [Test]
        public void FindBaseSubscriptionWithOthers()
        {
            // create a user with base subscription
            Console.WriteLine("======================================================================");
            Console.WriteLine( "bFindBaseSubscriptionWithOthers" );

            //create a new user
            ulong testUser = CreateUserForTesting( Owner.Country.US );
            User2 u = User2.Load( testUser );
            Console.WriteLine("");
            Console.WriteLine("UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );

            // load SPS info for that user
            UserBillingInfo ubi = new UserBillingInfo();
            ubi.LoadBilling( u );

            if ( ! ubi.IsSPSLoaded )
            {
                throw new Exception("ubiSPSLoad not successful!");
            }

            Console.WriteLine("raw sps xml is\n " + ubi.RawXML );

            // use XBOS/XUACs code to retrive information from SPS
            // ...saves writing it myself.  ;-)
            Account userAccount = new Account();
            userAccount.GetInfo( u.OwnerPuid, u.AccountID, u.PaymentInfoID );

            Console.WriteLine("User AddressID: " + userAccount.UserAddress.AddressId );
            Console.WriteLine("User PaymentInstrID: " + userAccount.PaymentInstrumentId );

            GetOfferingsForUser( (long) u.OwnerPuid, u.AccountID, "a18b1837-7604-4b43-90f9-9ce2bb6d7f08", "");
//"a18b1837-7604-4b43-90f9-9ce2bb6d7f08"

            // purchase a subscription for PSO
            ubi.PurchaseSubscription( u, "a18b1837-7604-4b43-90f9-9ce2bb6d7f08", u.PaymentInfoID, userAccount.UserAddress.AddressId );

            //bb4e54cc-5fef-41f7-b36b-5bdcf4d12f9b - t_offer_regions
            //76805fa5-7c7f-48a5-adc1-f9dd6219143b - t_offers
            // f810cab3-74a3-41f2-8a6b-a3f0a37ad4dd

            // reload user from SPS
            UserBillingInfo ubiAfter = new UserBillingInfo();
            ubiAfter.LoadBilling( u );

            Console.WriteLine("AFTER PURHCASE: raw sps xml is \n" + ubi.RawXML );

            // do we return the correct subscription index?
            int indexBaseSubscription;
            indexBaseSubscription = ubiAfter.GetBaseSubscriptionIndex();
            Console.WriteLine("Base Subscription is " + indexBaseSubscription.ToString() );

            bool success = true;

            // do we return the correct subscription index?
            // is there a better way than just re-running the same code?
//            for ( int iLoop = 0; iLoop < ubiAfter.Subscriptions.Items.Length ; iLoop++ )
//            {
//                //the base subscription is a subscription which is enabled and
//                //contains the "Base Service Offering"
//                if ( ubiAfter.Subscriptions.Items[ indexBaseSubscription ].ServiceInstanceSet[ iLoop ].ServiceComponentId == BillingConstants.BaseServiceOfferingGUID )
//                {
//                    //remember the enabled subscription which has a service componentID which is a BaseSubscription to XBL Service
//                    success = true;
//                }
//
//            }//for serviceinstances

            if (! success )
            {
                throw new Exception( "Failed to identify Base Subscription!" );
            }

        }


        //test adding a comment
        [Test]
        public void AddComment()
        {

            Console.WriteLine("======================================================================");
            Console.WriteLine( "cAddComment" );

            //create a new user
            ulong testUser = CreateUserForTesting( Owner.Country.US );
            User2 u = User2.Load( testUser );
            Console.WriteLine("");
            Console.WriteLine("UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );

            // load SPS info for that user
            UserBillingInfo ubi = new UserBillingInfo();
            ubi.LoadBilling( u );

            if ( ! ubi.IsSPSLoaded )
            {
                throw new Exception("ubiSPSLoad not successful!");
            }

            //add comment to the account
            CommentInfo comment = new CommentInfo();
            comment.CommentCode = System.Convert.ToString( 200705 );    // CC_CONVERT_SUBSCRIPTION
            comment.CommentText = "ZXQJ6 DVT Comment for CC_Convert_Subscription.";
            UserBillingInfo.AddComment( ubi.Subscriptions.Items[ 0 ].SubscriptionId, comment );

            //get comments for account and confirm it's there
            BillingProvider bp = new BillingProvider();

            //CommentInfoSet comments;
            string errorXML;
            int infosetCount;
            string returnedCommentInfoSetXML;

            bp.GetComments(
                1,      //delegateHigh
                1,      //delegateLow
                ubi.Subscriptions.Items[ 0 ].SubscriptionId,
                out errorXML,
                out infosetCount,
                out returnedCommentInfoSetXML
                );

            // deserialize the comment infoset?
            // actually, the comment should be there verbatim, so we can just
            // search the string for it..
            Console.WriteLine( "Returned comments: " + returnedCommentInfoSetXML );
            if ( returnedCommentInfoSetXML.IndexOf( "ZXQJ6 DVT Comment for CC_Convert_Subscription.", 0, returnedCommentInfoSetXML.Length ) >= 0 )
            {
                // all is well
                Console.WriteLine( "Comment was found!" );
            }
            else
            {
                // not found!!!
                throw new Exception("Comment was NOT found!");
            }

        }


        //subscription ID > sub.Length
        //subscription ID < 0
        [Test]
        public void CancelSubscriptionExceptions()
        {
            Console.WriteLine("======================================================================");
            Console.WriteLine( "cCancelSubscriptionExceptions" );

            //create a new user
            ulong testUser = CreateUserForTesting( Owner.Country.US );
            Console.WriteLine( "UserCreated " + testUser.ToString() );
            User2 u = User2.Load( testUser );
            Console.WriteLine( "" );
            Console.WriteLine( "UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );

            UserBillingInfo ubi = new UserBillingInfo();
            ubi.LoadBilling( u );
            Console.WriteLine( "UBITest - User has " + ubi.Subscriptions.Items.Length + " subcription(s)");
            Console.WriteLine( ubi.RawXML );

            int subIndex = ubi.GetBaseSubscriptionIndex();
            int negIndex = - subIndex;
            int overIndex = ubi.Subscriptions.Items.Length + 1;
            Console.WriteLine("About to cancel: idx " + subIndex + ", subID " + ubi.Subscriptions.Items[ subIndex ].SubscriptionId );
            string commentText = "You were cancelled by SubCodeMgr!";

            // catch the ArgumentException... any other exception means a problem..
            try
            {
                // cancel subscription
                ubi.CancelSubcription( negIndex, commentText );
            }
            catch (ArgumentException ae)
            {
                Console.WriteLine("Test: There was the CORRECT exception for Neg Index" + ae.ToString() + "\n" );
            }

            try
            {
                // cancel subscription
                ubi.CancelSubcription( overIndex, commentText );
            }
            catch (ArgumentException ae)
            {
                Console.WriteLine("Test: There was the CORRECT exception for Over Index" + ae.ToString() + "\n" );
            }

            Console.WriteLine( "Test: Past the try block. " );

            // get subscription info
            UserBillingInfo ubi2 = new UserBillingInfo();
            ubi2.LoadBilling( u );
            Console.WriteLine( ubi2.RawXML );

            // confirm subscription has status Cancelled
            if ( ubi2.Subscriptions.Items[ subIndex ].SubscriptionStatusInfo.SubscriptionStatus != "CANCELED" ) // BillingConstants.SubscriptionInfoCancelledString )
            {
                //yay! it worked...
                Console.WriteLine( "Subscription was correctly NOT cancelled." );
            }
            else
            {
                Console.WriteLine( "FAILED: Subscription cancellation didn't work Correctly" );
            }
        }


        // let's Cancel their Subscription
        [Test]
        public void CancelSubscription()
        {
            Console.WriteLine("======================================================================");
            Console.WriteLine( "cCancelSubscription" );

            //create a new user
            ulong testUser = CreateUserForTesting( Owner.Country.US );
            Console.WriteLine( "UserCreated " + testUser.ToString() );
            User2 u = User2.Load( testUser );
            Console.WriteLine( "" );
            Console.WriteLine( "UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );

            UserBillingInfo ubi = new UserBillingInfo();
            ubi.LoadBilling( u );
            Console.WriteLine( "UBITest - User has " + ubi.Subscriptions.Items.Length + " subcription(s)");
            Console.WriteLine( ubi.RawXML );

            int subIndex = ubi.GetBaseSubscriptionIndex();
            Console.WriteLine("About to cancel: idx " + subIndex + ", subID " + ubi.Subscriptions.Items[ subIndex ].SubscriptionId );
            string commentText = "You were cancelled by SubCodeMgr!";

            try
            {
                // cancel subscription
                ubi.CancelSubcription( subIndex, commentText );
            }
            catch (Exception e)
            {
                Console.WriteLine("Test: There was an exception:" + e.ToString() + "\n" );
            }

            Console.WriteLine( "Test: Past the try block. " );

            // get subscription info
            UserBillingInfo ubi2 = new UserBillingInfo();
            ubi2.LoadBilling( u );
            Console.WriteLine( ubi2.RawXML );

            // confirm subscription has status Cancelled
            if ( ubi2.Subscriptions.Items[ subIndex ].SubscriptionStatusInfo.SubscriptionStatus == "CANCELED" ) // BillingConstants.SubscriptionInfoCancelledString )
            {
                //yay! it worked...
                Console.WriteLine( "Subscription was cancelled." );
            }
            else
            {
                Console.WriteLine( "FAILED: Subscription cancellation didn't work" );
            }
        }


        //test user exists --> let's Change their Renewal Offer
        [Test]
        public void ChangeRenewalOfferUS()
        {
            Console.WriteLine("======================================================================");
            Console.WriteLine( "cChangeRenewalOffer US" );

            //create a new user
            ulong testUser = CreateUserForTesting( Owner.Country.US );
            User2 u = User2.Load( testUser );
            Console.WriteLine("");
            Console.WriteLine("UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );

            // load SPS info for that user
            UserBillingInfo ubi = new UserBillingInfo();
            ubi.LoadBilling( u );

            if ( ! ubi.IsSPSLoaded )
            {
                throw new Exception("ubiSPSLoad not successful!");
            }

            Console.WriteLine( "\n SubscriptionInfo\n" + ubi.RawXML + "\n Changing renewal to: " + UserBillingInfo.YearlyRenewalOfferGUID[ u.CountryID ] );
            //set renewal offer to Monthly, just for grins  "38352eb2-c6cf-4a1e-b1e5-6176973d66a9"
            ubi.ConvertSubscriptionRenewal( "38352eb2-c6cf-4a1e-b1e5-6176973d66a9", ubi.GetBaseSubscriptionIndex() );
            // ubi.ConvertSubscriptionRenewal( (string) UserBillingInfo.YearlyRenewalOfferGUID[ u.CountryID ] , ubi.GetBaseSubscriptionIndex() );

            // get subscription info
            UserBillingInfo ubiAfter = new UserBillingInfo();
            ubiAfter.LoadBilling( u );
            Console.WriteLine( "\nAfter SubscriptionInfo\n" + ubiAfter.RawXML );

            //task: check if renewal element is what we expect
        }


        //France as a sample of "other non-US uniform countries"
        //all other countries have the same renewal pattern -> if they return their voucher, renew them into the "yearly renewal" offer..
        [Test]
        public void ChangeRenewalOfferFrance()
        {
            Console.WriteLine("======================================================================");
            Console.WriteLine( "cChangeRenewalOfferAllCountries" );

            //create a new user
            ulong testUser = CreateUserForTesting( Owner.Country.FR );
            User2 u = User2.Load( testUser );
            Console.WriteLine("");
            Console.WriteLine("UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );

            // load SPS info for that user
            UserBillingInfo ubi = new UserBillingInfo();
            ubi.LoadBilling( u );

            Console.WriteLine( "\nBefore SubscriptionInfo\n" + ubi.RawXML + "\n Renewal Country: " + u.CountryID.ToString() );
            if ( ! ubi.IsSPSLoaded )
            {
                throw new Exception("ubiSPSLoad not successful!");
            }

            ubi.ConvertSubscriptionRenewal( (string) UserBillingInfo.YearlyRenewalOfferGUID[ (int) u.CountryID ] , ubi.GetBaseSubscriptionIndex() );

            // get subscription info
            UserBillingInfo ubiAfter = new UserBillingInfo();
            ubiAfter.LoadBilling( u );
            Console.WriteLine( "\nAfter SubscriptionInfo\n" + ubiAfter.RawXML );

            //task: check if renewal element is what we expect
        }


        //test user exists --> let's Change their Renewal Offer - Japan
        [Test]
        public void ChangeRenewalOfferSpecialJapan()
        {
            Console.WriteLine("======================================================================");
            Console.WriteLine( "cChangeRenewalOfferSpecialJapan" );

            //create a new user
            ulong testUser = CreateUserForTesting( Owner.Country.JP );
            User2 u = User2.Load( testUser );
            Console.WriteLine("");
            Console.WriteLine("UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );

            // load SPS info for that user
            UserBillingInfo ubi = new UserBillingInfo();
            ubi.LoadBilling( u );

            if ( ! ubi.IsSPSLoaded )
            {
                throw new Exception("ubiSPSLoad not successful!");
            }

            Console.WriteLine( "\nBefore ChangeRenewalOffer - Japan \n" + ubi.RawXML );
            ubi.ConvertSubscriptionRenewal( UserBillingInfo.YearlyRenewalOfferGUID[ (int) u.CountryID ].ToString() , ubi.GetBaseSubscriptionIndex() );

            //confirm that renewal offer is now monthly renewal
            // get subscription info
            UserBillingInfo ubiAfter = new UserBillingInfo();
            ubiAfter.LoadBilling( u );
            Console.WriteLine( "\nAfter SubscriptionInfo\n" + ubiAfter.RawXML );

            //task: check if renewal element is what we expect

        }


        //test user exists --> let's Change their Renewal Offer - Korea
//        [Test]
        public void ChangeRenewalOfferSpecialKorea()
        {
            Console.WriteLine("======================================================================");
            Console.WriteLine( "cChangeRenewalOfferSpecialKorea" );

            //create a new user
            ulong testUser = CreateUserForTesting( Owner.Country.KR );
            User2 u = User2.Load( testUser );
            Console.WriteLine("");
            Console.WriteLine("UBITest - puid: " + u.Puid.ToString() + "  accountid: " + u.AccountID );

            // load SPS info for that user
            UserBillingInfo ubi = new UserBillingInfo();
            ubi.LoadBilling( u );

            if ( ! ubi.IsSPSLoaded )
            {
                throw new Exception("ubiSPSLoad not successful!");
            }

            Console.WriteLine( "\nBefore ChangeRenewalOffer - Korea \n" + ubi.RawXML );

            //set renewal offer to no renewal "00000000-0000-0000-0000-000000000000"
            Console.WriteLine("About to Call convert:  Country - " + u.CountryID.ToString() + " GUID - " + UserBillingInfo.YearlyRenewalOfferGUID[ (object) u.CountryID ].ToString() );
            ubi.ConvertSubscriptionRenewal( UserBillingInfo.YearlyRenewalOfferGUID[ (int) u.CountryID ].ToString() , ubi.GetBaseSubscriptionIndex() );

            //confirm that renewal offer is now blank
            // get subscription info
            UserBillingInfo ubiAfter = new UserBillingInfo();
            ubiAfter.LoadBilling( u );
            Console.WriteLine( "\nAfter SubscriptionInfo\n" + ubiAfter.RawXML );

            //task: check if renewal element is what we expect

        }


        //test user with extra subscription - do we change the right renewal?
        //task: create PSO subscriptions in Testnet...
        public void ChangeRenewalWithPSOSubUS()
        {

        }


        #region Helper Functions

        /// <summary>
        /// Creates a user, and returns the puid of the user created
        /// </summary>
        /// <returns></returns>
        public static ulong CreateUserForTesting( Owner.Country userCountry )
        {
            Console.WriteLine("======================================================================");
            Console.WriteLine( "CreateUserForTesting: " + userCountry );

            // Uacs support
            UacsCommon uacs = new UacsCommon();

            ulong newUserPuid = 0;

            // removed try-catch so that errors creating a user bubble up to the test
            Owner o = uacs.GenerateOwner( userCountry );
            Console.WriteLine( "Gamertag - {0}, countryid - {1}", o.gamertag, o.countryId );
            o.birthdate = DateTime.Now.AddYears(-21);
            newUserPuid = o.Create();
            if ( newUserPuid == 0 )
            {
                Console.WriteLine( "Error: {0}", o.XErr );
            }

            Console.WriteLine( "Puid: " + newUserPuid.ToString() );

            return newUserPuid;

        }


        /// <summary>
        /// To find out what offerings are available
        /// </summary>
        /// <param name="puid"></param>
        /// <param name="accountID"></param>
        /// <param name="offeringID"></param>
        public void GetOfferingsForUser( long puid, string accountID, string offeringID, string category )
        {

            uint puidHigh, puidLow;
            Int64Convert.ToUintPair( puid, out puidHigh, out puidLow);

            string errorXml, offeringInfoSetXml;
            int offeringCount;

            BillingProvider bp = new BillingProvider();

            bp.GetEligibleOfferings(
                1,
                1,
                (int) puidHigh,
                (int) puidLow,
                accountID,              // used by SPS to get country, currency and language
                offeringID,             // one offering owned by user, used by SPS for identifying upgrades, downgrades and renewals
                category,                     // category
                "",                     // filter
                out errorXml,
                out offeringCount,
                out offeringInfoSetXml
                );

            Console.WriteLine( "Offerings are: " + offeringInfoSetXml );

        }



        #endregion


    }// class


}//  namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\VoucherHelpersTest.cs ===
using System;

using ServerTestFramework;
using ServerTestFramework.Utilities;

using xonline.common.diagnostics;
using xonline.tools.framework;

namespace xonline.common.test.tools
{
	/// <summary>
	/// Summary description for VoucherStructsTest.
	/// </summary>
    [TestFixture]
    public class VoucherHelpersTest : TestNode
    {

        //test VO equals operators
        //seems pretty silly to do this one by one, 
        //but ya gotta write tests for all your code... 
        [Test]
        public void VoucherOfferEqualityPos()
        {
            VoucherOffer vo = new VoucherOffer();
            VoucherOffer vo1 = new VoucherOffer();

            vo.offerID = 5;
            vo1.offerID = 5;
            vo.status = 0;
            vo1.status = 0;
            vo.useCount = 0;
            vo1.useCount = 0;

            Assert.IsTrue( vo == vo1 );
        }

        [Test]
        public void VoucherOfferEqualsPos()
        {
            VoucherOffer vo = new VoucherOffer();
            VoucherOffer vo1 = new VoucherOffer();

            vo.offerID = 5;
            vo1.offerID = 5;
            vo.status = 0;
            vo1.status = 0;
            vo.useCount = 0;
            vo1.useCount = 0;

            Assert.IsTrue( vo.Equals( vo1 ) );
        }

        [Test]
        public void VoucherOfferEqualityNegOffer()
        {
            // gotta love copy-n-paste tests... 
            VoucherOffer vo = new VoucherOffer();
            VoucherOffer vo1 = new VoucherOffer();

            vo.offerID = 5;
            vo1.offerID = 6;
            vo.status = 0;
            vo1.status = 0;
            vo.useCount = 0;
            vo1.useCount = 0;

            Assert.IsTrue( vo != vo1 );
        }

        [Test]
        public void VoucherOfferEqualityNegUses()
        {
            // gotta love copy-n-paste tests... 
            VoucherOffer vo = new VoucherOffer();
            VoucherOffer vo1 = new VoucherOffer();

            vo.offerID = 5;
            vo1.offerID = 5;
            vo.status = 0;
            vo1.status = 0;
            vo.useCount = 0;
            vo1.useCount = 1;

            Assert.IsTrue( vo != vo1 );
        }

        [Test]
        public void VoucherOfferEqualityNegStatus()
        {
            // gotta love copy-n-paste tests... 
            VoucherOffer vo = new VoucherOffer();
            VoucherOffer vo1 = new VoucherOffer();

            vo.offerID = 5;
            vo1.offerID = 6;
            vo.status = 0;
            vo1.status = 1;
            vo.useCount = 0;
            vo1.useCount = 0;

            Assert.IsTrue( vo != vo1 );
        }

        //test VU equals operators
        //seems pretty silly to do this too... 
        [Test]
        public void VoucherUseEqualityPos()
        {
            VoucherUse vu = new VoucherUse();
            VoucherUse vu1 = new VoucherUse();

            vu.puid = 26344717463;
            vu1.puid = 26344717463;
            vu.whenUsed = System.Convert.ToDateTime("04/20/2004 16:20:20");
            vu1.whenUsed = System.Convert.ToDateTime("04/20/2004 16:20:20");

            Assert.IsTrue( vu == vu1 );
            Assert.IsTrue( !( vu != vu1 ) );
        }

        [Test]
        public void VoucherUseEqualsPos()
        {
            VoucherUse vu = new VoucherUse();
            VoucherUse vu1 = new VoucherUse();

            vu.puid = 26344717463;
            vu1.puid = 26344717463;
            vu.whenUsed = System.Convert.ToDateTime("04/20/2004 16:20:20");
            vu1.whenUsed = System.Convert.ToDateTime("04/20/2004 16:20:20");

            Assert.IsTrue( vu.Equals( vu1 ) );
        }

        [Test]
        public void VoucherUseEqualityNegPUID()
        {
            VoucherUse vu = new VoucherUse();
            VoucherUse vu1 = new VoucherUse();

            vu.puid = 26344717463;
            vu1.puid = 26344817463;
            vu.whenUsed = System.Convert.ToDateTime("04/20/2004 16:20:20");
            vu1.whenUsed = System.Convert.ToDateTime("04/20/2004 16:20:20");
            Assert.IsTrue( vu != vu1 );
            Assert.IsTrue( !( vu == vu1 ) );
        }

        [Test]
        public void VoucherUseEqualityNegUsed()
        {
            VoucherUse vu = new VoucherUse();
            VoucherUse vu1 = new VoucherUse();

            vu.puid = 26344717463;
            vu1.puid = 26344717463;
            vu.whenUsed = System.Convert.ToDateTime("04/20/2004 16:20:20");
            vu1.whenUsed = System.Convert.ToDateTime("04/20/2004 16:20:21");
            Assert.IsTrue( vu != vu1 );
            Assert.IsTrue( !( vu == vu1 ) );
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\User2Test.cs ===
// other folk's stuff
using Microsoft.Webstore.WstClient; 

// .Net stuff
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.Utilities;

// our stuff
using xonline.common.diagnostics;
using xonline.tools.framework;


namespace xonline.common.test.tools
{
    /// <summary>
	/// Summary description for UserTest.
	/// </summary>
	[TestFixture]
	public class UserTest : TestNode
	{

        public static readonly ulong NonExistentPUID = 2533274790395900;
        public static readonly ulong testPUID = 2533274790395905;
        public static readonly ulong testPUID2 = 2533274790395906;
        //gamertags are not allowed to start with numbers,
        // except for XonWatch with 0 and 1.
        public const string NonExistentGT = "8Q7G";
        public const string MachineAcctGT = "8Q7G";


		public UserTest()
		{

		}

//        [SetUp]
//        public void UserTestSetUp()
//        {
//            Console.WriteLine("======================================================================");
//        }

        //        [TearDown]

        [Test]
        public void ConstructorTest()
        {
            Console.WriteLine( "ConstructorTest\n" );
            User2 u = User2.Create( );
        }

//        [Test]
//        public void NewUserTest()
//        {
//            //User u = new User( "TestGamerTag" );
//            // u.Save();
//        }


        // attempt retrieval of non-existent PUID
        [Test]
        //[ExpectedException( typeof( UserNotFoundException ) )]
        public void NonExistentUserLoadPUID()
        {
            bool caught = false;

            Console.WriteLine( "NonExistentUserLoadPUID\n" );
            // expect a non-existent user exception
            try
            {
                User2 nonUser = User2.Load( NonExistentPUID );
            }
            catch( UserNotFoundException )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }
            
            if (!caught)
            {
                throw new Exception( "Did not catch correct exception." );
            }

        }

        // attempt retrieval of non-existent gamertag
        [Test]
        //[ExpectedException( typeof( UserNotFoundException ) )]
        public void NonExistentUserLoadGT()
        {
            bool caught = false;
            
            Console.WriteLine( "NonExistentUserLoadGT\n" );
            // expect a non-existent user exception
            try
            {
                User2 nonUser = User2.Load( NonExistentGT );
            }
            catch( UserNotFoundException )
            {
                Console.WriteLine( "Correct Exception Caught!" );
            }

            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }
        }

        //review: is this really needed?
        // attempt retrieval of machine gamertag --> different exception?
//        [Test]
//        public void NonExistentUserLoadMachineAcct()
//        {
//            // expect a non-existent user exception
//            User2 nonUser = User2.Load( NonExistentGT );
//        }

        [Test]
        public void LoadExistingUserPUID()
        {
            Console.WriteLine( "LoadExistingUserPUID\n" );            
            // find user via Webstore
            ulong puid = GetSingleUserPUIDFromUODB();
            
            Console.WriteLine( "Retrieving : " + puid.ToString() );
            
            // load user via object
            User2 u = User2.Load( puid );

            Console.WriteLine( "Retrieved: " + u.Puid.ToString() );
            Assert.IsTrue( u != null );
            Assert.AreEqual( u.Puid, puid );
        }

        // create a new user via front door -> confirm user can be retrieved in this
        [Test]
        public void LoadExistingUserGT()
        {
            Console.WriteLine("LoadExistingUser" );

            // find user via Webstore
            string gt = GetSingleUserGTFromUODB();

            // load user via object
            User2 u = User2.Load( gt );
            Console.WriteLine("gt {0}  puid {1} owner {2}", u.GamerTag, u.Puid, u.OwnerPuid );
            Assert.IsTrue( u != null );
            Assert.AreEqual( u.GamerTag, gt );

        }
        

        // grab an existing user, and run our test.
	    // for now, I'll **MANUALLY** change the account to need mgmt
 	    // but in Xenon this will be an STF test that will create a new user specifically for this test.
        [Test]
        public void LoadExistingUserAcctNeedsMgmt()
        {
            Console.WriteLine("LoadExistingUserAcctNeedsMgmt" );

            // find user via Webstore
            string gt = GetSingleUserGTFromUODB();

            // load user via object
            User2 u = User2.Load( gt );
            Console.WriteLine("gt {0}  puid {1} owner {2}", u.GamerTag, u.Puid, u.OwnerPuid );
            Assert.IsTrue( u != null );
            Assert.AreEqual( u.GamerTag, gt );

        }


        #region Other functions

        public static string GetSingleUserGTFromUODB()
        {
            string gt;

            using ( WstConnection userConn = new WstConnection(xonline.common.config.ConfigUtil.UodbWebstoreApp) )
            {
                WstCommand userCmd;
                userConn.Open();
                userCmd = userConn.CreateCommand();
                userCmd.CommandType = CommandType.Text;

                //go straight for the PUID...
                userCmd.CommandText = "Select top 1 vc_gamertag from uodb.dbo.t_users";
                gt = (string) userCmd.ExecuteScalar();
            }

            Console.WriteLine("GetSingleGT: " + gt);

            return gt;
        }

        public static ulong GetSingleUserPUIDFromUODB()
        {
            ulong puid;

            using ( WstConnection userConn = new WstConnection(xonline.common.config.ConfigUtil.UodbWebstoreApp) )
            {
                WstCommand userCmd;
                userConn.Open();
                userCmd = userConn.CreateCommand();
                userCmd.CommandType = CommandType.Text;

                //go straight for the PUID...
                userCmd.CommandText = "Select top 1 bi_user_puid from uodb.dbo.t_users";
                puid = System.Convert.ToUInt64( userCmd.ExecuteScalar() );
            }

            Console.WriteLine("GetSinglePUID: {0}",puid);

            return puid;
        }


        #endregion



	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\tools\VoucherTest.cs ===
// other folk's stuff
using Microsoft.Webstore.WstClient; 
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

// From Test
using ServerTestFramework;
using ServerTestFramework.Utilities;

// our stuff
using xonline.common.diagnostics;
using xonline.tools.framework;

namespace xonline.common.test.tools
{
	/// <summary>
	/// Unit test code for the Voucher class
	/// </summary>
    public class VoucherTest : TestNode
    {

        #region Test Constants
        private static SHA1CryptoServiceProvider _sha = new SHA1CryptoServiceProvider();
        private static UnicodeEncoding _enc = new UnicodeEncoding();


        //NOTE: DO NOT ADD offers to this voucher!!
        public static readonly byte[] all1sHashBytes = new byte[] { 0x46,0x0D,0x1A,0xBD,0x93,0x38,0x33,0xBA,0xD5,0x4F,0x47,0xBC,0x83,0xB0,0x42,0x26,0xE9,0xC9,0x62,0x23 };	
        public const string all1SubCodeString = "1111111111111111111111111";
        public const string all1SubCodeStringDashes = "11111-11111-11111-11111-11111";

        public static readonly byte[] fakeHashBytes = new byte[] { 0xD4,0x54,0xA4,0xB7,0xF1,0x30,0x9A,0x01,0x4C,0x99,0x42,0xD3,0x33,0x50,0x5B,0x60,0x30,0x53,0x89,0x48 };	
        public static readonly byte[] fakeHashBytes2 = new byte[] { 0xD4,0x54,0xA4,0xB7,0xF1,0x30,0x9A,0x01,0x4C,0x99,0x42,0xD3,0x33,0x50,0x5B,0x60,0x30,0x53,0x89,0x47 };	
        public const string fakeSubCodeString = "2222222222222222222222222";
        public const string fakeSubCodeString2 = "MM7VQ-8MV7R-RTFVQ-47JMT-9PGW3";

        // public static readonly string fakeSubCodeString2 = "2222222222222222222222223";
        public const string fakeHashString = "D454A4B7F1309A014C9942D333505B6030538948";

        //equals the hash of fakeSubCodeString2
        public const string fakeHashString2 = "00AD58DED157A87B94E375A58A5067DE4DEADFD6";

        //private byte[] testHash = new byte[] { 0x00,0x00,0x04,0x7F,0x0F,0x4E,0x61,0x08,0x40,0xCF,0x37,0x6C,0xF7,0xAD,0x59,0xD8,0x36,0x49,0x98,0x89 };	
        // 0x00   00   04   7F   0F   4E   61   08   40   CF   37   6C   F7   AD   59   D8   36   49   98   89
        
        public static readonly VoucherOffer[] defaultVoucherOffer = new VoucherOffer[5];    

        // equal to our base PUID of 0x0009000000000000 + 1
        // very likely to be a real user in any Webstore deployment, usable for our purposes.. 
        //review: is this true?
        public const ulong testPUID  = 2533274790395905;
        public const ulong testPUID2 = 2533274790395906;

        // Test offer ids
        public const ulong testOffer1 = 0xFFFE000080000001;
        public const ulong testOffer2 = 0xFFFE000080000002;
        public const ulong testOffer3 = 0xFFFE000080000003;

        // Test sub code keys
        public const string testKey1 = "AAAAA-BBBBB-CCCCC-DDDDD-EEEEE";
        public const string testKey2 = "FFFFF-GGGGG-HHHHH-IIIII-JJJJJ";
        public const string testKey3 = "KKKKK-LLLLL-MMMMM-NNNNN-OOOOO";

        #endregion

        #region Constructors and NUnit Setup/Teardown

        public VoucherTest() 
        { 
            Console.WriteLine( "In the Constructor" );       

            // all 1's voucher has this offerID: 18446181125903613960
            
            defaultVoucherOffer[0] = new VoucherOffer();
            defaultVoucherOffer[0].offerID = (ulong) OfferValues.StarterKit;   
            defaultVoucherOffer[0].useCount = 1;
            defaultVoucherOffer[0].status = 0;
            
            //task: get other real offers for this... or delete them
            defaultVoucherOffer[1] = new VoucherOffer();
            defaultVoucherOffer[1].offerID = (ulong) OfferValues.AnnualRenewal; // used to be 4290672328706; 
            defaultVoucherOffer[1].useCount = 1;
            defaultVoucherOffer[1].status = 0;

            defaultVoucherOffer[2] = new VoucherOffer();
            defaultVoucherOffer[2].offerID = (ulong) OfferValues.MonthlyRenewal;  
            defaultVoucherOffer[2].useCount = 1;
            defaultVoucherOffer[2].status = 0;

            defaultVoucherOffer[3] = new VoucherOffer();
            defaultVoucherOffer[3].offerID = (ulong) OfferValues.ConsoleTrial;  
            defaultVoucherOffer[3].useCount = 1;
            defaultVoucherOffer[3].status = 0;

            defaultVoucherOffer[4] = new VoucherOffer();
            defaultVoucherOffer[4].offerID = (ulong) OfferValues.PrePaid3Month;  
            defaultVoucherOffer[4].useCount = 1;
            defaultVoucherOffer[4].status = 0;

        }


        // executes once per test run
        [TestGroupSetup]
        public void VoucherFixtureSetup()
        {
            // Console.WriteLine( "In the Voucher TestFixtureSetUp." );
            //task: check if UODB has the offers necessary

            //check if test Vouchers are already there?  nah, just delete them
            DeleteTestVoucherAndUses( fakeHashBytes ); 
            DeleteTestVoucherAndUses( fakeHashBytes2 );
            DeleteTestVoucherAndUses( VoucherUtil2.SubcodeStringToHashByte( fakeSubCodeString2 ) );  

        }


//        // run per-test
//        public void VoucherTestSetup()
//        {
//            Console.WriteLine("======================================================================");
//        }
//
//        // run per-test, after test
//        public void VoucherTestTearDown()
//        {
//            // only need to run this between, not before *and* after... 
//            DeleteTestVoucherAndUses( fakeHashBytes ); 
//            DeleteTestVoucherAndUses( fakeHashBytes2 ); 
//        }


        // executes once at the end of all the tests
        [TestGroupTearDown]
        public void VoucherTestFixtureTearDown()
        {
            Console.WriteLine( "In TestFixtureTearDown." );
            // delete test vouchers to start from a clean slate
            DeleteTestVoucherAndUses( fakeHashBytes ); 
            DeleteTestVoucherAndUses( fakeHashBytes2 ); 
            DeleteTestVoucherAndUses( VoucherUtil2.SubcodeStringToHashByte( fakeSubCodeString2 ) );
        }


        #endregion

        #region Vouchers in Memory

        // ----------------------------------------------------------
        // a: Tests of Vouchers in memory
        // ----------------------------------------------------------

        // can I create a new voucher object is via both overloads?
        [Test]
        public void aConstructorHashBytes()
        {
            Console.WriteLine("Starting aConstructorHashBytes.");
            Voucher vBytes = Voucher.Create( VoucherUtil2Test.fakeHashBytes );
            Assert.IsTrue( vBytes != null );
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( vBytes.voucherhash ), VoucherUtil2.HashByteToHexStr( fakeHashBytes ) );
        }

        [Test]
        public void aConstructorString()
        {
            Console.WriteLine("Starting aConstructorString.");
            Voucher vString = Voucher.Create( fakeSubCodeString );
            Assert.IsTrue( vString != null );
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( vString.voucherhash ), VoucherUtil2.HashByteToHexStr( fakeHashBytes ) );
        }

        //vouchers with different hashbytes should not be equal
        [Test]
        public void aEqualityOperatorsHashNeg()
        {
            Console.WriteLine("Starting aEqualityOperatorsHashNeg.");
            Voucher vString = Voucher.Create( fakeSubCodeString );
            Voucher vBytes = Voucher.Create( fakeHashBytes2 );
            Console.WriteLine("OpHashNeg: {0}, {1}", VoucherUtil2.HashByteToHexStr( vString.voucherhash ), VoucherUtil2.HashByteToHexStr( vBytes.voucherhash ) );
            //Test == operator
            Assert.IsTrue(!( vString == vBytes ));
            //Test != operator
            Assert.IsTrue(   vString != vBytes  );
        }

        //vouchers with equal hashbytes should be equal
        [Test]
        public void aEqualityOperatorsHashPos()
        {
            Console.WriteLine("Starting aEqualityOperatorsHashPos.");
            Voucher vString = Voucher.Create( fakeSubCodeString );
            Voucher vBytes = Voucher.Create( fakeHashBytes );
            Console.WriteLine("OpHashPos: {0}, {1}", VoucherUtil2.HashByteToHexStr( vString.voucherhash ), VoucherUtil2.HashByteToHexStr( vBytes.voucherhash ) );
            //Test == operator
            Assert.IsTrue(vString == vBytes);
            //Test != operator
            Assert.IsTrue(!(vString != vBytes));
        }

        //vouchers with equal VoucherOffers arraylist should be equal
        [Test]
        public void aEqualityOperatorsOffersPos()
        {
            Console.WriteLine("Starting aEqualityOperatorsOffersPos.");
            Voucher vString = Voucher.Create( fakeSubCodeString );
            vString.AddOffer( testOffer1, 1, Voucher.VoucherStatusActiveByte );
            Voucher vBytes = Voucher.Create( fakeHashBytes );
            vBytes.AddOffer( testOffer1, 1, Voucher.VoucherStatusActiveByte );
            //Test == operator
            Assert.IsTrue( vString == vBytes );
            //Test != operator
            Assert.IsTrue( !( vString != vBytes ) );
        }

        //vouchers with UNequal VoucherOffers arraylist should NOT be equal
        [Test]
        public void aEqualityOperatorsOffersNeg()
        {
            Console.WriteLine("Starting aEqualityOperatorsOffersNeg.");

            Voucher vString = Voucher.Create( fakeSubCodeString );
            vString.AddOffer( testOffer1, 1, Voucher.VoucherStatusActiveByte);
            Voucher vBytes = Voucher.Create( fakeHashBytes );
            //Test == operator
            Assert.IsTrue(! ( vString == vBytes ) );
            //Test != operator
            Assert.IsTrue( vString != vBytes );
        }

        //vouchers with same number of VO, but different offerIDs should NOT be equal
        [Test]
        public void aEqualityOperatorsDiffOffersNeg()
        {
            Console.WriteLine("Starting aEqualityOperatorsDiffOffersNeg.");

            Voucher vString = Voucher.Create( fakeSubCodeString );
            vString.AddOffer( testOffer1, 1, Voucher.VoucherStatusActiveByte );
            Voucher vBytes = Voucher.Create( fakeHashBytes );
            vBytes.AddOffer( testOffer2, 1, Voucher.VoucherStatusActiveByte );
            //Test == operator
            Assert.IsTrue( vString != vBytes );
            //Test != operator
            Assert.IsTrue( !( vString == vBytes ) );
        }

        //vouchers with equal VoucherUses arraylist should be equal
        [Test]
        public void aEqualityOperatorsUsagePos()
        {
            DateTime rightNow = System.DateTime.UtcNow;

            Console.WriteLine("Starting aEqualityOperatorsUsagePos.");

            //must always add an offer!!
            Voucher vString = Voucher.Create( fakeSubCodeString );
            vString.AddOffer( defaultVoucherOffer[1].offerID, 1, Voucher.VoucherStatusActiveByte);
            vString.Save();
            vString.AddUse( testPUID, rightNow );
            Voucher vBytes = Voucher.Load( fakeHashBytes );

            //Test == operator
            Assert.IsTrue( vString == vBytes );
            //Test != operator
            Assert.IsTrue( !( vString != vBytes ) );
        }

        //vouchers with UNequal VoucherUses arraylist should NOT be equal
        [Test]
        public void aEqualityOperatorsUsageNeg()
        {
            Console.WriteLine("Starting aEqualityOperatorsUsageNeg.");

            Voucher vString = Voucher.Create( fakeSubCodeString );
            //must always add an offer!!
            vString.AddOffer( defaultVoucherOffer[1].offerID, 1, Voucher.VoucherStatusActiveByte);
            vString.Save();
            vString.AddUse( testPUID, System.DateTime.UtcNow );
            Voucher vBytes = Voucher.Create( fakeHashBytes );
            vBytes.AddOffer( defaultVoucherOffer[1].offerID, 1, Voucher.VoucherStatusActiveByte);

            //Test == operator
            Assert.IsTrue( !( vString == vBytes ) );
            //Test != operator
            Assert.IsTrue( vString != vBytes );
        }

        //simple test to confirm that the Equals method is correct
        //since this uses ==, this is just confirm someone didn't change the method... 
        [Test]
        public void aEqualsOpWithVoucher()
        {
            Console.WriteLine("Starting aEqualsOpWithVoucher.");

            Voucher vString = Voucher.Create( fakeSubCodeString );
            Voucher vBytes = Voucher.Create( fakeHashBytes );
            Assert.IsTrue( vString.Equals( vBytes ) );
            vString.AddOffer( defaultVoucherOffer[1].offerID, 1, Voucher.VoucherStatusActiveByte);
            vString.Save();
            vString.AddUse( testPUID, System.DateTime.UtcNow );
            Assert.IsTrue( ! vString.Equals( vBytes ) );
        }

        //can the equals method handle a non-Voucher object?
        [Test]
        public void aEqualsMethodNonVoucher()
        {
            Console.WriteLine("Starting aEqualsMethodNonVoucher.");

            Voucher vString = Voucher.Create( fakeSubCodeString );
            int aNumber = 5;

            //review: two separate test cases?
            Assert.IsTrue( ! vString.Equals( aNumber ) );
            Assert.IsTrue( ! vString.Equals( null ) );
        }

        //task: need a test for "GetHashCode" which we had to implement because of the == overload

        #endregion

        #region Voucher to/from DB
        // ----------------------------------------------------------
        // b: Tests of Vouchers to/from SQL
        // ----------------------------------------------------------
        
        // can I load a test voucher via a hash?
        [Test]
        public void bLoadTestVoucherBytes()
        {
            // since the all 1's hash is typically loaded for testing, it's a safe bet it's there
            // don't delete or change the all 1's hash, since others will use it... 
            Console.WriteLine("Starting bLoadTestVoucherBytes ");
            Voucher v = Voucher.Load( all1sHashBytes );
            Console.WriteLine( ((VoucherOffer) v.VoucherOffers[0]).offerID.ToString() );
            Assert.IsTrue( v != null );
            Assert.AreEqual( 1, v.VoucherOffers.Count );
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( all1sHashBytes ), VoucherUtil2.HashByteToHexStr( v.voucherhash ) );
        }

        // what about via a subcode string?
        [Test]
        public void bLoadTestVoucherString()
        {
            // since the all 1's hash is typically loaded for testing, it's a safe bet it's there
            // don't delete or change the all 1's hash, since others will use it... 
            Console.WriteLine("Starting bLoadTestVoucherString ");
            Voucher v = Voucher.Load( all1SubCodeString );
            Console.WriteLine( ((VoucherOffer) v.VoucherOffers[0]).offerID.ToString() );
            Assert.IsTrue( v != null );
            Assert.AreEqual( 1, v.VoucherOffers.Count );
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( all1sHashBytes ), VoucherUtil2.HashByteToHexStr( v.voucherhash ) );
        }

        // what about via a subcode string with dashes?
        [Test]
        public void bLoadTestVoucherStringDashes()
        {
            // since the all 1's hash is typically loaded for testing, it's a safe bet it's there
            // don't delete or change the all 1's hash, since others will use it... 
            Console.WriteLine("Starting bLoadTestVoucherStringDashes ");
            Voucher v = Voucher.Load( all1SubCodeStringDashes );
            Console.WriteLine( ((VoucherOffer) v.VoucherOffers[0]).offerID.ToString() );
            Assert.IsTrue( v != null );
            Assert.AreEqual( 1, v.VoucherOffers.Count );
            Assert.AreEqual( VoucherUtil2.HashByteToHexStr( all1sHashBytes ), VoucherUtil2.HashByteToHexStr( v.voucherhash ) );
        }

        //The VoucherUtil convert function should be able to fend for itself
        // if the string doesn't look like a voucher, but these are some basic tests

        //Test the exceptional cases - short string
        [Test]
//        [ExpectedException( typeof( ArgumentException ) )]    
        public void bLoadTestVoucherShortString()
        {
            // since the all 1's hash is typically loaded for testing, it's a safe bet it's there
            // don't delete or change the all 1's hash, since others will use it... 
            Console.WriteLine("Starting bLoadTestVoucherShortString ");
            string shortString = all1SubCodeString;
            bool caught = false;

            try 
            {
                Voucher v = Voucher.Load( shortString.Substring(1,5) );
            }
            catch( ArgumentException )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }

            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }
        }
        
        //Test the exceptional cases - too long string
        [Test]
        //[ExpectedException( typeof( ArgumentException ) )]    
        public void bLoadTestVoucherLongString()
        {
            bool caught = false;

            // since the all 1's hash is typically loaded for testing, it's a safe bet it's there
            // don't delete or change the all 1's hash, since others will use it... 
            Console.WriteLine("Starting bLoadTestVoucherLongString ");
            string longString = all1SubCodeString + all1SubCodeString;
            Console.WriteLine( "string len is " + longString.Length.ToString() + "  " + longString );
            try
            {
                Voucher v = Voucher.Load( longString );
            }
            catch( ArgumentException )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }

            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }
        }

        //Test the exceptional cases - null string
        [Test]
        //[ExpectedException( typeof( ArgumentException ) )]    
        public void bLoadTestVoucherNullString()
        {
            // since the all 1's hash is typically loaded for testing, it's a safe bet it's there
            // don't delete or change the all 1's hash, since others will use it... 
            Console.WriteLine("Starting bLoadTestVoucherNullString ");
            string nullString = null; 
            bool caught = false;

            try
            {
                Voucher v = Voucher.Load( nullString );
            }
            catch( ArgumentException )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }

            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }
        }

        [Test]
//        [ExpectedException( typeof( ArgumentException ) )]    
        public void bLoadShortBytes()
        {
            Console.WriteLine("Starting bLoadShortBytes ");
            byte[] bp = new byte[ Voucher.VoucherHashSize - 1];
            bool caught = false;

            try
            {
                Voucher v = Voucher.Load( bp );
            }
            catch( ArgumentException )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }

            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }
        }

        [Test]
        //[ExpectedException( typeof( ArgumentException ) )]    
        public void bLoadNullBytes()
        {
            Console.WriteLine("Starting bLoadNullBytes ");
            byte[] bp = null;
            bool caught = false;

            try 
            {
                Voucher v = Voucher.Load( bp );
            }
            catch( ArgumentException )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }
            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }
        }

        //Do I get an exception for trying to load a Voucher which doesn't exist?
        [Test]
        //[ExpectedException( typeof( VoucherNotFoundException ) )]    
        public void bLoadNonExistentVoucher()
        {
            bool caught = false;

            Console.WriteLine("Starting bLoadNonExistentVoucher ");
            try
            {
                Voucher v2 = Voucher.Load( fakeHashBytes2 );
            }
            catch( VoucherNotFoundException )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }
            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }
        }


        // can I insert a new Voucher?
        // and confirm it exists by loading it?
        [Test]
        public void bSingleOfferInsertAndLoadTest()
        {
            Console.WriteLine("Starting SingleOfferInsertNLoadTest ");
            Voucher v = Voucher.Create( fakeHashBytes2 );
            v.VoucherOffers.Add( defaultVoucherOffer[ 0 ] );
            v.Save();

            //bin_voucher_hash	bi_offer_id	i_use_count	i_voucher_status_id	si_hash_bucket	dt_Change_datetime
            //0x0000047F0F4E610840CF376CF7AD59D836499889	-562947805937663	1	0	148	8/14/02 7:53 AM

            Voucher v2 = Voucher.Load( fakeHashBytes2 );
            Console.WriteLine("SingleOfferInsertNLoadTest: New Voucher {0}, Load Voucher {1}.", VoucherUtil2.HashByteToHexStr( v.voucherhash ), VoucherUtil2.HashByteToHexStr( v2.voucherhash ) ); 
            Assert.IsTrue( v == v2 );
        }

        // check loading an existing Voucher with multiple offers
        [Test]
        public void cMultiOfferInsertAndLoadTest()
        {

            Console.WriteLine("\n\nStarting cMultiOfferInsertAndLoadTest ");
            Voucher v = Voucher.Create( fakeHashBytes2 );
            // need to make sure foreign key constraint doesn't block - use existing offers
            v.AddOffer( defaultVoucherOffer[0].offerID, 1, Voucher.VoucherStatusActiveByte);
            Console.WriteLine("Added Offer, VoucherOffer.Count is " + v.VoucherOffers.Count.ToString() );
            v.AddOffer( defaultVoucherOffer[1].offerID, 1, Voucher.VoucherStatusActiveByte);
            Console.WriteLine("Added Offer, VoucherOffer.Count is " + v.VoucherOffers.Count.ToString() );
            v.AddOffer( defaultVoucherOffer[2].offerID, 1, Voucher.VoucherStatusActiveByte);
            Console.WriteLine("Added Offer, VoucherOffer.Count is " + v.VoucherOffers.Count.ToString() );

            v.Save();

            Console.WriteLine("After Save \n" + v.ToString() );

            Voucher v2 = Voucher.Load( fakeHashBytes2 );
            
            Console.WriteLine("After Load \n " + v2.ToString() );
            
            Assert.IsTrue( v == v2 );
        }

        // check loading an existing Voucher with multiple uses
        [Test]
        public void cMultiUseInsertAndLoadTest()
        {

            Console.WriteLine("Starting cMultiUseInsertAndLoadTest\n\n");
            Voucher v = Voucher.Create( fakeHashBytes );
            // no foreign key relationship, so this will work...
            v.AddOffer( defaultVoucherOffer[0].offerID, 2, Voucher.VoucherStatusActiveByte); 
            v.Save();
            v.AddUse( testPUID, System.DateTime.UtcNow );
            v.AddUse( testPUID2, System.DateTime.UtcNow );

            Voucher v2 = Voucher.Load( fakeHashBytes );
            Console.WriteLine( v.ToString() + "\n" + v2.ToString() );

            Assert.IsTrue( v == v2 );
        }


        //test changing the number of Voucher uses then save
        [Test]
        //[ExpectedException( typeof( Exception ) )]
        public void cMultiUseChangeExceptionTest()
        {
            bool caught = false;

            Console.WriteLine("\n\nStarting cMultiUseChangeAndSaveTest ");
            Voucher v = Voucher.Create( fakeHashBytes );
            v.AddOffer( defaultVoucherOffer[1].offerID, 2, Voucher.VoucherStatusActiveByte);
            v.Save();
            v.AddUse( testPUID, System.DateTime.UtcNow );
            v.AddUse( testPUID2, System.DateTime.UtcNow );
            v.Save();

            Voucher v2 = Voucher.Load( fakeHashBytes );
            // remove the second offer
            v2.VoucherUsage.RemoveAt( 1 );

            // should get an exception here
            try
            {
                v2.Save();
            }
            catch( Exception )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }

            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }
        }

        //test changing the number of Voucher offers then save
        [Test]
        //[ExpectedException( typeof( Exception ) )]
        public void cMultiOfferChangeAndSaveTest()
        {
            bool caught = false;

            Console.WriteLine("\n\nStarting cMultiOfferChangeAndSaveTest ");
            Voucher v = Voucher.Create( fakeHashBytes );
            // no foreign key relationship, so this will work... 
            v.AddOffer( defaultVoucherOffer[0].offerID, 1, Voucher.VoucherStatusActiveByte);
            v.AddOffer( defaultVoucherOffer[1].offerID, 1, Voucher.VoucherStatusActiveByte);            v.Save();
            v.Save();
            Voucher v2 = Voucher.Load( fakeHashBytes );

            // remove the second offer
            v2.VoucherOffers.RemoveAt( 1 );

            // should get an exception here
            try
            {
                v2.Save();
            }
            catch( Exception )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }

            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }
        }

        // delete the vouchers we created
        // confirm they can no longer be loaded
        // which also tests the "return null if it doesn't exist" feature of .Load... 
        [Test]
        //[ExpectedException( typeof( VoucherNotFoundException ) )]
        public void dDeleteAndLoadFail()
        {
            bool caught = false;

            Console.WriteLine("Starting dDeleteAndLoadFail ");
            Voucher v = Voucher.Create( fakeHashBytes2 );
            VoucherOffer vo = new VoucherOffer();
            vo.offerID = defaultVoucherOffer[2].offerID;
            vo.status = Voucher.VoucherStatusActiveByte;
            vo.useCount = 1;
            v.VoucherOffers.Add( vo );

            v.Save();
            Console.WriteLine("After Save \n" + v.ToString() );

            Voucher v2 = Voucher.Load( fakeHashBytes2 );
            Console.WriteLine("Confirming save \n" + v2.ToString() );

            // have to make sure it was actually there so we can be sure we deleted it... 
            // and not just failed create
            Assert.IsTrue( v == v2 );

            v.Delete();

            // Exception should occur here, since the voucher shouldn't exist anymore... 
            try
            {
                Voucher v3 = Voucher.Load( fakeHashBytes2 );
            }
            catch( VoucherNotFoundException )
            {
                caught = true;
                Console.WriteLine( "Correct Exception Caught!" );
            }

            if (!caught)
            {
                throw new Exception( "Did Not Catch an exception!" );
            }
        }


        // create a voucher, mark it disabled
        // confirm on Load that all offers are disabled
        [Test]
        public void dDisableNewVoucher()
        {
            Console.WriteLine("Starting dDisableNewVoucher ");

            Voucher v = Voucher.Create( fakeHashBytes2 );
            // Vouchers must have an offer in order to be saved... 
            v.VoucherOffers.Add( defaultVoucherOffer[ 0 ] );
            v.Save();
            
            Voucher v2 = Voucher.Load( fakeHashBytes2 );
            
            v2.Disable();
            v2.Save();

            Voucher v3 = Voucher.Load( fakeHashBytes2 );

            //I need this assert AND the loop below 
            Assert.IsTrue( v == v3 );

            // confirm that the difference is all offers are disabled... 
            foreach ( VoucherOffer vo in v3.VoucherOffers )
            {
                Assert.AreEqual( vo.status, Voucher.VoucherStatusDisabledByte );
            }
        }

        // create a voucher, add a use, mark it disabled
        // then try to save it again after that... ;-)
        [Test]
        public void dDisableAndReSaveVoucher()
        {
            Console.WriteLine("Starting dDisableAndReSaveVoucher ");

            Voucher v = Voucher.Create( fakeHashBytes2 );
            // Vouchers must have an offer in order to be saved... 
            v.VoucherOffers.Add( defaultVoucherOffer[ 0 ] );
            v.Save();
            v.AddUse( testPUID, System.DateTime.UtcNow );
            
            Voucher v2 = Voucher.Load( fakeHashBytes2 );

            v2.Disable();
            v2.Save();

            Voucher v3 = Voucher.Load( fakeHashBytes2 );

            //I need this assert AND the loop below 
            Assert.IsTrue( v == v3 );

            // confirm that the difference is all offers are disabled... 
            foreach ( VoucherOffer vo in v3.VoucherOffers )
            {
                Assert.AreEqual( vo.status, Voucher.VoucherStatusDisabledByte );
            }
        }


        //Test for bug #37910 - voucher with an offer with an invalid offerid
        // load a used voucher, mark it disabled
        // then try to save it again after that... ;-)
        // technically, the change was mostly to the test data... 
        [Test]
        public void dLoadAndDisableUsedVoucher()
        {
            Console.WriteLine("Starting dLoadAndDisableUsedVoucher ");

            Voucher v;

            // Vouchers must have an offer in order to be saved... 
            v = Voucher.Create( fakeSubCodeString2 );
            v.VoucherOffers.Add( defaultVoucherOffer[ 0 ] );
            v.Save();

            v.AddUse( testPUID, System.DateTime.UtcNow );
            
            Voucher v2 = Voucher.Load( fakeSubCodeString2 );

            v2.Disable();
            v2.Save();

            Voucher v3 = Voucher.Load( fakeSubCodeString2 );

            //I need this assert AND the loop below 
            Assert.IsTrue( v == v3 );

            // confirm that the difference is all offers are disabled... 
            foreach ( VoucherOffer vo in v3.VoucherOffers )
            {
                Assert.AreEqual( vo.status, Voucher.VoucherStatusDisabledByte );
            }
        }

        #endregion

        #region Other Functions

        // need to use this in other test code... 
        public static void DeleteTestVoucherAndUses( byte[] hashDelete )
        {

            Console.WriteLine( "In DeleteTestVouchers." );
            WstConnection voucherConn = new WstConnection( xonline.common.config.ConfigUtil.UodbWebstoreApp );
            WstCommand voucherCmd;

            // no try here so exceptions get handled higher up
            voucherConn.Open();
            voucherCmd = voucherConn.CreateCommand();
            voucherCmd.CommandType = CommandType.StoredProcedure;
            
            voucherCmd.CommandText = "p_svc_delete_voucher";

            voucherCmd.Parameters.Add( "@bin_voucher_hash", SqlDbType.Binary, 20).Value = hashDelete;
            voucherCmd.Parameters["@bin_voucher_hash"].Direction = ParameterDirection.Input;  

            voucherCmd.Parameters.Add( "@bi_offer_id", SqlDbType.BigInt).Value = -1; // Voucher.VOUCHER_ALL_OFFERS_HEX
            voucherCmd.Parameters["@bi_offer_id"].Direction = ParameterDirection.Input;

            //task: shouldn't this only get deleted in one partition???
            //for (int i=0; i < voucherConn.PhysicalPartitions; i++ )
            for (int i=0; i < voucherConn.SqlPartitions.Count; i++ )
            {
                // Console.WriteLine("Deleting vo from Partition: {0}", i );
                voucherCmd.Partition = i;
                voucherCmd.ExecuteNonQuery();
            }

            //review: then delete all the t_vouchers_used rows... ???
            voucherCmd.Parameters.Clear();
            voucherCmd.CommandType = CommandType.Text;
            voucherCmd.CommandText = "delete from t_vouchers_used where bin_voucher_hash = @bin_voucher_hash";
   
            voucherCmd.Parameters.Add( "@bin_voucher_hash", SqlDbType.Binary, 20).Value = hashDelete;
            voucherCmd.Parameters["@bin_voucher_hash"].Direction = ParameterDirection.Input;  

            for (int i=0; i < voucherConn.SqlPartitions.Count; i++ )
            {
                // Console.WriteLine("Deleting vu from Partition: {0}", i );
                voucherCmd.Partition = i;
                voucherCmd.ExecuteNonQuery();
            }

        }
        #endregion


	} // test class
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil\XlastSchemaUtilTest.cs ===
// other folk's stuff
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;


// From Test
using ServerTestFramework;
using ServerTestFramework.Utilities;

// our stuff
using xonline.common.diagnostics;
using xonline.tools.framework; 

namespace xonline.common.xlastutil
{

	/// <summary>
	/// Unit test code for the Voucher class
	/// </summary>
    [TestGroup, Owner("mifish"), TestFrequency("Daily"), EnvRequirement("Deprecated")]
    public class XlastSchemaUtilTest : TestNode
    {

        #region Test Constants
            // Test Xlast strings are at the bottom of the file
            public const uint GoodTitleID = 0x80000312;
            public const uint BadTitleID  = 0x80000313;
            public string GoodXlast;
            public string BadXlast;
            public const string TEST_XDK_VERSION = "2.0.1342.0";  //last March XDK build's Xlast version
            public const string GoodXlastPath = "XlastGoodXml.xlast";
            public const string BadXlastPath = "XlastBadXml.xlast";
//            public const string GoodXlastPath = ".\\suites\\XlastGoodXml.xlast";
//            public const string BadXlastPath = ".\\suites\\XlastBadXml.xlast";
        #endregion

        #region Constructors and Test Setup/Teardown

        public XlastSchemaUtilTest() 
        { 
            Console.WriteLine( "In the Constructor" );

            //read in xml, assign it to string
            Console.WriteLine("about to read file");
            StreamReader xlastReader = new StreamReader( GoodXlastPath );
            this.GoodXlast = xlastReader.ReadToEnd();
            xlastReader.Close();
            
            xlastReader = new StreamReader( BadXlastPath );
            this.BadXlast = xlastReader.ReadToEnd();
            Console.WriteLine("Bad string length is " + this.GoodXlast.Length );
            xlastReader.Close();
        }


        // executes once per test run
        [TestGroupSetup]
        public void XlastUtilTestFixtureSetup()
        {
            Console.WriteLine( "In TestFixtureSetUp." );

        }


        // executes once at the end of all the tests
        [TestGroupTearDown]
        public void XlastUtilTestFixtureTearDown()
        {
            Console.WriteLine( "In TestFixtureTearDown." );

        }


        #endregion

        #region XlastSchemas in Memory

        // ----------------------------------------------------------
        // a: Tests of Schemas in memory
        // ----------------------------------------------------------
//        [Test]
        public void GoodXmlSerializationTest()
        {
            Console.WriteLine("Starting GoodXmlSerializationTest.");

        }

//        [Test]
        public void ExtraneousXmlSerializationTest()
        {
            Console.WriteLine("Starting ExtraneousXmlSerializationTest.");

        }

        //Test GetXLASTLeaderboardConfiguration
        //Test ValidateXLAST


        #endregion

        #region Xlast to/from DB
        // ----------------------------------------------------------
        // b: Tests of Xlasts to/from NPDB
        // ----------------------------------------------------------
        
        [Test]
        public void RoundTripGoodXmlTest()
        {

            Console.WriteLine("Starting RoundTripGoodXmlTest.");

            XlastSchemaUtil.PutXlastSchema( TEST_XDK_VERSION, GoodXlast );
            string retrieved = XlastSchemaUtil.GetXlastSchema( TEST_XDK_VERSION );

            Assert.IsTrue( retrieved == GoodXlast );


        }

        //test delete



//        [Test]
        public void SaveBadXmlTest()
        {
            Assert.IsTrue( false );
        }

//        [Test]
        public void SaveGoodXmlTest()
        {
            Assert.IsTrue( false );
        }

//        [Test]
        public void LoadBadXmlTest()
        {
            Assert.IsTrue( false );
        }

        #endregion

	} // test class
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil.mobile\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil\XlastComparerTest.cs ===
// other folk's stuff
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;


// From Test
using ServerTestFramework;
using ServerTestFramework.Utilities;

// our stuff
using xonline.common.diagnostics;
using xonline.common.leaderboard;
//using xonline.common.livetitleconfig;
using xonline.tools.framework;

namespace xonline.common.xlastutil
{
    /// <summary>
    /// Unit test code for the XlastComparer class
    /// </summary>
    [TestGroup, Owner("mifish"), TestFrequency("Daily"), EnvRequirement("Deprecated")]
    public class XlastComparerTest : TestNode
    {

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // IsVersionGreater  tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////

        [Test]
        public void IsVersionGreater_Pos()
        {
            StringBuilder sb = new StringBuilder();

            Assert.IsTrue(XlastComparer.IsVersionGreater("1.0.0.0", "1.0.0.1", sb));
            Assert.IsTrue(XlastComparer.IsVersionGreater("1.0.0.0", "1.0.1.0", sb));
            Assert.IsTrue(XlastComparer.IsVersionGreater("1.0.0.0", "1.1.0.0", sb));
            Assert.IsTrue(XlastComparer.IsVersionGreater("1.0.0.0", "2.0.0.0", sb));
        }

        [Test]
        public void IsVersionGreater_Neg()
        {
            StringBuilder sb = new StringBuilder();
            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.0.0.1", "1.0.0.0", sb));
            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.0.1.0", "1.0.0.0", sb));
            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.1.0.0", "1.0.0.0", sb));
            Assert.IsTrue(!XlastComparer.IsVersionGreater("2.0.0.0", "1.0.0.0", sb));
        }

        [Test]
        public void IsVersionGreater_Neg_BadVer()
        {
            StringBuilder sb = new StringBuilder();
            Assert.IsTrue(!XlastComparer.IsVersionGreater("bad", "1.0.0.1", sb));
            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.0.0.0", "bad", sb));
        }

        [Test]
        public void IsVersionGreater_Neg_BadVerParts()
        {
            StringBuilder sb = new StringBuilder();
            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.0.0.x", "1.0.0.1", sb));
            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.0.x.0", "1.0.1.0", sb));
            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.x.0.0", "1.1.0.0", sb));
            Assert.IsTrue(!XlastComparer.IsVersionGreater("x.0.0.0", "2.0.0.0", sb));

            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.0.0.0", "1.0.0.x", sb));
            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.0.0.0", "1.0.x.0", sb));
            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.0.0.0", "1.x.0.0", sb));
            Assert.IsTrue(!XlastComparer.IsVersionGreater("1.0.0.0", "x.0.0.0", sb));
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // AreAchievementsModified tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////

        [Test]
        public void AreAchievementsModified_Pos_NoNew()
        {
            StringBuilder sb = new StringBuilder();

            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[2];

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, null, sb));
        }

        [Test]
        public void AreAchievementsModified_Pos_FewerNew()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[2];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Pos_ModifiedType()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;
            oldAchievements.Achievement[0].achievementType = XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievementAchievementType.Checkpoint;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 1;
            newAchievements.Achievement[0].achievementType = XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievementAchievementType.Completion;

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Pos_ModifiedCred()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;
            oldAchievements.Achievement[0].cred = 10;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 1;
            newAchievements.Achievement[0].cred = 11;

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Pos_ModifiedDescription()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;
            oldAchievements.Achievement[0].descriptionStringId = 10;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 1;
            newAchievements.Achievement[0].descriptionStringId = 11;

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Pos_ModifiedImageId()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;
            oldAchievements.Achievement[0].imageId = 10;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 1;
            newAchievements.Achievement[0].imageId = 11;

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Pos_ModifiedShowUnachieved()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;
            oldAchievements.Achievement[0].showUnachieved = true;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 1;
            newAchievements.Achievement[0].showUnachieved = false;

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Pos_ModifiedTitleString()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;
            oldAchievements.Achievement[0].titleStringId = 10;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 1;
            newAchievements.Achievement[0].titleStringId = 11;

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Pos_ModifiedUnachievedString()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;
            oldAchievements.Achievement[0].unachievedStringId  = 10;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 1;
            newAchievements.Achievement[0].unachievedStringId  = 11;

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Pos_ModifiedWebString()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;
            oldAchievements.Achievement[0].webDescriptionStringId = 10;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 1;
            newAchievements.Achievement[0].webDescriptionStringId = 11;

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Pos_ModifiedId()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 2;

            Assert.IsTrue(XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Neg_Same()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[2];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;
            oldAchievements.Achievement[0].cred = 10;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 1;
            newAchievements.Achievement[0].cred = 10;

            Assert.IsTrue(!XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }

        [Test]
        public void AreAchievementsModified_Neg_NewAch()
        {
            StringBuilder sb = new StringBuilder();
            Achievements oldAchievements = new Achievements();
            oldAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[1];
            Achievements newAchievements = new Achievements();
            newAchievements.Achievement  = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement[2];

            oldAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            oldAchievements.Achievement[0].id = 1;
            oldAchievements.Achievement[0].cred = 10;

            newAchievements.Achievement[0] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[0].id = 1;
            newAchievements.Achievement[0].cred = 10;

            newAchievements.Achievement[1] = new XboxLiveSubmissionProjectGameConfigProjectAchievementsAchievement();
            newAchievements.Achievement[1].id = 2;
            newAchievements.Achievement[1].cred = 11;


            Assert.IsTrue(!XlastComparer.AreAchievementsModified(oldAchievements, newAchievements, sb));
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // AreViewsModified tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private StatsView[] CreateViews(int numViews, int numCols)
        {
            StatsView[] views = new StatsView[numViews];
            for (int i = 0; i < views.Length; i++)
            {
                views[i] = new StatsView();
                views[i].id = (ulong)i;
                views[i].Columns = new ViewFieldType[numCols];

                for (int j = 0; j < views[i].Columns.Length; j++)
                {
                    views[i].Columns[j] = new ViewFieldType();
                    views[i].Columns[j].attributeId = (ushort)j;
                    views[i].Columns[j].Item = new PropertyFieldType();
                    ((PropertyFieldType)(views[0].Columns[0].Item)).Aggregation = new PropertyFieldTypeAggregation();
                }
            }

            return views;

        }

        [Test]
        public void AreStatsViewsModified_Neg_NoViews()
        {
            StringBuilder sb = new StringBuilder();
            Assert.IsTrue(!XlastComparer.AreStatsViewsModified(null, null, sb));
        }

        [Test]
        public void AreStatsViewsModified_Neg_NoOldViews()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] newViews = new StatsView[1];

            Assert.IsTrue(!XlastComparer.AreStatsViewsModified(null, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Neg_NoChanges()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = new StatsView[1];
            oldViews[0] = new StatsView();
            oldViews[0].Columns = new ViewFieldType[0];

            StatsView[] newViews = new StatsView[1];
            newViews[0] = new StatsView();
            newViews[0].Columns = new ViewFieldType[0];

            Assert.IsTrue(!XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }


        [Test]
        public void AreStatsViewsModified_Neg_AdditionalViews()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(2, 1);

            Console.WriteLine(sb.ToString());

            Assert.IsTrue(!XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Neg_MaxAttachmentsChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            oldViews[0].maxAttachments = 100;
            newViews[0].maxAttachments = 1000;

            Console.WriteLine(sb.ToString());

            Assert.IsTrue(!XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Pos_RemovedView()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(2, 1);
            StatsView[] newViews = CreateViews(1, 1);

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Pos_ArbitratedChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            oldViews[0].arbitrated = false;
            newViews[0].arbitrated = true;

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Pos_ExpirationChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            oldViews[0].entryExpiration = 0;
            newViews[0].entryExpiration = 1;

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Pos_HiddenChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            oldViews[0].hidden = false;
            newViews[0].hidden = true;

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Pos_TopEntriesChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            oldViews[0].topEntries = 100;
            newViews[0].topEntries = 1000;

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Pos_OnlineOnlyChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            oldViews[0].onlineOnly = false;
            newViews[0].onlineOnly = true;

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Pos_ViewTypeChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            oldViews[0].viewType = "foo";
            newViews[0].viewType = "bar";

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Pos_ColumnsRemoved()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 2);
            StatsView[] newViews = CreateViews(1, 1);

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }


        [Test]
        public void AreStatsViewsModified_Pos_ColumnTypeChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            newViews[0].Columns[0].Item = new ContextFieldType();

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }


        [Test]
        public void AreStatsViewsModified_Pos_ColumnAggTypeChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            ((PropertyFieldType)(oldViews[0].Columns[0].Item)).Aggregation.type = PropertyFieldTypeAggregationType.Min;
            ((PropertyFieldType)(newViews[0].Columns[0].Item)).Aggregation.type = PropertyFieldTypeAggregationType.Sum;

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Pos_ColumnPropertyIdChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            ((PropertyFieldType)(oldViews[0].Columns[0].Item)).id = "1";
            ((PropertyFieldType)(newViews[0].Columns[0].Item)).id = "2";

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }

        [Test]
        public void AreStatsViewsModified_Pos_ColumnContextIdChanged()
        {
            StringBuilder sb = new StringBuilder();

            StatsView[] oldViews = CreateViews(1, 1);
            StatsView[] newViews = CreateViews(1, 1);

            oldViews[0].Columns[0].Item = new ContextFieldType();
            ((ContextFieldType)(oldViews[0].Columns[0].Item)).id = 1;

            newViews[0].Columns[0].Item = new ContextFieldType();
            ((ContextFieldType)(newViews[0].Columns[0].Item)).id = 2;

            Assert.IsTrue(XlastComparer.AreStatsViewsModified(oldViews, newViews, sb));
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // AreContextsModified tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private Context[] CreateContexts(int numContexts, int numValues)
        {
            Context[] contexts = new Context[numContexts];
            for (int i = 0; i < contexts.Length; i++)
            {
                contexts[i] = new Context();
                contexts[i].id = i.ToString();
                contexts[i].ContextValue = new ContextValue[numValues];

                for (int j = 0; j < contexts[i].ContextValue.Length; j++)
                {
                    contexts[i].ContextValue[j] = new ContextValue();
                    contexts[i].ContextValue[j].contextValue = (ushort)j;
                }
            }

            return contexts;
        }


        [Test]
        public void AreContextsModified_Pos_Removed()
        {
            StringBuilder sb = new StringBuilder();

            Context[] oldContexts = CreateContexts(2, 1);
            Context[] newContexts = CreateContexts(1, 1);

            Assert.IsTrue(XlastComparer.AreContextsModified(oldContexts, newContexts, sb));
        }

        [Test]
        public void AreContextsModified_Pos_ChangedId()
        {
            StringBuilder sb = new StringBuilder();

            Context[] oldContexts = CreateContexts(1, 1);
            Context[] newContexts = CreateContexts(1, 1);

            newContexts[0].id = "2";

            Assert.IsTrue(XlastComparer.AreContextsModified(oldContexts, newContexts, sb));
        }

        [Test]
        public void AreContextsModified_Pos_DefaultsChanged()
        {
            StringBuilder sb = new StringBuilder();

            Context[] oldContexts = CreateContexts(1, 1);
            Context[] newContexts = CreateContexts(1, 1);

            oldContexts[0].defaultValue = 1;
            newContexts[0].defaultValue = 2;

            Assert.IsTrue(XlastComparer.AreContextsModified(oldContexts, newContexts, sb));
        }

        [Test]
        public void AreContextsModified_Pos_StringChanged()
        {
            StringBuilder sb = new StringBuilder();

            Context[] oldContexts = CreateContexts(1, 1);
            Context[] newContexts = CreateContexts(1, 1);

            oldContexts[0].stringId = 1;
            newContexts[0].stringId = 2;

            Assert.IsTrue(XlastComparer.AreContextsModified(oldContexts, newContexts, sb));
        }


        [Test]
        public void AreContextsModified_Pos_ChangedValues()
        {
            StringBuilder sb = new StringBuilder();

            Context[] oldContexts = CreateContexts(1, 1);
            Context[] newContexts = CreateContexts(1, 1);

            oldContexts[0].ContextValue[0].contextValue = 1;
            newContexts[0].ContextValue[0].contextValue = 2;

            Assert.IsTrue(XlastComparer.AreContextsModified(oldContexts, newContexts, sb));
        }

        [Test]
        public void AreContextsModified_Pos_ChangedStrings()
        {
            StringBuilder sb = new StringBuilder();

            Context[] oldContexts = CreateContexts(1, 1);
            Context[] newContexts = CreateContexts(1, 1);

            oldContexts[0].ContextValue[0].stringId = 1;
            newContexts[0].ContextValue[0].stringId = 2;

            Assert.IsTrue(XlastComparer.AreContextsModified(oldContexts, newContexts, sb));
        }

        [Test]
        public void AreContextsModified_Neg_SameContexts()
        {
            StringBuilder sb = new StringBuilder();

            Context[] oldContexts = CreateContexts(1, 1);
            Context[] newContexts = CreateContexts(1, 1);

            Assert.IsTrue(!XlastComparer.AreContextsModified(oldContexts, newContexts, sb));
        }

        [Test]
        public void AreContextsModified_Neg_NewContextValues()
        {
            StringBuilder sb = new StringBuilder();

            Context[] oldContexts = CreateContexts(1, 1);
            Context[] newContexts = CreateContexts(1, 2);

            Assert.IsTrue(!XlastComparer.AreContextsModified(oldContexts, newContexts, sb));
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // ArePropertiesModified tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] CreateProperties(int numProps)
        {
            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] properties = new XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[numProps];
            for (int i = 0; i < properties.Length; i++)
            {
                properties[i] = new XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty();
                properties[i].id = i.ToString();
                properties[i].Format = new XboxLiveSubmissionProjectGameConfigProjectPropertiesPropertyFormat();
            }

            return properties;
        }

        [Test]
        public void ArePropertiesModified_Pos_Removed()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] oldProperties = CreateProperties(2);
            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] newProperties = CreateProperties(1);

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));
        }

        [Test]
        public void ArePropertiesModified_Pos_ChangedId()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] oldProperties = CreateProperties(1);
            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] newProperties = CreateProperties(1);

            newProperties[0].id = "2";

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));
        }

        [Test]
        public void ArePropertiesModified_Pos_StringChanged()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] oldProperties = CreateProperties(1);
            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] newProperties = CreateProperties(1);

            oldProperties[0].stringId = 1;
            newProperties[0].stringId = 2;

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));
        }

        [Test]
        public void ArePropertiesModified_Pos_DataSizeChanged()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] oldProperties = CreateProperties(1);
            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] newProperties = CreateProperties(1);

            oldProperties[0].dataSize = 1;
            newProperties[0].dataSize = 2;

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));
        }

        [Test]
        public void ArePropertiesModified_Pos_FormatChanged()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] oldProperties = CreateProperties(1);
            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] newProperties = CreateProperties(1);

            oldProperties[0].Format.day = false;
            newProperties[0].Format.day = true;

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));

            oldProperties = CreateProperties(1);
            newProperties = CreateProperties(1);

            oldProperties[0].Format.decimals = 1;
            newProperties[0].Format.decimals = 2;

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));

            oldProperties = CreateProperties(1);
            newProperties = CreateProperties(1);

            oldProperties[0].Format.hours = true;
            newProperties[0].Format.hours = false;

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));

            oldProperties = CreateProperties(1);
            newProperties = CreateProperties(1);

            oldProperties[0].Format.milliseconds = true;
            newProperties[0].Format.milliseconds = false;

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));

            oldProperties = CreateProperties(1);
            newProperties = CreateProperties(1);

            oldProperties[0].Format.minutes = true;
            newProperties[0].Format.minutes = false;

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));

            oldProperties = CreateProperties(1);
            newProperties = CreateProperties(1);

            oldProperties[0].Format.seconds = true;
            newProperties[0].Format.seconds = false;

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));

            oldProperties = CreateProperties(1);
            newProperties = CreateProperties(1);

            oldProperties[0].Format.year = true;
            newProperties[0].Format.year = false;

            Assert.IsTrue(XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));
        }

        [Test]
        public void ArePropertiesModified_Neg_NoChage()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] oldProperties = CreateProperties(1);
            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] newProperties = CreateProperties(1);

            Assert.IsTrue(!XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));
        }

        [Test]
        public void ArePropertiesModified_Neg_Swapped()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] oldProperties = CreateProperties(2);
            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] newProperties = CreateProperties(2);

            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty tempProp = newProperties[1];
            newProperties[1] = newProperties[0];
            newProperties[0] = tempProp;

            Assert.IsTrue(!XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));
        }

        [Test]
        public void ArePropertiesModified_Neg_Added()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] oldProperties = CreateProperties(1);
            XboxLiveSubmissionProjectGameConfigProjectPropertiesProperty[] newProperties = CreateProperties(2);

            Assert.IsTrue(!XlastComparer.ArePropertiesModified(oldProperties, newProperties, sb));
        }



        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // AreGameModesModified tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private LiveGameMode[] CreateGameModes(int num)
        {
            LiveGameMode[] gameModes = new LiveGameMode[num];
            for (int i = 0; i < gameModes.Length; i++)
            {
                gameModes[i] = new LiveGameMode();
                gameModes[i].Value = (ushort)i;
            }

            return gameModes;
        }

        [Test]
        public void AreGameModesModified_Pos_Removed()
        {
            StringBuilder sb = new StringBuilder();

            LiveGameMode[] oldGameModes = CreateGameModes(2);
            LiveGameMode[] newGameModes = CreateGameModes(1);

            Assert.IsTrue(XlastComparer.AreGameModesModified(oldGameModes, newGameModes, sb));
        }

        [Test]
        public void AreGameModesModified_Pos_ChangedId()
        {
            StringBuilder sb = new StringBuilder();

            LiveGameMode[] oldGameModes = CreateGameModes(1);
            LiveGameMode[] newGameModes = CreateGameModes(1);

            newGameModes[0].Value = 2;

            Assert.IsTrue(XlastComparer.AreGameModesModified(oldGameModes, newGameModes, sb));
        }

        [Test]
        public void AreGameModesModified_Pos_StringChanged()
        {
            StringBuilder sb = new StringBuilder();

            LiveGameMode[] oldGameModes = CreateGameModes(1);
            LiveGameMode[] newGameModes = CreateGameModes(1);

            oldGameModes[0].stringId = 1;
            newGameModes[0].stringId = 2;

            Assert.IsTrue(XlastComparer.AreGameModesModified(oldGameModes, newGameModes, sb));
        }

        [Test]
        public void AreGameModesModified_Neg_DrawProbChanged()
        {
            StringBuilder sb = new StringBuilder();

            LiveGameMode[] oldGameModes = CreateGameModes(1);
            LiveGameMode[] newGameModes = CreateGameModes(1);

            oldGameModes[0].drawProbability = 1;
            newGameModes[0].drawProbability = 2;

            Assert.IsTrue(!XlastComparer.AreGameModesModified(oldGameModes, newGameModes, sb));
        }

        [Test]
        public void AreGameModesModified_Neg_NoChange()
        {
            StringBuilder sb = new StringBuilder();

            LiveGameMode[] oldGameModes = CreateGameModes(1);
            LiveGameMode[] newGameModes = CreateGameModes(1);

            Assert.IsTrue(!XlastComparer.AreGameModesModified(oldGameModes, newGameModes, sb));
        }

        [Test]
        public void AreGameModesModified_Neg_Added()
        {
            StringBuilder sb = new StringBuilder();

            LiveGameMode[] oldGameModes = CreateGameModes(1);
            LiveGameMode[] newGameModes = CreateGameModes(2);

            Assert.IsTrue(!XlastComparer.AreGameModesModified(oldGameModes, newGameModes, sb));
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // AreSupportedLocalesModofied tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private SupportedLocale[] CreateSupportedLocales(int num)
        {
            SupportedLocale[] locales = new SupportedLocale[num];
            for (int i = 0; i < locales.Length; i++)
            {
                locales[i] = new SupportedLocale();
                locales[i].locale = i.ToString();
            }

            return locales;
        }


        [Test]
        public void AreSupportedLocalesModified_Pos_Removed()
        {
            StringBuilder sb = new StringBuilder();

            SupportedLocale[] oldSupportedLocales = CreateSupportedLocales(2);
            SupportedLocale[] newSupportedLocales = CreateSupportedLocales(1);

            Assert.IsTrue(XlastComparer.AreSupportedLocalesModified(oldSupportedLocales, newSupportedLocales, sb));
        }

        [Test]
        public void AreSupportedLocalesModified_Pos_ChangedLocale()
        {
            StringBuilder sb = new StringBuilder();

            SupportedLocale[] oldSupportedLocales = CreateSupportedLocales(1);
            SupportedLocale[] newSupportedLocales = CreateSupportedLocales(1);

            newSupportedLocales[0].locale = "bar";

            Assert.IsTrue(XlastComparer.AreSupportedLocalesModified(oldSupportedLocales, newSupportedLocales, sb));
        }


        [Test]
        public void AreSupportedLocalesModified_Neg_NoChange()
        {
            StringBuilder sb = new StringBuilder();

            SupportedLocale[] oldSupportedLocales = CreateSupportedLocales(1);
            SupportedLocale[] newSupportedLocales = CreateSupportedLocales(1);

            Assert.IsTrue(!XlastComparer.AreSupportedLocalesModified(oldSupportedLocales, newSupportedLocales, sb));
        }

        [Test]
        public void AreSupportedLocalesModified_Neg_Added()
        {
            StringBuilder sb = new StringBuilder();

            SupportedLocale[] oldSupportedLocales = CreateSupportedLocales(1);
            SupportedLocale[] newSupportedLocales = CreateSupportedLocales(2);

            Assert.IsTrue(!XlastComparer.AreSupportedLocalesModified(oldSupportedLocales, newSupportedLocales, sb));
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // AreLocalizedStringsModofied tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private LocalizedString[] CreateLocalizedStrings(int numStrings, int numLocales)
        {
            LocalizedString[] strings = new LocalizedString[numStrings];
            for (int i = 0; i < strings.Length; i++)
            {
                strings[i] = new LocalizedString();
                strings[i].id = (ushort)i;

                strings[i].Translation = new Translation[numLocales];
                for (int j = 0; j < strings[i].Translation.Length; j++)
                {
                    strings[i].Translation[j] = new Translation();
                    strings[i].Translation[j].locale = i + "-" + j;
                    strings[i].Translation[j].Value = "string " + i + "-" + j;
                }

            }

            return strings;
        }


        [Test]
        public void AreLocalizedStringsModified_Pos_Removed()
        {
            StringBuilder sb = new StringBuilder();

            LocalizedString[] oldLocalizedStrings = CreateLocalizedStrings(2, 1);
            LocalizedString[] newLocalizedStrings = CreateLocalizedStrings(1, 1);

            Assert.IsTrue(XlastComparer.AreLocalizedStringsModified(oldLocalizedStrings, newLocalizedStrings, sb));
        }

        [Test]
        public void AreLocalizedStringsModified_Pos_RemovedLocales()
        {
            StringBuilder sb = new StringBuilder();

            LocalizedString[] oldLocalizedStrings = CreateLocalizedStrings(2, 2);
            LocalizedString[] newLocalizedStrings = CreateLocalizedStrings(2, 1);

            Assert.IsTrue(XlastComparer.AreLocalizedStringsModified(oldLocalizedStrings, newLocalizedStrings, sb));
        }

        [Test]
        public void AreLocalizedStringsModified_Pos_ChangedId()
        {
            StringBuilder sb = new StringBuilder();

            LocalizedString[] oldLocalizedStrings = CreateLocalizedStrings(1, 1);
            LocalizedString[] newLocalizedStrings = CreateLocalizedStrings(1, 1);

            oldLocalizedStrings[0].id = 10;

            Assert.IsTrue(XlastComparer.AreLocalizedStringsModified(oldLocalizedStrings, newLocalizedStrings, sb));
        }

        [Test]
        public void AreLocalizedStringsModified_Pos_ChangedLocale()
        {
            StringBuilder sb = new StringBuilder();

            LocalizedString[] oldLocalizedStrings = CreateLocalizedStrings(1, 1);
            LocalizedString[] newLocalizedStrings = CreateLocalizedStrings(1, 1);

            oldLocalizedStrings[0].Translation[0].locale = "a";
            newLocalizedStrings[0].Translation[0].locale = "b";

            Assert.IsTrue(XlastComparer.AreLocalizedStringsModified(oldLocalizedStrings, newLocalizedStrings, sb));
        }

        [Test]
        public void AreLocalizedStringsModified_Pos_ChangedLocaleValue()
        {
            StringBuilder sb = new StringBuilder();

            LocalizedString[] oldLocalizedStrings = CreateLocalizedStrings(1, 1);
            LocalizedString[] newLocalizedStrings = CreateLocalizedStrings(1, 1);

            oldLocalizedStrings[0].Translation[0].Value = "a";
            newLocalizedStrings[0].Translation[0].Value = "b";

            Assert.IsTrue(XlastComparer.AreLocalizedStringsModified(oldLocalizedStrings, newLocalizedStrings, sb));
        }


        [Test]
        public void AreLocalizedStringsModified_Neg_NoChange()
        {
            StringBuilder sb = new StringBuilder();

            LocalizedString[] oldLocalizedStrings = CreateLocalizedStrings(1, 1);
            LocalizedString[] newLocalizedStrings = CreateLocalizedStrings(1, 1);

            Assert.IsTrue(!XlastComparer.AreLocalizedStringsModified(oldLocalizedStrings, newLocalizedStrings, sb));
        }

        [Test]
        public void AreLocalizedStringsModified_Neg_Added()
        {
            StringBuilder sb = new StringBuilder();

            LocalizedString[] oldLocalizedStrings = CreateLocalizedStrings(1, 1);
            LocalizedString[] newLocalizedStrings = CreateLocalizedStrings(2, 1);

            Assert.IsTrue(!XlastComparer.AreLocalizedStringsModified(oldLocalizedStrings, newLocalizedStrings, sb));
        }

        [Test]
        public void AreLocalizedStringsModified_Neg_AddedLocale()
        {
            StringBuilder sb = new StringBuilder();

            LocalizedString[] oldLocalizedStrings = CreateLocalizedStrings(1, 1);
            LocalizedString[] newLocalizedStrings = CreateLocalizedStrings(1, 2);

            Assert.IsTrue(!XlastComparer.AreLocalizedStringsModified(oldLocalizedStrings, newLocalizedStrings, sb));
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // AreImagesModified tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private Image[] CreateImages(int num)
        {
            Image[] images = new Image[num];
            for (int i = 0; i < images.Length; i++)
            {
                images[i] = new Image();
                images[i].id = (ulong)i;
                images[i].Path = i.ToString();
            }

            return images;
        }


        [Test]
        public void AreImagesModified_Pos_Removed()
        {
            StringBuilder sb = new StringBuilder();

            Image[] oldImages = CreateImages(2);
            Image[] newImages = CreateImages(1);

            Assert.IsTrue(XlastComparer.AreImagesModified(oldImages, newImages, ".\\", ".\\", sb));
        }

        /*[Test]
        public void AreImagesModified_Pos_ChangedFile()
        {
            StringBuilder sb = new StringBuilder();

            Image[] oldImages = CreateImages(1);
            Image[] newImages = CreateImages(1);

            Random rnd = new Random();
            byte[] oldimg = new Byte[10];
            rnd.NextBytes(oldimg);
            XlastComparer.SetImage("old\\" + oldImages[0].Path, oldimg);

            byte[] newimg = new Byte[10];
            rnd.NextBytes(newimg);
            XlastComparer.SetImage("new\\" + newImages[0].Path, newimg);

            Assert.IsTrue(XlastComparer.AreImagesModified(oldImages, newImages, "old\\", "new\\", sb));
        }*/

        [Test]
        public void AreImagesModified_Neg_UseRealFile()
        {
            StringBuilder sb = new StringBuilder();

            Image[] oldImages = CreateImages(1);
            Image[] newImages = CreateImages(1);

            oldImages[0].Path = "XlastBadXml.xlast";
            newImages[0].Path = "XlastBadXml.xlast";

            Assert.IsTrue(!XlastComparer.AreImagesModified(oldImages, newImages, ".\\", ".\\", sb));
        }

        /*[Test]
        public void AreImagesModified_Neg_NoChange()
        {
            StringBuilder sb = new StringBuilder();

            Image[] oldImages = CreateImages(1);
            Image[] newImages = CreateImages(1);

            Random rnd = new Random();
            byte[] image = new Byte[10];

            rnd.NextBytes(image);
            XlastComparer.SetImage("old\\" + oldImages[0].Path, image);
            XlastComparer.SetImage("new\\" + newImages[0].Path, image);

            Assert.IsTrue(!XlastComparer.AreImagesModified(oldImages, newImages, "old\\", "new\\", sb));
        }

        [Test]
        public void AreImagesModified_Neg_Added()
        {
            StringBuilder sb = new StringBuilder();

            Image[] oldImages = CreateImages(1);
            Image[] newImages = CreateImages(2);

            Random rnd = new Random();
            byte[] image = new Byte[10];

            rnd.NextBytes(image);
            XlastComparer.SetImage("old\\" + oldImages[0].Path, image);
            XlastComparer.SetImage("new\\" + newImages[0].Path, image);

            rnd.NextBytes(image);
            XlastComparer.SetImage("new\\" + newImages[1].Path, image);

            Assert.IsTrue(!XlastComparer.AreImagesModified(oldImages, newImages, "old\\", "new\\", sb));
        }*/

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // AreGamerPicturesModified tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private Picture[] CreateGamerPictures(int num)
        {
            Picture[] GamerPictures = new Picture[num];
            for (int i = 0; i < GamerPictures.Length; i++)
            {
                GamerPictures[i] = new Picture();
                GamerPictures[i].id = (ulong)i;
            }

            return GamerPictures;
        }

        [Test]
        public void AreGamerPicturesModified_Pos_Removed()
        {
            StringBuilder sb = new StringBuilder();

            Picture[] oldGamerPictures = CreateGamerPictures(2);
            Picture[] newGamerPictures = CreateGamerPictures(1);

            Assert.IsTrue(XlastComparer.AreGamerPicturesModified(oldGamerPictures, newGamerPictures, sb));
        }

        [Test]
        public void AreGamerPicturesModified_Pos_ChangedId()
        {
            StringBuilder sb = new StringBuilder();

            Picture[] oldGamerPictures = CreateGamerPictures(1);
            Picture[] newGamerPictures = CreateGamerPictures(1);

            newGamerPictures[0].id = 2;

            Assert.IsTrue(XlastComparer.AreGamerPicturesModified(oldGamerPictures, newGamerPictures, sb));
        }

        [Test]
        public void AreGamerPicturesModified_Neg_NoChange()
        {
            StringBuilder sb = new StringBuilder();

            Picture[] oldGamerPictures = CreateGamerPictures(1);
            Picture[] newGamerPictures = CreateGamerPictures(1);

            Assert.IsTrue(!XlastComparer.AreGamerPicturesModified(oldGamerPictures, newGamerPictures, sb));
        }

        [Test]
        public void AreGamerPicturesModified_Neg_Added()
        {
            StringBuilder sb = new StringBuilder();

            Picture[] oldGamerPictures = CreateGamerPictures(1);
            Picture[] newGamerPictures = CreateGamerPictures(2);

            Assert.IsTrue(!XlastComparer.AreGamerPicturesModified(oldGamerPictures, newGamerPictures, sb));
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // ArePresenceModesModified tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] CreatePresModes(int num)
        {
            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] PresModes = new XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[num];
            for (int i = 0; i < PresModes.Length; i++)
            {
                PresModes[i] = new XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode();
                PresModes[i].contextValue = (ushort)i;
            }

            return PresModes;
        }

        [Test]
        public void ArePresenceModesModified_Pos_Removed()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] oldPresModes = CreatePresModes(2);
            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] newPresModes = CreatePresModes(1);

            Assert.IsTrue(XlastComparer.ArePresenceModesModified(oldPresModes, newPresModes, sb));
        }

        [Test]
        public void ArePresenceModesModified_Pos_ChangedId()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] oldPresModes = CreatePresModes(1);
            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] newPresModes = CreatePresModes(1);

            newPresModes[0].contextValue = 2;

            Assert.IsTrue(XlastComparer.ArePresenceModesModified(oldPresModes, newPresModes, sb));
        }

        [Test]
        public void ArePresenceModesModified_Pos_StringChanged()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] oldPresModes = CreatePresModes(1);
            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] newPresModes = CreatePresModes(1);

            oldPresModes[0].stringId = 1;
            newPresModes[0].stringId = 2;

            Assert.IsTrue(XlastComparer.ArePresenceModesModified(oldPresModes, newPresModes, sb));
        }

        [Test]
        public void ArePresenceModesModified_Neg_NoChange()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] oldPresModes = CreatePresModes(1);
            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] newPresModes = CreatePresModes(1);

            Assert.IsTrue(!XlastComparer.ArePresenceModesModified(oldPresModes, newPresModes, sb));
        }

        [Test]
        public void ArePresenceModesModified_Neg_Added()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] oldPresModes = CreatePresModes(1);
            XboxLiveSubmissionProjectGameConfigProjectPresencePresenceMode[] newPresModes = CreatePresModes(2);

            Assert.IsTrue(!XlastComparer.ArePresenceModesModified(oldPresModes, newPresModes, sb));
        }



        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // AreMatchmakingConstantsModified tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] CreateMatchConstants(int num)
        {
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] constants =
                new XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[num];

            for (int i = 0; i < constants.Length; i++)
            {
                constants[i] = new XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant();
                constants[i].id = i.ToString();
                constants[i].name = i.ToString();
            }

            return constants;
        }

        [Test]
        public void AreMatchmakingConstantsModified_Pos_Removed()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] oldMatchConstants = CreateMatchConstants(2);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] newMatchConstants = CreateMatchConstants(1);

            Assert.IsTrue(XlastComparer.AreMatchmakingConstantsModified(oldMatchConstants, newMatchConstants, sb));
        }

        [Test]
        public void AreMatchmakingConstantsModified_Pos_ChangedId()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] oldMatchConstants = CreateMatchConstants(1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] newMatchConstants = CreateMatchConstants(1);

            newMatchConstants[0].id = "2";

            Assert.IsTrue(XlastComparer.AreMatchmakingConstantsModified(oldMatchConstants, newMatchConstants, sb));
        }

        [Test]
        public void AreMatchmakingConstantsModified_Pos_Changedname()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] oldMatchConstants = CreateMatchConstants(1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] newMatchConstants = CreateMatchConstants(1);

            oldMatchConstants[0].name = "foo";
            newMatchConstants[0].name = "bar";

            Assert.IsTrue(XlastComparer.AreMatchmakingConstantsModified(oldMatchConstants, newMatchConstants, sb));
        }

        [Test]
        public void AreMatchmakingConstantsModified_Neg_NoChange()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] oldMatchConstants = CreateMatchConstants(1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] newMatchConstants = CreateMatchConstants(1);

            Assert.IsTrue(!XlastComparer.AreMatchmakingConstantsModified(oldMatchConstants, newMatchConstants, sb));
        }

        [Test]
        public void AreMatchmakingConstantsModified_Neg_Added()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] oldMatchConstants = CreateMatchConstants(1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingConstantsConstant[] newMatchConstants = CreateMatchConstants(2);

            Assert.IsTrue(!XlastComparer.AreMatchmakingConstantsModified(oldMatchConstants, newMatchConstants, sb));
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // AreMatchmakingQueriesModified tests
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] CreateMatchQueries(int num, int numParams, int numReturns)
        {
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] Queries =
                new XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[num];

            for (int i = 0; i < Queries.Length; i++)
            {
                Queries[i] = new XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery();
                Queries[i].id = (ushort)i;

                Queries[i].Parameters = new XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQueryParameter[numParams];
                for (int j = 0; j < Queries[i].Parameters.Length; j++)
                {
                    Queries[i].Parameters[j] = new XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQueryParameter();
                    Queries[i].Parameters[j].id = j.ToString();
                }

                Queries[i].Returns = new XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQueryReturn[numReturns];
                for (int j = 0; j < Queries[i].Returns.Length; j++)
                {
                    Queries[i].Returns[j] = new XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQueryReturn();
                    Queries[i].Returns[j].id = j.ToString();
                }
            }

            return Queries;
        }

        [Test]
        public void AreMatchmakingQueriesModified_Pos_Removed()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] oldMatchQueries = CreateMatchQueries(2, 1, 1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] newMatchQueries = CreateMatchQueries(1, 1, 1);

            Assert.IsTrue(XlastComparer.AreMatchmakingQueriesModified(oldMatchQueries, newMatchQueries, sb));
        }

        [Test]
        public void AreMatchmakingQueriesModified_Pos_ChangedId()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] oldMatchQueries = CreateMatchQueries(1, 1, 1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] newMatchQueries = CreateMatchQueries(1, 1, 1);

            newMatchQueries[0].id = 2;

            Assert.IsTrue(XlastComparer.AreMatchmakingQueriesModified(oldMatchQueries, newMatchQueries, sb));
        }

        [Test]
        public void AreMatchmakingQueriesModified_Pos_ChangedType()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] oldMatchQueries = CreateMatchQueries(1, 1, 1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] newMatchQueries = CreateMatchQueries(1, 1, 1);

            oldMatchQueries[0].type = XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQueryType.Aggregate;
            newMatchQueries[0].type = XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQueryType.Findfromid;

            Assert.IsTrue(XlastComparer.AreMatchmakingQueriesModified(oldMatchQueries, newMatchQueries, sb));
        }

        [Test]
        public void AreMatchmakingQueriesModified_Pos_AddedParams()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] oldMatchQueries = CreateMatchQueries(1, 1, 1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] newMatchQueries = CreateMatchQueries(1, 2, 1);

            Assert.IsTrue(XlastComparer.AreMatchmakingQueriesModified(oldMatchQueries, newMatchQueries, sb));
        }

        [Test]
        public void AreMatchmakingQueriesModified_Pos_AddedReturns()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] oldMatchQueries = CreateMatchQueries(1, 1, 1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] newMatchQueries = CreateMatchQueries(1, 1, 2);

            Assert.IsTrue(XlastComparer.AreMatchmakingQueriesModified(oldMatchQueries, newMatchQueries, sb));
        }

        [Test]
        public void AreMatchmakingQueriesModified_Neg_NoChange()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] oldMatchQueries = CreateMatchQueries(1, 1, 1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] newMatchQueries = CreateMatchQueries(1, 1, 1);

            Assert.IsTrue(!XlastComparer.AreMatchmakingQueriesModified(oldMatchQueries, newMatchQueries, sb));
        }

        [Test]
        public void AreMatchmakingQueriesModified_Neg_Added()
        {
            StringBuilder sb = new StringBuilder();

            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] oldMatchQueries = CreateMatchQueries(1, 1, 1);
            XboxLiveSubmissionProjectGameConfigProjectMatchmakingQueriesQuery[] newMatchQueries = CreateMatchQueries(2, 1, 1);

            Assert.IsTrue(!XlastComparer.AreMatchmakingQueriesModified(oldMatchQueries, newMatchQueries, sb));
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.test.xlastutil_none_12.4.56.0_none_43b49849ef587895
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.test.xlastutil
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7.cat
XP_PAYLOAD_PATH=msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.test.xlastutil,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.test.xlastutil_none_12.4.56.0_none_43b49849ef587895
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.test.xlastutil
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7.cat
XP_PAYLOAD_PATH=msil_xonline.common.test.xlastutil_no-public-key_12.4.56.0_x-ww_81d7b1d7
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.test.xlastutil,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil\XlastUtilTest.cs ===
// other folk's stuff
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;


// From Test
using ServerTestFramework;
using ServerTestFramework.Utilities;

// our stuff
using xonline.common.diagnostics;
using xonline.common.leaderboard;
//using xonline.common.livetitleconfig;
using xonline.tools.framework;

namespace xonline.common.xlastutil
{
    /// <summary>
    /// Unit test code for the XlastUtil class
    /// </summary>
    [TestGroup, Owner("mifish"), TestFrequency("Daily"), EnvRequirement("Deprecated")]
    public class XlastUtilTest : TestNode
    {

        #region Test Constants
            // Test Xlast strings are at the bottom of the file
            public const uint GoodTitleID = 0x80000312;
            public const uint BadTitleID  = 0x80000313;
            public string GoodXlast;
            public string BadXlast;
            public const string GoodXlastPath = "XlastGoodXml.xlast";
            public const string BadXlastPath = "XlastBadXml.xlast";
//            public const string GoodXlastPath = ".\\suites\\XlastGoodXml.xlast";
//            public const string BadXlastPath = ".\\suites\\XlastBadXml.xlast";
        #endregion

        #region Constructors and Test Setup/Teardown

        public XlastUtilTest()
        {
            Console.WriteLine( "In the Constructor" );

            //read in xml, assign it to string
            Console.WriteLine("about to read file");
            StreamReader xlastReader = new StreamReader( GoodXlastPath );
            this.GoodXlast = xlastReader.ReadToEnd();
            xlastReader.Close();

            xlastReader = new StreamReader( BadXlastPath );
            this.BadXlast = xlastReader.ReadToEnd();
            Console.WriteLine("Bad string length is " + this.GoodXlast.Length );
            xlastReader.Close();

        }


        // executes once per test run
        [TestGroupSetup]
        public void XlastUtilTestFixtureSetup()
        {
            Console.WriteLine( "In TestFixtureSetUp." );
            XlastUtil.DeleteTitleInfo( GoodTitleID );
            XlastUtil.DeleteTitleInfo( BadTitleID );
        }


        // executes once at the end of all the tests
        [TestGroupTearDown]
        public void XlastUtilTestFixtureTearDown()
        {
            Console.WriteLine( "In TestFixtureTearDown." );
            XlastUtil.DeleteTitleInfo( GoodTitleID );
            XlastUtil.DeleteTitleInfo( BadTitleID );
        }


        #endregion

        #region Xlasts in Memory

        // ----------------------------------------------------------
        // a: Tests of Xlasts in memory
        // ----------------------------------------------------------
        [Test]
        public void GoodXmlDeSerializationTest()
        {
            Console.WriteLine("Starting GoodXmlDeSerializationTest.");
            //convert GoodXlast string to class
            XmlTextReader xmlReader = new XmlTextReader( new StringReader( GoodXlast ) );
            XmlSerializer serializer = new XmlSerializer( typeof( XboxLiveSubmissionProject ) );
            XboxLiveSubmissionProject goodXlast = ( XboxLiveSubmissionProject ) serializer.Deserialize( xmlReader );

            Console.WriteLine( "Version is " + goodXlast.Version );
            Console.WriteLine( "Version is " + goodXlast.Version );

        }

        [Test]
        public void ExtraneousXmlDeSerializationTest()
        {
            Console.WriteLine("Starting ExtraneousXmlDeSerializationTest.");

            //convert BadXlast string to class -- expect exception
            XmlTextReader xmlReader = new XmlTextReader( new StringReader( BadXlast ) );
            XmlSerializer serializer = new XmlSerializer( typeof( XboxLiveSubmissionProject ) );
            XboxLiveSubmissionProject badXlast = ( XboxLiveSubmissionProject ) serializer.Deserialize( xmlReader );

            Console.WriteLine( "Version is " + badXlast.Version );
        }

        //Test GetXLASTLeaderboardConfiguration
        //Test ValidateXLAST


        //needed at one point to solve a statsview deserialization problem. not that useful anymore.
        //[Test]
//        public void DSer_StatsViews()
//        {
//
//            StreamReader xlastFileReader = new StreamReader( "StatsView.xml" );
//            string xlast = xlastFileReader.ReadToEnd();
//
//            XmlTextReader xlastXmlReader = new XmlTextReader( new StringReader( xlast ) );
//            XmlSerializer serializer = new XmlSerializer( typeof( StatsViews ) );
//            StatsViews svs = ( StatsViews ) serializer.Deserialize( xlastXmlReader );
//
//            if ( svs.StatsView == null )
//            {
//                Console.WriteLine( "Array is Null" );
//            }
//            else
//            {
//                Console.WriteLine( "Information is " + svs.StatsView.Length );
//            }
//
//        }

        [Test]
        public void PropTestGameConfigProject()
        {
            //task: should I test just from serializing the string... or also from DB?
            XlastUtil.PutXlast( GoodTitleID, GoodXlast );
            XboxLiveSubmissionProject xlsp = XlastUtil.GetXlast( GoodTitleID );
            Assert.IsTrue( xlsp != null );

            GameConfigProject gcp = xlsp.GameConfigProject;

            //all fixed values are from the test file...
            Assert.IsTrue( gcp.clsid == "{77E1A64F-5837-489B-AF8E-E4BA0FDACE7D}" );
            Assert.IsTrue( gcp.titleId == "0x80000312" );
            Assert.IsTrue( gcp.titleName== "Halo2: Not Really The Battle for Earth" );
            Assert.IsTrue( gcp.multiplayer== "true" );
            Assert.IsTrue( gcp.name== "Halo2" );
            Assert.IsTrue( gcp.projectVersion== "1.00.0016.0" );

            //one day STF will have per-test setup and teardown...
            XlastUtil.DeleteTitleInfo( GoodTitleID );
        }

        [Test]
        public void PropertyTestLocalizedStrings()
        {
            XlastUtil.PutXlast( GoodTitleID, GoodXlast );
            XboxLiveSubmissionProject xlsp = XlastUtil.GetXlast( GoodTitleID );
            LocalizedStrings locstrings = xlsp.GameConfigProject.LocalizedStrings;

            //all fixed values are from the test file...
            Assert.IsTrue( locstrings.clsid == "{BB833025-27FE-4BBD-87B6-DECD32039CED}" );
            Assert.IsTrue( locstrings.nextId == 60 );
            Assert.IsTrue( locstrings.nextIdSpecified == true );
            Assert.IsTrue( locstrings.defaultLocale == "en-US" );

            Assert.IsTrue( locstrings.LocalizedString.Length == 21 );
            Console.WriteLine( "Hemorragie should be... " + locstrings.LocalizedString[ 2 ].Translation[ 1 ].Value );
            Assert.IsTrue( locstrings.LocalizedString[ 2 ].Translation[ 1 ].Value == "Hmorragie" );

            //one day STF will have per-test setup and teardown...
            XlastUtil.DeleteTitleInfo( GoodTitleID );
        }


        [Test]
        public void PropertyTestLastLocalizedString()
        {
            XlastUtil.PutXlast( GoodTitleID, GoodXlast );
            XboxLiveSubmissionProject xlsp = XlastUtil.GetXlast( GoodTitleID );
            LocalizedStrings locstrings = xlsp.GameConfigProject.LocalizedStrings;

            //all fixed values are from the test file...
            Assert.IsTrue( locstrings.clsid == "{BB833025-27FE-4BBD-87B6-DECD32039CED}" );
            Assert.IsTrue( locstrings.nextId == 60 );
            Assert.IsTrue( locstrings.nextIdSpecified == true );
            Assert.IsTrue( locstrings.defaultLocale == "en-US" );

            Assert.IsTrue( locstrings.LocalizedString.Length == 21 );
            Console.WriteLine( "PrsenceRiche1 should be... " + locstrings.LocalizedString[ 8 ].Translation[ 1 ].Value );
            Assert.IsTrue( locstrings.LocalizedString[ 8 ].Translation[ 1 ].Value == "PrsenceRiche1" );

            Console.WriteLine( "String Count is " + locstrings.LocalizedString.Length );
            //one day STF will have per-test setup and teardown...
            XlastUtil.DeleteTitleInfo( GoodTitleID );
        }


        [Test]
        public void PropertyTestGetTitleNameTranslations()
        {

            //test that we can *find* the X_title_name localized string
            //test that we get the correct number of translation

        }


        [Test]
        public void PropertyTestStatsViews()
        {
            XboxLiveSubmissionProject xlsp = XlastUtil.GetXlastFromXml( GoodXlast );
            StatsViews sv = xlsp.GameConfigProject.StatsViews;

            Console.WriteLine( "Attributes are \n clsid: {0} \n nextViewId: {1}", sv.clsid, sv.nextViewId );
            Console.WriteLine( "There are {0} Stats Views.", sv.StatsView.Length );
            Assert.IsTrue( sv.StatsView.Length ==  26 );

            Assert.IsTrue( sv.StatsView[25].clsid == "{6B341F2D-7A8A-43BC-AABF-949D6B9F28C7}" );
            Assert.IsTrue( sv.StatsView[25].id == 26 );
            Assert.IsTrue( sv.StatsView[25].stringId == 30 );
            Assert.IsTrue( sv.StatsView[25].resetType == ResetType.Annually );
            Assert.IsTrue( sv.StatsView[25].friendlyName == "AssistLeaderboardMap5" );
            Assert.IsTrue( sv.StatsView[25].entryExpiration == 7 );
            Assert.IsTrue( sv.StatsView[25].hidden == false );
            Assert.IsTrue( sv.StatsView[25].arbitrated == true );
            Assert.IsTrue( sv.StatsView[25].onlineOnly == false );

            //removed in June XDK... but it will be back.
//            Assert.IsTrue( sv.StatsView[25].teamView == false );

            Assert.IsTrue( sv.StatsView[25].topEntries == 100 );
            Assert.IsTrue( sv.StatsView[25].maxAttachments == 0 );

            //removed in April XDK
//            Assert.IsTrue( sv.StatsView[25].maxAttachmentSize == 0 );

            //Assert.IsTrue( sv.StatsView[25].Columns.Length ==  );
            //task: add field and property values
            //Assert.IsTrue( sv.StatsView[25]. == "" );
            //Assert.IsTrue( sv.StatsView[25]. == "" );

            Console.WriteLine( "Stats 1: " + sv.StatsView[ 1 ].clsid + " " + sv.StatsView[ 1 ].id + " " + sv.StatsView[ 1 ].resetType );
        }

        [Test]
        public void PropertyTestStatsViewElements()
        {
            StatsViews svs = new StatsViews();
            svs.clsid = "{7FD2B836-2D93-490B-96C9-AEE936158AE8}";
            svs.nextViewId = 27;
            svs.StatsView = new StatsView[ 1 ];
            svs.StatsView[ 0 ] = new StatsView();
            svs.StatsView[ 0 ].friendlyName = "GameTypeLeaderboard1";

            XmlSerializer xlastSerializer = new XmlSerializer( typeof( StatsViews ) );
            StringWriter sw = new StringWriter();
            xlastSerializer.Serialize( sw, svs );

            Console.WriteLine( "Serialized is: " + sw.GetStringBuilder().ToString() );

//            XmlTextReader xmlReader = new XmlTextReader( new StringReader( GoodXlast ) );
//            XmlSerializer serializer = new XmlSerializer( typeof( XboxLiveSubmissionProject ) );
//            XboxLiveSubmissionProject goodXlast = ( XboxLiveSubmissionProject ) serializer.Deserialize( xmlReader );
        }

        [Test]
        public void PropertyTestContexts()
        {

            XboxLiveSubmissionProject xlsp = XlastUtil.GetXlastFromXml( GoodXlast );
            Console.WriteLine( "check clsid" );
            Assert.IsTrue( xlsp.GameConfigProject.Contexts.clsid == "{7F6BA3D8-BB76-46CC-AD28-A4E0C8D6E1EF}" );
            Console.WriteLine( "check nextId" );
            Assert.IsTrue( xlsp.GameConfigProject.Contexts.nextId == "0x00000004" );

            Context[] testContextArray = xlsp.GameConfigProject.Contexts.Context;

            //all based on xlastgoodxml.xlast
            Console.WriteLine( "check context length" );
            Assert.IsTrue( testContextArray.Length == 4 );
            Console.WriteLine( "check context clsid" );
            Assert.IsTrue( testContextArray[ 0 ].clsid == "{7F343825-DBB8-4BC0-ACF2-533263622341}" );
            Console.WriteLine( "check context stringid" );
            Assert.IsTrue( testContextArray[ 0 ].stringId == 18 );
            Console.WriteLine( "check context defaultValue" );
            Assert.IsTrue( testContextArray[ 0 ].defaultValue == 0 );
            Console.WriteLine( "check context friendlyName" );
            Assert.IsTrue( testContextArray[ 0 ].friendlyName == "Map" );
            Console.WriteLine( "check context id" );
            Assert.IsTrue( testContextArray[ 0 ].id == "0x00000000" );
            Console.WriteLine( "check context ContextValue.Length" );
            Assert.IsTrue( testContextArray[ 0 ].ContextValue.Length == 5 );
            Console.WriteLine( "check context ContextValue[ 4 ].friendlyName " );
            Assert.IsTrue( testContextArray[ 0 ].ContextValue[ 4 ].friendlyName == "Map5" );
            Console.WriteLine( "check context ContextValue[ 4 ].contextValue" );
            Assert.IsTrue( testContextArray[ 0 ].ContextValue[ 4 ].contextValue == 4  );
            Console.WriteLine( "check context ContextValue[ 4 ].stringId" );
            Assert.IsTrue( testContextArray[ 0 ].ContextValue[ 4 ].stringId == 30  );

            //this node is particularly important for the Stats tool to create skill leaderboards
            Assert.IsTrue( testContextArray[ 3 ].clsid == "{7F343825-DBB8-4BC0-ACF2-533263622341}" );
            Assert.IsTrue( testContextArray[ 3 ].stringId == 59 );
            Assert.IsTrue( testContextArray[ 3 ].defaultValue == 0 );
            Assert.IsTrue( testContextArray[ 3 ].friendlyName == "GAME_MODE" );
            Assert.IsTrue( testContextArray[ 3 ].id == "0x0000800B" );
            Assert.IsTrue( testContextArray[ 3 ].ContextValue.Length == 1 );
            Assert.IsTrue( testContextArray[ 3 ].ContextValue[ 0 ].friendlyName == "gmv1" );
            Assert.IsTrue( testContextArray[ 3 ].ContextValue[ 0 ].contextValue == 0  );
            Assert.IsTrue( testContextArray[ 3 ].ContextValue[ 0 ].stringId == 59  );


        }

//        [Test]
        public void PropTestAchievements()
        {
            Assert.IsTrue( false );
            //one day STF will have per-test setup and teardown...
            XlastUtil.DeleteTitleInfo( GoodTitleID );
        }

//        [Test]
        public void PropTestProperties()
        {
            Assert.IsTrue( false );
        }

//        [Test]
        public void PropTestPresence()
        {
            Assert.IsTrue( false );
        }

//        [Test]
        public void PropTestMatchmaking()
        {
            Assert.IsTrue( false );
        }

        //task: confirm that string to object back to string == orginal string
        //            XmlSerializer xlastSerializer = new XmlSerializer( typeof( XboxLiveSubmissionProject ) );
        //            StringWriter sw = new StringWriter();
        //            xlastSerializer.Serialize( sw, this );

        //task: Confirm properties == expected values

        #endregion

        #region Xlast to/from DB
        // ----------------------------------------------------------
        // b: Tests of Xlasts to/from NPDB
        // ----------------------------------------------------------

        [Test]
        public void RoundTripGoodXmlTest()
        {

            Console.WriteLine("Starting RoundTripGoodXmlTest.");

            XlastUtil.PutXlast( GoodTitleID, GoodXlast );
            string retrieved = XlastUtil.GetXlastString( GoodTitleID );

            Assert.IsTrue( retrieved == GoodXlast );
        }

        //test delete

//        [Test]
        public void SaveBadXmlTest()
        {
            Assert.IsTrue( false );
        }

//        [Test]
        public void SaveGoodXmlTest()
        {
            Assert.IsTrue( false );
        }

//        [Test]
        public void LoadBadXmlTest()
        {
            Assert.IsTrue( false );
        }

        #endregion

    } // test class
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil.mobile\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil.mobile\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.test.xlastutil.mobile_none_12.4.56.0_none_24eccc1cc20d093d
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.test.xlastutil.mobile
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f.cat
XP_PAYLOAD_PATH=msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.test.xlastutil.mobile,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil.mobile\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil.mobile\MobileAndWebLeaderboardUtilsTest.cs ===
﻿// <copyright file="MobileAndWebLeaderboardUtilsTest.cs" company="Microsoft">Copyright (c) 2011 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2011-04-27</date>
// <summary>Contains the unit test cases for XlastUtils.</summary>

namespace xonline.common.xlastutil
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Xml;
    using System.Xml.XPath;
    using ServerTestFramework;
    using xonline.common.xlastutil;

    /// <summary>
    /// These are developer unit test cases for MobileAndWebLeaderboardUtils class.
    /// </summary>
    [TestGroup, Owner("amitdhar"), TestFrequency("Regression"), TestCasePriority(2)]
    public class MobileAndWebLeaderboardUtilsTest
    {
        /// <summary>
        /// The path of the sample game config file for testing.
        /// </summary>
        private const string GameConfigFilePath = "SuitesData\\XlastUtils\\MobileTitleSample.gameconfig";

        /// <summary>
        /// The path of the column name localization data file.
        /// </summary>
        private const string ColumnLocalizationDataFilePath = "SuitesData\\XlastUtils\\MobileStatsColumnsLocalized.xml";

        /// <summary>
        /// Tests the ConvertMobileLeaderboardsToGeneralFormat method of MobileAndWebLeaderboardUtils.
        /// </summary>
        /// <param name="self">The test node.</param>
        [TestCase, TestCasePriority(1)]
        public void TestConvertMobileLeaderboardsToGeneralFormat(TestNode self)
        {
            StreamReader gameConfigReader = new StreamReader(GameConfigFilePath);
            string gameConfigXML = gameConfigReader.ReadToEnd();
            gameConfigReader.Close();

            XboxLiveSubmissionProject xlsp = XlastUtil.GetXlastFromXml(gameConfigXML);
            bool isMobileTitle = MobileAndWebLeaderboardUtils.IsMobileTitle(xlsp);

            if (!isMobileTitle)
            {
                throw new UnexpectedTestResultException(
                    "The gameconfig file is not for a mobile title! " + GameConfigFilePath);
            }

            // There should be 2 stats views for each friend stats view.
            int expectedStatsViewCount = xlsp.GameConfigProject.FriendStatsViews.FriendStatsView.Length * 2;

            Dictionary<string, string> colLocalizationData =
                MobileAndWebLeaderboardUtils.GetLocalizationDataDictionary(ColumnLocalizationDataFilePath);
            MobileAndWebLeaderboardUtils.ConvertMobileLeaderboardsToGeneralFormat(xlsp, colLocalizationData);

            // Check the number of stats views agains the expected.
            int numberOfStatsViews = xlsp.GameConfigProject.StatsViews.StatsView.Length;
            if (numberOfStatsViews != expectedStatsViewCount)
            {
                throw new UnexpectedTestResultException(
                    "Cannot find the expected number of StatsView tags in the converted XML! Expected: " + expectedStatsViewCount + " Actual: " + numberOfStatsViews);
            }

            string convertedXml = XlastUtil.ToXml(xlsp);

            if (string.IsNullOrEmpty(convertedXml))
            {
                throw new UnexpectedTestResultException("Empty or Null converted gameconfig XML!");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xlastutil.mobile\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.test.xlastutil.mobile_none_12.4.56.0_none_24eccc1cc20d093d
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.test.xlastutil.mobile
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f.cat
XP_PAYLOAD_PATH=msil_xonline.common.test.xlastutil.mobile_no-public-key_12.4.56.0_x-ww_6d7c421f
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.test.xlastutil.mobile,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\ElementTypeMappingDVT.cs ===
using System;
using System.Xml;
using System.Diagnostics;

using ServerTestFramework;
using xonline.common.xmlsequencer;
using xonline.common.diagnostics;

namespace xonline.common.test.xmlsequencer
{
	/// <summary>
	/// Summary description for ElementTypeMappingDVT.
	/// </summary>
	[TestGroup, DVT]
	public class ElementTypeMappingDVT : TestNode
	{
		[TestCase]
		public void CheckWithGoodTypes()
		{
			ElementTypeMapping myMap = new ElementTypeMapping();

			Console.WriteLine( "\t\tCheck start at 0 items");
			Assert.IsTrue(myMap.Count == 0);

			Console.WriteLine("\t\tCheck add actually adds an item");
			myMap.Add("item1", Type.GetType("xonline.common.xmlsequencer.Step"));
			Assert.IsTrue(myMap.Count == 1);
			
			Console.WriteLine("\t\tCheck that the indexer works");
			Assert.AreEqual(myMap["item1"], Type.GetType("xonline.common.xmlsequencer.Step"));

			Console.WriteLine("\t\tCheck that the value can be changed by the indexer");
			myMap["item1"] = Type.GetType("xonline.common.xmlsequencer.StepContainer");
			Assert.AreEqual(myMap["item1"], Type.GetType("xonline.common.xmlsequencer.StepContainer"));

			Console.WriteLine("\t\tVerify that the keys and values collections work");
			string[] keys = new string[1];
			myMap.Keys.CopyTo(keys, 0);
			Assert.AreEqual(keys[0], "item1");
			
			System.Type[] values = new System.Type[1];
			myMap.Values.CopyTo(values, 0);
			Assert.AreEqual(values[0], Type.GetType("xonline.common.xmlsequencer.StepContainer"));

			Console.WriteLine("\t\tVerify contains method");
			Assert.IsTrue(myMap.Contains("item1"));
			Assert.IsTrue(!myMap.Contains("notitem1"));

			Console.WriteLine("\t\tCheck that remove actually removes the item");
			myMap.Remove("item1");
			Assert.IsTrue(myMap.Count == 0);

		}

		[TestCase]
		public void CheckWithBadTypes()
		{
			ElementTypeMapping myMap = new ElementTypeMapping();

			// Since all type checking is handled by central OnValidate method,
			// we only need to test bad types against the Add method. All other
			// collection methods will check their types against the same code.

			Console.WriteLine("\t\tAdd with null values");
			try
			{
				myMap.Add(null, Type.GetType("xonline.common.xmlsequencer.Step"));
				throw new Exception("Expected exception ArgumentException was not thrown.");
			}
			catch (ArgumentException) {}

			try
			{
				myMap.Add("item1", null);
				throw new Exception("Expected exception ArgumentException was not thrown.");
			}
			catch (ArgumentException) {}

			Console.WriteLine("\t\tAdd with non-Step based type");
			try
			{
				myMap.Add("item1", myMap.GetType());
				throw new Exception("Expected exception ArgumentException was not thrown.");
			}
			catch (ArgumentException) {}
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\XmlSequencerSuite.cs ===
using System;
using System.Xml;
using System.Collections;

using ServerTestFramework;
using xonline.common.diagnostics;

using xonline.common.xmlsequencer;

namespace xonline.common.test.xmlsequencer
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\ConfigurationTransformDVT.cs ===
using System;
using System.IO;
using System.Xml;
using System.Text;

using ServerTestFramework;
using xonline.common.diagnostics;
using xonline.common.xmlsequencer;

namespace xonline.common.test.xmlsequencer
{
	/// <summary>
	/// Summary description for ConfigurationTransformDVT.
	/// </summary>
    [TestGroup, DVT]
    public class ConfigurationTransformDVT : TestNode
    {
        NameTable nt = null;
        XmlNamespaceManager namespaceManager = null;

        public ConfigurationTransformDVT()
        {
            nt = new NameTable();

            namespaceManager = new XmlNamespaceManager(nt);
            namespaceManager.AddNamespace("cfg", ConfigurationTransform.Namespace);
            namespaceManager.PushScope();
        }

        [TestCase]
        public void EmptyDocument()
        {
            XmlDocument xmlDoc = new XmlDocument(nt);
            xmlDoc.LoadXml("<root />");

            ConfigurationTransform ct = new ConfigurationTransform();

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual("<root />", xmlDoc.InnerXml);
        }

        [TestCase]
        public void DocumentWithNoTransform()
        {
            XmlDocument xmlDoc = new XmlDocument(nt);
            xmlDoc.LoadXml("<root><testNode /></root>");

            ConfigurationTransform ct = new ConfigurationTransform();

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual("<root><testNode /></root>", xmlDoc.InnerXml);        
        }

        [TestCase]
        public void SetAttributeNoNameAttribute()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteAttributeString("test", "oldValue");
            w.WriteStartElement("cfg", "setAttribute", ConfigurationTransform.Namespace);
            w.WriteString("New value");
            w.WriteEndElement(); //setAttribute
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            try
            {
                ct.TransformDocument(xmlDoc);
                throw new Exception("Expected InvalidOperationException not thrown.");
            }
            catch (InvalidOperationException) {}
        }

        [TestCase]
        public void SetAttributeForPresentAttribute()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteAttributeString("test", "oldValue");
            w.WriteStartElement("cfg", "setAttribute", ConfigurationTransform.Namespace);
            w.WriteAttributeString("name", "test");
            w.WriteString("New value");
            w.WriteEndElement(); //setAttribute
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual("New value", xmlDoc.SelectSingleNode("/root/testNode/@test").Value);
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);
        }

        [TestCase]
        public void SetAttributeForMissingAttribute()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "setAttribute", ConfigurationTransform.Namespace);
            w.WriteAttributeString("name", "test");
            w.WriteString("New value");
            w.WriteEndElement(); //setAttribute
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual("New value", xmlDoc.SelectSingleNode("/root/testNode/@test").Value);        
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);
        }

        [TestCase]
        public void SetAttributeSpecialCharacters()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "setAttribute", ConfigurationTransform.Namespace);
            w.WriteAttributeString("name", "test");
            w.WriteString("A \"quoted\" <value />");
            w.WriteEndElement(); //setAttribute
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual("A \"quoted\" <value />", xmlDoc.SelectSingleNode("/root/testNode/@test").Value);        
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);
        }

        [TestCase]
        public void SetAttributeWithChildElements()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "setAttribute", ConfigurationTransform.Namespace);
            w.WriteAttributeString("name", "test");
            w.WriteString("A ");
            w.WriteElementString("nested", "nested");
            w.WriteString(" value.");
            w.WriteEndElement(); //setAttribute
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual("A nested value.", xmlDoc.SelectSingleNode("/root/testNode/@test").Value);        
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);
        }

        [TestCase]
        public void NestedSetAttribute()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "setAttribute", ConfigurationTransform.Namespace);
            w.WriteAttributeString("name", "notest");
            w.WriteString("New value");
            w.WriteStartElement("cfg", "setAttribute", ConfigurationTransform.Namespace);
            w.WriteAttributeString("name", "name");
            w.WriteString("test");
            w.WriteEndElement(); //setAttribute
            w.WriteEndElement(); //setAttribute
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual("New value", xmlDoc.SelectSingleNode("/root/testNode/@test").Value);        
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);
        }

        [TestCase]
        public void SetAttributeEmptyValue()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "setAttribute", ConfigurationTransform.Namespace);
            w.WriteAttributeString("name", "test");
            w.WriteEndElement(); //setAttribute
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual("", xmlDoc.SelectSingleNode("/root/testNode/@test").Value);        
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);
        }

        [TestCase]
        public void InlineEnvironmentNoName()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "inline", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteEndElement(); // inline
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            try
            {
                ct.TransformDocument(xmlDoc);
                throw new Exception("Expected InvalidOperationException not thrown.");
            }
            catch (InvalidOperationException) {}
        }
        
        [TestCase]
        public void InlineEnvironmentNoType()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "inline", ConfigurationTransform.Namespace);
            w.WriteAttributeString("name", "path");
            w.WriteEndElement(); // inline
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            try
            {
                ct.TransformDocument(xmlDoc);
                throw new Exception("Expected InvalidOperationException not thrown.");
            }
            catch (InvalidOperationException) {}
        }
        
        [TestCase]
        public void InlineEnvironmentValidVariable()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "inline", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteAttributeString("name", "path");
            w.WriteEndElement(); // inline
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual(Environment.GetEnvironmentVariable("path"), xmlDoc.SelectSingleNode("/root/testNode").InnerText);        
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);

        }

        [TestCase]
        public void InlineEnvironmentUndefinedVariable()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "inline", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteAttributeString("name", "no_variable_would_be_called_this");
            w.WriteEndElement(); // inline
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            try
            {
                ct.TransformDocument(xmlDoc);
                throw new Exception("Expected ArgumentException not thrown.");
            }
            catch (ArgumentException) {}
        }

        [TestCase]
        public void InlineEnvironmentOverride()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "inline", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteAttributeString("name", "path");
            w.WriteEndElement(); // inline
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();
            ct.OverrideVariableCollection.Set("path", "overridden");

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual("overridden", xmlDoc.SelectSingleNode("/root/testNode").InnerText);        
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);
        }

        [TestCase]
        public void IncludeIfMatchesNoType()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("cfg", "includeIfMatches", ConfigurationTransform.Namespace);
            w.WriteAttributeString("name", "name");
            w.WriteAttributeString("pattern", "pattern");
            w.WriteEndElement(); // includeIfMatches
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            try
            {
                ct.TransformDocument(xmlDoc);
                throw new Exception("Expected InvalidOperationException not thrown.");
            }
            catch (InvalidOperationException) {}
        }            

        [TestCase]
        public void IncludeIfMatchesNoName()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("cfg", "includeIfMatches", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "type");
            w.WriteAttributeString("pattern", "pattern");
            w.WriteEndElement(); // includeIfMatches
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            try
            {
                ct.TransformDocument(xmlDoc);
                throw new Exception("Expected InvalidOperationException not thrown.");
            }
            catch (InvalidOperationException) {}
        }            

        [TestCase]
        public void IncludeIfMatchesNoPattern()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("cfg", "includeIfMatches", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "type");
            w.WriteAttributeString("name", "name");
            w.WriteEndElement(); // includeIfMatches
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();

            try
            {
                ct.TransformDocument(xmlDoc);
                throw new Exception("Expected InvalidOperationException not thrown.");
            }
            catch (InvalidOperationException) {}
        }            

        [TestCase]
        public void IncludeIfMatchesWithMatch()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "includeIfMatches", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteAttributeString("name", "test");
            w.WriteAttributeString("pattern", "the pattern");
            w.WriteStartElement("testNode2");
            w.WriteAttributeString("testAttribute", "present");
            w.WriteElementString("testNode3", "Text in the element");
            w.WriteEndElement(); //testNode2
            w.WriteEndElement(); // includeIfMatches
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();
            ct.OverrideVariableCollection.Set("test", "the pattern matches this");

            ct.TransformDocument(xmlDoc);
            Assert.AreEqual("present", ((XmlElement) xmlDoc.SelectSingleNode("/root/testNode/testNode2")).GetAttribute("testAttribute"));        
            Assert.AreEqual("Text in the element", xmlDoc.SelectSingleNode("/root/testNode/testNode2/testNode3").InnerText);        
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);
        }

        [TestCase]
        public void IncludeIfMatchesNoMatch()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            w.WriteStartElement("cfg", "includeIfMatches", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteAttributeString("name", "test");
            w.WriteAttributeString("pattern", "no pattern match");
            w.WriteStartElement("testNode2");
            w.WriteAttributeString("testAttribute", "present");
            w.WriteElementString("testNode3", "Text in the element");
            w.WriteEndElement(); //testNode2
            w.WriteEndElement(); // includeIfMatches
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();
            ct.OverrideVariableCollection.Set("test", "the pattern matches this");

            ct.TransformDocument(xmlDoc);
            Assert.IsTrue(xmlDoc.SelectSingleNode("/root/testNode/testNode2") == null);
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);
        }

        [TestCase]
        public void MultipleNestedConfigElements()
        {
            MemoryStream ms = new MemoryStream();

            XmlDocument xmlDoc = new XmlDocument(nt);
            XmlTextWriter w = new XmlTextWriter(ms, Encoding.UTF8);
            w.Namespaces = true;
            w.WriteStartElement("root");
            w.WriteStartElement("testNode");
            
            w.WriteStartElement("cfg", "includeIfMatches", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteAttributeString("name", "test");
            w.WriteAttributeString("pattern", "pattern match");
            w.WriteString("Some text");

            w.WriteStartElement("testNode2");
            w.WriteStartElement("cfg", "setAttribute", ConfigurationTransform.Namespace);
            w.WriteAttributeString("name", "testAttribute");

            w.WriteString("The value is ");

            w.WriteStartElement("cfg", "includeIfMatches", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteAttributeString("name", "valueTest");
            w.WriteAttributeString("pattern", "true");

            w.WriteStartElement("cfg", "inline", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteAttributeString("name", "goodMatch");

            w.WriteEndElement(); // inline
            w.WriteEndElement(); // includeIfMatches

            w.WriteStartElement("cfg", "includeIfMatches", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteAttributeString("name", "valueTest");
            w.WriteAttributeString("pattern", "false");

            w.WriteStartElement("cfg", "inline", ConfigurationTransform.Namespace);
            w.WriteAttributeString("type", "env");
            w.WriteAttributeString("name", "badMatch");

            w.WriteEndElement(); // inline
            w.WriteEndElement(); // includeIfMatches


            w.WriteString(".");
            w.WriteEndElement(); // setAttribute
            w.WriteEndElement(); // testNode2
            w.WriteEndElement(); // includeIfMatches
            w.WriteEndElement(); // testNode
            w.WriteEndElement(); // root
            w.Flush();

            ms.Position = 0;
            xmlDoc.Load(ms);

            ConfigurationTransform ct = new ConfigurationTransform();
            ct.OverrideVariableCollection.Set("test", "the pattern matches this");
            ct.OverrideVariableCollection.Set("valueTest", "true");
            ct.OverrideVariableCollection.Set("goodMatch", "good");
            ct.OverrideVariableCollection.Set("badMatch", "bad");

            ct.TransformDocument(xmlDoc);

            Assert.AreEqual("Some text", xmlDoc.SelectSingleNode("/root/testNode").InnerText);
            Assert.AreEqual("The value is good.", xmlDoc.SelectSingleNode("/root/testNode/testNode2/@testAttribute").Value);
            Assert.IsTrue(xmlDoc.SelectSingleNode("descendant::cfg:*", namespaceManager) == null);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.test.xmlsequencer_none_12.4.56.0_none_56baf513dfe5435f
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.test.xmlsequencer
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79.cat
XP_PAYLOAD_PATH=msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.test.xmlsequencer,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xrlobject\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\StepDVT.cs ===
using System;
using System.Xml;

using ServerTestFramework;
using xonline.common.diagnostics;
using xonline.common.xmlsequencer;

namespace xonline.common.test.xmlsequencer
{
	/// <summary>
	/// Summary description for StepDVT.
	/// </summary>
	[TestGroup, DVT]
	public class StepDVT : TestNode
	{
		[TestCase]
		public void Constructor_XmlElement_StepContainer()
		{
			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.LoadXml("<stepRoot xmlns=\"http://www.xbox.com/xmlsequencer.xsd\" />");

			RootStepContainer root = new RootStepContainer(xmlDoc.DocumentElement);

			Console.WriteLine( "\t\tTry valid parameters");
			Step myStep = new Step(xmlDoc.DocumentElement, root);
			Assert.IsTrue(root == myStep.Parent);

			Console.WriteLine( "\t\tTry null XML");
			try
			{
				myStep = new Step(null, new RootStepContainer(xmlDoc.DocumentElement));
				throw new Exception("Expected ArgumentNullException not thrown from Step constructor.");
			}
			catch(ArgumentNullException)
			{
			}

			Console.WriteLine( "\t\tTry null parent");
			try
			{
				myStep = new Step(xmlDoc.DocumentElement, null);
				throw new Exception("Expected ArgumentNullException not thrown from Step constructor.");
			}
			catch(ArgumentNullException)
			{
			}
		}

		[TestCase]
		public void RootProperty()
		{
			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.LoadXml("<aNode xmlns=\"http://www.xbox.com/xmlsequencer.xsd\" />");

			RootStepContainer root = new RootStepContainer(xmlDoc.DocumentElement);
			StepContainer container = new StepContainer(xmlDoc.DocumentElement, root);
			Step step = new Step(xmlDoc.DocumentElement, container);

			Assert.IsTrue(root.Root == root, "Root container does not point to itself.");
			Assert.IsTrue(container.Root == root, "Container's root does not point to root");
			Assert.IsTrue(step.Root == root, "Step's root does not point to root.");
		}

		[TestCase]
		public void Execute_MessageLogging()
		{
			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.LoadXml("<aNode xmlns=\"http://www.xbox.com/xmlsequencer.xsd\" />");
			
			XmlElement stepElement = xmlDoc.CreateElement("step");
			stepElement.SetAttribute("message", "Test of message logging");
			xmlDoc.DocumentElement.AppendChild(stepElement);

			InMemoryMessageLog log = new InMemoryMessageLog();
			RootStepContainer root = new RootStepContainer(xmlDoc.DocumentElement);
			Step step = new Step(stepElement, root);

			log.StartListening(root);
			step.Execute();
			log.StopListening();

			Assert.AreEqual("Test of message logging", log.Messages[0]);
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\RootStepContainerDVT.cs ===
using System;
using System.Xml;
using System.Collections;

using ServerTestFramework;
using xonline.common.diagnostics;
using xonline.common.xmlsequencer;

namespace xonline.common.test.xmlsequencer
{
	/// <summary>
	/// Summary description for RootStepContainerDVT.
	/// </summary>
	[TestGroup, DVT]
	public class RootStepContainerDVT : TestNode
	{
		[TestCase]
		public void MessageLogging()
		{
			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.LoadXml("<rootStepContainer xmlns=\"http://www.xbox.com/xmlsequencer.xsd\" />");
			InMemoryMessageLog log = new InMemoryMessageLog();

			RootStepContainer myRoot = new RootStepContainer(xmlDoc.DocumentElement);
			log.StartListening(myRoot);

			Console.WriteLine("\t\tLog message with a test string");
			myRoot.LogMessage("My message");
			Assert.AreEqual("My message", (string) log.Messages[0]);
	
			Console.WriteLine("\t\tLog message with a null message");
			log.Messages.Clear();
			myRoot.LogMessage(null);
			Assert.AreEqual("", (string) log.Messages[0]);

			log.StopListening();
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\title\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.test.xmlsequencer_none_12.4.56.0_none_56baf513dfe5435f
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.test.xmlsequencer
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79.cat
XP_PAYLOAD_PATH=msil_xonline.common.test.xmlsequencer_no-public-key_12.4.56.0_x-ww_321a8d79
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.test.xmlsequencer,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xrlobject\XrlObjectDevTest.cs ===
using System;
using ServerTestFramework;
using xonline.common.diagnostics;
using xonline.common.service;

namespace xonline.common.test
{
    
    [TestGroup]
    public class XrlObjectDevTest : TestNode
    {
        
        class OneUlong : XRLObject2
        {
            public ulong ul = 0;
        }
        
        class TwoUlongs : XRLObject2
        {
            public ulong ul1 = 0;
            public ulong ul2 = 0;
        }
            
        
        
        [TestCase]
        public void Neg_Read_BufferTooSmall()
        {
            OneUlong writeOb = new OneUlong();
            TwoUlongs readOb = new TwoUlongs();
            byte[] buf;
            
            writeOb.ul = 1;
            buf = writeOb.GetBytes();
            
            try
            {
                readOb.SetBytes(buf);
                
                throw new Exception("Expected exception not thrown!");
            }
            catch(XRLException e)
            {
                Assert.AreEqual(e.HResult, HResult.E_INVALIDARG);
                Assert.AreEqual(e.EventId, XEvent.Id.COMMON_HACK_80);
            }
        }
        
    
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\title\TitleVersion.cs ===
using System;

using xonline.common.protocol;


namespace xonline.common.title
{

    public class TitleVersion
    {
        public uint TitleID;
        public int Base;
        public int Update;
        public int Beta;
        public ConsoleTypeEnum ConsoleType;


        public TitleVersion()
        {
        }

        public TitleVersion( uint titleID, int baseVersion, int updateVersion, int betaVersion, ConsoleTypeEnum consoleType )
        {
            TitleID = titleID;
            Base = baseVersion;
            Update = updateVersion;
            Beta = betaVersion;
            ConsoleType = consoleType;
        }

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\tools\dll\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\title\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__title_4_none_12.4.56.0_none_49c26b6004b093d8
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_title_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044.manifest
XP_MANIFEST_PATH=manifests\x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044.cat
XP_CATALOG_PATH=manifests\x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044.cat
XP_PAYLOAD_PATH=x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_title_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\title\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__title_4_none_12.4.56.0_none_49c26b6004b093d8
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_title_4
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044.manifest
XP_MANIFEST_PATH=manifests\x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044.cat
XP_CATALOG_PATH=manifests\x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044.cat
XP_PAYLOAD_PATH=x86__title_4_no-public-key_12.4.56.0_x-ww_ffa3a044
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_title_4,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\test\xmlsequencer\StepContainerDVT.cs ===
using System;
using System.Xml;

using ServerTestFramework;
using xonline.common.diagnostics;
using xonline.common.xmlsequencer;

namespace xonline.common.test.xmlsequencer
{
	/// <summary>
	/// Summary description for StepContainerDVT.
	/// </summary>
	[TestGroup, DVT]
	public class StepContainerDVT : TestNode
	{
		[TestCase]
		public void Execute_NoChildren()
		{
			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.LoadXml("<rootStepContainer message=\"root\" xmlns=\"http://www.xbox.com/xmlsequencer.xsd\" />");

			RootStepContainer root = new RootStepContainer(xmlDoc.DocumentElement);
			InMemoryMessageLog log = new InMemoryMessageLog();

			log.StartListening(root);
			root.Execute();
			log.StopListening();

			Assert.AreEqual(1, log.Messages.Count);
			Assert.AreEqual("root", log.Messages[0]);
		}

		[TestCase]
		public void Execute_OneChild()
		{
			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.LoadXml("<rootStepContainer message=\"root\" xmlns=\"http://www.xbox.com/xmlsequencer.xsd\"><step message=\"step1\" /></rootStepContainer>");

			RootStepContainer root = new RootStepContainer(xmlDoc.DocumentElement);
			root.TypeMap["step"] = Type.GetType("xonline.common.xmlsequencer.Step");

			InMemoryMessageLog log = new InMemoryMessageLog();

			log.StartListening(root);
			root.Execute();
			log.StopListening();

			Assert.AreEqual(2, log.Messages.Count);
			Assert.AreEqual("root", log.Messages[0]);
			Assert.AreEqual("step1", log.Messages[1]);
		}

		[TestCase]
		public void Execute_NestedChildren()
		{
			string xml = "";
			xml += "<rootStepContainer message=\"root\" xmlns=\"http://www.xbox.com/xmlsequencer.xsd\" >";
			xml += "	<stepContainer message=\"sc1\" >";
			xml += "		<step message=\"step1\" />";
			xml += "		<step message=\"step2\" />";
			xml += "		<stepContainer message=\"sc2\" >";
			xml += "			<!-- comment -->";
			xml += "			<step message=\"step3\" >text</step>";
			xml += "		</stepContainer>";
			xml += "		<step message=\"step4\" />";
			xml += "	</stepContainer>";
			xml += "	<step message=\"step5\" />";
			xml += "	<stepContainer message=\"sc3\" />";
			xml += "</rootStepContainer>";

			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.LoadXml(xml);

			RootStepContainer root = new RootStepContainer(xmlDoc.DocumentElement);
			root.TypeMap["step"] = Type.GetType("xonline.common.xmlsequencer.Step");
			root.TypeMap["stepContainer"] = Type.GetType("xonline.common.xmlsequencer.StepContainer");

			InMemoryMessageLog log = new InMemoryMessageLog();

			log.StartListening(root);
			root.Execute();
			log.StopListening();

			Assert.AreEqual(9, log.Messages.Count);
			Assert.AreEqual("root", log.Messages[0]);
			Assert.AreEqual("sc1", log.Messages[1]);
			Assert.AreEqual("step1", log.Messages[2]);
			Assert.AreEqual("step2", log.Messages[3]);
			Assert.AreEqual("sc2", log.Messages[4]);
			Assert.AreEqual("step3", log.Messages[5]);
			Assert.AreEqual("step4", log.Messages[6]);
			Assert.AreEqual("step5", log.Messages[7]);
			Assert.AreEqual("sc3", log.Messages[8]);
		}

		[TestCase]
		public void Execute_UnmappedElememt()
		{
			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.LoadXml("<rootStepContainer message=\"root\" xmlns=\"http://www.xbox.com/xmlsequencer.xsd\"><step message=\"step1\" /></rootStepContainer>");

			RootStepContainer root = new RootStepContainer(xmlDoc.DocumentElement);

			try
			{
				root.Execute();
				throw new Exception("Expected InvalidOperationException was not thrown");
			}
			catch (InvalidOperationException)
			{
			}
		}

        [TestCase]
        public void Execute_IgnoreExternalNamespaces()
        {
            string xml = "";
            xml += "<rootStepContainer xmlns=\"http://www.xbox.com/xmlsequencer.xsd\" message=\"root\" >";
            xml += "	<stepContainer message=\"sc1\" >";
            xml += "		<step message=\"step1\" />";
            xml += "		<step message=\"step2\" />";
            xml += "		<stepContainer message=\"sc2\" >";
            xml += "			<!-- comment -->";
            xml += "			<step message=\"step3\" >text</step>";
            xml += "            <notsr:stuff message=\"should not get logged\" xmlns:notsr=\"http://other.namespace\" />";
            xml += "		</stepContainer>";
            xml += "		<step message=\"step4\" />";
            xml += "	</stepContainer>";
            xml += "	<step message=\"step5\" />";
            xml += "	<stepContainer message=\"sc3\" />";
            xml += "</rootStepContainer>";

            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.LoadXml(xml);

            RootStepContainer root = new RootStepContainer(xmlDoc.DocumentElement);
            root.TypeMap["step"] = Type.GetType("xonline.common.xmlsequencer.Step");
            root.TypeMap["stepContainer"] = Type.GetType("xonline.common.xmlsequencer.StepContainer");

            InMemoryMessageLog log = new InMemoryMessageLog();

            log.StartListening(root);
            root.Execute();
            log.StopListening();

            Assert.AreEqual(9, log.Messages.Count);
            Assert.AreEqual("root", log.Messages[0]);
            Assert.AreEqual("sc1", log.Messages[1]);
            Assert.AreEqual("step1", log.Messages[2]);
            Assert.AreEqual("step2", log.Messages[3]);
            Assert.AreEqual("sc2", log.Messages[4]);
            Assert.AreEqual("step3", log.Messages[5]);
            Assert.AreEqual("step4", log.Messages[6]);
            Assert.AreEqual("step5", log.Messages[7]);
            Assert.AreEqual("sc3", log.Messages[8]);
    
        }

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\tools\dll\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\tools\dll\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\tools\dll\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_tools_none_12.4.56.0_none_f2ffcd927ae25598
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_tools_no-public-key_12.4.56.0_x-ww_7ee24bde
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=tools
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_tools_no-public-key_12.4.56.0_x-ww_7ee24bde
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_tools_no-public-key_12.4.56.0_x-ww_7ee24bde.manifest
XP_MANIFEST_PATH=manifests\msil_tools_no-public-key_12.4.56.0_x-ww_7ee24bde.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_tools_no-public-key_12.4.56.0_x-ww_7ee24bde.cat
XP_CATALOG_PATH=manifests\msil_tools_no-public-key_12.4.56.0_x-ww_7ee24bde.cat
XP_PAYLOAD_PATH=msil_tools_no-public-key_12.4.56.0_x-ww_7ee24bde
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=tools,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\title\Title.cs ===
using System;
using System.Diagnostics;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Globalization;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.livetitleconfig;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.common.tools;
using xonline.common.tools.stutilcore;
using xonline.common.xboxutil;
using xonline.common.xlastutil;





[assembly: XomAreaDefinition(XomAreaName.title)]

namespace xonline.common.title
{


    /// <summary>
    /// This object is intended to encompass administrative tasks necessary for managing titles in the service.
    /// </summary>
    public class Title
    {

        public const string UNKNOWN_TITLE = "NoNameTitle";
        public static bool useTransactions = false;

        public static void AddTitleFeatureData(uint titleID, string titleName, ProductInformation pi, StringLibrary strLib, ref StringBuilder procInfo)
        {
            if (pi == null)
                return;

            Hashtable bitflags = new Hashtable(30);

            bitflags.Add("camera",                false);  //  <param required="yes" description="support camera?"/>
            bitflags.Add("coOp",                  false);  //  <param required="yes" description="support coop?"/>
            bitflags.Add("customSoundtrack",      false);  //  <param required="yes" description="support custom soundtracks?"/>
            bitflags.Add("dolby51",               false);  //  <param required="yes" description="support dolby 5.1?"/>
            bitflags.Add("hardDriveEnhanced",     false);  //  <param required="yes" description="hard drive enhanced?"/>
            bitflags.Add("hardDriveRequired",     false);  //  <param required="yes" description="hard drive required?"/>
            bitflags.Add("liveAware",             false);  //  <param required="yes" description="support xbox live?"/>
            bitflags.Add("liveCoOp",              false);  //  <param required="yes" description="support xbox live coop play?"/>
            bitflags.Add("liveClans",             false);  //  <param required="yes" description="support xbox live clans?"/>
            bitflags.Add("liveDownloads",         false);  //  <param required="yes" description="has live downloads?"/>
            bitflags.Add("liveFriends",           false);  //  <param required="yes" description="support live friends?"/>
            bitflags.Add("liveMessaging",         false);  //  <param required="yes" description="support live messaging?"/>
            bitflags.Add("liveMultiplayer",       false);  //  <param required="yes" description="support live multiplayer?"/>
            bitflags.Add("liveScoreboard",        false);  //  <param required="yes" description="support live scoreboard?"/>
            bitflags.Add("liveServiceProxy",      false);  //  <param required="yes" description="uses a live service proxy?"/>
            bitflags.Add("liveStats",             false);  //  <param required="yes" description="support live stats?"/>
            bitflags.Add("liveTournaments",       false);  //  <param required="yes" description="support live tournaments?"/>
            bitflags.Add("liveVoice",             false);  //  <param required="yes" description="support live voice?"/>
            bitflags.Add("liveVoiceMessaging",    false);  //  <param required="yes" description="support live voice messaging?"/>
            bitflags.Add("memoryUnit",            false);  //  <param required="yes" description="support memory unit?"/>
            bitflags.Add("multiplayerVersus",     false);  //  <param required="yes" description="support multiplayer versus?"/>
            bitflags.Add("peripherals",           false);  //  <param required="yes" description="support special peripherals?"/>
            bitflags.Add("systemLink",            false);  //  <param required="yes" description="support systemlink?"/>
            bitflags.Add("premiumOffers",         false);  //  <param required="yes" description="has premium offers?"/>
            bitflags.Add("userCreatableContent",  false);  //  <param required="yes" description="support user creatable content?"/>
            bitflags.Add("xboxSupport",           false);  //  <param required="yes" description="support xbox?"/>
            bitflags.Add("xbox2Support",          false);  //  <param required="yes" description="support xbox 2?"/>


            if (pi.Feature != null)
            {
                foreach (Feature x in pi.Feature)
                {
                    if (bitflags[x.name] != null)
                    {
                        bitflags[x.name] = true;
                    }
                    else
                    {
                        // Hmmm, not good, the feature name doesn't match anything we know
                    }
                }
            }


            // insert title
            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
            string webstoreApplicationName = viInfo.WebstoreApp;

            ArrayList paramlist = new ArrayList();
            SqlParameter sp = null;

            //for the UODB call
            sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
            sp.Value = (int) titleID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@vc_name", SqlDbType.NVarChar, 255);
            sp.Value = (string) titleName;
            paramlist.Add( sp );

            sp = new SqlParameter( "@playersOffline", SqlDbType.Int );
            sp.Value = (int) pi.offlinePlayersMax;
            paramlist.Add( sp );

            sp = new SqlParameter( "@playersSystemLink", SqlDbType.Int );
            sp.Value = (int) pi.systemLinkPlayersMax;
            paramlist.Add( sp );

            sp = new SqlParameter( "@playersLive", SqlDbType.Int );
            sp.Value =  (int)pi.livePlayersMax;
            paramlist.Add( sp );

            foreach (DictionaryEntry x in bitflags)
            {
                sp = new SqlParameter( "@" + x.Key, SqlDbType.Bit );
                sp.Value =(bool) x.Value;
                paramlist.Add( sp );
            }

            ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, "dbo.p_svc_insert_title_features", ref procInfo );


        } // AddTitleFeatureData


        //by special request from the reporting team, we need to add this for Xbox titles as well
        public static void AddTitleFeatureData(uint titleID, XboxConfiguration xboxConfig, ref StringBuilder procInfo)
        {

            Hashtable bitflags = new Hashtable(30);

            bitflags.Add("camera",                false);  //  <param required="yes" description="support camera?"/>
            bitflags.Add("coOp",                  false);  //  <param required="yes" description="support coop?"/>
            bitflags.Add("customSoundtrack",      false);  //  <param required="yes" description="support custom soundtracks?"/>
            bitflags.Add("dolby51",               false);  //  <param required="yes" description="support dolby 5.1?"/>
            bitflags.Add("hardDriveEnhanced",     false);  //  <param required="yes" description="hard drive enhanced?"/>
            bitflags.Add("hardDriveRequired",     false);  //  <param required="yes" description="hard drive required?"/>
            bitflags.Add("liveAware",             false);  //  <param required="yes" description="support xbox live?"/>
            bitflags.Add("liveCoOp",              false);  //  <param required="yes" description="support xbox live coop play?"/>
            bitflags.Add("liveClans",             false);  //  <param required="yes" description="support xbox live clans?"/>
            bitflags.Add("liveDownloads",         false);  //  <param required="yes" description="has live downloads?"/>
            bitflags.Add("liveFriends",           false);  //  <param required="yes" description="support live friends?"/>
            bitflags.Add("liveMessaging",         false);  //  <param required="yes" description="support live messaging?"/>
            bitflags.Add("liveMultiplayer",       false);  //  <param required="yes" description="support live multiplayer?"/>
            bitflags.Add("liveScoreboard",        false);  //  <param required="yes" description="support live scoreboard?"/>
            bitflags.Add("liveServiceProxy",      false);  //  <param required="yes" description="uses a live service proxy?"/>
            bitflags.Add("liveStats",             false);  //  <param required="yes" description="support live stats?"/>
            bitflags.Add("liveTournaments",       false);  //  <param required="yes" description="support live tournaments?"/>
            bitflags.Add("liveVoice",             false);  //  <param required="yes" description="support live voice?"/>
            bitflags.Add("liveVoiceMessaging",    false);  //  <param required="yes" description="support live voice messaging?"/>
            bitflags.Add("memoryUnit",            false);  //  <param required="yes" description="support memory unit?"/>
            bitflags.Add("multiplayerVersus",     false);  //  <param required="yes" description="support multiplayer versus?"/>
            bitflags.Add("peripherals",           false);  //  <param required="yes" description="support special peripherals?"/>
            bitflags.Add("systemLink",            false);  //  <param required="yes" description="support systemlink?"/>
            bitflags.Add("premiumOffers",         false);  //  <param required="yes" description="has premium offers?"/>
            bitflags.Add("userCreatableContent",  false);  //  <param required="yes" description="support user creatable content?"/>
            bitflags.Add("xboxSupport",           true);   //  <param required="yes" description="support xbox?"/>
            bitflags.Add("xbox2Support",          false);  //  <param required="yes" description="support xbox 2?"/>

            string enUSTitleName = UNKNOWN_TITLE;
            int iLoop = 0;
            bool flag = false;


            //task: remove this after xboxchecker is completed.
            if ( xboxConfig.LocalizedStrings.Length < 1 )
            {
                throw new Exception( "Xbox configuration does not have localized strings configured." );
            }

            XboxConfigurationLocalizedString ls = XboxUtil.GetTitleNameLocalizedString( xboxConfig );

            while( !flag && ( iLoop < ls.Translation.Length ) )
            {
                //XboxConfigurationLocalizedStringTranslation t in xboxCfg.LocalizedStrings.Translation
                // XboxConfigurationLocalizedStringTranslation
                string locale = ls.Translation[ iLoop ].locale;

                if ( locale == "en-US" )
                {
                    flag = true;
                    enUSTitleName = ls.Translation[ iLoop ].Value;
                }

                iLoop++;
            }

            //task: remove this after xboxchecker is completed.
            if ( !flag )  // means that enUSTitleName == UNKNOWN_TITLE
            {
                throw new Exception( "Xbox configuration does not have required en-US title name." );
            }

            // insert title
            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
            string webstoreApplicationName = viInfo.WebstoreApp;

            ArrayList paramlist = new ArrayList();
            SqlParameter sp = null;

            //for the UODB call
            sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
            sp.Value = (int) titleID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@vc_name", SqlDbType.NVarChar, 255);
            sp.Value = (string) enUSTitleName;
            paramlist.Add( sp );

            sp = new SqlParameter( "@playersOffline", SqlDbType.Int );
            sp.Value = 0;
            paramlist.Add( sp );

            sp = new SqlParameter( "@playersSystemLink", SqlDbType.Int );
            sp.Value = 0;
            paramlist.Add( sp );

            sp = new SqlParameter( "@playersLive", SqlDbType.Int );
            sp.Value =  0;
            paramlist.Add( sp );

            foreach (DictionaryEntry x in bitflags)
            {
                sp = new SqlParameter( "@" + x.Key, SqlDbType.Bit );
                sp.Value =(bool) x.Value;
                paramlist.Add( sp );
            }

            ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, "dbo.p_svc_insert_title_features", ref procInfo );


        } // AddTitleFeatureData



        public static void AddTitleCultureDetails(uint titleID, ProductInformation pi, StringLibrary strLib, ref StringBuilder procInfo )
        {
            if (pi == null)
                return;


            System.UInt16  titleNameId = 32768;

            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
            string webstoreApplicationName = viInfo.WebstoreApp;

            //-----------------------------------------------------------------
            // This is fairly elaborate: the cultures member of StringLibrary has
            // been constructed as HashTable of ArrayLists  The top level HashTable
            // is keyed by language ID and the corresponding value is an ArrayList.
            // These ArrayLists contain the culture IDs that use the language
            // designated by the key value.
            //
            // The loop below uses this to first pull the translated text for a
            // particular language (outer loop) and then create a
            // t_title_culture_details record for each culture that uses that
            // language (inner loop).
            //
            foreach(DictionaryEntry x in strLib.cultures)
            {
                int languageID = (int)x.Key;

                string titleName = "";
                string sellText = "";
                string publisher = "";
                string developer = "";
                string genre = "";

                if(strLib.Exists(titleNameId, languageID))
                    titleName   = strLib.GetString(titleNameId, languageID);
                if(strLib.Exists(pi.sellTextStringId, languageID))
                    sellText   = strLib.GetString(pi.sellTextStringId, languageID);
                if(strLib.Exists(pi.publisherStringId, languageID))
                    publisher  = strLib.GetString(pi.publisherStringId, languageID);
                if(strLib.Exists(pi.developerStringId, languageID))
                    developer  = strLib.GetString(pi.developerStringId, languageID);
                if(strLib.Exists(pi.genreTextStringId, languageID))
                    genre      = strLib.GetString(pi.genreTextStringId, languageID);

                ArrayList y    = (ArrayList)x.Value;

                foreach (int cultureID in y)
                {
                    ArrayList paramlist = new ArrayList();
                    SqlParameter sp = null;

                    // write to UODB
                    sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
                    sp.Value = (int) titleID;
                    paramlist.Add( sp );

                    sp = new SqlParameter( "@i_culture_id", SqlDbType.Int );
                    sp.Value = (int) cultureID;
                    paramlist.Add( sp );

                    sp = new SqlParameter( "@vc_name", SqlDbType.NVarChar, 100);
                    sp.Value = titleName;
                    paramlist.Add( sp );

                    sp = new SqlParameter( "@vc_sell_text", SqlDbType.NVarChar, 1000);
                    sp.Value = sellText;
                    paramlist.Add( sp );

                    sp = new SqlParameter( "@vc_publisher", SqlDbType.NVarChar, 60);
                    sp.Value = publisher;
                    paramlist.Add( sp );

                    sp = new SqlParameter( "@vc_developer", SqlDbType.NVarChar, 60);
                    sp.Value = developer;
                    paramlist.Add( sp );

                    sp = new SqlParameter( "@vc_genre", SqlDbType.NVarChar, 60);
                    sp.Value = (string) genre;
                    paramlist.Add( sp );

                    ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, "dbo.p_svc_insert_title_culture_details", ref procInfo );

                }
            }
        } // AddTitleFeatureData





        public static void AddTitleHdtvData(uint titleID, ProductInformation pi, ref StringBuilder procInfo )
        {
            if (pi == null || pi.HdtvMode == null)
                return;

            foreach (HdtvMode x in pi.HdtvMode)
            {
                // write to UODB
                IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
                string webstoreApplicationName = viInfo.WebstoreApp;

                ArrayList paramlist = new ArrayList();
                SqlParameter sp = null;

                //for the UODB call
                sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
                sp.Value = (int) titleID;
                paramlist.Add( sp );

                sp = new SqlParameter( "@i_HDTVsystem_id", SqlDbType.Int);
                sp.Value = (int) x.hdtvSystemId;
                paramlist.Add( sp );

                sp = new SqlParameter( "@i_HDTVmode_id", SqlDbType.Int );
                sp.Value = (int) x.hdtvId;
                paramlist.Add( sp );

                ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, "dbo.p_svc_insert_title_hdtv_mode", ref procInfo );


            }


        } // AddTitleHdtvData





        public static void AddTitleRatingData(uint titleID, ProductInformation pi, ref StringBuilder procInfo )
        {
            //  42841 - If no ratings defined for this title, insert ESRB RP.
            if (pi == null)
            {
                pi = new ProductInformation();
            }

            if(pi.Rating == null || pi.Rating.Length == 0)
            {
                pi.Rating = new Rating[1];
                pi.Rating[0] = new Rating();
                pi.Rating[0].ratingSystemId = 0;
                pi.Rating[0].ratingSystemIdSpecified = true;
                pi.Rating[0].ratingId = 7;
                pi.Rating[0].ratingIdSpecified = true;
            }

            foreach (Rating x in pi.Rating)
            {
                // write to UODB
                IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
                string webstoreApplicationName = viInfo.WebstoreApp;

                ArrayList paramlist = new ArrayList();
                SqlParameter sp = null;

                //for the UODB call
                sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
                sp.Value = (int) titleID;
                paramlist.Add( sp );

                sp = new SqlParameter( "@i_rating_system_id", SqlDbType.Int);
                sp.Value = (int) x.ratingSystemId;
                paramlist.Add( sp );

                sp = new SqlParameter( "@i_rating_id", SqlDbType.Int );
                sp.Value = (int) x.ratingId;
                paramlist.Add( sp );

                ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, "dbo.p_svc_insert_title_rating", ref procInfo );

            }
        } // AddTitleRatingData





        public static void AddTitleGenreData(uint titleID, ProductInformation pi, ref StringBuilder procInfo )
        {
            ArrayList paramlist = null;
            SqlParameter sp = null;

            if (pi == null)  // $REVIEW (michion): Without a ProductInformation node, there's really nothing
                return;      // we can do... so should we remove call p_svc_clear_title_genres?  Or is it
                             // really an invalid case when pi is null?

            // N.B.
            // Unlike other p_svc_insert_title_* sprocs, p_svc_insert_title_genre does not UPDATE existing
            // records in t_title_genres if they exist for the title ID.  This is because the records in
            // this table are chained together by a parent-child relationship established by the genre ID
            // (which makes it impractical to try to update a chain when a genre ID changes because the
            // chain for the new genre will likely be different than the original one).  Accordingly, it
            // is necessary to use a separate sproc (p_svc_cleare_title_genres) to remove all records based
            // on their title ID before insert new/updated ones.


            // Get UODB connection info
            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
            string webstoreApplicationName = viInfo.WebstoreApp;


            // Wipe existing title genre info in UODB
            paramlist = new ArrayList();
            sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
            sp.Value = (int) titleID;
            paramlist.Add( sp );
            ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, "dbo.p_svc_clear_title_genres", ref procInfo );

            //---------------------------------------------------------------------
            // Now create record(s) for the genre's found in the ProductInformation
            // NOTE: There's a corner case where NO genre's are specified, in which
            // case the pi.Genre collection won't exist (will be null instead of
            // being empty) so we must protect the loop below.
            //
            if (pi.Genre != null)
            {
                foreach (Genre x in pi.Genre)
                {
                    paramlist = new ArrayList();

                    //for the UODB call
                    sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
                    sp.Value = (int) titleID;
                    paramlist.Add( sp );

                    sp = new SqlParameter( "@i_genre_id", SqlDbType.Int );
                    sp.Value = (int) x.genreId;
                    paramlist.Add( sp );
                    ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, "dbo.p_svc_insert_title_genre", ref procInfo );

                }
            }
        } // AddTitleGenreData



        //you CreateNew(  ) to create a new title
        //if you want all the info about it, then call Title LoadTitle(titleid)
        //there'll be other methods:
        //  ChangeBounty
        //  ChangeName
        //  CompleteDeletion (config constrains this to certain env??) ... ;-)

        private Title()
        {
            //task: give properties default values

        }


        #region Title Creating Methods

        //public static void CreateNewXboxTitle( uint titleID, int initialVer, int ratingSystem, int ratingID, int esrb, bool bounty, string name, string locale )
        public static void CreateNewXboxTitle( XboxConfiguration xboxCfg, LiveTitleConfig ltc, int baseVersion, ref StringBuilder processingInfo )
        {
            uint titleID;

            //
            //  Don't allow base version 0 in production environments
            //

            if(baseVersion == 0 && !Config.GetBoolSetting(Setting.livetitle_allowBaseVersionZero))
            {
                throw new ArgumentException("Base version 0 is not allowed in production environments.  Use the /version command line parameter to specify a non-zero version number.");
            }

            //titleID could be hex, or integer
            if ( xboxCfg.GameConfig.titleId.Substring(0,2).ToLower() == "0x" )
            {
                titleID = Convert.ToUInt32(xboxCfg.GameConfig.titleId,16);
            }
            else
            {
                titleID = (UInt32) Convert.ToInt32(xboxCfg.GameConfig.titleId);
            }

            // UODB & PCDB
            CreateNewXboxTitleUODBandPCDB( titleID, xboxCfg, ltc, baseVersion, ref processingInfo );

            // NPDB
            processingInfo.Length = 0;
            processingInfo.Append( "Begin NPDBStrings. " );
            NPDBCreateTitleStrings(xboxCfg, ref processingInfo);

            // WEBDB
            processingInfo.Length = 0;
            processingInfo.Append( "Begin WEBDB Title configuration. " );
            CreateNewTitleWebDB(
                xboxCfg,
                ref processingInfo );

            if ( processingInfo.Length > 500 )
            {
               int len = processingInfo.Length;
               int strPtr = 0;
               while ( strPtr < len )
               {
                    strPtr += 500;
                }
            }
        }

        //task: add stringbuilder to get detailed log info...
        public static void CreateNew(
            XboxLiveSubmissionProject xlsp,
            LiveTitleConfig ltc,
            string filepath,
            bool processImages,
            int baseVersion,
            ref StringBuilder processingInfo )
        {
            LocalizedStrings    strings;
            string              titleName;
            uint                titleID;

            if ( xlsp == null )
            {
                throw new ArgumentException("XboxLiveSubmissionProject passed to Title.CreateNew() was null" );
            }

            // Are we creating a game title or a marketplace only title?
            if (xlsp.GameConfigProject != null)
            {
                strings = xlsp.GameConfigProject.LocalizedStrings;
                titleName = xlsp.GameConfigProject.titleName;
                titleID = UInt32.Parse( xlsp.GameConfigProject.titleId.Substring(2), NumberStyles.HexNumber);

                //
                //  Don't allow base version 0 in production environments
                //

                if(baseVersion == 0 && !Config.GetBoolSetting(Setting.livetitle_allowBaseVersionZero))
                {
                    throw new ArgumentException("Base version 0 is not allowed in production environments.  Use the /version command line parameter to specify a non-zero version number.");
                }

            }
            else if (xlsp.MarketplaceConfigProject != null)
            {
                strings = xlsp.MarketplaceConfigProject.LocalizedStrings;
                titleName = xlsp.MarketplaceConfigProject.titleName;
                titleID = UInt32.Parse( xlsp.MarketplaceConfigProject.titleId.Substring(2), NumberStyles.HexNumber);
            }
            else
            {
                throw new ApplicationException("Invalid XboxLiveSubmissionProject passed to Title.CreateNew()");
            }

            if ( titleName == "" )
            {
                throw new ArgumentException("Title name must be valid." );
            }

            if ( strings == null )
            {
                throw new ArgumentException("LocalizedStrings element not found in the Title configuration passed to Title.CreateNew()" );
            }

            if (!CreateNewTitleUODBandPCDB( titleID, xlsp, ltc, filepath, processImages, baseVersion, ref processingInfo ))
            {
                throw new Exception("CreateNewTitleUODBandPCDB failed: " + processingInfo.ToString() );
            }

            processingInfo.Length = 0;
            processingInfo.Append( "Begin NPDBStrings. " );

            if (!NPDBCreateTitleStrings( titleID, strings, ref processingInfo ))
            {
                throw new Exception("NPDBCreateTitleStrings failed: " + processingInfo.ToString() );
            }

            if (!CreateNewTitleWebDB( titleID, strings, ref processingInfo ))
            {
                throw new Exception("CreateNewTitleWebDB failed: " + processingInfo.ToString() );
            }

            if ( processingInfo.Length > 500 )
            {
                int len = processingInfo.Length;
                int strPtr = 0;
                while ( strPtr < len )
                {
                    strPtr += 500;
                }
            }

        } // CreateNew




        //Note: This code treats PCDB almost like an additional partition of UODB for the purpose of title data
        //      This is because Marketplace, Xbox.Com and Reporting all rely on PCDB accurately reflecting
        //      the title / offer data populated in UODB.
        public static bool CreateNewTitleUODBandPCDB(
            uint titleID,
            XboxLiveSubmissionProject xlsp,
            LiveTitleConfig ltc,
            string filepath,
            bool processImages,
            int baseVersion,
            ref StringBuilder procInfo )
        {

            bool                returnValue = true;
            ImageLibrary        imgLib = null;
            ConsoleTypeEnum []  consoleTypes;

            LocalizedStrings    strings;
            ProductInformation  pi;
            Images              images;
            Achievements        achievements;
            GamerPictures       gp;
            string              titleName;

            if ( xlsp == null )
            {
                throw new ArgumentException("XboxLiveSubmissionProject passed to Title.CreateNewTitleUODBandPCDB() was null" );
            }

            // Are we creating a game title or a marketplace only title?
            if (xlsp.GameConfigProject != null)
            {
                strings     = xlsp.GameConfigProject.LocalizedStrings;
                pi          = xlsp.GameConfigProject.ProductInformation;
                images      = xlsp.GameConfigProject.Images;
                achievements = xlsp.GameConfigProject.Achievements;
                gp          = xlsp.GameConfigProject.GamerPictures;
                titleName   = xlsp.GameConfigProject.titleName;

                if(pi.Platform != null && pi.Platform.Length != 0)
                {
                    consoleTypes = new ConsoleTypeEnum[pi.Platform.Length];
                    for(int i = 0; i < pi.Platform.Length; ++i)
                    {
                        consoleTypes[i] = (ConsoleTypeEnum)(pi.Platform[i].id);
                    }
                }
                else
                {
                    consoleTypes = new ConsoleTypeEnum[1] { ConsoleTypeEnum.Xenon };
                }
            }
            else if (xlsp.MarketplaceConfigProject != null)
            {
                strings     = xlsp.MarketplaceConfigProject.LocalizedStrings;
                pi          = xlsp.MarketplaceConfigProject.ProductInformation;
                images      = xlsp.MarketplaceConfigProject.Images;
                achievements = null;
                gp          = null;
                titleName   = xlsp.MarketplaceConfigProject.titleName;
                consoleTypes = new ConsoleTypeEnum[1];
                consoleTypes[0] = ConsoleTypeEnum.Marketplace;
            }
            else
            {
                throw new ApplicationException("Invalid XboxLiveSubmissionProject passed to Title.CreateNewTitleUODBandPCDB()");
            }

            try
            {
                procInfo.Append( "Add Title to UODB - Starting" );

                ArrayList versions = GetTitleVersions( titleID, ref procInfo );

                //the sp that adds titles will add version 0 if it's not there
                // so we only want to call this function with 0 if the title completely new
                bool AllowCrossPlatformPlay = ltc == null ? false : ltc.AllowCrossPlatformPlay;

                if ( versions.Count == 0 )
                {
                    //add the title - always starts with version 0
                    AddTitleID( titleID, baseVersion, consoleTypes, AllowCrossPlatformPlay, ref procInfo );
                    procInfo.Append( "Added New Xenon Title to UODB - Title" );
                }
                else
                {
                    //add the title - one of the base versions
                    AddTitleID( titleID, ( (TitleVersion) versions[ 0 ]).Base, consoleTypes, AllowCrossPlatformPlay, ref procInfo );
                    procInfo.Append( "Added Existing Xenon Title to UODB - Title" );
                }

                //-----------------------------------------------------------------
                // Load up the libraries:
                // imagelibrary.  This class is used to simplify access
                // to the <Images> data and to perform some basic checks such as
                // confirming that the files specified in the XLAST are available.
                // Some of the checks may be redundant to those performed by SPAC
                // but others (file presence) are not
                //
                StringLibrary strLib  = new StringLibrary(strings);
                if (strLib.ErrorsDetected())
                {
                    throw new Exception( "String data could not be loaded: " + strLib.ErrorText() );
                }

                ReferenceData refData = new ReferenceData(pi);
                if (refData.ErrorsDetected())
                {
                    throw new Exception( "Reference data could not be loaded: " + refData.ErrorText() );
                }

                if (processImages)
                {
                    if( xlsp.GameConfigProject != null )
                    {
                        imgLib = new ImageLibrary(xlsp.GameConfigProject.titleTypeSpecified, xlsp.GameConfigProject.titleType, titleID, images, achievements, gp, filepath);
                    }
                    else
                    {
                        imgLib = new ImageLibrary(titleID, images, achievements, gp, filepath);
                    }
                    if (imgLib.ErrorsDetected())
                    {
                        throw new Exception( "Image data could not be loaded: " + imgLib.ErrorText() );
                    }
                }



                AddTitleCultureDetails( titleID, pi, strLib, ref procInfo );
                AddTitleFeatureData( titleID, titleName, pi, strLib, ref procInfo);
                AddTitleHdtvData( titleID, pi, ref procInfo );
                AddTitleRatingData( titleID, pi, ref procInfo );
                AddTitleGenreData( titleID, pi, ref procInfo );


                if (imgLib != null)
                {
                    imgLib.PropImages();
                }


                if (ltc != null)
                {
                    //alternate title ids
                    AddAltTitleInfo( ltc, ref procInfo );
                    procInfo.Append( "Added Title to UODB - AltTitleID" );

                    //add bounty
                    //task: can we "unbounty" a title?
                    if ( ltc.BountyExempt )
                    {
                        UODBAddBountyTitle( titleID, ref procInfo );
                        procInfo.Append( "Added Title to UODB - Bounty Exempt" );
                    }
                }

                procInfo.Append( "Add Title to UODB - Completed" );

            }
            catch ( Exception e )
            {
                returnValue = false;
                procInfo.Append( "Error occurred in creating title: " + e.Message + "  STACK: " + e.StackTrace  );
            }

            return returnValue;
        }

        public static bool CreateNewXboxTitleUODBandPCDB(
            uint titleID,
            XboxConfiguration xboxCfg,
            LiveTitleConfig ltc,
            int baseVersion,
            ref StringBuilder procInfo )
        {

            bool flag = true;

            procInfo.Append( "Add Title to UODB - Starting" );

            ArrayList versions = GetTitleVersions( titleID, ref procInfo );

            //the sp that adds titles will add version 0 if it's not there
            // so we only want to call this function with 0 if the title completely new
            ConsoleTypeEnum [] consoleTypes = new ConsoleTypeEnum[1] { ConsoleTypeEnum.Xbox1 };
            if ( versions.Count == 0 )
            {
                //add the title - always starts with version 0, console type 0 = Xbox
                AddTitleID( titleID, baseVersion, consoleTypes, false, ref procInfo );
                procInfo.Append( "Added New Xbox Title to UODB - Title" );
            }
            else
            {
                //add the title - one of the base versions
                AddTitleID( titleID, ( (TitleVersion) versions[ 0 ]).Base, consoleTypes, false, ref procInfo );
                procInfo.Append( "Added Existing Xbox Title to UODB - Title" );
            }

            procInfo.Append( "Added Title to UODB - Title" );

            //alternate title ids
            AddAltTitleInfo( ltc, ref procInfo );
            procInfo.Append( "Added Title to UODB - AltTitleID" );

            //add bounty
            if ( ltc.BountyExempt )
            {
                UODBAddBountyTitle( titleID, ref procInfo );
                procInfo.Append( "Added Title to UODB - Bounty Exempt" );
            }

            AddTitleFeatureData( titleID, xboxCfg, ref procInfo );

            procInfo.Append( "Add Title to UODB - Completed" );

            return flag;
        }


        //task: REVIEW whether this works for multiple partition UODB config...
        public static void AddTitleID( uint titleID, int initialVer, ConsoleTypeEnum [] consoleTypes, bool allowCrossPlatformPlay, ref StringBuilder procInfo )
        {
            // insert title
            //it's weird, but we're supposed to get the app name from the config...
            //how often are we going to change the appname?
            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
            string webstoreApplicationName = viInfo.WebstoreApp;

            foreach(ConsoleTypeEnum consoleType in consoleTypes)
            {
                ArrayList paramlist = new ArrayList();
                SqlParameter sp = null;

                //for the UODB call
                sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
                sp.Value = (int) titleID;
                paramlist.Add( sp );

                sp = new SqlParameter( "@i_initial_version", SqlDbType.Int );
                sp.Value = initialVer;
                paramlist.Add( sp );

                sp = new SqlParameter( "@ti_console_type_id", SqlDbType.TinyInt );
                sp.Value = (byte)consoleType;
                paramlist.Add( sp );


                //t_titles, t_title_versions, t_trust_constants
                ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, "dbo.p_svc_insert_titles", ref procInfo );

//                catch( Exception e )
//                {
//                    //task: should probably only catch specific errors.. and re-throw so that the application can end.
//                    omTrace( title, L_ERROR, "Error: Calling UODB.dbo.p_svc_insert_titles: " + e.Message + "\n\r Stack: " + e.StackTrace );
//                    procInfo.Append( "Error: Calling UODB.dbo.p_svc_insert_titles: " + e.Message + "\n\r Stack: " + e.StackTrace );
//                }
//            }
            }

            //
            //  If more than one console type is indicated, set the XPRIVILEGE_CROSS_PLATFORM_MULTIPLAYER
            //  privilege.
            //

            if(true)
            {
                ArrayList paramlist = new ArrayList();
                SqlParameter sp = null;

                string sproc = (consoleTypes.Length > 1 && allowCrossPlatformPlay ? "dbo.p_svc_set_title_privilege" : "dbo.p_svc_remove_title_privilege");

                //
                //  UODB
                //

                // title id
                sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
                sp.Value = (int) titleID;
                paramlist.Add(sp);

                // privilege
                sp = new SqlParameter( "@ti_privilege_id", SqlDbType.TinyInt );
                sp.Value = XOn.XPRIVILEGE_CROSS_PLATFORM_MULTIPLAYER;
                paramlist.Add(sp);

                ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, sproc, ref procInfo );

            }

        } //add title id

        //  AddVersion
        public static void AddTitleVersion( uint titleID, int newVer, ConsoleTypeEnum consoleType, ref StringBuilder procInfo )
        {
            // insert additional title version
            //we're supposed to get the app name from the config...
            //how often are we going to change the appname?  seems overly complex.
            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
            string webstoreApplicationName = viInfo.WebstoreApp;

            ArrayList paramlist = new ArrayList();
            SqlParameter sp = null;

            //for the UODB call
            sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
            sp.Value = (int) titleID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_initial_version", SqlDbType.Int );
            sp.Value = newVer;
            paramlist.Add( sp );

            sp = new SqlParameter( "@ti_console_type_id", SqlDbType.TinyInt );
            sp.Value = (byte)consoleType;
            paramlist.Add( sp );

            //t_title_versions
            ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, "dbo.p_svc_insert_titles", ref procInfo );

        } //add title id

        //could either add all ratings on a server before moving on,
        //or add a rating to all servers then do next rating... latter seemed easier
        public static void AddTitleRating( uint titleID, int ratingSystem, int ratingID, ref StringBuilder procInfo )
        {
            //it's weird, but we're supposed to get the app name from the config...
            //how often are we going to change the appname?
            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface( VirtualInterface.uodb, Site.main );
            string webstoreApplicationName = viInfo.WebstoreApp;

            using ( WstConnection titleConn = new WstConnection( webstoreApplicationName ) )
            {
                //insert rating
                //p_svc_insert_title_rating.sql  int title, int ratingsystemid, int ratingid
                WstCommand titleCmd = titleConn.CreateCommand();
                titleCmd.CommandType = CommandType.StoredProcedure;

                titleCmd.CommandText = "dbo.p_svc_insert_title_rating";
                titleCmd.PartitionType = WstPartitionType.Physical;

                titleCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = (int) titleID;
                titleCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;

                titleCmd.Parameters.Add( "@i_rating_system_id", SqlDbType.Int ).Value = ratingSystem;
                titleCmd.Parameters["@i_rating_system_id"].Direction = ParameterDirection.Input;

                titleCmd.Parameters.Add( "@i_rating_id", SqlDbType.Int ).Value = ratingID;
                titleCmd.Parameters["@i_rating_id"].Direction = ParameterDirection.Input;

                titleCmd.Parameters.Add( "@hr", SqlDbType.BigInt);
                titleCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;

                try
                {
                    for ( int iLoop = 0; iLoop < titleConn.SqlPartitions.Count; iLoop++)
                    {
                        titleCmd.Partition = iLoop;
                        titleCmd.ExecuteNonQuery();
                        procInfo.Append( "Title rating - partition " + iLoop );
                    }

                    if ( System.Convert.ToInt32( titleCmd.Parameters["@hr"].Value ) != 0 )
                    {
                        throw new Exception( "Call to insert title version failed! " );
                    }
                }
                catch( Exception e )
                {
                    Xom.Trace(XomAreaName.title, LogLevel.L_ERROR, "Error: Calling UODB.dbo.p_svc_insert_title_rating: " + e.Message + "\n\r Stack: " + e.StackTrace );
                    procInfo.Append( e.ToString() );
                    throw;
                }
            }

            //task: add to PCDB
            //ExecuteNonQuery

        } //add rating


        // bounty
        public static void UODBAddBountyTitle( uint titleID, ref StringBuilder procInfo )
        {

            //it's weird, but we're supposed to get the app name from the config...
            //how often are we going to change the appname?
            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
            string webstoreApplicationName = viInfo.WebstoreApp;

            ArrayList parameters = new ArrayList();
            SqlParameter sp = null;

            //for the UODB call
            sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
            sp.Value = (int) titleID;
            parameters.Add( sp );

            //proc already checks if title is there and won't retry the insert
            // p_xprof_insert_exempt_title   int titleid
            ExecuteWebstoreNonQuery( webstoreApplicationName, parameters, "dbo.p_xprof_insert_exempt_title", ref procInfo );

        } //bounty

        // alt title ID & services
        public static bool AddAltTitleInfo( LiveTitleConfig ltc, ref StringBuilder procInfo )
        {

            ArrayList paramlist = new ArrayList();
            SqlParameter sp = null;

            //for the UODB call
            sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
            sp.Value = (int) ltc.TitleID;
            paramlist.Add( sp );

            //these will almost always be 0, but reduce code churn here,
            //these will get set to the value from the LTC.
            sp = new SqlParameter( "@i_title_region", SqlDbType.Int );
            sp.Value = ltc.TitleRegion;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_media_id", SqlDbType.Int );
            sp.Value = (int) ltc.DiscMediaID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_live_title_id", SqlDbType.Int );
            sp.Value = (int) ltc.LiveTitleID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_alternate_id1", SqlDbType.Int );
            sp.Value = (int) ltc.AlternateTitleID1;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_alternate_id2", SqlDbType.Int );
            sp.Value = (int) ltc.AlternateTitleID2;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_alternate_id3", SqlDbType.Int );
            sp.Value = (int) ltc.AlternateTitleID3;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_alternate_id4", SqlDbType.Int );
            sp.Value = (int) ltc.AlternateTitleID4;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_service1", SqlDbType.Int );
            sp.Value = ltc.Service1;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_service1_alt_id", SqlDbType.Int );
            sp.Value = ltc.Service1AltID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_service2", SqlDbType.Int );
            sp.Value = ltc.Service2;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_service2_alt_id", SqlDbType.Int );
            sp.Value = ltc.Service2AltID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_service3", SqlDbType.Int );
            sp.Value = ltc.Service3;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_service3_alt_id", SqlDbType.Int );
            sp.Value = ltc.Service3AltID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_service4", SqlDbType.Int );
            sp.Value = ltc.Service4;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_service4_alt_id", SqlDbType.Int );
            sp.Value = ltc.Service4AltID;
            paramlist.Add( sp );

            //add it to UODB
            bool flag = true;
            ExecuteWebstoreNonQuery(
                ConfigUtil.UodbWebstoreApp,
                paramlist,
                "p_svc_set_alternate_titleids",
                ref procInfo
                );

           return flag;
        }  //alt title id


        public static bool CreateNewTitleWebDB( uint titleID, LocalizedStrings strings, ref StringBuilder procInfo )
        {
            string defaultLocale = "";
            int     clusterID    = 1;
            int     esrb         = 7;

            if (strings == null || strings.defaultLocale == null)
            {
                procInfo.Append("XLAST did not specify a defaultLocale for LocalizedStrings!");
                return false;
            }

            defaultLocale = strings.defaultLocale;


            string connection = ConfigUtil.WebdbConnectionString;

            ArrayList paramlist = new ArrayList();
            SqlParameter sp = null;

            sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
            sp.Value = (int)titleID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@ti_esrb_rating", SqlDbType.TinyInt );
            sp.Value = esrb;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_cluster_id", SqlDbType.Int );
            sp.Value = clusterID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@vc_default_locale", SqlDbType.NVarChar, 8 );
            sp.Value = defaultLocale;
            paramlist.Add( sp );

            //add it to WebDB
            bool flag = ExecuteNonQuery(
                connection,
                paramlist,
                "dbo.p_webdb_tmr_insert_title_info",
                ref procInfo
                );




            // $REVIEW (michion): this code loops through all the localized versions of the
            // game title. This is consistent with the XBOX1 treatment, but in other databases
            // eg UODB.t_title_culture_details, we use the StringLibrary to add all languages
            // (using defaulting logic with default locale)
            //
            LocalizedString ls = XlastUtil.GetTitleNameLocalizeString( strings );

            if ( ( null != ls ) && ( null != ls.Translation ) && ( ls.Translation.Length > 0 ) )
            {
                foreach( Translation t in ls.Translation )
                {
                    paramlist = new ArrayList();

                    sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
                    sp.Value = (int)titleID;
                    paramlist.Add( sp );

                    sp = new SqlParameter( "@vc_locale_id", SqlDbType.NVarChar, 8 );
                    sp.Value = t.locale;
                    paramlist.Add( sp );

                    sp = new SqlParameter( "@vc_display_name", SqlDbType.NVarChar, 128 );
                    sp.Value = t.Value;
                    paramlist.Add( sp );

                    flag = flag && ExecuteNonQuery(
                        connection,
                        paramlist,
                        "dbo.p_webdb_tmr_insert_title_name_info",
                        ref procInfo
                        );
                }
            }

            return flag;
        }

        // Called for XBOX title
        public static void CreateNewTitleWebDB( XboxConfiguration xboxCfg, ref StringBuilder procInfo )
        {          
            //task: fix Xbox config to have int titleID as param
            int titleID;
            if ( xboxCfg.GameConfig.titleId.Substring(0,2).ToLower() == "0x" )
            {
                titleID = Convert.ToInt32(xboxCfg.GameConfig.titleId,16);
            }
            else
            {
                titleID = Convert.ToInt32(xboxCfg.GameConfig.titleId);
            }


            string connection = ConfigUtil.WebdbConnectionString;

            // First, create title in t_title_info with the default locale
            //
            ArrayList paramlist = new ArrayList();
            SqlParameter sp = null;

            sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
            sp.Value = titleID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@ti_esrb_rating", SqlDbType.TinyInt );
            sp.Value = Convert.ToInt32(xboxCfg.WebdbInfo.ESRB);
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_cluster_id", SqlDbType.Int );
            sp.Value = Convert.ToInt32(xboxCfg.WebdbInfo.ClusterID);
            paramlist.Add( sp );

            sp = new SqlParameter( "@vc_default_locale", SqlDbType.NVarChar, 8 );
            sp.Value = xboxCfg.WebdbInfo.DefaultLocale;
            paramlist.Add( sp );

            //add it to WebDB
            ExecuteNonQuery(
                connection,
                paramlist,
                "dbo.p_webdb_tmr_insert_title_info",
                ref procInfo
                );

            // Second, create all localized title name strings in t_title_name_info
            //
            XboxConfigurationLocalizedString ls = XboxUtil.GetTitleNameLocalizedString( xboxCfg );
            // Insert each translation for the localized title string
            foreach( XboxConfigurationLocalizedStringTranslation t in ls.Translation )
            {
                paramlist = new ArrayList();

                sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
                sp.Value = titleID;
                paramlist.Add( sp );

                sp = new SqlParameter( "@vc_locale_id", SqlDbType.NVarChar, 8 );
                sp.Value = t.locale;
                paramlist.Add( sp );

                sp = new SqlParameter( "@vc_display_name", SqlDbType.NVarChar, 128 );
                sp.Value = t.Value;
                paramlist.Add( sp );

                ExecuteNonQuery(
                    connection,
                    paramlist,
                    "dbo.p_webdb_tmr_insert_title_name_info",
                    ref procInfo
                    );
            }

        }


//                titleCmd.CommandText = "dbo.p_webdb_tmr_insert_title_info";
//
//                titleCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = (int) titleID;
//                titleCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@ti_esrb_rating", SqlDbType.TinyInt ).Value = esrb;
//                titleCmd.Parameters["@ti_esrb_rating"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@i_cluster_id", SqlDbType.Int ).Value = clusterID;
//                titleCmd.Parameters["@i_cluster_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@vc_default_locale", SqlDbType.NVarChar, 8 ).Value = locale;
//                titleCmd.Parameters["@vc_default_locale"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@hr", SqlDbType.Int );
//                titleCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;
//
//                //task: do something with the rows affected?
//                int numRows = titleCmd.ExecuteNonQuery();
//
//                //p_webdb_tmr_insert_title_name_info.sql
//                titleCmd = titleConn.CreateCommand();
//                titleCmd.CommandType = CommandType.StoredProcedure;
//                titleCmd.CommandText = "dbo.p_webdb_tmr_insert_title_name_info";
//
//                titleCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = (int) titleID;
//                titleCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@vc_locale_id", SqlDbType.NVarChar, 8 ).Value = locale;
//                titleCmd.Parameters["@vc_locale_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@vc_display_name", SqlDbType.NVarChar, 8 ).Value = name;
//                titleCmd.Parameters["@vc_display_name"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@hr", SqlDbType.Int );
//                titleCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;
//
//                //task: do something with the rows affected?
//                numRows = titleCmd.ExecuteNonQuery();
//
//            } // using



//        public static bool WebDbAddTitleInfo( )
//        {
//            string connection = ConfigUtil.WebdbConnectionString;
//
//            return true;
//        }

//        public static bool WebDbAddTitleNameInfo( )
//        {
//            //string connection = ConfigUtil.WebdbConnectionString;
//
//            //string procName = "dbo.p_webdb_tmr_insert_title_name_info";
//
//            //task: when you figure out parameter value assignment, fix this.
//            //                titleCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = (int) titleID;
//            //                titleCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;
//            //
//            //                titleCmd.Parameters.Add( "@vc_locale_id", SqlDbType.NVarChar, 8 ).Value = locale;
//            //                titleCmd.Parameters["@vc_locale_id"].Direction = ParameterDirection.Input;
//            //
//            //                titleCmd.Parameters.Add( "@vc_display_name", SqlDbType.NVarChar, 8 ).Value = name;
//            //                titleCmd.Parameters["@vc_display_name"].Direction = ParameterDirection.Input;
//            //
//            //                titleCmd.Parameters.Add( "@hr", SqlDbType.Int );
//            //                titleCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;
//
//            //bool flag; // = ExecuteNonQuery( );
//
//            return true;
//
//        }

        public static bool NPDBCreateTitleStrings( uint titleID, LocalizedStrings strings, ref StringBuilder procInfo )
        {

            LocalizedString ls = XlastUtil.GetTitleNameLocalizeString( strings );

            if ( ( null != ls ) && ( null != ls.Translation ) && ( ls.Translation.Length > 0 ) )
            {
                foreach( Translation t in ls.Translation )
                {

                    NPDBCreateTitleString( titleID, 0, t.locale, t.Value, ref procInfo );

                    //xlast/spac verifies that there is a translation for the default locale
                    if ( t.locale == strings.defaultLocale )
                    {
                        NPDBCreateTitleString( titleID, 0, "default", t.Value, ref procInfo );
                    }
                }
            }

            return true;
        }


        /// <summary>
        /// Create localized title strings from the xbox Config for Xbox1
        /// </summary>
        /// <param name="xboxXml">path of xboxConfig xml file</param>
        /// <param name="procInfo">output of debugging info</param>
        /// <returns>true if operation successful</returns>
        public static bool NPDBCreateTitleStrings( XboxConfiguration xboxCfg, ref StringBuilder procInfo )
        {

            bool defaultFound = false;

            // process title strings out of *Xbox* config data
            XboxConfigurationLocalizedString ls = XboxUtil.GetTitleNameLocalizedString( xboxCfg );

            //task: fix this so titleID for xbox doesn't have to be converted in several places
            uint titleID;

            //sometimes that value will be an integer, not "0xhexdigits"
            if ( xboxCfg.GameConfig.titleId.Substring(0,2).ToLower() == "0x" )
            {
                titleID = Convert.ToUInt32(xboxCfg.GameConfig.titleId,16);
            }
            else
            {
                titleID = (UInt32) Convert.ToInt32(xboxCfg.GameConfig.titleId);
            }

            if ( ( null != ls ) && ( null != ls.Translation ) && ( ls.Translation.Length > 0 ) )
            {
                foreach( XboxConfigurationLocalizedStringTranslation t in ls.Translation )
                {
                    //review: do I care if it is already there?
                    //review: what is the correct value for string ID?
                    NPDBCreateTitleString
                    (
                        titleID,
                        0,
                        t.locale,
                        t.Value,
                        ref procInfo
                    );

                    if ( t.locale == xboxCfg.WebdbInfo.DefaultLocale )
                    {
                        NPDBCreateTitleString
                            (
                            titleID,
                            0,          //stringid 0 == title name
                            "default",  //convention for 'default' locale...
                            t.Value,
                            ref procInfo
                            );

                        defaultFound = true;
                    }
                }
            }

            if ( ! defaultFound )
            {
                throw new Exception( "Title name string not found for Default locale specified in .Xbox file." );
            }
            return true;
        }


        public static bool NPDBCreateTitleString( uint titleID, short stringID, string locale, string stringText, ref StringBuilder procInfo )
        {

            ArrayList paramlist = new ArrayList();
            SqlParameter sp = null;
            string connection = ConfigUtil.NpdbConnectionString;

            sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
            sp.Value = (int) titleID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_string_id", SqlDbType.TinyInt );
            sp.Value = stringID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@vc_locale", SqlDbType.VarChar, 10 );
            sp.Value = locale;
            paramlist.Add( sp );

            //titlemgr convention to have strings expire in 100 years
            sp = new SqlParameter( "@dt_expire", SqlDbType.DateTime );
            sp.Value = System.DateTime.Now.AddYears( 100 );
            paramlist.Add( sp );

            sp = new SqlParameter( "@nvc_text", SqlDbType.NVarChar, 512 );
            if ( stringText.Length > 512 )
            {
                sp.Value = stringText.Substring( 0, 512 );
            }
            else
            {
                sp.Value = stringText;
            }
            paramlist.Add( sp );

            bool flag = ExecuteNonQuery(
                connection,
                paramlist,
                "dbo.p_stringsvr_string_add_by_id",
                ref procInfo
                );

            return flag;

        }

        public static bool CreateNewTitlePCDB( uint titleID, int initialVer, int ratingSystem, int ratingID, bool bounty, ref StringBuilder procInfo )
        {

            //NOTE: same calls made to PCDB as UODB, except they're not Webstore...
            //REVIEW: This should only include PCDB calls that aren't already covered in UODB - are there ANY?
//            string connection = ConfigUtil.ProductdbConnectionString;
//            using (SqlConnection titleConn = new SqlConnection( connection ) )
//            {
//
//                titleConn.Open();
//                SqlCommand titleCmd = titleConn.CreateCommand();
//                titleCmd.CommandType = CommandType.StoredProcedure;
//                titleCmd.CommandText = "";
//
//                titleCmd = titleConn.CreateCommand();
//                titleCmd.CommandType = CommandType.StoredProcedure;
//                titleCmd.CommandText = "dbo.p_svc_insert_titles";
//
//                titleCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = (int) titleID;
//                titleCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@i_initial_version", SqlDbType.Int ).Value = initialVer;
//                titleCmd.Parameters["@i_initial_version"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@hr", SqlDbType.BigInt);
//                titleCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;
//
//                int numRows = titleCmd.ExecuteNonQuery();
//
//                titleCmd = titleConn.CreateCommand();
//                titleCmd.CommandType = CommandType.StoredProcedure;
//                titleCmd.CommandText = "dbo.p_svc_insert_title_rating";
//
//                titleCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = (int) titleID;
//                titleCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@i_rating_system_id", SqlDbType.Int ).Value = ratingSystem;
//                titleCmd.Parameters["@i_rating_system_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@i_rating_id", SqlDbType.Int ).Value = ratingID;
//                titleCmd.Parameters["@i_rating_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@hr", SqlDbType.BigInt);
//                titleCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;
//
//                numRows = titleCmd.ExecuteNonQuery();
//
//
//                //************************************
//                //task: clean this up and finish it
//                titleCmd = titleConn.CreateCommand();
//                titleCmd.CommandType = CommandType.StoredProcedure;
//                titleCmd.CommandText = "dbo.p_svc_insert_title_culture_details";
//
//                titleCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = (int) titleID;
//                titleCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@i_culture_id", SqlDbType.Int ).Value = (int) 0; //cultureid;
//                titleCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;
//
//                //task:  ??? where should *this* name come from?
//                titleCmd.Parameters.Add( "@vc_name", SqlDbType.NVarChar, 60 ).Value = "namestring"; //Name;
//                titleCmd.Parameters["@i_rating_system_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@i_rating_id", SqlDbType.Int ).Value = ratingID;
//                titleCmd.Parameters["@i_rating_id"].Direction = ParameterDirection.Input;
//
//                titleCmd.Parameters.Add( "@hr", SqlDbType.BigInt);
//                titleCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;
//
//                numRows = titleCmd.ExecuteNonQuery();
//
//            }

            return true;
        } //create pcdb



        #endregion Title Creating Methods

        #region Title Checking Methods

        //task: implement
        //commented out for now so nobody accidentally uses it...
//        public static bool CheckExist( uint titleID )
//        {
//
//            //task: do we need to check everywhere?
//            //task: check uodb
//            //task: check Webdb
//            //task: check pcdb product catalog
//            //task: check xprof_bounty
//
//            //task: correct this conversion!!!
//            if (
//                ( CheckExistUODB( titleID ) ) ||
//                ( CheckExistWEBDB( titleID ) )
//                )
//            {
//                return true;
//            }
//            else
//            {
//                return false;
//            }
//        }


        public static bool CheckExistNPDB( uint titleID, int stringID )
        {

            return false;
        }

        public static bool CheckExistNPDBString( uint titleID, string stringID )
        {

            //are the title strings there?
            try
            {
                //open connection
                using ( SqlConnection execConn = new SqlConnection( ConfigUtil.NpdbConnectionString ) )
                {
                    //create command
                    execConn.Open();
                    SqlCommand execCmd = execConn.CreateCommand();
                    execCmd.CommandType = CommandType.StoredProcedure;
                    execCmd.CommandText = "dbo.p_stringsvr_strings_get_by_title_and_id";

                    //add parameters
                    execCmd.Parameters.Add( "@i_title_id", SqlDbType.Int).Value = (int) titleID;
                    execCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;

                    execCmd.Parameters.Add( "@i_string_id", SqlDbType.Int).Value = stringID;
                    execCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;

                    //execute non-query
                    //task: create recordset and then ??
                }
            }
            catch
            {

                //rollback transaction on commands
                //review: is this necessary?  Using should close everything, right?
                //cmd.Transaction.Rollback();

                //preserve the original exception
                throw;
            }
            return false;
        }


        public static bool CheckExistPCDB( uint titleID )
        {
            return false;
        }

//        public static bool CheckExistUODB( uint titleID )
//        {
            // loop through partitions....
//            int partitionsWithTitle = 0;
//            int iLoop = 0;
//
//            for ( iLoop = 0; iLoop < titleConn.SqlPartitions.Count ; iLoop++)
//            {
//                if (
//                    ( 0 == partitionsWithTitle ) ||   //it's not present
//                    ( titleConn.SqlPartitions.Count == partitionsWithTitle )
//                    )
//                {
//                    //good config, return whether the title is there or not
//                    return ( 0 != partitionsWithTitle );
//                }
//                else
//                {
//                    //bad config -- partially provisioned title
//                    throw new InvalidUODBConfigurationException( iLoop );
//                }
            //we can catch it immediately, or just check them all at the end...
            //                        if (
            //                            ( partitionsWithTitle != 0 ) ||
            //                            ( partitionsWithTitle != ( iLoop + 1 ) )  //zero based partition collection...
            //                            )
            //                        {
            //                            //somebody is different!
            //                            throw new InvalidUODBConfigurationException( iLoop );
            //                        }
//            return false;
//        }


        //CHECK XPROF
        //                titleCmd = titleConn.CreateCommand();
        //                titleCmd.CommandType = CommandType.StoredProcedure;
        //                titleCmd.CommandText = "p_svc_title_check";
        //
        //                titleCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = titleID;
        //                titleCmd.Parameters["@titleID"].Direction = ParameterDirection.Input;
        //
        //                titleCmd.Parameters.Add( "@hr", SqlDbType.BigInt);
        //                titleCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;
        //
        //                titleCmd.ExecuteNonQuery();
        //
        //                if ( 1 == System.Convert.ToInt32( titleCmd.Parameters["@hr"].Value ) )
        //                {
        //                    return true;
        //                }

        public static bool CheckExistUODBPartition( uint titleID, int partition )
        {
            //task: talk to configdb for this
            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
            string webstoreApplicationName = viInfo.WebstoreApp;

            using ( WstConnection titleConn = new WstConnection( webstoreApplicationName ) )
            {

                WstCommand titleCmd;
                titleConn.Open();

                titleCmd = titleConn.CreateCommand();
                titleCmd.CommandType = CommandType.StoredProcedure;

                //currently only checks t_titles, but since we create there first, it's a reasonable shortcut
                titleCmd.CommandText = "p_svc_title_exists";

                titleCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = (int) titleID;
                titleCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;

                titleCmd.Parameters.Add( "@hr", SqlDbType.BigInt);
                titleCmd.Parameters["@hr"].Direction = ParameterDirection.ReturnValue;

                titleCmd.Partition = partition;
                titleCmd.ExecuteNonQuery();

                //proc returns 1 if it's there, 0 if not...
                int exists = System.Convert.ToInt32( titleCmd.Parameters["@hr"].Value );
                return ( exists == 1 );

            } // using

        }

        public static bool CheckExistWEBDB( uint titleID )
        {
            //task: "p_webdb_tmr_get_title_name_info";

            //task: should LiveStats populate the "p_webdb_tmr_get_lb_list" stuff?
            //task: should LiveStats populate the "p_webdb_tmr_insert_lb_name_info";

            string connection = ConfigUtil.WebdbConnectionString;

            using (SqlConnection webdbConn = new SqlConnection( connection ) )
            {
                webdbConn.Open();
                SqlCommand webdbCmd = webdbConn.CreateCommand();
                webdbCmd.CommandType = CommandType.StoredProcedure;
                webdbCmd.CommandText = "dbo.p_webdb_tmr_get_title_info";

                webdbCmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = (int) titleID;
                webdbCmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;

                SqlDataReader webdbReader = webdbCmd.ExecuteReader();

                //review: is there a better way to do this?
                //                if ( webdbReader.Read() )
                //                {
                //                    return true;
                //                }
                //                else
                //                {
                return false;
                //                }
            }
        }


        #endregion Checking Methods

        #region Title Configuration Report Methods

        public static ArrayList GetTitleVersions( uint titleID, ref StringBuilder procInfo )
        {
            // there's always a partition 0
            return GetTitleVersions( titleID, 0, ref procInfo );
        }

        //this will be used later to audit title configuration, to make sure all partitions are the same
        public static ArrayList GetTitleVersions( uint titleID, int partition, ref StringBuilder procInfo )
        {
            ArrayList versions = new ArrayList();

            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
            string webstoreApplicationName = viInfo.WebstoreApp;

            WstConnection conn = new WstConnection( webstoreApplicationName );
            conn.Open();

            //  Set up the command
            WstCommand cmd = new WstCommand(
                "dbo.p_svc_get_title_versions",   //name of the stored procedure
                conn,                             //connection
                partition,
                WstFailoverMode.PrimaryOnly
                );

            cmd.CommandType   = CommandType.StoredProcedure;
            cmd.PartitionType = WstPartitionType.Physical;
            cmd.Transaction   = conn.BeginTransaction();

            cmd.Parameters.Add( "@i_title_id", SqlDbType.Int ).Value = (int) titleID;
            cmd.Parameters["@i_title_id"].Direction = ParameterDirection.Input;

            cmd.Parameters.Add( "@i_base_version", SqlDbType.Int ).Value = -1; //retrieve all versions
            cmd.Parameters["@i_base_version"].Direction = ParameterDirection.Input;

            try
            {
                WstDataReader verReader = cmd.ExecuteReader();

                //task: retrieve data
                //loop through result set
                int baseCol = verReader.GetOrdinal( "i_base_version" );
                int updateCol = verReader.GetOrdinal( "i_update_version" );
                int betaCol = verReader.GetOrdinal( "i_beta_version" );
                int consoleTypeCol = verReader.GetOrdinal( "ti_console_type_id" );

                while ( verReader.Read() )
                {
                    TitleVersion version = new TitleVersion(
                        titleID,
                        verReader.GetInt32( baseCol ),
                        verReader.GetInt32( updateCol ),
                        verReader.GetInt32( betaCol ),
                        (ConsoleTypeEnum) verReader.GetByte( consoleTypeCol )
                        );
                    versions.Add( version );
                }

            }
            catch ( Exception e )
            {
                string errString = "\n\rError Calling p_svc_get_title_versions on ptn " + partition + ": " + e.Message + "\n\r Stack: " + e.StackTrace;
                Xom.Trace(XomAreaName.title, LogLevel.L_ERROR, errString );
                procInfo.Append( errString );

                throw;
            }

            return versions;
        }

        static public string ReportVersions( ArrayList titleVers )
        {

            StringBuilder sb = new StringBuilder( 500 );
            sb.Append( "            Title Version Configuration Report " );
            sb.Append( "\r\n\r\n" );

            sb.Append( "TitleID     BaseVersion   UpdateVersion   BetaVersion  Platform" );
            sb.Append( "\r\n\r\n" );

            for ( int iLoop = 0; iLoop < titleVers.Count; iLoop++ )
            {
                sb.AppendFormat( "{0} {1} {2} {3} {4}",
                    ( (TitleVersion) titleVers[ iLoop ] ).TitleID.ToString("X").PadRight( 11 ),
                    ( (TitleVersion) titleVers[ iLoop ] ).Base.ToString("X").PadRight( 13 ),
                    ( (TitleVersion) titleVers[ iLoop ] ).Update.ToString("X").PadRight( 15 ),
                    ( (TitleVersion) titleVers[ iLoop ] ).Beta.ToString("X").PadRight( 12 ),
                    ( (TitleVersion) titleVers[ iLoop ] ).ConsoleType.ToString()
                    );
                sb.Append( "\r\n" );

            }// for

            sb.Append( "\r\n" );
            return sb.ToString();
        }

        #endregion

        #region SQL Methods

        //NOTE:
        //  all calls must be for Webstore DB's
        //  all calls must be NonQuery
        //  all procedures called must have "set" semantic not additive
        //  (i.e. repeated calls with same params will not change configuration )
        public static void ExecuteWebstoreNonQuery( string applicationName, ArrayList paramList, string procName, ref StringBuilder procInfo )
        {

            int partitionCount;
            //get partition count
            using(WstConnection conn = new WstConnection( applicationName ))
            {
                conn.Open();
                partitionCount = conn.SqlPartitions.Count;
            }

            ArrayList connectionList = new ArrayList();
            ArrayList commandList = new ArrayList();

            try
            {
                //open a connection for each partition
                for( int physicalPartition = 0; physicalPartition < partitionCount; physicalPartition++ )
                {

                    WstConnection conn = new WstConnection( applicationName );
                    conn.Open();

                    //Hold on to this connection for later
                    connectionList.Add(conn);

                    //  Set up the command
                    WstCommand cmd = new WstCommand(
                        procName,                   //name of the stored procedure
                        conn,                       //connection
                        physicalPartition,
                        WstFailoverMode.PrimaryOnly
                        );

                    //Hold on to this command for later
                    commandList.Add(cmd);

                    cmd.CommandType   = CommandType.StoredProcedure;
                    cmd.PartitionType = WstPartitionType.Physical;
                    if(useTransactions)
                    {
                        cmd.Transaction   = conn.BeginTransaction();
                    }

                    //this should prevent changes to the original parameter set
                    foreach( SqlParameter sp in paramList )
                    {
                        SqlParameter paramCopy = new SqlParameter(
                            sp.ParameterName,
                            sp.SqlDbType,
                            sp.Size,
                            sp.Direction,
                            sp.IsNullable,
                            sp.Precision,
                            sp.Scale,
                            sp.SourceColumn,
                            sp.SourceVersion,
                            sp.Value
                            );
                        cmd.Parameters.Add( paramCopy );
                    } // copy params

                    try
                    {
                        cmd.ExecuteNonQuery();
                    }
                    catch ( Exception e )
                    {
                        string errString = "\n\rError Calling " + procName + " on ptn " + physicalPartition + ": " + e.Message + "\n\r Stack: " + e.StackTrace;
                        Xom.Trace(XomAreaName.title, LogLevel.L_ERROR, errString );
                        procInfo.Append( errString );

                        throw;
                    }
                }// for each partition

                //if all commands execute ok, commit all transactions
                foreach( WstCommand cmd in commandList )
                {
                    if(useTransactions)
                    {
                        cmd.Transaction.Commit();
                    }
                    cmd.Parameters.Clear();
                }

            }
            catch
            {
                //rollback all transactions on commands
                foreach( WstCommand cmd in commandList )
                {
                    if(useTransactions)
                    {
                        cmd.Transaction.Rollback();
                    }
                }

                //preserve the original exception
                throw;
            }
            finally
            {
                //task: assumes auto-rollback on close  is this the case??
                foreach( WstConnection conn in connectionList )
                {
                    conn.Close();
                }
            }
        }


        public static bool ExecuteNonQuery( string connectionString, ArrayList paramList, string procName, ref StringBuilder procInfo )
        {

            bool flag = true;



            try
            {
                //open connection
                using ( SqlConnection execConn = new SqlConnection( connectionString ) )
                {
                    //create command
                    execConn.Open();
                    SqlCommand execCmd = execConn.CreateCommand();
                    execCmd.CommandType = CommandType.StoredProcedure;
                    execCmd.CommandText = procName;

                    //this should prevent changes to the original parameter set
                    ArrayList parameters = (ArrayList) paramList.Clone();

                    //add parameters
                    foreach( object param in parameters )
                    {
                        execCmd.Parameters.Add( ( SqlParameter ) param );
                    }

                    //execute non-query
                    try
                    {
                        execCmd.ExecuteNonQuery();
                    }
                    catch ( Exception e )
                    {
                        string errString = "\n\rError Calling " + procName + " on ||" + connectionString + "|| Error was: " + e.Message + "\n\r Stack: " + e.StackTrace;
                        Xom.Trace(XomAreaName.title, LogLevel.L_ERROR, errString );
                        procInfo.Append( errString );

                        throw;
                    }
                }
            }
            catch
            {
                //no rollback here, since we only have 1 partition... it will fail or succeed.
                //don't need finally either, since Using will close the connection
                //preserve the original exception
                throw;
            }
            return flag;
        }

        #endregion

        #region Title Deleting Methods

        public static void DestroyTitle( uint titleID )
        {

            //task: probably already in a stored proc...
            //delete from dbo.t_title_trust_constants where i_title_id = 0xfeedface
            //delete from dbo.t_title_versions where i_title_id = 0xfeedface
            //delete from dbo.t_xprof_bounty_exempt_titles where i_title_id = 0xfeedface
            //delete from dbo.t_title_ratings where i_title_id = 0xfeedface
            //delete from t_titles

            //delete from webdb
            //delete from webdb.dbo.t_title_info where i_title_id = 0xfeedface
            //delete from webdb.dbo.t_title_name_info where i_title_id = 0xfeedface
            //p_webdb_tmr_delete_attribute_info.sql
            //p_webdb_tmr_delete_attribute_name_info.sql
            //p_webdb_tmr_delete_lb.sql
            //p_webdb_tmr_delete_lb_name_info.sql
            //p_webdb_tmr_delete_raw_attribute_info.sql
            //p_webdb_tmr_delete_title.sql
            //p_webdb_tmr_delete_title_info.sql
            //p_webdb_tmr_delete_title_name_info.sql


            //delete from uodb
            //p_xprof_insert_exempt_title
            //p_svc_insert_title_rating
            //p_svc_insert_titles

            //delete from pcdb
            //p_svc_insert_title_rating
            //p_svc_insert_titles

            //delete from PCDB???

            //
            //declare @titleid int
            //select @titleid = -2147482862
            //
            //delete from uodb.dbo.t_alt_titleid where i_title_id = @titleid
            //delete from uodb.dbo.t_title_trust_constants where i_title_id = @titleid
            //delete from uodb.dbo.t_title_versions where i_title_id = @titleid
            //delete from uodb.dbo.t_xprof_bounty_exempt_titles where i_title_id = @titleid
            //delete from uodb.dbo.t_title_ratings where i_title_id = @titleid
            //delete from uodb.dbo.t_titles where i_title_id = @titleid
            //
            //delete from webdb.dbo.t_title_name_info where i_title_id = @titleid
            //delete from webdb.dbo.t_title_info where i_title_id = @titleid


        } // delete

        public static void DeleteTitleID( uint titleID )
        {
            //all tables affected by p_svc_insert_title
        }


    //task: will be done as part of bug 42198
        public static void DeleteBaseVersion( uint titleID, int baseVer, ref StringBuilder procInfo )
        {
            //retrieve all rows for this title
            //loop through them, identifying any associated with this base version
            //add to-be-deleted to a hash table

            //loop through deletion hashtable to delete each base version

        }


        //  DeleteVersion
        public static void DeleteVersion( uint titleID, int ver, ConsoleTypeEnum consoleType, ref StringBuilder procInfo )
        {
            //we're supposed to get the app name from the config...
            //how often are we going to change the appname?  seems overly complex.
            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.uodb, Site.main);
            string webstoreApplicationName = viInfo.WebstoreApp;

            ArrayList paramlist = new ArrayList();
            SqlParameter sp = null;

            //for the UODB call
            sp = new SqlParameter( "@i_title_id", SqlDbType.Int );
            sp.Value = (int) titleID;
            paramlist.Add( sp );

            sp = new SqlParameter( "@i_base_version", SqlDbType.Int );
            sp.Value = ver;
            paramlist.Add( sp );

            sp = new SqlParameter( "@ti_console_type_id", SqlDbType.TinyInt );
            sp.Value = (byte)consoleType;
            paramlist.Add( sp );

            //t_title_versions
            ExecuteWebstoreNonQuery( webstoreApplicationName, paramlist, "dbo.p_svc_delete_title_version", ref procInfo );

        } //add title id


        public static void DeleteAltTitleID( uint titleID )
        {
            //delete alt title id / svc info
        }

        public static void DeleteBounty( uint titleID )
        {
        }

        public static void DeleteRatings( uint titleID )
        {
        }


        #endregion Title Deleting Methods

    } //class

    public class InvalidUODBConfigurationException : Exception, ISerializable
    {
        const string message = "Invalid configuration -- UODB partitions are not the same.";
        public InvalidUODBConfigurationException( int partition ) :  base( message + " Check partition " + partition ) { }
        public InvalidUODBConfigurationException( ) :  base( message ) { }
        public InvalidUODBConfigurationException( SerializationInfo info, StreamingContext context ) :  base( info, context ) { }

    }

    public class DuplicateTitleException : Exception, ISerializable
    {
        const string message = "The specified TitleID already exists in the service.";
        public DuplicateTitleException( ) :  base( message ) { }
        public DuplicateTitleException( SerializationInfo info, StreamingContext context ) :  base( info, context ) { }

    }

} // namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\title\ImageLibrary.cs ===
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Globalization;
using System.IO;


using Microsoft.Webstore.WstClient; 


using xonline.common.config;
using xonline.common.livetitleconfig;
using xonline.common.sql.webstore;
using xonline.common.tools;
using xonline.common.tools.stutilcore;
using xonline.common.xlastutil;



namespace xonline.common.title
{
 

     public class BaseLibrary
     {
         protected ArrayList   errors;
 
         protected BaseLibrary()
         {
             errors = new ArrayList();
         }
 
 
         public bool ErrorsDetected()
         {
             return (errors.Count > 0) ? true : false;
         }
     
         public string ErrorText()
         {
             string text = "Detected " + errors.Count + " errors\n";
     
             foreach (string x in errors)
                 text += "    " + x + "\n";
     
             return text;
         }
     }
     
 
 



    public class StringLibrary  : BaseLibrary
     {
         Hashtable   library;
      
         public Hashtable   cultures;
         public Hashtable   locales;
         public ArrayList   languages;
 
         string      defaultLocale;
         int         defaultLanguageId;
         int         cLocales;

         public const string XLAST_CHINESE_LOCALE_CODE = "zh-CHT";
         public const int    UODB_CHINESE_LANGUAGE_ID  = 8;

 
         
         /* StringLibrary (constructor)
          * ------------------------------------
          * The constructor is used to preparse and validate the LocalizedStrings
          * section of the GCP portion of the XLAST file.  The actions here are
          * folded into a single class because the some activities here depend on
          * information in the UODB.
          *
          *
          * There are several lists constructed:
          *
          * cultures (hashtable)
          * calculated from the UODB and maps each distinct language ID
          * to an ArrayList of all the culture IDs that use that language
          *
          * library (GCP)
          * Maps each string ID to a child hashtable which in turn maps each
          * language ID to a translated string.  Note that because this is
          * constructed from the GCP, if a given langauge is not listed as
          * supported, an entry will not be created for that language ID in 
          * the child hashtable (IE it is the class' responsibility to calculate
          * the correct default translation to use based on the setting of the
          * GCP's defaultLocale setting.)
          *
          * locales (GCP + UODB)
          * Despite its name, the actual purpose of this table is to create a
          * list of language IDs that map to the corresponding language CODEs
          * (eg en-US) that are present in the GCP.
          *
          *
         */
         public StringLibrary(LocalizedStrings strings) : base()
         {
             cultures  = new Hashtable(50);
             locales   = new Hashtable(strings.SupportedLocale.Length);
             library   = new Hashtable(strings.LocalizedString.Length);
 
 
             if (strings.defaultLocale == null)
                 errors.Add("XLAST did not specify a defaultLocale for LocalizedStrings!");
             else
                 defaultLocale = strings.defaultLocale;
 
 
             if (strings.SupportedLocale == null)
                 errors.Add("XLAST did not specify any SupportedLocales for LocalizedStrings!");
             else
                 cLocales = strings.SupportedLocale.Length;
 
 
 
             foreach (SupportedLocale x in strings.SupportedLocale)
             {
                 // $BUG: Xenon#53651 -- we know that the XLAST file will specify
                 // Chineese as zh-cht, but we also know that the t_cultures table
                 // doesn't have an entry for zh-CHT, so the loop below won't be
                 // able to draw up a match.  To compensate, we're going to hardcode
                 // a mapping for zh-CHT to language ID 8
                 //
                 if (String.Compare(x.locale, XLAST_CHINESE_LOCALE_CODE, true) == 0)
                     locales.Add(x.locale, UODB_CHINESE_LANGUAGE_ID);
                 else
                     locales.Add(x.locale, 0);
             }
 
     
             using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.READORWRITE_COMMANDTYPE))
             {
                 // Data is partitioned by user puid
                 ws.PartitionType   = WstPartitionType.Logical;
                 ws.Partition       = WstCommand.AnyPartition;
                 ws.StoredProc      = "dbo.p_svc_get_cultures";
                 
                 WstDataReader r = ws.Execute();
 
                 while (r.Read())
                 {
                     int cultureID       = r.GetInt32(0);
                     int languageID      = r.GetInt32(4);
                     string cultureCode  = r.GetString(3);
                     byte bLiveSupported  = (byte) r.GetByte(5);
 

                     // Xenon#85146: The XLAST file can contain translations with xx-XX codes
                     // that map to cultures (t_cultures records) that are not 'live enabled' 
                     // (ti_xbox_live_supported != 0).  Currently (02/07/07) pl-PL is one such
                     // case.  It's i_language_id is inappropriately set to 1 which suggests
                     // that the translations it supplies are for english.  To avoid Hashtable
                     // key collisions, we ignore records that are indicated as not supporting
                     // live, thereby avoiding this potential headache.  The corollary here then
                     // is that when such records ARE set to indicate live support, they must
                     // also supply a valid and unique (at least among the codes enumerated in
                     // an XLAST file) language ID
                     //
                     if (bLiveSupported != 0)
                     {
                         if (locales.ContainsKey(cultureCode))
                             locales[cultureCode] = languageID;
                     
                         if (defaultLocale == cultureCode)
                             defaultLanguageId = languageID;
                     
                         if (cultures[languageID] == null)
                             cultures[languageID] = new ArrayList();
                    
                         ((ArrayList)cultures[languageID]).Add(cultureID);
                     }
                 }
             }
     
 
             //-----------------------------------------------------------------
             // Now that we have our reference tables loaded, rip through the
             // XLAST and break out the localized strings into a dual level 
             // HashTable parititioned first by string ID and then by language ID
             //
             if (strings.LocalizedString != null)
             {
                 foreach (LocalizedString x in strings.LocalizedString)
                 {
                     if (x.idSpecified)
                     {
                         Hashtable y = new Hashtable(cLocales);
 
                         foreach (Translation z in x.Translation)
                         {
                             int languageID = (int) locales[z.locale];

                             // If the languageID for the locale is still set to zero, then it means that we were
                             // unable correlate it to a t_cultures record which means that we don't know what
                             // language the translation is in.  As such, we can't do anything with the string
                             // so we have no recourse but to ignore it
                             //
                             if (languageID != 0)
                             {
                                 if (y.ContainsKey(languageID))
                                 {
                                     Console.WriteLine("WARNING: Duplicate language translation " + z.locale + " to language " + languageID);
                                 }
                                 else
                                 {
                                     // bug 40260 - a space will deserialize as a null, causing problems downstream
                                     // change it here, and everyone should be happy. 
                                     if ( z.Value == null ) 
                                     {
                                         y.Add(languageID, "");
                                     }
                                     else
                                     {
                                         y.Add(languageID, z.Value);
                                     }
                                 }
                             }
                         }
 
                         library.Add(x.id, y);
                     }
                 }
             }
         } // StringLibrary(ctor)
 
 
         public string GetString(System.UInt16 id, int languageId)
         {
             Hashtable t = (Hashtable) library[id];

             if(t == null)
                 throw new ApplicationException(string.Format("The specified string id {0} does not exist in the LocalizedStrings collection.", id));
 
             if (!locales.ContainsValue(languageId))
                 languageId = defaultLanguageId;
 
             return (string) t[languageId];
         }
 
         public bool Exists(System.UInt16 id, int languageId)
         {
             Hashtable t = (Hashtabl