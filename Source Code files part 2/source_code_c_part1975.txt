ocales = locales;
        }

        private Contributor(SqlDataReader reader)
        {
            this.id = SqlHelper.GetNullableGuid(reader, "contributorId");
            this.metadataProviderId = SqlHelper.GetNullableInt32(reader, "metadataProviderId");
            this.birthDate = SqlHelper.GetNullableDateTime(reader, "birthDate");
            this.displayBirthDate = SqlHelper.GetNullableString(reader, "displayBirthDate");
            this.birthPlace = SqlHelper.GetNullableString(reader, "birthPlace");
            this.deathDate = SqlHelper.GetNullableDateTime(reader, "deathDate");
            this.displayDeathDate = SqlHelper.GetNullableString(reader, "displayDeathDate");
            this.deathPlace = SqlHelper.GetNullableString(reader, "deathPlace");
            this.isGroup = SqlHelper.GetNullableByte(reader, "isGroup") != 0;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the id of this contributor.
        /// </summary>
        public Guid Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets the MetadataProviderId of this Contributor.
        /// </summary>
        public int MetadataProviderId
        {
            get
            {
                return this.metadataProviderId;
            }
            set
            {
                this.metadataProviderId = value;
            }
        }

        /// <summary>
        /// Gets or sets the birthdate of this contributor.
        /// </summary>
        public DateTime BirthDate
        {
            get
            {
                if (this.birthDate == null)
                {
                    return DateTime.MinValue;
                }
                return this.birthDate.Value;
            }
            set
            {
                if (this.birthDate == DateTime.MinValue)
                {
                    this.birthDate = null;
                }
                else
                {
                    Validate.ValidateDate(ref value);
                    this.birthDate = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets the display birthdate for this contributor.
        /// </summary>
        public string DisplayBirthDate
        {
            get
            {
                return this.displayBirthDate;
            }
            set
            {
                Validate.IsNotLongerThan(value, displayBirthDateLength, "DisplayBirthDate", "DisplayBirthDate");
                this.displayBirthDate = value;
            }
        }

        /// <summary>
        /// Gets or sets the birth place of this contributor.
        /// </summary>
        public string BirthPlace
        {
            get
            {
                return this.birthPlace;
            }
            set
            {
                Validate.IsNotLongerThan(value, birthPlaceLength, "BirthPlace", "BirthPlace");
                this.birthPlace = value;
            }
        }

        /// <summary>
        /// Gets or sets the death date for this contributor.
        /// </summary>
        public DateTime DeathDate
        {
            get
            {
                if (this.deathDate == null)
                {
                    return DateTime.MinValue;
                }
                return this.deathDate.Value;
            }
            set
            {
                if (this.deathDate == DateTime.MinValue)
                {
                    this.deathDate = null;
                }
                else
                {
                    Validate.ValidateDate(ref value);
                    this.deathDate = value;
                }

            }
        }

        /// <summary>
        /// Gets or sets the display death date for this contributor.
        /// </summary>
        public string DisplayDeathDate
        {
            get
            {
                return this.displayDeathDate;
            }
            set
            {
                Validate.IsNotLongerThan(value, displayDeathDateLength, "DisplayDeathDate", "DisplayDeathDate");
                this.displayDeathDate = value;
            }
        }

        /// <summary>
        /// Gets or sets the death place for this contributor.
        /// </summary>
        public string DeathPlace
        {
            get
            {
                return this.deathPlace;
            }
            set
            {
                Validate.IsNotLongerThan(value, deathPlaceLength, "DeathPlace", "DeathPlace");
                this.deathPlace = value;
            }
        }

        /// <summary>
        /// Gets or sets whether this is a group contributor (i.e., music band)
        /// </summary>
        public bool IsGroup
        {
            get
            {
                return this.isGroup;
            }
            set
            {
                this.isGroup = value;
            }
        }

        /// <summary>
        /// Gets or sets the list of articles this contributor is referenced.
        /// </summary>
        public ContributorArticle[] Articles
        {
            get
            {
                return this.articles.ToArray();
            }
            set
            {
                this.articles.Clear();
                this.articles.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the list of aliases associated with this contributor.
        /// </summary>
        public ContributorAlias[] Aliases
        {
            get
            {
                return this.aliases.ToArray();
            }
            set
            {
                this.aliases.Clear();
                this.aliases.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the list of categories this contributor is associated with.
        /// </summary>
        public ContributorCategory[] Categories
        {
            get
            {
                return this.categories.ToArray();
            }
            set
            {
                this.categories.Clear();
                this.categories.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the localized display names for this contributor.
        /// </summary>
        public ContributorLocale[] Locales
        {
            get
            {
                List<ContributorLocale> retval = new List<ContributorLocale>();
                foreach (ContributorLocale locale in locales)
                {
                    if (!retval.Exists(delegate(ContributorLocale cl) { return (cl.Lcid == locale.Lcid); }))
                    {
                        retval.Add(locale);
                    }
                }
                return retval.ToArray();
            }
            set
            {
                foreach (ContributorLocale locale in value)
                {
                    if (!locale.targetingLocales.Exists(delegate(ContributorLocaleMap clm) { return (clm.Lcid == locale.Lcid); }))
                    {
                        locale.targetingLocales.Add(new ContributorLocaleMap(locale.Lcid));
                    }
                    foreach (ContributorLocaleMap targetingLocale in locale.TargetingLocales)
                    {
                        this.locales.Add(locale);
                    }
                }
            }
        }

        /// <summary>
        /// Gets or sets the relationship for this contributor.
        /// </summary>
        public ContributorRelationship[] Relationships
        {
            get
            {
                return this.relationships.ToArray();
            }
            set
            {
                this.relationships.Clear();
                this.relationships.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                // We will cascade Adds and Deletes below in the Save operation
                // because we can't guarantee the order of SOAP calling property setters.
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a Contributor for the given id.
        /// </summary>
        /// <param name="id">The id of the Contributor to retrieve.</param>
        /// <returns>The Contributor of the given id.</returns>
        public static Contributor Get(Guid id)
        {
            // The other overloaded Get is a superset of this one, so we just format the input parameter as an array and use it to avoid code duplication.
            Guid[] ids = new Guid[1];
            ids[0] = id;
            List<Contributor> retval = Get(ids);
            if (retval.Count > 0)
            {
                return retval[0];
            }
            return null;
        }

        /// <summary>
        /// Gets the list Contributors for the given ids.
        /// </summary>
        /// <returns>The list of Contributors in the system.</returns>
        public static List<Contributor> Get(Guid[] ids)
        {
            // We can get multiple contributors mixed together in the result set.  We will keep them organized in a Dictionary by contributorId
            Dictionary<Guid, Contributor> contributors = new Dictionary<Guid, Contributor>();

            // remove duplicates if exists
            foreach (Guid id in ids)
            {
                if (!contributors.ContainsKey(id))
                {
                    contributors.Add(id, null);
                }
            }
            ids = new Guid[contributors.Keys.Count];
            int i = 0;
            foreach (Guid id in contributors.Keys)
            {
                ids[i++] = id;
            }
            contributors.Clear();

            XmlSerializer serializer = new XmlSerializer(typeof(Guid[]));
            TextWriter writer = new StringWriter();
            serializer.Serialize(writer, ids);

            using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "ContributorGet",
                    writer.ToString()))
            {
                // First get all of the Contributor records
                while (reader.Read())
                {
                    Guid contributorId = reader.GetGuid(reader.GetOrdinal("contributorId"));
                    contributors.Add(contributorId, new Contributor(reader));
                }

                // get the articles for each contributor
                reader.NextResult();
                while (reader.Read())
                {
                    Guid contributorId = reader.GetGuid(reader.GetOrdinal("contributorId"));
                    Contributor contributor = contributors[contributorId];
                    contributor.articles.Add(new ContributorArticle(reader));
                }

                // get the aliases for each contributor
                reader.NextResult();
                while (reader.Read())
                {
                    Guid contributorId = reader.GetGuid(reader.GetOrdinal("contributorId"));
                    Contributor contributor = contributors[contributorId];
                    contributor.aliases.Add(new ContributorAlias(reader));
                }

                // Get the categories for each contributor
                reader.NextResult();
                while (reader.Read())
                {
                    Guid contributorId = reader.GetGuid(reader.GetOrdinal("contributorId"));
                    Contributor contributor = contributors[contributorId];
                    contributor.categories.Add(new ContributorCategory(reader));
                }

                // Get the contributorLocales for each contributor
                reader.NextResult();
                while (reader.Read())
                {
                    Guid contributorId = reader.GetGuid(reader.GetOrdinal("contributorId"));
                    Contributor contributor = contributors[contributorId];
                    ContributorLocale cl = new ContributorLocale(reader);
                    contributor.locales.Add(cl);
                }
                // Some locales just map to other existing ones.  Update the mapped locale 
                // and re-add it to the contributor's dictionary with the new lcid
                reader.NextResult();
                while (reader.Read())
                {
                    Guid contributorId = reader.GetGuid(reader.GetOrdinal("contributorId"));
                    int lcid = reader.GetInt32(reader.GetOrdinal("lcid"));
                    int lcidMap = reader.GetInt32(reader.GetOrdinal("lcidMap"));
                    // We already added ContributorLocales for their own languange in the previous result set.
                    if (lcid == lcidMap)
                    {
                        continue;
                    }

                    Contributor contributor = contributors[contributorId];
                    ContributorLocale cl = contributor.locales.Find(delegate(ContributorLocale locale) { return locale.Lcid == lcidMap; });
                    cl.targetingLocales.Add(new ContributorLocaleMap(lcid));
                    contributor.locales.Add(cl);
                }

                // Get the relationships for this contributor
                reader.NextResult();
                while (reader.Read())
                {
                    Guid contributorId = reader.GetGuid(reader.GetOrdinal("contributorId"));
                    Contributor contributor = contributors[contributorId];
                    contributor.relationships.Add(new ContributorRelationship(reader));
                }
            }

            // Move the contributor values from the Dictionary to a List<Contributor> to return the result set.
            List<Contributor> retval = new List<Contributor>();
            foreach (Contributor c in contributors.Values)
            {
                retval.Add(c);
            }
            return retval;
        }

        /// <summary>
        /// Adds the fields of this Contributor object to the supplied Serialization context in preparation for sending to SQL.
        /// </summary>
        /// <param name="context"></param>
        public virtual void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("Contributor");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("contributorId", this.Id);
                context.SerializeElement("metadataProviderId", this.metadataProviderId);
                context.SerializeElement("birthDate", this.birthDate);
                context.SerializeElement("displayBirthDate", this.displayBirthDate);
                context.SerializeElement("birthPlace", this.birthPlace);
                context.SerializeElement("deathDate", this.deathDate);
                context.SerializeElement("displayDeathDate", this.displayDeathDate);
                context.SerializeElement("deathPlace", this.deathPlace);
                context.SerializeElement("isGroup", this.isGroup);

                foreach (ContributorArticle ca in articles)
                {
                    ca.ContributorId = this.id;
                    ca.Serialize(context);
                }

                foreach (ContributorCategory cc in categories)
                {
                    cc.ContributorId = this.id;
                    cc.Serialize(context);
                }

                foreach (ContributorLocale cl in Locales)
                {
                    cl.ContributorId = this.id;
                    cl.Serialize(context);
                }

                foreach (ContributorAlias ca in Aliases)
                {
                    ca.ContributorId = this.id;
                    ca.Serialize(context);
                }

                foreach (ContributorRelationship cr in relationships)
                {
                    cr.ContributorId = this.id;
                    cr.Serialize(context);
                }

                context.SerializeEndElement();
            }
            else
            {
                //If this Contributor is to be added/deleted; mark all children to be added/deleted.
                if (this.modified == DataChangeType.Add || this.modified == DataChangeType.Delete)
                {
                    this.SetModified(this.modified, true);
                }

                if (this.modified != DataChangeType.None)
                {
                    context.SerializeStartElement("Contributor");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("contributorId", this.Id);
                    context.SerializeElement("metadataProviderId", this.metadataProviderId);
                    context.SerializeElement("birthDate", this.birthDate);
                    context.SerializeElement("displayBirthDate", this.displayBirthDate);
                    context.SerializeElement("birthPlace", this.birthPlace);
                    context.SerializeElement("deathDate", this.deathDate);
                    context.SerializeElement("displayDeathDate", this.displayDeathDate);
                    context.SerializeElement("deathPlace", this.deathPlace);
                    context.SerializeElement("isGroup", this.isGroup);
                    context.SerializeEndElement();
                }

                foreach (ContributorArticle ca in articles)
                {
                    ca.ContributorId = this.id;
                    ca.Serialize(context);
                }
                foreach (ContributorCategory cc in categories)
                {
                    cc.ContributorId = this.id;
                    cc.Serialize(context);
                }
                foreach (ContributorLocale cl in Locales)
                {
                    cl.ContributorId = this.id;
                    cl.Serialize(context);
                }
                foreach (ContributorAlias ca in Aliases)
                {
                    ca.ContributorId = this.id;
                    ca.Serialize(context);
                }
                foreach (ContributorRelationship cr in relationships)
                {
                    cr.ContributorId = this.id;
                    cr.Serialize(context);
                }
            }            
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::contributorId");
                if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::metadataProviderId");
                if (null != attr) this.metadataProviderId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::birthDate");
                if (null != attr) this.birthDate = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::displayBirthDate");
                if (null != attr) this.displayBirthDate = attr.InnerText;

                attr = node.SelectSingleNode("child::birthPlace");
                if (null != attr) this.birthPlace = attr.InnerText;

                attr = node.SelectSingleNode("child::deathDate");
                if (null != attr) this.deathDate = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::displayDeathDate");
                if (null != attr) this.displayDeathDate = attr.InnerText;

                attr = node.SelectSingleNode("child::deathPlace");
                if (null != attr) this.deathPlace = attr.InnerText;

                attr = node.SelectSingleNode("child::isGroup");
                if (null != attr) this.isGroup = Serialization.DeserializeBoolElement(attr.InnerText);

                XmlNodeList childItems = node.SelectNodes("child::ContributorArticle");
                foreach (XmlNode child in childItems)
                {
                    ContributorArticle article = new ContributorArticle();
                    article.Deserialize(child);
                    this.articles.Add(article);
                }

                childItems = node.SelectNodes("child::ContributorAlias");
                foreach (XmlNode child in childItems)
                {
                    ContributorAlias alias = new ContributorAlias();
                    alias.Deserialize(child);
                    this.aliases.Add(alias);
                }

                childItems = node.SelectNodes("child::ContributorCategory");
                foreach (XmlNode child in childItems)
                {
                    ContributorCategory category = new ContributorCategory();
                    category.Deserialize(child);
                    this.categories.Add(category);
                }

                childItems = node.SelectNodes("child::ContributorLocale");
                foreach (XmlNode child in childItems)
                {
                    ContributorLocale locale = new ContributorLocale();
                    locale.Deserialize(child);
                    this.locales.Add(locale);
                }

                childItems = node.SelectNodes("child::ContributorRelationship");
                foreach (XmlNode child in childItems)
                {
                    ContributorRelationship relation = new ContributorRelationship();
                    relation.Deserialize(child);
                    this.relationships.Add(relation);
                }
            }
        }


        /// <summary>
        /// Save changes made to Contributor objects specified as xml.
        /// </summary>
        /// <param name="xmlContributor"></param>
        public static void Save(string xmlContributor)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "ContributorSave",
                        xmlContributor);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "ContributorSave");
                throw;
            }
        }

        /// <summary>
        /// Saves a contributor object to the database
        /// </summary>
        /// <param name="contributor">The contributor whose data is to be saved.</param>
        public static void Save(Contributor contributor)
        {
            if (contributor == null)
            {
                throw new ArgumentNullException("Can not save null contributor");
            }

            using (Serialization serializer = new Serialization())
            {
                serializer.SerializeStartElement("Data");
                contributor.Serialize(serializer);
                serializer.SerializeEndElement();
                Contributor.Save(serializer.ResultXml);
            }
                        
            
        }

        /// <summary>
        /// Sets this object's modified flag, and whether to cascade down to any
        /// children this object has.
        /// </summary>
        /// <remarks>
        /// One caveate, Cascading Adds will not overwrite Deletes on child records.
        /// </remarks>
        /// <param name="type">Indicate the type of data change made</param>
        /// <param name="cascade">Indicate whether to cascade change to all objects contained by this object.</param>
        public virtual void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
            if (cascade)
            {
                //Set articles
                foreach (ContributorArticle ca in articles)
                {
                    if (!(type == DataChangeType.Add &&
                          ca.Modified == DataChangeType.Delete))
                    {
                        ca.SetModified(type, cascade);
                    }
                }

                // Set categorie3s
                foreach (ContributorCategory cc in categories)
                {
                    if (!(type == DataChangeType.Add &&
                          cc.Modified == DataChangeType.Delete))
                    {
                        cc.SetModified(type, cascade);
                    }
                }

                //Set contributorLocales
                foreach (ContributorLocale cl in locales)
                {
                    if (!(type == DataChangeType.Add &&
                          cl.Modified == DataChangeType.Delete))
                    {
                        cl.SetModified(type, cascade);
                    }
                }

                //Set relationships
                foreach (ContributorRelationship cr in relationships)
                {
                    if (!(type == DataChangeType.Add &&
                          cr.Modified == DataChangeType.Delete))
                    {
                        cr.SetModified(type, cascade);
                    }
                }
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\CategoryLocale.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the CategoryLocale data in the catalog, and aids in the creation of
    /// the CategoryLocale object.
    /// </summary>
    public class CategoryLocale : ICatalogData
    {
        #region Fields
        private int categoryId;
        private int lcid;
        private string name;
        private List<int> lcidMaps = new List<int>();
        private DataChangeType modified;
        #endregion

        #region Contstructors
        /// <summary>
        /// Empty constructor so this class serializes over SOAP.
        /// </summary>
        public CategoryLocale()
        {
        }

        /// <summary>
        /// Initialize a new instance of the CatagorySystem from a SQLdata reader.  
        /// </summary>
        /// <param name="reader"></param>
        internal CategoryLocale(SqlDataReader reader)
        {
            categoryId = reader.GetInt32(reader.GetOrdinal("categoryId"));
            lcid = reader.GetInt32(reader.GetOrdinal("lcid"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        ///  Gets the id of the category to which this CategoryLocale belongs.
        /// </summary>
        public int CategoryId
        {
            get
            {
                return this.categoryId;
            }
            set
            {
                this.categoryId = value;
            }
        }

        /// <summary>
        ///  Gets the lcid of this CategoryLocale.
        /// </summary>
        public int Lcid
        {
            get
            {
                return this.lcid;
            }
            set
            {
                this.lcid = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of this CategoryLocale.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                Validate.IsNotEmpty(value, "Name", "Name");
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets the list of Lcids of locales this CategoryLocale associated with.
        /// </summary>
        public List<int> LcidMaps
        {
            get
            {
                return this.lcidMaps;
            }
            set
            {
                this.lcidMaps = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public virtual DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }

        #endregion

        /// <summary>
        /// Serialize the CategoryLocale object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public virtual void Serialize(Serialization context)
        {
            //If this video series is to be added/deleted; mark all children to be added/deleted.
            if (this.modified == DataChangeType.Add || this.modified == DataChangeType.Delete)
            {
                this.SetModified(this.modified, true);
            }

            if (modified != DataChangeType.None)
            {
                // Category
                context.SerializeStartElement("CategoryLocale");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("lcid", this.lcid );
                context.SerializeElement("name", this.name );
                context.SerializeEndElement();
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {

        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public virtual void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\CategorySystem.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides editing and retrieving of CategorySystem data in the catalog, and aids in the 
    /// creation of the CategorySystem object.
    /// </summary>
    public class CategorySystem : Utils.IKeyed<Int32>
    {
        #region Fields
        private int id;
        private string name;
        private bool isCorporation;
        private List<Category> categories = new List<Category>();

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        //private static readonly Utils.KeyedCache<Int32,CategorySystem> CategorySystemCache = new Utils.KeyedCache<Int32,CategorySystem>(
          //              new Utils.KeyedCache<Int32,Catalog.CategorySystem>.CachedDataLoaderDelegate( GetData ),
            //            CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Default constructor required for SOAP.
        /// </summary>
        public CategorySystem()
        {
        }

        /// <summary>
        /// Initialize a new instance of the CatagorySystem class with id to be assigned by the system.  
        /// </summary>
        /// <param name="name">The name of this CategorySystem.</param>
        /// <param name="isCorporation">Indicates whether this CategorySystem is really a corporation (thus referencing extended corporation information)</param>
        /// <param name="categories">The list of <c>Category</c> associated with this CategorySystem.</param>
        public CategorySystem(string name, bool isCorporation, Category[] categories)
        {
            Validate.IsNotEmpty(name, "Name", "name");
            this.id = -1;
            this.name = name;
            this.isCorporation = isCorporation;
            this.categories.AddRange(categories);
        }

        /// <summary>
        /// Initialize a new instance of the CatagorySystem class with fully populated values.  
        /// </summary>
        /// <param name="id">The id of this CategorySystem.</param>
        /// <param name="name">The name of this CategorySystem.</param>
        /// <param name="isCorporation">Indicates whether this CategorySystem is really a corporation (thus referencing extended corporation information)</param>
        /// <param name="categories">The list of <c>Category</c> associated with this CategorySystem.</param>
        public CategorySystem(int id, string name, bool isCorporation, Category[] categories)
        {
            Validate.IsNotNull(id, "Id", "id");
            Validate.IsNotEmpty(name, "Name", "name");
            this.id = id;
            this.name = name;
            this.isCorporation = isCorporation;
            this.categories.AddRange(categories);
        }

        /// <summary>
        /// Initialize a new instance of the CatagorySystem from a SQLdata reader.  
        /// </summary>
        /// <param name="reader"></param>
        internal CategorySystem(SqlDataReader reader)
        {
            id = reader.GetInt32(reader.GetOrdinal("categorySystemId"));
            name = reader.GetString(reader.GetOrdinal("name"));
            isCorporation = reader.GetByte(reader.GetOrdinal("isCorporation")) == 0 ? false : true;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the id of this CategorySystem.
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }
        /// <summary>
        /// Gets or sets the name of this CategorySystem.
        /// </summary>
        /// <exception cref="System.ArgumentNullException">thrown when you attempt to set the name to null or the empty string</exception>
        /// <exception cref="System.ArgumentException">thrown when you attempt to set the name to a value whose lenght exceeds 50 characters</exception>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                Validate.IsNotEmpty(value, "Name", "Name");
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets whether this CategorySystem is a corporation or not.
        /// </summary>
        public bool IsCorporation
        {
            get
            {
                return this.isCorporation;
            }
            set
            {
                Validate.IsNotNull(value, "IsCorporation", "IsCorporation");
                this.isCorporation = value;
            }
        }

        /// <summary>
        /// Gets or sets all top level <c>Category</c> associated with this CategorySystem.
        /// </summary>
        public Category[] Categories
        {
            get
            {
                return this.categories.ToArray();
            }
            set
            {
                this.categories.AddRange(value);
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Gets a CategorySystem for the given id.
        /// </summary>
        /// <param name="id">The id of the CatagorySystem to retrieve.</param>
        /// <returns>The CatagorySystem for the given id.</returns>
        public static CategorySystem Get(Int32 id)
        {
            CategorySystem categorySystem = null;
            CategorySystemContainer.GetCategorySystemContainer().IndexedCategorySystems.TryGetValue( id, out categorySystem );
            return categorySystem;
        }

        /// <summary>
        /// Gets all CategorySystem in the Catalog.
        /// </summary>
        public static List<CategorySystem> Get()
        {
            return CategorySystemContainer.GetCategorySystemContainer().AllCategorySystems;
        }

        /// <summary>
        /// Gets a category by its id.
        /// </summary>
        public static Category GetCategoryById(Int32 categoryId)
        {
            Category category = null;
            CategorySystemContainer.GetCategorySystemContainer().IndexedAllCategories.TryGetValue( categoryId, out category );
            return category;
        }

        /// <summary>
        /// Saves a category and refreshes the cache.
        /// </summary>
        public static void SaveCategory( Category category )
        {
            Category.Save( category );
            CategorySystemContainer.Refresh();
        }

        /// <summary>
        /// Gets all CategorySystem from the db.
        /// </summary>
        private static List<CategorySystem> GetData()
        {
            Dictionary<Int32,CategorySystem> categorySystems = new Dictionary<Int32,CategorySystem>();
            
            using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "CategorySystemGet"
                    ))
            {
                while( reader.Read() )
                {
                    CategorySystem categorySystem = new CategorySystem( reader );
                    categorySystems.Add( categorySystem.Id, categorySystem );
                }

                // Add categories
                Dictionary<Int32,Dictionary<Int32,Category>> categorySystemDictionary = new Dictionary<Int32,Dictionary<Int32,Category>>();
                Dictionary<Int32,List<Category>> categorySystemOrphanCategories = new Dictionary<Int32,List<Category>>();
                reader.NextResult();
                while ( reader.Read())
                {
                    Int32 categorySystemId = reader.GetInt32(reader.GetOrdinal("categorySystemId"));
                    Dictionary<Int32,Category> categoryDictionary = null;
                    if ( !categorySystemDictionary.TryGetValue( categorySystemId, out categoryDictionary ))
                    {
                        categoryDictionary = new Dictionary<Int32,Category>();
                        categorySystemDictionary.Add( categorySystemId, categoryDictionary );
                    }
                    Category category = new Category( reader );
                    if ( category.ParentCategoryId == null )
                    {
                        CategorySystem categorySystem = null;
                        if ( categorySystems.TryGetValue( categorySystemId, out categorySystem ))
                        {
                            categorySystem.AddRootLevelCategory( category );
                            categoryDictionary.Add( category.Id, category );
                        }
                    }
                    else
                    {
                        categoryDictionary.Add( category.Id, category );
                        Int32 parentCategoryId = (Int32)category.ParentCategoryId;
                        Category parentCategory;
                        categoryDictionary.TryGetValue( parentCategoryId, out parentCategory );
                        if ( parentCategory != null )
                        {
                            // we are in luck - the parent has already been read from the db. Simply add
                            // this category to the parents children
                            parentCategory.AddSubCategory(category);
                        }
                        else
                        {
                            // messy situation - we need to add this to the dictionary. But we also
                            // need to keep a record of it because it has not been added to its parent
                            // At the end we need to cycle through and add to all parents
                            List<Category> orphanCategories = null;
                            if ( !categorySystemOrphanCategories.TryGetValue( categorySystemId, out orphanCategories ))
                            {
                                orphanCategories = new List<Category>();
                                categorySystemOrphanCategories.Add( categorySystemId, orphanCategories );
                            }
                            orphanCategories.Add( category );
                        }
                    }
                }
            
                // give the orphans a home - cycle through the list of orphans and find their parents
                // since we have now read in all the categories, we should have all the parents.
                foreach( Int32 categorySystemId in categorySystemDictionary.Keys )
                {
                    List<Category> orphanCategories = null;
                    if ( !categorySystemOrphanCategories.TryGetValue( categorySystemId, out orphanCategories ))
                    {
                        // no orphans - skip
                        continue;
                    }
                    Dictionary<Int32,Category> categoryDictionary = null;
                    if ( !categorySystemDictionary.TryGetValue( categorySystemId, out categoryDictionary ))
                    {
                        categoryDictionary = new Dictionary<Int32,Category>();
                        categorySystemDictionary.Add( categorySystemId, categoryDictionary );
                    }
                    
                    foreach( Category category in orphanCategories )
                    {
                        Category parentCategory;
                        if ( categoryDictionary.TryGetValue( (Int32)(category.ParentCategoryId), out parentCategory ))
                        {
                            parentCategory.AddSubCategory(category);
                        }
                    }
                }


                // Add the CategoryCorporationLocales
                reader.NextResult();
                while ( reader.Read())
                {
                    Int32 categorySystemId = reader.GetInt32(reader.GetOrdinal("categorySystemId"));
                    Dictionary<Int32,Category> categoryDictionary = null;
                    if ( categorySystemDictionary.TryGetValue( categorySystemId, out categoryDictionary ))
                    {
                        CategoryCorporationLocale categoryCorporationLocale = new CategoryCorporationLocale( reader );
                        Category category;
                        if ( categoryDictionary.TryGetValue( (Int32)(categoryCorporationLocale.CategoryId), out category ))
                        {
                            category.AddCategoryLocale(categoryCorporationLocale);
                        }
                    }
                }

                // Add the CategoryLocales
                reader.NextResult();
                while ( reader.Read())
                {
                    Int32 categorySystemId = reader.GetInt32(reader.GetOrdinal("categorySystemId"));
                    Dictionary<Int32,Category> categoryDictionary = null;
                    if ( categorySystemDictionary.TryGetValue( categorySystemId, out categoryDictionary ))
                    {
                        CategoryLocale categoryLocale = new CategoryLocale( reader );
                        Category category;
                        if ( categoryDictionary.TryGetValue( (Int32)(categoryLocale.CategoryId), out category ))
                        {
                            category.AddCategoryLocale(categoryLocale);
                        }
                    }
                }

                // Add the CategoryLocaleMap
                reader.NextResult();
                while ( reader.Read())
                {
                    Int32 categorySystemId = reader.GetInt32(reader.GetOrdinal("categorySystemId"));
                    Dictionary<Int32,Category> categoryDictionary = null;
                    if ( categorySystemDictionary.TryGetValue( categorySystemId, out categoryDictionary ))
                    {
                        Int32 categoryId = reader.GetInt32(reader.GetOrdinal("categoryId"));
                        Category category;
                        if ( categoryDictionary.TryGetValue( categoryId, out category ))
                        {
                            CategoryLocaleMap categoryLocaleMap = new CategoryLocaleMap( 
                                                                    reader.GetInt32(reader.GetOrdinal("lcid")),
                                                                    reader.GetInt32(reader.GetOrdinal("lcidMap"))
                                                                    );
                            category.AddCategoryLocaleMap(categoryLocaleMap);
                        }
                    }
                }
            }

            // Convert the dictionary into a list for return
            List<CategorySystem> categorySystemList = new List<CategorySystem>();
            foreach( CategorySystem categorySystem in categorySystems.Values )
            {
                categorySystemList.Add( categorySystem );
            }
            return categorySystemList;
        }
        /// <summary>
        /// Returns the next available id
        /// </summary>
        /// <returns></returns>
        public static int GetAvailableId()
        {
            try
            {
                int retvalue = Convert.ToInt32(SqlHelper.ExecuteScalar(CatalogDatabase.RawCatalogDBConnectionString, CommandType.Text, "select dbo.GenerateIdCategorySystem()"));
                return retvalue;
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GenerateIdCategorySystem");
                throw;
            }
        }

        /// <summary>
        /// Adds a Category to the CategorySystem
        /// </summary>
        /// <param name="rootLevelCategory"></param>
        public void AddRootLevelCategory(Category rootLevelCategory)
        {
            categories.Add(rootLevelCategory);
        }
        #endregion

        internal class CategorySystemContainer
        {
            private List<CategorySystem> allCategorySystems;
            private Dictionary<Int32,CategorySystem> indexedCategorySystems;
            private Dictionary<Int32,Category> indexedAllCategories;

            public CategorySystemContainer( List<CategorySystem> allCategorySystems,
                                            Dictionary<Int32,CategorySystem> indexedCategorySystems,
                                            Dictionary<Int32,Category> indexedAllCategories )
            {
                this.allCategorySystems = allCategorySystems;
                this.indexedCategorySystems = indexedCategorySystems;
                this.indexedAllCategories = indexedAllCategories;
            }

            public List<CategorySystem> AllCategorySystems
            {
                get { return allCategorySystems; }
            }

            public Dictionary<Int32,CategorySystem> IndexedCategorySystems
            {
                get { return indexedCategorySystems; }
            }

            public Dictionary<Int32,Category> IndexedAllCategories
            {
                get { return indexedAllCategories; }
            }

            public static CategorySystemContainer container;
            public static Object lockObject = new Object();

            public static void Refresh()
            {
                lock( lockObject )
                {
                    container = null;
                }
            }

            public static CategorySystemContainer GetCategorySystemContainer()
            {
                if ( container == null )
                {
                    lock( lockObject )
                    {
                        if ( container == null )
                        {
                            List<CategorySystem> newAllCategorySystems = CategorySystem.GetData();
                            Dictionary<Int32,CategorySystem> newIndexedCategorySystems = new Dictionary<Int32,CategorySystem>();
                            Dictionary<Int32,Category> newIndexedAllCategories = new Dictionary<Int32,Category>();
                            
                            foreach( CategorySystem c in newAllCategorySystems )
                            {
                                newIndexedCategorySystems.Add( c.Id, c );
                                RecursiveAddCategories( c.Categories, newIndexedAllCategories );
                            }

                            return new CategorySystemContainer( newAllCategorySystems, newIndexedCategorySystems, newIndexedAllCategories );
                        }
                    }
                }

                return container;
            }

            private static void RecursiveAddCategories( Category[] categoryList, Dictionary<Int32,Category> allCategories )
            {
                foreach( Category c in categoryList )
                {
                    allCategories.Add( c.Id, c );
                    if (( c.Categories != null ) && ( c.Categories.Length > 0 ))
                    {
                        RecursiveAddCategories( c.Categories, allCategories);
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ContributorAlias.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the ContributorAlias data in the catalog, and aids in the creation of the ContributorAlias object.
    /// </summary>
    /// <remarks>
    /// Note that as this is a uniqe database backed object, if you have two refrences to the same contributor alias, they will always reference the same ContributorAlias instance.
    /// </remarks>
    public class ContributorAlias : ICatalogData
    {
        #region Fields
        private Guid id;
        private string alias;
        private Guid contributorId;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Contructors

        /// <summary>
        /// Empty constructor so this class serialize over SOAP.
        /// </summary>
        public ContributorAlias()
        {
        }

        /// <summary>
        /// Initialize a new instance of the ContributorAlias class with id to be assigned by the system.
        /// </summary>
        /// <param name="alias">The name of this ContributorAlias.</param>
        public ContributorAlias(string alias)
        {
            this.id = Guid.Empty;
            this.alias = alias;
        }

        /// <summary>
        /// Initialize a new instance of the ContributorAlias class with id to be assigned by the system.
        /// </summary>
        /// <param name="id">The id of this ContributorAlias.</param>
        /// <param name="alias">The name of this ContributorAlias.</param>
        public ContributorAlias(Guid id, string alias)
        {
            this.id = id;
            this.alias = alias;
        }

        internal ContributorAlias(SqlDataReader reader)
        {
            this.id =    SqlHelper.GetNullableGuid(reader, "contributorAliasId");
            this.alias = SqlHelper.GetNullableString(reader, "alias");
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the contributorId for this object.
        /// </summary>
        internal Guid ContributorId
        {
            set { this.contributorId = value; }
        }

        /// <summary>
        /// Gets the id of this ContributorAlias.
        /// </summary>
        public Guid Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets the alias name the <c>Contributor</c> uses under this ContributorAlias
        /// </summary>
        public string Alias
        {
            get
            {
                return this.alias;
            }
            set
            {
                Validate.IsNotEmpty(value, "Alias", "Alias");
                this.alias = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes the ContributorAlias object into xml for preparation to save to database.
        /// </summary>
        /// <param name="context"></param>
        public virtual void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("ContributorAlias");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("contributorId", this.contributorId);
                context.SerializeElement("contributorAliasId", this.id);
                context.SerializeElement("alias", this.alias);
                context.SerializeEndElement();
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if(node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::contributorId");
                if (null != attr) this.contributorId = Serialization.DeserializeGuidElement(attr.InnerText);
                
                attr = node.SelectSingleNode("child::contributorAliasId");
                if(null != attr)  this.id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::alias");
                if(null != attr)  this.alias = attr.InnerText;                    
            }
        }

        /// <summary>
        /// Sets this object's modified flag, and whether to cascade down to any
        /// children this object has.
        /// </summary>
        /// <param name="type">Indicate the type of data change made</param>
        /// <param name="cascade">Indicate whether to cascade change to all objects contained by this object.</param>
        public virtual void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ContributorArticle.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the ContributorArticle data, and creation of the MediaContributor class.
    /// </summary>
    public class ContributorArticle : ICatalogData
    {
        #region Fields
        private Guid articleId;
        private int sortOrder;
        private Guid contributorId;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SQLDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal ContributorArticle(SqlDataReader reader)
        {
            this.articleId = SqlHelper.GetNullableGuid(reader, "articleId");
            this.sortOrder = SqlHelper.GetNullableInt32(reader, "sortOrder");
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public ContributorArticle()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the ContributorArticle class.
        /// </summary>
        /// <param name="articleId">The id of the article</param>
        /// <param name="sortOrder">The sort order used for the article</param>
        public ContributorArticle(Guid articleId, int sortOrder)
        {
            this.articleId = articleId;
            this.sortOrder = sortOrder;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the contributorId for this object.
        /// </summary>
        internal Guid ContributorId
        {
            set { this.contributorId = value; }
        }

        /// <summary>
        /// Gets or sets the article id this contributor is associated with.
        /// </summary>
        public Guid ArticleId
        {
            get
            {
                return this.articleId;
            }
            set
            {
                this.articleId = value;
            }
        }

        /// <summary>
        /// Gets or sets the sort order of this article.
        /// </summary>
        /// <remarks>
        /// This is a test remark
        /// </remarks>
        public int SortOrder
        {
            get
            {
                return this.sortOrder;
            }
            set
            {
                this.sortOrder = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes the ContributorArticle object into xml for preparation to save to database.
        /// </summary>
        /// <param name="context"></param>
        public virtual void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None)
            {
                context.SerializeStartElement("ContributorArticle");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("contributorId", this.contributorId);
                context.SerializeElement("articleId", this.articleId);
                context.SerializeElement("sortOrder", this.sortOrder);
                context.SerializeEndElement();
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {

        }

        /// <summary>
        /// Sets this object's modified flag, and whether to cascade down to any
        /// children this object has.
        /// </summary>
        /// <param name="type">Indicate the type of data change made</param>
        /// <param name="cascade">Indicate whether to cascade change to all objects contained by this object.</param>
        public virtual void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ClientType.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Represents an client type
    /// </summary>
    public class ClientType : Utils.IKeyed<Int32>
    {
        #region Fields
        private Int32 id;
        private String name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,ClientType> ClientTypeCache = new Utils.KeyedCache<Int32,ClientType>(
                        new Utils.KeyedCache<Int32,Catalog.ClientType>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP
        /// </summary>
        public ClientType()
        {
        }

        /// <summary>
        /// Constructor that takes a db reader
        /// </summary>
        private ClientType( SqlDataReader reader )
        {
            id = reader.GetInt32(reader.GetOrdinal("clientTypeId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// The id for the audio encoding
        /// </summary>
        public Int32 Id
        {
            get { return id; }
            set { id = value; }
        }

        /// <summary>
        /// The name by which the client type is known - for readability purpose only
        /// </summary>
        public String Name
        {
            get
            {
                return name;
            }
            
            set
            {
                if ( String.IsNullOrEmpty( value ))
                {
                    throw new ArgumentNullException( "The name of a ClientType cannot be null or empty." );
                }
                name = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get the ClientType for a given id.
        /// </summary>
        /// <param name="id">The id of the ClientType to retrieve</param>
        /// <returns>The ClientType of the given id.</returns>
        internal static ClientType Get(int id)
        {
            return ClientTypeCache.Get( id );
        }

        /// <summary>
        /// Gets the list of ClientTypes in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<ClientType> Get()
        {
            return ClientTypeCache.Get();
        }
        

        /// <summary>
        /// Causes the cached to be refreshed from the database
        /// </summary>
        public static void Refresh()
        {
            ClientTypeCache.Refresh();
        }

        /// <summary>
        /// Gets the list of ClientTypes from the database.
        /// </summary>
        /// <returns></returns>
        private static List<ClientType> GetData()
        {
            List<ClientType> clientTypes = new List<ClientType>();
            
            using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "ClientTypeGet"
                    ))
            {
                while( reader.Read() )
                {
                    clientTypes.Add( new ClientType( reader ));
                }
            }
            
            return clientTypes;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ContributorRelationship.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Threading;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides editing and retrieving of ContributorRelationship data in the catalog, and aids in the 
    /// creation of the ContributorRelationship object.
    /// </summary>
    public class ContributorRelationship : ICatalogData
    {
        #region Fields
        private Guid contributorId;
        private Guid relatedContributorId;
        private int contributorRelationshipTypeId;
        private int roleId;
        private bool isPrimary;
        private int sortOrder;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Contructors
        /// <summary>
        /// Empty constructor so this class serialize over SOAP.
        /// </summary>
        public ContributorRelationship()
        {
        }
        
        /// <summary>
        /// Initialize a new instance of the ContributorRelationship class.
        /// </summary>
        /// <param name="relatedContributorId"></param>
        /// <param name="contributorRelationshipTypeId"></param>
        /// <param name="roleId"></param>
        /// <param name="isPrimary"></param>
        /// <param name="sortOrder"></param>
        public ContributorRelationship(
                Guid relatedContributorId,
                int contributorRelationshipTypeId,
                int roleId,
                bool isPrimary, 
                int sortOrder)
        {
            Validate.IsNotEmpty(relatedContributorId, "relatedContributorId", "relatedContributorId");
            this.relatedContributorId = relatedContributorId;

            if (ContributorRelationshipType.Get(contributorRelationshipTypeId) == null)
            {
                throw new ArgumentException(String.Format("ContributorRelationshipTypeId ({0}) not found in catalog", contributorRelationshipTypeId));
           }
            else
            {
                this.contributorRelationshipTypeId = contributorRelationshipTypeId;
            }
            if (Role.Get(roleId) == null)
            {
                throw new ArgumentException(String.Format("RoleId ({0}) not found in catalog", roleId));
            }
            else
            {
                this.roleId = roleId;
            }
            this.isPrimary = isPrimary;
            this.sortOrder = sortOrder;
        }

        internal ContributorRelationship(SqlDataReader reader)
        {
            this.relatedContributorId =          SqlHelper.GetNullableGuid( reader, "relatedContributorId");
            this.contributorRelationshipTypeId = SqlHelper.GetNullableInt32(reader, "contributorRelationshipTypeId");
            this.roleId =                        SqlHelper.GetNullableInt32(reader, "roleId");
            this.isPrimary =                     SqlHelper.GetNullableByte( reader, "isPrimary") != 0;
            this.sortOrder =                     SqlHelper.GetNullableInt32(reader, "sortOrder");
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the contributorId for this object.
        /// </summary>
        internal Guid ContributorId
        {
            set { this.contributorId = value; }
        }

        /// <summary>
        /// Gets or sets the id of the related <c>Contributor</c> this ContributorRelationship associates with.
        /// </summary>
        public Guid RelatedContributorId
        {
            get
            {
                return this.relatedContributorId;
            }
            set
            {
                Validate.IsNotEmpty(value, "RelatedContributorId", "RelatedContributorId");
                this.relatedContributorId = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of the <c>ContributorRelationshipType</c> this ContributorRelationship associates with.
        /// </summary>
        public int ContributorRelationshipTypeId
        {
            get
            {
                return this.contributorRelationshipTypeId;
            }
            set
            {
                if (ContributorRelationshipType.Get(value) == null)
                {
                    throw new ArgumentException(String.Format("ContributorRelationshipTypeId ({0}) not found in catalog", value));
                }
                else
                {
                    this.contributorRelationshipTypeId = value;
                }            
            }
        }

        /// <summary>
        /// Gets or sets the id of the <c>Role</c> this ContributorRelationship associates with.
        /// </summary>
        public int RoleId
        {
            get
            {
                return this.roleId;
            }
            set
            {
                if (Role.Get(value) == null)
                {
                    throw new ArgumentException(String.Format("RoleId ({0}) not found in catalog", value));
                }
                else
                {
                    this.roleId = value;
                }            
            }
        }

        /// <summary>
        /// Gets or sets whether this is the primary ContributorRelationship.
        /// </summary>
        public bool IsPrimary
        {
            get
            {
                return this.isPrimary;
            }
            set
            {
                this.isPrimary = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the sort order for this ContributorRelationship.
        /// </summary>
        public int SortOrder
        {
            get
            {
                return this.sortOrder;
            }
            set
            {
                this.sortOrder = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes the ContributorRelationship object into xml for preparation to save to database.
        /// </summary>
        /// <param name="context"></param>
        public virtual void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("ContributorRelationship");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("contributorId", this.contributorId);
                context.SerializeElement("relatedContributorId", this.relatedContributorId);
                context.SerializeElement("contributorRelationshipTypeId", this.contributorRelationshipTypeId);
                context.SerializeElement("roleId", this.roleId);
                context.SerializeElement("isPrimary", this.isPrimary);
                context.SerializeElement("sortOrder", this.sortOrder);
                context.SerializeEndElement();
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::contributorId");
                if (null != attr) this.contributorId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::relatedContributorId");
                if (null != attr) this.relatedContributorId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::contributorRelationshipTypeId");
                if (null != attr) this.contributorRelationshipTypeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::roleId");
                if (null != attr) this.roleId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::isPrimary");
                if (null != attr) this.isPrimary = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::sortOrder");
                if (null != attr) this.sortOrder = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag, and whether to cascade down to any
        /// children this object has.
        /// </summary>
        /// <param name="type">Indicate the type of data change made</param>
        /// <param name="cascade">Indicate whether to cascade change to all objects contained by this object.</param>
        public virtual void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ContributorLocaleMap.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the ContributorLocale data in the catalog, and aids in the creation of
    /// the ContributorLocale object.
    /// </summary>
    public class ContributorLocaleMap : ICatalogData
    {
        #region Fields
        private int lcid;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Contstructors

        /// <summary>
        /// Empty constructor so this class serializes over SOAP.
        /// </summary>
        public ContributorLocaleMap()
        {
        }

        /// <summary>
        /// Initialize a new instance of the ContributorLocaleMap class.
        /// </summary>
        /// <param name="lcid">The lcid of this ContributorLocale.</param>
        public ContributorLocaleMap(int lcid)
        {
            this.lcid = lcid;
        }
        #endregion

        #region Properties

        /// <summary>
        ///  Gets the lcid of this ContributorLocale.
        /// </summary>
        public int Lcid
        {
            get
            {
                return this.lcid;
            }
            set
            {
                this.lcid = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// This is just a wrapper class to aid SOAP serialization and provider fine control over mapped locale modifications.  
        /// ContributorLocale is responisble for serialization to XML for SQL.
        /// </summary>
        public virtual void Serialize(Serialization context)
        {
            // Serialization has been done for this class properties in ContributorLocale.Serialize(Serialization context) function
        }

        /// <summary>
        /// This is just a wrapper class to aid SOAP serialization and provider fine control over mapped locale modifications.  
        /// ContributorLocale is responisble for serialization to XML for SQL.
        /// </summary>
        public virtual void Deserialize(XmlNode node)
        {
            // De-Serialization has been done for this class properties in ContributorLocale.Deserialize(XmlNode node) function
        }
        /// <summary>
        /// This is just a wrapper class to aid SOAP serialization and provider fine control over mapped locale modifications.
        /// This is needed for interface completion but this will never be called.
        /// </summary>
        public virtual void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ContributorCategory.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Threading;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the ContributorCategory data in the catalog, and aids in the creation of the ContributorCategory object.
    /// </summary>
    public class ContributorCategory : ICatalogData
    {
        #region Fields
        private int categoryId;
        private int sortOrder;
        private Guid contributorId;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Contructors

        /// <summary>
        /// Empty constructor so this class serialize over SOAP.
        /// </summary>
        public ContributorCategory()
        {
        }

        /// <summary>
        /// Initialize a new instance of the ContributorCategory class.
        /// </summary>
        /// <param name="categoryId">The id of the <c>Category</c> this ContributorCategory associates with.</param>
        /// <param name="sortOrder">The sort order of this ContributorCategory associates with.</param>
        public ContributorCategory(int categoryId, int sortOrder)
        {
            Validate.IsNotNull(sortOrder, "sortOrder", "sortOrder");
            this.categoryId = categoryId;
            this.sortOrder = sortOrder;
        }

        internal ContributorCategory(SqlDataReader reader)
        {
            this.categoryId = SqlHelper.GetNullableInt32(reader, "categoryId");
            this.sortOrder =  SqlHelper.GetNullableInt32(reader, "sortOrder");
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the contributorId for this object.
        /// </summary>
        internal Guid ContributorId
        {
            set { this.contributorId = value; }
        }

        /// <summary>
        /// Gets or sets the id of the <c>Category</c> this ContributorCategory associates with.
        /// </summary>
        public int CategoryId
        {
            get
            {
                return this.categoryId;
            }
            set
            {
                this.categoryId = value;
            }
        }

        /// <summary>
        /// Gets or sets the sort order of the <c>Category</c> this ContributorCategory associates with.
        /// </summary>
        public int SortOrder
        {
            get
            {
                return this.sortOrder;
            }
            set
            {
                this.sortOrder = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes the ContributorCategory object into xml for preparation to save to database.
        /// </summary>
        /// <param name="context"></param>
        public virtual void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("ContributorCategory");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("contributorId", this.contributorId);
                context.SerializeElement("categoryId", this.categoryId);
                context.SerializeElement("sortOrder", this.sortOrder);
                context.SerializeEndElement();
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::contributorId");
                if (null != attr) this.contributorId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::categoryId");
                if (null != attr) this.categoryId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::sortOrder");
                if (null != attr) this.sortOrder = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }
        /// <summary>
        /// Sets this object's modified flag, and whether to cascade down to any
        /// children this object has.
        /// </summary>
        /// <param name="type">Indicate the type of data change made</param>
        /// <param name="cascade">Indicate whether to cascade change to all objects contained by this object.</param>
        public virtual void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ContributorRelationshipType.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Text;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides editing and retrieving of ContributorRelationshipType data in the catalog, and aids
    /// in the creation of the ContributorRelationshipType object.
    /// </summary>
    public class ContributorRelationshipType : Utils.IKeyed<Int32>
    {
        #region Fields
        private int id;
        private string name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,ContributorRelationshipType> ContributorRelationshipTypeCache = new Utils.KeyedCache<Int32,ContributorRelationshipType>(
                        new Utils.KeyedCache<Int32,Catalog.ContributorRelationshipType>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Contstructors
        /// <summary>
        /// Empty constructor so this class serializes over SOAP.
        /// </summary>
        public ContributorRelationshipType()
        {
        }

        /// <summary>
        /// Intialize a new instance of the ContributorRelationshipType class given a db reader.
        /// </summary>
        /// <param name="reader">The sql db reader.</param>
        public ContributorRelationshipType(SqlDataReader reader)
        {
            id = reader.GetInt32(reader.GetOrdinal("contributorRelationshipTypeId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the id of this ContributorRelationshipType.
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of this ContributorRelationshipType.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                Validate.IsNotEmpty(value, "Name", "Name");
                this.name = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Gets the ContributorRelationshipType for the given id.
        /// </summary>
        /// <param name="id">The id of the ContributorRelationshipType to retrieve.</param>
        /// <returns>The ContributorRelationshipType for the given id.</returns>
        public static ContributorRelationshipType Get(int id)
        {
            return ContributorRelationshipTypeCache.Get(id);
        }

        /// <summary>
        /// Gets the list of ContributorRelationshipType in the catalog.
        /// </summary>
        /// <returns>The list of ContributorRelationshipType in the catalog.</returns>
        public static List<ContributorRelationshipType> Get()
        {
            return ContributorRelationshipTypeCache.Get();
        }

        /// <summary>
        /// Gets the list of ContributorRelationshipType in the db.
        /// </summary>
        /// <returns>The list of ContributorRelationshipType in the catalog.</returns>
        private static List<ContributorRelationshipType> GetData()
        {
            List<ContributorRelationshipType> contributorRelationshipTypes = new List<ContributorRelationshipType>();
            
            using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "ContributorRelationshipTypeGet"
                    ))
            {
                while( reader.Read() )
                {
                    contributorRelationshipTypes.Add( new ContributorRelationshipType( reader ));
                }
            }
            return contributorRelationshipTypes;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ContributorResponse.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml;
using System.Xml.Serialization;
using System.IO;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// </summary>
    public class ContributorResponse : Response
    {
        #region Fields
        private Guid id;
        private string name;
        private string displayBirthDate;
        private List<string> mediaTitles = new List<string>();
        #endregion

        #region Constructors
        /// <summary>
        /// </summary>
        public ContributorResponse()
        {
        }
        /// <summary>
        /// </summary>
        public ContributorResponse(SqlDataReader reader)
        {
            this.id =               SqlHelper.GetNullable<Guid>(reader, "contributorId", Guid.Empty);
            this.name =             SqlHelper.GetNullable<String>(reader, "displayName", null);
            this.displayBirthDate = SqlHelper.GetNullable<String>(reader, "displayBirthDate", null);
        }
        #endregion

        #region Properties
        /// <summary></summary>
        public Guid ContributorId
        {
            get
            {
                return id;
            }
            set {}
        }
        /// <summary></summary>
        public String Name
        {
            get
            {
                return name;
            }
            set {}
        }
        /// <summary></summary>
        public String DisplayBirthDate
        {
            get
            {
                return displayBirthDate;
            }
            set {}
        }
        /// <summary></summary>
        public String[] MediaTitles
        {
            get
            {
                return mediaTitles.ToArray();
            }
            set {}
        }
        #endregion

        #region Methods
        internal void AddMediaTitle(string title)
        {
            mediaTitles.Add(title);
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ContributorRequest.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// </summary>
    public class ContributorRequest : Request
    {
        #region Fields
        private Guid? contributorId = null;
        private string name = null;
        private Guid? relatedContributorId = null;
        private Guid? mediaId = null;
        private bool? isGroup = null;
        #endregion

        #region Constructors
        /// <summary>
        /// </summary>
        public ContributorRequest() : base()
        {
        }
        #endregion

        #region Properties
        /// <summary></summary>
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                name = value;
            }
        }
        /// <summary></summary>
        public Guid ContributorId
        {
            get
            {
                if (contributorId.HasValue)
                {
                    return contributorId.Value;
                }
                return Guid.Empty;
            }
            set
            {
                contributorId = value;
                if (value == Guid.Empty)
                {
                    contributorId = null;
                }
            }
        }
        /// <summary></summary>
        public Guid RelatedContributorId
        {
            get
            {
                if (relatedContributorId.HasValue)
                {
                    return relatedContributorId.Value;
                }
                return Guid.Empty;
            }
            set
            {
                relatedContributorId = value;
                if (value == Guid.Empty)
                {
                    relatedContributorId = null;
                }
            }
        }
        /// <summary></summary>
        public Guid MediaId
        {
            get
            {
                if (mediaId.HasValue)
                {
                    return mediaId.Value;
                }
                return Guid.Empty;
            }
            set
            {
                mediaId = value;
                if (value == Guid.Empty)
                {
                    mediaId = null;
                }
            }
        }
        /// <summary></summary>
        public int IsGroup
        {
            get
            {
                if (isGroup.HasValue && isGroup.Value)
                {
                    return 1;
                }
                if (isGroup.HasValue)
                {
                    return 0;
                }
                return -1;
            }
            set
            {
                if (value == -1)
                {
                    isGroup = null;
                }
                else
                {
                    isGroup = (value != 0);
                }
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// </summary>
        /// <returns>Response[]</returns>
        public override Response[] Search()
        {
            try
            {
                Dictionary<Guid, ContributorResponse> retval = new Dictionary<Guid, ContributorResponse>();
    
                using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "ContributorSearch",
                        contributorId,
                        name,
                        mediaId,
                        relatedContributorId,
                        isGroup,
                        MaxResults))
                {
                    // Get all of the ContributorResponse records
                    while (reader.Read())
                    {
                        Guid id = reader.GetGuid(reader.GetOrdinal("contributorId"));
                        retval.Add(id, new ContributorResponse(reader));
                    }
                    // Get all of the MediaTitles
                    reader.NextResult();
                    while (reader.Read())
                    {
                        Guid id = reader.GetGuid(reader.GetOrdinal("contributorId"));
                        string title = SqlHelper.GetNullable<String>(reader, "title", null);
                        if (title != null)
                        {
                            if (retval.ContainsKey(id))
                            {
                                retval[id].AddMediaTitle(title);
                            }
                        }
                    }
                }

                ContributorResponse[] responses = new ContributorResponse[retval.Values.Count];
                retval.Values.CopyTo(responses, 0);
                return responses;
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "ContributorSearch");
                throw;
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ContributorLocale.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the ContributorLocale data in the catalog, and aids in the creation of
    /// the ContributorLocale object.
    /// </summary>
    public class ContributorLocale : ICatalogData
    {
        #region constants
        private const int sortNameLength = 255;
        private const int displayNameLength = 255;
        #endregion

        #region Fields
        private Guid contributorId;
        private int lcid;
        private string displayName;
        private string sortName;
        internal List<ContributorLocaleMap> targetingLocales = new List<ContributorLocaleMap>();
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Contstructors

        /// <summary>
        /// Empty constructor so this class serializes over SOAP.
        /// </summary>
        public ContributorLocale()
        {
        }

        /// <summary>
        /// Initialize a new instance of the ContributorLocale class.
        /// </summary>
        /// <param name="lcid">The lcid of this ContributorLocale.</param>
        /// <param name="displayName">The name of this ContributorLocale.</param>
        /// <param name="targetingLcids">The lcids that map to this ContributorLocale.</param>
        /// <param name="sortName">The sort name for this contributor</param>
        public ContributorLocale(int lcid, string displayName, string sortName, ContributorLocaleMap[] targetingLcids)
        {
            this.lcid = lcid;
            this.displayName = displayName;
            this.sortName = sortName;
            this.targetingLocales.AddRange(targetingLcids);
        }

        internal ContributorLocale(SqlDataReader reader)
        {
            this.lcid =         SqlHelper.GetNullableInt32(reader, "lcid");
            this.displayName =  SqlHelper.GetNullableString(reader, "displayName");
            this.sortName = SqlHelper.GetNullableString(reader, "sortName");
            this.targetingLocales.Add(new ContributorLocaleMap(lcid));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the contributorId for this object.
        /// </summary>
        internal Guid ContributorId
        {
            set { this.contributorId = value; }
        }

        /// <summary>
        ///  Gets the lcid of this ContributorLocale.
        /// </summary>
        public int Lcid
        {
            get
            {
                return this.lcid;
            }
            set
            {
                this.lcid = value;
            }
        }

        /// <summary>
        /// Gets or sets the display name of this ContributorLocale.
        /// </summary>
        public string DisplayName
        {
            get     
            {
                return this.displayName;
            }
            set
            {
                Validate.IsNotEmpty(value, "DisplayName", "DisplayName");
                Validate.IsNotLongerThan(value, displayNameLength, "DisplayName", "DisplayName");
                this.displayName = value;
            }
        }

        /// <summary>
        /// Gets or sets the list of Locales that map to this ContributorLocale
        /// </summary>
        public ContributorLocaleMap[] TargetingLocales
        {
            get
            {
                return this.targetingLocales.ToArray();
            }
            set
            {
                this.targetingLocales.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }

        /// <summary>
        /// Gets or sets the sort name of this contributor.
        /// </summary>
        public string SortName
        {
            get
            {
                return this.sortName;
            }
            set
            {                
                Validate.IsNotLongerThan(value, sortNameLength, "SortName", "SortName");
                this.sortName = value;
            }
        }

        #endregion

        #region Methods
        /// <summary>
        /// Serializes the ContributorLocale object into xml for preparation to save to database.
        /// </summary>
        /// <param name="context"></param>
        public virtual void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("ContributorLocale");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("contributorId", this.contributorId);
                context.SerializeElement("lcid", this.lcid);
                context.SerializeElement("displayName", this.displayName);
                context.SerializeElement("sortName", this.sortName);

                foreach (ContributorLocaleMap targetingLocale in this.TargetingLocales)
                {
                        context.SerializeStartElement("ContributorLocaleMap");
                        context.SerializeDatabaseOperation(targetingLocale.Modified);
                        context.SerializeElement("contributorId", this.contributorId);
                        context.SerializeElement("lcid", targetingLocale.Lcid);
                        context.SerializeElement("lcidMap", this.lcid);
                        context.SerializeEndElement();                 
                }

                context.SerializeEndElement();
            }
            else
            {
                if (this.modified == DataChangeType.Add || this.modified == DataChangeType.Delete)
                {
                    this.SetModified(this.modified, true);
                }

                if (this.modified != DataChangeType.None)
                {
                    context.SerializeStartElement("ContributorLocale");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("contributorId", this.contributorId);
                    context.SerializeElement("lcid", this.lcid);
                    context.SerializeElement("displayName", this.displayName);
                    context.SerializeElement("sortName", this.sortName);
                    context.SerializeEndElement();
                }

                foreach (ContributorLocaleMap targetingLocale in this.TargetingLocales)
                {
                    if (targetingLocale.Modified != DataChangeType.None)
                    {
                        context.SerializeStartElement("ContributorLocaleMap");
                        context.SerializeDatabaseOperation(targetingLocale.Modified);
                        context.SerializeElement("contributorId", this.contributorId);
                        context.SerializeElement("lcid", targetingLocale.Lcid);
                        context.SerializeElement("lcidMap", this.lcid);
                        context.SerializeEndElement();
                    }
                }
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::contributorId");
                if (null != attr) this.contributorId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::lcid");
                if (null != attr) this.lcid = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::displayName");
                if (null != attr) this.displayName = attr.InnerText;

                attr = node.SelectSingleNode("child::sortName");
                if (null != attr) this.sortName = attr.InnerText;

                XmlNodeList mapNodes = node.SelectNodes("child::ContributorLocaleMap");
                foreach (XmlNode map in mapNodes)
                {
                    ContributorLocaleMap localeMap = new ContributorLocaleMap();

                    attr = map.Attributes.GetNamedItem("op");
                    if (null != attr) localeMap.Modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                    attr = map.SelectSingleNode("child::lcid");
                    if (null != attr) localeMap.Lcid = Serialization.DeserializeIntElement(attr.InnerText);
                    
                    this.targetingLocales.Add(localeMap);
                }
            }
        }
        
        /// <summary>
        /// Sets this object's modified flag, and whether to cascade down to any
        /// children this object has.
        /// </summary>
        /// <param name="type">Indicate the type of data change made</param>
        /// <param name="cascade">Indicate whether to cascade change to all objects contained by this object.</param>
        public virtual void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
            if (cascade)
            {
                foreach (ContributorLocaleMap targetingLocale in this.TargetingLocales)
                {
                    if (!(type == DataChangeType.Add && 
                          targetingLocale.Modified == DataChangeType.Delete))
                    {
                        targetingLocale.SetModified(type, cascade);
                    }
                }
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Country.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of Country data in the catalog.
    /// </summary>
    public class Country : Utils.IKeyed<String>
    {
        #region Fields

        private string code;
        private string name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<String,Country> CountryCache = new Utils.KeyedCache<String,Country>(
                        new Utils.KeyedCache<String,Catalog.Country>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Empty constructor to work over SOAP.
        /// </summary>
        public Country()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Country object.
        /// </summary>
        /// <param name="code">2-character country code</param>
        /// <param name="name">Country name</param>
        public Country(string code, string name)
        {
            Validate.IsNotEmpty(code, "CountryCode", "code");
            Validate.IsNotEmpty(name, "Name", "name");
            this.code = code;
            this.name = name;
        }

        /// <summary>
        /// Initializes a new instance of the Country object.
        /// </summary>
        /// <param name="reader"></param>
        internal Country(SqlDataReader reader)
        {
            code = reader.GetString(reader.GetOrdinal("countryCode"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties

        /// <summary>
        /// The id of this object - required for key'ing.
        /// </summary>
        public String Id
        {
            get
            {
                return this.code;
            }
        }

        /// <summary>
        /// Gets this Country code.
        /// </summary>
        public string Code
        {
            get
            {
                return this.code;
            }
            set
            {
                // Empty set method so SOAP can expose this property correctly.
            }
        }

        /// <summary>
        /// Gets or sets this Country name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                Validate.IsNotEmpty(value, "Name", "value");
                this.name = value;
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Gets a Country given a countryCode.
        /// </summary>
        /// <param name="countryCode">The Code of the Country to retrieve.</param>
        /// <returns>The Country for the specified countryCode.</returns>
        public static Country Get(string countryCode)
        {
            if (!string.IsNullOrEmpty(countryCode))
            {
                countryCode = countryCode.ToUpper();
            }
            Country c = null;
            try
            {
                c = CountryCache.Get(countryCode);
            }
            catch (ArgumentException)
            {
            }
            return c;
        }

        /// <summary>
        /// Gets all countries in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<Country> Get()
        {
            return CountryCache.Get();
        }

        /// <summary>
        /// Gets all countries from the db.
        /// </summary>
        /// <returns></returns>
        private static List<Country> GetData()
        {
            List<Country> countries = new List<Country>();

            using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "CountryGet"
                    ))
            {
                while(reader.Read())
                {
                    countries.Add(new Country(reader));
                }
            }

            return countries;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\CountryDefaultCurrency.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;
using xonline.common.service;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// CountryDefaultCurrency.Supports lookup of currency from country and country from currency
    /// </summary>
    public class CountryDefaultCurrency : Utils.IIdentifiable<string>
    {
        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.Cache<CountryDefaultCurrency, string> CountryDefaultCurrencyCache = new Utils.Cache<CountryDefaultCurrency, string>(
                       new Utils.Cache<CountryDefaultCurrency, string>.CacheDataRetrievalDelegate(GetData),
                       CacheRefreshPeriod);


        private string countryCode;
        private string currencyCode;

        /// <summary>
        /// Default Constructor
        /// </summary>
        public CountryDefaultCurrency() { }
        /// <summary>
        ///Constructor to Instantiate the class from sqldatareader
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public CountryDefaultCurrency(SqlDataReader reader)
        {
            this.countryCode = reader.GetString(reader.GetOrdinal("countryCode"));
            this.currencyCode = reader.GetString(reader.GetOrdinal("currencyCode"));
        }
        /// <summary>
        /// Gets/Sets the CountryId
        /// </summary>
        public string CountryCode
        {
            get
            {
                return countryCode;
            }
            set
            {
                Validate.IsNotNull(value, "countryCode", "countryCode");
                Validate.IsNotLongerThan(value, 2, "countryCode", "countryCode");
                countryCode = value;
            }
        }
        /// <summary>
        /// Gets/Sets the Primary Id. This is used by single key cache for lookups
        /// </summary>
        public string PrimaryId
        {
            get
            {
                return this.CountryCode; ;
            }
        }
        /// <summary>
        /// Gets/Sets the Country Code
        /// </summary>
        public string CurrencyCode
        {
            get
            {
                return currencyCode;
            }
            set
            {
                Validate.IsNotNull(value, "currencyCode", "currencyCode");
                Validate.IsNotLongerThan(value, 3, "currencyCode", "currencyCode");
                currencyCode = value;
            }
        }
        #region Methods
        /// <summary>
        /// Get method which returns single Instance of the class for a give primaryid
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        public static CountryDefaultCurrency Get(string code)
        {
            CountryDefaultCurrency countryDefCurrency= CountryDefaultCurrencyCache.Get(code);
            if (countryDefCurrency == null)
            {
                throw new XRLException(HResult.XONLINE_E_CONTENTINGESTION_INVALIDARGS, XEvent.Id.CONTENTINGESTION_INVALID_ARGS, string.Format("No DefaultCurrency available for the countrycode {0}", code));
            }
            return countryDefCurrency;
        }
        /// <summary>
        /// Get method which returns currency string for the countrycode
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        public static string GetDefaultCurrencyString(string code)
        {
            CountryDefaultCurrency countryDefCurrency = Get(code);
            return countryDefCurrency.CurrencyCode;
        }
        /// <summary>
        /// Get method which returns all the Instances of the class
        /// </summary>
        /// <returns></returns>
        public static List<CountryDefaultCurrency> Get()
        {
            return CountryDefaultCurrencyCache.Get();
        }
        /// <summary>
        /// GetData method used by cacheloader delegate to load the cache entries
        /// </summary>
        /// <returns></returns>
        public static List<CountryDefaultCurrency> GetData()
        {
            List<CountryDefaultCurrency> countryDefaultCurrency = new List<CountryDefaultCurrency>();

            using (SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "CountryDefaultCurrencyGet"
                    ))
            {
                while (reader.Read())
                {
                    countryDefaultCurrency.Add(new CountryDefaultCurrency(reader));
                }
            }
            return countryDefaultCurrency;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\DRMLicenseIssuer.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of DRMLicenseIssuer data in the catalog, 
    /// and aids in the creation of the DRMLicenseIssuer object.
    /// </summary>
    public class DRMLicenseIssuer : Entity
    {
        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public DRMLicenseIssuer()
        {
        }

        /// <summary>
        /// Instantiates a DRMLicenseIssuer instance from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public DRMLicenseIssuer(SqlDataReader reader)
            :base(reader)
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a DRMLicenseIssuer for the given id.
        /// </summary>
        /// <param name="id">The id of the drmLicenseIssuer to get</param>
        /// <returns>The DRMLicenseIssuer for the given id.</returns>
        public static new DRMLicenseIssuer Get(int id)
        {
            return EntityCacheManager.DRMLicenseIssuerCache.Get(id);
        }

        /// <summary>
        /// Gets all drmLicenseIssuers in the catalog.
        /// </summary>
        /// <returns></returns>
        public static new List<DRMLicenseIssuer> Get()
        {
            return EntityCacheManager.DRMLicenseIssuerCache.Get();
        }

        /// <summary>
        /// Gets all drmLicenseIssuers from the database.
        /// </summary>
        /// <returns></returns>
        public static new List<DRMLicenseIssuer> GetData()
        {
            List<DRMLicenseIssuer> drmLicenseIssuers = new List<DRMLicenseIssuer>();
            
            using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "DRMLicenseIssuerGet"
                    ))
            {
                while( reader.Read() )
                {
                    drmLicenseIssuers.Add( new DRMLicenseIssuer( reader ));
                }
            }
            
            return drmLicenseIssuers;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\DeliveryType.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Represents an deivery type
    /// </summary>
    public class DeliveryType : Utils.IKeyed<Int32>
    {
        #region Fields
        private Int32 id;
        private String name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,DeliveryType> DeliveryTypeCache = new Utils.KeyedCache<Int32,DeliveryType>(
                        new Utils.KeyedCache<Int32,Catalog.DeliveryType>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP
        /// </summary>
        public DeliveryType()
        {
        }

        /// <summary>
        /// Constructor that takes a db reader
        /// </summary>
        private DeliveryType( SqlDataReader reader )
        {
            id = reader.GetInt32(reader.GetOrdinal("deliveryTypeId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// The id for the delivery types
        /// </summary>
        public Int32 Id
        {
            get { return id; }
            set { id = value; }
        }

        /// <summary>
        /// The name by which the delivery type is known - for readability purpose only
        /// </summary>
        public String Name
        {
            get
            {
                return name;
            }
            
            set
            {
                if ( String.IsNullOrEmpty( value ))
                {
                    throw new ArgumentNullException( "The name of a DeliveryType cannot be null or empty." );
                }
                name = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get the DeliveryType for a given id.
        /// </summary>
        /// <param name="id">The id of the DeliveryType to retrieve</param>
        /// <returns>The DeliveryType of the given id.</returns>
        internal static DeliveryType Get(int id)
        {
            return DeliveryTypeCache.Get( id );
        }

        /// <summary>
        /// Gets the list of DeliveryTypes in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<DeliveryType> Get()
        {
            return DeliveryTypeCache.Get();
        }
        
        /// <summary>
        /// Gets the list of DeliveryTypes from the database.
        /// </summary>
        /// <returns></returns>
        private static List<DeliveryType> GetData()
        {
            List<DeliveryType> deliveryTypes = new List<DeliveryType>();
            
            using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "DeliveryTypeGet"
                    ))
            {
                while( reader.Read() )
                {
                    deliveryTypes.Add( new DeliveryType( reader ));
                }
            }
            
            return deliveryTypes;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Currency.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of Currency data in the catalog.
    /// </summary>
    public class Currency : Utils.IKeyed<String>
    {
        #region Fields

        private string code;
        private string name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<String,Currency> CurrencyCache = new Utils.KeyedCache<String,Currency>(
                        new Utils.KeyedCache<String,Catalog.Currency>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Empty constructor to work over SOAP.
        /// </summary>
        public Currency()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Currency object.
        /// </summary>
        /// <param name="code">2-character currency code</param>
        /// <param name="name">Currency name</param>
        public Currency(string code, string name)
        {
            Validate.IsNotEmpty(code, "Currency", "code");
            Validate.IsNotEmpty(name, "Name", "name");
            this.code = code;
            this.name = name;
        }

        /// <summary>
        /// Initializes a new instance of the Country object.
        /// </summary>
        /// <param name="reader"></param>
        internal Currency(SqlDataReader reader)
        {
            code = reader.GetString(reader.GetOrdinal("currencyCode"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties

        /// <summary>
        /// The id of this object - required for key'ing.
        /// </summary>
        public String Id
        {
            get
            {
                return this.code;
            }
        }

        /// <summary>
        /// Gets this Currency code.
        /// </summary>
        public string Code
        {
            get
            {
                return this.code;
            }
            set
            {
                // Empty set method so SOAP can expose this property correctly.
            }
        }

        /// <summary>
        /// Gets or sets this Currency name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                Validate.IsNotEmpty(value, "Name", "value");
                this.name = value;
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Gets a Currency given a currencyCode.
        /// </summary>
        /// <param name="currencyCode">The Code of the Currency to retrieve.</param>
        /// <returns>The Currency for the specified currencyCode.</returns>
        public static Currency Get(string currencyCode)
        {
            if (!string.IsNullOrEmpty(currencyCode))
            {
                currencyCode = currencyCode.ToUpper();
            }
            return CurrencyCache.Get( currencyCode );
        }

        /// <summary>
        /// Gets all currencies in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<Currency> Get()
        {
            return CurrencyCache.Get();
        }

        /// <summary>
        /// Gets all currencies from the db.
        /// </summary>
        /// <returns></returns>
        private static List<Currency> GetData()
        {
            List<Currency> currencies = new List<Currency>();

            using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "CurrencyGet"
                    ))
            {
                while(reader.Read())
                {
                    currencies.Add(new Currency(reader));
                }
            }

            return currencies;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Entity.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Entity class represents some kind of legal entity, mapping to the entity
    /// table in the database.  Subclassed by at least Provider, MetadataProvider
    /// and DRMLicenseIssuer
    /// </summary>
    public class Entity : Utils.IKeyed<Int32>
    {
        #region Fields
        /// <summary>
        /// The id for the entity.
        /// </summary>
        protected int id;

        /// <summary>
        /// The comman name by which the entity is known
        /// </summary>
        protected string name;
        
        /// <summary>
        /// Contact information for the entity
        /// </summary>
        protected string contactInfo;
        
        /// <summary>
        /// Internal account number for this entity
        /// </summary>
        protected string accountNumber;

        /// <summary>
        /// External Id used for the entity.
        /// </summary>
        protected string externalEntityId;

        /// <summary>
        /// If this entity is a provider.
        /// </summary>
        protected bool isProvider;

        /// <summary>
        /// If this entity is a metadata provider.
        /// </summary>
        protected bool isMetadataProvider;

        /// <summary>
        /// If this entity is a DRM license issuer.
        /// </summary>
        protected bool isDrmLicenseIssuer;
        
        /// <summary>
        /// The modification state of this object
        /// </summary>
        protected DataChangeType modified = DataChangeType.None;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,Entity> EntityCache = new Utils.KeyedCache<Int32,Entity>(
                        new Utils.KeyedCache<Int32,Catalog.Entity>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public Entity()
        {
        }

        /// <summary>
        /// Instantiates a Entity instance from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public Entity(SqlDataReader reader)
        {
            this.id = reader.GetInt32(reader.GetOrdinal("entityId"));
            this.name = reader.GetString(reader.GetOrdinal("name"));
            this.contactInfo = SqlHelper.GetNullableString( reader, "contactInfo", String.Empty );
            this.accountNumber = SqlHelper.GetNullableString( reader, "accountNumber", String.Empty );
            this.externalEntityId = SqlHelper.GetNullableString(reader, "externalEntityId", String.Empty);
            this.isProvider = (reader.GetInt32(reader.GetOrdinal("IsProvider")) == 1);
            this.isMetadataProvider = (reader.GetInt32(reader.GetOrdinal("IsMetadataProvider")) == 1);
            this.isDrmLicenseIssuer = (reader.GetInt32(reader.GetOrdinal("IsDrmLicenseIssuer")) == 1);
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the int that uniquely identifies this Entty
        /// </summary>
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                if ( value < 0 )
                {
                    throw new ArgumentNullException( "The id for the entity cannot be less than zero." );
                }
                id = value;
            }
        }
        /// <summary>
        /// Gets or sets the name assigned to this Entity
        /// </summary>
        [XmlElement(IsNullable = true)]
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                Validate.IsNotEmpty( value, "Name", "Name");
                Validate.IsNotLongerThan( value, 255, "Name", "Name");
                name = value;
            }
        }
        /// <summary>
        /// Gets or sets the entities contact information
        /// </summary>
        public string ContactInfo
        {
            get
            {
                return contactInfo;
            }
            set
            {
                Validate.IsNotLongerThan ( value, 500, "ContactInfo", "ContactInfo");
                contactInfo = value;
            }
        }

        /// <summary>
        /// Gets or sets the entities account number
        /// </summary>
        public string AccountNumber
        {
            get
            {
                return accountNumber;
            }
            set
            {
                Validate.IsNotLongerThan ( value, 50, "AccountNumber", "AccountNumber");
                accountNumber = value;
            }
        }

        /// <summary>
        /// Gets or sets the entities external id
        /// </summary>
        public string ExternalEntityId
        {
            get
            {
                return externalEntityId;
            }
            set
            {
                Validate.IsNotLongerThan(value, 50, "externalEntityId", "externalEntityId");
                externalEntityId = value;
            }
        }

        /// <summary>
        /// Gets or sets the entities external id
        /// </summary>
        public bool IsProvider
        {
            get
            {
                return isProvider;
            }
            set
            {
                isProvider = value;
            }
        }

        /// <summary>
        /// Gets or sets the entities external id
        /// </summary>
        public bool IsMetadataProvider
        {
            get
            {
                return isMetadataProvider;
            }
            set
            {
                isMetadataProvider = value;
            }
        }

        /// <summary>
        /// Gets or sets the entities external id
        /// </summary>
        public bool IsDrmLicenseIssuer
        {
            get
            {
                return isDrmLicenseIssuer;
            }
            set
            {
                isDrmLicenseIssuer = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a Entity for the given id.
        /// </summary>
        /// <param name="id">The id of the entity to get</param>
        /// <returns>The Entity for the given id.</returns>
        public static Entity Get(int id)
        {
            return EntityCache.Get(id);
        }

        /// <summary>
        /// Gets all entites in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<Entity> Get()
        {
            return EntityCache.Get();
        }

        /// <summary>
        /// Gets all entites from the database.
        /// </summary>
        /// <returns></returns>
        public static List<Entity> GetData()
        {
            List<Entity> entities = new List<Entity>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "EntityGet"
                    ))
            {
                while( reader.Read() )
                {
                    entities.Add( new Entity( reader ));
                }
            }
            return entities;
        }
        /// <summary>
        /// Returns the next available id
        /// </summary>
        /// <returns></returns>
        public static int GetAvailableId()
        {
            try
            {
                int retvalue = Convert.ToInt32(SqlHelper.ExecuteScalar(CatalogDatabase.RawCatalogDBConnectionString, CommandType.Text, "select dbo.GenerateIdEntity()"));
                return retvalue;
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GenerateIdEntity");
                throw;
            }
        }

        /// <summary>
        /// Saves changes made to the given Provider object to the database.
        /// </summary>
        public static void Save(Entity entity)
        {
            if (entity.modified == DataChangeType.Delete)
                throw new NotSupportedException("Deletion function is not supported in Entity class.");
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "EntitySave",
                        entity.id,
                        entity.name,
                        entity.accountNumber,
                        entity.contactInfo,
                        entity.externalEntityId,
                        entity.isProvider,
                        entity.isMetadataProvider,
                        entity.isDrmLicenseIssuer
                        );

                //Refresh cache after save
                EntityCache.Refresh();
                EntityCacheManager.Refresh();
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "EntitySave");
                throw;
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\DRMTask.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;
using System.Collections.Generic;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines Tasks Queue
    /// </summary>
    public sealed class DRMTask : Task
    {
        # region Fields
        private Guid mediaInstanceId;
        private bool isDRMRequired = true;
        # endregion

        # region Properties
        /// <summary>
        /// Gets/Sets the MediaInstanceId
        /// </summary>
        public Guid MediaInstanceId
        {
            get
            {
                return this.mediaInstanceId;
            }
            set
            {
                mediaInstanceId = value;
            }
        }
        /// <summary>
        /// Gets/Sets if the DRM is required
        /// </summary>
        public bool IsDRMRequired
        {
            get
            {
                return this.isDRMRequired;
            }
            set
            {
                isDRMRequired = value;
            }
        }
        # endregion

        # region Constructors
        /// <summary>
        /// Over loaded constructor to skip validations
        /// </summary>
        /// <param name="doValidations"></param>
        public DRMTask(bool doValidations)
            : base(doValidations)
        {

        }
        /// <summary>
        /// Default constructor for Soap
        /// </summary>
        public DRMTask()
        { 
            
        }
        # endregion

        /// <summary>
        /// Serializes and Saves the Queue Object
        /// </summary>
        ///<param name="task">DRM Task Queue Object</param>
        public static void Save(DRMTask task)
        {
            Task.Save(task);
        }
        /// <summary>
        /// Serializes the DRMTask
        /// </summary>
        /// <returns></returns>
        protected override void SerializeTaskData(Serialization serializer)
        {
            if (serializer == null)
                throw new ArgumentException("Serialization context is Null", "serializer");
            serializer.SerializeStartElement("TaskData");
            serializer.SerializeStartElement("DRMTaskData");
            serializer.SerializeElement("mediaInstanceId", this.mediaInstanceId);
            serializer.SerializeElement("isDRMRequired", this.isDRMRequired);
            serializer.SerializeEndElement();
            serializer.SerializeEndElement();
     
        }
        /// <summary>
        /// Deserialize DRM Task from XML String
        /// </summary>
        /// <param name="serializedXML"></param>
        /// <returns></returns>
        public override void DeSerialize(string serializedXML)
        {
            XmlDataDocument xmlDocument = new XmlDataDocument();
            xmlDocument.LoadXml(serializedXML);
            XmlNode  node = xmlDocument.SelectSingleNode("//Task");
            if (node == null)
            {
                return;
            }
            else
            {
                if (node == null)
                {
                    return;
                }
                else
                {
                    XmlNode attr = null;
                    attr = node.Attributes.GetNamedItem("op");
                    if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                    attr = node.SelectSingleNode("//Task//taskInstanceId");
                    if (null != attr) this.taskInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                    attr = node.SelectSingleNode("//Task//fileName");
                    this.fileName = Serialization.DeserializeStringElement(node, string.Empty, "//Task//fileName");

                    attr = node.SelectSingleNode("//Task//inputFileLocation");
                    this.inputFileLocation = Serialization.DeserializeStringElement(attr.InnerText);

                    attr = node.SelectSingleNode("//Task//outputFileLocation");
                    this.outputFileLocation = Serialization.DeserializeStringElement(attr.InnerText);

                    attr = node.SelectSingleNode("//Task//TaskData/DRMTaskData/mediaInstanceId");
                    if (null != attr) this.mediaInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                    attr = node.SelectSingleNode("//Task//TaskData/DRMTaskData/isDRMRequired");
                    if (null != attr) this.isDRMRequired = Serialization.DeserializeBoolElement(attr.InnerText);

                    attr = node.SelectSingleNode("//Task//stagerFileLocation");
                    if (null != attr) this.stagerFileLocation = Serialization.DeserializeStringElement(attr.InnerText);

                    attr = node.SelectSingleNode("//Task//asperaFileLocation");
                    if (null != attr) this.asperaFileLocation = Serialization.DeserializeStringElement(attr.InnerText);

                    attr = node.SelectSingleNode("//Task//statusMessage");
                    if (null != attr) this.statusMessage = Serialization.DeserializeStringElement(attr.InnerText);

                    attr = node.SelectSingleNode("//Task//taskStatusId");
                    if (null != attr) this.taskStatusId = Serialization.DeserializeIntElement(attr.InnerText);

                }

            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\DRMTaskSearch.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define DRM Task search response class.
    /// </summary>
    public class DRMTaskSearchResponse : TaskSearchResponse
    {
        #region Fields
        private Guid mediaInstanceId;
        private string title;
        private string description;
        #endregion

        #region Properties
        /// <summary>
        /// Gets/Sets the MediaInstanceId
        /// </summary>
        public Guid MediaInstanceId
        {
            get { return mediaInstanceId; }
            set { mediaInstanceId = value; }
        }
        /// <summary>
        /// Gets/Sets the Title
        /// </summary>
        public string Title
        {
            get { return title; }
            set { title = value; }
        }
        /// <summary>
        /// Gets/Sets the Description
        /// </summary>
        public string Description
        {
            get { return description; }
            set { description = value; }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Default Constructor for Soap
        /// </summary>
        public DRMTaskSearchResponse()
        {

        }
        /// <summary>
        /// Private constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal DRMTaskSearchResponse(SqlDataReader reader)
            : base(reader)
        {
            this.mediaInstanceId = reader.GetGuid(reader.GetOrdinal("mediaInstanceId"));
            this.description = SqlHelper.GetNullableString(reader, "description", string.Empty);
            this.title = SqlHelper.GetNullableString(reader, "title", string.Empty);
        }
        #endregion
    }

    /// <summary>
    /// Define DRM search request class.
    /// </summary>
    public class DRMTaskSearchRequest : TaskSearchRequest
    {
        #region Fields
        private string mediaTitle;
        private int? mediaType;
        private Guid? mediaInstanceId;
        #endregion

        #region Properties
        /// <summary>
        /// Gets/Sets the MediaTitle
        /// </summary>
        public string MediaTitle
        {
            get
            {
                return mediaTitle;
            }
            set
            {
                mediaTitle = value;
            }
        }
        /// <summary>
        /// Gets/Sets the MediaType
        /// </summary>
        public int? MediaType
        {
            get
            {
                return mediaType;
            }
            set
            {
                mediaType = value;
            }
        }
        /// <summary>
        /// Gets/Sets the MediaInstanceId
        /// </summary>
        public Guid? MediaInstanceId
        {
            get
            {
                return mediaInstanceId;
            }
            set
            {
                mediaInstanceId = value;
            }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public DRMTaskSearchRequest()
            : base()
        {
        }
        #endregion

        # region Methods
        /// <summary>
        /// Search Response Overridden Implementaiton
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<DRMTaskSearchResponse> responses = new List<DRMTaskSearchResponse>();
            try
            {
                using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "DRMTaskSearch",
                        (this.TaskStatusId == -1) ? null : this.TaskStatusId,
                        this.mediaTitle,
                        this.mediaInstanceId,
                        (this.mediaType == -1) ? null : this.mediaType,
                        this.InputLocation,
                        (this.MaxResults <= 0) ? base.MaxResults : this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new DRMTaskSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "DRMTaskSearch");
                throw;
            }
            return responses.ToArray();

        }
        # endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\EntityCacheManager.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Xml.Serialization;
using System.IO;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of EntityCacheManager data in the catalog, 
    /// and aids in the creation of the EntityCacheManager object.
    /// </summary>
    internal class EntityCacheManager
    {
        #region Fields
        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.KeyedCache<Int32, DRMLicenseIssuer> drmLicenseIssuerCache = new Utils.KeyedCache<Int32, DRMLicenseIssuer>(
                        new Utils.KeyedCache<Int32, Catalog.DRMLicenseIssuer>.CachedDataLoaderDelegate(DRMLicenseIssuer.GetData),
                        CacheRefreshPeriod);
        private static readonly Utils.KeyedCache<Int32, MetadataProvider> metadataProviderCache = new Utils.KeyedCache<Int32, MetadataProvider>(
                new Utils.KeyedCache<Int32, Catalog.MetadataProvider>.CachedDataLoaderDelegate(MetadataProvider.GetData),
                CacheRefreshPeriod);
        private static readonly Utils.KeyedCache<Int32, Provider> providerCache = new Utils.KeyedCache<Int32, Provider>(
                        new Utils.KeyedCache<Int32, Catalog.Provider>.CachedDataLoaderDelegate(Provider.GetData),
                        CacheRefreshPeriod);
        #endregion

        # region Properties
        /// <summary>
        /// DRM License Issue Cache
        /// </summary>
        public static Utils.KeyedCache<Int32, DRMLicenseIssuer> DRMLicenseIssuerCache
        {
            get
            {
                return drmLicenseIssuerCache;
            }
        }
        /// <summary>
        /// Meta Data Provider Cache
        /// </summary>
        public static Utils.KeyedCache<Int32, MetadataProvider> MetadataProviderCache
        {
            get
            {
                return metadataProviderCache;
            }
        }
        /// <summary>
        /// Provider Cache
        /// </summary>
        public static Utils.KeyedCache<Int32, Provider> ProviderCache
        {
            get
            {
                return providerCache;
            }
        }
        # endregion

        # region Methods
        /// <summary>
        /// Refreshes the DRM,Provider and MetaDataProvider Cache
        /// </summary>
        public static void Refresh()
        {
            drmLicenseIssuerCache.Refresh();
            providerCache.Refresh();
            metadataProviderCache.Refresh();
        }
        # endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Game.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides retrieval and editing of Game data in the catalog.
    /// </summary>
    public class Game : Media
    {
        #region Constants
        private static string liveTitleIdProperty = "liveTitleId";
        #endregion

        #region Fields
        private int liveTitleId;
        
        //List of localized titles this media has
        private List<GameLocale> gameLocales = new List<GameLocale>();
        private List<GameCapabilityCountry> gameCountries = new List<GameCapabilityCountry>();
        private InsertDataChangeType modified = InsertDataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        private Game(SqlDataReader reader) : base(reader)
        {
            reader.NextResult();
            if (reader.Read())
            {
                this.liveTitleId = reader.GetInt32(reader.GetOrdinal(liveTitleIdProperty));
            }

            reader.NextResult();
            while (reader.Read())
            {
                this.gameLocales.Add(new GameLocale(reader));
            }

            reader.NextResult();
            int count = 0;
            if (reader.Read())
                count = reader.GetInt32(reader.GetOrdinal("gameCapabilityCountryCount"));
            while (count > 0 && reader.NextResult())
            {
                if (reader.Read())
                {
                    this.gameCountries.Add(new GameCapabilityCountry(reader));
                }
                count--;
            }
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public Game()
        {
        }
        #endregion

        #region Properties
        
        /// <summary>
        /// Gets or sets the LiveTitleId for the game
        /// </summary>
        public int LiveTitleId
        {
            get
            {
                return this.liveTitleId;
            }
            set
            {
                this.liveTitleId = value;
            }
        }

        /// <summary>
        /// Gets or sets the list of GameLocale objects that associate localized text to this Media
        /// </summary>
        public GameLocale[] GameLocales
        {
            get
            {
                return this.gameLocales.ToArray();
            }
            set
            {
                this.gameLocales.Clear();
                if (value != null)
                    this.gameLocales.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the list of GameCapabilityCountry objects that associate localized text to this Media
        /// </summary>
        public GameCapabilityCountry[] GameCountries
        {
            get
            {
                return this.gameCountries.ToArray();
            }
            set
            {
                this.gameCountries.Clear();
                if (value != null)
                    this.gameCountries.AddRange(value);
            }
        }


        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        override public InsertDataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
                base.Modified = value;
            }
        }      

        #endregion

        #region Methods
        /// <summary>
        /// Gets the full Game object from the database for the given id.
        /// </summary>
        /// <param name="id">The id of the game to get.</param>
        /// <returns>The Game object for the given id.</returns>
        public static Game Get(Guid id)
        {
            try
            {
                using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "GameGet",
                        id))
                {
                    if (reader.Read())
                        return new Game(reader);
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GameGet");
                throw;
            }
            return null;
        }

        /// <summary>
        /// Saves changes made to the given Game object to the database.
        /// </summary>
        public static void Save(Game game)
        {
            if (game == null)
                throw new ArgumentNullException("game");

            using (Serialization serializer = new Serialization())
            {
                serializer.SerializeStartElement("Data");
                game.Serialize(serializer);
                serializer.SerializeEndElement();
                Game.Save(serializer.ResultXml);
            }
        }

        /// <summary>
        /// Saves changes made to the given Game object specified as xml.
        /// </summary>
        /// <param name="xmlGame">Game data to be saved to the database.</param>
        public static void Save(string xmlGame)
        {
            if (string.IsNullOrEmpty(xmlGame))
            {
                throw new ArgumentNullException("xmlGame can not be null");
            }

            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "GameSave",
                        xmlGame);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GameSave");
                throw;
            }
        }

        /// <summary>
        /// Serialize the Game object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public override void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("Game");
                context.SerializeDatabaseOperation(this.Modified);
                context.SerializeElement("gameMediaId", this.Id);
                context.SerializeElement("liveTitleId", this.liveTitleId);
                base.Serialize(context);


                //GameLocale
                foreach (GameLocale gameLocale in this.gameLocales)
                {
                    gameLocale.GameMediaId = this.Id;
                    gameLocale.Serialize(context);
                }

                //GameLocale
                foreach (GameCapabilityCountry gameCountry in this.gameCountries)
                {
                    gameCountry.GameMediaId = this.Id;
                    gameCountry.Serialize(context);
                }

                context.SerializeEndElement();
            }
            else //For DB operation
            {
                if (this.modified == InsertDataChangeType.Add)
                {
                    this.SetModified(this.modified, true);
                }

                //Call base class to serialize media.
                base.Serialize(context);
                if (this.Modified != InsertDataChangeType.None)
                {
                    context.SerializeStartElement("Game");
                    context.SerializeDatabaseOperation(this.Modified);
                    context.SerializeElement("gameMediaId", this.Id);
                    context.SerializeElement("liveTitleId", this.liveTitleId);
                    context.SerializeEndElement();
                    //GameLocale
                    foreach (GameLocale gameLocale in this.gameLocales)
                    {
                        gameLocale.GameMediaId = this.Id;
                        gameLocale.Serialize(context);
                    }

                    //GameCapabilityCountry
                    foreach (GameCapabilityCountry gameCountry in this.gameCountries)
                    {
                        gameCountry.GameMediaId = this.Id;
                        gameCountry.Serialize(context);
                    }
                }
            }


        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public override void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::liveTitleId");
                if (null != attr) this.liveTitleId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::MediaData");
                if (null != attr) base.Deserialize(attr);

                XmlNodeList nodes = node.SelectNodes("child::GameLocale");
                foreach (XmlNode subnode in nodes)
                {
                    GameLocale gameLocale = new GameLocale();
                    gameLocale.Deserialize(subnode);
                    this.gameLocales.Add(gameLocale);

                    GameCapabilityCountry gameCountry = new GameCapabilityCountry();
                    gameCountry.Deserialize(subnode);
                    this.gameCountries.Add(gameCountry);
                
                }
            }

        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public override void SetModified(InsertDataChangeType type, bool cascade)
        {
            base.SetModified(type, cascade);
            if (cascade)
            {
                foreach (GameLocale gameLocale in this.gameLocales)
                {
                    gameLocale.SetModified((DataChangeType)type, cascade);
                }


                foreach (GameCapabilityCountry gameCountry in this.gameCountries)
                {
                    gameCountry.SetModified((DataChangeType)type, cascade);
                }
            }

            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ExternalFeedMapping.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the Media base class data that are common for a media in the catalog, which
    /// can be of type: video, game, music, image, or podcast.
    /// </summary>
    public class ExternalFeedMapping : ICatalogData
    {
        #region Constants
        private const int externalIdLength = 50;
        #endregion

        #region Fields
        private int externalFeedSourceId=-1;
        private string externalId=string.Empty;
        private int? catalogId= null;
        private int externalFeedmappingObjectId=-1;
        private DataChangeType modified;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <remarks>
        /// Initializes the Externalmapping object
        /// </remarks>
        /// <param name="reader">SqlDataReader</param>
        protected ExternalFeedMapping(SqlDataReader reader)
        {
            //Initialize ExternalFeedmapping
            this.externalId = reader.GetString(reader.GetOrdinal("externalId"));
            this.catalogId = reader.GetInt32(reader.GetOrdinal("catalogId"));
            this.externalFeedSourceId = reader.GetInt32(reader.GetOrdinal("externalFeedSourceId"));
            this.externalFeedmappingObjectId = reader.GetInt32(reader.GetOrdinal("externalFeedmappingObjectId"));
        }
        /// <summary>
        /// Parameterless constructor requied for SOAP.
        /// </summary>
        public ExternalFeedMapping()
        {
        }
        #endregion

        # region Properties
        /// <summary>
        /// Gets/Sets the ExternalId
        /// </summary>
        public string ExternalId
        {
            get
            {
                return externalId;
            }
            set
            {

                Validate.IsNotLongerThan(value, externalIdLength, "externalId", "externalId");
                externalId = value;
            }
        }
        /// <summary>
        /// Gets/Sets the catalogId
        /// </summary>
        public int? CatalogId
        {
            get
            {
                return catalogId;
            }
            set
            {

                catalogId = value;
            }
        }
        /// <summary>
        /// Gets/sets the External Feed Source Id
        /// </summary>
        public int ExternalFeedSourceId
        {
            get
            {
                return externalFeedSourceId;
            }
            set
            {
                if (ExternalFeedSource.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid ExternalFeedSource class id specified [{0}].", value));

                externalFeedSourceId = value;
            }
        }
        /// <summary>
        /// Gets/Sets the ExternalFeedmapping ObjectId
        /// </summary>
        public int ExternalFeedmappingObjectId
        {
            get
            {
                return externalFeedmappingObjectId;
            }
            set
            {
                if (ExternalFeedMappingObject.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid  ExternalFeedmapping class id specified [{0}].", value));

                externalFeedmappingObjectId = value;
            }
        }
        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public virtual DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        /// <summary>
        /// External Feed mapping save
        /// </summary>
        /// <param name="externalFeedMapping"></param>
        public static void Save(ExternalFeedMapping externalFeedMapping)
        {
            if (externalFeedMapping == null)
            {
                throw new ArgumentNullException("Can not save null externalFeedMapping");
            }
            if (externalFeedMapping.modified == DataChangeType.Delete || externalFeedMapping.modified == DataChangeType.Update)
            {
                throw new NotSupportedException("Deletion/Updation function is not supported in ExternalFeedMapping class.");
            }
            try
            {
                using (Serialization serializer = new Serialization())
                {
                    serializer.SerializeStartElement("Data");
                    externalFeedMapping.Serialize(serializer);
                    serializer.SerializeEndElement();
                    ExternalFeedMapping.Save(serializer.ResultXml);
                }
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "ExternalMappingSave");
                throw;
            }
        }
        /// <summary>
        /// Saves changes made to the given ExternalFeedMapping object specified as xml.
        /// </summary>
        /// <param name="xmlExternalFeedMapping">ExternalFeedMapping data to be save to the database.</param>
        public static void Save(string xmlExternalFeedMapping)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "ExternalFeedMappingSave",
                        xmlExternalFeedMapping);
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "ExternalFeedMappingSave");
                throw;
            }
        }

        /// <summary>
        /// Deserialize the Data
        /// </summary>
        /// <param name="node"></param>
        public virtual void Deserialize(XmlNode node)
        {
            return;
        }
        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <param name="context"></param>
        public void Serialize(Serialization context)
        {
            if (context != null)
            {
                context.SerializeStartElement("ExternalMappingData");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("externalId", this.externalId);
                context.SerializeElement("catalogId", this.catalogId);
                context.SerializeElement("externalFeedSourceId", this.externalFeedSourceId);
                context.SerializeElement("externalFeedMappingObjectId", this.externalFeedmappingObjectId);
                context.SerializeEndElement(); 
            }
        }
        /// <summary>
        /// Returns the CatalogId from the mapping table
        /// </summary>
        /// <param name="externalId"></param>
        /// <param name="feedSourceId"></param>
        /// <param name="externalmappingObjectId"></param>
        /// <returns></returns>
        public static int GetCatalogId(string externalId,int feedSourceId,int externalmappingObjectId)
        {
            int retvalue=-1;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "ExternalFeedMappingGet"
                    , (externalId == string.Empty) ? null : externalId
                    ,null
                    , feedSourceId
                    , externalmappingObjectId
                    ))
            {
                while (reader.Read())
                {
                    retvalue = reader.GetInt32(reader.GetOrdinal("catalogId"));
                }
            }
            return retvalue;
        }
        /// <summary>
        /// Returns the External from the mapping table
        /// </summary>
        /// <param name="catalogId"></param>
        /// <param name="feedSourceId"></param>
        /// <param name="externalmappingObjectId"></param>
        /// <returns></returns>
        public static string GetExternalId(int? catalogId, int feedSourceId, int externalmappingObjectId)
        {
            string retvalue = string.Empty;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "ExternalFeedMappingGet"
                    , null
                    , (!catalogId.HasValue) ? null : catalogId
                    , feedSourceId
                    , externalmappingObjectId
                    ))
            {
                while (reader.Read())
                {
                    retvalue = reader.GetString(reader.GetOrdinal("externalId"));
                }
            }
            return retvalue;
        }
       /// <summary>
       /// Gets the ExternaMapping Object from the four unique keys
       /// </summary>
       /// <param name="externalId"></param>
       /// <param name="catalogId"></param>
       /// <param name="feedSourceId"></param>
       /// <param name="externalmappingObjectId"></param>
       /// <returns></returns>
        public static ExternalFeedMapping Get(string externalId, int? catalogId, int feedSourceId, int externalmappingObjectId)
        {
            ExternalFeedMapping retValue = null;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(
                   CatalogDatabase.RawCatalogDBConnectionString,
                   "ExternalFeedMappingGet"
                   , (externalId == string.Empty) ? null : externalId
                   , (!catalogId.HasValue) ? null : catalogId
                   , feedSourceId
                   , externalmappingObjectId
                   ))
            {
                while (reader.Read())
                {
                    retValue = new ExternalFeedMapping(reader);
                }
            }
            return retValue;
        }
        # endregion
        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameCapabilityCountryMap.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the MediaLocaleMap data, and creation of the MediaLocaleMap class.
    /// </summary>
    public class GameCapabilityCountryMap : ICatalogData
    {
        #region Fields
        private Guid gameMediaId;
        private string countryCode;
        private string countryCodeMap;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
    /// <summary>
    ///  Constructor that takes a SqlDataReader.
    /// </summary>
    /// <param name="reader">SqlDataReader</param>
        internal GameCapabilityCountryMap(SqlDataReader reader)
        {
            this.gameMediaId = reader.GetGuid(reader.GetOrdinal("gameMediaId"));
            this.countryCode = reader.GetString(reader.GetOrdinal("countryCode"));
            this.countryCodeMap = reader.GetString(reader.GetOrdinal("countryCodeMap"));
        }

    /// <summary>
    ///  Parameterless constructor required for SOAP.
    /// </summary>
        public GameCapabilityCountryMap()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the gameMediaId for the GameCapabilityCountryMap
        /// </summary>
        internal Guid GameMediaId
        {
            get
            {
                return this.gameMediaId;
            }
            set
            {
                Validate.IsNotEmpty(value, "GameMediaId", "GameMediaId");
                this.gameMediaId = value;
            }
        }

        /// <summary>
        /// Gets or sets the countryCode for the GameCapabilityCountryMap
        /// </summary>
        public string CountryCode
        {
            get
            {
                return this.countryCode;
            }
            set
            {
                Validate.IsNotEmpty(value, "CountryCode", "countryCode");
                this.countryCode = value;
            }
        }

        /// <summary>
        /// Gets or sets the countryCodeMap for the GameCapabilityCountryMap
        /// </summary>
        public string CountryCodeMap
        {
            get
            {
                return this.countryCodeMap;
            }
            set
            {
                Validate.IsNotEmpty(value, "CountryCodeMap", "countryCodeMap");
                this.countryCodeMap = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None)
            {
                context.SerializeStartElement("GameCapabilityCountryMap");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("gameMediaId", this.gameMediaId);
                context.SerializeElement("countryCode", this.countryCode);
                context.SerializeElement("countryCodeMap", this.countryCodeMap);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            this.modified = Serialization.DeserializeDataChangeElement(node, this.modified, "op");
            this.gameMediaId = Serialization.DeserializeGuidElement(node, this.gameMediaId, "child::gameMediaId");
            this.countryCode = Serialization.DeserializeStringElement(node, this.countryCode, "child::countryCode");
            this.countryCodeMap = Serialization.DeserializeStringElement(node, this.countryCodeMap, "child::countryCodeMap");
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameContent.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides retrieval and editing of GameContent data in the catalog.
    /// </summary>
    public class GameContent : Media
    {
        private enum RatingInheritance
        {
            Default,
            Inherit,
            Override
        };

        #region Constants

        #endregion

        #region Fields
        private Guid gameMediaId;
        private int contentBitFilter;
        private int effectiveLiveTitleId;
        private bool consumable = false;
        private int liveTitleAssetId = 0;
        private InsertDataChangeType modified = InsertDataChangeType.None;

        private RatingInheritance ratingInheritance = RatingInheritance.Default;
        private GameContentAvatarItem gameContentAvatarItem = new GameContentAvatarItem();

        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        protected GameContent(SqlDataReader reader)
            : base(reader)
        {
            reader.NextResult();
            if (reader.Read())
            {
                this.gameMediaId = reader.GetGuid(reader.GetOrdinal("gameMediaId"));
                this.contentBitFilter = reader.IsDBNull(reader.GetOrdinal("contentBitFilter")) ? -1 : reader.GetInt32(reader.GetOrdinal("contentBitFilter"));
                this.effectiveLiveTitleId = reader.IsDBNull(reader.GetOrdinal("effectiveLiveTitleId")) ? 0 : reader.GetInt32(reader.GetOrdinal("effectiveLiveTitleId"));
                this.liveTitleAssetId = reader.IsDBNull(reader.GetOrdinal("liveTitleAssetId")) ? 0 : reader.GetInt32(reader.GetOrdinal("liveTitleAssetId"));
                this.consumable = !reader.IsDBNull(reader.GetOrdinal("liveTitleAssetId"));

                bool inheritRating = reader.IsDBNull(reader.GetOrdinal("inheritRating")) ? true : reader.GetBoolean(reader.GetOrdinal("inheritRating"));
                ratingInheritance = inheritRating ? RatingInheritance.Inherit : RatingInheritance.Override;
            }
            reader.NextResult();
            if (reader.Read())
            {
                this.gameContentAvatarItem.AvatarBodyTypeId = reader.GetInt32(reader.GetOrdinal("avatarBodyTypeId"));
                this.gameContentAvatarItem.GameContentMediaId = this.gameMediaId;
            }

        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public GameContent()
        {
        }
        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the GameMediaId for the gameContent. This gameMediaId represents the game title.
        /// </summary>
        public Guid GameMediaId
        {
            get
            {
                return this.gameMediaId;
            }
            set
            {
                this.gameMediaId = value;
            }
        }

        /// <summary>
        /// Gets or sets the provider category associanted for the gameContent.
        /// </summary>
        public int ContentBitFilter
        {
            get
            {
                return this.contentBitFilter;
            }
            set
            {
                this.contentBitFilter = value;
            }
        }

        /// <summary>
        /// Gets or sets the liveTitleId to use for this gameContent.
        /// </summary>
        public int EffectiveLiveTitleId
        {
            get
            {
                return this.effectiveLiveTitleId;
            }
            set
            {
                this.effectiveLiveTitleId = value;
            }
        }

        /// <summary>
        /// Gets or sets the Consumable to use
        /// </summary>
        public bool Consumable
        {
            get
            {
                return this.consumable;
            }
            set
            {
                this.consumable = value;
            }
        }

        /// <summary>
        /// Gets or sets the LiveTitleAssetId to use
        /// </summary>
        public int LiveTitleAssetId
        {
            get
            {
                if (this.consumable)
                {
                    return this.liveTitleAssetId;
                }
                else
                {
                    return 0;
                }
            }
            set
            {
                // ignore if the same value is being set (this happens when GameContent is
                // send to the web service
                if (this.liveTitleAssetId == value)
                    return;

                if (this.consumable)
                {
                    this.liveTitleAssetId = value;
                }
                else
                {
                    throw new ArgumentException("Game Content is not consumable, LiveTitleAssetId can not be set");
                }
            }
        }

        /// <summary>
        /// Gets or sets if this content inherits rating from parent or not
        /// </summary>
        public bool InheritRating
        {
            get
            {
                switch (ratingInheritance)
                {
                    case RatingInheritance.Override:
                        return false;
                    case RatingInheritance.Inherit:
                        return true;
                    case RatingInheritance.Default:
                    default:
                        return (RatingValues == null) || (RatingValues.Length == 0);
                }
            }
            set
            {
                ratingInheritance = value ? RatingInheritance.Inherit : RatingInheritance.Override;
            }
        }

        /// <summary>
        /// Gets or sets the GameContentAvatarItem
        /// </summary>
        public GameContentAvatarItem AvatarItem
        {
            get
            {
                return gameContentAvatarItem;
            }
            set
            {
                gameContentAvatarItem = value;
                gameContentAvatarItem.GameContentMediaId = this.Id;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        override public InsertDataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
                base.Modified = value;
            }
        }
        #endregion

        #region Methods

        /// <summary>
        /// Gets the full GameContent object from the database for the given id.
        /// </summary>
        /// <param name="id">The id of the gameContent to get.</param>
        /// <returns>The GameContent object for the given id.</returns>
        public static GameContent Get(Guid id)
        {
            try
            {
                using (SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "GameContentGet",
                        id))
                {
                    if (reader.Read())
                        return new GameContent(reader);
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GameContentGet");
                throw;
            }
            return null;
        }

        /// <summary>
        /// Saves changes made to the given GameContent object to the database.
        /// </summary>
        public static void Save(GameContent gameContent)
        {
            if (gameContent == null)
                throw new ArgumentNullException("gameContent");

            using (Serialization serializer = new Serialization())
            {
                serializer.SerializeStartElement("Data");
                gameContent.Serialize(serializer);
                serializer.SerializeEndElement();
                GameContent.Save(serializer.ResultXml);
            }
        }

        /// <summary>
        /// Saves changes made to the given GameContent object specified as xml.
        /// </summary>
        /// <param name="xmlGame">GameContent data to be saved to the database.</param>
        public static void Save(string xmlGame)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "GameContentSave",
                        xmlGame);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GameContentSave");
                throw;
            }
        }


        /// <summary>
        /// Serialize the GameContent object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public override void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("GameContent");
                context.SerializeDatabaseOperation(this.Modified);
                base.Serialize(context);
                context.SerializeElement("gameContentMediaId", this.Id);
                context.SerializeElement("gameMediaId", this.gameMediaId);
                context.SerializeElement("contentBitFilter", this.contentBitFilter);
                context.SerializeElement("effectiveLiveTitleId", this.effectiveLiveTitleId);
                context.SerializeElement("liveTitleAssetId", this.liveTitleAssetId);
                context.SerializeElement("consumable", this.consumable);
                context.SerializeElement("inheritRating", this.InheritRating);
                gameContentAvatarItem.Serialize(context);
                context.SerializeEndElement();

            }
            else
            {
                if (this.modified == InsertDataChangeType.Add)
                {
                    this.SetModified(this.modified, true);
                }

                //Call base class to serialize media.
                base.Serialize(context);

                if (this.Modified != InsertDataChangeType.None)
                {
                    context.SerializeStartElement("GameContent");
                    context.SerializeDatabaseOperation(this.Modified);
                    context.SerializeElement("gameContentMediaId", this.Id);
                    context.SerializeElement("gameMediaId", this.gameMediaId);
                    context.SerializeElement("contentBitFilter", this.contentBitFilter);
                    context.SerializeElement("effectiveLiveTitleId", this.effectiveLiveTitleId);
                    context.SerializeElement("liveTitleAssetId", this.liveTitleAssetId);
                    context.SerializeElement("consumable", this.consumable);
                    context.SerializeElement("inheritRating", this.InheritRating);
                    gameContentAvatarItem.Serialize(context);
                    context.SerializeEndElement();
                }

            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public override void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::gameMediaId");
                if (null != attr) this.gameMediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::contentBitFilter");
                if (null != attr) this.contentBitFilter = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::effectiveLiveTitleId");
                if (null != attr) this.effectiveLiveTitleId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::liveTitleAssetId");
                if (null != attr) this.liveTitleAssetId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::consumable");
                if (null != attr) this.consumable = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::inheritRating");
                if (null != attr) this.InheritRating = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::GameContentAvatarItem");
                if (null != attr) this.gameContentAvatarItem.Deserialize(attr);

                attr = node.SelectSingleNode("child::MediaData");
                if (null != attr) base.Deserialize(attr);

            }
        }
        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public override void SetModified(InsertDataChangeType type, bool cascade)
        {
            base.SetModified(type, cascade);
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameCapabilityCountry.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides retrieval and editing of GameCapabilityCountry data in the catalog.
    /// </summary>
    public class GameCapabilityCountry : ICatalogData
    {
        #region Constants
        #endregion

        #region Fields
        private Guid gameMediaId;
        private string countryCode;
        private int? offlinePlayersMin;
        private int? offlinePlayersMax;
        private int? offlineCoopPlayersMin;
        private int? offlineCoopPlayersMax;
        private bool? offlineCoopHardDriveRequired;  //bit
        private int? offlineCoopHardDriveStorageAmount;
        private int? offlineCoopHardDriveStorageAmountUnitId;
        private int? offlineSaveStorageAmount;
        private int? offlineSaveStorageAmountUnitId;
        private int? offlineSystemLinkMin;
        private int? offlineSystemLinkMax;
        private int? offlineMaxHDTVModeId;
        private bool? offlineVoiceCommands;  //bit
        private bool? offlinePeripheralWheel;  //bit
        private bool? offlinePeripheralGamePad;  //bit
        private bool? offlinePeripheralArcadeStick;  //bit
        private bool? offlinePeripheralFlightStick;  //bit
        private bool? offlinePeripheralDancePad;  //bit
        private bool? offlinePeripheralForceFeedbackWheel;  //bit
        private bool? offlinePeripheralCamera;  //bit
        private bool? offlineCustomSoundtracks;  //bit
        private bool? offlineDolbyDigital;  //bit
        private int? onlineMultiplayerMin;
        private int? onlineMultiplayerMax;
        private bool? onlineMultiplayerHardDriveRequired;  //bit
        private int? onlineCoopPlayersMin;
        private int? onlineCoopPlayersMax;
        private bool? onlineCoopHardDriveRequired;  //bit
        private int? onlineCoopHardDriveStorageAmount;
        private int? onlineCoopHardDriveStorageAmountUnitId;
        private bool? onlineHardDriveRequired;  //bit
        private int? onlinePlayStorageAmount;
        private int? onlinePlayStorageAmountUnitId;
        private bool? onlineContentDownload;  //bit
        private bool? onlineLeaderboards;  //bit
        private bool? onlineSpectatorMode;  //bit
        private bool? onlineVoice;  //bit
        private bool? onlineOnly;  //bit
        private List<GameCapabilityCountryMap> gameCapabilityCountryMaps = new List<GameCapabilityCountryMap>();
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal GameCapabilityCountry(SqlDataReader reader)
        {
            this.gameMediaId = reader.GetGuid(reader.GetOrdinal("gameMediaId"));
            this.countryCode = reader.GetString(reader.GetOrdinal("countryCode"));
            this.offlinePlayersMin = SqlHelper.GetInt32(reader, "offlinePlayersMin");
            this.offlinePlayersMax = SqlHelper.GetInt32(reader, "offlinePlayersMax");
            this.offlineCoopPlayersMin = SqlHelper.GetInt32(reader, "offlineCoopPlayersMin");
            this.offlineCoopPlayersMax = SqlHelper.GetInt32(reader, "offlineCoopPlayersMax");
            this.offlineCoopHardDriveRequired = SqlHelper.GetBool(reader, "offlineCoopHardDriveRequired");
            this.offlineCoopHardDriveStorageAmount = SqlHelper.GetInt32(reader, "offlineCoopHardDriveStorageAmount");
            this.offlineCoopHardDriveStorageAmountUnitId = SqlHelper.GetInt32(reader, "offlineCoopHardDriveStorageAmountUnitId");
            this.offlineSaveStorageAmount = SqlHelper.GetInt32(reader, "offlineSaveStorageAmount");
            this.offlineSaveStorageAmountUnitId = SqlHelper.GetInt32(reader, "offlineSaveStorageAmountUnitId");
            this.offlineSystemLinkMin = SqlHelper.GetInt32(reader, "offlineSystemLinkMin");
            this.offlineSystemLinkMax = SqlHelper.GetInt32(reader, "offlineSystemLinkMax");
            this.offlineMaxHDTVModeId = SqlHelper.GetInt32(reader, "offlineMaxHDTVModeId");
            this.offlineVoiceCommands = SqlHelper.GetBool(reader, "offlineVoiceCommands");
            this.offlinePeripheralWheel = SqlHelper.GetBool(reader, "offlinePeripheralWheel");
            this.offlinePeripheralGamePad = SqlHelper.GetBool(reader, "offlinePeripheralGamePad");
            this.offlinePeripheralArcadeStick = SqlHelper.GetBool(reader, "offlinePeripheralArcadeStick");
            this.offlinePeripheralFlightStick = SqlHelper.GetBool(reader, "offlinePeripheralFlightStick");
            this.offlinePeripheralDancePad = SqlHelper.GetBool(reader, "offlinePeripheralDancePad");
            this.offlinePeripheralForceFeedbackWheel = SqlHelper.GetBool(reader, "offlinePeripheralForceFeedbackWheel");
            this.offlinePeripheralCamera = SqlHelper.GetBool(reader, "offlinePeripheralCamera");
            this.offlineCustomSoundtracks = SqlHelper.GetBool(reader, "offlineCustomSoundtracks");
            this.offlineDolbyDigital = SqlHelper.GetBool(reader, "offlineDolbyDigital");
            this.onlineMultiplayerMin = SqlHelper.GetInt32(reader, "onlineMultiplayerMin");
            this.onlineMultiplayerMax = SqlHelper.GetInt32(reader, "onlineMultiplayerMax");
            this.onlineMultiplayerHardDriveRequired = SqlHelper.GetBool(reader, "onlineMultiplayerHardDriveRequired");
            this.onlineCoopPlayersMin = SqlHelper.GetInt32(reader, "onlineCoopPlayersMin");
            this.onlineCoopPlayersMax = SqlHelper.GetInt32(reader, "onlineCoopPlayersMax");
            this.onlineCoopHardDriveRequired = SqlHelper.GetBool(reader, "onlineCoopHardDriveRequired");
            this.onlineCoopHardDriveStorageAmount = SqlHelper.GetInt32(reader, "onlineCoopHardDriveStorageAmount");
            this.onlineCoopHardDriveStorageAmountUnitId = SqlHelper.GetInt32(reader, "onlineCoopHardDriveStorageAmountUnitId");
            this.onlineHardDriveRequired = SqlHelper.GetBool(reader, "onlineHardDriveRequired");
            this.onlinePlayStorageAmount = SqlHelper.GetInt32(reader, "onlinePlayStorageAmount");
            this.onlinePlayStorageAmountUnitId = SqlHelper.GetInt32(reader, "onlinePlayStorageAmountUnitId");
            this.onlineContentDownload = SqlHelper.GetBool(reader, "onlineContentDownload");
            this.onlineLeaderboards = SqlHelper.GetBool(reader, "onlineLeaderboards");
            this.onlineSpectatorMode = SqlHelper.GetBool(reader, "onlineSpectatorMode");
            this.onlineVoice = SqlHelper.GetBool(reader, "onlineVoice");
            this.onlineOnly = SqlHelper.GetBool(reader, "onlineOnly");

            reader.NextResult();
            while (reader.Read())
            {
                gameCapabilityCountryMaps.Add(new GameCapabilityCountryMap(reader));
            }
        }
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public GameCapabilityCountry()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the gameMediaId for the GameCapabilityCountry
        /// </summary>
        public Guid GameMediaId
        {
            get
            {
                return this.gameMediaId;
            }
            set
            {
                this.gameMediaId = value;
            }
        }

        /// <summary>
        /// Gets or sets the countryCode for the GameCapabilityCountry
        /// </summary>
        public string CountryCode
        {
            get
            {
                return this.countryCode;
            }
            set
            {
                Validate.IsNotEmpty(value, "CountryCode", "countryCode");
                this.countryCode = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlinePlayersMin for the GameCapabilityCountry
        /// </summary>
        public int? OfflinePlayersMin
        {
            get
            {
                return this.offlinePlayersMin;
            }
            set
            {
                this.offlinePlayersMin = value;
            }
        }
        /// <summary>
        /// Gets or sets the offlinePlayersMax for the GameCapabilityCountry
        /// </summary>
        public int? OfflinePlayersMax
        {
            get
            {
                return this.offlinePlayersMax;
            }
            set
            {
                this.offlinePlayersMax = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineCoopPlayersMin for the GameCapabilityCountry
        /// </summary>
        public int? OfflineCoopPlayersMin
        {
            get
            {
                return this.offlineCoopPlayersMin;
            }
            set
            {
                this.offlineCoopPlayersMin = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineCoopPlayersMax for the GameCapabilityCountry
        /// </summary>
        public int? OfflineCoopPlayersMax
        {
            get
            {
                return this.offlineCoopPlayersMax;
            }
            set
            {
                this.offlineCoopPlayersMax = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineCoopHardDriveRequired for the GameCapabilityCountry
        /// </summary>
        public bool? OfflineCoopHardDriveRequired
        {
            get
            {
                return this.offlineCoopHardDriveRequired;
            }
            set
            {
                this.offlineCoopHardDriveRequired = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineCoopHardDriveStorageAmount for the GameCapabilityCountry
        /// </summary>
        public int? OfflineCoopHardDriveStorageAmount
        {
            get
            {
                return this.offlineCoopHardDriveStorageAmount;
            }
            set
            {
                this.offlineCoopHardDriveStorageAmount = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineCoopHardDriveStorageAmountUnitId for the GameCapabilityCountry
        /// </summary>
        public int? OfflineCoopHardDriveStorageAmountUnitId
        {
            get
            {
                return this.offlineCoopHardDriveStorageAmountUnitId;
            }
            set
            {
                this.offlineCoopHardDriveStorageAmountUnitId = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineSaveStorageAmount for the GameCapabilityCountry
        /// </summary>
        public int? OfflineSaveStorageAmount
        {
            get
            {
                return this.offlineSaveStorageAmount;
            }
            set
            {
                this.offlineSaveStorageAmount = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineSaveStorageAmountUnitId for the GameCapabilityCountry
        /// </summary>
        public int? OfflineSaveStorageAmountUnitId
        {
            get
            {
                return this.offlineSaveStorageAmountUnitId;
            }
            set
            {
                this.offlineSaveStorageAmountUnitId = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineSystemLinkMin for the GameCapabilityCountry
        /// </summary>
        public int? OfflineSystemLinkMin
        {
            get
            {
                return this.offlineSystemLinkMin;
            }
            set
            {
                this.offlineSystemLinkMin = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineSystemLinkMax for the GameCapabilityCountry
        /// </summary>
        public int? OfflineSystemLinkMax
        {
            get
            {
                return this.offlineSystemLinkMax;
            }
            set
            {
                this.offlineSystemLinkMax = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineMaxHDTVModeId for the GameCapabilityCountry
        /// </summary>
        public int? OfflineMaxHDTVModeId
        {
            get
            {
                return this.offlineMaxHDTVModeId;
            }
            set
            {
                this.offlineMaxHDTVModeId = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineVoiceCommands for the GameCapabilityCountry
        /// </summary>
        public bool? OfflineVoiceCommands
        {
            get
            {
                return this.offlineVoiceCommands;
            }
            set
            {
                this.offlineVoiceCommands = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlinePeripheralWheel for the GameCapabilityCountry
        /// </summary>
        public bool? OfflinePeripheralWheel
        {
            get
            {
                return this.offlinePeripheralWheel;
            }
            set
            {
                this.offlinePeripheralWheel = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlinePeripheralGamePad for the GameCapabilityCountry
        /// </summary>
        public bool? OfflinePeripheralGamePad
        {
            get
            {
                return this.offlinePeripheralGamePad;
            }
            set
            {
                this.offlinePeripheralGamePad = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlinePeripheralArcadeStick for the GameCapabilityCountry
        /// </summary>
        public bool? OfflinePeripheralArcadeStick
        {
            get
            {
                return this.offlinePeripheralArcadeStick;
            }
            set
            {
                this.offlinePeripheralArcadeStick = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlinePeripheralFlightStick for the GameCapabilityCountry
        /// </summary>
        public bool? OfflinePeripheralFlightStick
        {
            get
            {
                return this.offlinePeripheralFlightStick;
            }
            set
            {
                this.offlinePeripheralFlightStick = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlinePeripheralDancePad for the GameCapabilityCountry
        /// </summary>
        public bool? OfflinePeripheralDancePad
        {
            get
            {
                return this.offlinePeripheralDancePad;
            }
            set
            {
                this.offlinePeripheralDancePad = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlinePeripheralForceFeedbackWheel for the GameCapabilityCountry
        /// </summary>
        public bool? OfflinePeripheralForceFeedbackWheel
        {
            get
            {
                return this.offlinePeripheralForceFeedbackWheel;
            }
            set
            {
                this.offlinePeripheralForceFeedbackWheel = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlinePeripheralCamera for the GameCapabilityCountry
        /// </summary>
        public bool? OfflinePeripheralCamera
        {
            get
            {
                return this.offlinePeripheralCamera;
            }
            set
            {
                this.offlinePeripheralCamera = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineCustomSoundtracks for the GameCapabilityCountry
        /// </summary>
        public bool? OfflineCustomSoundtracks
        {
            get
            {
                return this.offlineCustomSoundtracks;
            }
            set
            {
                this.offlineCustomSoundtracks = value;
            }
        }

        /// <summary>
        /// Gets or sets the offlineDolbyDigital for the GameCapabilityCountry
        /// </summary>
        public bool? OfflineDolbyDigital
        {
            get
            {
                return this.offlineDolbyDigital;
            }
            set
            {
                this.offlineDolbyDigital = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineMultiplayerMin for the GameCapabilityCountry
        /// </summary>
        public int? OnlineMultiplayerMin
        {
            get
            {
                return this.onlineMultiplayerMin;
            }
            set
            {
                this.onlineMultiplayerMin = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineMultiplayerMax for the GameCapabilityCountry
        /// </summary>
        public int? OnlineMultiplayerMax
        {
            get
            {
                return this.onlineMultiplayerMax;
            }
            set
            {
                this.onlineMultiplayerMax = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineMultiplayerHardDriveRequired for the GameCapabilityCountry
        /// </summary>
        public bool? OnlineMultiplayerHardDriveRequired
        {
            get
            {
                return this.onlineMultiplayerHardDriveRequired;
            }
            set
            {
                this.onlineMultiplayerHardDriveRequired = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineCoopPlayersMin for the GameCapabilityCountry
        /// </summary>
        public int? OnlineCoopPlayersMin
        {
            get
            {
                return this.onlineCoopPlayersMin;
            }
            set
            {
                this.onlineCoopPlayersMin = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineCoopPlayersMax for the GameCapabilityCountry
        /// </summary>
        public int? OnlineCoopPlayersMax
        {
            get
            {
                return this.onlineCoopPlayersMax;
            }
            set
            {
                this.onlineCoopPlayersMax = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineCoopHardDriveRequired for the GameCapabilityCountry
        /// </summary>
        public bool? OnlineCoopHardDriveRequired
        {
            get
            {
                return this.onlineCoopHardDriveRequired;
            }
            set
            {
                this.onlineCoopHardDriveRequired = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineCoopHardDriveStorageAmount for the GameCapabilityCountry
        /// </summary>
        public int? OnlineCoopHardDriveStorageAmount
        {
            get
            {
                return this.onlineCoopHardDriveStorageAmount;
            }
            set
            {
                this.onlineCoopHardDriveStorageAmount = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineCoopHardDriveStorageAmountUnitId for the GameCapabilityCountry
        /// </summary>
        public int? OnlineCoopHardDriveStorageAmountUnitId
        {
            get
            {
                return this.onlineCoopHardDriveStorageAmountUnitId;
            }
            set
            {
                this.onlineCoopHardDriveStorageAmountUnitId = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineHardDriveRequired for the GameCapabilityCountry
        /// </summary>
        public bool? OnlineHardDriveRequired
        {
            get
            {
                return this.onlineHardDriveRequired;
            }
            set
            {
                this.onlineHardDriveRequired = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlinePlayStorageAmount for the GameCapabilityCountry
        /// </summary>
        public int? OnlinePlayStorageAmount
        {
            get
            {
                return this.onlinePlayStorageAmount;
            }
            set
            {
                this.onlinePlayStorageAmount = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlinePlayStorageAmountUnitId for the GameCapabilityCountry
        /// </summary>
        public int? OnlinePlayStorageAmountUnitId
        {
            get
            {
                return this.onlinePlayStorageAmountUnitId;
            }
            set
            {
                this.onlinePlayStorageAmountUnitId = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineContentDownload for the GameCapabilityCountry
        /// </summary>
        public bool? OnlineContentDownload
        {
            get
            {
                return this.onlineContentDownload;
            }
            set
            {
                this.onlineContentDownload = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineLeaderboards for the GameCapabilityCountry
        /// </summary>
        public bool? OnlineLeaderboards
        {
            get
            {
                return this.onlineLeaderboards;
            }
            set
            {
                this.onlineLeaderboards = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineSpectatorMode for the GameCapabilityCountry
        /// </summary>
        public bool? OnlineSpectatorMode
        {
            get
            {
                return this.onlineSpectatorMode;
            }
            set
            {
                this.onlineSpectatorMode = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineVoice for the GameCapabilityCountry
        /// </summary>
        public bool? OnlineVoice
        {
            get
            {
                return this.onlineVoice;
            }
            set
            {
                this.onlineVoice = value;
            }
        }

        /// <summary>
        /// Gets or sets the onlineOnly for the GameCapabilityCountry
        /// </summary>
        public bool? OnlineOnly
        {
            get
            {
                return this.onlineOnly;
            }
            set
            {
                this.onlineOnly = value;
            }
        }

        /// <summary>
        /// Gets or sets the array of GameCapabilityCountryMap that map to locale of this GameCapabilityCountry.
        /// </summary>
        public GameCapabilityCountryMap[] GameCapabilityCountryMaps
        {
            get
            {
                return this.gameCapabilityCountryMaps.ToArray();
            }
            set
            {
                this.gameCapabilityCountryMaps.Clear();
                if (value != null)
                    this.gameCapabilityCountryMaps.AddRange(value);
            }
        }



        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods

        /// <summary>
        /// Serialize the GameLocale object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public virtual void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("GameCapabilityCountry");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("gameMediaId", this.gameMediaId);
                context.SerializeElement("countryCode", this.countryCode);
                context.SerializeElement("offlinePlayersMin", this.offlinePlayersMin);
                context.SerializeElement("offlinePlayersMax", this.offlinePlayersMax);
                context.SerializeElement("offlineCoopPlayersMin", this.offlineCoopPlayersMin);
                context.SerializeElement("offlineCoopPlayersMax", this.offlineCoopPlayersMax);
                context.SerializeElement("offlineCoopHardDriveRequired", this.offlineCoopHardDriveRequired);
                context.SerializeElement("offlineCoopHardDriveStorageAmount", this.offlineCoopHardDriveStorageAmount);
                context.SerializeElement("offlineCoopHardDriveStorageAmountUnitId", this.offlineCoopHardDriveStorageAmountUnitId);
                context.SerializeElement("offlineSaveStorageAmountUnitId", this.offlineSaveStorageAmountUnitId);
                context.SerializeElement("offlineSystemLinkMin", this.offlineSystemLinkMin);
                context.SerializeElement("offlineSystemLinkMax", this.offlineSystemLinkMax);
                context.SerializeElement("offlineMaxHDTVModeId", this.offlineMaxHDTVModeId);
                context.SerializeElement("offlineVoiceCommands", this.offlineVoiceCommands);
                context.SerializeElement("offlinePeripheralWheel", this.offlinePeripheralWheel);
                context.SerializeElement("offlinePeripheralGamePad", this.offlinePeripheralGamePad);
                context.SerializeElement("offlinePeripheralArcadeStick", this.offlinePeripheralArcadeStick);
                context.SerializeElement("offlinePeripheralFlightStick", this.offlinePeripheralFlightStick);
                context.SerializeElement("offlinePeripheralDancePad", this.offlinePeripheralDancePad);
                context.SerializeElement("offlinePeripheralForceFeedbackWheel", this.offlinePeripheralForceFeedbackWheel);
                context.SerializeElement("offlinePeripheralCamera", this.offlinePeripheralCamera);
                context.SerializeElement("offlineCustomSoundtracks", this.offlineCustomSoundtracks);
                context.SerializeElement("offlineDolbyDigital", this.offlineDolbyDigital);
                context.SerializeElement("onlineMultiplayerMin", this.onlineMultiplayerMin);
                context.SerializeElement("onlineMultiplayerMax", this.onlineMultiplayerMax);
                context.SerializeElement("onlineMultiplayerHardDriveRequired", this.onlineMultiplayerHardDriveRequired);
                context.SerializeElement("onlineCoopPlayersMin", this.onlineCoopPlayersMin);
                context.SerializeElement("onlineCoopPlayersMax", this.onlineCoopPlayersMax);
                context.SerializeElement("onlineCoopHardDriveRequired", this.onlineCoopHardDriveRequired);
                context.SerializeElement("onlineCoopHardDriveStorageAmount", this.onlineCoopHardDriveStorageAmount);
                context.SerializeElement("onlineCoopHardDriveStorageAmountUnitId", this.onlineCoopHardDriveStorageAmountUnitId);
                context.SerializeElement("onlineHardDriveRequired", this.onlineHardDriveRequired);
                context.SerializeElement("onlinePlayStorageAmount", this.onlinePlayStorageAmount);
                context.SerializeElement("onlinePlayStorageAmountUnitId", this.onlinePlayStorageAmountUnitId);
                context.SerializeElement("onlineContentDownload", this.onlineContentDownload);
                context.SerializeElement("onlineLeaderboards", this.onlineLeaderboards);
                context.SerializeElement("onlineSpectatorMode", this.onlineSpectatorMode);
                context.SerializeElement("onlineVoice", this.onlineVoice);
                context.SerializeElement("onlineOnly", this.onlineOnly);

                //GameCapabilityCountryMap
                // Ensures that only country maps associated with this GameCapabilityCountry are specifically for this one
                foreach (GameCapabilityCountryMap countryMap in this.gameCapabilityCountryMaps)
                {
                    countryMap.GameMediaId = this.gameMediaId;
                    countryMap.CountryCodeMap = this.countryCode; 
                    countryMap.Serialize(context);
                }

                context.SerializeEndElement();                
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            this.modified = Serialization.DeserializeDataChangeElement(node, this.modified, "op");
            this.gameMediaId = Serialization.DeserializeGuidElement(node, this.gameMediaId, "child::gameMediaId");
            this.countryCode = Serialization.DeserializeStringElement(node, this.countryCode, "child::countryCode");
            this.offlinePlayersMin = Serialization.DeserializeIntElement(node, this.offlinePlayersMin, "child::offlinePlayersMin");
            this.offlinePlayersMax = Serialization.DeserializeIntElement(node, this.offlinePlayersMax, "child::offlinePlayersMax");
            this.offlineCoopPlayersMin = Serialization.DeserializeIntElement(node, this.offlineCoopPlayersMin, "child::offlineCoopPlayersMin");
            this.offlineCoopPlayersMax = Serialization.DeserializeIntElement(node, this.offlineCoopPlayersMax, "child::offlineCoopPlayersMax");
            this.offlineCoopHardDriveRequired = Serialization.DeserializeBoolElement(node, this.offlineCoopHardDriveRequired, "child::offlineCoopHardDriveRequired");
            this.offlineCoopHardDriveStorageAmount = Serialization.DeserializeIntElement(node, this.offlineCoopHardDriveStorageAmount, "child::offlineCoopHardDriveStorageAmount");
            this.offlineCoopHardDriveStorageAmountUnitId = Serialization.DeserializeIntElement(node, this.offlineCoopHardDriveStorageAmountUnitId, "child::offlineCoopHardDriveStorageAmountUnitId");
            this.offlineSaveStorageAmount = Serialization.DeserializeIntElement(node, this.offlineSaveStorageAmount, "child::offlineSaveStorageAmount");
            this.offlineSaveStorageAmountUnitId = Serialization.DeserializeIntElement(node, this.offlineSaveStorageAmountUnitId, "child::offlineSaveStorageAmountUnitId");
            this.offlineSystemLinkMin = Serialization.DeserializeIntElement(node, this.offlineSystemLinkMin, "child::offlineSystemLinkMin");
            this.offlineSystemLinkMax = Serialization.DeserializeIntElement(node, this.offlineSystemLinkMax, "child::offlineSystemLinkMax");
            this.offlineMaxHDTVModeId = Serialization.DeserializeIntElement(node, this.offlineMaxHDTVModeId, "child::offlineMaxHDTVModeId");
            this.offlineVoiceCommands = Serialization.DeserializeBoolElement(node, this.offlineVoiceCommands, "child::offlineVoiceCommands");
            this.offlinePeripheralWheel = Serialization.DeserializeBoolElement(node, this.offlinePeripheralWheel, "child::offlinePeripheralWheel");
            this.offlinePeripheralGamePad = Serialization.DeserializeBoolElement(node, this.offlinePeripheralGamePad, "child::offlinePeripheralGamePad");
            this.offlinePeripheralArcadeStick = Serialization.DeserializeBoolElement(node, this.offlinePeripheralArcadeStick, "child::offlinePeripheralArcadeStick");
            this.offlinePeripheralFlightStick = Serialization.DeserializeBoolElement(node, this.offlinePeripheralFlightStick, "child::offlinePeripheralFlightStick");
            this.offlinePeripheralDancePad = Serialization.DeserializeBoolElement(node, this.offlinePeripheralDancePad, "child::offlinePeripheralDancePad");
            this.offlinePeripheralForceFeedbackWheel = Serialization.DeserializeBoolElement(node, this.offlinePeripheralForceFeedbackWheel, "child::offlinePeripheralForceFeedbackWheel");
            this.offlinePeripheralCamera = Serialization.DeserializeBoolElement(node, this.offlinePeripheralCamera, "child::offlinePeripheralCamera");
            this.offlineCustomSoundtracks = Serialization.DeserializeBoolElement(node, this.offlineCustomSoundtracks, "child::offlineCustomSoundtracks");
            this.offlineDolbyDigital = Serialization.DeserializeBoolElement(node, this.offlineDolbyDigital, "child::offlineDolbyDigital");
            this.onlineMultiplayerMin = Serialization.DeserializeIntElement(node, this.onlineMultiplayerMin, "child::onlineMultiplayerMin");
            this.onlineMultiplayerMax = Serialization.DeserializeIntElement(node, this.onlineMultiplayerMax, "child::onlineMultiplayerMax");
            this.onlineMultiplayerHardDriveRequired = Serialization.DeserializeBoolElement(node, this.onlineMultiplayerHardDriveRequired, "child::onlineMultiplayerHardDriveRequired");
            this.onlineCoopPlayersMin = Serialization.DeserializeIntElement(node, this.onlineCoopPlayersMin, "child::onlineCoopPlayersMin");
            this.onlineCoopPlayersMax = Serialization.DeserializeIntElement(node, this.onlineCoopPlayersMax, "child::onlineCoopPlayersMax");
            this.onlineCoopHardDriveRequired = Serialization.DeserializeBoolElement(node, this.onlineCoopHardDriveRequired, "child::onlineCoopHardDriveRequired");
            this.onlineCoopHardDriveStorageAmount = Serialization.DeserializeIntElement(node, this.onlineCoopHardDriveStorageAmount, "child::onlineCoopHardDriveStorageAmount");
            this.onlineCoopHardDriveStorageAmountUnitId = Serialization.DeserializeIntElement(node, this.onlineCoopHardDriveStorageAmountUnitId, "child::onlineCoopHardDriveStorageAmountUnitId");
            this.onlineHardDriveRequired = Serialization.DeserializeBoolElement(node, this.onlineHardDriveRequired, "child::onlineHardDriveRequired");
            this.onlinePlayStorageAmount = Serialization.DeserializeIntElement(node, this.onlinePlayStorageAmount, "child::onlinePlayStorageAmount");
            this.onlinePlayStorageAmountUnitId = Serialization.DeserializeIntElement(node, this.onlinePlayStorageAmountUnitId, "child::onlinePlayStorageAmountUnitId");
            this.onlineContentDownload = Serialization.DeserializeBoolElement(node, this.onlineContentDownload, "child::onlineContentDownload");
            this.onlineLeaderboards = Serialization.DeserializeBoolElement(node, this.onlineLeaderboards, "child::onlineLeaderboards");
            this.onlineSpectatorMode = Serialization.DeserializeBoolElement(node, this.onlineSpectatorMode, "child::onlineSpectatorMode");
            this.onlineVoice = Serialization.DeserializeBoolElement(node, this.onlineVoice, "child::onlineVoice");
            this.onlineOnly = Serialization.DeserializeBoolElement(node, this.onlineOnly, "child::onlineOnly");

            //GameCapabilityCountryMap
            XmlNodeList countryMaps = node.SelectNodes("child::GameCapabilityCountryMap");
            foreach (XmlNode countryMap in countryMaps)
            {
                GameCapabilityCountryMap map = new GameCapabilityCountryMap();
                map.Deserialize(countryMap);
                this.gameCapabilityCountryMaps.Add(map);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public virtual void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;

            if (cascade)
            {
                foreach (GameCapabilityCountryMap countryMapped in gameCapabilityCountryMaps)
                {
                    countryMapped.SetModified(type, cascade);
                }
            }
        }
        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ExternalFeedMappingObject.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Utils = Microsoft.Ems.Common.Utils;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the Media base class data that are common for a media in the catalog, which
    /// can be of type: video, game, music, image, or podcast.
    /// </summary>
    public class ExternalFeedMappingObject :  Utils.IIdentifiable<Int32>
    {
        
        #region Fields
        private int externalFeedMappingObjectId = -1;
        private string name=string.Empty;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.Cache<ExternalFeedMappingObject, Int32> ExternalFeedMappingObjectCache = new Utils.Cache<ExternalFeedMappingObject, Int32>(
                        new Utils.Cache<Catalog.ExternalFeedMappingObject, Int32>.CacheDataRetrievalDelegate(GetData),
                        CacheRefreshPeriod);
        

        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <remarks>
        /// Initializes the ExternalFeedSource object
        /// </remarks>
        /// <param name="reader">SqlDataReader</param>
        protected ExternalFeedMappingObject(SqlDataReader reader)
        {
            //Initialize ExternalFeedSource
            this.externalFeedMappingObjectId = reader.GetInt32(reader.GetOrdinal("externalFeedMappingObjectId"));
            this.name = reader.GetString(reader.GetOrdinal("name"));
        }
        /// <summary>
        /// Parameterless constructor requied for SOAP.
        /// </summary>
        public ExternalFeedMappingObject()
        {
        }
        #endregion

        # region Properties
        /// <summary>
        /// Gets/Sets the externalFeedSourceId
        /// </summary>
        public int Id
        {
            get
            {
                return externalFeedMappingObjectId;
            }
            set
            {

                externalFeedMappingObjectId = value;
            }
        }
        /// <summary>
        /// Gets/Sets the Name
        /// </summary>
        public string Name
        {
            get
            {
                return name;
            }
            set
            {

                name = value;
            }
        }
        /// <summary>
        /// Id to be used by cache
        /// </summary>
        public int PrimaryId
        {
            get { return externalFeedMappingObjectId; }
        }
       # endregion

        #region Public Methods
        /// <summary>
        /// Get the Feed Source for a given id.
        /// </summary>
        /// <param name="id">The id of the Feed Source to retrieve</param>
        /// <returns>The Feed Source of the given id.</returns>
        public static ExternalFeedMappingObject Get(int id)
        {
            return ExternalFeedMappingObjectCache.Get(id);
        }
        /// <summary>
        /// Gets the list of Feed Source in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<ExternalFeedMappingObject> Get()
        {
            return ExternalFeedMappingObjectCache.Get();
        }
        /// <summary>
        /// Gets the list of Feed Source from the database.
        /// </summary>
        /// <returns></returns>
        private static List<ExternalFeedMappingObject> GetData()
        {
            List<ExternalFeedMappingObject> feedObjects = new List<ExternalFeedMappingObject>();

            using (SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "ExternalFeedMappingObjectGet"
                    ))
            {
                while (reader.Read())
                {
                    feedObjects.Add(new ExternalFeedMappingObject(reader));
                }
            }
            return feedObjects;
        }
       #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameContentAvatarItem.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the GameContentAvatarItem data, and creation of the GameContentAvatarItem class.
    /// </summary>
    public class GameContentAvatarItem : ICatalogData
    {
        #region Fields
        private Guid gameContentMediaId;
        private int avatarBodyTypeId;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal GameContentAvatarItem(SqlDataReader reader)
        {
            this.avatarBodyTypeId = reader.GetInt32(reader.GetOrdinal("avatarBodyTypeId"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public GameContentAvatarItem()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the GameContentAvatarItem class.
        /// </summary>
        /// <param name="avatarBodyTypeId">The id of the category</param>
        public GameContentAvatarItem(int avatarBodyTypeId)
        {
            if (AvatarBodyType.Get(avatarBodyTypeId) == null)
                throw new ArgumentException(string.Format("Invalid avatarBodyTypeId value {0}.", avatarBodyTypeId));
            this.avatarBodyTypeId = avatarBodyTypeId;
            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this object.
        /// </summary>
        internal Guid GameContentMediaId
        {
            set { this.gameContentMediaId = value; }
        }

        /// <summary>
        /// Gets or sets the id of the category this media is associated.
        /// </summary>
        public int AvatarBodyTypeId
        {
            get
            {
                return this.avatarBodyTypeId;
            }
            set
            {

                if (AvatarBodyType.Get(avatarBodyTypeId) == null)
                    throw new ArgumentException(string.Format("Invalid avatarBodyTypeId value {0}.", avatarBodyTypeId));
                this.avatarBodyTypeId = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("GameContentAvatarItem");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("gameContentAvatarItemMediaId", this.gameContentMediaId);
                context.SerializeElement("avatarBodyTypeId", this.avatarBodyTypeId);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::gameContentAvatarItemMediaId");
                if (null != attr) this.gameContentMediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::avatarBodyTypeId");
                if (null != attr) this.avatarBodyTypeId = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ExternalFeedSource.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Utils = Microsoft.Ems.Common.Utils;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the Media base class data that are common for a media in the catalog, which
    /// can be of type: video, game, music, image, or podcast.
    /// </summary>
    public class  ExternalFeedSource : Utils.IIdentifiable<Int32>
    {
        
        #region Fields
        private int externalFeedSourceId = -1;
        private string name=string.Empty;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.Cache<ExternalFeedSource,Int32> ExternalFeedSourceCache = new Utils.Cache<ExternalFeedSource,Int32>(
                        new Utils.Cache<Catalog.ExternalFeedSource,Int32>.CacheDataRetrievalDelegate(GetData),
                        CacheRefreshPeriod);
        

        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <remarks>
        /// Initializes the ExternalFeedSource object
        /// </remarks>
        /// <param name="reader">SqlDataReader</param>
        protected ExternalFeedSource(SqlDataReader reader)
        {
            //Initialize ExternalFeedSource
            this.externalFeedSourceId = reader.GetInt32(reader.GetOrdinal("externalFeedSourceId"));
            this.name = reader.GetString(reader.GetOrdinal("name"));
        }
        /// <summary>
        /// Parameterless constructor requied for SOAP.
        /// </summary>
        public ExternalFeedSource()
        {
        }
        #endregion

        # region Properties
        /// <summary>
        /// Gets/Sets the externalFeedSourceId
        /// </summary>
        public int Id
        {
            get
            {
                return externalFeedSourceId;
            }
            set
            {

                externalFeedSourceId = value;
            }
        }
        /// <summary>
        /// Id to be used by cache
        /// </summary>
        public int PrimaryId
        {
            get { return externalFeedSourceId; }
        }
        /// <summary>
        /// Gets/Sets the Name
        /// </summary>
        public string Name
        {
            get
            {
                return name;
            }
            set
            {

                name = value;
            }
        }
       # endregion
        #region Public Methods
        /// <summary>
        /// Get the Feed Source for a given id.
        /// </summary>
        /// <param name="id">The id of the Feed Source to retrieve</param>
        /// <returns>The Feed Source of the given id.</returns>
        public static ExternalFeedSource Get(int id)
        {
            return ExternalFeedSourceCache.Get(id);
        }
        /// <summary>
        /// Gets the list of Feed Source in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<ExternalFeedSource> Get()
        {
            return ExternalFeedSourceCache.Get();
        }
        /// <summary>
        /// Gets the list of Feed Source from the database.
        /// </summary>
        /// <returns></returns>
        private static List<ExternalFeedSource> GetData()
        {
            List<ExternalFeedSource> feedSources = new List<ExternalFeedSource>();

            using (SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "ExternalFeedSourceGet"
                    ))
            {
                while (reader.Read())
                {
                    feedSources.Add(new ExternalFeedSource(reader));
                }
            }
            return feedSources;
        }
       
        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameFeed.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// This class allows the insertion of game data to the catalog
    /// </summary>
    public class GameFeed
    {
       #region Methods

        /// <summary>
        /// Process the xml to insert data for games into the catalog.
        /// </summary>
        /// <param name="xml"></param>
        public static void Process(string xml)
        {
            if (string.IsNullOrEmpty(xml))
            {
                throw new ArgumentNullException("xml can not be null");
            }

            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "GameFeedProcessXml",
                        xml);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GameFeedProcessXml");
                throw;
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameContentInstanceFile.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines GameContentInstanceFile data, and creation of the GameContentInstanceFile class.
    /// </summary>
    public class GameContentInstanceFile : ICatalogData
    {
        #region Constants
        private const int fileUrlLength = 1024;
        #endregion

        #region Fields
        private Guid id;
        private Guid gameContentInstanceId;
        private string fileUrl;
        private int sortOrder;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal GameContentInstanceFile(SqlDataReader reader)
        {
            this.id = reader.GetGuid(reader.GetOrdinal("gameContentInstanceFileId"));
            this.fileUrl = SqlHelper.GetNullableString(reader, "fileUrl");
            this.sortOrder = reader.GetInt32(reader.GetOrdinal("sortOrder"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public GameContentInstanceFile()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the GameContentInstanceFile class.
        /// </summary>
        /// <param name="fileUrl"></param>
        /// <param name="sortOrder"></param>
        public GameContentInstanceFile(string fileUrl, int sortOrder)
        {
            Validate.IsNotLongerThan(fileUrl, fileUrlLength, "fileUrl", "fileUrl");

            this.id = Guid.NewGuid();
            this.fileUrl = fileUrl;
            this.sortOrder = sortOrder;

            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Sets the gameContentInstanceId that associate with this audioTrackLanguage
        /// </summary>
        internal Guid GameContentInstanceId
        {
            set
            {
                this.gameContentInstanceId = value;
            }
        }

        /// <summary>
        /// The internal id for this game content file
        /// </summary>
        public Guid Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// The url to the game content file
        /// </summary>
        public string FileUrl
        {
            get
            {
                return this.fileUrl;
            }
            set
            {
                Validate.IsNotLongerThan(value, fileUrlLength, "FileUrl", "FileUrl");
                this.fileUrl = value;
            }
        }

        /// <summary>
        /// The position of this file in the list of all files for the media instance.
        /// The indexes should be zero based
        /// </summary>
        public int SortOrder
        {
            get
            {
                return this.sortOrder;
            }
            set
            {
                this.sortOrder = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("GameContentInstanceFile");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("gameContentInstanceFileId", this.id);
                context.SerializeElement("gameContentInstanceId", this.gameContentInstanceId);
                context.SerializeElement("fileUrl", this.fileUrl);
                context.SerializeElement("sortOrder", this.sortOrder);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.Modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::gameContentInstanceFileId");
                if (null != attr) this.id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::gameContentInstanceId");
                if (null != attr) this.gameContentInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::fileUrl");
                if (null != attr) this.fileUrl = attr.InnerText;

                attr = node.SelectSingleNode("child::sortOrder");
                if (null != attr) this.sortOrder = Serialization.DeserializeIntElement(attr.InnerText);

            }
        }


        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameContentInstanceEncryptedKey.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines GameContentInstanceEncryptedKey data, and creation of the GameContentInstanceEncryptedKey class.
    /// </summary>
    public class GameContentInstanceEncryptedKey : ICatalogData
    {
        #region Constants
        #endregion

        #region Fields
        private Guid gameContentInstanceId;
        private byte[] encryptedSymKey;
        private byte[] encryptedPublicKey;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal GameContentInstanceEncryptedKey(SqlDataReader reader)
        {
            this.gameContentInstanceId = reader.GetGuid(reader.GetOrdinal("gameContentInstanceId"));
            this.encryptedSymKey = SqlHelper.GetBytes(reader, "encryptedSymKey");
            this.encryptedPublicKey = SqlHelper.GetBytes(reader, "encryptedPublicKey");            
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public GameContentInstanceEncryptedKey()
        {
            encryptedPublicKey = null;
            encryptedSymKey = null;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Sets the gameContentInstanceId that associate with this audioTrackLanguage
        /// </summary>
        internal Guid GameContentInstanceId
        {
            get
            {
                return this.gameContentInstanceId;
            }
            set
            {
                this.gameContentInstanceId = value;
            }
        }

        /// <summary>
        /// Gets or sets the encrypted private key for this instance of gameContent.
        /// </summary>
        public byte[] EncryptedSymKey
        {
            get
            {
                return this.encryptedSymKey;
            }
            set
            {
                this.encryptedSymKey = value;
            }
        }

        /// <summary>
        /// Gets or sets the public key for this instance of gameContent.
        /// </summary>
        public byte[] EncryptedPublicKey
        {
            get
            {
                return this.encryptedPublicKey;
            }
            set
            {
                this.encryptedPublicKey = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public void Serialize(Serialization context)
        {
                context.SerializeStartElement("GameContentInstanceEncryptedKey");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("gameContentInstanceId", this.gameContentInstanceId);
                context.SerializeElement("encryptedSymKey", encryptedSymKey);
                context.SerializeElement("encryptedPublicKey", encryptedPublicKey);
                context.SerializeEndElement();         
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.Modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::gameContentInstanceId");
                if (null != attr) this.gameContentInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::encryptedSymKey");
                if (null != attr) this.encryptedSymKey = Serialization.DeserializeByteArrayElement(attr.InnerText);

                attr = node.SelectSingleNode("child::encryptedPublicKey");
                if (null != attr) this.encryptedPublicKey = Serialization.DeserializeByteArrayElement(attr.InnerText);
                
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameContentInstance.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides retrieval and editing of GameContentInstance data in the catalog.
    /// </summary>
    public class GameContentInstance : MediaInstance
    {
        #region Constants

        #endregion

        #region Fields

        private long installSize;
        private long packageSize;
        private byte[] liveContentId;
        private int packageTypeId;
        private int supportedGameRegionMaskId;
        private GameContentInstanceEncryptedKey gameContentInstanceEncryptedKey = new GameContentInstanceEncryptedKey();
        private List<GameContentInstanceFile> gameContentInstanceFiles = new List<GameContentInstanceFile>();

        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal GameContentInstance(SqlDataReader reader)
            : base(reader)
        {
            this.installSize = reader.GetInt64(reader.GetOrdinal("installSize"));
            this.packageSize = reader.GetInt64(reader.GetOrdinal("packageSize"));
            this.liveContentId = SqlHelper.GetBytes(reader, "liveContentId");
            this.packageTypeId = reader.GetInt32(reader.GetOrdinal("packageTypeId"));
            this.supportedGameRegionMaskId = reader.GetInt32(reader.GetOrdinal("supportedGameRegionMaskId"));

            //Initialize GameContentInstanceEncryptedKey
            this.gameContentInstanceEncryptedKey.GameContentInstanceId = this.Id;
            this.gameContentInstanceEncryptedKey.EncryptedSymKey = SqlHelper.GetBytes(reader, "encryptedSymKey");
            this.gameContentInstanceEncryptedKey.EncryptedPublicKey = SqlHelper.GetBytes(reader, "encryptedPublicKey");

            //Initialize gameContentInstanceFiles
            reader.NextResult();
            while (reader.Read())
            {
                this.gameContentInstanceFiles.Add(new GameContentInstanceFile(reader));
            }
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public GameContentInstance()
        {
        }
        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the install size for this instance of gameContent.
        /// </summary>
        public long InstallSize
        {
            get
            {
                return this.installSize;
            }
            set
            {
                this.installSize = value;
            }
        }

        /// <summary>
        /// Gets or sets the package size for this instance of gameContent.
        /// </summary>
        public long PackageSize
        {
            get
            {
                return this.packageSize;
            }
            set
            {
                this.packageSize = value;
            }
        }

        /// <summary>
        /// Gets or sets the LiveContentId for this instance of gameContent.
        /// </summary>
        public byte[] LiveContentId
        {
            get
            {
                return this.liveContentId;
            }
            set
            {
                this.liveContentId = value;
            }
        }

        /// <summary>
        /// Gets or sets the supported Game Region for this instance of gameContent.
        /// </summary>
        public int SupportedGameRegionMaskId
        {
            get
            {
                return this.supportedGameRegionMaskId;
            }
            set
            {
                if (GameRegionMask.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid SupportedGameRegionMaskId {0}.", value));
                this.supportedGameRegionMaskId = value;
            }
        }

        /// <summary>
        /// Gets or sets the package type for this instance of gameContent.
        /// </summary>
        public int PackageTypeId
        {
            get
            {
                return this.packageTypeId;
            }
            set
            {
                if (PackageType.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid PackageType {0}.", value));
                this.packageTypeId = value;
            }
        }


        /// <summary>
        /// Gets or sets the package type for this instance of gameContent.
        /// </summary>
        public GameContentInstanceEncryptedKey EncryptedKey
        {
            get
            {
                return this.gameContentInstanceEncryptedKey;
            }
            set
            {
                this.gameContentInstanceEncryptedKey = value;
            }
        }

        /// <summary>
        /// Gets or sets the array of GameContentInstanceFiles associates with this game content instance.
        /// </summary>
        public GameContentInstanceFile[] GameContentInstanceFiles
        {
            get
            {
                return this.gameContentInstanceFiles.ToArray();
            }
            set
            {
                this.gameContentInstanceFiles.Clear();
                if (value != null)
                    this.gameContentInstanceFiles.AddRange(value);
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Serialize the GameContentInstance object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public override void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("GameContentInstance");
                context.SerializeDatabaseOperation(this.Modified);

                base.Serialize(context);

                context.SerializeElement("gameContentInstanceId", this.Id);
                context.SerializeElement("installSize", installSize);
                context.SerializeElement("packageSize", packageSize);
                context.SerializeElement("liveContentId", liveContentId);
                context.SerializeElement("packageTypeId", packageTypeId);
                context.SerializeElement("supportedGameRegionMaskId", supportedGameRegionMaskId);


                gameContentInstanceEncryptedKey.GameContentInstanceId = this.Id;
                gameContentInstanceEncryptedKey.Serialize(context);

                //gameContentInstanceFiles
                foreach (GameContentInstanceFile file in this.gameContentInstanceFiles)
                {
                    file.GameContentInstanceId = this.Id;
                    file.Serialize(context);
                }

                context.SerializeEndElement();
            }
            else
            {
                if (this.Modified != InsertDataChangeType.None)
                {
                    base.Serialize(context);

                    context.SerializeStartElement("GameContentInstance");
                    context.SerializeDatabaseOperation(this.Modified);
                    context.SerializeElement("gameContentInstanceId", this.Id);
                    context.SerializeElement("installSize", installSize);
                    context.SerializeElement("packageSize", packageSize);
                    context.SerializeElement("liveContentId", liveContentId);
                    context.SerializeElement("packageTypeId", packageTypeId);
                    context.SerializeElement("supportedGameRegionMaskId", supportedGameRegionMaskId);
                    context.SerializeEndElement();

                    gameContentInstanceEncryptedKey.GameContentInstanceId = this.Id;
                    gameContentInstanceEncryptedKey.Serialize(context);

                    //gameContentInstanceFiles
                    foreach (GameContentInstanceFile file in this.gameContentInstanceFiles)
                    {
                        file.GameContentInstanceId = this.Id;
                        file.Serialize(context);
                    }
                }
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public override void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.Modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                //Deserialize child MediaInstance
                attr = node.SelectSingleNode("child::MediaInstance");
                if (null != attr) base.Deserialize(attr);

                attr = node.SelectSingleNode("child::gameContentInstanceId");
                if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::installSize");
                if (null != attr) this.installSize = Serialization.DeserializeInt64Element(attr.InnerText);

                attr = node.SelectSingleNode("child::packageSize");
                if (null != attr) this.packageSize = Serialization.DeserializeInt64Element(attr.InnerText);

                attr = node.SelectSingleNode("child::liveContentId");
                if (null != attr) this.liveContentId = Serialization.DeserializeByteArrayElement(attr.InnerText);

                attr = node.SelectSingleNode("child::packageTypeId");
                if (null != attr) this.packageTypeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::supportedGameRegionMaskId");
                if (null != attr) this.supportedGameRegionMaskId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::GameContentInstanceEncryptedKey");
                if (null != attr) this.gameContentInstanceEncryptedKey.Deserialize(attr);

                XmlNodeList gameContentInstanceFileNodes = node.SelectNodes("child::GameContentInstanceFile");
                foreach (XmlNode gameContentInstanceFileNode in gameContentInstanceFileNodes)
                {
                    GameContentInstanceFile GCInstanceFile = new GameContentInstanceFile();
                    GCInstanceFile.Deserialize(gameContentInstanceFileNode);
                    this.gameContentInstanceFiles.Add(GCInstanceFile);
                }
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public override void SetModified(InsertDataChangeType type, bool cascade)
        {
            base.SetModified(type, cascade);

            if (cascade)
            {
                //gameContentInstanceEncryptedKey
                gameContentInstanceEncryptedKey.SetModified((DataChangeType)type, cascade);

                //gameContentInstanceFiles
                foreach (GameContentInstanceFile file in this.gameContentInstanceFiles)
                    file.SetModified((DataChangeType)type, cascade);
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameLocale.cs ===
u s i n g   S y s t e m ; 
 
 u s i n g   S y s t e m . C o l l e c t i o n s . G e n e r i c ; 
 
 u s i n g   S y s t e m . D a t a . S q l C l i e n t ; 
 
 u s i n g   S y s t e m . I O ; 
 
 u s i n g   S y s t e m . X m l ; 
 
 u s i n g   M i c r o s o f t . E m s . C o m m o n . U t i l s ; 
 
 
 
 n a m e s p a c e   M i c r o s o f t . E m s . C o m m o n . C a t a l o g 
 
 { 
 
         / / /   < s u m m a r y > 
 
         / / /   P r o v i d e s   r e t r i e v a l   a n d   e d i t i n g   o f   G a m e L o c a l e   d a t a   i n   t h e   c a t a l o g . 
 
         / / /   < / s u m m a r y > 
 
         p u b l i c   c l a s s   G a m e L o c a l e   :   I C a t a l o g D a t a 
 
         { 
 
                 # r e g i o n   C o n s t a n t s 
 
 
 
                 # e n d r e g i o n 
 
 
 
                 # r e g i o n   F i e l d s 
 
                 p r i v a t e   G u i d   g a m e M e d i a I d ; 
 
                 p r i v a t e   i n t   l c i d ; 
 
                 p r i v a t e   s t r i n g   c u s t o m G e n r e ; 
 
                 p r i v a t e   s t r i n g   d e v e l o p e r ; 
 
                 p r i v a t e   s t r i n g   p u b l i s h e r ; 
 
                 p r i v a t e   D a t a C h a n g e T y p e   m o d i f i e d   =   D a t a C h a n g e T y p e . N o n e ; 
 
 
 
                 # e n d r e g i o n 
 
 
 
                 # r e g i o n   C o n s t r u c t o r s 
 
                 / / /   < s u m m a r y > 
 
                 / / /   C o n s t r u c t o r   t h a t   t a k e s   a   S q l D a t a R e a d e r . 
 
                 / / /   < / s u m m a r y > 
 
                 / / /   < p a r a m   n a m e = " r e a d e r " > S q l D a t a R e a d e r < / p a r a m > 
 
                 i n t e r n a l   G a m e L o c a l e ( S q l D a t a R e a d e r   r e a d e r )   
 
                 { 
 
                         t h i s . g a m e M e d i a I d   =   r e a d e r . G e t G u i d ( r e a d e r . G e t O r d i n a l ( " g a m e M e d i a I d " ) ) ; 
 
                         t h i s . l c i d   =   r e a d e r . G e t I n t 3 2 ( r e a d e r . G e t O r d i n a l ( " l c i d " ) ) ; 
 
                         t h i s . c u s t o m G e n r e   =   S q l H e l p e r . G e t N u l l a b l e S t r i n g (   r e a d e r ,   " c u s t o m G e n r e " ) ; 
 
                         t h i s . d e v e l o p e r   =   S q l H e l p e r . G e t N u l l a b l e S t r i n g (   r e a d e r ,   " d e v e l o p e r " ) ; 
 
                         t h i s . p u b l i s h e r   =   S q l H e l p e r . G e t N u l l a b l e S t r i n g ( r e a d e r ,   " p u b l i s h e r " ) ; 
 
                 } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   P a r a m e t e r l e s s   c o n s t r u c t o r   r e q u i r e d   f o r   S O A P . 
 
                 / / /   < / s u m m a r y > 
 
                 p u b l i c   G a m e L o c a l e ( ) 
 
                 { 
 
                 } 
 
                 # e n d r e g i o n 
 
 
 
                 # r e g i o n   P r o p e r t i e s 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   A l l o w   c o n t a i n e r   c l a s s   t o   s e t   t h e   g a m e M e d i a I d 
 
                 / / /   < / s u m m a r y > 
 
                 p u b l i c   G u i d   G a m e M e d i a I d 
 
                 { 
 
                         s e t 
 
                         { 
 
                               t h i s . g a m e M e d i a I d   =   v a l u e ; 
 
                         } 
 
                 } 
 
                 / / /   < s u m m a r y > 
 
                 / / /   G e t s   o r   s e t s   t h e   l c i d   i d e n t i f y i n g   t h e   l o c a l e   o f   t h e   t i t l e   a n d   d e s c r i p t i o n   f o r   t h e   m e d i a . 
 
                 / / /   < / s u m m a r y > 
 
                 p u b l i c   i n t   L c i d 
 
                 { 
 
                         g e t 
 
                         { 
 
                                 r e t u r n   t h i s . l c i d ; 
 
                         } 
 
                         s e t 
 
                         { 
 
                                 i f   ( L o c a l e . G e t ( v a l u e )   = =   n u l l ) 
 
                                         t h r o w   n e w   A r g u m e n t E x c e p t i o n ( S t r i n g . F o r m a t ( " I n v a l i d   L c i d   { 0 } . " ,   v a l u e ) ) ; 
 
                                 t h i s . l c i d   =   v a l u e ; 
 
                         } 
 
                 } 
 
 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   G e t s   o r   s e t s   t h e   c u s t o m   g e n r e   ( f r e e   f o r m a t )   f o r   a   g a m e 
 
                 / / /   < / s u m m a r y > 
 
                 p u b l i c   s t r i n g   C u s t o m G e n r e 
 
                 { 
 
                         g e t 
 
                         { 
 
                                 r e t u r n   t h i s . c u s t o m G e n r e ; 
 
                         } 
 
                         s e t 
 
                         { 
 
                                 t h i s . c u s t o m G e n r e   =   v a l u e ; 
 
                         } 
 
                 } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   G e t s   o r   s e t s   t h e   d e v e l o p e r   f o r   a   g a m e 
 
                 / / /   < / s u m m a r y > 
 
                 p u b l i c   s t r i n g   D e v e l o p e r 
 
                 { 
 
                         g e t 
 
                         { 
 
                                 r e t u r n   t h i s . d e v e l o p e r ; 
 
                         } 
 
                         s e t 
 
                         { 
 
                                 t h i s . d e v e l o p e r   =   v a l u e ; 
 
                         } 
 
                 } 
 
                 / / /   < s u m m a r y > 
 
                 / / /   G e t s   o r   S e t s   t h e   p u b l i s h e r   f o r   a   g a m e 
 
                 / / /   < / s u m m a r y > 
 
                 p u b l i c   s t r i n g   P u b l i s h e r 
 
                 { 
 
                         g e t   
 
                         { 
 
                                 r e t u r n   t h i s . p u b l i s h e r ;           
 
                         } 
 
                         s e t 
 
                         { 
 
                                 t h i s . p u b l i s h e r   =   v a l u e ; 
 
                         } 
 
                 } 
 
                 / / /   < s u m m a r y > 
 
                 / / /   G e t s   o r   s e t s   t h e   m o d i f i e d   s t a t e   o f   t h e   o b j e c t   i n   r e l a t i o n   t o   r e c o r d   i n   t h e   b a c k i n g   d a t a b a s e   s t o r e . 
 
                 / / /   < / s u m m a r y > 
 
                 p u b l i c   D a t a C h a n g e T y p e   M o d i f i e d 
 
                 { 
 
                         g e t 
 
                         { 
 
                                 r e t u r n   t h i s . m o d i f i e d ; 
 
                         } 
 
                         s e t 
 
                         { 
 
                                 t h i s . m o d i f i e d   =   v a l u e ; 
 
                         } 
 
                 }         
 
                 # e n d r e g i o n 
 
 
 
                 # r e g i o n   M e t h o d s 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   S e r i a l i z e   t h e   G a m e L o c a l e   o b j e c t   i n t o   x m l   ( f o r   p r e p a r a t i o n   t o   s a v e   t o   t h e   d a t a b a s e ) . 
 
                 / / /   < / s u m m a r y > 
 
                 / / /   < p a r a m   n a m e = " c o n t e x t " > S e r i a l i z a t i o n   o b j e c t   i n s t a n c e < / p a r a m > 
 
                 p u b l i c   v i r t u a l   v o i d   S e r i a l i z e ( S e r i a l i z a t i o n   c o n t e x t ) 
 
                 { 
 
                         i f   ( t h i s . m o d i f i e d   ! =   D a t a C h a n g e T y p e . N o n e   | |   c o n t e x t . F u l l S e r i a l i z a t i o n )   
 
                         { 
 
                                 c o n t e x t . S e r i a l i z e S t a r t E l e m e n t ( " G a m e L o c a l e " ) ; 
 
                                 c o n t e x t . S e r i a l i z e D a t a b a s e O p e r a t i o n ( t h i s . m o d i f i e d ) ; 
 
                                 c o n t e x t . S e r i a l i z e E l e m e n t ( " g a m e M e d i a I d " ,   t h i s . g a m e M e d i a I d ) ; 
 
                                 c o n t e x t . S e r i a l i z e E l e m e n t ( " l c i d " ,   t h i s . l c i d ) ; 
 
                                 c o n t e x t . S e r i a l i z e E l e m e n t ( " c u s t o m G e n r e " ,   t h i s . C u s t o m G e n r e ) ; 
 
                                 c o n t e x t . S e r i a l i z e E l e m e n t ( " d e v e l o p e r " ,   t h i s . D e v e l o p e r ) ; 
 
                                 c o n t e x t . S e r i a l i z e E l e m e n t ( " p u b l i s h e r " ,   t h i s . P u b l i s h e r ) ; 
 
                                 c o n t e x t . S e r i a l i z e E n d E l e m e n t ( ) ; 
 
                         } 
 
                 } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   L o a d   p r o p e r t i e s   a n d   c o n t a i n e d   o b j e c t s   t o   t h e   o b e j c t   f r o m   a   X M L N o d e   a n d   i t s   s u b - n o d e s . 
 
                 / / /   < / s u m m a r y > 
 
                 / / /   < p a r a m   n a m e = " n o d e " > X M L   n o d e   w i t h   e l e m e n t s   r e p r e s t i n g   a l l   p r o p e r t i e s   a n d   c o n t a i n e d   o b j e c t s   i f   a n y < / p a r a m > 
 
                 p u b l i c   v i r t u a l   v o i d   D e s e r i a l i z e ( X m l N o d e   n o d e ) 
 
                 { 
 
                         i f   ( n o d e   = =   n u l l ) 
 
                         { 
 
                                 r e t u r n ; 
 
                         } 
 
                         e l s e 
 
                         { 
 
                                 t h i s . m o d i f i e d   =   S e r i a l i z a t i o n . D e s e r i a l i z e D a t a C h a n g e E l e m e n t ( n o d e ,   t h i s . m o d i f i e d ,   " o p " ) ; 
 
                                 t h i s . g a m e M e d i a I d   =   S e r i a l i z a t i o n . D e s e r i a l i z e G u i d E l e m e n t ( n o d e ,   t h i s . g a m e M e d i a I d ,   " c h i l d : : g a m e M e d i a I d " ) ; 
 
                                 t h i s . l c i d   =   S e r i a l i z a t i o n . D e s e r i a l i z e I n t E l e m e n t ( n o d e ,   t h i s . l c i d ,   " c h i l d : : l c i d " ) ; 
 
                                 t h i s . C u s t o m G e n r e   =   S e r i a l i z a t i o n . D e s e r i a l i z e S t r i n g E l e m e n t ( n o d e ,   t h i s . c u s t o m G e n r e ,   " c h i l d : : c u s t o m G e n r e " ) ; 
 
                                 t h i s . D e v e l o p e r   =   S e r i a l i z a t i o n . D e s e r i a l i z e S t r i n g E l e m e n t ( n o d e ,   t h i s . d e v e l o p e r ,   " c h i l d : : d e v e l o p e r " ) ; 
 
                                 t h i s . P u b l i s h e r   =   S e r i a l i z a t i o n . D e s e r i a l i z e S t r i n g E l e m e n t ( n o d e ,   t h i s . p u b l i s h e r ,   " c h i l d : : p u b l i s h e r " ) ; 
 
                         } 
 
                 } 
 
 
 
                 / / /   < s u m m a r y > 
 
                 / / /   S e t s   t h i s   o b j e c t ' s   m o d i f i e d   f l a g . 
 
                 / / /   < / s u m m a r y > 
 
                 / / /   < p a r a m   n a m e = " t y p e " > D a t a   c h a n g e   t y p e < / p a r a m > 
 
                 / / /   < p a r a m   n a m e = " c a s c a d e " > I n d i c a t e   w h e t h e r   t o   c a s c a d e   d o w n   t o   c o n t a i n e d   o b j e c t s . < / p a r a m > 
 
                 p u b l i c   v i r t u a l   v o i d   S e t M o d i f i e d ( D a t a C h a n g e T y p e   t y p e ,   b o o l   c a s c a d e ) 
 
                 { 
 
                         t h i s . m o d i f i e d   =   t y p e ; 
 
                 } 
 
                 # e n d r e g i o n 
 
 
 
         } 
 
 } 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameManager.cs ===
using System;
using System.IO;
using System.Web;
using System.Net;
using System.Text;
using System.Xml;
using System.Globalization;
using System.Diagnostics;
using System.Web.Services.Protocols;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Xml.Serialization;
using System.Threading;
using System.ServiceProcess;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Collections;

using Microsoft.Ems.GameSchema;

using Microsoft.Ems.CatalogAccess;

namespace Microsoft.Ems.Games
{
    /// <summary>
    ///
    /// </summary>
    public class GameManager
    {
        // this is a static utility class
        static GameManager()
        {
        }

        internal static rawcatalogdb m_raw = null;
        internal static rawcatalogdb raw
        {
            get
            {
                if (m_raw == null)
                    m_raw = new rawcatalogdb(Microsoft.Ems.Common.Catalog.CatalogDatabase.RawCatalogDBConnectionString);

                return m_raw;
            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="co"></param>
        public static void PropGameContentOffer(GameContentOffer co)
        {
            if ( co == null ) throw new ArgumentNullException("co");

            Offer o = co.offer;

            System.Guid offerId = new Guid(o.offerId);
            System.Guid mediaId = new Guid(o.metadataMediaId);

            raw.OfferUpsert(offerId, mediaId, co.friendlyName);

            foreach (OfferInstance i in o.offerInstanceCollection)
            {
                System.Guid offerInstanceId = new Guid(i.offerInstanceId);
                string sku = i.sku;
                uint pricingRuleId = 0;
                uint pointsPrice = i.pointsPrice;
                System.DateTime startDateTime = DateTime.Parse(i.startDate);
                System.DateTime endDateTime = DateTime.Parse(i.endDate);
                string countryCode = i.countryCode;
                uint visibilityLevelId = i.visibilityLevel;
                uint requiredUserTypeId = i.requiredUserTypeId;

                raw.OfferInstanceUpsert(offerInstanceId, offerId, mediaId, sku, (int) pricingRuleId, (int) pointsPrice,
                    startDateTime, endDateTime, countryCode, (int) visibilityLevelId, (int) requiredUserTypeId);

                GameContentProviderTerms pt = co.gameContentProviderTerms;

                System.Guid providerTermId = new Guid(pt.providerTermId);
                decimal wholesalePrice = 0;
                int automaticallyGenerateOffer = 0;
                string modifiedBy = "GameManager";
                uint providerId = pt.publisherProviderId;

                // TODO: figure out what these should be
                uint licenserId = 2;
                string externalLicenserContentId = "";
                string externalProviderContentId = "";

                raw.ProviderTermUpsert(providerTermId, mediaId, wholesalePrice, startDateTime, endDateTime,
                    countryCode, (int) licenserId, externalLicenserContentId, (int) providerId,
                    externalProviderContentId, automaticallyGenerateOffer, modifiedBy);

                raw.OfferInstanceProviderTermUpsert(offerInstanceId, providerTermId);

                System.Guid mediaInstanceId = new Guid(pt.mediaInstanceId);
                // int licenserId;
                uint licenseTypeId = pt.licenseTypeId;
                uint deliveryTypeId = pt.deliveryTypeId;

                raw.ProviderTermMediaInstanceUpsert(providerTermId, mediaInstanceId, (int) licenserId,
                    (int) licenseTypeId, (int) deliveryTypeId);
            }

            foreach (uint storeId in o.storeCollection)
            {
                raw.OfferStoreUpsert(offerId, (int) storeId);
            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="info"></param>
        public static void PropMediaInfo(MediaInfo info)
        {
            if ( info == null ) throw new ArgumentNullException("info");

            Guid mediaId = new Guid(info.mediaId);
            uint mediaTypeId = info.mediaTypeId;
            uint providerId = ParseUint(info.providerId);
            System.DateTime originalReleaseDate = DateTime.Parse(info.originalReleaseDate);
            string displayOriginalReleaseDate = info.displayOriginalReleaseDate;
            System.DateTime visibilityDate = DateTime.Parse(info.visibilityDate);

            raw.MediaUpsert(mediaId, (int) mediaTypeId, (int) providerId, originalReleaseDate, displayOriginalReleaseDate, visibilityDate);

            foreach (MediaLocaleInfo mlInfo in info.mediaLocaleInfoCollection)
            {
                uint lcid = ParseUint(mlInfo.lcid);
                string title = mlInfo.title;
                string titleSort = mlInfo.titleSort;
                string reducedTitle = mlInfo.reducedTitle;
                string description = mlInfo.description;
                string reducedDescription = mlInfo.reducedDescription;

                raw.MediaLocaleUpsert(mediaId, (int) lcid, title, titleSort, reducedTitle, description, reducedDescription);
            }

            foreach (LocaleMapping lm in info.mediaLocaleMappingCollection)
            {
                uint lcid = ParseUint(lm.lcidFrom);
                uint lcidMap = ParseUint(lm.lcidTo);

                raw.MediaLocaleMapUpsert(mediaId, (int) lcid, (int) lcidMap);
            }

            foreach (uint categoryId in info.categoryCollection)
            {
                raw.MediaCategoryUpsert(mediaId, (int) categoryId);
            }

            foreach (uint ratingValueId in info.ratingValueCollection)
            {
                raw.MediaRatingUpsert(mediaId, (int) ratingValueId);
            }

            foreach (uint ratingDescriptorId in info.ratingDescriptorCollection)
            {
                raw.MediaRatingDescriptorUpsert(mediaId, (int) ratingDescriptorId);
            }

            foreach (GameSchema.MediaRelationship mr in info.mediaRelationshipCollection)
            {
                Guid relatedMediaId = new Guid(mr.relatedMediaId);
                uint mediaRelationshipTypeId = mr.mediaRelationshipTypeId;
                uint sortOrder = mr.sortOrder;

                Guid fromMediaId;
                Guid toMediaId;

                if (mr.isFromToDirection)
                {
                    fromMediaId = mediaId;
                    toMediaId = relatedMediaId;
                }
                else
                {
                    fromMediaId = relatedMediaId;
                    toMediaId = mediaId;
                }

                raw.MediaRelationshipUpsert(fromMediaId, toMediaId, (int) mediaRelationshipTypeId, (int) sortOrder);
            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="t"></param>
        public static void PropGame(Game t)
        {
            if ( t == null ) throw new ArgumentNullException("t");

            MediaInfo info = t.mediaInfo;
            Guid mediaId = new Guid(info.mediaId);

            PropMediaInfo(info);

            uint liveTitleId = ParseUint(t.liveTitleId);

            raw.GameUpsert(mediaId, (int) liveTitleId);

            foreach (GameLocaleInfo glInfo in t.gameLocaleInfoCollection)
            {
                uint lcid = ParseUint(glInfo.lcid);
                string customGenre = glInfo.customGenre;

                raw.GameLocaleUpsert(mediaId, (int) lcid, customGenre);
            }

            if (t.__gameDownloadInfo != null)
            {
                PropGameDownloadInfo(mediaId, mediaId, t.gameDownloadInfo);
            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="fmi"></param>
        /// <param name="mediaId"></param>
        public static void PropMediaInstance(MediaInstance fmi, Guid mediaId)
        {
            if ( fmi == null ) throw new ArgumentNullException("fmi");

            System.Guid mediaInstanceId = new Guid(fmi.mediaInstanceId);
            int isAcquirable = fmi.isAcquirable ? 1 : 0;
            int isAdSupported = fmi.isAdSupported ? 1 : 0;
            int isPreview = 0;

            raw.MediaInstanceUpsert(mediaInstanceId, mediaId, isAcquirable, isAdSupported, isPreview);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="mediaId"></param>
        /// <param name="gameMediaId"></param>
        /// <param name="gdi"></param>
        public static void PropGameDownloadInfo(Guid mediaId, Guid gameMediaId, GameDownloadInfo gdi)
        {
            uint providerCategoryId = gdi.providerCategoryId;

            raw.GameContentUpsert(mediaId, gameMediaId, (int) providerCategoryId);

            foreach (GameContentInstance i in gdi.gameContentInstanceCollection)
            {
                PropMediaInstance(i.mediaInstance, mediaId);

                System.Guid gameContentInstanceId = new Guid(i.mediaInstance.mediaInstanceId);
                uint installSize = i.installSize;
                uint packageSize = i.packageSize;
                byte [] encryptedSymKey = HexStringToByteArray(i.encryptedSymKey);
                byte [] encryptedPublicKey = HexStringToByteArray(i.encryptedPublicKey);
                string url = i.url;
                byte [] liveContentId = HexStringToByteArray(i.liveContentId);

                raw.GameContentInstanceUpsert(gameContentInstanceId, (int) installSize, (int) packageSize, encryptedSymKey,
                    encryptedPublicKey, url, liveContentId);
            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="c"></param>
        public static void PropGameContent(GameContent c)
        {
            if ( c == null ) throw new ArgumentNullException("c");

            MediaInfo info = c.mediaInfo;

            PropMediaInfo(info);

            Guid mediaId = new Guid(info.mediaId);
            System.Guid gameMediaId = new Guid(c.gameMediaId);

            PropGameDownloadInfo(mediaId, gameMediaId, c.gameDownloadInfo);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="c"></param>
        public static void PropGameConsumable(GameConsumable c)
        {
            if ( c == null ) throw new ArgumentNullException("c");

            // need GameConsumableUpsert
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="s"></param>
        /// <returns>byte[]</returns>
        public static byte [] HexStringToByteArray(string s)
        {
            if ( s == null ) throw new ArgumentNullException("s");

            s = s.Trim().ToUpper();

            if (s[0] == '0' && s[1] == 'X')
                s = s.Substring(2);

            int numBytes = s.Length / 2;
            byte [] bytes = new byte[numBytes];

            for (int j = 0; j < numBytes; j++)
            {
                bytes[j] = Byte.Parse(s.Substring(j * 2, 2), NumberStyles.HexNumber);
            }

            return bytes;
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="bytes"></param>
        /// <returns>string</returns>
        public static string ByteArrayToHexString(byte [] bytes)
        {
            StringBuilder sb = new StringBuilder(bytes.Length * 2 + 1);

            for (int i = 0; i < bytes.Length; i++)
            {
                sb.Append(bytes[i].ToString("x2"));
            }

            return sb.ToString();
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="s"></param>
        /// <returns>ulong</returns>
        public static ulong ParseUlong(string s)
        {
            if ( s == null ) throw new ArgumentNullException("s");

            s = s.Trim().ToUpper();

            ulong u;

            if (s[0] == '0' && s[1] == 'X')
                u = UInt64.Parse(s.Substring(2), NumberStyles.HexNumber);
            else
            {
                try
                {
                    u = (ulong) Int64.Parse(s);
                }
                catch (FormatException)
                {
                    u = UInt64.Parse(s, NumberStyles.HexNumber);
                }
            }

            return u;
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="s"></param>
        /// <returns>uint</returns>
        public static uint ParseUint(string s)
        {
            if ( s == null ) throw new ArgumentNullException("s");

            s = s.Trim().ToUpper();

            uint i;

            if (s[0] == '0' && s[1] == 'X')
                i = UInt32.Parse(s.Substring(2), NumberStyles.HexNumber);
            else
            {
                try
                {
                    i = (uint) Int32.Parse(s);
                }
                catch (FormatException)
                {
                    i = UInt32.Parse(s, NumberStyles.HexNumber);
                }
            }

            return i;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameOfferSearch.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define GameOffer search response class.
    /// </summary>
    public class GameOfferSearchResponse : Response
    {
        #region Fields
        private Guid offerId = Guid.Empty;
        private int mediaTypeId = -1;
        private int clientTypeId = -1;
        private string offerTitle = string.Empty;
        private string mediaTitle = string.Empty;
        #endregion
        #region Properties
        /// <summary>
        /// Title of the media store in MediaLocal table with lcid=1033(en-US)
        /// </summary>
        public string MediaTitle
        {
            get { return mediaTitle; }
            set { mediaTitle = value; }
        }

        /// <summary>
        /// Title of the offer from the offer
        /// </summary>
        public string OfferTitle
        {
            get { return offerTitle; }
            set { offerTitle = value; }
        }

        /// <summary>
        /// Media type of the media associated with the offer
        /// </summary>
        public int MediaTypeId
        {
            get { return mediaTypeId; }
            set { mediaTypeId = value; }
        }

        /// <summary>
        /// Client type of the media associated with the offer
        /// </summary>
        public int ClientTypeId
        {
            get { return clientTypeId; }
            set { clientTypeId = value; }
        }

        /// <summary>
        /// OfferId of the offer
        /// </summary>
        public Guid OfferId
        {
            get { return offerId; }
            set { offerId = value; }
        }


        #endregion


        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public GameOfferSearchResponse()
        {
        }
        /// <summary>
        /// Constructor used to read the data out of a db reader after calling the search SP. 
        /// </summary>
        /// <param name="reader">reader returned by the sql helper that calls GameOfferFind SP</param>
        public GameOfferSearchResponse(SqlDataReader reader)
        {
            this.offerId = SqlHelper.GetNullableGuid(reader, "offerId", Guid.Empty);                
            this.mediaTitle = SqlHelper.GetNullableString(reader, "mediaTitle");
            this.offerTitle = SqlHelper.GetNullableString(reader, "offerTitle");

            this.mediaTypeId = SqlHelper.GetNullableInt32(reader, "mediaTypeId");
            this.clientTypeId = SqlHelper.GetNullableInt32(reader, "clientTypeId");
        }
        #endregion
    }

    /// <summary>
    /// Define GameOffer search request class.
    /// </summary>
    public class GameOfferSearchRequest : Request
    {
        #region Fields
        private string title = string.Empty;
        #endregion

        #region Properties
        /// <summary>
        /// Title of the offer, we only search Medialocale of the media that has lcid=1033(en-US)
        /// </summary>
        public string Title
        {
            get { return title; }
            set { title = value; }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public GameOfferSearchRequest()
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Searches for GameOffer specified by the search request object.
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<GameOfferSearchResponse> responses = new List<GameOfferSearchResponse>();
            try
            {
                using (SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "GameOfferFind",
                        this.title,
                        this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new GameOfferSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GameOfferFind ");
                throw;
            }
            return responses.ToArray();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameTitleSearch.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define GameTitle search response class.
    /// </summary>
    public class GameTitleSearchResponse : Response
    {
        #region Fields
        private Guid gameMediaId = Guid.Empty;
        private int clientTypeId = -1;
        private string mediaTitle = string.Empty;
        #endregion

        #region Properties
        /// <summary>
        /// Title ID, stored in GUID format
        /// </summary>
        public Guid GameMediaId
        {
            get { return gameMediaId; }
            set { gameMediaId = value; }
        }

        /// <summary>
        /// Title of the media store in MediaLocal table with en-US
        /// </summary>
        public string MediaTitle
        {
            get { return mediaTitle; }
            set { mediaTitle = value; }
        }

        /// <summary>
        /// Client type of the media associated with the title
        /// </summary>
        public int ClientTypeId
        {
            get { return clientTypeId; }
            set { clientTypeId = value; }
        }

        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public GameTitleSearchResponse()
        {
        }
        /// <summary>
        /// Constructor used to read the data out of a db reader after calling the search SP. 
        /// </summary>
        /// <param name="reader">reader returned by the sql helper that calls GameTitleFind SP</param>
        public GameTitleSearchResponse(SqlDataReader reader)
        {
            this.mediaTitle = SqlHelper.GetNullableString(reader, "mediaTitle");

            this.gameMediaId = SqlHelper.GetNullableGuid(reader, "gameMediaId", Guid.Empty);
            this.clientTypeId = SqlHelper.GetNullableInt32(reader, "clientTypeId");
        }
        #endregion
    }

    /// <summary>
    /// Define GameTitle search request class.
    /// </summary>
    public class GameTitleSearchRequest : Request
    {
        #region Fields
        private string title = string.Empty;
        private int lcid = Constants.EnUsLocale; // Default to En-US
        #endregion

        #region Properties
        /// <summary>
        /// Title of what we are searching for
        /// </summary>
        public string Title
        {
            get { return title; }
            set { title = value; }
        }

        /// <summary>
        /// LCID of the media we are searching for, defaults to EN-US
        /// </summary>
        public int Lcid
        {
            get { return lcid; }
            set { lcid = value; }
        }

        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public GameTitleSearchRequest()
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Searches for GameTitle specified by the search request object.
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<GameTitleSearchResponse> responses = new List<GameTitleSearchResponse>();
            try
            {
                using (SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "GameTitleFind",
                        this.title,
                        this.lcid,
                        this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new GameTitleSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GameTitleFind ");
                throw;
            }
            return responses.ToArray();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameRegionMask.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of GameRegionMask data in the catalog, 
    /// </summary>
    public class GameRegionMask : Utils.IIdentifiable<Int32>
    {
        #region Fields
        private int id;
        private string name;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.Cache<GameRegionMask, Int32> GameRegionMaskCache = new Utils.Cache<GameRegionMask, Int32>(
                        new Utils.Cache<GameRegionMask, Int32>.CacheDataRetrievalDelegate(GetData),
                        CacheRefreshPeriod);

        #endregion

        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public GameRegionMask()
        {
        }

        /// <summary>
        /// Instantiates a payment type from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public GameRegionMask(SqlDataReader reader)
        {
            this.id = reader.GetInt32(reader.GetOrdinal("gameRegionMaskId"));
            this.name = reader.GetString(reader.GetOrdinal("internalName"));

        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets/sets the int that uniquely identifies this GameRegionMask
        /// </summary>
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                Validate.IsGreaterThanOrEqual(value, 0, "id", "id");
                id = value;
            }
        }
        /// <summary>
        /// Gets or sets the name assigned to this GameRegionMask
        /// </summary>
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                Validate.IsNotNull(value, "name", "name");
                Validate.IsNotLongerThan(value, 255, "name", "name");
                name = value;
            }
        }

        /// <summary>
        /// Id to be used by cache
        /// </summary>
        public int PrimaryId
        {
            get { return Id; }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a GameRegionMask for the given id.
        /// </summary>
        /// <param name="id">The id of the GameRegionMask to get</param>
        /// <returns>The GameRegionMask for the given id.</returns>
        public static GameRegionMask Get(int id)
        {
            return GameRegionMaskCache.Get(id);
        }

        /// <summary>
        /// Gets all GameRegionMask in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<GameRegionMask> Get()
        {
            return GameRegionMaskCache.Get();
        }

        /// <summary>
        /// Gets all GameRegionMask from the database.
        /// </summary>
        /// <returns></returns>
        public static List<GameRegionMask> GetData()
        {
            List<GameRegionMask> gameRegionMasks = new List<GameRegionMask>();

            using (SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "GameRegionMaskGet"
                    ))
            {
                while (reader.Read())
                {
                    gameRegionMasks.Add(new GameRegionMask(reader));
                }
            }
            return gameRegionMasks;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GamePublisherSearch.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define GamePublisher search response class.
    /// </summary>
    public class GamePublisherSearchResponse : Response
    {
        #region Fields
        private int decimalTitleId = -1;
        private int clientTypeId = -1;
        private string mediaTitle = string.Empty;
        #endregion

        #region Properties
        /// <summary>
        /// Title ID, stored in decimal format
        /// </summary>
        public int DecimalTitleId
        {
            get { return decimalTitleId; }
            set { decimalTitleId = value; }
        }

        /// <summary>
        /// Title of the media store in MediaLocal table with en-US
        /// </summary>
        public string MediaTitle
        {
            get { return mediaTitle; }
            set { mediaTitle = value; }
        }

        /// <summary>
        /// Client type of the media associated with the title
        /// </summary>
        public int ClientTypeId
        {
            get { return clientTypeId; }
            set { clientTypeId = value; }
        }

        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public GamePublisherSearchResponse()
        {
        }
        /// <summary>
        /// Constructor used to read the data out of a db reader after calling the search SP. 
        /// </summary>
        /// <param name="reader">reader returned by the sql helper that calls GamePublisher SP</param>
        public GamePublisherSearchResponse(SqlDataReader reader)
        {
            this.mediaTitle = SqlHelper.GetNullableString(reader, "mediaTitle");

            this.decimalTitleId = SqlHelper.GetNullableInt32(reader, "decimalTitleId");
            this.clientTypeId = SqlHelper.GetNullableInt32(reader, "clientTypeId");
        }
        #endregion
    }

    /// <summary>
    /// Define GamePublisher search request class.
    /// </summary>
    public class GamePublisherSearchRequest : Request
    {
        #region Fields
        private string publisherId = string.Empty;
        #endregion

        #region Properties
        /// <summary>
        /// Title of what we are searching for
        /// </summary>
        public string PublisherId
        {
            get { return publisherId; }
            set { publisherId = value; }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public GamePublisherSearchRequest()
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Searches for GamePublisher specified by the search request object.
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<GamePublisherSearchResponse> responses = new List<GamePublisherSearchResponse>();
            try
            {
                using (SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "GamePublisherFind",
                        this.publisherId,
                        this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new GamePublisherSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GamePublisherFind ");
                throw;
            }
            return responses.ToArray();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\GameSchema.cs ===
#pragma warning disable 1591 
// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.2.1
// Schema file: GameSchema.xsd
// Creation Date: 6/28/2007 10:03:25 PM
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;

namespace Microsoft.Ems.GameSchema
{

	public struct Declarations
	{
		public const string SchemaVersion = "http://www.microsoft.com/ems/game";
	}


	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentOfferCollection : ArrayList
	{
		public Microsoft.Ems.GameSchema.GameContentOffer Add(Microsoft.Ems.GameSchema.GameContentOffer obj)
		{
			base.Add(obj);
			return obj;
		}

		public Microsoft.Ems.GameSchema.GameContentOffer Add()
		{
			return Add(new Microsoft.Ems.GameSchema.GameContentOffer());
		}

		public void Insert(int index, Microsoft.Ems.GameSchema.GameContentOffer obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Microsoft.Ems.GameSchema.GameContentOffer obj)
		{
			base.Remove(obj);
		}

		new public Microsoft.Ems.GameSchema.GameContentOffer this[int index]
		{
			get { return (Microsoft.Ems.GameSchema.GameContentOffer) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentInstanceCollection : ArrayList
	{
		public Microsoft.Ems.GameSchema.GameContentInstance Add(Microsoft.Ems.GameSchema.GameContentInstance obj)
		{
			base.Add(obj);
			return obj;
		}

		public Microsoft.Ems.GameSchema.GameContentInstance Add()
		{
			return Add(new Microsoft.Ems.GameSchema.GameContentInstance());
		}

		public void Insert(int index, Microsoft.Ems.GameSchema.GameContentInstance obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Microsoft.Ems.GameSchema.GameContentInstance obj)
		{
			base.Remove(obj);
		}

		new public Microsoft.Ems.GameSchema.GameContentInstance this[int index]
		{
			get { return (Microsoft.Ems.GameSchema.GameContentInstance) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class LocaleMappingCollection : ArrayList
	{
		public Microsoft.Ems.GameSchema.LocaleMapping Add(Microsoft.Ems.GameSchema.LocaleMapping obj)
		{
			base.Add(obj);
			return obj;
		}

		public Microsoft.Ems.GameSchema.LocaleMapping Add()
		{
			return Add(new Microsoft.Ems.GameSchema.LocaleMapping());
		}

		public void Insert(int index, Microsoft.Ems.GameSchema.LocaleMapping obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Microsoft.Ems.GameSchema.LocaleMapping obj)
		{
			base.Remove(obj);
		}

		new public Microsoft.Ems.GameSchema.LocaleMapping this[int index]
		{
			get { return (Microsoft.Ems.GameSchema.LocaleMapping) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class categoryCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaLocaleInfoCollection : ArrayList
	{
		public Microsoft.Ems.GameSchema.MediaLocaleInfo Add(Microsoft.Ems.GameSchema.MediaLocaleInfo obj)
		{
			base.Add(obj);
			return obj;
		}

		public Microsoft.Ems.GameSchema.MediaLocaleInfo Add()
		{
			return Add(new Microsoft.Ems.GameSchema.MediaLocaleInfo());
		}

		public void Insert(int index, Microsoft.Ems.GameSchema.MediaLocaleInfo obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Microsoft.Ems.GameSchema.MediaLocaleInfo obj)
		{
			base.Remove(obj);
		}

		new public Microsoft.Ems.GameSchema.MediaLocaleInfo this[int index]
		{
			get { return (Microsoft.Ems.GameSchema.MediaLocaleInfo) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameLocaleInfoCollection : ArrayList
	{
		public Microsoft.Ems.GameSchema.GameLocaleInfo Add(Microsoft.Ems.GameSchema.GameLocaleInfo obj)
		{
			base.Add(obj);
			return obj;
		}

		public Microsoft.Ems.GameSchema.GameLocaleInfo Add()
		{
			return Add(new Microsoft.Ems.GameSchema.GameLocaleInfo());
		}

		public void Insert(int index, Microsoft.Ems.GameSchema.GameLocaleInfo obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Microsoft.Ems.GameSchema.GameLocaleInfo obj)
		{
			base.Remove(obj);
		}

		new public Microsoft.Ems.GameSchema.GameLocaleInfo this[int index]
		{
			get { return (Microsoft.Ems.GameSchema.GameLocaleInfo) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameCollection : ArrayList
	{
		public Microsoft.Ems.GameSchema.Game Add(Microsoft.Ems.GameSchema.Game obj)
		{
			base.Add(obj);
			return obj;
		}

		public Microsoft.Ems.GameSchema.Game Add()
		{
			return Add(new Microsoft.Ems.GameSchema.Game());
		}

		public void Insert(int index, Microsoft.Ems.GameSchema.Game obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Microsoft.Ems.GameSchema.Game obj)
		{
			base.Remove(obj);
		}

		new public Microsoft.Ems.GameSchema.Game this[int index]
		{
			get { return (Microsoft.Ems.GameSchema.Game) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentCollection : ArrayList
	{
		public Microsoft.Ems.GameSchema.GameContent Add(Microsoft.Ems.GameSchema.GameContent obj)
		{
			base.Add(obj);
			return obj;
		}

		public Microsoft.Ems.GameSchema.GameContent Add()
		{
			return Add(new Microsoft.Ems.GameSchema.GameContent());
		}

		public void Insert(int index, Microsoft.Ems.GameSchema.GameContent obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Microsoft.Ems.GameSchema.GameContent obj)
		{
			base.Remove(obj);
		}

		new public Microsoft.Ems.GameSchema.GameContent this[int index]
		{
			get { return (Microsoft.Ems.GameSchema.GameContent) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ratingValueCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferInstanceCollection : ArrayList
	{
		public Microsoft.Ems.GameSchema.OfferInstance Add(Microsoft.Ems.GameSchema.OfferInstance obj)
		{
			base.Add(obj);
			return obj;
		}

		public Microsoft.Ems.GameSchema.OfferInstance Add()
		{
			return Add(new Microsoft.Ems.GameSchema.OfferInstance());
		}

		public void Insert(int index, Microsoft.Ems.GameSchema.OfferInstance obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Microsoft.Ems.GameSchema.OfferInstance obj)
		{
			base.Remove(obj);
		}

		new public Microsoft.Ems.GameSchema.OfferInstance this[int index]
		{
			get { return (Microsoft.Ems.GameSchema.OfferInstance) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaRelationshipCollection : ArrayList
	{
		public Microsoft.Ems.GameSchema.MediaRelationship Add(Microsoft.Ems.GameSchema.MediaRelationship obj)
		{
			base.Add(obj);
			return obj;
		}

		public Microsoft.Ems.GameSchema.MediaRelationship Add()
		{
			return Add(new Microsoft.Ems.GameSchema.MediaRelationship());
		}

		public void Insert(int index, Microsoft.Ems.GameSchema.MediaRelationship obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Microsoft.Ems.GameSchema.MediaRelationship obj)
		{
			base.Remove(obj);
		}

		new public Microsoft.Ems.GameSchema.MediaRelationship this[int index]
		{
			get { return (Microsoft.Ems.GameSchema.MediaRelationship) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class storeCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ratingDescriptorCollection : ArrayList
	{
		public uint Add(uint obj)
		{
			base.Add(obj);
			return obj;
		}

		public uint Add()
		{
			return Add(new uint());
		}

		public void Insert(int index, uint obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(uint obj)
		{
			base.Remove(obj);
		}

		new public uint this[int index]
		{
			get { return (uint) base[index]; }
			set { base[index] = value; }
		}
	}



	[XmlType(TypeName="MediaInfo",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaInfo
	{

		[XmlElement(ElementName="mediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaId;
		
		[XmlIgnore]
		public string mediaId
		{ 
			get { return __mediaId; }
			set { __mediaId = value; }
		}

		[XmlElement(ElementName="mediaTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __mediaTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __mediaTypeIdSpecified;
		
		[XmlIgnore]
		public uint mediaTypeId
		{ 
			get { return __mediaTypeId; }
			set { __mediaTypeId = value; __mediaTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="providerId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerId;
		
		[XmlIgnore]
		public string providerId
		{ 
			get { return __providerId; }
			set { __providerId = value; }
		}

		[XmlElement(ElementName="originalReleaseDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __originalReleaseDate;
		
		[XmlIgnore]
		public string originalReleaseDate
		{ 
			get { return __originalReleaseDate; }
			set { __originalReleaseDate = value; }
		}

		[XmlElement(ElementName="displayOriginalReleaseDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __displayOriginalReleaseDate;
		
		[XmlIgnore]
		public string displayOriginalReleaseDate
		{ 
			get { return __displayOriginalReleaseDate; }
			set { __displayOriginalReleaseDate = value; }
		}

		[XmlElement(ElementName="visibilityDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __visibilityDate;
		
		[XmlIgnore]
		public string visibilityDate
		{ 
			get { return __visibilityDate; }
			set { __visibilityDate = value; }
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.MediaLocaleInfo),ElementName="mediaLocaleInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public MediaLocaleInfoCollection __mediaLocaleInfoCollection;
		
		[XmlIgnore]
		public MediaLocaleInfoCollection mediaLocaleInfoCollection
		{
			get
			{
				if (__mediaLocaleInfoCollection == null) __mediaLocaleInfoCollection = new MediaLocaleInfoCollection();
				return __mediaLocaleInfoCollection;
			}
			set {__mediaLocaleInfoCollection = value;}
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.LocaleMapping),ElementName="mediaLocaleMapping",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public LocaleMappingCollection __mediaLocaleMappingCollection;
		
		[XmlIgnore]
		public LocaleMappingCollection mediaLocaleMappingCollection
		{
			get
			{
				if (__mediaLocaleMappingCollection == null) __mediaLocaleMappingCollection = new LocaleMappingCollection();
				return __mediaLocaleMappingCollection;
			}
			set {__mediaLocaleMappingCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="category",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public categoryCollection __categoryCollection;
		
		[XmlIgnore]
		public categoryCollection categoryCollection
		{
			get
			{
				if (__categoryCollection == null) __categoryCollection = new categoryCollection();
				return __categoryCollection;
			}
			set {__categoryCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="ratingValue",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ratingValueCollection __ratingValueCollection;
		
		[XmlIgnore]
		public ratingValueCollection ratingValueCollection
		{
			get
			{
				if (__ratingValueCollection == null) __ratingValueCollection = new ratingValueCollection();
				return __ratingValueCollection;
			}
			set {__ratingValueCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="ratingDescriptor",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ratingDescriptorCollection __ratingDescriptorCollection;
		
		[XmlIgnore]
		public ratingDescriptorCollection ratingDescriptorCollection
		{
			get
			{
				if (__ratingDescriptorCollection == null) __ratingDescriptorCollection = new ratingDescriptorCollection();
				return __ratingDescriptorCollection;
			}
			set {__ratingDescriptorCollection = value;}
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.MediaRelationship),ElementName="mediaRelationship",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public MediaRelationshipCollection __mediaRelationshipCollection;
		
		[XmlIgnore]
		public MediaRelationshipCollection mediaRelationshipCollection
		{
			get
			{
				if (__mediaRelationshipCollection == null) __mediaRelationshipCollection = new MediaRelationshipCollection();
				return __mediaRelationshipCollection;
			}
			set {__mediaRelationshipCollection = value;}
		}

		public MediaInfo()
		{
		}
	}


	[XmlType(TypeName="MediaLocaleInfo",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaLocaleInfo
	{

		[XmlElement(ElementName="lcid",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __lcid;
		
		[XmlIgnore]
		public string lcid
		{ 
			get { return __lcid; }
			set { __lcid = value; }
		}

		[XmlElement(ElementName="title",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __title;
		
		[XmlIgnore]
		public string title
		{ 
			get { return __title; }
			set { __title = value; }
		}

		[XmlElement(ElementName="titleSort",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __titleSort;
		
		[XmlIgnore]
		public string titleSort
		{ 
			get { return __titleSort; }
			set { __titleSort = value; }
		}

		[XmlElement(ElementName="reducedTitle",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __reducedTitle;
		
		[XmlIgnore]
		public string reducedTitle
		{ 
			get { return __reducedTitle; }
			set { __reducedTitle = value; }
		}

		[XmlElement(ElementName="description",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __description;
		
		[XmlIgnore]
		public string description
		{ 
			get { return __description; }
			set { __description = value; }
		}

		[XmlElement(ElementName="reducedDescription",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __reducedDescription;
		
		[XmlIgnore]
		public string reducedDescription
		{ 
			get { return __reducedDescription; }
			set { __reducedDescription = value; }
		}

		public MediaLocaleInfo()
		{
		}
	}


	[XmlType(TypeName="MediaRelationship",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaRelationship
	{

		[XmlElement(ElementName="isFromToDirection",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="boolean",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isFromToDirection;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isFromToDirectionSpecified;
		
		[XmlIgnore]
		public bool isFromToDirection
		{ 
			get { return __isFromToDirection; }
			set { __isFromToDirection = value; __isFromToDirectionSpecified = true; }
		}

		[XmlElement(ElementName="relatedMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __relatedMediaId;
		
		[XmlIgnore]
		public string relatedMediaId
		{ 
			get { return __relatedMediaId; }
			set { __relatedMediaId = value; }
		}

		[XmlElement(ElementName="mediaRelationshipTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __mediaRelationshipTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __mediaRelationshipTypeIdSpecified;
		
		[XmlIgnore]
		public uint mediaRelationshipTypeId
		{ 
			get { return __mediaRelationshipTypeId; }
			set { __mediaRelationshipTypeId = value; __mediaRelationshipTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="sortOrder",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __sortOrder;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __sortOrderSpecified;
		
		[XmlIgnore]
		public uint sortOrder
		{ 
			get { return __sortOrder; }
			set { __sortOrder = value; __sortOrderSpecified = true; }
		}

		public MediaRelationship()
		{
		}
	}


	[XmlType(TypeName="Game",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class Game
	{

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.MediaInfo),ElementName="mediaInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Microsoft.Ems.GameSchema.MediaInfo __mediaInfo;
		
		[XmlIgnore]
		public Microsoft.Ems.GameSchema.MediaInfo mediaInfo
		{
			get
			{
				if (__mediaInfo == null) __mediaInfo = new Microsoft.Ems.GameSchema.MediaInfo();		
				return __mediaInfo;
			}
			set {__mediaInfo = value;}
		}

		[XmlElement(ElementName="liveTitleId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __liveTitleId;
		
		[XmlIgnore]
		public string liveTitleId
		{ 
			get { return __liveTitleId; }
			set { __liveTitleId = value; }
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.GameLocaleInfo),ElementName="gameLocaleInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameLocaleInfoCollection __gameLocaleInfoCollection;
		
		[XmlIgnore]
		public GameLocaleInfoCollection gameLocaleInfoCollection
		{
			get
			{
				if (__gameLocaleInfoCollection == null) __gameLocaleInfoCollection = new GameLocaleInfoCollection();
				return __gameLocaleInfoCollection;
			}
			set {__gameLocaleInfoCollection = value;}
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.GameDownloadInfo),ElementName="gameDownloadInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Microsoft.Ems.GameSchema.GameDownloadInfo __gameDownloadInfo;
		
		[XmlIgnore]
		public Microsoft.Ems.GameSchema.GameDownloadInfo gameDownloadInfo
		{
			get
			{
				if (__gameDownloadInfo == null) __gameDownloadInfo = new Microsoft.Ems.GameSchema.GameDownloadInfo();		
				return __gameDownloadInfo;
			}
			set {__gameDownloadInfo = value;}
		}

		public Game()
		{
		}
	}


	[XmlType(TypeName="GameDownloadInfo",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameDownloadInfo
	{

		[XmlElement(ElementName="providerCategoryId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __providerCategoryId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __providerCategoryIdSpecified;
		
		[XmlIgnore]
		public uint providerCategoryId
		{ 
			get { return __providerCategoryId; }
			set { __providerCategoryId = value; __providerCategoryIdSpecified = true; }
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.GameContentInstance),ElementName="gameContentInstance",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameContentInstanceCollection __gameContentInstanceCollection;
		
		[XmlIgnore]
		public GameContentInstanceCollection gameContentInstanceCollection
		{
			get
			{
				if (__gameContentInstanceCollection == null) __gameContentInstanceCollection = new GameContentInstanceCollection();
				return __gameContentInstanceCollection;
			}
			set {__gameContentInstanceCollection = value;}
		}

		public GameDownloadInfo()
		{
		}
	}


	[XmlType(TypeName="GameContent",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContent
	{

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.MediaInfo),ElementName="mediaInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Microsoft.Ems.GameSchema.MediaInfo __mediaInfo;
		
		[XmlIgnore]
		public Microsoft.Ems.GameSchema.MediaInfo mediaInfo
		{
			get
			{
				if (__mediaInfo == null) __mediaInfo = new Microsoft.Ems.GameSchema.MediaInfo();		
				return __mediaInfo;
			}
			set {__mediaInfo = value;}
		}

		[XmlElement(ElementName="gameMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __gameMediaId;
		
		[XmlIgnore]
		public string gameMediaId
		{ 
			get { return __gameMediaId; }
			set { __gameMediaId = value; }
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.GameDownloadInfo),ElementName="gameDownloadInfo",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Microsoft.Ems.GameSchema.GameDownloadInfo __gameDownloadInfo;
		
		[XmlIgnore]
		public Microsoft.Ems.GameSchema.GameDownloadInfo gameDownloadInfo
		{
			get
			{
				if (__gameDownloadInfo == null) __gameDownloadInfo = new Microsoft.Ems.GameSchema.GameDownloadInfo();		
				return __gameDownloadInfo;
			}
			set {__gameDownloadInfo = value;}
		}

		public GameContent()
		{
		}
	}


	[XmlType(TypeName="GameConsumable",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameConsumable
	{

		[XmlElement(ElementName="gameAssetMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __gameAssetMediaId;
		
		[XmlIgnore]
		public string gameAssetMediaId
		{ 
			get { return __gameAssetMediaId; }
			set { __gameAssetMediaId = value; }
		}

		[XmlElement(ElementName="gameMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __gameMediaId;
		
		[XmlIgnore]
		public string gameMediaId
		{ 
			get { return __gameMediaId; }
			set { __gameMediaId = value; }
		}

		[XmlElement(ElementName="liveTitleAssetId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __liveTitleAssetId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __liveTitleAssetIdSpecified;
		
		[XmlIgnore]
		public uint liveTitleAssetId
		{ 
			get { return __liveTitleAssetId; }
			set { __liveTitleAssetId = value; __liveTitleAssetIdSpecified = true; }
		}

		public GameConsumable()
		{
		}
	}


	[XmlType(TypeName="Offer",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class Offer
	{

		[XmlElement(ElementName="offerId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerId;
		
		[XmlIgnore]
		public string offerId
		{ 
			get { return __offerId; }
			set { __offerId = value; }
		}

		[XmlElement(ElementName="metadataMediaId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __metadataMediaId;
		
		[XmlIgnore]
		public string metadataMediaId
		{ 
			get { return __metadataMediaId; }
			set { __metadataMediaId = value; }
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.OfferInstance),ElementName="offerInstance",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public OfferInstanceCollection __offerInstanceCollection;
		
		[XmlIgnore]
		public OfferInstanceCollection offerInstanceCollection
		{
			get
			{
				if (__offerInstanceCollection == null) __offerInstanceCollection = new OfferInstanceCollection();
				return __offerInstanceCollection;
			}
			set {__offerInstanceCollection = value;}
		}

		[XmlElement(Type=typeof(uint),ElementName="store",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public storeCollection __storeCollection;
		
		[XmlIgnore]
		public storeCollection storeCollection
		{
			get
			{
				if (__storeCollection == null) __storeCollection = new storeCollection();
				return __storeCollection;
			}
			set {__storeCollection = value;}
		}

		public Offer()
		{
		}
	}


	[XmlType(TypeName="OfferInstance",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class OfferInstance
	{

		[XmlElement(ElementName="offerInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __offerInstanceId;
		
		[XmlIgnore]
		public string offerInstanceId
		{ 
			get { return __offerInstanceId; }
			set { __offerInstanceId = value; }
		}

		[XmlElement(ElementName="countryCode",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __countryCode;
		
		[XmlIgnore]
		public string countryCode
		{ 
			get { return __countryCode; }
			set { __countryCode = value; }
		}

		[XmlElement(ElementName="requiredUserTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __requiredUserTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __requiredUserTypeIdSpecified;
		
		[XmlIgnore]
		public uint requiredUserTypeId
		{ 
			get { return __requiredUserTypeId; }
			set { __requiredUserTypeId = value; __requiredUserTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="pointsPrice",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __pointsPrice;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __pointsPriceSpecified;
		
		[XmlIgnore]
		public uint pointsPrice
		{ 
			get { return __pointsPrice; }
			set { __pointsPrice = value; __pointsPriceSpecified = true; }
		}

		[XmlElement(ElementName="sku",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __sku;
		
		[XmlIgnore]
		public string sku
		{ 
			get { return __sku; }
			set { __sku = value; }
		}

		[XmlElement(ElementName="startDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __startDate;
		
		[XmlIgnore]
		public string startDate
		{ 
			get { return __startDate; }
			set { __startDate = value; }
		}

		[XmlElement(ElementName="endDate",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __endDate;
		
		[XmlIgnore]
		public string endDate
		{ 
			get { return __endDate; }
			set { __endDate = value; }
		}

		[XmlElement(ElementName="visibilityLevel",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __visibilityLevel;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __visibilityLevelSpecified;
		
		[XmlIgnore]
		public uint visibilityLevel
		{ 
			get { return __visibilityLevel; }
			set { __visibilityLevel = value; __visibilityLevelSpecified = true; }
		}

		public OfferInstance()
		{
		}
	}


	[XmlType(TypeName="GameContentOffer",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentOffer
	{

		[XmlElement(ElementName="friendlyName",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __friendlyName;
		
		[XmlIgnore]
		public string friendlyName
		{ 
			get { return __friendlyName; }
			set { __friendlyName = value; }
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.GameContentProviderTerms),ElementName="gameContentProviderTerms",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Microsoft.Ems.GameSchema.GameContentProviderTerms __gameContentProviderTerms;
		
		[XmlIgnore]
		public Microsoft.Ems.GameSchema.GameContentProviderTerms gameContentProviderTerms
		{
			get
			{
				if (__gameContentProviderTerms == null) __gameContentProviderTerms = new Microsoft.Ems.GameSchema.GameContentProviderTerms();		
				return __gameContentProviderTerms;
			}
			set {__gameContentProviderTerms = value;}
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.Offer),ElementName="offer",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Microsoft.Ems.GameSchema.Offer __offer;
		
		[XmlIgnore]
		public Microsoft.Ems.GameSchema.Offer offer
		{
			get
			{
				if (__offer == null) __offer = new Microsoft.Ems.GameSchema.Offer();		
				return __offer;
			}
			set {__offer = value;}
		}

		public GameContentOffer()
		{
		}
	}


	[XmlType(TypeName="GameContentProviderTerms",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentProviderTerms
	{

		[XmlElement(ElementName="providerTermId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __providerTermId;
		
		[XmlIgnore]
		public string providerTermId
		{ 
			get { return __providerTermId; }
			set { __providerTermId = value; }
		}

		[XmlElement(ElementName="mediaInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaInstanceId;
		
		[XmlIgnore]
		public string mediaInstanceId
		{ 
			get { return __mediaInstanceId; }
			set { __mediaInstanceId = value; }
		}

		[XmlElement(ElementName="licenseTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __licenseTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __licenseTypeIdSpecified;
		
		[XmlIgnore]
		public uint licenseTypeId
		{ 
			get { return __licenseTypeId; }
			set { __licenseTypeId = value; __licenseTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="deliveryTypeId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __deliveryTypeId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __deliveryTypeIdSpecified;
		
		[XmlIgnore]
		public uint deliveryTypeId
		{ 
			get { return __deliveryTypeId; }
			set { __deliveryTypeId = value; __deliveryTypeIdSpecified = true; }
		}

		[XmlElement(ElementName="publisherProviderId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __publisherProviderId;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __publisherProviderIdSpecified;
		
		[XmlIgnore]
		public uint publisherProviderId
		{ 
			get { return __publisherProviderId; }
			set { __publisherProviderId = value; __publisherProviderIdSpecified = true; }
		}

		public GameContentProviderTerms()
		{
		}
	}


	[XmlType(TypeName="MediaInstance",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class MediaInstance
	{

		[XmlElement(ElementName="mediaInstanceId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __mediaInstanceId;
		
		[XmlIgnore]
		public string mediaInstanceId
		{ 
			get { return __mediaInstanceId; }
			set { __mediaInstanceId = value; }
		}

		[XmlElement(ElementName="isAcquirable",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="boolean",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isAcquirable;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isAcquirableSpecified;
		
		[XmlIgnore]
		public bool isAcquirable
		{ 
			get { return __isAcquirable; }
			set { __isAcquirable = value; __isAcquirableSpecified = true; }
		}

		[XmlElement(ElementName="isAdSupported",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="boolean",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isAdSupported;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __isAdSupportedSpecified;
		
		[XmlIgnore]
		public bool isAdSupported
		{ 
			get { return __isAdSupported; }
			set { __isAdSupported = value; __isAdSupportedSpecified = true; }
		}

		public MediaInstance()
		{
		}
	}


	[XmlType(TypeName="GameContentInstance",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameContentInstance
	{

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.MediaInstance),ElementName="mediaInstance",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Microsoft.Ems.GameSchema.MediaInstance __mediaInstance;
		
		[XmlIgnore]
		public Microsoft.Ems.GameSchema.MediaInstance mediaInstance
		{
			get
			{
				if (__mediaInstance == null) __mediaInstance = new Microsoft.Ems.GameSchema.MediaInstance();		
				return __mediaInstance;
			}
			set {__mediaInstance = value;}
		}

		[XmlElement(ElementName="installSize",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __installSize;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __installSizeSpecified;
		
		[XmlIgnore]
		public uint installSize
		{ 
			get { return __installSize; }
			set { __installSize = value; __installSizeSpecified = true; }
		}

		[XmlElement(ElementName="packageSize",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="unsignedInt",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public uint __packageSize;
		
		[XmlIgnore]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public bool __packageSizeSpecified;
		
		[XmlIgnore]
		public uint packageSize
		{ 
			get { return __packageSize; }
			set { __packageSize = value; __packageSizeSpecified = true; }
		}

		[XmlElement(ElementName="encryptedSymKey",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __encryptedSymKey;
		
		[XmlIgnore]
		public string encryptedSymKey
		{ 
			get { return __encryptedSymKey; }
			set { __encryptedSymKey = value; }
		}

		[XmlElement(ElementName="encryptedPublicKey",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __encryptedPublicKey;
		
		[XmlIgnore]
		public string encryptedPublicKey
		{ 
			get { return __encryptedPublicKey; }
			set { __encryptedPublicKey = value; }
		}

		[XmlElement(ElementName="url",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __url;
		
		[XmlIgnore]
		public string url
		{ 
			get { return __url; }
			set { __url = value; }
		}

		[XmlElement(ElementName="liveContentId",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __liveContentId;
		
		[XmlIgnore]
		public string liveContentId
		{ 
			get { return __liveContentId; }
			set { __liveContentId = value; }
		}

		public GameContentInstance()
		{
		}
	}


	[XmlType(TypeName="GameLocaleInfo",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class GameLocaleInfo
	{

		[XmlElement(ElementName="lcid",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __lcid;
		
		[XmlIgnore]
		public string lcid
		{ 
			get { return __lcid; }
			set { __lcid = value; }
		}

		[XmlElement(ElementName="customGenre",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __customGenre;
		
		[XmlIgnore]
		public string customGenre
		{ 
			get { return __customGenre; }
			set { __customGenre = value; }
		}

		public GameLocaleInfo()
		{
		}
	}


	[XmlType(TypeName="LocaleMapping",Namespace=Declarations.SchemaVersion),Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class LocaleMapping
	{

		[XmlElement(ElementName="lcidFrom",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __lcidFrom;
		
		[XmlIgnore]
		public string lcidFrom
		{ 
			get { return __lcidFrom; }
			set { __lcidFrom = value; }
		}

		[XmlElement(ElementName="lcidTo",IsNullable=false,Form=XmlSchemaForm.Qualified,DataType="string",Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __lcidTo;
		
		[XmlIgnore]
		public string lcidTo
		{ 
			get { return __lcidTo; }
			set { __lcidTo = value; }
		}

		public LocaleMapping()
		{
		}
	}


	[XmlRoot(ElementName="GameData",Namespace=Declarations.SchemaVersion,IsNullable=false),Serializable]
	public class GameData
	{

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.Game),ElementName="game",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameCollection __gameCollection;
		
		[XmlIgnore]
		public GameCollection gameCollection
		{
			get
			{
				if (__gameCollection == null) __gameCollection = new GameCollection();
				return __gameCollection;
			}
			set {__gameCollection = value;}
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.GameContent),ElementName="gameContent",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameContentCollection __gameContentCollection;
		
		[XmlIgnore]
		public GameContentCollection gameContentCollection
		{
			get
			{
				if (__gameContentCollection == null) __gameContentCollection = new GameContentCollection();
				return __gameContentCollection;
			}
			set {__gameContentCollection = value;}
		}

		[XmlElement(Type=typeof(Microsoft.Ems.GameSchema.GameContentOffer),ElementName="gameContentOffer",IsNullable=false,Form=XmlSchemaForm.Qualified,Namespace=Declarations.SchemaVersion)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public GameContentOfferCollection __gameContentOfferCollection;
		
		[XmlIgnore]
		public GameContentOfferCollection gameContentOfferCollection
		{
			get
			{
				if (__gameContentOfferCollection == null) __gameContentOfferCollection = new GameContentOfferCollection();
				return __gameContentOfferCollection;
			}
			set {__gameContentOfferCollection = value;}
		}

		public GameData()
		{
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\HDTVMode.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of HDTVMode data in the catalog.
    /// </summary>
    public class HDTVMode : Utils.IIdentifiable<Int32>
    {
        #region Fields

        private int hdtvModeId;
        private string internalName;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.Cache<HDTVMode, Int32> HDTVModeCache = new Utils.Cache<HDTVMode, Int32>(
        new Utils.Cache<HDTVMode, Int32>.CacheDataRetrievalDelegate(GetData),
        CacheRefreshPeriod);

        #endregion

        #region Constructors
        /// <summary>
        /// Empty constructor to work over SOAP.
        /// </summary>
        public HDTVMode()
        {
        }

        /// <summary>
        /// Initializes a new instance of the HDTVMode object.
        /// </summary>
        /// <param name="hdtvModeId">HDTVMode code</param>
        /// <param name="internalName">HDTVMode name</param>
        public HDTVMode(int hdtvModeId, string internalName)
        {
            Validate.IsNotEmpty(internalName, "internalName", "internalName");
            this.hdtvModeId = hdtvModeId;
            this.internalName = internalName;
        }

        /// <summary>
        /// Initializes a new instance of the HDTVMode object.
        /// </summary>
        /// <param name="reader"></param>
        internal HDTVMode(SqlDataReader reader)
        {
            hdtvModeId = reader.GetInt32(reader.GetOrdinal("hdtvModeId"));
            internalName = reader.GetString(reader.GetOrdinal("internalName"));
        }
        #endregion

        #region Properties

        /// <summary>
        /// The id of this object - required for key'ing.
        /// </summary>
        public int Id
        {
            get
            {
                return this.hdtvModeId;
            }
        }

        /// <summary>
        /// Gets this HDTVMode hdtvModeId.
        /// </summary>
        public int HdtvModeId
        {
            get
            {
                return this.hdtvModeId;
            }
            set
            {
                // Empty set method so SOAP can expose this property correctly.
            }
        }

        /// <summary>
        /// Gets or sets this HDTVMode internalName.
        /// </summary>
        public string InternalName
        {
            get
            {
                return this.internalName;
            }
            set
            {
                Validate.IsNotEmpty(value, "InternalName", "value");
                this.internalName = value;
            }
        }
        /// <summary>
        /// Id to be used by cache
        /// </summary>
        public int PrimaryId
        {
            get { return hdtvModeId; }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Gets a HDTVMode given a HDTVModeCode.
        /// </summary>
        /// <param name="HDTVModeCode">The Code of the HDTVMode to retrieve.</param>
        /// <returns>The HDTVMode for the specified HDTVModeCode.</returns>
        public static HDTVMode Get(int HDTVModeCode)
        {   
            return HDTVModeCache.Get(HDTVModeCode);
        }

        /// <summary>
        /// Gets all hdtvModeId in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<HDTVMode> Get()
        {
            return HDTVModeCache.Get();
        }

        /// <summary>
        /// Gets all hdtvModeId  from the db.
        /// </summary>
        /// <returns></returns>
        private static List<HDTVMode> GetData()
        {
            List<HDTVMode> hdtvModeIdList = new List<HDTVMode>();

            using ( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "HDTVModeGet"
                    ))
            {
                while (reader.Read())
                {
                    hdtvModeIdList.Add(new HDTVMode(reader));
                }
            }

            return hdtvModeIdList;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ICatalogData.cs ===
using System;
using System.IO;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the data change type.
    /// </summary>
    public enum DataChangeType
    {
        /// <summary>
        /// No change to the data
        /// </summary>
        None = 0,
        /// <summary>
        /// Data to be added
        /// </summary>
        Add = 1,
        /// <summary>
        /// Data has been changed
        /// </summary>
        Update = 2,
        /// <summary>
        /// Data marked for deletion
        /// </summary>
        Delete = 3
    }

    /// <summary>
    /// Defines the insert data change type used by core data classes
    /// </summary>
    public enum InsertDataChangeType
    {
        /// <summary>
        /// No change to the data
        /// </summary>
        None = DataChangeType.None,
        /// <summary>
        /// Data to be added
        /// </summary>
        Add = DataChangeType.Add,
        /// <summary>
        /// Data has been changed
        /// </summary>
        Update = DataChangeType.Update
    }

    /// <summary>
    /// This interface defines required support methods by a catalog data class.
    /// </summary>
    public interface ICatalogData
    {
        /// <summary>
        /// Handles serialization of a data object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        /// <remarks>
        /// The serialized xml will have the following format:
        /// <TableName>
        /// <column1Name>data</column1Name>
        /// <column2Name>data</column2Name>
        /// </TableName>
        /// </remarks>
        void Serialize(Serialization context);

        /// <summary>
        /// Handles Deserialization of a data object from xml.
        /// </summary>
        /// <param name="node">An XMLNode contains the attributs of the object and all its contained objects</param>
        /// <remarks>
        /// The xml input will have elements representing properties
        /// </remarks>
        void Deserialize(XmlNode node);

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\LicenseType.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml;
using System.Xml.Serialization;
using Utils = Microsoft.Ems.Common.Utils;


namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of LicenseType data in the catalog, 
    /// and aids in the creation of the LicenseType object.
    /// </summary>
    public class LicenseType : Utils.IKeyed<Int32>, ICatalogData
    {
        #region Constants
        private const int nameLength = 50;
        #endregion

        #region Fields
        private int id;
        private string name;
        private int licenseClassId;
        private string licenseXML;
        private List<LicenseTypeLegalTextLocale> legalTextLocales = new List<LicenseTypeLegalTextLocale>();
        private DataChangeType modified = DataChangeType.None;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.KeyedCache<Int32, LicenseType> LicenseTypeCache = new Utils.KeyedCache<Int32, LicenseType>(
                        new Utils.KeyedCache<Int32, Catalog.LicenseType>.CachedDataLoaderDelegate(GetData),
                        CacheRefreshPeriod);
        #endregion

        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public LicenseType()
        {
        }

        /// <summary>
        /// Instantiates a LicenseType instance from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        /// <param name="populateLegalText">boolean paramter to determine population of legal texts</param>
        private LicenseType(SqlDataReader reader, bool populateLegalText)
        {
            this.id = reader.GetInt32(reader.GetOrdinal("licenseTypeId"));
            this.name = reader.GetString(reader.GetOrdinal("name"));
            this.licenseClassId = reader.GetInt32(reader.GetOrdinal("licenseClassId"));
            this.licenseXML = reader.GetString(reader.GetOrdinal("licenseXML"));

            if (populateLegalText)
            {
                reader.NextResult();
                while (reader.Read())
                {
                    legalTextLocales.Add(new LicenseTypeLegalTextLocale(reader));
                }
            }

        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the array of LegalTextLocales identifying the LegalTextLocales associated with this License Type
        /// </summary>
        public LicenseTypeLegalTextLocale[] LegalTextLocales
        {
            get
            {
                return this.legalTextLocales.ToArray();
            }
            set
            {
                this.legalTextLocales.Clear();
                if (value != null)
                {
                    this.legalTextLocales.AddRange(value);
                }
            }
        }
        /// <summary>
        /// Gets the int that uniquely identifies this LicenseType
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
            set
            {
                if (value < 0)
                {
                    throw new ArgumentNullException("The id for the LicenseType cannot be less than zero.");
                }
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of this license type
        /// </summary>
        [XmlElement(IsNullable = true)]
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                Validate.IsNotEmpty(value, "Name", "Name");
                Validate.IsNotLongerThan(value, nameLength, "Name", "Name");
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets the license class id this license type applies to.
        /// </summary>
        public int LicenseClassId
        {
            get
            {
                return this.licenseClassId;
            }
            set
            {
                if (LicenseClass.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid license class id specified [{0}].", value));
                this.licenseClassId = value;
            }
        }

        /// <summary>
        /// Gets or sets the license xml
        /// </summary>
        [XmlElement(IsNullable = true)]
        public string LicenseXML
        {
            get
            {
                return this.licenseXML;
            }
            set
            {
                //TODO: need to figure out where to place License.xsd in production.
                //string licenseXsd = @"XSD\License.xsd";
                //Validate.IsValidXml(value, licenseXsd);
                Validate.IsNotEmpty(value, "LicenseXML", "LicenseXML");
                this.licenseXML = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a LicenseType for the given id.
        /// </summary>
        /// <param name="id">The id of the LicenseType to get</param>
        /// <returns>The LicenseType for the given id.</returns>
        public static LicenseType Get(int id)
        {
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "LicenseTypeGet",
                        id))
                {
                    if (reader.Read())
                        return new LicenseType(reader, true);
                }
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "LicenseTypeGet");
                throw;
            }
            return null;
        }

        /// <summary>
        /// Gets all pricing rules in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<LicenseType> Get()
        {
            return LicenseTypeCache.Get();
        }

        /// <summary>
        /// Causes the cached to be refreshed from the database
        /// </summary>
        public static void Refresh()
        {
            LicenseTypeCache.Refresh();
        }

        /// <summary>
        /// Gets all pricing rules from the database.
        /// </summary>
        /// <returns></returns>
        public static List<LicenseType> GetData()
        {
            List<LicenseType> licenseTypes = new List<LicenseType>();
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "LicenseTypeGet"
                    ))
            {
                while (reader.Read())
                {
                    licenseTypes.Add(new LicenseType(reader, false));
                }
            }

            return licenseTypes;
        }
        /// <summary>
        /// Returns the next available id
        /// </summary>
        /// <returns></returns>
        public static int GetAvailableId()
        {
            try
            {
                int retvalue = Convert.ToInt32(SqlHelper.ExecuteScalar(CatalogDatabase.RawCatalogDBConnectionString, CommandType.Text, "select dbo.GenerateIdLicenseType()"));
                return retvalue;
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GenerateIdLicenseType");
                throw;
            }
        }
        /// <summary>
        /// Saves changes made to the given LicenseType object to the database.
        /// </summary>
        public static void Save(LicenseType licenseType)
        {
            if (licenseType == null)
            {
                throw new ArgumentNullException("Can not save null license type");
            }

            if (licenseType.modified == DataChangeType.Delete)
            {
                throw new NotSupportedException("Deletion function is not supported in LicenseType class.");
            }

            try
            {
                using (Serialization serializer = new Serialization())
                {
                    serializer.SerializeStartElement("Data");
                    licenseType.Serialize(serializer);
                    serializer.SerializeEndElement();
                    LicenseType.Save(serializer.ResultXml);
                }
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "LicenseTypeSave");
                throw;
            }
            
        }
        /// <summary>
        /// Saves changes made to the given LicenseType object specified as xml.
        /// </summary>
        /// <param name="xmlLicenseType">LicenseType data to be save to the database.</param>
        public static void Save(string xmlLicenseType)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "LicenseTypeSave",
                        xmlLicenseType);

                //Refresh cache after save
                LicenseType.Refresh();
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "LicenseTypeSave");
                throw;
            }
        }
        #endregion

        #region ICatalogData Members
        /// <summary>
        /// 
        /// </summary>
        /// <param name="type"></param>
        /// <param name="cascade"></param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        /// <param name="context"></param>
        public void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("LicenseTypeData");
                context.SerializeStartElement("LicenseType");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("licenseTypeId", this.Id);
                context.SerializeElement("licenseClassId", this.LicenseClassId);
                context.SerializeElement("name", this.name);
                context.SerializeElement("licenseXml", this.licenseXML);
                
                foreach (LicenseTypeLegalTextLocale instance in this.LegalTextLocales)
                {
                    if (instance != null)
                    {
                        instance.LicenseTypeId = this.id;
                        instance.Serialize(context);
                    }
                }

                context.SerializeEndElement(); // Close LicenseType
                context.SerializeEndElement(); // Close LicenseTypeData
            }
            else
            {
                if (this.modified == DataChangeType.Add || this.modified == DataChangeType.Delete)
                {
                    this.SetModified(this.modified, true);
                }

                context.SerializeStartElement("LicenseTypeData");
                if (this.modified != DataChangeType.None)
                {
                    context.SerializeStartElement("LicenseType");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("licenseTypeId", this.Id);
                    context.SerializeElement("licenseClassId", this.LicenseClassId);
                    context.SerializeElement("name", this.name);
                    context.SerializeElement("licenseXml", this.licenseXML);
                    context.SerializeEndElement();
                }
                foreach (LicenseTypeLegalTextLocale instance in this.LegalTextLocales)
                {
                    if (instance != null)
                    {
                        instance.LicenseTypeId = this.id;
                        instance.Serialize(context);
                    }
                }

                context.SerializeEndElement();
            }            
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                node = node.SelectSingleNode("child::LicenseType");
                if (node == null)
                {
                    return;
                }

                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::licenseTypeId");
                if (null != attr) this.Id = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::licenseClassId");
                if (null != attr) this.LicenseClassId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::name");
                if (null != attr) this.name = attr.InnerText;

                attr = node.SelectSingleNode("child::licenseXml");
                if (null != attr) this.licenseXML = attr.InnerText;

                XmlNodeList childNodes = node.SelectNodes("child::LicenseTypeLegalTextLocaleData");
                foreach (XmlNode childNode in childNodes)
                {
                    LicenseTypeLegalTextLocale locale = new LicenseTypeLegalTextLocale();
                    locale.Deserialize(childNode);
                    this.legalTextLocales.Add(locale);
                }
            }
        }


        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Image.cs ===
using System;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides retrieval and modification of Image data in the catalog.
    /// </summary>
    public class Image : Media
    {
        #region Constants
        private const int creatorLength = 255;
        private const int issuerLength = 255;
        #endregion

        #region Fields
        private string creator;
        private string issuer;
        //private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        private Image(SqlDataReader reader) : base(reader)
        {
            reader.NextResult();
            if (reader.Read())
            {
                this.creator = reader.IsDBNull(reader.GetOrdinal("creator")) ? string.Empty : reader.GetString(reader.GetOrdinal("creator"));
                this.issuer = reader.IsDBNull(reader.GetOrdinal("issuer")) ? string.Empty : reader.GetString(reader.GetOrdinal("issuer"));
            } 
        }

        /// <summary>
        /// Paramerterless constructor required for SOAP
        /// </summary>
        public Image()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the creator of this image.
        /// </summary>
        public string Creator
        {
            get
            {
                return this.creator;
            }
            set
            {
                if (! String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, creatorLength, "Creator", "Creator");
                this.creator = value;
            }
        }

        /// <summary>
        /// Gets or sets the issuer of this image.
        /// </summary>
        public string Issuer
        {
            get
            {
                return this.issuer;
            }
            set
            {
                if (! String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, issuerLength, "Issuer", "Issuer");
                this.issuer = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        override public InsertDataChangeType Modified
        {
            get
            {
                return base.Modified;
            }
            set
            {
                base.Modified = value;
            }
        }        
        #endregion

        #region Public Methods
        /// <summary>
        /// Gets the Image object for the given image media id.
        /// </summary>
        /// <param name="id">The id of the image to get.</param>
        /// <returns>The image for the given id.</returns>
        public static Image Get(Guid id)
        {
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "ImageGet",
                        id))
                {
                    if (reader.Read())
                        return new Image(reader);
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "ImageGet");
                throw;
            }
            return null;
        }

        /// <summary>
        /// Saves changes made to the given Image object.
        /// </summary>
        public static void Save(Image image)
        {   
            if(image == null)
            {
                throw new ArgumentNullException("Can not save null image");
            }
	
            using (Serialization context = new Serialization())
            {
                context.SerializeStartElement("Data");
                image.Serialize(context);
                context.SerializeEndElement();
                Image.Save(context.ResultXml);
            }
        }

        /// <summary>
        /// Saves changes made to the given Image object specified as xml.
        /// </summary>
        /// <param name="xmlImage">Image data to be save to the database.</param>
        public static void Save(string xmlImage)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "ImageSave",
                        xmlImage);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "ImageSave");
                throw;
            }
        }

        /// <summary>
        /// Serialize the Image object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        /// <returns></returns>
        public override void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("Image");
                context.SerializeDatabaseOperation(this.Modified);

                //Call base class to serialize media.
                base.Serialize(context);

                context.SerializeElement("imageMediaId", this.Id);
                context.SerializeElement("creator", this.creator);
                context.SerializeElement("issuer", this.issuer);

                context.SerializeEndElement();
            }
            else
            {
                //If this image is to be added/deleted; mark all children to be added/deleted.
                if (this.Modified == InsertDataChangeType.Add)
                {
                    this.SetModified(this.Modified, true);
                }

                //Call base class to serialize media.
                base.Serialize(context);

                if (this.Modified != InsertDataChangeType.None)
                {
                    context.SerializeStartElement("Image");
                    context.SerializeDatabaseOperation(this.Modified);
                    context.SerializeElement("imageMediaId", this.Id);
                    context.SerializeElement("creator", this.creator);
                    context.SerializeElement("issuer", this.issuer);
                    context.SerializeEndElement();
                }
            }            
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public override void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.Modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                // Call Deserialize for base object MediaData
                XmlNode child = node.SelectSingleNode("child::MediaData");
                if (child != null) base.Deserialize(child);

                attr = node.SelectSingleNode("child::imageMediaId");
                if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::creator");
                if (null != attr) this.creator = attr.InnerText;

                attr = node.SelectSingleNode("child::issuer");
                if (null != attr) this.issuer = attr.InnerText;
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public override void SetModified(InsertDataChangeType type, bool cascade)
        {
            base.SetModified(type, cascade);
            base.Modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ImageInstance.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// A concrete instance of an image - represents an image file on disk.
    /// </summary>
    public class ImageInstance : MediaInstance
    {
        #region Constants
        private const int fileUrlLength = 1024;
        #endregion

        #region Fields
        private int lcid;
        private string fileUrl;
        private int? imageFormatId;
        private int imageSizeId;
        private int? fileSize;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal ImageInstance(SqlDataReader reader)
            : base(reader)
        {
            this.lcid = reader.GetInt32(reader.GetOrdinal("lcid"));
            this.fileUrl = reader.GetString(reader.GetOrdinal("fileUrl"));
            this.imageFormatId = reader.IsDBNull(reader.GetOrdinal("imageFormatId")) ? -1 : reader.GetInt32(reader.GetOrdinal("imageFormatId"));
            this.imageSizeId = reader.GetInt32(reader.GetOrdinal("imageSizeId"));
            this.fileSize = reader.IsDBNull(reader.GetOrdinal("fileSize")) ? -1 : reader.GetInt32(reader.GetOrdinal("fileSize"));
        }

        /// <summary>
        /// Paramerterless constructor required for SOAP
        /// </summary>
        public ImageInstance()
        {
        }

        /// <summary>
        /// Iniatialize a new instance of the ImageInstance class with id to be assigned by the system.
        /// </summary>
        /// <param name="isAcquirable"></param>
        /// <param name="isAdSupported"></param>
        /// <param name="isPreivew"></param>
        /// <param name="lcid"></param>
        /// <param name="fileUrl"></param>
        /// <param name="imageFormatId"></param>
        /// <param name="imageSizeId"></param>
        /// <param name="fileSize"></param>
        public ImageInstance(
                bool isAcquirable,
                bool isAdSupported,
                bool isPreivew,
                int lcid,
                string fileUrl,
                int imageFormatId,
                int imageSizeId,
                int? fileSize)
            : base(Guid.NewGuid(), isAcquirable, isAdSupported, isPreivew)
        {
            if (Locale.Get(lcid) == null)
                throw new ArgumentException(String.Format("Invalid lcid {0}.", lcid));
            if (ImageFormat.Get(imageFormatId) == null)
                throw new ArgumentException(String.Format("Invalid imageFormatId {0}.", imageFormatId));
            if (ImageSize.Get(imageSizeId) == null)
                throw new ArgumentException(String.Format("Invalid imageSizeId {0}.", imageSizeId));
            Validate.IsNotEmpty(fileUrl, "fileUrl", "fileUrl");
            Validate.IsNotLongerThan(fileUrl, fileUrlLength, "fileUrl", "fileUrl");

            this.lcid = lcid;
            this.fileUrl = fileUrl;
            this.imageFormatId = imageFormatId;
            this.imageSizeId = imageSizeId;
            this.fileSize = fileSize;

            this.Modified = InsertDataChangeType.Update;
        }

        /// <summary>
        /// Iniatialize a new instance of the ImageInstance class.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="isAcquirable"></param>
        /// <param name="isAdSupported"></param>
        /// <param name="isPreivew"></param>
        /// <param name="lcid"></param>
        /// <param name="fileUrl"></param>
        /// <param name="imageFormatId"></param>
        /// <param name="imageSizeId"></param>
        /// <param name="fileSize"></param>
        public ImageInstance(
                Guid id,
                bool isAcquirable,
                bool isAdSupported,
                bool isPreivew,
                int lcid,
                string fileUrl,
                int imageFormatId,
                int imageSizeId,
                int? fileSize)
            : base(id, isAcquirable, isAdSupported, isPreivew)
        {
            if (Locale.Get(lcid) == null)
                throw new ArgumentException(String.Format("Invalid lcid {0}.", lcid));
            if (ImageFormat.Get(imageFormatId) == null)
                throw new ArgumentException(String.Format("Invalid imageFormatId {0}.", imageFormatId));
            if (ImageSize.Get(imageSizeId) == null)
                throw new ArgumentException(String.Format("Invalid imageSizeId {0}.", imageSizeId));
            Validate.IsNotEmpty(fileUrl, "fileUrl", "fileUrl");
            Validate.IsNotLongerThan(fileUrl, fileUrlLength, "fileUrl", "fileUrl");

            this.lcid = lcid;
            this.fileUrl = fileUrl;
            this.imageFormatId = imageFormatId;
            this.imageSizeId = imageSizeId;
            this.fileSize = fileSize;

            this.Modified = InsertDataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the locale for which this image is specialized
        /// </summary>
        /// <remarks>
        /// If the image is local agnostic, then this attribute will have the invarient culture
        /// name is '' (empty string), id = 0x007F.
        /// </remarks>
        public int Lcid
        {
            get
            {
                return this.lcid;
            }

            set
            {
                if (Locale.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid Lcid {0}.", value));
                this.lcid = value;
            }
        }

        /// <summary>
        /// Gets or sets the url to the image file.
        /// </summary>
        public string FileUrl
        {
            get
            {
                return this.fileUrl;
            }
            set
            {
                Validate.IsNotEmpty(value, "FileUrl", "FileUrl");
                Validate.IsValidURL(value, fileUrlLength, "FileUrl", "FileUrl");
                this.fileUrl = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of the image format (identifies a unique ImageFormat instance)
        /// </summary>
        public int? ImageFormatId
        {
            get
            {
                return this.imageFormatId;
            }
            set
            {
                if (value != -1)
                {
                    if (ImageFormat.Get((int)value) == null)
                        throw new ArgumentException(string.Format("Invalid imageFormatId {0}.", value));
                    this.imageFormatId = value;
                }
                else
                {
                    this.imageFormatId = null;
                }
            }
        }

        /// <summary>
        /// Gets or sets the id of the image size for this image instance.
        /// </summary>
        public int ImageSizeId
        {
            get
            {
                return this.imageSizeId;
            }
            set
            {
                if (ImageSize.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid imageSizeId {0}.", value));
                this.imageSizeId = value;
            }
        }

        /// <summary>
        /// Gets or sets the size of the image file in bytes.
        /// </summary>
        public int? FileSize
        {
            get
            {
                return this.fileSize;
            }
            set
            {
                this.fileSize = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public override void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("ImageInstance");
                context.SerializeDatabaseOperation(this.Modified);

                //Serialize MediaInstance record
                base.Serialize(context);

                context.SerializeElement("imageMediaInstanceId", this.Id);
                context.SerializeElement("lcid", this.lcid);
                context.SerializeElement("fileUrl", this.fileUrl);
                context.SerializeElement("imageFormatId", this.imageFormatId);
                context.SerializeElement("imageSizeId", this.imageSizeId);
                context.SerializeElement("fileSize", this.fileSize);
                
                context.SerializeEndElement();
            }
            else
            {
                //Serialize MediaInstance record first
                base.Serialize(context);

                //ImageInstance
                if (this.Modified != InsertDataChangeType.None)
                {
                    context.SerializeStartElement("ImageInstance");
                    context.SerializeDatabaseOperation(this.Modified);
                    context.SerializeElement("imageMediaInstanceId", this.Id);
                    context.SerializeElement("lcid", this.lcid);
                    context.SerializeElement("fileUrl", this.fileUrl);
                    context.SerializeElement("imageFormatId", this.imageFormatId);
                    context.SerializeElement("imageSizeId", this.imageSizeId);
                    context.SerializeElement("fileSize", this.fileSize);
                    context.SerializeEndElement();
                }
            }            
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public override void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.Modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                XmlNode mediaInstanceNode = node.SelectSingleNode("child::MediaInstance");
                if (mediaInstanceNode != null)
                {
                    base.Deserialize(mediaInstanceNode);
                }

                attr = node.SelectSingleNode("child::imageMediaInstanceId");
                if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::lcid");
                if (null != attr) this.lcid = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::fileUrl");
                if (null != attr) this.fileUrl = attr.InnerText;

                attr = node.SelectSingleNode("child::imageFormatId");
                if (null != attr) this.imageFormatId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::imageSizeId");
                if (null != attr) this.imageSizeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::fileSize");
                if (null != attr) this.fileSize = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }
        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public override void SetModified(InsertDataChangeType type, bool cascade)
        {
            base.SetModified(type, cascade);
            this.Modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\LicenseTypeLegalTextLocale.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Data.SqlClient;
using System.Data;
using System.Xml;
using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the LicenseTypeLegalTextLocale data in the catalog, and aids in the creation of
    /// the LicenseTypeLegalTextLocale object.
    /// </summary>
    public class LicenseTypeLegalTextLocale : ICatalogData
    {
        # region Constants
        private const int textLength = 2000;
        # endregion

        # region Fields
        private int licenseTypeId;
        private int legaltextlcid;
        private string text;
        private string locale;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructor
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal LicenseTypeLegalTextLocale(SqlDataReader reader)
        {
            this.licenseTypeId = reader.GetInt32(reader.GetOrdinal("licenseTypeId"));
            this.legaltextlcid = reader.GetInt32(reader.GetOrdinal("legalLcid"));
            this.text = SqlHelper.GetNullableString(reader, "text");
            this.Locale = SqlHelper.GetNullableString(reader, "locale");

        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public LicenseTypeLegalTextLocale()
        {
        }
        #endregion

        # region Properties
        /// <summary>
        /// Gets/Sets the LicenseTypeID
        /// </summary>
        public int LicenseTypeId
        {
            get
            {
                return this.licenseTypeId;
            }
            set
            {
                licenseTypeId = value;
            }
        }
        /// <summary>
        /// Gets/Sets the Legaltextlcid
        /// </summary>
        public int Legaltextlcid
        {
            get
            {
                return this.legaltextlcid;
            }
            set
            {
                legaltextlcid = value;
            }
        }
        /// <summary>
        /// Gets/Sets the text
        /// </summary>
        public string Text
        {
            get
            {
                return this.text;
            }
            set
            {
                if (!String.IsNullOrEmpty(value))
                {
                    Validate.IsNotLongerThan(value, textLength, "Text", "Text");
                }
                text = value;
            }
        }
        /// <summary>
        /// Gets/Sets the Locale
        /// </summary>
        public string Locale
        {
            get
            {
                return this.locale;
            }
            set
            {
                this.locale = value;
            }

        }
        # endregion

        #region ICatalogData Members
        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public void Serialize(Serialization context)
        {
            context.SerializeStartElement("LicenseTypeLegalTextLocaleData");
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("LicenseTypeLegalTextLocale");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("licenseTypeId", this.licenseTypeId);
                context.SerializeElement("legalLcid", this.legaltextlcid);
                context.SerializeElement("text", this.text);
                context.SerializeElement("locale", this.locale);
                context.SerializeEndElement();
            }
            context.SerializeEndElement();         
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                node = node.SelectSingleNode("child::LicenseTypeLegalTextLocale");
                if (node == null)
                {
                    return;
                }

                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::licenseTypeId");
                if (null != attr) this.licenseTypeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::legalLcid");
                if (null != attr) this.legaltextlcid = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::text");
                if (null != attr) this.text = attr.InnerText;

                attr = node.SelectSingleNode("child::locale");
                if (null != attr) this.locale = attr.InnerText;
            }
        }


        #endregion

        # region Override Methods
        /// <summary>
        /// Overridden Implementation of ToString()
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return (this.locale);
        }
        # endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ImageFormat.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of ImageFormat data in the catalog.
    /// </summary>
    public class ImageFormat : Utils.IKeyed<Int32>
    {
        #region Fields
        private int id;
        private string name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,ImageFormat> ImageFormatCache = new Utils.KeyedCache<Int32,ImageFormat>(
                        new Utils.KeyedCache<Int32,Catalog.ImageFormat>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Default constructor required for SOAP.
        /// </summary>
        public ImageFormat()
        {
        }

        /// <summary>
        /// Initialize a new instance of the ImageFormat class.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        public ImageFormat(int id, string name)
        {
            this.id = id;
            this.name = name;
        }


        /// <summary>
        /// Initialize a new instance of the ImageFormat class given a sql data reader
        /// </summary>
        /// <param name="reader"></param>
        private ImageFormat(SqlDataReader reader)
        {
            id = reader.GetInt32(reader.GetOrdinal("imageFormatId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the ImageFormat Id property.
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
            set
            {
                //Left empty so it serialize correctly over SOAP.
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                Validate.IsNotEmpty(value, "Name", "Name");
                this.name = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get the ImageFormat for a given id.
        /// </summary>
        /// <param name="id">The id of the ImageFormat to retrieve</param>
        /// <returns>The ImageFormat of the given id.</returns>
        public static ImageFormat Get(int id)
        {
            return ImageFormatCache.Get(id);
        }

        /// <summary>
        /// Gets the list of ImageFormats in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<ImageFormat> Get()
        {
            return ImageFormatCache.Get();
        }

        /// <summary>
        /// Gets the list of ImageFormats from the db.
        /// </summary>
        /// <returns></returns>
        private static List<ImageFormat> GetData()
        {
            List<ImageFormat> imageFormats = new List<ImageFormat>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "ImageFormatGet"
                    ))
            {
                while( reader.Read() )
                {
                    imageFormats.Add( new ImageFormat( reader ));
                }
            }
            return imageFormats;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\LicenseClass.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of LicenseClass data in the catalog, 
    /// and aids in the creation of the LicenseClass object.
    /// </summary>
    public class LicenseClass : Utils.IKeyed<Int32>
    {
        #region Fields
        private int id;
        private string name;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.KeyedCache<Int32, LicenseClass> LicenseClassCache = new Utils.KeyedCache<Int32, LicenseClass>(
                        new Utils.KeyedCache<Int32, Catalog.LicenseClass>.CachedDataLoaderDelegate(GetData),
                        CacheRefreshPeriod);
        #endregion

        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public LicenseClass()
        {
        }

        /// <summary>
        /// Instantiates a Provider instance from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public LicenseClass(SqlDataReader reader)
        {
            this.id = reader.GetInt32(reader.GetOrdinal("licenseClassId"));
            this.name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the int that uniquely identifies this LicenseClass
        /// </summary>
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                if (value < 0)
                {
                    throw new ArgumentNullException("The id for the LicenseClass cannot be less than zero.");
                }
                id = value;
            }
        }
        /// <summary>
        /// Gets or sets the name assigned to this LicenseClass
        /// </summary>
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    throw new ArgumentNullException("The LicenseClass name cannot be null or empty.");
                }
                name = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a LicenseClass for the given id.
        /// </summary>
        /// <param name="id">The id of the LicenseClass to get</param>
        /// <returns>The LicenseClass for the given id.</returns>
        public static LicenseClass Get(int id)
        {
            return LicenseClassCache.Get(id);
        }

        /// <summary>
        /// Gets all LicenseClass in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<LicenseClass> Get()
        {
            return LicenseClassCache.Get();
        }

        /// <summary>
        /// Gets all licenseClass from the database.
        /// </summary>
        /// <returns></returns>
        public static List<LicenseClass> GetData()
        {
            List<LicenseClass> licensers = new List<LicenseClass>();

            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "LicenseClassGet"
                    ))
            {
                while (reader.Read())
                {
                    licensers.Add(new LicenseClass(reader));
                }
            }
            return licensers;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ImageSearch.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{


    /// <summary>
    /// Define image search response class.
    /// </summary>
    public class ImageSearchResponse : Response
    {
        #region Fields
        private Image resultImage=null;
        private string title = string.Empty;
        private Guid mediaId = Guid.Empty;
        private string description = string.Empty;
        private string url = string.Empty;
        #endregion

        #region Properties
        /// <summary>
        /// Discription of the image
        /// </summary>
        public string Description
        {
            get { return description; }
            set { description = value; }
        }
        /// <summary>
        /// URL of the image
        /// </summary>
        public string Url
        {
            get { return url; }
            set { url = value; }
        }
        /// <summary>
        /// Result Image
        /// </summary>
        public Image ResultImage
        {
            get { return resultImage; }
            set { resultImage = value; }
        }
        /// <summary>
        /// Titile of the image
        /// </summary>
        public string Title
        {
            get { return title; }
            set { title = value; }
        }
        /// <summary>
        /// ID of the image
        /// </summary>
        public Guid MediaId
        {
            get { return mediaId; }
            set { mediaId = value; }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public ImageSearchResponse()
        {
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="reader"></param>
        public ImageSearchResponse(SqlDataReader reader)
        {
            this.mediaId = reader.GetGuid(reader.GetOrdinal("imageMediaId"));
            this.title = reader.IsDBNull(reader.GetOrdinal("title")) ? "" : reader.GetString(reader.GetOrdinal("title"));
            this.description = reader.IsDBNull(reader.GetOrdinal("description")) ? "" : reader.GetString(reader.GetOrdinal("description"));
            this.url = reader.IsDBNull(reader.GetOrdinal("fileUrl")) ? "" : reader.GetString(reader.GetOrdinal("fileUrl"));
            //this.resultImage = Image.Get(this.mediaId);
        }
        #endregion
    }

    /// <summary>
    /// Define image search request class.
    /// </summary>
    public class ImageSearchRequest : Request
    {
        #region Fields
        private Guid? mediaId = Guid.Empty;
        private string title = string.Empty;
        private List<int> dimensions = new List<int>();
        private List<int> locale = new List<int>();
        #endregion

        #region Properties
        /// <summary>
        /// instead providing a range of width and height, we can also provide a list of 
        /// image size as a filter to get images
        /// </summary>
        public List<int> Dimensions
        {
            get 
            { 
                return dimensions; 
            }
            set 
            {
                if (value.Count > 50)
                    throw new ArgumentException("No more than 50 dimensions allowed in image search");
                dimensions = value; 
            }
        }

        /// <summary>
        /// The id of the image to search
        /// </summary>
        public Guid? MediaId
        {
            get
            {
                return this.mediaId;
            }
            set
            {
                this.mediaId = value;
            }
        }
        /// <summary>
        /// The title of the image to search
        /// </summary>
        public string Title
        {
            get
            {
                return this.title;
            }
            set
            {
                this.title = value;
            }
        }
        /// <summary>
        /// Local of the image to search 
        /// </summary>
        public List<int> Locale
        {
            get 
            { 
                return locale; 
            }
            set 
            {
                if (value.Count > 50)
                    throw new ArgumentException("No more than 50 lcid allowed in image search");
                locale = value; 
            }
        }
    
        #endregion
        
        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public ImageSearchRequest()
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Searches for images specified by the search request object.
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<ImageSearchResponse> responses = new List<ImageSearchResponse>();
            try
            {
                StringBuilder DimensionsSearchStringBuilder=new StringBuilder("");
                foreach (int i in this.dimensions)
                {
                    DimensionsSearchStringBuilder.Append(i);
                    DimensionsSearchStringBuilder.Append(@",");
                }
                if(DimensionsSearchStringBuilder.Length> 0)
                    DimensionsSearchStringBuilder.Remove(DimensionsSearchStringBuilder.Length - 1, 1);
                
                StringBuilder LocaleSearchStringBuilder = new StringBuilder("");
                foreach (int i in this.locale)
                {
                    LocaleSearchStringBuilder.Append(i);
                    LocaleSearchStringBuilder.Append(@",");
                }
                if (LocaleSearchStringBuilder.Length > 0)
                    LocaleSearchStringBuilder.Remove(LocaleSearchStringBuilder.Length - 1, 1);


                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "ImageSearch",
                        (this.MediaId == Guid.Empty) ? null : this.mediaId,
                        this.title,
                        DimensionsSearchStringBuilder.ToString(),
                        LocaleSearchStringBuilder.ToString(),
                        this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new ImageSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "ImageSearch");
                throw;
            }
            return responses.ToArray();
        } 
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ImageSize.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of ImageSize data in the catalog.
    /// </summary>
    public class ImageSize : Utils.IKeyed<Int32>
    {
        #region Fields
        private int id;
        private string name;
        private int width;
        private int height;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,ImageSize> ImageSizeCache = new Utils.KeyedCache<Int32,ImageSize>(
                        new Utils.KeyedCache<Int32,Catalog.ImageSize>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Default constructor required for SOAP.
        /// </summary>
        public ImageSize()
        {
        }

        /// <summary>
        /// Initialize a new instance of the ImageFormat class with id to be system assigned.
        /// </summary>
        /// <param name="width">Image width</param>
        /// <param name="height">Image height</param>
        public ImageSize(int width, int height)
        {
            this.id = -1;
            this.width = width;
            this.height = height;
        }

        /// <summary>
        /// Initialize a new instance of the ImageSize class.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="width"></param>
        /// <param name="height"></param>
        public ImageSize(int id, int width, int height)
        {
            this.id = id;
            this.width = width;
            this.height = height;
        }

        /// <summary>
        /// Initialize a new instance of the ImageSize class given a sql data reader
        /// </summary>
        /// <param name="reader"></param>
        private ImageSize(SqlDataReader reader)
        {
            id = reader.GetInt32(reader.GetOrdinal("imageSizeId"));
            name =  reader.IsDBNull( reader.GetOrdinal("name") ) ? String.Empty :  reader.GetString(reader.GetOrdinal("name"));
            width = reader.IsDBNull( reader.GetOrdinal("width") ) ? -1 : reader.GetInt32(reader.GetOrdinal("width"));
            height = reader.IsDBNull( reader.GetOrdinal("height") ) ? -1 : reader.GetInt32(reader.GetOrdinal("height"));
        }        
        #endregion

        #region Properties
        /// <summary>
        /// Gets the ImageSize Id property.
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
            set
            {
                //Left empty so it serialize correctly over SOAP.
            }
        }

        /// <summary>
        /// Gets the Name property.
        /// </summary>
        public String Name
        {
            get
            {
                return this.name;
            }
            set
            {
                this.name = value;
            }
        }

        /// <summary>
        /// Get this ImageSize width.
        /// </summary>
        public int Width
        {
            get
            {
                return this.width;
            }
            set
            {
                Validate.IsNotNull(value, "Width", "Width");
                this.width = value;
            }
        }

        /// <summary>
        /// Get this ImageSize height.
        /// </summary>
        public int Height
        {
            get
            {
                return this.height;
            }
            set
            {
                Validate.IsNotNull(value, "Height", "Height");
                this.height = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get the ImageSize for a given id.
        /// </summary>
        /// <param name="id">The id of the ImageSize to retrieve</param>
        /// <returns>The ImageSize of the given id.</returns>
        internal static ImageSize Get(int id)
        {
            return ImageSizeCache.Get(id);
        }

        /// <summary>
        /// Gets the list of ImageSizes in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<ImageSize> Get()
        {
            return ImageSizeCache.Get();
        }

        /// <summary>
        /// Gets the list of ImageSizes in the catalog.
        /// </summary>
        /// <returns></returns>
        private static List<ImageSize> GetData()
        {
            List<ImageSize> imageSizes = new List<ImageSize>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "ImageSizeGet"
                    ))
            {
                while( reader.Read() )
                {
                    imageSizes.Add( new ImageSize( reader ));
                }
            }
            return imageSizes;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Media.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the Media base class data that are common for a media in the catalog, which
    /// can be of type: video, game, music, image, or podcast.
    /// </summary>
    public abstract class Media : ICatalogData
    {
        #region Constants
        private const int displayOriginalReleaseDateLength = 50;
        #endregion

        #region Fields
        private Guid id;
        private int mediaTypeId;
        private string mediaTitle;
        private int metadataProviderId;
        private DateTime? originalReleaseDate;
        private string displayOriginalReleaseDate;
        private DateTime? visibilityDate;
        private int visibilityStatusId;
        private bool geoCheckPolicy;
        private InsertDataChangeType modified;

        //List of articles this media associates with
        private List<MediaArticle> articles = new List<MediaArticle>();

        //List of categories this media associates with
        private List<MediaCategory> categories = new List<MediaCategory>();

        //List of contributors this media associates with
        private List<MediaContributor> contributors = new List<MediaContributor>();

        //List of instances this media associates with
        //It needs to be protected so derive class can access.
        internal List<MediaInstance> instances = new List<MediaInstance>();

        //List of localized titles this media has
        private List<MediaLocale> locales = new List<MediaLocale>();

        //List of relationship this media has
        private List<MediaRelationship> relationships = new List<MediaRelationship>();

        //List of rating values this media associates with
        private List<MediaRating> ratingValues = new List<MediaRating>();

        //List of ratingDescriptor this media associates with
        private List<MediaRatingDescriptor> ratingDescriptors = new List<MediaRatingDescriptor>();
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <remarks>
        /// The order in which the datasets are process is tied to the order the datasets are returned in MediaGet sproc.
        /// </remarks>
        /// <param name="reader">SqlDataReader</param>
        protected Media(SqlDataReader reader)
        {
            //Initialize Media
            this.id = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.mediaTypeId = reader.GetInt32(reader.GetOrdinal("mediaTypeId"));
            this.metadataProviderId = reader.GetInt32(reader.GetOrdinal("metadataProviderId"));
            if (! reader.IsDBNull(reader.GetOrdinal("originalReleaseDate")))
                this.originalReleaseDate = reader.GetDateTime(reader.GetOrdinal("originalReleaseDate"));
            this.displayOriginalReleaseDate = reader.IsDBNull(reader.GetOrdinal("displayOriginalReleaseDate")) ?
                string.Empty : reader.GetString(reader.GetOrdinal("displayOriginalReleaseDate"));
            if (!reader.IsDBNull(reader.GetOrdinal("visibilityDate")))
                this.visibilityDate = reader.GetDateTime(reader.GetOrdinal("visibilityDate"));
            this.geoCheckPolicy = reader.GetByte(reader.GetOrdinal("geoCheckPolicy")) == 1 ? true : false;
            this.visibilityStatusId = reader.GetInt32(reader.GetOrdinal("visibilityStatusId"));
            this.mediaTitle = SqlHelper.GetNullableString(reader, "mediaTitle", "(None)");

            //Initialize articles
            reader.NextResult();
            while (reader.Read())
            {
                this.articles.Add(new MediaArticle(reader));
            }

            //Initialize categories
            reader.NextResult();
            while (reader.Read())
            {
                this.categories.Add(new MediaCategory(reader));
            }

            //Initialize contributors
            reader.NextResult();
            while (reader.Read())
            {
                this.contributors.Add(new MediaContributor(reader));
            }

            //Initialize locales
            reader.NextResult();
            int count = 0;
            if (reader.Read())
                count = reader.GetInt32(reader.GetOrdinal("mediaLocaleCount"));
            while (count > 0 && reader.NextResult())
            {
                if (reader.Read())
                    this.locales.Add(new MediaLocale(reader));
                count--;
            }

            //Initialize relationship
            reader.NextResult();
            while (reader.Read())
            {
                this.relationships.Add(new MediaRelationship(reader));
            }

            //Intialize ratingValues
            reader.NextResult();
            while (reader.Read())
            {
                this.ratingValues.Add(new MediaRating(reader));
            }

            //Intialize ratingDescriptors
            reader.NextResult();
            while (reader.Read())
            {
                this.ratingDescriptors.Add(new MediaRatingDescriptor(reader));
            }

            //Initialize videoInstances
            reader.NextResult();
            count = 0;
            if (reader.Read())
                count = reader.GetInt32(reader.GetOrdinal("videoInstanceCount"));
            while (count > 0)
            {
                reader.NextResult();
                if (reader.Read())
                    this.instances.Add(new VideoInstance(reader));
                count--;
            }

            //Initialize imageInstances
            reader.NextResult();
            while (reader.Read())
            {
                this.instances.Add(new ImageInstance(reader));
            }

            //Initialize GameContentInstances
            reader.NextResult();
            count = 0;
            if (reader.Read())
                count = reader.GetInt32(reader.GetOrdinal("gameContentInstanceCount"));
            while (count > 0)
            {
                reader.NextResult();
                if (reader.Read())
                    this.instances.Add(new GameContentInstance(reader));
                count--;
            }
        }

        /// <summary>
        /// Parameterless constructor requied for SOAP.
        /// </summary>
        public Media()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or set the id for the media.
        /// </summary>
        public Guid Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets the id identifying the media type (ie: Series, Episode, Game, Podcast, etc...)
        /// </summary>
        public int MediaTypeId
        {
            get
            {
                return this.mediaTypeId;
            }
            set
            {
                if (MediaType.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid MediaTypeId {0}.", value));
                this.mediaTypeId = value;
            }
        }

        /// <summary>
        /// Gets or sets the title of the media.
        /// </summary>
        public string MediaTitle
        {
            get
            {
                return this.mediaTitle;
            }
            set
            {
                this.mediaTitle = value;
            }
        }

        /// <summary>
        /// Gets or sets the id identifying the provider of the media information.
        /// </summary>
        public int MetadataProviderId
        {
            get
            {
                return this.metadataProviderId;
            }
            set
            {
                this.metadataProviderId = value;
            }
        }

        /// <summary>
        /// Gets or sets the DateTime in UTC when the media becomes visible to customers
        /// </summary>
        public DateTime? VisibilityDate
        {
            get
            {
                return this.visibilityDate;
            }
            set
            {
               Validate.ValidateDate(ref value);
               this.visibilityDate = value;
            }
        }

        /// <summary>
        /// Gets or sets the DateTime in UTC when the media was first released
        /// </summary>
        public DateTime? OriginalReleaseDate
        {
            get
            {
                return this.originalReleaseDate;
            }
            set
            {
               Validate.ValidateDate(ref value);
               this.originalReleaseDate = value;
            }
        }

        /// <summary>
        /// Gets or sets string dictating how the original release date will be displayed to users
        /// </summary>
        public string DisplayOriginalReleaseDate
        {
            get
            {
                return this.displayOriginalReleaseDate;
            }
            set
            {
                this.displayOriginalReleaseDate = value;
            }
        }

        /// <summary>
        /// Gets or sets string dictating how the original release date will be displayed to users
        /// </summary>
        public bool GeoCheckPolicy
        {
            get
            {
                return this.geoCheckPolicy;
            }
            set
            {
                this.geoCheckPolicy = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of the visibility status
        /// </summary>
        public int VisibilityStatusId
        {
            get
            {
                return this.visibilityStatusId;
            }
            set
            {
                if (VisibilityStatus.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalide visibility status id [{0}] specified.", value));
                this.visibilityStatusId = value;
            }
        }

        /// <summary>
        /// Gets or sets the list of MediaArticle objects that associate articles to this Media
        /// </summary>
        public MediaArticle[] Articles
        {
            get
            {
                return this.articles.ToArray();
            }
            set
            {
                this.articles.Clear();
                if (value != null)
                    this.articles.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the array of categories identifying the categories associated with this Media
        /// </summary>
        public MediaCategory[] Categories
        {
            get
            {
                return this.categories.ToArray();
            }
            set
            {
                this.categories.Clear();
                if (value != null)
                    this.categories.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the array of MediaContributor objects that associate contributors to this Media
        /// </summary>
        public MediaContributor[] Contributors
        {
            get
            {
                return this.contributors.ToArray();
            }
            set
            {
                this.contributors.Clear();
                if (value != null)
                    this.contributors.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the list of MediaInstance objects this media has.
        /// </summary>
        public MediaInstance[] Instances
        {
            get
            {
                return this.instances.ToArray();
            }
            set
            {
                this.instances.Clear();
                if (value != null)
                    this.instances.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the list of MediaLocale objects that associate localized text to this Media
        /// </summary>
        public MediaLocale[] Locales
        {
            get
            {
                return this.locales.ToArray();
            }
            set
            {
                this.locales.Clear();
                if (value != null)
                    this.locales.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the list of MediaRelationship objects that associates with this Media
        /// </summary>
        public MediaRelationship[] Relationships
        {
            get
            {
                return this.relationships.ToArray();
            }
            set
            {
                this.relationships.Clear();
                if (value != null)
                    this.relationships.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the array of ratingValues identifying the rating values associated with this Media
        /// </summary>
        public MediaRating[] RatingValues
        {
            get
            {
                return this.ratingValues.ToArray();
            }
            set
            {
                this.ratingValues.Clear();
                if (value != null)
                    this.ratingValues.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the array of ratingDescriptors identifying the rating descriptors associated with this Media
        /// </summary>
        public MediaRatingDescriptor[] RatingDescriptors
        {
            get
            {
                return this.ratingDescriptors.ToArray();
            }
            set
            {
                this.ratingDescriptors.Clear();
                if (value != null)
                    this.ratingDescriptors.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public virtual InsertDataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public virtual void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("MediaData");

                //Serialize Media object fields
                context.SerializeStartElement("Media");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("mediaId", this.id);
                context.SerializeElement("mediaTypeId", this.mediaTypeId);
                context.SerializeElement("mediaTitle", this.mediaTitle);
                context.SerializeElement("metadataProviderId", this.metadataProviderId);
                context.SerializeElement("originalReleaseDate", this.originalReleaseDate);
                context.SerializeElement("displayOriginalReleaseDate", this.displayOriginalReleaseDate);
                context.SerializeElement("visibilityDate", this.visibilityDate);
                context.SerializeElement("geoCheckPolicy", this.geoCheckPolicy);
                context.SerializeElement("visibilityStatusId", this.visibilityStatusId);

                //Serialize MediaArticle collection
                foreach (MediaArticle article in this.articles)
                {
                    article.MediaId = this.id;
                    article.Serialize(context);
                }

                //Serialize MediaCategory collection
                foreach (MediaCategory category in this.categories)
                {
                    category.MediaId = this.id;
                    category.Serialize(context);
                }

                //Serialize MediaContributor collection
                foreach (MediaContributor contributor in this.contributors)
                {
                    contributor.MediaId = this.id;
                    contributor.Serialize(context);
                }

                //Serialize MediaLocale collection
                foreach (MediaLocale locale in this.locales)
                {
                    locale.MediaId = this.id;
                    locale.Serialize(context);
                }

                //Serialize MediaRelationship collection
                foreach (MediaRelationship relationship in this.relationships)
                {
                    relationship.MediaId = this.id;
                    relationship.Serialize(context);
                }

                //Serialize MediaRating collection
                foreach (MediaRating rating in this.ratingValues)
                {
                    rating.MediaId = this.id;
                    rating.Serialize(context);
                }

                //Serialize MediaRatingDescriptor collection
                foreach (MediaRatingDescriptor ratingDescriptior in this.ratingDescriptors)
                {
                    ratingDescriptior.MediaId = this.id;
                    ratingDescriptior.Serialize(context);
                }

                //Serialize MediaInstance collection
                foreach (MediaInstance instance in this.instances)
                {
                    instance.MediaId = this.id;
                    instance.Serialize(context);
                }

                context.SerializeEndElement(); // End Media Tag
                context.SerializeEndElement(); // End MediaData Tag
            }
            else
            {
                context.SerializeStartElement("MediaData");

                if (this.modified != InsertDataChangeType.None)
                {
                    //Serialize Media object fields
                    context.SerializeStartElement("Media");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("mediaId", this.id);
                    context.SerializeElement("mediaTypeId", this.mediaTypeId);
                    context.SerializeElement("mediaTitle", this.mediaTitle);
                    context.SerializeElement("metadataProviderId", this.metadataProviderId);
                    context.SerializeElement("originalReleaseDate", this.originalReleaseDate);
                    context.SerializeElement("displayOriginalReleaseDate", this.displayOriginalReleaseDate);
                    context.SerializeElement("visibilityDate", this.visibilityDate);
                    context.SerializeElement("geoCheckPolicy", this.geoCheckPolicy);
                    context.SerializeElement("visibilityStatusId", this.visibilityStatusId);
                    context.SerializeEndElement();
                }

                //Serialize MediaArticle collection
                foreach (MediaArticle article in this.articles)
                {
                    article.MediaId = this.id;
                    article.Serialize(context);
                }

                //Serialize MediaCategory collection
                foreach (MediaCategory category in this.categories)
                {
                    category.MediaId = this.id;
                    category.Serialize(context);
                }

                //Serialize MediaContributor collection
                foreach (MediaContributor contributor in this.contributors)
                {
                    contributor.MediaId = this.id;
                    contributor.Serialize(context);
                }

                //Serialize MediaLocale collection
                foreach (MediaLocale locale in this.locales)
                {
                    locale.MediaId = this.id;
                    locale.Serialize(context);
                }

                //Serialize MediaRelationship collection
                foreach (MediaRelationship relationship in this.relationships)
                {
                    relationship.MediaId = this.id;
                    relationship.Serialize(context);
                }

                //Serialize MediaRating collection
                foreach (MediaRating rating in this.ratingValues)
                {
                    rating.MediaId = this.id;
                    rating.Serialize(context);
                }

                //Serialize MediaRatingDescriptor collection
                foreach (MediaRatingDescriptor ratingDescriptior in this.ratingDescriptors)
                {
                    ratingDescriptior.MediaId = this.id;
                    ratingDescriptior.Serialize(context);
                }

                //Serialize MediaInstance collection
                foreach (MediaInstance instance in this.instances)
                {
                    instance.MediaId = this.id;
                    instance.Serialize(context);
                }
                context.SerializeEndElement();
            }
        }



        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                node = node.SelectSingleNode("child::Media");

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::mediaTypeId");
                if (null != attr) this.mediaTypeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::mediaTitle");
                if (null != attr) this.mediaTitle = attr.InnerText;

                attr = node.SelectSingleNode("child::metadataProviderId");
                if (null != attr) this.metadataProviderId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::originalReleaseDate");
                if (null != attr) this.originalReleaseDate = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::displayOriginalReleaseDate");
                if (null != attr) this.displayOriginalReleaseDate = attr.InnerText;

                attr = node.SelectSingleNode("child::visibilityDate");
                if (null != attr) this.visibilityDate = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::visibilityStatusId");
                if (null != attr) this.visibilityStatusId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::geoCheckPolicy");
                if (null != attr) this.geoCheckPolicy = Serialization.DeserializeBoolElement(attr.InnerText);

                XmlNodeList mediaArticleNodes = node.SelectNodes("child::MediaArticle");
                foreach (XmlNode mediaArticleNode in mediaArticleNodes)
                {
                    MediaArticle article = new MediaArticle();
                    article.Deserialize(mediaArticleNode);
                    this.articles.Add(article);
                }

                XmlNodeList mediaCategoryNodes = node.SelectNodes("child::MediaCategory");
                foreach (XmlNode mediaCategoryNode in mediaCategoryNodes)
                {
                    MediaCategory category = new MediaCategory();
                    category.Deserialize(mediaCategoryNode);
                    this.categories.Add(category);
                }

                XmlNodeList mediaContributorNodes = node.SelectNodes("child::MediaContributor");
                foreach (XmlNode mediaContributorNode in mediaContributorNodes)
                {
                    MediaContributor contributor = new MediaContributor();
                    contributor.Deserialize(mediaContributorNode);
                    this.contributors.Add(contributor);
                }
                
                XmlNodeList mediaLocaleNodes = node.SelectNodes("child::MediaLocale");
                foreach (XmlNode mediaLocaleNode in mediaLocaleNodes)
                {
                    MediaLocale locale = new MediaLocale();
                    locale.Deserialize(mediaLocaleNode);
                    this.locales.Add(locale);
                }

                XmlNodeList mediaRelationshipNodes = node.SelectNodes("child::MediaRelationship");
                foreach (XmlNode mediaRelationshipNode in mediaRelationshipNodes)
                {
                    MediaRelationship relation = new MediaRelationship();
                    relation.Deserialize(mediaRelationshipNode);
                    this.relationships.Add(relation);
                }

                XmlNodeList mediaRatingNodes = node.SelectNodes("child::MediaRating");
                foreach (XmlNode mediaRatingNode in mediaRatingNodes)
                {
                    MediaRating rating = new MediaRating();
                    rating.Deserialize(mediaRatingNode);
                    this.ratingValues.Add(rating);
                }

                XmlNodeList mediaRatingDescriptorNodes = node.SelectNodes("child::MediaRatingDescriptor");
                foreach (XmlNode mediaRatingDescriptorNode in mediaRatingDescriptorNodes)
                {
                    MediaRatingDescriptor descriptor = new MediaRatingDescriptor();
                    descriptor.Deserialize(mediaRatingDescriptorNode);
                    this.ratingDescriptors.Add(descriptor);
                }

                XmlNodeList mediaInstanceNodes = node.SelectNodes("child::ImageInstance");
                foreach (XmlNode mediaInstanceNode in mediaInstanceNodes)
                {
                    ImageInstance instance = new ImageInstance();
                    instance.Deserialize(mediaInstanceNode);
                    this.instances.Add(instance);
                }

                XmlNodeList videoInstanceNodes = node.SelectNodes("child::VideoInstance");
                foreach (XmlNode videoInstanceNode in videoInstanceNodes)
                {
                    VideoInstance instance = new VideoInstance();
                    instance.Deserialize(videoInstanceNode);
                    this.instances.Add(instance);
                }

                XmlNodeList gameContentInstanceNodes = node.SelectNodes("child::GameContentInstance");
                foreach (XmlNode gameContentInstanceNode in gameContentInstanceNodes)
                {
                    GameContentInstance instance = new GameContentInstance();
                    instance.Deserialize(gameContentInstanceNode);
                    this.instances.Add(instance);
                }
            }
        }


        /// <summary>
        /// Sets this object's modified flag, and whether to cascade down to any
        /// children this object has.
        /// </summary>
        /// <param name="type">Indicate the type of data change made</param>
        /// <param name="cascade">Indicate whether to cascade change to all objects contained by this object.</param>
        public virtual void SetModified(InsertDataChangeType type, bool cascade)
        {
            this.modified = type;
            if (cascade)
            {
                //Set articles
                foreach (MediaArticle article in articles)
                    article.SetModified((DataChangeType)type, cascade);

                //Set categories
                foreach (MediaCategory category in categories)
                    category.SetModified((DataChangeType)type, cascade);

                //Set contributors
                foreach (MediaContributor contributor in contributors)
                    contributor.SetModified((DataChangeType)type, cascade);

                //Set locales
                foreach (MediaLocale locale in locales)
                    locale.SetModified((DataChangeType)type, cascade);

                //Set relationships
                foreach (MediaRelationship relationship in relationships)
                    relationship.SetModified((DataChangeType)type, cascade);

                //Set ratingValues
                foreach (MediaRating ratingValue in ratingValues)
                    ratingValue.SetModified((DataChangeType)type, cascade);

                //Set ratingDescriptors
                foreach (MediaRatingDescriptor ratingDescriptor in ratingDescriptors)
                    ratingDescriptor.SetModified((DataChangeType)type, cascade);

                //Set instances
                foreach (MediaInstance instance in instances)
                    instance.SetModified(type, cascade);
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Locale.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of Locale data in the catalog.
    /// </summary>
    public class Locale : Utils.IKeyed<Int32>
    {
        #region Fields
        private int     lcid;
        private string  locale;
        private int     defaultLcid;
        private string  countryCode;
        private string  collation;
        private string  internalName;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,Locale> LocaleCache = new Utils.KeyedCache<Int32,Locale>(
                        new Utils.KeyedCache<Int32,Catalog.Locale>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Empty constructor to make the Locale object serializable over SOAP.
        /// </summary>
        public Locale()
        {
        }
       
        /// <summary>
        /// Initializes a new instance of the Locale object.
        /// </summary>
        /// <param name="lcid"></param>
        /// <param name="locale"></param>
        /// <param name="defaultLcid"></param>
        /// <param name="countryCode"></param>
        /// <param name="collation"></param>
        /// <param name="internalName">The name by which this locale is referred to within EMS (i.e. not how it is represented on say, the console)</param>
        public Locale(int lcid, string locale, int defaultLcid, string countryCode, string collation, string internalName )
        {
            this.lcid           = lcid;
            this.locale         = locale;
            this.defaultLcid    = defaultLcid;
            this.countryCode    = countryCode;
            this.collation      = collation;
            this.internalName   = internalName;
        }

        /// <summary>
        /// Contructor taking a sql db reader.
        /// </summary>
        public Locale( SqlDataReader reader )
        {
            lcid            = reader.GetInt32(reader.GetOrdinal("lcid"));
            locale          = reader.GetString(reader.GetOrdinal("locale"));
            defaultLcid     = reader.GetInt32(reader.GetOrdinal("defaultLcid"));
            countryCode     = reader.GetString(reader.GetOrdinal("countryCode"));
            collation       = reader.GetString(reader.GetOrdinal("collation"));
            internalName    = reader.GetString(reader.GetOrdinal("internalName"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// The key for a locale (ehich is the same as LCID.
        /// </summary>
        public int Id
        {
            get
            {
                return this.lcid;
            }
        }
        
        /// <summary>
        /// Gets this Locale lcid.
        /// </summary>
        public int LCID
        {
            get
            {
                return this.lcid;
            }
            set
            {
                //Left empty
            }
        }

        /// <summary>
        /// Gets this Locale string representation.
        /// </summary>
        public String LocaleCode
        {
            get
            {
                return this.locale;
            }
            set
            {
                this.locale = value;
            }
        }

        /// <summary>
        /// Gets or sets this Locale defaultLcid.
        /// </summary>
        public int DefaultLCID
        {
            get
            {
                return this.defaultLcid;
            }
            set
            {
                this.defaultLcid = value;
            }
        }

        /// <summary>
        /// Gets or sets this Locale country code.
        /// </summary>
        public string CountryCode
        {
            get
            {
                return this.countryCode;
            }
            set
            {
                this.countryCode = value;
            }
        }

        /// <summary>
        /// Gets or sets this Locale collation value.
        /// </summary>
        public string Collation
        {
            get
            {
                return this.collation;
            }
            set
            {
                this.collation = value;
            }
        }

        /// <summary>
        /// Gets or sets this Locales internal name.
        /// </summary>
        public string InternalName
        {
            get
            {
                return this.internalName;
            }
            set
            {
                this.internalName = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a Locale given a lcid.
        /// </summary>
        /// <param name="lcid">The LCID of the Locale to retrieve</param>
        /// <returns>The Locale for the specified LCID</returns>
        internal static Locale Get(int lcid)
        {
            return LocaleCache.Get(lcid);
        }

        /// <summary>
        /// Gets all lcoales in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<Locale> Get()
        {
            return LocaleCache.Get();
        }

        /// <summary>
        /// Gets locale given a locale code.
        /// </summary>
        /// <returns></returns>
        public static Locale Get(String localeCode)
        {
            if ( String.IsNullOrEmpty( localeCode))
            {
                return null;
            }
            
            List<Locale> list = LocaleCache.Get();
            foreach( Locale locale in list )
            {
                if ( locale.LocaleCode.ToLower() == localeCode.ToLower() )
                {
                    return locale;
                }
            }
            return null;
        }        

        /// <summary>
        /// Gets all lcoales in the catalog.
        /// </summary>
        /// <returns></returns>
        private static List<Locale> GetData()
        {
            List<Locale> locales = new List<Locale>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "LocaleGet"
                    ))
            {
                while( reader.Read() )
                {
                    locales.Add( new Locale( reader ));
                }
            }
            return locales;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaChild.cs ===
using System;
using System.Data.SqlClient;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the MediaChild data, and creation of the MediaChild class.
    /// </summary>
    public class MediaChild
    {
        #region Fields
        private Guid mediaId;
        private string mediaTitle;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal MediaChild(SqlDataReader reader)
        {
            this.mediaId = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.mediaTitle = reader.GetString(reader.GetOrdinal("mediaTitle"));
            if (reader.IsDBNull(reader.GetOrdinal("seasonNumber")) == false)
                this.mediaTitle = this.mediaTitle + string.Format(", Season {0}", reader.GetInt32(reader.GetOrdinal("seasonNumber")));
            if (reader.IsDBNull(reader.GetOrdinal("episodeNumber")) == false)
                this.mediaTitle = this.mediaTitle + string.Format(", Episode {0}", reader.GetInt32(reader.GetOrdinal("episodeNumber")));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public MediaChild()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this object.
        /// </summary>
        public Guid MediaId
        {
            get { return this.mediaId; }
            set { this.mediaId = value; }
        }

        /// <summary>
        /// Gets or sets the id of the rating value this media is associated.
        /// </summary>
        public string MediaTitle
        {
            get
            {
                return this.mediaTitle;
            }
            set
            {
                this.mediaTitle = value;
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaContributor.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the MediaContributor data, and creation of the MediaContributor class.
    /// </summary>
    public class MediaContributor : ICatalogData
    {
        #region Constants
        private const int characterLength = 50;
        #endregion

        #region Fields
        private Guid mediaId;
        private Guid contributorId;
        private string contributorName;
        private int roleId;
        private string character;
        private int sortOrder;
        private bool isPrimary;
        private Guid? contributorAliasId;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Contstructors
        /// <summary>
        /// Constructor that takes a SQLDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal MediaContributor(SqlDataReader reader)
        {
            this.contributorId = reader.GetGuid(reader.GetOrdinal("contributorId"));
            this.roleId = reader.GetInt32(reader.GetOrdinal("roleId"));
            this.character = reader.GetString(reader.GetOrdinal("character"));
            this.sortOrder = reader.GetInt32(reader.GetOrdinal("sortOrder"));
            this.isPrimary = (reader.GetByte(reader.GetOrdinal("isPrimary")) == 1);
            if (!reader.IsDBNull(reader.GetOrdinal("contributorAliasId")))
                this.contributorAliasId = reader.GetGuid(reader.GetOrdinal("contributorAliasId"));
            this.contributorName = SqlHelper.GetNullableString(reader, "contributorName", "(None)");
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public MediaContributor()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the MediaContributor class.
        /// </summary>
        /// <param name="contributorId">The id for this contributor</param>
        /// <param name="roleId">The id for the role this contributor is played</param>
        /// <param name="character">The character this contributor is played</param>
        /// <param name="sortOrder">Order of sorting when display this contributor</param>
        /// <param name="isPrimary">Indicate whether this a primary contributor</param>
        /// <param name="contributorAliasId">The id for the alias this contributor is known</param>
        public MediaContributor(
                        Guid contributorId,
                        int roleId,
                        string character,
                        int sortOrder,
                        bool isPrimary,
                        Guid? contributorAliasId)
        {
            Validate.IsNotNull(character, "character", "Character");
            Validate.IsNotLongerThan(character, characterLength, "character", "Character");
            if (Contributor.Get(contributorId) == null)
                throw new ArgumentException(String.Format("Invalid contributorId {0}.", contributorId));
            if (Role.Get(roleId) == null)
                throw new ArgumentException(String.Format("Invalid roleId {0}.", roleId));

            this.contributorId = contributorId;
            this.roleId = roleId;
            this.character = character;
            this.sortOrder = sortOrder;
            this.isPrimary = isPrimary;
            this.contributorAliasId = contributorAliasId;

            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this object.
        /// </summary>
        internal Guid MediaId
        {
            set { this.mediaId = value; }
        }
        
        /// <summary>
        /// Gets or sets the id for the contributor.
        /// </summary>
        public Guid ContributorId
        {
            get
            {
                return this.contributorId;
            }
            set
            {
                if (this.contributorId != value)
                {
                    if (Contributor.Get(value) == null)
                        throw new ArgumentException(String.Format("Invalid ContributorId {0}.", value));
                    this.contributorId = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets the name of the contributor.
        /// </summary>
        public string ContributorName
        {
            get
            {
                return this.contributorName;
            }
            set
            {
                this.contributorName = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of the role this contributor is played.
        /// </summary>
        public int RoleId
        {
            get
            {
                return this.roleId;
            }
            set
            {
                if (Role.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid RoleId {0}.", value));
                this.roleId = value;
            }
        }
        /// <summary>
        /// Gets or sets the character this contributor is played.
        /// </summary>
        public string Character
        {
            get
            {
                return this.character;
            }
            set
            {
                Validate.IsNotNull(value, "character", "Character");
                Validate.IsNotLongerThan(value, characterLength, "Character", "Character");
                this.character = value;
            }
        }
        /// <summary>
        /// Gets or sets the sort order of the contributor.
        /// </summary>
        public int SortOrder
        {
            get
            {
                return this.sortOrder;
            }
            set
            {
                this.sortOrder = value;
            }
        }
        /// <summary>
        /// Gets or sets whether this is one of the primary contributors of the media
        /// </summary>
        public bool IsPrimary
        {
            get
            {
                return this.isPrimary;
            }
            set
            {
                this.isPrimary = value;
            }
        }
        /// <summary>
        /// Gets or sets the alias id for this contributor.
        /// </summary>
        public Guid? ContributorAliasId
        {
            get
            {
                return this.contributorAliasId;
            }
            set
            {
                this.contributorAliasId = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("MediaContributor");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("mediaId", this.mediaId);
                context.SerializeElement("contributorId", this.contributorId);
                context.SerializeElement("contributorName", this.contributorName);
                context.SerializeElement("roleId", this.roleId);
                context.SerializeElement("character", this.character);
                context.SerializeElement("sortOrder", this.sortOrder);
                context.SerializeElement("isPrimary", this.isPrimary);
                context.SerializeElement("contributorAliasId", this.contributorAliasId);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::contributorId");
                if (null != attr) this.contributorId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::contributorName");
                if (null != attr) this.contributorName = attr.InnerText;

                attr = node.SelectSingleNode("child::roleId");
                if (null != attr) this.roleId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::character");
                if (null != attr) this.character = attr.InnerText;

                attr = node.SelectSingleNode("child::sortOrder");
                if (null != attr) this.sortOrder = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::isPrimary");
                if (null != attr) this.isPrimary = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::contributorAliasId");
                if (null != attr) this.contributorAliasId = Serialization.DeserializeGuidElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaInstance.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the MediaInstance data, and creation of the MediaInstance base class.
    /// </summary>
    public abstract class MediaInstance : ICatalogData
    {
        #region Fields
        private Guid mediaId;
        private Guid id;
        private bool isAcquirable;
        private bool isAdSupported;
        private bool isPreview;
        private PreviewMediaInstance preview = null;
        private InsertDataChangeType modified = InsertDataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        protected MediaInstance(SqlDataReader reader)
        {
            this.mediaId = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.id = reader.GetGuid(reader.GetOrdinal("mediaInstanceId"));
            this.isAcquirable = (reader.GetByte(reader.GetOrdinal("isAcquirable")) == 1);
            this.isAdSupported = (reader.GetByte(reader.GetOrdinal("isAdSupported")) == 1);
            this.isPreview = (reader.GetByte(reader.GetOrdinal("isPreview")) == 1);

            if (this.isPreview)
            {
                this.preview = new PreviewMediaInstance(reader);
            }
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        protected MediaInstance()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the MediaInstance class.
        /// </summary>
        /// <param name="id">Media instance id</param>
        /// <param name="isAqcuirable">Indicate whether this media instance is acquirable</param>
        /// <param name="isAdSupported">Indicate whether this media instance is ad supported</param>
        /// <param name="isPreview">Indicate whether this is a preview instance</param>
        protected MediaInstance(Guid id,
                bool isAqcuirable,
                bool isAdSupported,
                bool isPreview)
        {
            this.id = id;
            this.isAcquirable = isAqcuirable;
            this.isAdSupported = isAdSupported;
            this.isPreview = isPreview;

            this.modified = InsertDataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this media instance.
        /// </summary>
        internal Guid MediaId
        {
            get
            {
                return this.mediaId;
            }
            set
            {
                this.mediaId = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of this media instance.
        /// </summary>
        public Guid Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets whether this media instance is acquirable.
        /// </summary>
        public bool IsAcquirable
        {
            get
            {
                return this.isAcquirable;
            }
            set
            {
                if (this.isAcquirable != value)
                {
                    this.isAcquirable = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets whether this media instance is ad supported.
        /// </summary>
        public bool IsAdSupported
        {
            get
            {
                return this.isAdSupported;
            }
            set
            {
                if (this.isAdSupported != value)
                {
                    this.isAdSupported = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets whether this media instance is a preview.
        /// </summary>
        public bool IsPreview
        {
            get
            {
                return this.isPreview;
            }
            set
            {
                if (this.isPreview != value)
                {
                    this.isPreview = value;
                }
            }
        }

        /// <summary>
        /// Gets or sets preview data for this media instance.
        /// </summary>
        public PreviewMediaInstance Preview
        {
            get
            {
                return this.preview;
            }
            set
            {
                this.preview = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public InsertDataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public virtual void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("MediaInstance");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("mediaId", this.mediaId);
                context.SerializeElement("mediaInstanceId", this.id);
                context.SerializeElement("isAcquirable", this.isAcquirable);
                context.SerializeElement("isAdSupported", this.isAdSupported);
                context.SerializeElement("isPreview", this.isPreview);

                //Serialize previewMediaInstance
                if (this.isPreview)
                {
                    this.preview.Id = this.id;
                    this.preview.Serialize(context);
                }

                context.SerializeEndElement();

            }
            else
            {
                if (this.modified != InsertDataChangeType.None)
                {
                    context.SerializeStartElement("MediaInstance");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("mediaId", this.mediaId);
                    context.SerializeElement("mediaInstanceId", this.id);
                    context.SerializeElement("isAcquirable", this.isAcquirable);
                    context.SerializeElement("isAdSupported", this.isAdSupported);
                    context.SerializeElement("isPreview", this.isPreview);
                    context.SerializeEndElement();

                    //Serialize previewMediaInstance
                    if (this.isPreview)
                    {
                        this.preview.Id = this.id;
                        this.preview.Serialize(context);
                    }
                }
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::mediaInstanceId");
                if (null != attr) this.id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::isAcquirable");
                if (null != attr) this.isAcquirable = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::isAdSupported");
                if (null != attr) this.isAdSupported = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::isPreview");
                if (null != attr) this.isPreview = Serialization.DeserializeBoolElement(attr.InnerText);

                XmlNode previewNode = node.SelectSingleNode("child::PreviewMediaInstance");
                if (this.isPreview && previewNode != null)
                {
                    this.preview = new PreviewMediaInstance();
                    this.preview.Deserialize(previewNode);
                }
            }
        }


        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public virtual void SetModified(InsertDataChangeType type, bool cascade)
        {
            this.modified = type;
            if (cascade && this.preview != null)
            {
                this.preview.SetModified((InsertDataChangeType)type, cascade);
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaArticle.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the MediaArticle data, and creation of the MediaArticle class.
    /// </summary>
    public class MediaArticle : ICatalogData
    {
        #region Fields
        private Guid mediaId;
        private Guid articleId;
        private int sortOrder;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SQLDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal MediaArticle(SqlDataReader reader)
        {
            this.articleId = reader.GetGuid(reader.GetOrdinal("articleId"));
            this.sortOrder = reader.GetInt32(reader.GetOrdinal("sortOrder"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public MediaArticle()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the MediaArticle class.
        /// </summary>
        /// <param name="articleId">The id of the article</param>
        /// <param name="sortOrder">The sort order used for the article</param>
        public MediaArticle(Guid articleId, int sortOrder)
        {
            if (Article.Get(articleId) == null)
                throw new ArgumentException(String.Format("Invalid articleId {0}", articleId));
            this.articleId = articleId;
            this.sortOrder = sortOrder;
            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this object.
        /// </summary>
        internal Guid MediaId
        {
            set { this.mediaId = value; }
        }

        /// <summary>
        /// Gets or sets the article id this media is associated with.
        /// </summary>
        public Guid ArticleId
        {
            get
            {
                return this.articleId;
            }
            set
            {
                if (Article.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid ArticleId {0}", articleId));
                this.articleId = value;
            }
        }

        /// <summary>
        /// Gets or sets the sort order of this article.
        /// </summary>
        public int SortOrder
        {
            get
            {
                return this.sortOrder;
            }
            set
            {
                this.sortOrder = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("MediaArticle");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("mediaId", this.mediaId);
                context.SerializeElement("articleId", this.articleId);
                context.SerializeElement("sortOrder", this.sortOrder);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::articleId");
                if (null != attr) this.articleId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::sortOrder");
                if (null != attr) this.sortOrder = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaLocale.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the MediaLocale data, and creation of the MediaLocale class.
    /// </summary>
    public class MediaLocale : ICatalogData
    {
        #region Constants
        private const int titleLength = 255;
        private const int titleSortLength = 255;
        private const int reducedTitleLength = 50;
        private const int descriptionLength = 4000;
        private const int reducedDescriptionLength = 500;
        #endregion

        #region Fields
        private Guid mediaId;
        private int lcid;
        private string title;
        private string titleSort;
        private string reducedTitle;
        private string description;
        private string reducedDescription;
        private string copyright;
        private List<MediaLocaleMap> mappedLcids = new List<MediaLocaleMap>();
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal MediaLocale(SqlDataReader reader)
        {
            this.lcid = reader.GetInt32(reader.GetOrdinal("lcid"));
            this.title = reader.IsDBNull(reader.GetOrdinal("title")) ? string.Empty : reader.GetString(reader.GetOrdinal("title"));
            this.titleSort = reader.IsDBNull(reader.GetOrdinal("titleSort")) ? string.Empty : reader.GetString(reader.GetOrdinal("titleSort"));
            this.reducedTitle = reader.IsDBNull(reader.GetOrdinal("reducedTitle"))? string.Empty : reader.GetString(reader.GetOrdinal("reducedTitle"));
            this.description = reader.IsDBNull(reader.GetOrdinal("description")) ? string.Empty : reader.GetString(reader.GetOrdinal("description"));
            this.reducedDescription = reader.IsDBNull(reader.GetOrdinal("reducedDescription")) ? string.Empty : reader.GetString(reader.GetOrdinal("reducedDescription"));
            this.copyright = reader.IsDBNull(reader.GetOrdinal("copyright")) ? String.Empty : reader.GetString( reader.GetOrdinal("copyright"));

            reader.NextResult();
            while (reader.Read())
            {
                mappedLcids.Add(new MediaLocaleMap(reader));
            }
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public MediaLocale()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this object.
        /// </summary>
        internal Guid MediaId
        {
            set { this.mediaId = value; }
        }

        /// <summary>
        /// Gets or sets the lcid identifying the locale of the title and description for the media.
        /// </summary>
        public int Lcid
        {
            get
            { 
                return this.lcid; 
            }
            set 
            {
                if (Locale.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid Lcid {0}.", value));
                this.lcid = value;
            }
        }

        /// <summary>
        /// Gets or sets the array of lcids that map to locale of this media.
        /// </summary>
        public MediaLocaleMap[] MappedLcids
        {
            get
            {
                return this.mappedLcids.ToArray();
            }
            set
            {
                this.mappedLcids.Clear();
                if (value != null && value.Length > 0)
                    this.mappedLcids.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the title of the media in the language identified by Lcid.
        /// </summary>
        public string Title
        {
            get
            {
                return this.title; 
            }
            set 
            {
                if (String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, titleLength, "Title", "Title");
                this.title = value;
            }
        }

        /// <summary>
        /// Gets or sets the title of the media that should be used when sorting.
        /// </summary>
        public string TitleSort
        {
            get
            { 
                return this.titleSort;
            }
            set
            {
                if (String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, titleSortLength, "TitleSort", "TitleSort");
                this.titleSort = value;
            }
        }

        /// <summary>
        /// Gets or sets shortened title for the media used for reduced sized displays.
        /// </summary>
        public string ReducedTitle
        {
            get 
            { 
                return this.reducedTitle; 
            }
            set
            {
                if (String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, reducedTitleLength, "ReducedTitle", "ReducedTitle");
                this.reducedTitle = value;
            }
        }

        /// <summary>
        /// Gets or sets the description of the media.
        /// </summary>
        public string Description
        {
            get
            { 
                return this.description; 
            }
            set
            {
                if (String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, descriptionLength, "Description", "Description");
                this.description = value;
            }
        }

        /// <summary>
        /// Gets or sets shortened description for the media used for reduced sized displays.
        /// </summary>
        public string ReducedDescription
        {
            get
            {
                return this.reducedDescription;
            }
            set
            {
                if (String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, reducedDescriptionLength, "ReducedDescription", "ReducedDescription");
                this.reducedDescription = value;
            }
        }

        /// <summary>
        /// Gets or sets the copyright.
        /// </summary>
        public string Copyright
        {
            get
            {
                return this.copyright;
            }
            set
            {
                this.copyright = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public virtual void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                //MediaLocale fields
                context.SerializeStartElement("MediaLocale");

                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("mediaId", this.mediaId);
                context.SerializeElement("lcid", this.lcid);
                context.SerializeElement("title", this.title);
                context.SerializeElement("titleSort", this.titleSort);
                context.SerializeElement("reducedTitle", this.reducedTitle);
                context.SerializeElement("description", this.description);
                context.SerializeElement("reducedDescription", this.reducedDescription);
                context.SerializeElement("copyright", this.copyright);
                
                //MediaLocaleMap
                foreach (MediaLocaleMap lcidMap in this.mappedLcids)
                {
                    lcidMap.MediaId = this.mediaId;
                    lcidMap.LcidMap = this.lcid;
                    lcidMap.Serialize(context);
                }

                context.SerializeEndElement();
            }
            else
            {
                if (this.modified == DataChangeType.Add || this.modified == DataChangeType.Delete)
                {
                    this.SetModified(this.modified, true);
                }

                if (this.modified != DataChangeType.None)
                {
                    //MediaLocale fields
                    context.SerializeStartElement("MediaLocale");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("mediaId", this.mediaId);
                    context.SerializeElement("lcid", this.lcid);
                    context.SerializeElement("title", this.title);
                    context.SerializeElement("titleSort", this.titleSort);
                    context.SerializeElement("reducedTitle", this.reducedTitle);
                    context.SerializeElement("description", this.description);
                    context.SerializeElement("reducedDescription", this.reducedDescription);
                    context.SerializeElement("copyright", this.copyright);
                    context.SerializeEndElement();

                    //MediaLocaleMap
                    foreach (MediaLocaleMap lcidMap in this.mappedLcids)
                    {
                        lcidMap.MediaId = this.mediaId;
                        lcidMap.LcidMap = this.lcid;
                        lcidMap.Serialize(context);
                    }
                }
            }            
        }



        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::lcid");
                if (null != attr) this.lcid = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::title");
                if (null != attr) this.title = attr.InnerText;

                attr = node.SelectSingleNode("child::titleSort");
                if (null != attr) this.titleSort = attr.InnerText;

                attr = node.SelectSingleNode("child::reducedTitle");
                if (null != attr) this.reducedTitle = attr.InnerText;

                attr = node.SelectSingleNode("child::description");
                if (null != attr) this.description = attr.InnerText;

                attr = node.SelectSingleNode("child::reducedDescription");
                if (null != attr) this.reducedDescription = attr.InnerText;

                attr = node.SelectSingleNode("child::copyright");
                if (null != attr) this.copyright = attr.InnerText;

                //MediaLocaleMap
                XmlNodeList mediaLocalMaps = node.SelectNodes("child::MediaLocaleMap");                
                foreach (XmlNode lcidMap in mediaLocalMaps)
                {
                    MediaLocaleMap map = new MediaLocaleMap();
                    map.Deserialize(lcidMap);
                    this.mappedLcids.Add(map);
                }
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public virtual void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
            if (cascade)
            {
                foreach (MediaLocaleMap mlm in mappedLcids)
                {
                    mlm.SetModified(type, cascade);
                }
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaCategory.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the MediaCategory data, and creation of the MediaCategory class.
    /// </summary>
    public class MediaCategory : ICatalogData
    {
        #region Fields
        private Guid mediaId;
        private int categoryId;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal MediaCategory(SqlDataReader reader)
        {
            this.categoryId = reader.GetInt32(reader.GetOrdinal("categoryId"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public MediaCategory()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the MediaCategory class.
        /// </summary>
        /// <param name="categoryId">The id of the category</param>
        public MediaCategory(int categoryId)
        {
            if (Category.Get(categoryId) == null)
                throw new ArgumentException(string.Format("Invalid categoryId value {0}.",categoryId)); 
            this.categoryId = categoryId;
            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this object.
        /// </summary>
        internal Guid MediaId
        {
            set { this.mediaId = value; }
        }
        
        /// <summary>
        /// Gets or sets the id of the category this media is associated.
        /// </summary>
        public int CategoryId
        {
            get
            {
                return this.categoryId;
            }
            set
            {
                if (CategorySystem.GetCategoryById(value) == null)
                {
                    throw new ArgumentException(string.Format("Invalid categoryId value {0}.", value));
                }
                this.categoryId = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("MediaCategory");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("mediaId", this.mediaId);
                context.SerializeElement("categoryId", this.categoryId);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::categoryId");
                if (null != attr) this.categoryId = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaRating.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the MediaRating data, and creation of the MediaRating class.
    /// </summary>
    public class MediaRating : ICatalogData
    {
        #region Fields
        private Guid mediaId;
        private int ratingValueId;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal MediaRating(SqlDataReader reader)
        {
            this.ratingValueId = reader.GetInt32(reader.GetOrdinal("ratingValueId"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public MediaRating()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the MediaRating class.
        /// </summary>
        /// <param name="ratingValueId">The id of the rating value</param>
        public MediaRating(int ratingValueId)
        {
            //TODO: validate ratingValueId
            this.ratingValueId = ratingValueId;
            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this object.
        /// </summary>
        internal Guid MediaId
        {
            set { this.mediaId = value; }
        }

        /// <summary>
        /// Gets or sets the id of the rating value this media is associated.
        /// </summary>
        public int RatingValueId
        {
            get
            {
                return this.ratingValueId;
            }
            set
            {
                //TODO: validate ratingValueId
                this.ratingValueId = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("MediaRating");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("mediaId", this.mediaId);
                context.SerializeElement("ratingValueId", this.ratingValueId);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::ratingValueId");
                if (null != attr) this.ratingValueId = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }


        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaLocaleMap.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the MediaLocaleMap data, and creation of the MediaLocaleMap class.
    /// </summary>
    public class MediaLocaleMap : ICatalogData
    {
        #region Fields
        private Guid mediaId;
        private int lcid;
        private int lcidMap;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal MediaLocaleMap(SqlDataReader reader)
        {
            this.lcid = reader.GetInt32(reader.GetOrdinal("lcid"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public MediaLocaleMap()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this object.
        /// </summary>
        internal Guid MediaId
        {
            set { this.mediaId = value; }
        }

        /// <summary>
        /// Gets or sets the mapped lcid this media is associated.
        /// </summary>
        public int Lcid
        {
            get { return this.lcid; }
            set 
            {
                if (Locale.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid Lcid value {0}.", value));
                this.lcid = value; 
            }
        }

        /// <summary>
        /// Allow container class to set the lcid id for this object.
        /// </summary>
        internal int LcidMap
        {
            set
            {
                if (Locale.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid LcidMap value {0}.", value));
                this.lcidMap = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("MediaLocaleMap");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("mediaId", this.mediaId);
                context.SerializeElement("lcid", this.lcid);
                context.SerializeElement("lcidMap", this.lcidMap);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::lcid");
                if (null != attr) this.lcid = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::lcidMap");
                if (null != attr) this.lcidMap = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaRelationship.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines MediaRelationship data, and creation of the MediaRelationship class.
    /// </summary>
    public class MediaRelationship : ICatalogData
    {
        #region Fields
        private Guid mediaId;
        private Guid relatedMediaId;
        private string relatedMediaTitle;
        private int mediaRelationshipTypeId;
        private int sortOrder;
        private DataChangeType modified = DataChangeType.None;
        private string data;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal MediaRelationship(SqlDataReader reader)
        {
            this.relatedMediaId = reader.GetGuid(reader.GetOrdinal("relatedMediaId"));
            this.relatedMediaTitle = reader.IsDBNull(reader.GetOrdinal("relatedMediaTitle")) ? string.Empty : reader.GetString(reader.GetOrdinal("relatedMediaTitle"));
            this.mediaRelationshipTypeId = reader.GetInt32(reader.GetOrdinal("mediaRelationshipTypeId"));
            this.sortOrder = reader.GetInt32(reader.GetOrdinal("sortOrder"));
            this.data = reader.IsDBNull(reader.GetOrdinal("data")) ? string.Empty : reader.GetString(reader.GetOrdinal("data"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public MediaRelationship()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the MediaRelationship class.
        /// </summary>
        /// <param name="relatedMediaId">The id of the media that this media is related to</param>
        /// <param name="mediaRelationshipTypeId">The id identifying the relationship between the two medias</param>
        /// <param name="sortOrder">Order of sorting when display this relationship</param>
        public MediaRelationship(Guid relatedMediaId, int mediaRelationshipTypeId, int sortOrder)
        {
            if (MediaRelationshipType.Get(mediaRelationshipTypeId) == null)
                throw new ArgumentException(String.Format("Invalid mediaRelationshipTypeId {0}.", mediaRelationshipTypeId));

            this.relatedMediaId = relatedMediaId;
            this.mediaRelationshipTypeId = mediaRelationshipTypeId;
            this.sortOrder = sortOrder;
            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this object.
        /// </summary>
        internal Guid MediaId
        {
            set { this.mediaId = value; }
        }

        /// <summary>
        /// Gets the additional information from the media relationship, such as the 
        /// season or episode number. To add new relevent data to the media relationship, 
        /// include it in the MediaGet sproc
        /// </summary>
        public string Data
        {
            get
            {
                return this.data;
            }
            set
            {
                this.data = value;
            }
        }

        /// <summary>
        /// Gets or sets the related media id this media is linked.
        /// </summary>
        public Guid RelatedMediaId
        {
            get
            {
                return this.relatedMediaId;
            }
            set
            {
                this.relatedMediaId = value;
            }
        }

        /// <summary>
        /// Gets related media type. This is read-only attribute.
        /// </summary>
        public string RelatedMediaTitle
        {
            get
            {
                return this.relatedMediaTitle;
            }
            set
            {
                //Read-only attribute
            }
        }

        /// <summary>
        /// Gets or sets the id of the media relationship type.
        /// </summary>
        public int MediaRelationshipTypeId
        {
            get
            {
                return this.mediaRelationshipTypeId;
            }
            set
            {
                if (MediaRelationshipType.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid mediaRelationshipTypeId {0}.", value));
                this.mediaRelationshipTypeId = value;
            }
        }

        /// <summary>
        /// Gets or sets the sort order of this relationship.
        /// </summary>
        public int SortOrder
        {
            get
            {
                return this.sortOrder;
            }
            set
            {
                this.sortOrder = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("MediaRelationship");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("mediaId", this.mediaId);
                context.SerializeElement("relatedMediaId", this.relatedMediaId);
                context.SerializeElement("relatedMediaTitle", this.relatedMediaTitle);
                context.SerializeElement("mediaRelationshipTypeId", this.mediaRelationshipTypeId);
                context.SerializeElement("sortOrder", this.sortOrder);
                context.SerializeElement("data", this.data);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::relatedMediaId");
                if (null != attr) this.relatedMediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::relatedMediaTitle");
                if (null != attr) this.relatedMediaTitle = attr.InnerText;

                attr = node.SelectSingleNode("child::mediaRelationshipTypeId");
                if (null != attr) this.mediaRelationshipTypeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::sortOrder");
                if (null != attr) this.sortOrder = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::data");
                if (null != attr) this.data = attr.InnerText;
            }
        }


        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaOffer.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Represents a video definition type with its localized textual name
    /// </summary>
    public class MediaOffer 
    {
        #region Fields
        private Guid mediaId;
        private int mediaTypeId;
        private string mediaTypeName;
        private string mediaTitle;
        private List<MediaChild> mediaChilds = new List<MediaChild>();
        private List<OfferInstanceMediaType> mediaTypes = new List<OfferInstanceMediaType>();
        #endregion

        #region Constructors
        /// <summary>
        /// Default constructor required for SOAP.
        /// </summary>
        public MediaOffer()
        {
        }

        /// <summary>
        /// Initialize a new instance of the ImageFormat class given a sql data reader
        /// </summary>
        /// <param name="reader"></param>
        public MediaOffer(SqlDataReader reader)
        {
            this.mediaId = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.mediaTypeId = reader.GetInt32(reader.GetOrdinal("mediaTypeId"));
            this.mediaTypeName = reader.GetString(reader.GetOrdinal("mediaTypeName"));
            this.mediaTitle = SqlHelper.GetNullableString(reader, "mediaTitle", "(none)");
            if (reader.IsDBNull(reader.GetOrdinal("seasonNumber")) == false)
                this.mediaTitle = this.mediaTitle + string.Format(" ,Season {0}", reader.GetInt32(reader.GetOrdinal("seasonNumber")));
            if (reader.IsDBNull(reader.GetOrdinal("episodeNumber")) == false)
                this.mediaTitle = this.mediaTitle + string.Format(" ,Episode {0}", reader.GetInt32(reader.GetOrdinal("episodeNumber")));

            reader.NextResult();
            while (reader.Read())
            {
                this.mediaChilds.Add(new MediaChild(reader));
            }

            reader.NextResult();
            while (reader.Read())
            {
                this.mediaTypes.Add(new OfferInstanceMediaType(reader));
            }
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the id of the media type.
        /// </summary>
        public int MediaTypeId
        {
            get
            {
                return this.mediaTypeId;
            }
            set
            {
            }
        }

        /// <summary>
        /// Gets the name of the media type.
        /// </summary>
        public string MediaTypeName
        {
            get
            {
                return this.mediaTypeName;
            }
            set
            {
            }
        }

        /// <summary>
        /// Gets the title of the media.
        /// </summary>
        public string MediaTitle
        {
            get
            {
                return this.mediaTitle;
            }
            set
            {
            }
        }

        /// <summary>
        /// Gets or sets the list of child media objects
        /// </summary>
        public MediaChild[] MediaChilds
        {
            get 
            {
                return this.mediaChilds.ToArray(); 
            }
            set 
            {
                this.mediaChilds.Clear();
                if (value != null)
                    this.mediaChilds.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the list of media types for offer.
        /// </summary>
        public OfferInstanceMediaType[] MediaTypes
        {
            get
            {
                return this.mediaTypes.ToArray();
            }
            set
            {
                this.mediaTypes.Clear();
                if (value != null)
                    this.mediaTypes.AddRange(value);
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Gets related records for specified media id to prepare for offer.
        /// </summary>
        /// <returns></returns>
        public static MediaOffer Get(Guid mediaId)
        {
            return MediaOffer.Get(mediaId, false);
        }

        internal static MediaOffer Get(Guid mediaId, bool outputMediaInstance)
        {
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "MediaGetForOffer",
                        mediaId,
                        outputMediaInstance? 1 : 0))
                {
                    if (reader.Read())
                        return new MediaOffer(reader);
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "MediaGetForOffer");
                throw;
            }
            return null;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaRelationshipType.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides editing and retrieving of MediaRelationshipType data, and aids
    /// the creation of the MediaRelationshipType object.
    /// </summary>
    public class MediaRelationshipType : Utils.IKeyed<Int32>
    {
        #region Fields
        private int id;
        private string name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,MediaRelationshipType> MediaRelationshipTypeCache = new Utils.KeyedCache<Int32,MediaRelationshipType>(
                        new Utils.KeyedCache<Int32,Catalog.MediaRelationshipType>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Empty constructor so this class serailzes over SOAP.
        /// </summary>
        public MediaRelationshipType()
        {
        }

        /// <summary>
        /// Initalize a new instance of the MediaRelationshipType class with id to be assigned by the system.
        /// </summary>
        /// <param name="name"></param>
        public MediaRelationshipType(string name)
        {
            this.id = -1;
            this.name = name;
        }

        /// <summary>
        /// Initalize a new instance of the MediaRelationshipType class.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        public MediaRelationshipType(int id, string name)
        {
            this.id = id;
            this.name = name;
        }

        /// <summary>
        /// Initialize a new instance of the MediaRelationshipType class given a sql data reader
        /// </summary>
        /// <param name="reader"></param>
        private MediaRelationshipType(SqlDataReader reader)
        {
            id = reader.GetInt32(reader.GetOrdinal("mediaRelationshipTypeId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the id for this MediaRelationshipType.
        /// </summary>
        public int Id
        {
            get 
            { 
                return this.id; 
            }
            set 
            { 
                this.id = value; 
            }
        }

        /// <summary>
        /// Gets or sets the name of this MediaRelationshipType.
        /// </summary>
        public String Name
        {
            get
            {
                return this.name;
            }
            
            set
            {
                Validate.IsNotEmpty(value, "Name", "Name");
                this.name = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets the MediaRelationship for the given id.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static MediaRelationshipType Get(int id)
        {
            return MediaRelationshipTypeCache.Get(id);
        }

        /// <summary>
        /// Gets the list of MediaRelationshipTypes in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<MediaRelationshipType> Get()
        {
            return MediaRelationshipTypeCache.Get();
        }

        /// <summary>
        /// Gets the list of MediaRelationshipTypes in the catalog.
        /// </summary>
        /// <returns></returns>
        private static List<MediaRelationshipType> GetData()
        {
            List<MediaRelationshipType> mediaRelationshipTypes = new List<MediaRelationshipType>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "MediaRelationshipTypeGet"
                    ))
            {
                while( reader.Read() )
                {
                    mediaRelationshipTypes.Add( new MediaRelationshipType( reader ));
                }
            }
            return mediaRelationshipTypes;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaRatingDescriptor.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines MediaRatingDescriptor data, and creation of the MediaRatingDescriptor class.
    /// </summary>
    public class MediaRatingDescriptor : ICatalogData
    {
        #region Fields
        private Guid mediaId;
        private int ratingDescriptorId;
        private Double level = 1.0;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal MediaRatingDescriptor( SqlDataReader reader)
        {
            this.ratingDescriptorId = reader.GetInt32(reader.GetOrdinal("ratingDescriptorId"));
            this.level = reader.GetDouble( reader.GetOrdinal("level" ));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public MediaRatingDescriptor()
        {
            level = 1.0;
        }

        /// <summary>
        /// Constructor that initializes a new instance of the MediaRatingDescriptor class.
        /// </summary>
        /// <param name="ratingDescriptorId">The id of the rating descriptor</param>
        public MediaRatingDescriptor(int ratingDescriptorId)
        {
            //TODO: validate ratingDescriptorId
            this.ratingDescriptorId = ratingDescriptorId;
            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media Id for this object.
        /// </summary>
        internal Guid MediaId
        {
            set { this.mediaId = value; }
        }

        /// <summary>
        /// Gets or sets the id of the rating descriptor this media is associated.
        /// </summary>
        public int RatingDescriptorId
        {
            get
            {
                return this.ratingDescriptorId;
            }
            set
            {
                //TODO: validate ratingDescriptorId
                this.ratingDescriptorId = value;
            }
        }

        /// <summary>
        /// Gets or sets the level (or amount) of the rating descriptor for this media.
        /// </summary>
        public Double Level
        {
            get
            {
                return this.level;
            }
            set
            {
                Validate.IsGreaterThanOrEqual( value, 0.0, "level", "level");
                Validate.IsLessThanOrEqual( value, 1.0, "level", "level");
                this.level = value;
            }
        }
        

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("MediaRatingDescriptor");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("mediaId", this.mediaId);
                context.SerializeElement("ratingDescriptorId", this.ratingDescriptorId);
                context.SerializeElement("level", this.level );
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::ratingDescriptorId");
                if (null != attr) this.ratingDescriptorId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::level");
                if (null != attr) this.level = Serialization.DeserializeDoubleElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MetadataProvider.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of MetadataProvider data in the catalog, 
    /// and aids in the creation of the MetadataProvider object.
    /// </summary>
    public class MetadataProvider : Entity
    {
        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public MetadataProvider()
        {
        }

        /// <summary>
        /// Instantiates a MetadataProvider instance from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public MetadataProvider(SqlDataReader reader)
            :base(reader)
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a MetadataProvider for the given id.
        /// </summary>
        /// <param name="id">The id of the metadataProvider to get</param>
        /// <returns>The MetadataProvider for the given id.</returns>
        public static new MetadataProvider Get(int id)
        {
            return EntityCacheManager.MetadataProviderCache.Get(id);
        }

        /// <summary>
        /// Gets all metadataProviders in the catalog.
        /// </summary>
        /// <returns></returns>
        public static new List<MetadataProvider> Get()
        {
            return EntityCacheManager.MetadataProviderCache.Get();
        }


        /// <summary>
        /// Gets all metadataProviders from the database.
        /// </summary>
        /// <returns></returns>
        public static new List<MetadataProvider> GetData()
        {
            List<MetadataProvider> metadataProviders = new List<MetadataProvider>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "MetadataProviderGet"
                    ))
            {
                while( reader.Read() )
                {
                    metadataProviders.Add( new MetadataProvider( reader ));
                }
            }
            return metadataProviders;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\MediaType.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Represents an media type
    /// </summary>
    public class MediaType : Utils.IKeyed<Int32>
    {
        #region Fields
        private Int32 id;
        private String name;
        private String mediaClass;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,MediaType> MediaTypeCache = new Utils.KeyedCache<Int32,MediaType>(
                        new Utils.KeyedCache<Int32,Catalog.MediaType>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP
        /// </summary>
        public MediaType()
        {
        }

        /// <summary>
        /// Constructor that takes a db reader
        /// </summary>
        private MediaType( SqlDataReader reader )
        {
            id = reader.GetInt32(reader.GetOrdinal("mediaTypeId"));
            name = reader.GetString(reader.GetOrdinal("name"));
            mediaClass = reader.GetString(reader.GetOrdinal("mediaClass"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// The id for the media type
        /// </summary>
        public Int32 Id
        {
            get { return id; }
            set { id = value; }
        }

        /// <summary>
        /// The name by which the media type is known - for readability purpose only
        /// </summary>
        public String Name
        {
            get
            {
                return name;
            }
            
            set
            {
                if ( String.IsNullOrEmpty( value ))
                {
                    throw new ArgumentNullException( "The name of a MediaType cannot be null or empty." );
                }
                name = value;
            }
        }

        /// <summary>
        /// The media class to which this type belongs
        /// </summary>
        public String MediaClass
        {
            get
            {
                return mediaClass;
            }
            
            set
            {
                if ( String.IsNullOrEmpty( value ))
                {
                    throw new ArgumentNullException( "The name of a MediaType cannot be null or empty." );
                }
                mediaClass = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get the MediaType for a given id.
        /// </summary>
        /// <param name="id">The id of the MediaType to retrieve</param>
        /// <returns>The MediaType of the given id.</returns>
        public static MediaType Get(int id)
        {
            return MediaTypeCache.Get( id );
        }

        /// <summary>
        /// Gets the list of MediaType in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<MediaType> Get()
        {
            return MediaTypeCache.Get();
        }
        
        /// <summary>
        /// Gets the list of MediaTypes from the database.
        /// </summary>
        /// <returns></returns>
        private static List<MediaType> GetData()
        {
            List<MediaType> mediaTypes = new List<MediaType>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "MediaTypeGet"
                    ))
            {
                while( reader.Read() )
                {
                    mediaTypes.Add( new MediaType( reader ));
                }
            }
            return mediaTypes;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\OfferInstance.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using xonline.common.utilities;
using xonline.common.service;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines OfferInstance data, and creation of this class.
    /// </summary>
    public class OfferInstance : ICatalogData
    {
        #region Constants
        private const int skuLength = 50;
        private const int countryCodeLength = 2;
        private static readonly UInt32 ExternalOfferInstanceIdMaxLength = 50;
        private static readonly string CurrencyPoints = "MPT";
        private static readonly string CurrencyTokens = "MTK";
        #endregion

        #region Fields
        private Guid offerId;
        private Guid id;
        private string sku;
        private int pricingRuleId;
        private int paymentTypeId;
        private decimal price;
        private string priceCurrencyCode;
        private decimal reportingRetailValue;
        private string reportingRetailValueCurrencyCode;
        private DateTime startDateTime;
        private DateTime endDateTime;
        private string countryCode;
        private string externalOfferInstanceId;
        private int visibilityLevelId;
        private int visibilityStatusId;
        private List<OfferInstanceMediaType> mediaTypes = new List<OfferInstanceMediaType>();
        private List<OfferInstanceUserType> userTypes = new List<OfferInstanceUserType>();
        private List<Promotion> promotions = new List<Promotion>();
        private List<ProviderTerm> providerTerms = new List<ProviderTerm>();
        private InsertDataChangeType modified = InsertDataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal OfferInstance(SqlDataReader reader)
        {
            //Initialize OfferInstance
            this.id = reader.GetGuid(reader.GetOrdinal("offerInstanceId"));
            this.offerId = reader.GetGuid(reader.GetOrdinal("offerId"));
            this.sku = SqlHelper.GetNullableString(reader, "sku");
            this.pricingRuleId = reader.GetInt32(reader.GetOrdinal("pricingRuleId"));
            this.price = reader.GetDecimal(reader.GetOrdinal("price"));
            this.reportingRetailValue = reader.GetDecimal(reader.GetOrdinal("reportingRetailValue"));
            this.reportingRetailValueCurrencyCode = reader.GetString(reader.GetOrdinal("reportingRetailValueCurrencyCode"));
            this.startDateTime = reader.GetDateTime(reader.GetOrdinal("startDateTime"));
            this.endDateTime = reader.GetDateTime(reader.GetOrdinal("endDateTime"));
            this.countryCode = reader.GetString(reader.GetOrdinal("countryCode"));
            this.visibilityLevelId = reader.GetInt32(reader.GetOrdinal("visibilityLevelId"));
            this.visibilityStatusId = reader.GetInt32(reader.GetOrdinal("visibilityStatusId"));
            this.paymentTypeId = reader.GetInt32(reader.GetOrdinal("paymentTypeId"));
            this.priceCurrencyCode = reader.GetString(reader.GetOrdinal("priceCurrencyCode"));
            this.externalOfferInstanceId = SqlHelper.GetNullableString(reader, "externalOfferInstanceId");

            //Initialize MediaTypes
            reader.NextResult();
            while (reader.Read())
            {
                this.mediaTypes.Add(new OfferInstanceMediaType(reader));
            }

            //Initialize UserTypes
            reader.NextResult();
            while (reader.Read())
            {
                this.userTypes.Add(new OfferInstanceUserType(reader));
            }

            //Initialize Promotions
            reader.NextResult();
            while (reader.Read())
            {
                this.promotions.Add(new Promotion(reader));
            }

            //Initialize ProviderTerm
            reader.NextResult();
            int count = 0;
            if (reader.Read())
                count = reader.GetInt32(reader.GetOrdinal("providerTermCount"));
            while (count > 0 && reader.NextResult())
            {
                if (reader.Read())
                    this.providerTerms.Add(new ProviderTerm(reader));
                count--;
            }
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public OfferInstance()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the offer Id for this object.
        /// </summary>
        internal Guid OfferId
        {
            set { this.offerId = value; }
        }

        /// <summary>
        /// Gets or sets the id of this offer instance
        /// </summary>
        public Guid Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Media sku
        /// </summary>
        public string Sku
        {
            get
            {
                return this.sku;
            }
            set
            {
                this.sku = value;
            }
        }

        /// <summary>
        /// Id identifies the pricing rule for this offer instance
        /// </summary>
        public int PricingRuleId
        {
            get
            {
                return this.pricingRuleId;
            }
            set
            {
                if (PricingRule.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid pricingRuleId {0}.", value));
                this.pricingRuleId = value;
            }
        }


        /// <summary>
        /// Id for the payment type for this offer instance
        /// </summary>
        public int PaymentTypeId
        {
            get
            {
                return this.paymentTypeId;
            }
            set
            {
                if (PaymentType.Get(value) == null)
                {
                    throw new ArgumentException(String.Format("Invalid payment type id: {0}.", value));
                }
                this.paymentTypeId = value;
            }
        }


        /// <summary>
        /// Price of offer instance
        /// </summary>
        public Decimal Price
        {
            get
            {
                return this.price;
            }
            set
            {
                this.price = value;
            }
        }
        
        /// <summary>
        /// Currency for of the price of this offer instance
        /// </summary>
        public string PriceCurrencyCode
        {
            get
            {
                return this.priceCurrencyCode;
            }
            set{}
        }
        /// <summary>
        /// The equivalent retail value for this offer instance
        /// </summary>
        public Decimal ReportingRetailValue
        {
            get
            {
                return this.reportingRetailValue;
            }
            set
            {
                this.reportingRetailValue = value;
            }
        }
        /// <summary>
        /// Currency for the equivalent retail value for this offer instance
        /// </summary>
        public string ReportingRetailValueCurrencyCode
        {
            get
            {
                return this.reportingRetailValueCurrencyCode;
            }
            set{}
        }
        /// <summary>
        /// Start date this offer instance takes affect
        /// </summary>
        public DateTime StartDateTime
        {
            get
            {
                return this.startDateTime;
            }
            set
            {
                Validate.ValidateDate(ref value);
                this.startDateTime = value;
            }
        }

        /// <summary>
        /// End date this offer instance expires
        /// </summary>
        public DateTime EndDateTime
        {
            get
            {
                return this.endDateTime;
            }
            set
            {
                Validate.ValidateDate(ref value);
                this.endDateTime = value;
            }
        }

        /// <summary>
        /// Country in which this offer instance applies
        /// </summary>
        public string CountryCode
        {
            get
            {
                return this.countryCode;
            }
            set
            {
                if (Country.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid country code specified [{0}].", value));
                this.countryCode = value;
            }
        }

        /// <summary>
        /// The id by which this offer instance is known in (primary) external system. 
        /// This is where the Microsoft BOID is stored if one exists.
        /// </summary>
        public string ExternalOfferInstanceId
        {
            get
            {
                return this.externalOfferInstanceId;
            }
            set
            {
                Validate.IsNotLongerThan(value, ExternalOfferInstanceIdMaxLength, "externalOfferInstanceId", "externalOfferInstanceId");
                this.externalOfferInstanceId = value;
            }
        }

        /// <summary>
        /// Id identifies the visibility level
        /// </summary>
        public int VisibilityLevelId
        {
            get
            {
                return this.visibilityLevelId;
            }
            set
            {
                if (VisibilityLevel.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalide visibilityLevelId {0}.", value));
                this.visibilityLevelId = value;
            }
        }

        /// <summary>
        /// The list of media types the offer instances are for.
        /// </summary>
        public OfferInstanceMediaType[] MediaTypes
        {
            get
            {
                return this.mediaTypes.ToArray();
            }
            set
            {
                this.mediaTypes.Clear();
                if (value != null)
                    this.mediaTypes.AddRange(value);
            }
        }

        /// <summary>
        /// The list of user types tied to this offer instance
        /// </summary>
        public OfferInstanceUserType[] UserTypes
        {
            get
            {
                return this.userTypes.ToArray();
            }
            set
            {
                this.userTypes.Clear();
                if (value != null)
                    this.userTypes.AddRange(value);
            }
        }

        /// <summary>
        /// The list of provider terms tied to this offer instance
        /// </summary>
        public ProviderTerm[] ProviderTerms
        {
            get
            {
                return this.providerTerms.ToArray();
            }
            set
            {
                this.providerTerms.Clear();
                if (value != null)
                    this.providerTerms.AddRange(value);
            }
        }

        /// <summary>
        /// The list of promotion tied to this offer instance
        /// </summary>
        public Promotion[] Promotions
        {
            get
            {
                return this.promotions.ToArray();
            }
            set
            {
                this.promotions.Clear();
                if (value != null)
                    this.promotions.AddRange(value);
            }
        }

        /// <summary>
        /// Allow container class to set the offer Id for this object.
        /// </summary>
        public int VisibilityStatusId
        {
            get
            {
                return this.visibilityStatusId;
            }
            set
            {
                if (VisibilityStatus.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid visibilityStatusId specified [{0}].", value));
                this.visibilityStatusId = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public InsertDataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serialize the OfferInstance object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public void Serialize(Serialization context)
        {
            // FullSericalization for import/export
            if (context.FullSerialization)
            {
                context.SerializeStartElement("OfferInstance");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("offerInstanceId", this.id);
                context.SerializeElement("offerId", this.offerId);
                context.SerializeElement("sku", this.sku);
                context.SerializeElement("pricingRuleId", this.pricingRuleId);
                context.SerializeElement("price", this.price);
                context.SerializeElement("reportingRetailValue", this.reportingRetailValue);
                context.SerializeElement("reportingRetailValueCurrencyCode", this.reportingRetailValueCurrencyCode);
                context.SerializeElement("startDateTime", this.startDateTime);
                context.SerializeElement("endDateTime", this.endDateTime);
                context.SerializeElement("countryCode", this.countryCode);
                context.SerializeElement("visibilityLevelId", this.visibilityLevelId);
                context.SerializeElement("visibilityStatusId", this.visibilityStatusId);
                context.SerializeElement("paymentTypeId", this.paymentTypeId);
                context.SerializeElement("priceCurrencyCode", this.priceCurrencyCode);
                context.SerializeElement("externalOfferInstanceId", this.externalOfferInstanceId);

                //ProviderTerm & OfferInstanceProviderTerm
                foreach (ProviderTerm providerTerm in this.providerTerms)
                {
                    //ProviderTerm
                    providerTerm.Serialize(context);

                }

                // MediaType
                foreach (OfferInstanceMediaType mediaType in this.mediaTypes)
                {
                    mediaType.Serialize(context);
                }

                //Promotion
                foreach (Promotion promotion in this.promotions)
                {
                    promotion.OfferInstanceId = this.id;
                    promotion.Serialize(context);
                }

                //OfferInstanceUserType
                foreach (OfferInstanceUserType userType in this.userTypes)
                {
                    userType.OfferInstanceId = this.id;
                    userType.Serialize(context);
                }


                context.SerializeEndElement();

            }
            else
            { //Serilization for DB

                //If this offerinstance is to be added/deleted; mark all children to be added/deleted.
                if (this.modified == InsertDataChangeType.Add)
                {
                    this.SetModified(this.modified, true);
                }

                if (this.modified != InsertDataChangeType.None)
                {
                    context.SerializeStartElement("OfferInstance");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("offerInstanceId", this.id);
                    context.SerializeElement("offerId", this.offerId);
                    context.SerializeElement("sku", this.sku);
                    context.SerializeElement("pricingRuleId", this.pricingRuleId);
                    context.SerializeElement("price", this.price);
                    context.SerializeElement("reportingRetailValue", this.reportingRetailValue);
                    context.SerializeElement("reportingRetailValueCurrencyCode", this.reportingRetailValueCurrencyCode);
                    context.SerializeElement("startDateTime", this.startDateTime);
                    context.SerializeElement("endDateTime", this.endDateTime);
                    context.SerializeElement("countryCode", this.countryCode);
                    context.SerializeElement("visibilityLevelId", this.visibilityLevelId);
                    context.SerializeElement("paymentTypeId", this.paymentTypeId);
                    context.SerializeElement("priceCurrencyCode", this.priceCurrencyCode);
                    context.SerializeElement("externalOfferInstanceId", this.externalOfferInstanceId);
                    context.SerializeEndElement();
                }

                //ProviderTerm & OfferInstanceProviderTerm
                foreach (ProviderTerm providerTerm in this.providerTerms)
                {
                    //ProviderTerm
                    providerTerm.Serialize(context);

                    //OfferInstanceProviderTerm
                    if (this.modified != InsertDataChangeType.None || providerTerm.Modified != DataChangeType.None)
                    {
                        context.SerializeStartElement("OfferInstanceProviderTerm");
                        context.SerializeDatabaseOperation(this.modified);
                        context.SerializeElement("offerInstanceId", this.id);
                        context.SerializeElement("providerTermId", providerTerm.Id);
                        context.SerializeElement("visibilityStatusId", this.visibilityStatusId);
                        context.SerializeEndElement();
                    }
                }

                // MediaType
                foreach (OfferInstanceMediaType mediaType in this.mediaTypes)
                {
                    mediaType.Serialize(context);
                }

                //Promotion
                foreach (Promotion promotion in this.promotions)
                {
                    promotion.OfferInstanceId = this.id;
                    promotion.Serialize(context);
                }

                //OfferInstanceUserType
                foreach (OfferInstanceUserType userType in this.userTypes)
                {
                    userType.OfferInstanceId = this.id;
                    userType.Serialize(context);
                }
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::offerInstanceId");
                if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::offerId");
                if (null != attr) this.offerId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::sku");
                if (null != attr) this.sku = attr.InnerText;

                attr = node.SelectSingleNode("child::pricingRuleId");
                if (null != attr) this.pricingRuleId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::price");
                if (null != attr) this.price = Serialization.DeserializeDecimalElement(attr.InnerText);

                attr = node.SelectSingleNode("child::reportingRetailValue");
                if (null != attr) this.reportingRetailValue = Serialization.DeserializeDecimalElement(attr.InnerText);

                attr = node.SelectSingleNode("child::reportingRetailValueCurrencyCode");
                if (null != attr) this.reportingRetailValueCurrencyCode = attr.InnerText;

                attr = node.SelectSingleNode("child::startDateTime");
                if (null != attr) this.startDateTime = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::endDateTime");
                if (null != attr) this.endDateTime = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::countryCode");
                if (null != attr) this.countryCode = attr.InnerText;

                attr = node.SelectSingleNode("child::visibilityLevelId");
                if (null != attr) this.visibilityLevelId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::visibilityStatusId");
                if (null != attr) this.visibilityStatusId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::paymentTypeId");
                if (null != attr) this.paymentTypeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::priceCurrencyCode");
                if (null != attr) this.priceCurrencyCode = Serialization.DeserializeStringElement(attr.InnerText);

                attr = node.SelectSingleNode("child::externalOfferInstanceId");
                if (null != attr) this.externalOfferInstanceId = Serialization.DeserializeStringElement(attr.InnerText);

                XmlNodeList nodes = node.SelectNodes("child::ProviderTerm");
                foreach (XmlNode subnode in nodes)
                {
                    ProviderTerm providerTerm = new ProviderTerm();
                    providerTerm.Deserialize(subnode);
                    this.providerTerms.Add(providerTerm);
                }

                nodes = node.SelectNodes("child::OfferInstanceMediaType");
                foreach (XmlNode subnode in nodes)
                {
                    OfferInstanceMediaType mediaType = new OfferInstanceMediaType();
                    mediaType.Deserialize(subnode);
                    this.mediaTypes.Add(mediaType);
                }

                nodes = node.SelectNodes("child::Promotion");
                foreach (XmlNode subnode in nodes)
                {
                    Promotion promotion = new Promotion();
                    promotion.Deserialize(subnode);
                    this.promotions.Add(promotion);
                }

                nodes = node.SelectNodes("child::OfferInstanceUserType");
                foreach (XmlNode subnode in nodes)
                {
                    OfferInstanceUserType userType = new OfferInstanceUserType();
                    userType.Deserialize(subnode);
                    this.userTypes.Add(userType);
                }

            }

        }
        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(InsertDataChangeType type, bool cascade)
        {
            this.modified = type;
            if (cascade)
            {
                foreach (ProviderTerm providerTerm in providerTerms)
                    providerTerm.SetModified((DataChangeType)type, cascade);

                foreach (Promotion promotion in promotions)
                    promotion.SetModified((DataChangeType)type, cascade);

                foreach (OfferInstanceUserType userType in userTypes)
                    userType.SetModified((DataChangeType)type, cascade);
            }
        }
        /// <summary>
        /// Sets the Default Currency if the Offer is Credit Card.This is called in Offer.cs Save method(Bad dependency. Need to come up with a way of eliminating this dependency)
        /// (By controlling the deserialization order, we could make all the currency logic self contained in the offerInstance Class)
        /// </summary>
        public void SetCurrencyForOffers()
        {
            if (paymentTypeId == Constants.PaymentTypeCreditCard)
            {
                string defaultCurrency = CountryDefaultCurrency.GetDefaultCurrencyString(countryCode);
                this.priceCurrencyCode = defaultCurrency;
                this.reportingRetailValueCurrencyCode = defaultCurrency;
            }
            else if (paymentTypeId == Constants.PaymentTypeToken)
            {
                this.priceCurrencyCode = CurrencyTokens;
                this.reportingRetailValueCurrencyCode = CurrencyTokens;
            }
            else if (paymentTypeId == Constants.PaymentTypePoints)
            {
                this.priceCurrencyCode = CurrencyPoints;
                this.reportingRetailValueCurrencyCode = CurrencyPoints;
            }
            //ProviderTerm
            foreach (ProviderTerm providerTerm in providerTerms)
            {
                //set the offerInstance's price Currency code
                providerTerm.WholesalePriceCurrencyCode = priceCurrencyCode;
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Offer.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using Microsoft.Ems.Common.Utils;


namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides retrieval and editing of Offer data in the catalog.
    /// </summary>
    public class Offer : ICatalogData
    {
        #region Constants
        /// <summary>
        /// Defines Offer table column lengths
        /// </summary>
        private const int nameLength = 255;
        #endregion

        #region Enum
        /// <summary>
        /// Value used in the OfferTool to select offer type
        /// to optimize offer generation.
        /// </summary>
        public enum OfferMode
        {
            /// <summary>
            /// Create offer for single media.
            /// </summary>
            Standalone = 1,
            /// <summary>
            /// Create one (Offer, OfferIntance, ProviderTerm) and multiple
            /// ProviderTermMediaInstances - one for each episode linked to the
            /// season within the same (Offer, OfferInstance, ProviderTerm)
            /// </summary>
            VideoSeason = 2,
            /// <summary>
            /// Create one Offer, OfferInstance, ProviderTerm, ProviderTermMediaInstance
            /// for each episode linked to the season
            /// </summary>
            StandaloneAllEpisodeSeason = 3,
            /// <summary>
            /// Create one (Offer, OfferIntance, ProviderTerm) and multiple
            /// ProviderTermMediaInstances - one for each episode linked to the
            /// series (either directly or indirectly through a season) within the
            /// same OfferInstance.
            /// </summary>
            VideoSeries = 4,
            /// <summary>
            /// Create one Offer, OfferInstance, ProviderTerm, ProviderTermMediaInstance
            /// for each episode linked to the season (either directly or indirectly through a season)
            /// </summary>
            StandaloneAllEpisodeSeries = 5,
            /// <summary>
            /// Create offer for game
            /// </summary>
            Game = 6
        }
        #endregion

        #region Fields
        private Guid id;
        private string name;
        private OfferMode offerType = OfferMode.Standalone;
        private Guid mediaId;
        private List<OfferStore> stores = new List<OfferStore>();
        private List<OfferInstance> instances = new List<OfferInstance>();
        private InsertDataChangeType modified = InsertDataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        private Offer(SqlDataReader reader)
        {
            this.id = reader.GetGuid(reader.GetOrdinal("offerId"));
            this.mediaId = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.name = reader.GetString(reader.GetOrdinal("name"));

            //Initialize OfferStore
            reader.NextResult();
            while (reader.Read())
            {
                this.stores.Add(new OfferStore(reader));
            }

            //Initialize OfferInstance
            reader.NextResult();
            int count = 0;
            if (reader.Read())
                count = reader.GetInt32(reader.GetOrdinal("offerInstanceCount"));
            while (count > 0 && reader.NextResult())
            {
                if (reader.Read())
                    this.instances.Add(new OfferInstance(reader));
                count--;
            }
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public Offer()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the offer Id.
        /// </summary>
        public Guid Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of the offer. 
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                Validate.IsNotEmpty(value, "Name", "Name");
                Validate.IsNotLongerThan(value, nameLength, "Name", "Name");
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets the media id this offer is for. 
        /// </summary>
        public Guid MediaId
        {
            get
            {
                return this.mediaId;
            }
            set
            {
                this.mediaId = value;
            }
        }

        /// <summary>
        /// Gets or sets the OfferType
        /// </summary>
        public OfferMode OfferType
        {
            get
            {
                return this.offerType;
            }
            set
            {
                this.offerType = value;
            }
        }

        /// <summary>
        /// Gets or sets the list of stores that can use this offer.
        /// </summary>
        public OfferStore[] Stores
        {
            get
            {
                return this.stores.ToArray();
            }
            set
            {
                this.stores.Clear();
                if (value != null)
                    this.stores.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the list of offer instances this offer has.
        /// </summary>
        public OfferInstance[] Instances
        {
            get
            {
                return this.instances.ToArray();
            }
            set
            {
                this.instances.Clear();
                if (value != null)
                    this.instances.AddRange(value);
            }
        }
        
        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public InsertDataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Retrieves the full Offer object from the database for the given id.
        /// </summary>
        /// <param name="id">The id of the offer to retrieve.</param>
        /// <returns>The Offer object for the given id.</returns>
        public static Offer Get(Guid id)
        {
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "OfferGet",
                        id))
                {
                    if (reader.Read())
                        return new Offer(reader);
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "OfferGet");
                throw;
            }
            return null;
        }

        /// <summary>
        /// Saves changes made to the given Offer object to the database.
        /// </summary>
        public static void Save(Offer offer)
        {
            if (offer == null)
            {
                throw new ArgumentNullException("Can not save null offer");
            }

            //Get child medias
            MediaOffer mediaOffer = MediaOffer.Get(offer.mediaId, true);
            if (mediaOffer == null)
            {
                throw new ArgumentException("Can not find MediaOffer with the mediaId in Offer.");
            }

            bool qualifiedOffer = false;

            switch (offer.offerType)
            {
                case OfferMode.Standalone:
                case OfferMode.VideoSeries: 
                case OfferMode.VideoSeason:
                    //Clone a ProviderTermMediaInstance object for each child media
                    foreach(OfferInstance oi in offer.instances)
                    {
                        if (oi != null)
                        {
                            foreach (ProviderTerm pt in oi.ProviderTerms)
                            {                         
                                //Add back qualified child media's ProviderTermMediaInstance
                                foreach (OfferInstanceMediaType child in mediaOffer.MediaTypes)
                                {
                                    if (OfferInstanceMediaType.IsQualifiedMediaType(oi.MediaTypes, child))
                                    {
                                        qualifiedOffer = true;
                                    }
                                }
                            }
                        }
                    }

                    break;

                case OfferMode.StandaloneAllEpisodeSeason:
                case OfferMode.StandaloneAllEpisodeSeries:
                    //Clone an Offer object for each child media (episode)
                    foreach (MediaChild episode in mediaOffer.MediaChilds)
                    {
                        //Filter OfferInstanceMediaType for this child mediaId
                        OfferInstanceMediaType[] offerMediaTypes = Array.FindAll(mediaOffer.MediaTypes,
                                                                    delegate(OfferInstanceMediaType oimt) { return oimt.MediaId.Equals(episode.MediaId); });
                        if (offerMediaTypes == null)
                            continue;

                        qualifiedOffer = false;
                        foreach (OfferInstance oi in offer.Instances)
                        {
                            if (oi != null)
                            {
                                //New OfferInstance id
                                oi.Id = Guid.NewGuid();

                                foreach (ProviderTerm pt in oi.ProviderTerms)
                                {
                                    foreach (OfferInstanceMediaType child in offerMediaTypes)
                                    {
                                        if (OfferInstanceMediaType.IsQualifiedMediaType(oi.MediaTypes, child))
                                        {
                                            qualifiedOffer = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
                case OfferMode.Game:
                    qualifiedOffer = true;
                    break;
                default:
                    break;
            }


            //Save the offer object
            if (qualifiedOffer)
            {
                foreach (OfferInstance offerinstance in offer.Instances)
                {
                    offerinstance.SetCurrencyForOffers();
                }
                using (Serialization serializer = new Serialization())
                {
                    serializer.SerializeStartElement("Data");
                    offer.Serialize(serializer);
                    serializer.SerializeEndElement();
                    Offer.Save(serializer.ResultXml);
                }
            }
            else
            {
                throw new ArgumentException("Error: no qualified media instance to generate offer.");
            }
        }

        /// <summary>
        /// Saves changes made to the given Offer object specified as xml.
        /// </summary>
        /// <param name="xmlOffer">Offer data to be save to the database.</param>
        public static void Save(string xmlOffer)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "OfferSave",
                        xmlOffer);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "OfferSave");
                throw;
            }
        }

        /// <summary>
        /// Serialize the Offer object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public void Serialize(Serialization context)
        {
            // FullSericalization for import/export
            if (context.FullSerialization)
            {

                context.SerializeStartElement("Offer");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("offerId", this.Id);
                context.SerializeElement("mediaId", this.mediaId);
                context.SerializeElement("name", this.name);

                //OfferInstance
                foreach (OfferInstance instance in this.instances)
                {
                    if (instance != null)
                    {
                        instance.OfferId = this.id; //set offer id
                        instance.Serialize(context);
                    }
                }

                //OfferStore
                foreach (OfferStore store in this.stores)
                {
                    if (store != null)
                    {
                        store.OfferId = this.id;    //set offer Id
                        store.Serialize(context);
                    }
                }

                context.SerializeEndElement();
            }
            else
            {  //Serilization for to save to DB

                //If this offer is to be added/deleted; mark all children to be added/deleted.
                if (this.modified == InsertDataChangeType.Add)
                {
                    this.SetModified(this.modified, true);
                }

                if (this.modified != InsertDataChangeType.None)
                {
                    context.SerializeStartElement("Offer");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("offerId", this.Id);
                    context.SerializeElement("mediaId", this.mediaId);
                    context.SerializeElement("name", this.name);
                    context.SerializeEndElement();
                }

                //OfferInstance
                foreach (OfferInstance instance in this.instances)
                {
                    if (instance != null)
                    {
                        instance.OfferId = this.id; //set offer id
                        instance.Serialize(context);
                    }
                }

                //OfferStore
                foreach (OfferStore store in this.stores)
                {
                    if (store != null)
                    {
                        store.OfferId = this.id;    //set offer Id
                        store.Serialize(context);
                    }

                }
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::offerId");
                if (null != attr) this.id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::name");
                if (null != attr) this.name = attr.InnerText;

                //OfferMode should be int in XML
                attr = node.SelectSingleNode("child::OfferMode");
                if (null != attr) this.offerType = OfferMode.Standalone + (Serialization.DeserializeIntElement(attr.InnerText) - 1);

                XmlNodeList nodes = node.SelectNodes("child::OfferInstance");
                foreach (XmlNode subnode in nodes)
                {
                    OfferInstance instance = new OfferInstance();
                    instance.OfferId = this.id;
                    instance.Deserialize(subnode);
                    this.instances.Add(instance);
                }

                nodes = node.SelectNodes("child::OfferStore");
                foreach (XmlNode subnode in nodes)
                {
                    OfferStore store = new OfferStore();
                    store.OfferId = this.id;
                    store.Deserialize(subnode);
                    this.stores.Add(store);
                }

            }

        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(InsertDataChangeType type, bool cascade)
        {
            this.modified = type;
            if (cascade)
            {
                //Set modified to children
                foreach (OfferInstance instance in instances)
                    instance.SetModified(type, cascade);

                foreach (OfferStore store in stores)
                    store.SetModified((DataChangeType)type, cascade);
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\OfferInstanceMediaType.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the OfferMedia data, and creation of the OfferMedia class.
    /// </summary>
    public class OfferInstanceMediaType : ICatalogData
    {
        #region Fields
        private Guid offerId;
        private Guid mediaId;
        private Guid mediaInstanceId;
        private string id;
        private string name;
        private bool isAdSupported;
        private int videoDefinitionId;
        private string languageCode;
        private string previewCountryCode;
        private string videoAspectRatio;
        private string videoResolution;
        private string audioChannel;
        private string videoDefName;
        private string audioTrackLang;
        private string subTitleLocale;
        private bool enabled;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal OfferInstanceMediaType(SqlDataReader reader)
        {
            this.mediaId = SqlHelper.GetNullableGuid(reader, "mediaId", Guid.Empty);
            this.mediaInstanceId = SqlHelper.GetNullableGuid(reader, "mediaInstanceId", Guid.Empty);
            this.isAdSupported = (reader.GetByte(reader.GetOrdinal("isAdSupported")) == 1);
            this.videoDefinitionId = reader.GetInt32(reader.GetOrdinal("videoDefinitionId"));
            this.languageCode = SqlHelper.GetNullableString(reader, "subTitleLang", string.Empty);
            this.audioTrackLang = SqlHelper.GetNullableString(reader, "audioTrackLang", string.Empty);
            this.audioChannel = SqlHelper.GetNullableString(reader, "audioChannel", string.Empty);
            this.previewCountryCode = SqlHelper.GetNullableString(reader, "countryCode", string.Empty);
            this.videoAspectRatio = SqlHelper.GetNullableString(reader, "videoAspectRatio", string.Empty);
            this.videoResolution = SqlHelper.GetNullableString(reader, "videoResolution", string.Empty);
            this.subTitleLocale = SqlHelper.GetNullableString(reader, "subTitleLocale", string.Empty);
            this.enabled = (reader.GetByte(reader.GetOrdinal("enabled")) == 1);
            this.videoDefName = (VideoDefinition.Get(this.VideoDefinitionId)).Name;

            //Bug #117510 requires media insstance for offer to display additional information
            //(locale, audioChannel, isPreview). Whether to make these properties public (and therefore
            //web service interface changes), the information is packed into the id/name properties since
            //this information is only needed by the UI.
            //TODO: V2 should modified to not expose isAdSupported/videoDefinitionId/languageCode as public
            //property.

            // Construct the ID/Name property to encodes needed information to mediaInstance for offer.
            this.id = String.Format("{0},{1},{2},{3},{4},{5},{6}",
                    this.mediaInstanceId,
                    this.videoDefinitionId,
                    this.subTitleLocale,
                    audioTrackLang,
                    audioChannel,
                    previewCountryCode,
                    this.isAdSupported);

            this.name = String.Format("{0};Subtitle-{1};AudioTrack-{2};Channel-{3};Preview-{4};Ads-{5}",
                videoDefName,
                (String.IsNullOrEmpty(this.subTitleLocale) ? "None" : this.subTitleLocale),
                (String.IsNullOrEmpty(audioTrackLang)? "None" : audioTrackLang),
                (String.IsNullOrEmpty(audioChannel)? "None" : audioChannel),
                previewCountryCode,
                (this.isAdSupported==true? "Yes" : "No"));
        }

        /// <summary>
        /// Determine whether the target OfferInstanceMediaType object in the specified list to check.
        /// </summary>
        /// <param name="mediaTypes"></param>
        /// <param name="target"></param>
        /// <returns></returns>
        internal static bool IsQualifiedMediaType(OfferInstanceMediaType[] mediaTypes, OfferInstanceMediaType target)
        {
            if (mediaTypes == null)
                return false;

            string[] targetIDs = target.Id.Split(',');
            foreach (OfferInstanceMediaType mediaType in mediaTypes)
            {
                if (mediaType.Modified == DataChangeType.Delete)
                {
                    continue;
                }

                string[] matchIDs = mediaType.Id.Split(',');
                int startIndex = (matchIDs[0].Equals(Guid.Empty.ToString())) ? 1 : 0;
                bool match = true;

                for (int i = startIndex; i < matchIDs.Length; i++)
                {
                    if (matchIDs[i].Equals(targetIDs[i]) == false)
                    {
                        match = false;
                        break;
                    }
                }

                if (match)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public OfferInstanceMediaType()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the offer Id for this object.
        /// </summary>
        internal Guid OfferId
        {
            set { this.offerId = value; }
        }

        /// <summary>
        /// Allow internal class to get or set the media Id for this object.
        /// </summary>
        internal Guid MediaId
        {
            get { return this.mediaId; }
            set { this.mediaId = value; }
        }

        /// <summary>
        /// Allow internal class to get or set the media instance Id for this object.
        /// </summary>
        internal Guid MediaInstanceId
        {
            get { return this.mediaInstanceId; }
            set { this.mediaInstanceId = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string AudioTrackLang
        {
            get
            {
                return this.audioTrackLang;
            }
            set
            {
            }
        }

        /// <summary>
        /// The string of the subtitle locale
        /// </summary>
        public string SubTitleLocale
        {
            get
            {
                return this.subTitleLocale;
            }
            set
            {
            }
        }

        /// <summary>
        /// The string of the type of video definition
        /// </summary>
        public string VideoDefName
        {
            get
            {
                return this.videoDefName;
            }
            set
            {
            }
        }

        /// <summary>
        /// The string identifier for this OfferMediaInstanceType
        /// </summary>
        public string Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// The string of the audio channel
        /// </summary>
        public string AudioChannel
        {
            get
            {
                return this.audioChannel;
            }
            set
            {
            }
        }

        /// <summary>
        /// The string of the preview country code
        /// </summary>
        public string PreviewCountryCode
        {
            get
            {
                return this.previewCountryCode;
            }
            set
            {
            }
        }

        /// <summary>
        /// The string of the video aspect ratio
        /// </summary>
        public string VideoAspectRatio
        {
            get
            {
                return this.videoAspectRatio;
            }
            set
            {
            }
        }

        /// <summary>
        /// The string of the video resolution
        /// </summary>
        public string VideoResolution
        {
            get
            {
                return this.videoResolution;
            }
            set
            {
            }
        }

        /// <summary>
        /// Gets or sets the name for this OfferMediaInstanceType.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets whether this media instance type is ad supported.
        /// </summary>
        public bool IsAdSupported
        {
            get
            {
                return this.isAdSupported;
            }
            set
            {
                this.isAdSupported = value;
            }
        }

        /// <summary>
        /// Gets or sets the video definition id for this media instance type.
        /// </summary>
        public int VideoDefinitionId
        {
            get
            {
                return this.videoDefinitionId;
            }
            set
            {
                this.videoDefinitionId = value;
            }
        }


        /// <summary>
        /// Gets or sets the language code for this media instance type.
        /// </summary>
        public string LanguageCode
        {
            get
            {
                return this.languageCode;
            }
            set
            {
                this.languageCode = value;
            }
        }

        /// <summary>
        /// Gets or sets whether or not this media instance is enabled or not
        /// </summary>
        public bool Enabled
        {
            get
            {
                return this.enabled;
            }
            set
            {
                this.enabled = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("OfferInstanceMediaType");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("offerId", this.offerId);
                context.SerializeElement("mediaId", this.mediaId);                
                context.SerializeElement("isAdSupported", this.isAdSupported);
                context.SerializeElement("videoDefinitionId", this.videoDefinitionId);
                context.SerializeElement("languageCode", this.languageCode);
                context.SerializeElement("mediaInstanceId", this.mediaInstanceId);
                context.SerializeElement("id", this.id);
                context.SerializeElement("name", this.name);
                context.SerializeElement("previewCountryCode", this.previewCountryCode);
                context.SerializeElement("videoAspectRatio", this.videoAspectRatio);
                context.SerializeElement("videoResolution", this.videoResolution);
                context.SerializeElement("audioChannel", this.audioChannel);
                context.SerializeElement("videoDefName", this.videoDefName);
                context.SerializeElement("audioTrackLang", this.audioTrackLang);
                context.SerializeElement("subTitleLocale", this.subTitleLocale);
                context.SerializeElement("enabled", this.enabled); 
               
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;
                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::offerId");
                if (null != attr) this.offerId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::isAdSupported");
                if (null != attr) this.isAdSupported = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::videoDefinitionId");
                if (null != attr) this.videoDefinitionId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::languageCode");
                if (null != attr) this.languageCode = attr.InnerText;

                attr = node.SelectSingleNode("child::mediaInstanceId");
                if (null != attr) this.mediaInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::id");
                if (null != attr) this.id = attr.InnerText;

                attr = node.SelectSingleNode("child::name");
                if (null != attr) this.name = attr.InnerText;

                attr = node.SelectSingleNode("child::previewCountryCode");
                if (null != attr) this.previewCountryCode = attr.InnerText;

                attr = node.SelectSingleNode("child::videoAspectRatio");
                if (null != attr) this.videoAspectRatio = attr.InnerText;

                attr = node.SelectSingleNode("child::videoResolution");
                if (null != attr) this.videoResolution = attr.InnerText;

                attr = node.SelectSingleNode("child::audioChannel");
                if (null != attr) this.audioChannel = attr.InnerText;

                attr = node.SelectSingleNode("child::videoDefName");
                if (null != attr) this.videoDefName = attr.InnerText;

                attr = node.SelectSingleNode("child::audioTrackLang");
                if (null != attr) this.audioTrackLang = attr.InnerText;

                attr = node.SelectSingleNode("child::subTitleLocale");
                if (null != attr) this.subTitleLocale = attr.InnerText;

                attr = node.SelectSingleNode("child::enabled");
                if (null != attr) this.enabled = Serialization.DeserializeBoolElement(attr.InnerText);
           }

        }


        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\OfferInstanceUserType.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the OfferInstanceUserType data, and creation of the OfferInstanceUserType class.
    /// </summary>
    public class OfferInstanceUserType : ICatalogData
    {
        #region Fields
        private Guid offerInstanceId;
        private int userTypeId;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal OfferInstanceUserType(SqlDataReader reader)
        {
            this.userTypeId = reader.GetInt32(reader.GetOrdinal("userTypeId"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public OfferInstanceUserType()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the offerInstance Id for this object.
        /// </summary>
        internal Guid OfferInstanceId
        {
            set { this.offerInstanceId = value; }
        }

        /// <summary>
        /// Gets or sets the id of the user type the offer is for.
        /// </summary>
        public int UserTypeId
        {
            get
            {
                return this.userTypeId;
            }
            set
            {
                if (UserType.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid userTypeId specified [{0}].", value));
                this.userTypeId = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("OfferInstanceUserType");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("offerInstanceId", this.offerInstanceId);
                context.SerializeElement("userTypeId", this.userTypeId);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;
                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());
               
                attr = node.SelectSingleNode("child::offerInstanceId");
                if (null != attr) this.offerInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::userTypeId");
                if (null != attr) this.userTypeId = Serialization.DeserializeIntElement(attr.InnerText);
               
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\OfferSearch.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define OfferSearchResponse class.
    /// </summary>
    public class OfferSearchResponse : Response
    {
        # region constants        
        private const string emptyOffer = "(No Offer exists)";
        # endregion
        #region Fields
        private Guid offerId;
        private string offerName;
        private Guid mediaId;
        private string mediaTitle;
        private string country;
        private string seasonNumber;
        private string endDate;
        private string visibilityStatusName;
        #endregion

        #region Properties
        /// <summary>
        /// Offer id
        /// </summary>
        public Guid OfferId
        {
            get
            {
                return this.offerId;
            }
            set
            {
                this.offerId = value;
            }
        }

        /// <summary>
        /// Offer title
        /// </summary>
        public string OfferName
        {
            get
            {
                return this.offerName;
            }
            set
            {
                this.offerName = value;
            }
        }

        /// <summary>
        /// Media id
        /// </summary>
        public Guid MediaId
        {
            get
            {
                return this.mediaId;
            }
            set
            {
                this.mediaId = value;
            }
        }
        /// <summary>
        /// Media Title
        /// </summary>
        public string MediaTitle
        {
            get
            {
                return this.mediaTitle;
            }
            set
            {
                this.mediaTitle = value;
            }
        }

        /// <summary>
        /// Media locale
        /// </summary>
        public string Country
        {
            get
            {
                return this.country;
            }
            set
            {
                this.country = value;
            }
        }

        /// <summary>
        /// Season number (for a media if it is a TV Season)
        /// </summary>
        public string SeasonNumber
        {
            get
            {
                return this.seasonNumber;
            }
            set
            {
                this.seasonNumber = value;
            }
        }

        /// <summary>
        /// The date in which the video is available in the catalog.
        /// </summary>
        public string EndDate
        {
            get
            {
                return this.endDate;
            }
            set
            {
                this.endDate = value;
            }
        }
        /// <summary>
        /// Gets/Sets the visbility status name
        /// </summary>
        public string VisibilityStatusName
        {
            get
            {
                return this.visibilityStatusName;
            }
            set
            {
                this.visibilityStatusName = value;
            }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public OfferSearchResponse()
        {
        }

        /// <summary>
        /// Private constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal OfferSearchResponse(SqlDataReader reader)
        {
            this.offerId = SqlHelper.GetNullableGuid(reader, "offerId", Guid.Empty);
            this.offerName = SqlHelper.GetNullableString(reader, "offerName", emptyOffer);
            this.VisibilityStatusName = SqlHelper.GetNullableString(reader, "offerVisibilityStatus", emptyOffer);
            this.mediaId = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.mediaTitle = reader.GetString(reader.GetOrdinal("mediaTitle"));
            this.country = SqlHelper.GetNullableString(reader, "countryName", emptyOffer);
            if (reader.IsDBNull(reader.GetOrdinal("seasonNumber")))
                this.seasonNumber = "";
            else
                this.seasonNumber = reader.GetInt32(reader.GetOrdinal("seasonNumber")).ToString();
            if (reader.IsDBNull(reader.GetOrdinal("offerInstanceEndDateTime")))
                this.EndDate = emptyOffer;
            else
                this.EndDate = reader.GetDateTime(reader.GetOrdinal("offerInstanceEndDateTime")).ToShortDateString();
        }
        #endregion
    }

    /// <summary>
    /// Define video search request class.
    /// </summary>
    public class OfferSearchRequest : Request
    {
        #region Fields
        private int? providerId = null;
        private int? mediaTypeId = null;
        private int? mediaStatusId = null;
        private Guid? mediaId = null;
        private string mediaTitle = null;
        private string offerName = null;
        private bool includeExpired = true;
        private DateTime? startDate = null;
        #endregion

        #region Properties
        /// <summary>
        /// The id of the media type.
        /// </summary>
        public int? MediaTypeId
        {
            get
            {
                return this.mediaTypeId;
            }
            set
            {
                this.mediaTypeId = value;
            }
        }

        /// <summary>
        /// The id of the media.
        /// </summary>
        public Guid? MediaId
        {
            get
            {
                return this.mediaId;
            }
            set
            {
                this.mediaId = value;
            }
        }

        /// <summary>
        /// The title of the media.
        /// </summary>
        public string MediaTitle
        {
            get
            {
                return this.mediaTitle;
            }
            set
            {
                this.mediaTitle = value;
            }
        }

        /// <summary>
        /// The status of the media.
        /// </summary>
        public int? MediaStatusId
        {
            get
            {
                return this.mediaStatusId;
            }
            set
            {
                this.mediaStatusId = value;
            }
        }

        /// <summary>
        /// The id of the media provider.
        /// </summary>
        public int? ProviderId
        {
            get
            {
                return this.providerId;
            }
            set
            {
                this.providerId = value;
            }
        }

        /// <summary>
        /// The name of the offer.
        /// </summary>
        public string OfferName
        {
            get
            {
                return this.offerName;
            }
            set
            {
                this.offerName = value;
            }
        }
        /// <summary>
        /// Gets/Sets the IncludeExpired Offers FIlter flag
        /// </summary>
        public bool IncludeExpired
        {
            get
            {
                return this.includeExpired;
            }
            set
            {
                this.includeExpired = value;
            }
        }

        /// <summary>
        /// The start date of the offer instance
        /// </summary>
        public DateTime? StartDate
        {
            get
            {
                return this.startDate;
            }
            set
            {
                this.startDate = value;
            }
        }

        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public OfferSearchRequest()
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Searches for videos specified by the search request object.
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<OfferSearchResponse> responses = new List<OfferSearchResponse>();
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "OfferSearch",
                        this.providerId,
                        (this.mediaStatusId != -1) ? this.mediaStatusId : null,
                        this.mediaTypeId,
                        this.MediaId,
                        (this.mediaTitle != null && this.mediaTitle.Trim().Length > 0) ? this.mediaTitle : null,
                        (this.offerName != null && this.offerName.Trim().Length > 0) ? this.offerName : null,
                        this.includeExpired,
                        this.startDate,
                        (this.MaxResults <= 0) ? base.MaxResults : this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new OfferSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "OfferSearch");
                throw;
            }
            return responses.ToArray();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\PackageType.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of PackageType data in the catalog, 
    /// </summary>
    public class PackageType : Utils.IIdentifiable<Int32>
    {
        #region Fields
        private int id;
        private string name;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.Cache<PackageType, Int32> PackageTypeCache = new Utils.Cache<PackageType, Int32>(
                        new Utils.Cache<PackageType, Int32>.CacheDataRetrievalDelegate(GetData),
                        CacheRefreshPeriod);

        #endregion

        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public PackageType()
        {
        }

        /// <summary>
        /// Instantiates a payment type from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public PackageType(SqlDataReader reader)
        {
            this.id = reader.GetInt32(reader.GetOrdinal("packageTypeId"));
            this.name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets/sets the int that uniquely identifies this PackageType
        /// </summary>
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                Validate.IsGreaterThanOrEqual(value, 0, "id", "id");
                id = value;
            }
        }
        /// <summary>
        /// Gets or sets the name assigned to this LicenseClass
        /// </summary>
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                Validate.IsNotNull(value, "name", "name");
                Validate.IsNotLongerThan(value, 50, "name", "name");
                name = value;
            }
        }

        /// <summary>
        /// Id to be used by cache
        /// </summary>
        public int PrimaryId
        {
            get { return Id; }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a PackageType for the given id.
        /// </summary>
        /// <param name="id">The id of the PackageType to get</param>
        /// <returns>The PackageType for the given id.</returns>
        public static PackageType Get(int id)
        {
            return PackageTypeCache.Get(id);
        }

        /// <summary>
        /// Gets all PackageType in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<PackageType> Get()
        {
            return PackageTypeCache.Get();
        }

        /// <summary>
        /// Gets all PackageType from the database.
        /// </summary>
        /// <returns></returns>
        public static List<PackageType> GetData()
        {
            List<PackageType> packageTypes = new List<PackageType>();

            using (SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "PackageTypeGet"
                    ))
            {
                while (reader.Read())
                {
                    packageTypes.Add(new PackageType(reader));
                }
            }
            return packageTypes;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\PaymentType.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of PaymentType data in the catalog, 
    /// </summary>
    public class PaymentType : Utils.IIdentifiable<Int32>
    {
        #region Fields
        private int id;
        private string name;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.Cache<PaymentType, Int32> PaymentTypeCache = new Utils.Cache<PaymentType, Int32>(
                        new Utils.Cache<PaymentType, Int32>.CacheDataRetrievalDelegate(GetData),
                        CacheRefreshPeriod);

        #endregion

        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public PaymentType()
        {
        }

        /// <summary>
        /// Instantiates a payment type from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public PaymentType(SqlDataReader reader)
        {
            this.id = reader.GetInt32(reader.GetOrdinal("paymentTypeId"));
            this.name = reader.GetString(reader.GetOrdinal("internalName"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets/sets the int that uniquely identifies this PaymentType
        /// </summary>
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                Validate.IsGreaterThanOrEqual(value, 0, "id", "id");
                id = value;
            }
        }
        /// <summary>
        /// Gets or sets the name assigned to this LicenseClass
        /// </summary>
        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                Validate.IsNotNull( value, "name", "name");
                Validate.IsNotLongerThan( value, 50, "name", "name");
                name = value;
            }
        }

        /// <summary>
        /// Id to be used by cache
        /// </summary>
        public int PrimaryId
        {
            get { return Id; }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a PaymentType for the given id.
        /// </summary>
        /// <param name="id">The id of the PaymentType to get</param>
        /// <returns>The PaymentType for the given id.</returns>
        public static PaymentType Get(int id)
        {
            return PaymentTypeCache.Get(id);
        }

        /// <summary>
        /// Gets all PaymentType in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<PaymentType> Get()
        {
            return PaymentTypeCache.Get();
        }

        /// <summary>
        /// Gets all PaymentType from the database.
        /// </summary>
        /// <returns></returns>
        public static List<PaymentType> GetData()
        {
            List<PaymentType> paymentTypes = new List<PaymentType>();

            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "PaymentTypeGet"
                    ))
            {
                while (reader.Read())
                {
                    paymentTypes.Add(new PaymentType(reader));
                }
            }
            return paymentTypes;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\OfferStore.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the OfferStore data, and creation of the OfferStore class.
    /// </summary>
    public class OfferStore : ICatalogData
    {
        #region Fields
        private Guid offerId;
        private int storeId;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal OfferStore(SqlDataReader reader)
        {
            this.storeId = reader.GetInt32(reader.GetOrdinal("storeId"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public OfferStore()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the offer Id for this object.
        /// </summary>
        internal Guid OfferId
        {
            set { this.offerId = value; }
        }

        /// <summary>
        /// Gets or sets the id of the store the offer is for.
        /// </summary>
        public int StoreId
        {
            get
            {
                return this.storeId;
            }
            set
            {
                if (Store.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid storeId specified [{0}].", value));
                this.storeId = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("OfferStore");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("offerId", this.offerId);
                context.SerializeElement("storeId", this.storeId);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;
                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::offerId");
                if (null != attr) this.offerId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::storeId");
                if (null != attr) this.storeId = Serialization.DeserializeIntElement(attr.InnerText);

            }
        }


        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\PodcastEpisode.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.XPath;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Episodes for a podcast
    /// </summary>
    public class PodcastEpisode 
    {
        #region Fields
        private string title;
        private DateTime? publishedDate;
        private string enclosureUrl;    
        #endregion

        #region Constructors
        /// <summary>
        /// Default constructor required for SOAP.
        /// </summary>
        public PodcastEpisode()
        {
        } 

        
        /// <summary>
        /// Gets or sets the title of the episode
        /// </summary>
        public string Title
        {
            get
            {
                return this.title;
            }
            set
            {
                this.title = value;
            }
        }

        /// <summary>
        /// Gets or sets the date of publish
        /// </summary>
        public DateTime? PublishedDate
        {
            get
            {
                return this.publishedDate;
            }
            set
            {
                this.publishedDate = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the url for the enclosure.
        /// </summary>
        public string EnclosureUrl
        {
            get
            {
                return this.enclosureUrl;
            }
            set
            {
                this.enclosureUrl = value;
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\PodcastSearch.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Text;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define podcast search response class.
    /// </summary>
    public class PodcastSearchResponse : Response
    {
        #region Fields
        private Guid mediaId;
        private string title;
        private string locale;
        private DateTime availableDate;
        #endregion

        #region Properties
        /// <summary>
        /// Podcast id
        /// </summary>
        public Guid MediaId
        {
            get 
            { 
                return this.mediaId; 
            }
            set 
            {
                this.mediaId = value;
            }
        }

        /// <summary>
        /// Podcast title
        /// </summary>
        public string Title
        {
            get 
            { 
                return this.title; 
            }
            set 
            {
                this.title = value;
            }
        }

        /// <summary>
        /// Podcast title locale
        /// </summary>
        public string Locale
        {
            get 
            { 
                return this.locale; 
            }
            set 
            {
                this.locale = value;
            }
        }

        /// <summary>
        /// The date in which the Podcast is available in the catalog.
        /// </summary>
        public DateTime AvailableDate
        {
            get 
            { 
                return this.availableDate; 
            }
            set
            {
                this.availableDate = value;
            }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public PodcastSearchResponse()
        {
        }

        /// <summary>
        /// Private constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal PodcastSearchResponse(SqlDataReader reader)
        {
            this.mediaId = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.title = reader.IsDBNull(reader.GetOrdinal("title")) ? "" : reader.GetString(reader.GetOrdinal("title"));
            this.locale = reader.GetString(reader.GetOrdinal("locale"));
            this.availableDate = reader.IsDBNull(reader.GetOrdinal("visibilityDate")) ? DateTime.MinValue : reader.GetDateTime(reader.GetOrdinal("visibilityDate"));
        }
        #endregion
    }

    /// <summary>
    /// Define Podcast search request class.
    /// </summary>
    public class PodcastSearchRequest : Request
    {
        #region Fields
        private Guid? mediaId = null;
        private string mediaTitle = null;
        private String podcastUrl = null;
        private int[] subCategoryIds = null;
        private DateTime? submittedAfter = null;
        #endregion

        #region Properties
        /// <summary>
        /// The id of the podcast.
        /// </summary>
        public Guid? MediaId
        {
            get 
            { 
                return this.mediaId; 
            }
            set 
            { 
                if (( value == null ) || ( value == Guid.Empty ))
                {
                    this.mediaId = null;
                }
                else
                {
                    this.mediaId = value; 
                }
            }
        }

        /// <summary>
        /// The title of the media.
        /// </summary>
        public string MediaTitle
        {
            get 
            { 
                return this.mediaTitle; 
            }
            set 
            { 
                this.mediaTitle = value; 
            }
        }

        /// <summary>
        /// The podcasts url.
        /// </summary>
        public string PodcastUrl
        {
            get
            {
                return this.podcastUrl;
            }
            set
            {
                this.podcastUrl = value;
            }
        }


        /// <summary>
        /// The list of sub-category ids.
        /// </summary>
        public int[] SubcategoryIds
        {
            get
            {
                return this.subCategoryIds;
            }
            set
            {
                subCategoryIds = value;
            }
        }

        /// <summary>
        /// The date afterwhich the podcast was submitted to the catalog
        /// </summary>
        public DateTime? SubmittedAfter
        {
            get
            {
                return this.submittedAfter;
            }
            set
            {
                if ( value == DateTime.MinValue )
                {
                    this.submittedAfter = null;
                }
                else
                {
                    this.submittedAfter = value;
                }
            }
        }
            
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public PodcastSearchRequest()
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Searches for podcasts specified by the search request object.
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<PodcastSearchResponse> responses = new List<PodcastSearchResponse>();
            try
            {
                //Build categoryIds string if any
                string concatenatedSubcategoryIds = null;
                if (( subCategoryIds != null ) && ( subCategoryIds.Length > 0 ))
                {  
                    concatenatedSubcategoryIds = String.Empty;
                    foreach (int id in this.subCategoryIds)
                    {
                        
                        if (concatenatedSubcategoryIds.Length > 0)
                        {
                            concatenatedSubcategoryIds += ",";
                        }
                        concatenatedSubcategoryIds += id.ToString();
                    }
                }

                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "PodcastSearch",
                        this.MediaId ,
                        this.mediaTitle,
                        this.podcastUrl,
                        concatenatedSubcategoryIds,
                        this.submittedAfter,
                        (this.MaxResults <= 0)? base.MaxResults : this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new PodcastSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "PodcastSearch");
                throw;
            }
            return responses.ToArray();
        }        
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Podcast.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.XPath;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides retrieval and editing of Podcast data in the catalog.
    /// </summary>
    public class Podcast : Media
    {
        #region Fields
        private string rssUrl;
        private string ownerEmail;
        private string ownerName;
        private string creatorName;
        private string imageUrl;
        private string websiteUrl;
        private Byte starRating;
        private bool isItemSortAsc;
        private bool isExplicit;
        private PodcastContentType contentType = PodcastContentType.Unknown;
        private List<PodcastEpisode> episodes = new List<PodcastEpisode>();
        private InsertDataChangeType modified = InsertDataChangeType.None;

        private String xml = String.Empty;
        private String itunesKeywords;
        private Boolean itunesBlock;
        private List<String> itunesCategories = new List<string>();
        private const int podcasturlLength = 2048;

        /// <summary>
        /// Supported media type for the Podcast class.
        /// </summary>
        public enum SupportedMediaType
        {
            /// <summary>
            /// Podcast
            /// </summary>
            Podcast = 13
        }


        /// <summary>
        /// Types of podcast content.
        /// </summary>
        public enum PodcastContentType : short
        {
            /// <summary>
            /// Unknown
            /// </summary>
            Unknown = 0,

            /// <summary>
            /// Audio
            /// </summary>
            Audio = 1,

            /// <summary>
            /// Video
            /// </summary>
            Video = 2,

            /// <summary>
            /// Audio and Video
            /// </summary>
            AudioAndVideo = 3
        }

        private static String ITunesNamespaceUppercase = "http://www.itunes.com/DTDs/Podcast-1.0.dtd";
        private static String ITunesNamespaceLowercase = "http://www.itunes.com/dtds/podcast-1.0.dtd";

        private static String ITunesAuthorXPath = "//channel/itunesUpper:author"
                                                    + " | //channel/itunesUpper:author";

        private static String ITunesKeywordsXPath = "//channel/itunesUpper:keywords"
                                                    + " | //channel/itunesLower:keywords";

        private static String ITunesExplicitXPath = "//channel/itunesUpper:explicit"
                                                    + " | //channel/itunesLower:explicit";

        private static String ITunesImageXPath = "//channel/itunesUpper:image"
                                                    + "| //channel/itunesLower:image"
                                                    + "| //channel/itunesUpper:link[@rel='image']"
                                                    + "| //channel/itunesLower:link[@rel='image']";

        private static String ITunesOwnerEmailXPath = "//channel/itunesUpper:owner/itunesUpper:email"
                                                    + "| //channel/itunesLower:owner/itunesLower:email";

        private static String ITunesOwnerNameXPath = "//channel/itunesUpper:owner/itunesUpper:name"
                                                    + "| //channel/itunesLower:owner/itunesLower:name";

        private static String ITunesBlockXPath = "//channel/itunesUpper:block"
                                                    + "| //channel/itunesLower:block";

        private static String ITunesCategoryXPath = "//channel/itunesUpper:category"
                                                    + "| //channel/itunesLower:category";

        private static String ITunesSubcategoryXSubPath = "itunesUpper:category"
                                                    + "| itunesLower:category";
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        private Podcast(SqlDataReader reader)
            : base(reader)
        {
            reader.NextResult();
            if (reader.Read())
            {
                this.rssUrl = SqlHelper.GetNullable<String>(reader, "rssUrl", String.Empty);
                this.ownerEmail = SqlHelper.GetNullable<String>(reader, "ownerEmail", String.Empty);
                this.ownerName = SqlHelper.GetNullable<String>(reader, "ownerName", String.Empty);
                this.creatorName = SqlHelper.GetNullable<String>(reader, "creatorName", String.Empty);
                this.imageUrl = SqlHelper.GetNullable<String>(reader, "imageUrl", String.Empty);
                this.websiteUrl = SqlHelper.GetNullable<String>(reader, "websiteUrl", String.Empty);
                this.starRating = reader.GetByte(reader.GetOrdinal("starRating"));
                this.isItemSortAsc = (reader.GetByte(reader.GetOrdinal("itemSortAsc")) == 0) ? false : true;
                this.isExplicit = (reader.GetByte(reader.GetOrdinal("explicit")) == 0) ? false : true;
                this.contentType = (PodcastContentType)Enum.ToObject(typeof(PodcastContentType), reader.GetByte(reader.GetOrdinal("contentType")));
            }
        }


        /// <summary>
        /// Default constructor required for SOAP.
        /// </summary>
        public Podcast()
        {
        }

        private Podcast(Uri podcastUri, XPathDocument document)
        {
            // Get the xml
            StringWriter sw = new StringWriter();
            XmlTextWriter tw = new XmlTextWriter(sw);
            XPathNavigator navigator = document.CreateNavigator();
            navigator.WriteSubtree(tw);
            xml = sw.ToString();
            tw.Close();

            // Create a MediaLocale record to hold title etc.
            MediaLocale mediaLocale = new MediaLocale();
            this.Locales = new MediaLocale[] { mediaLocale };

            XPathNodeIterator iterator;

            // Title
            iterator = navigator.Select("//channel/title");
            if (iterator.MoveNext())
            {
                mediaLocale.Title = iterator.Current.Value;
                mediaLocale.ReducedTitle = mediaLocale.Title;
                mediaLocale.TitleSort = mediaLocale.Title;
            }

            // Description
            iterator = navigator.Select("//channel/description");
            if (iterator.MoveNext())
            {
                mediaLocale.Description = iterator.Current.Value;
                mediaLocale.ReducedDescription = mediaLocale.Description;
            }

            // Language
            iterator = navigator.Select("//channel/language");
            if (iterator.MoveNext())
            {
                String language = iterator.Current.Value;
                Locale locale = Locale.Get(language);
                if (locale == null)
                {
                    locale = Locale.Get("en-us");
                }
                mediaLocale.Lcid = locale.LCID;
            }

            // RssUrl
            this.RssUrl = podcastUri.ToString();

            // Website
            iterator = navigator.Select("//channel/link");
            if (iterator.MoveNext())
            {
                this.WebsiteUrl = iterator.Current.Value;
            }

            // Copyright
            iterator = navigator.Select("//channel/copyright");
            if (iterator.MoveNext())
            {
                mediaLocale.Copyright = iterator.Current.Value;
            }

            // Published date
            iterator = navigator.Select("//channel/pubDate");
            if (iterator.MoveNext())
            {
                String pudDateString = iterator.Current.Value;
                try
                {
                    this.OriginalReleaseDate = DateTime.Parse(pudDateString);
                }
                catch (Exception)
                {
                }
            }

            XmlNamespaceManager namespaceManager = new XmlNamespaceManager(navigator.NameTable);
            namespaceManager.AddNamespace("itunesUpper", ITunesNamespaceUppercase);
            namespaceManager.AddNamespace("itunesLower", ITunesNamespaceLowercase);

            // itunes author
            iterator = navigator.Select(ITunesAuthorXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                this.CreatorName = iterator.Current.Value;
            }

            // itunes keywords
            iterator = navigator.Select(ITunesKeywordsXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                itunesKeywords = iterator.Current.Value;
            }

            // itunes explicit
            iterator = navigator.Select(ITunesExplicitXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                Boolean isExplicit = false;
                Boolean.TryParse(iterator.Current.Value, out isExplicit);
                this.IsExplicit = isExplicit;
            }

            iterator = navigator.Select("//channel/image/url");
            if (iterator.MoveNext())
            {
                this.ImageUrl = iterator.Current.Value;
            }
            else
            {
                // itunes image - only if regular image is still null          
                iterator = navigator.Select(ITunesImageXPath, namespaceManager);
                if (iterator.MoveNext())
                {
                    this.ImageUrl = iterator.Current.GetAttribute("href", String.Empty);
                }
            }

            // itunes owner email
            iterator = navigator.Select(ITunesOwnerEmailXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                this.OwnerEmail = iterator.Current.Value;
            }

            // itunes owner name
            iterator = navigator.Select(ITunesOwnerNameXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                this.OwnerName = iterator.Current.Value;
            }

            // itunes block
            iterator = navigator.Select(ITunesBlockXPath, namespaceManager);
            if (iterator.MoveNext())
            {
                Boolean.TryParse(iterator.Current.Value, out itunesBlock);
            }

            iterator = navigator.Select(ITunesCategoryXPath, namespaceManager);
            while (iterator.MoveNext())
            {
                // look for sub categories
                XPathNodeIterator subCategoryIterator = iterator.Current.Select(ITunesSubcategoryXSubPath, namespaceManager);
                String category = iterator.Current.GetAttribute("text", String.Empty);
                if (subCategoryIterator.Count > 0)
                {
                    while (subCategoryIterator.MoveNext())
                    {
                        itunesCategories.Add(String.Format("{0} : {1}", category, subCategoryIterator.Current.GetAttribute("text", String.Empty)));
                    }
                }
                else
                {
                    itunesCategories.Add(category);
                }
            }

            // Content type
            this.contentType = PodcastContentType.AudioAndVideo;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the RSS feed url of this podcast.
        /// </summary>
        public String RssUrl
        {
            get
            {
                return this.rssUrl;
            }
            set
            {

                Validate.IsValidURL(value, podcasturlLength, "RssUrl", "RssUrl");
                this.rssUrl = value;

            }
        }


        /// <summary>
        /// Gets or sets the owner email of this podcast.
        /// </summary>
        public string OwnerEmail
        {
            get
            {
                return this.ownerEmail;
            }
            set
            {
                this.ownerEmail = value;
            }
        }

        /// <summary>
        /// Gets or sets the owner name of this podcast.
        /// </summary>
        public string OwnerName
        {
            get
            {
                return this.ownerName;
            }
            set
            {
                this.ownerName = value;
            }
        }

        /// <summary>
        /// Gets or sets the creator of this podcast.
        /// </summary>
        public string CreatorName
        {
            get
            {
                return this.creatorName;
            }
            set
            {
                this.creatorName = value;
            }
        }

        /// <summary>
        /// Gets or sets the url of the image associates with this podcast.
        /// </summary>
        public String ImageUrl
        {
            get
            {
                return this.imageUrl;
            }
            set
            {
                if ((value != null) && (value != String.Empty))
                {

                    Validate.IsValidURL(value, podcasturlLength, "ImageUrl", "ImageUrl");
                    this.imageUrl = value;
                }
                else
                {
                    this.imageUrl = null;
                }
            }
        }

        /// <summary>
        /// Gets or sets the url of the website for this podcast.
        /// </summary>
        public String WebsiteUrl
        {
            get
            {
                return this.websiteUrl;
            }
            set
            {
                if (!String.IsNullOrEmpty(value))
                        Validate.IsValidURL(value, podcasturlLength, "WebsiteUrl", "WebsiteUrl");
                this.websiteUrl = value;
            }
        }

        /// <summary>
        /// Gets or sets the star rating for this podcast.
        /// </summary>
        public Byte StarRating
        {
            get
            {
                return this.starRating;
            }
            set
            {
                this.starRating = value;
            }
        }

        /// <summary>
        /// Gets or sets whether the podcast item is sorted ascendingly.
        /// </summary>
        public bool IsItemSortAsc
        {
            get
            {
                return this.isItemSortAsc;
            }
            set
            {
                this.isItemSortAsc = value;
            }
        }

        /// <summary>
        /// Gets or sets whether this is explicit(of ??)
        /// </summary>
        public bool IsExplicit
        {
            get
            {
                return this.isExplicit;
            }
            set
            {
                this.isExplicit = value;
            }
        }

        /// <summary>
        /// Gets or sets the content type.
        /// </summary>
        public PodcastContentType ContentType
        {
            get
            {
                return this.contentType;
            }
            set
            {
                this.contentType = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        override public InsertDataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
                base.Modified = value;
                //SetModified(value, true);
            }
        }

        /***
        /// <summary>
        /// Gets or sets the xml.
        /// </summary>
        public String Xml
        {
            get
            {
                return xml;
            }
            set
            {
                xml = value;
            }
        }
        ****/

        /// <summary>
        /// Gets or sets the itunes keywords.
        /// </summary>
        public String ITunesKeywords
        {
            get
            {
                return itunesKeywords;
            }
            set
            {
                itunesKeywords = value;
            }
        }

        /// <summary>
        /// Gets or sets the itunes blocked flag.
        /// </summary>
        public Boolean ITunesBlock
        {
            get
            {
                return itunesBlock;
            }
            set
            {
                itunesBlock = value;
            }
        }

        /// <summary>
        /// Gets or sets the itunes categories.
        /// </summary>
        public String[] ITunesCategories
        {
            get
            {
                return itunesCategories.ToArray();
            }
            set
            {
                itunesCategories.Clear();
                itunesCategories.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the episodes.
        /// </summary>
        public PodcastEpisode[] Episodes
        {
            get
            {
                return episodes.ToArray();
            }
            set
            {
                episodes.Clear();
                episodes.AddRange(value);
            }
        }

        #endregion

        #region Public Methods
        /// <summary>
        /// Gets the full Podcast object from the database for the given id.
        /// </summary>
        /// <param name="id">The id of the Podcast to retrieve.</param>
        /// <returns>The Podcast object.</returns>
        public static Podcast Get(Guid id)
        {
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "PodcastGet",
                        id))
                {
                    if (reader.Read())
                        return new Podcast(reader);
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "PodcastGet");
                throw;
            }
            return null;
        }


        /// <summary>
        /// Given a url to a podcast, retrieves the rss xml for the podcast, performs validation
        /// to make sure that it meets the criteria and the returns a populated PodcastRssXml object.
        /// </summary>
        /// <param name="podcastUriString"></param>
        /// <returns></returns>
        public static Podcast Get(String podcastUriString)
        {
            // Parameter verification
            if (String.IsNullOrEmpty(podcastUriString))
            {
                throw new ArgumentNullException("The supplied podcast web address was null");
            }

            Uri podcastUri = null;
            try
            {
                podcastUri = new Uri(podcastUriString);
            }
            catch (Exception exception)
            {
                throw new InvalidPodcastUriException(podcastUriString, exception);
            }

            XPathDocument document = null;
            AsyncPodcastDownloadParameters parameters = new AsyncPodcastDownloadParameters();
            parameters.podcastUri = podcastUri;
            parameters.document = document;
            parameters.handle = new EventWaitHandle(false, EventResetMode.AutoReset);
            WaitHandle[] handles = new WaitHandle[1];
            handles[0] = parameters.handle;
            WaitCallback callback = delegate(object state) { AsyncPodcastDownload((AsyncPodcastDownloadParameters)state); };
            ThreadPool.QueueUserWorkItem(callback, parameters);
            WaitHandle.WaitAll(handles);

            if (parameters.document == null)
            {
                return null;
            }

            // Validation

            return new Podcast(podcastUri, parameters.document);
        }


        /// <summary>
        /// Saves changes made to the given Podcast object to the database.
        /// </summary>
        public static void Save(Podcast podcast)
        {
            if (podcast == null)
            {
                throw new ArgumentNullException("Can not save null podcast");
            }

            using (Serialization serializer = new Serialization())
            {
                serializer.SerializeStartElement("Data");
                podcast.Serialize(serializer);
                serializer.SerializeEndElement();
                Podcast.Save(serializer.ResultXml);
            }
        }

        /// <summary>
        /// Saves changes made to the given Podcast object specified as xml.
        /// </summary>
        /// <param name="xmlPodcast">Podcast data to be save to the database.</param>
        public static void Save(string xmlPodcast)
        {
            try
            {
#if DEBUG
                //Validate.IsValidXml(xmlVideo, @"d:\corext\ems\main_dev\private\common\catalog\XSD\video.xsd");
                //File.WriteAllText(@"d:\temp\video.xml", xmlVideo);
#endif
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "PodcastSave",
                        xmlPodcast);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "PodcastSave");
                throw;
            }
        }

        /// <summary>
        /// Serialize the Podcast object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public override void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("Podcast");
                context.SerializeDatabaseOperation(this.modified);

                //Call base class to serialize media.
                base.Serialize(context);

                context.SerializeElement("podcastMediaId", this.Id);
                context.SerializeElement("rssUrl", this.rssUrl);
                context.SerializeElement("ownerEmail", this.ownerEmail);
                context.SerializeElement("ownerName", this.ownerName);
                context.SerializeElement("creatorName", this.creatorName);
                context.SerializeElement("imageUrl", this.imageUrl);
                context.SerializeElement("websiteUrl", this.websiteUrl);
                context.SerializeElement("starRating", this.starRating);
                context.SerializeElement("itemSortAsc", this.isItemSortAsc);
                context.SerializeElement("explicit", this.isExplicit);
                context.SerializeElement("contentType", (Byte)(this.contentType));
                context.SerializeEndElement();
            }
            else
            {
                //If this podcast is to be added/deleted; mark all children to be added/deleted.
                if (this.modified == InsertDataChangeType.Add)
                {
                    this.SetModified(this.modified, true);
                }

                //Call base class to serialize media.
                base.Serialize(context);

                if (this.modified != InsertDataChangeType.None)
                {
                    //Video
                    context.SerializeStartElement("Podcast");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("podcastMediaId", this.Id);
                    context.SerializeElement("rssUrl", this.rssUrl);
                    context.SerializeElement("ownerEmail", this.ownerEmail);
                    context.SerializeElement("ownerName", this.ownerName);
                    context.SerializeElement("creatorName", this.creatorName);
                    context.SerializeElement("imageUrl", this.imageUrl);
                    context.SerializeElement("websiteUrl", this.websiteUrl);
                    context.SerializeElement("starRating", this.starRating);
                    context.SerializeElement("itemSortAsc", this.isItemSortAsc);
                    context.SerializeElement("explicit", this.isExplicit);
                    context.SerializeElement("contentType", (Byte)(this.contentType));
                    context.SerializeEndElement();
                }
            }
            
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public override void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                // Call Deserialize for base object MediaData
                XmlNode child = node.SelectSingleNode("child::MediaData");
                if (child != null) base.Deserialize(child);

                attr = node.SelectSingleNode("child::podcastMediaId");
                if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::rssUrl");
                if (null != attr) this.rssUrl = attr.InnerText;

                attr = node.SelectSingleNode("child::ownerEmail");
                if (null != attr) this.ownerEmail = attr.InnerText;

                attr = node.SelectSingleNode("child::ownerName");
                if (null != attr) this.ownerName = attr.InnerText;

                attr = node.SelectSingleNode("child::creatorName");
                if (null != attr) this.creatorName = attr.InnerText;

                attr = node.SelectSingleNode("child::imageUrl");
                if (null != attr) this.imageUrl = attr.InnerText;

                attr = node.SelectSingleNode("child::websiteUrl");
                if (null != attr) this.websiteUrl = attr.InnerText;

                attr = node.SelectSingleNode("child::starRating");
                if (null != attr) this.starRating = Convert.ToByte(attr.InnerText);

                attr = node.SelectSingleNode("child::itemSortAsc");
                if (null != attr) this.isItemSortAsc = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::explicit");
                if (null != attr) this.isExplicit = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::contentType");
                if (null != attr) this.contentType = (PodcastContentType)Convert.ToByte(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public override void SetModified(InsertDataChangeType type, bool cascade)
        {
            base.SetModified(type, cascade);
            this.modified = type;
        }


        internal class AsyncPodcastDownloadParameters
        {
            public Uri podcastUri;
            public XPathDocument document;
            public EventWaitHandle handle;
        }

        private static void AsyncPodcastDownload(Object stateInfo)
        {
            AsyncPodcastDownloadParameters parameters = (AsyncPodcastDownloadParameters)stateInfo;
            WebRequest podcastWebRequest = WebRequest.Create(parameters.podcastUri);
            podcastWebRequest.Credentials = CredentialCache.DefaultCredentials;
            IWebProxy p = new WebProxy("itgproxy");
            podcastWebRequest.Proxy = p;

            try
            {
                using (HttpWebResponse podcastWebResponse = (HttpWebResponse)(podcastWebRequest.GetResponse()))
                {
                    StreamReader sr = new StreamReader(podcastWebResponse.GetResponseStream());
                    TextReader t = new StringReader(sr.ReadToEnd());
                    XmlTextReader r = new XmlTextReader(t);

                    parameters.document = new XPathDocument(r);
                    r.Close();
                    t.Close();
                    sr.Close();
                    podcastWebResponse.Close();
                }
            }
            catch (XmlException)
            {
                //throw new PodcastInvalidXmlException(address, exception);
                parameters.document = null;
            }
            catch (Exception)
            {
                //throw new PodcastRetrievalException(address, exception);
                parameters.document = null;
            }

            parameters.handle.Set();
        }
        #endregion

    }

    /// <summary>
    /// Exception thrown when podcast xml cannot be retrieved for some reason.
    /// </summary>
    public class PodcastRssXmlException : Exception
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        public PodcastRssXmlException(String message, Exception innerException)
            : base(message, innerException)
        {
        }
    }

    /// <summary>
    /// Exception thrown when podcast uri is invalid.
    /// </summary>
    public class InvalidPodcastUriException : PodcastRssXmlException
    {
        private String address;

        /// <summary>
        /// The address that was invalid.
        /// </summary>
        public String Address
        {
            get { return address; }
        }

        /// <summary>
        /// Constructor.
        /// </summary>
        public InvalidPodcastUriException(String address, Exception innerException)
            : base(String.Format("The supplied podcast address [{0}] was invalid", address), innerException)
        {
            this.address = address;
        }
    }

    /// <summary>
    /// Exception thrown when podcast cannot be reached.
    /// </summary>
    public class PodcastRetrievalException : PodcastRssXmlException
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        public PodcastRetrievalException(String address, Exception innerException)
            : base(String.Format("Error retrieveing podcast [{0}]", address), innerException)
        {
        }

        /// <summary>
        /// String format of the exception.
        /// </summary>
        public override string ToString()
        {
            StringBuilder text = new StringBuilder();
            if (InnerException.GetType() == typeof(WebException))
            {
                WebException webException = InnerException as WebException;
                if (webException.Status == WebExceptionStatus.ProtocolError)
                {
                    text.Append(String.Format("Protocol Error: Status code = {0}. Description: {1}\n",
                        ((HttpWebResponse)webException.Response).StatusCode,
                        ((HttpWebResponse)webException.Response).StatusDescription));
                }
                else
                {
                    text.Append("Unknown web exception.");
                }
            }
            else
            {
                text.Append("Unknown exception.\n");
            }
            text.Append(base.ToString());
            return text.ToString();
        }
    }

    /// <summary>
    /// Exception thrown when podcast xml is not valid xml.
    /// </summary>
    public class PodcastInvalidXmlException : PodcastRssXmlException
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        public PodcastInvalidXmlException(String address, XmlException exception)
            : base(String.Format("Invalid xml encountered at [{0}]", address), exception)
        {
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\PreviewMediaInstance.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// The details of a preview of a piece of media. A preview is, by definition,
    /// a non-sellable item - hence it has dates etc.
    /// </summary>
    public class PreviewMediaInstance : ICatalogData
    {
        #region Constants
        private const int licenserContentIdLength = 50;
        private const int countryCodeLength = 2;
        #endregion

        #region Fields
        private Guid id;
        private int previewMediaInstanceTypeId;
        private int? requiredUserTypeId;
        private DateTime? startDate;
        private DateTime? endDate;
        private string countryCode;
        private int providerId;
        private string externalLicenserContentId;
        private int drmLicenseIssuerId;
        private InsertDataChangeType modified = InsertDataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal PreviewMediaInstance(SqlDataReader reader)
        {
            this.id = reader.GetGuid(reader.GetOrdinal("mediaInstanceId"));
            this.previewMediaInstanceTypeId = reader.GetInt32(reader.GetOrdinal("previewMediaInstanceTypeId"));
            this.requiredUserTypeId = reader.IsDBNull(reader.GetOrdinal("requiredUserTypeId")) ? -1 : reader.GetInt32(reader.GetOrdinal("requiredUserTypeId"));
            if (!reader.IsDBNull(reader.GetOrdinal("startDate")))
                this.startDate = reader.GetDateTime(reader.GetOrdinal("startDate"));
            if (!reader.IsDBNull(reader.GetOrdinal("endDate")))
                this.endDate = reader.GetDateTime(reader.GetOrdinal("endDate"));
            this.countryCode = reader.IsDBNull(reader.GetOrdinal("countryCode")) ? string.Empty : reader.GetString(reader.GetOrdinal("countryCode"));
            this.providerId = reader.GetInt32(reader.GetOrdinal("providerId"));
            this.externalLicenserContentId = reader.GetString(reader.GetOrdinal("externalLicenserContentId"));
            this.drmLicenseIssuerId = reader.GetInt32(reader.GetOrdinal("DRMLicenseIssuerId"));
        }

        /// <summary>
        /// Intializes a new instance of the PreviewMediaInstance class.
        /// </summary>
        /// <param name="previewMediaInstanceTypeId"></param>
        /// <param name="requiredUserTypeId"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="countryCode"></param>
        /// <param name="providerId"></param>
        /// <param name="licenserContentId"></param>
        /// <param name="drmLicenseIssuerId"></param>
        public PreviewMediaInstance(
                int previewMediaInstanceTypeId,
                int requiredUserTypeId,
                DateTime? startDate,
                DateTime? endDate,
                string countryCode,
                int providerId,
                string licenserContentId,
                int drmLicenseIssuerId)
        {
            Validate.IsNotEmpty(licenserContentId, "licenserContentId", "licenserContentId");
            Validate.IsNotLongerThan(licenserContentId, licenserContentIdLength, "licenserContentId", "licenserContentId");
            Validate.IsNotLongerThan(countryCode, countryCodeLength, "countryCode", "countryCode");

            if (PreviewMediaInstanceType.Get(previewMediaInstanceTypeId) == null)
                throw new ArgumentException(String.Format("Invalid previewMediaInstanceTypeId {0}.", previewMediaInstanceTypeId));
            if (DRMLicenseIssuer.Get(drmLicenseIssuerId) == null)
                throw new ArgumentException(String.Format("Invalid drmLicenseIssuerId {0}.", drmLicenseIssuerId));
            if (Provider.Get(providerId) == null)
                throw new ArgumentException(String.Format("Invalid providerId {0}.", providerId));

            this.previewMediaInstanceTypeId = previewMediaInstanceTypeId;
            this.requiredUserTypeId = requiredUserTypeId;
            this.startDate = startDate;
            this.endDate = endDate;
            this.countryCode = countryCode;
            this.providerId = providerId;
            this.externalLicenserContentId = licenserContentId;
            this.drmLicenseIssuerId = drmLicenseIssuerId;

            this.modified = InsertDataChangeType.Update;
        }

        /// <summary>
        /// Parameterless constructor required for SOAP
        /// </summary>
        public PreviewMediaInstance()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the media instance Id for this object.
        /// </summary>
        internal Guid Id
        {
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of the preview type
        /// </summary>
        public int PreviewMediaInstanceTypeId
        {
            get
            {
                return this.previewMediaInstanceTypeId;
            }
            set
            {
                if (PreviewMediaInstanceType.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid previewMediaInstanceTypeId {0}.", value));
                this.previewMediaInstanceTypeId = value;
            }
        }

        /// <summary>
        /// Returns the type id on the user for which this preview instance is avaialable
        /// </summary>
        public int? RequiredUserTypeId
        {
            get
            {
                return this.requiredUserTypeId;
            }
            
            set
            {
                this.requiredUserTypeId = value;
            }
        }

        /// <summary>
        /// The date from which the preview is available
        /// </summary>
        public DateTime? StartDate
        {
            get
            {
                return this.startDate;
            }
            set
            {
                Validate.ValidateDate(ref value);
                this.startDate = value;
            }
        }

        /// <summary>
        /// The date up until which the preview is available
        /// </summary>
        public DateTime? EndDate
        {
            get
            {
                return this.endDate;
            }
            set
            {
               Validate.ValidateDate(ref value);
               this.endDate = value;
            }
        }

        /// <summary>
        /// The country code in which the preview is available
        /// </summary>
        public string CountryCode
        {
            get
            {
                return this.countryCode;
            }
            set
            {
                if (!String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, countryCodeLength, "countryCode", "countryCode");
                this.countryCode = value;
            }
        }

        /// <summary>
        /// The id of the licenser of the preview
        /// </summary>
        public int ProviderId
        {
            get
            {
                return this.providerId;
            }
            set
            {
                //TODO: validate licenser
                this.providerId = value;
            }
        }

        /// <summary>
        /// The id used by the licenser to identify this preview
        /// </summary>
        public string LicenserContentId
        {
            get
            {
                return this.externalLicenserContentId;
            }
            set
            {
                Validate.IsNotLongerThan(value, licenserContentIdLength, "LicenserContentId", "LicenserContentId");
                this.externalLicenserContentId = value;
            }
        }

        /// <summary>
        /// The id of the provider of the preview
        /// </summary>
        public int DRMLicenseIssuerId
        {
            get
            {
                return this.drmLicenseIssuerId;
            }
            set
            {
                if (DRMLicenseIssuer.Get(value) == null)
                {
                    throw new ArgumentException(String.Format("Invalid drmLicenseIssuerId {0}.", value));
                }
                this.drmLicenseIssuerId = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public InsertDataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != InsertDataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("PreviewMediaInstance");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("previewMediaInstanceId", this.id);
                context.SerializeElement("previewMediaInstanceTypeId", this.previewMediaInstanceTypeId);
                context.SerializeElement("requiredUserTypeId", this.requiredUserTypeId);
                context.SerializeElement("startDate", this.startDate);
                context.SerializeElement("endDate", this.endDate);
                context.SerializeElement("countryCode", this.countryCode);
                context.SerializeElement("providerId", this.providerId);
                context.SerializeElement("externalLicenserContentId", this.externalLicenserContentId);
                context.SerializeElement("DRMLicenseIssuerId", this.drmLicenseIssuerId);
                context.SerializeEndElement();
            }            
        }



        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::previewMediaInstanceId");
                if (null != attr) this.id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::previewMediaInstanceTypeId");
                if (null != attr) this.previewMediaInstanceTypeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::requiredUserTypeId");
                if (null != attr) this.requiredUserTypeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::startDate");
                if (null != attr) this.startDate = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::endDate");
                if (null != attr) this.endDate = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::countryCode");
                if (null != attr) this.countryCode = attr.InnerText;

                attr = node.SelectSingleNode("child::providerId");
                if (null != attr) this.providerId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::externalLicenserContentId");
                if (null != attr) this.externalLicenserContentId = attr.InnerText;

                attr = node.SelectSingleNode("child::DRMLicenseIssuerId");
                if (null != attr) this.drmLicenseIssuerId = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(InsertDataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Provider.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of Provider data in the catalog, 
    /// and aids in the creation of the Provider object.
    /// </summary>
    public class Provider : Entity
    {
        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public Provider()
        {
        }

        /// <summary>
        /// Instantiates a Provider instance from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public Provider(SqlDataReader reader)
            :base(reader)
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a Provider for the given id.
        /// </summary>
        /// <param name="id">The id of the provider to get</param>
        /// <returns>The Provider for the given id.</returns>
        public static new Provider Get(int id)
        {
            return EntityCacheManager.ProviderCache.Get(id);
        }

        /// <summary>
        /// Gets all providers in the catalog.
        /// </summary>
        /// <returns></returns>
        public static new List<Provider> Get()
        {
            return EntityCacheManager.ProviderCache.Get();
        }

        /// <summary>
        /// Gets all providers from the database.
        /// </summary>
        /// <returns></returns>
        public static new List<Provider> GetData()
        {
            List<Provider> providers = new List<Provider>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "ProviderGet"
                    ))
            {
                while( reader.Read() )
                {
                    providers.Add( new Provider( reader ));
                }
            }
            return providers;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\PricingRule.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of PricingRule data in the catalog, 
    /// and aids in the creation of the PricingRule object.
    /// </summary>
    public class PricingRule : Utils.IDualKeyIdentifiable<Int32, Int32>, ICatalogData
    {
        #region Constants
        private const int nameLength = 50;
        #endregion

        #region Fields
        private int id;
        private string name;
        private DateTime startDateTime;
        private Int32 providerId;
        private String countryCode;
        private String retailCurrencyCode;
        private String wholesaleCurrencyCode;
        private Int32 mediaTypeId;
        private Decimal margin;
        private Decimal rate;
        private List<PricingRuleInstance> pricingRuleInstances = new List<PricingRuleInstance>();
        private DataChangeType modified = DataChangeType.None;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.DualKeyCache<PricingRule, Int32, Int32> PricingRuleCache = new Utils.DualKeyCache<PricingRule, Int32, Int32>(
                new Utils.DualKeyCache<PricingRule, Int32, Int32>.CacheDataRetrievalDelegate(GetData),
                CacheRefreshPeriod);
        #endregion

        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public PricingRule()
        {
        }

        /// <summary>
        /// Instantiates a PricingRule instance from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public PricingRule(SqlDataReader reader)
        {
            this.id = reader.GetInt32(reader.GetOrdinal("pricingRuleId"));
            this.name = reader.GetString(reader.GetOrdinal("name"));
            this.startDateTime = reader.GetDateTime(reader.GetOrdinal("startDateTime"));
            this.providerId = reader.GetInt32(reader.GetOrdinal("providerId"));
            this.countryCode = SqlHelper.GetNullable<String>(reader, "countryCode", null);
            this.retailCurrencyCode = reader.GetString(reader.GetOrdinal("retailCurrencyCode"));
            this.wholesaleCurrencyCode = reader.GetString(reader.GetOrdinal("wholesaleCurrencyCode"));
            this.mediaTypeId = SqlHelper.GetNullable<Int32>(reader, "mediaTypeId", -1);
            this.margin = SqlHelper.GetNullable<Decimal>(reader, "margin", 0);
            this.rate = SqlHelper.GetNullable<Decimal>(reader, "rate", 0);
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the int that uniquely identifies this PricingRule
        /// </summary>
        public int PrimaryId
        {
            get
            {
                return id;
            }
            set
            {
                if (value < 0)
                {
                    throw new ArgumentNullException("The id for the PricingRule cannot be less than zero.");
                }
                id = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of the pricing rule.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                Validate.IsNotNull(value, "Name", "Name");
                Validate.IsNotLongerThan(value, nameLength, "Name", "Name");
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets the date-time the pricing rule takes effect
        /// </summary>
        public DateTime StartDateTime
        {
            get
            {
                return startDateTime;
            }
            set
            {
                Validate.ValidateDate(ref value);
                startDateTime = value;
            }
        }

        /// <summary>
        /// Gets the providerId to which this pricing rule applies(This is also the Second key of the Cache)
        /// </summary>
        public Int32 SecondaryId
        {
            get
            {
                return providerId;
            }
        }
        /// <summary>
        /// Gets or sets the providerId to which this pricing rule applies(This is also the Second key of the Cache)
        /// </summary>
        public Int32 ProviderId
        {
            get
            {
                return providerId;
            }
            set
            {
                if (Provider.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalid providerId specified: [{0}]", value));
                this.providerId = value;
            }
        }

        /// <summary>
        /// Gets or sets the country for which this pricing rule is applicable
        /// </summary>
        public String CountryCode
        {
            get
            {
                return countryCode;
            }
            set
            {
                if (Country.Get(value) == null)
                    throw new ArgumentException(String.Format("The supplied country code [{0}] is invalid", value));
                this.countryCode = value;
            }
        }

        /// <summary>
        /// Gets or sets the curency code Retail for which this pricing rule is applicable
        /// </summary>
        public String RetailCurrencyCode
        {
            get
            {
                return this.retailCurrencyCode;
            }
            set
            {

                if (Currency.Get(value) == null)
                    throw new ArgumentException(String.Format("The supplied currency code [{0}] is invalid", value));
                this.retailCurrencyCode = value;
            }
        }
        /// <summary>
        /// Gets or sets the curency code Whole sale for which this pricing rule is applicable
        /// </summary>
        public String WholesaleCurrencyCode
        {
            get
            {
                return this.wholesaleCurrencyCode;
            }
            set
            {
                if (Currency.Get(value) == null)
                    throw new ArgumentException(String.Format("The supplied currency code [{0}] is invalid", value));
                this.wholesaleCurrencyCode = value;
            }
        }

        /// <summary>
        /// Gets or sets the media type for which this pricing rule is applicable
        /// </summary>
        public Int32 MediaTypeId
        {
            get
            {
                return mediaTypeId;
            }
            set
            {
                if (MediaType.Get(value) == null)
                    throw new ArgumentException(String.Format("The supplied media type id [{0}] is invalid", value));
                this.mediaTypeId = value;
            }
        }

        /// <summary>
        /// Gets or sets the margin for the rule
        /// </summary>
        public Decimal Margin
        {
            get
            {
                return margin;
            }
            set
            {
                if (value < 0)
                {
                    throw new ArgumentException(String.Format("The supplied margin value [{0}] should be greater than zero.", value));
                }
                margin = value;
            }
        }

        /// <summary>
        /// Gets or sets the rate for the rule
        /// </summary>
        public Decimal Rate
        {
            get
            {
                return rate;
            }
            set
            {
                if (value < 0)
                {
                    throw new ArgumentException(String.Format("The supplied rate value [{0}] should be greater than zero.", value));
                }
                rate = value;
            }
        }


        /// <summary>
        /// Gets or setsthe instance for this rule
        /// </summary>
        public PricingRuleInstance[] PricingRuleInstances
        {
            get
            {
                return pricingRuleInstances.ToArray();
            }
            set
            {
                pricingRuleInstances.Clear();
                pricingRuleInstances.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a PricingRule for the given id.
        /// </summary>
        /// <param name="id">The id of the PricingRule to get</param>
        /// <returns>The PricingRule for the given id.</returns>
        public static PricingRule Get(int id)
        {
            return PricingRuleCache.Get(id);
        }
        /// <summary>
        /// Gets array PricingRule for the given secondarykey .
        /// </summary>
        /// <param name="id">The secondary id of the PricingRule to get</param>
        /// <returns>The Array of PricingRule for the given Secondary id.</returns>
        public static List<PricingRule> GetByProviderId(int id)
        {
            return PricingRuleCache.GetBySecondaryKey(id);
        }
        /// <summary>
        /// Gets all pricing rules in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<PricingRule> Get()
        {
            return PricingRuleCache.Get();
        }

        /// <summary>
        /// Gets all pricing rules from the database.
        /// </summary>
        /// <returns></returns>
        public static List<PricingRule> GetData()
        {
            Dictionary<Int32, PricingRule> pricingRules = new Dictionary<Int32, PricingRule>();
            List<PricingRule> list = new List<PricingRule>();

            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "PricingRuleGet"
                    ))
            {
                while (reader.Read())
                {
                    PricingRule pr = new PricingRule(reader);
                    pricingRules.Add(pr.PrimaryId, pr);
                    list.Add(pr);
                }

                if (reader.NextResult())
                {
                    while (reader.Read())
                    {
                        PricingRuleInstance pri = new PricingRuleInstance(reader);
                        pricingRules[pri.PricingRuleId].pricingRuleInstances.Add(pri);
                    }
                }
            }

            return list;
        }

        /// <summary>
        /// Causes the cached to be refreshed from the database
        /// </summary>
        public static void Refresh()
        {
            PricingRuleCache.Refresh();
        }

        /// <summary>
        /// Saves changes made to the given PricingRule object.
        /// </summary>
        public static void Save(PricingRule pricingRule)
        {
            if (pricingRule == null)
            {
                throw new ArgumentNullException("Cannot save null pricing rule");
            }

            if (pricingRule.modified == DataChangeType.Delete)
            {
                throw new NotSupportedException("Deletion function is not supported in PricingRule class.");
            }
            
            if (String.IsNullOrEmpty(pricingRule.retailCurrencyCode) ||
                String.IsNullOrEmpty(pricingRule.wholesaleCurrencyCode) ||
                String.IsNullOrEmpty(pricingRule.countryCode)||
                String.IsNullOrEmpty(pricingRule.name) )
            {
                throw new ArgumentException("countryCode, wholesaleCurrencyCode, retailCurrencyCode and name in PricingRule can not be null.");
            }
            try
            {
                using (Serialization serializer = new Serialization())
                {
                    serializer.SerializeStartElement("Data");
                    pricingRule.Serialize(serializer);
                    serializer.SerializeEndElement();
                    PricingRule.Save(serializer.ResultXml);
                }
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "PricingRuleSave");
                throw;
            }
        }

        /// <summary>
        /// Saves changes made to the given PricingRule object specified as xml.
        /// </summary>
        /// <param name="xmlPricingRule">PricingRule data to be save to the database.</param>
        public static void Save(string xmlPricingRule)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "PricingRuleSave",
                        xmlPricingRule);
                //Refersh cache
                Refresh();
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "PricingRuleSave");
                throw;
            }
        }

        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("PricingRule");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("pricingRuleId", this.PrimaryId);
                context.SerializeElement("name", this.name);
                context.SerializeElement("startDatetime", this.startDateTime);
                context.SerializeElement("providerId", this.providerId);
                context.SerializeElement("countryCode", this.countryCode);
                context.SerializeElement("retailCurrencyCode", this.retailCurrencyCode);
                context.SerializeElement("wholesaleCurrencyCode", this.wholesaleCurrencyCode);
                context.SerializeElement("mediaTypeId", this.mediaTypeId);
                context.SerializeElement("margin", this.margin);
                context.SerializeElement("rate", this.rate);

                //Serialize the indicudual pricing rule instances collection
                foreach (PricingRuleInstance pricingRuleInstance in this.pricingRuleInstances)
                {
                    pricingRuleInstance.PricingRuleId = this.id;
                    pricingRuleInstance.Serialize(context);
                }

                context.SerializeEndElement();

            }
            else
            {
                //If this PricingRule is to be added/deleted; mark all children to be added/deleted.
                if (this.modified == DataChangeType.Add || this.modified == DataChangeType.Delete)
                {
                    this.SetModified(this.modified, true);
                }

                if (this.modified != DataChangeType.None)
                {
                    context.SerializeStartElement("PricingRule");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("pricingRuleId", this.PrimaryId);
                    context.SerializeElement("name", this.name);
                    context.SerializeElement("startDatetime", this.startDateTime);
                    context.SerializeElement("providerId", this.providerId);
                    context.SerializeElement("countryCode", this.countryCode);
                    context.SerializeElement("retailCurrencyCode", this.retailCurrencyCode);
                    context.SerializeElement("wholesaleCurrencyCode", this.wholesaleCurrencyCode);
                    context.SerializeElement("mediaTypeId", this.mediaTypeId);
                    context.SerializeElement("margin", this.margin);
                    context.SerializeElement("rate", this.rate);
                    context.SerializeEndElement();


                }
                //Serialize the indicudual pricing rule instances collection
                foreach (PricingRuleInstance pricingRuleInstance in this.pricingRuleInstances)
                {
                    if (pricingRuleInstance != null)
                    {
                        pricingRuleInstance.PricingRuleId = this.id;
                        pricingRuleInstance.Serialize(context);
                    }
                }
            }            
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::pricingRuleId");
                if (null != attr) this.PrimaryId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::name");
                if (null != attr) this.name = attr.InnerText;

                attr = node.SelectSingleNode("child::startDatetime");
                if (null != attr) this.startDateTime = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::providerId");
                if (null != attr) this.providerId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::countryCode");
                if (null != attr) this.countryCode = attr.InnerText;

                attr = node.SelectSingleNode("child::retailCurrencyCode");
                if (null != attr) this.retailCurrencyCode = attr.InnerText;

                attr = node.SelectSingleNode("child::wholesaleCurrencyCode");
                if (null != attr) this.wholesaleCurrencyCode = attr.InnerText;

                attr = node.SelectSingleNode("child::mediaTypeId");
                if (null != attr) this.mediaTypeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::margin");
                if (null != attr) this.margin = Serialization.DeserializeDecimalElement(attr.InnerText);

                attr = node.SelectSingleNode("child::rate");
                if (null != attr) this.rate = Serialization.DeserializeDecimalElement(attr.InnerText);

                XmlNodeList childItems = node.SelectNodes("child::PricingRuleInstance");
                foreach (XmlNode childNode in childItems)
                {
                    PricingRuleInstance ruleInstance = new PricingRuleInstance();
                    ruleInstance.Deserialize(childNode);
                    this.pricingRuleInstances.Add(ruleInstance);
                }
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\PreviewMediaInstanceType.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Hold the 'type' of a preview media instance
    /// </summary>
    public class PreviewMediaInstanceType : Utils.IKeyed<Int32>
    {
        #region Fields
        private Int32 id;
        private String name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,PreviewMediaInstanceType> PreviewMediaInstanceTypeCache = new Utils.KeyedCache<Int32,PreviewMediaInstanceType>(
                        new Utils.KeyedCache<Int32,Catalog.PreviewMediaInstanceType>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Default constructor required for SOAP
        /// </summary>
        public PreviewMediaInstanceType()
        {
        }

        /// <summary>
        /// Initializes a new instance of PreviewMediaInstanceType.
        /// </summary>
        public PreviewMediaInstanceType(int id, string name)
        {
            this.id = id;
            this.name = name;
        }

        /// <summary>
        /// Initialize a new instance of the PreviewMediaInstanceType class given a sql data reader
        /// </summary>
        /// <param name="reader"></param>
        private PreviewMediaInstanceType(SqlDataReader reader)
        {
            id = reader.GetInt32(reader.GetOrdinal("previewMediaInstanceTypeId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// The id for the type
        /// </summary>
        public Int32 Id
        {
            get { return id; }
            set { id = value; }
        }

        /// <summary>
        /// The name by which the type is known - for radability purpose only
        /// </summary>
        public String Name
        {
            get
            {
                return name;
            }
            
            set
            {
                if ( String.IsNullOrEmpty( value ))
                {
                    throw new ArgumentNullException( "The name of a PreviewMediaInstanceType cannot be null or empty." );
                }
                name = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Given the id of a preview media instance type, gets the preview media instance type instance
        /// </summary>
        public static PreviewMediaInstanceType Get( Int32 id )
        {
            return PreviewMediaInstanceTypeCache.Get(id);
        }

        /// <summary>
        /// Returns the complete set of preview media instance types
        /// </summary>
        public static List<PreviewMediaInstanceType> Get()
        {
            return PreviewMediaInstanceTypeCache.Get();
        }

        /// <summary>
        /// Returns the complete set of preview media instance types
        /// </summary>
        private static List<PreviewMediaInstanceType> GetData()
        {
            List<PreviewMediaInstanceType> previewMediaInstanceTypes = new List<PreviewMediaInstanceType>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "PreviewMediaInstanceTypeGet"
                    ))
            {
                while( reader.Read() )
                {
                    previewMediaInstanceTypes.Add( new PreviewMediaInstanceType( reader ));
                }
            }
            return previewMediaInstanceTypes;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ProviderTerm.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the ProviderTerm data, and creation of the ProviderTerm class.
    /// </summary>
    public class ProviderTerm : ICatalogData
    {
        #region Constants
        private const int nameLength = 50;
        private const int contentIdLength = 50;
        #endregion

        #region Fields
        private Guid id;
        private Guid mediaId;
        private Decimal wholesalePrice;
        private string wholesalePriceCurrencyCode;
        private DateTime startDateTime;
        private DateTime endDateTime;
        private string countryCode;
        private int providerId;
        private string externalProviderContentId;
        private int drmLicenseIssuerId;
        private string externalDRMLicenseIssuerContentId;
        private bool automaticallyGenerateOffer;
        private string modifiedBy;
        internal List<ProviderTermMediaInstance> mediaInstances = new List<ProviderTermMediaInstance>();
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal ProviderTerm(SqlDataReader reader)
        {
            //ProviderTerm
            this.id = reader.GetGuid(reader.GetOrdinal("providerTermId"));
            this.mediaId = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.wholesalePrice = reader.GetDecimal(reader.GetOrdinal("wholesalePrice"));
            this.wholesalePriceCurrencyCode = reader.GetString(reader.GetOrdinal("wholesalePriceCurrencyCode"));
            this.startDateTime = reader.GetDateTime(reader.GetOrdinal("startDateTime"));
            this.endDateTime = reader.GetDateTime(reader.GetOrdinal("endDateTime"));
            this.countryCode = reader.GetString(reader.GetOrdinal("countryCode"));
            this.providerId = reader.GetInt32(reader.GetOrdinal("providerId"));
            this.externalProviderContentId = reader.GetString(reader.GetOrdinal("externalProviderContentId"));
            this.drmLicenseIssuerId = reader.GetInt32(reader.GetOrdinal("DRMLicenseIssuerId"));
            this.externalDRMLicenseIssuerContentId = reader.GetString(reader.GetOrdinal("externalDRMLicenseIssuerContentId"));
            this.automaticallyGenerateOffer = (reader.GetByte(reader.GetOrdinal("automaticallyGenerateOffer")) == 1);
            this.modifiedBy = reader.GetString(reader.GetOrdinal("modifiedBy"));

            //Initialize ProviderTermMediaInstance
            reader.NextResult();
            int count = 0;
            if (reader.Read())
                count = reader.GetInt32(reader.GetOrdinal("mediaInstanceCount"));
            while (count > 0 && reader.NextResult())
            {
                if (reader.Read())
                    this.mediaInstances.Add(new ProviderTermMediaInstance(reader));
                count--;
            }
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public ProviderTerm()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the id of this provider term.
        /// </summary>
        public Guid Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// The id of the media this provider term is associating with.
        /// </summary>
        public Guid MediaId
        {
            get
            {
                return this.mediaId;
            }
            set
            {
                this.mediaId = value;
            }
        }

        /// <summary>
        /// The start date for this provider term to take effect.
        /// </summary>
        public DateTime StartDateTime
        {
            get
            {
                return this.startDateTime;
            }
            set
            {
               Validate.ValidateDate(ref value);
               this.startDateTime = value;
            }
        }

        /// <summary>
        /// The end date for this provider term to take effect.
        /// </summary>
        public DateTime EndDateTime
        {
            get
            {
                return this.endDateTime;
            }
            set
            {
               Validate.ValidateDate(ref value);
               this.endDateTime = value;
            }
        }
        /// <summary>
        /// The wholesale price specified for this provider term.
        /// </summary>
        public Decimal WholesalePrice
        {
            get
            {
                return this.wholesalePrice;
            }
            set
            {
                this.wholesalePrice = value;
            }
        }

        /// <summary>
        /// The currency code for wholesale price specified for this provider term.
        /// </summary>
        public string WholesalePriceCurrencyCode
        {
            get
            {
                return this.wholesalePriceCurrencyCode;
            }
            set
            {
                this.wholesalePriceCurrencyCode = value;
            }
        }

        /// <summary>
        /// The code of the country this provider term takes effect.
        /// </summary>
        public string CountryCode
        {
            get
            {
                return this.countryCode;
            }
            set
            {
                if (Country.Get(value) == null)
                    throw new ArgumentException("Invalid countryCode specified [{0}].", value);
                this.countryCode = value;
            }
        }

        /// <summary>
        /// The id of the provider ID for the media instance this provider term applies.
        /// </summary>
        public int ProviderId
        {
            get
            {
                return this.providerId;
            }
            set
            {
                if (Provider.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid providerId specified [{0}].", value));
                this.providerId = value;
            }
        }

        /// <summary>
        /// The external provider id provided by the icenser for the media instance
        /// this provider term applies.
        /// </summary>
        public string ExternalProviderContentId
        {
            get
            {
                return this.externalProviderContentId;
            }
            set
            {
                //Validate.IsNotEmpty(value, "externalProviderContentId", "externalProviderContentId");
                Validate.IsNotLongerThan(value, contentIdLength, "externalProviderContentId", "externalProviderContentId");
                this.externalProviderContentId = value;
            }
        }

        /// <summary>
        /// The id of the DRM Licenser for the media instance this provider term applies.
        /// </summary>
        public int DRMLicenseIssuerId
        {
            get
            {
                return this.drmLicenseIssuerId;
            }
            set
            {
                if (DRMLicenseIssuer.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid drmLicenseIssuerId specified [{0}].", value));
                this.drmLicenseIssuerId = value;
            }
        }
        
        /// <summary>
        /// The external DRM License Issuer id provided by the provider for the media instance
        /// this provider term applies.
        /// </summary>
        public string ExternalDRMLicenseIssuerContentId
        {
            get
            {
                return this.externalDRMLicenseIssuerContentId;
            }
            set
            {
                Validate.IsNotEmpty(value, "externalDRMLicenseIssuerContentId", "externalDRMLicenseIssuerContentId");
                Validate.IsNotLongerThan(value, contentIdLength, "externalDRMLicenseIssuerContentId", "externalDRMLicenseIssuerContentId");
                this.externalDRMLicenseIssuerContentId = value;
            }
        }
        
        /// <summary>
        /// Flag indicates whether this provider term is auto-generated.
        /// </summary>
        public bool AutomaticallyGenerateOffer
        {
            get
            {
                return this.automaticallyGenerateOffer;
            }
            set
            {
                this.automaticallyGenerateOffer = value;
            }
        }

        /// <summary>
        /// Indicate who modified this record.
        /// </summary>
        public string ModifiedBy
        {
            get
            {
                return this.modifiedBy;
            }
            set
            {
                this.modifiedBy = value;
            }
        }

        /// <summary>
        /// The list of media instances associated with this provider term.
        /// </summary>
        public ProviderTermMediaInstance[] MediaInstances
        {
            get
            {
                return this.mediaInstances.ToArray();
            }
            set
            {
                this.mediaInstances.Clear();
                if (value != null)
                    this.mediaInstances.AddRange(value);
            }
        }


        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                    context.SerializeStartElement("ProviderTerm");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("providerTermId", this.id);
                    context.SerializeElement("mediaId", this.mediaId);
                    context.SerializeElement("wholesalePrice", this.wholesalePrice);
                    context.SerializeElement("wholesalePriceCurrencyCode", this.wholesalePriceCurrencyCode);
                    context.SerializeElement("startDateTime", this.startDateTime);
                    context.SerializeElement("endDateTime", this.endDateTime);
                    context.SerializeElement("countryCode", this.countryCode);
                    context.SerializeElement("providerId", this.providerId);
                    context.SerializeElement("externalProviderContentId", this.externalProviderContentId);
                    context.SerializeElement("DRMLicenseIssuerId", this.drmLicenseIssuerId);
                    context.SerializeElement("externalDRMLicenseIssuerContentId", this.externalDRMLicenseIssuerContentId);
                    context.SerializeElement("automaticallyGenerateOffer", this.automaticallyGenerateOffer);
                    context.SerializeElement("modifiedBy", this.modifiedBy);
                    //ProviderTermMediaInstance
                    foreach (ProviderTermMediaInstance mediaInstance in this.mediaInstances)
                    {
                        mediaInstance.ProviderTermId = this.id;
                        mediaInstance.Serialize(context);
                    }   
                    context.SerializeEndElement();
            }
            else
            {
                if (this.modified == DataChangeType.Add || this.modified == DataChangeType.Delete)
                {
                    this.SetModified(this.modified, true);
                }

                //ProviderTerm
                if (this.modified != DataChangeType.None)
                {
                    context.SerializeStartElement("ProviderTerm");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("providerTermId", this.id);
                    context.SerializeElement("mediaId", this.mediaId);
                    context.SerializeElement("wholesalePrice", this.wholesalePrice);
                    context.SerializeElement("wholesalePriceCurrencyCode", this.wholesalePriceCurrencyCode);
                    context.SerializeElement("startDateTime", this.startDateTime);
                    context.SerializeElement("endDateTime", this.endDateTime);
                    context.SerializeElement("countryCode", this.countryCode);
                    context.SerializeElement("providerId", this.providerId);
                    context.SerializeElement("externalProviderContentId", this.externalProviderContentId);
                    context.SerializeElement("DRMLicenseIssuerId", this.drmLicenseIssuerId);
                    context.SerializeElement("externalDRMLicenseIssuerContentId", this.externalDRMLicenseIssuerContentId);
                    context.SerializeElement("automaticallyGenerateOffer", this.automaticallyGenerateOffer);
                    context.SerializeElement("modifiedBy", this.modifiedBy);
                    context.SerializeEndElement();
                }

                //ProviderTermMediaInstance
                foreach (ProviderTermMediaInstance mediaInstance in this.mediaInstances)
                {
                    mediaInstance.ProviderTermId = this.id;
                    mediaInstance.Serialize(context);
                }
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::providerTermId");
                if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::mediaId");
                if (null != attr) this.mediaId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::wholesalePrice");
                if (null != attr) this.wholesalePrice = Serialization.DeserializeDecimalElement(attr.InnerText);

                attr = node.SelectSingleNode("child::wholesalePriceCurrencyCode");
                if (null != attr) this.wholesalePriceCurrencyCode = attr.InnerText;

                attr = node.SelectSingleNode("child::startDateTime");
                if (null != attr) this.startDateTime = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::endDateTime");
                if (null != attr) this.endDateTime = Serialization.DeserializeDateTimeElement(attr.InnerText);

                attr = node.SelectSingleNode("child::countryCode");
                if (null != attr) this.countryCode = attr.InnerText;

                attr = node.SelectSingleNode("child::providerId");
                if (null != attr) this.providerId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::externalProviderContentId");
                if (null != attr) this.externalProviderContentId = attr.InnerText;

                attr = node.SelectSingleNode("child::DRMLicenseIssuerId");
                if (null != attr) this.DRMLicenseIssuerId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::externalDRMLicenseIssuerContentId");
                if (null != attr) this.externalDRMLicenseIssuerContentId = attr.InnerText;

                attr = node.SelectSingleNode("child::automaticallyGenerateOffer");
                if (null != attr) this.automaticallyGenerateOffer = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::modifiedBy");
                if (null != attr) this.modifiedBy = attr.InnerText;

                XmlNodeList nodes = node.SelectNodes("child::ProviderTermMediaInstance");
                foreach (XmlNode subnode in nodes)
                {
                    ProviderTermMediaInstance mediaInstance = new ProviderTermMediaInstance();
                    mediaInstance.Deserialize(subnode);
                    this.mediaInstances.Add(mediaInstance);
                }
  
            
            }

        }


        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
            if (cascade)
            {
                //ProviderTermMediaInstance
                foreach (ProviderTermMediaInstance mediaInstance in this.mediaInstances)
                    mediaInstance.SetModified(type, cascade);
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\PricingRuleInstance.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of PricingRule data in the catalog, 
    /// and aids in the creation of the PricingRule object.
    /// </summary>
    public class PricingRuleInstance : ICatalogData
    {
        #region Fields
        #endregion

        #region Fields
        private int id;
        private int pricingRuleId;
        private Decimal priceWholesaleFrom;
        private Decimal priceWholesaleTo;
        private Int32 pointsRetail;
        private Decimal priceRetail;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Contructors
        /// <summary>
        /// Parameterless constructur required for SOAP.
        /// </summary>
        public PricingRuleInstance()
        {
        }

        /// <summary>
        /// Instantiates a PricingRule instance from a sql data reader.
        /// </summary>
        /// <param name="reader">The sql data reader with the info</param>
        public PricingRuleInstance(SqlDataReader reader)
        {
            this.id = reader.GetInt32(reader.GetOrdinal("pricingRuleInstanceId"));
            this.pricingRuleId = reader.GetInt32(reader.GetOrdinal("pricingRuleId"));
            this.priceWholesaleFrom = SqlHelper.GetNullable<Decimal>(reader, "priceWholesaleFrom", 0);
            this.priceWholesaleTo = SqlHelper.GetNullable<Decimal>(reader, "priceWholesaleTo", 0);
            this.pointsRetail = SqlHelper.GetNullable<Int32>(reader, "pointsRetail", 0);
            this.priceRetail = SqlHelper.GetNullable<Decimal>(reader, "priceRetail", 0);
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the int that uniquely identifies this PricingRule
        /// </summary>
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                if ( value < 0 )
                {
                    throw new ArgumentNullException( "The id for the PricingRule cannot be less than zero." );
                }
                id = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of the prent pricing rule.
        /// </summary>
        public Int32 PricingRuleId
        {
            get
            {
                return this.pricingRuleId;
            }
            set
            {
                this.pricingRuleId = value;
            }
        }


        /// <summary>
        /// Gets or sets the lower price from which this rule is applicable
        /// </summary>
        public Decimal PriceWholesaleFrom
        {
            get
            {
                return priceWholesaleFrom;
            }
            set
            {
                if ( value < 0 )
                {
                    throw new ArgumentException( String.Format( "The supplied wholsale 'from' price [{0}] should be greater than zero.", value ));
                }
                priceWholesaleFrom = value;
            }
        }

        /// <summary>
        /// Gets or sets the lower price to which this rule is applicable
        /// </summary>
        public Decimal PriceWholesaleTo
        {
            get
            {
                return priceWholesaleTo;
            }
            set
            {
                if ( value < 0 )
                {
                    throw new ArgumentException( String.Format( "The supplied wholesale 'to' price [{0}] should be greater than zero.", value ));
                }
                priceWholesaleTo = value;
            }
        }

        /// <summary>
        /// Gets or sets the points reatil for the rule
        /// </summary>
        public Int32 PointsRetail
        {
            get
            {
                return pointsRetail;
            }
            set
            {
                if ( value < 0 )
                {
                    throw new ArgumentException( String.Format( "The supplied retail points value [{0}] should be greater than zero.", value ));
                }
                pointsRetail = value;
            }
        }

        /// <summary>
        /// Gets or sets the retail price for the rule
        /// </summary>
        public Decimal PriceRetail
        {
            get
            {
                return this.priceRetail;
            }
            set
            {
                if (value < 0)
                {
                    throw new ArgumentException(String.Format("The supplied retail price value [{0}] should be greater than zero.", value));
                }
                this.priceRetail = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("PricingRuleInstance");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("pricingRuleInstanceId", this.id);
                context.SerializeElement("pricingRuleId", this.pricingRuleId);
                context.SerializeElement("priceWholesaleFrom", this.priceWholesaleFrom);
                context.SerializeElement("priceWholesaleTo", this.priceWholesaleTo);
                context.SerializeElement("pointsRetail", this.pointsRetail);
                context.SerializeElement("priceRetail", this.priceRetail);
                context.SerializeEndElement();
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::pricingRuleInstanceId");
                if (null != attr) this.id = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::pricingRuleId");
                if (null != attr) this.pricingRuleId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::priceWholesaleFrom");
                if (null != attr) this.priceWholesaleFrom = Serialization.DeserializeDecimalElement(attr.InnerText);

                attr = node.SelectSingleNode("child::priceWholesaleTo");
                if (null != attr) this.priceWholesaleTo = Serialization.DeserializeDecimalElement(attr.InnerText);

                attr = node.SelectSingleNode("child::pointsRetail");
                if (null != attr) this.pointsRetail = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::priceRetail");
                if (null != attr) this.priceRetail = Serialization.DeserializeDecimalElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Promotion.cs ===
using System;
using System.Xml;
using System.IO;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the Promotion data, and creation of the Promotion class.
    /// </summary>
    public class Promotion : ICatalogData
    {
        #region Constants
        private const int nameLength = 50;
        #endregion

        #region Fields
        private Guid offerInstanceId;
        private Guid id;
        private string name;
        private DateTime startDateTime;
        private DateTime endDateTime;
        private Decimal price;
        private Decimal reportingRetailValue;
        private int priority;
        private Decimal? promotionalWholesalePrice = null;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal Promotion(SqlDataReader reader)
        {
            this.id                         = reader.GetGuid(reader.GetOrdinal("promotionId"));
            this.name                       = SqlHelper.GetNullableString(reader, "name", string.Empty);
            this.startDateTime              = reader.GetDateTime(reader.GetOrdinal("startDateTime"));
            this.endDateTime                = reader.GetDateTime(reader.GetOrdinal("endDateTime"));
            this.price                      = reader.GetDecimal(reader.GetOrdinal("price"));
            this.reportingRetailValue       = reader.GetDecimal(reader.GetOrdinal("reportingRetailValue"));
            this.priority                   = reader.GetInt32(reader.GetOrdinal("priority"));
            this.promotionalWholesalePrice  = SqlHelper.GetNullableDecimal( reader, "promotionalWholesalePrice" );
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public Promotion()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the offer instance Id for this object.
        /// </summary>
        internal Guid OfferInstanceId
        {
            set { this.offerInstanceId = value; }
        }

        /// <summary>
        /// Gets or sets the id of this promotion.
        /// </summary>
        public Guid Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of this promotion.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                if (string.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, nameLength, "Name", "Name");
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets the starting date this promotion takes effect.
        /// </summary>
        public DateTime StartDateTime
        {
            get
            {
                return this.startDateTime;
            }
            set
            {
                this.startDateTime = value;
            }
        }

        /// <summary>
        /// Gets or sets the end date this promotion expires.
        /// </summary>
        public DateTime EndDateTime
        {
            get
            {
                return this.endDateTime;
            }
            set
            {
                this.endDateTime = value;
            }
        }

        /// <summary>
        /// Gets or sets the promotion price.
        /// </summary>
        public Decimal Price
        {
            get
            {
                return this.price;
            }
            set
            {
                Validate.IsGreaterThanOrEqual( value, 0, "price", "price");
                this.price = value;
            }
        }

        /// <summary>
        /// Gets or sets the promotion retail value for reporting purposes.
        /// </summary>
        public Decimal ReportingRetailValue
        {
            get
            {
                return this.reportingRetailValue;
            }
            set
            {
                Validate.IsGreaterThanOrEqual( value, 0, "reportingRetailValue", "reportingRetailValue");
                this.reportingRetailValue = value;
            }
        }

        /// <summary>
        /// Gets or sets the priority for this promotion when there is more than one.
        /// </summary>
        public int Priority
        {
            get
            {
                return this.priority;
            }
            set
            {
                if (value < 0)
                    throw new ArgumentException("Promotion priority cannot less than zero.");
                this.priority = value;
            }
        }

        /// <summary>
        /// Gets or sets the promotionalWholesalePrice. This is for where the promotion is a consequence of
        /// the provider giving us a promotion which we pass on to the user. This value is then used by 
        /// reporting to help calcualte what to pay the provider.
        /// </summary>
        public Decimal? PromotionalWholesalePrice
        {
            get
            {
                return promotionalWholesalePrice;
            }
            set
            {
                if ( value.HasValue )
                {
                    Validate.IsGreaterThanOrEqual( value, 0, "promotionalWholesalePrice", "promotionalWholesalePrice");
                }
                promotionalWholesalePrice = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("Promotion");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("offerInstanceId", this.offerInstanceId);
                context.SerializeElement("promotionId", this.id);
                context.SerializeElement("name", this.name);
                context.SerializeElement("startDateTime", this.startDateTime);
                context.SerializeElement("endDateTime", this.endDateTime);
                context.SerializeElement("price", this.price);
                context.SerializeElement("reportingRetailValue", this.reportingRetailValue);
                context.SerializeElement("priority", this.priority);
                context.SerializeElement("promotionalWholesalePrice", this.promotionalWholesalePrice );
                context.SerializeEndElement();
            }
        }

        /// <summary>
        /// De-serializes from an xml node to fill attributes to this object.
        /// </summary>
        /// <param name="node">An Xml node containing the object</param>
        public void Deserialize(XmlNode node)
        {
                if(node == null)
                {
                    return;
                }
                else
                {
                    XmlNode attr = null;
                    attr = node.SelectSingleNode("child::offerInstanceId");
                    if (null != attr) this.offerInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);
                    
                    attr = node.SelectSingleNode("child::promotionId");
                    if(null != attr)  this.id = Serialization.DeserializeGuidElement(attr.InnerText);

                    attr = node.SelectSingleNode("child::name");
                    if(null != attr)  this.name = attr.InnerText;
                    
                    attr = node.SelectSingleNode("child::startDateTime");
                    if (null != attr) this.startDateTime = Serialization.DeserializeDateTimeElement(attr.InnerText);

                    attr = node.SelectSingleNode("child::endDateTime");
                    if(null != attr)  this.endDateTime = Serialization.DeserializeDateTimeElement(attr.InnerText);

                    attr = node.SelectSingleNode("child::price");
                    if(null != attr)  this.price = Serialization.DeserializeDecimalElement(attr.InnerText);
                    
                    attr = node.SelectSingleNode("child::reportingRetailValue");
                    if(null != attr)  this.reportingRetailValue = Serialization.DeserializeDecimalElement(attr.InnerText);
                    
                    attr = node.SelectSingleNode("child::priority");
                    if(null != attr)  this.priority = Serialization.DeserializeIntElement(attr.InnerText);

                    attr = node.SelectSingleNode("child::promotionalWholesalePrice");
                    if(null != attr)  this.promotionalWholesalePrice = Serialization.DeserializeIntElement(attr.InnerText);

                    attr = node.Attributes.GetNamedItem("op");
                    if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());
 
                }
        }



        /// <summary>
        /// Saves changes made to the given Promotion object.
        /// </summary>
        public static void Save(Promotion promotion)
        {
            using (Serialization context = new Serialization())
            {
                context.SerializeStartElement("Data");
                promotion.Serialize(context);
                context.SerializeEndElement();
                Promotion.Save(context.ResultXml);
            }
        }


        /// <summary>
        /// Saves changes made to the given Promotion object specified as xml.
        /// </summary>
        /// <param name="xmlPromotion">Promotion data to be save to the database.</param>
        public static void Save(string xmlPromotion)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "PromotionSave",
                        xmlPromotion);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "PromotionSave");
                throw;
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ProviderTermGameContentInstance.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the ProviderTermGameContentInstance data, and creation of the ProviderTermGameContentInstance class.
    /// </summary>
    public class ProviderTermGameContentInstance : ICatalogData
    {
        #region Fields
        private Guid providerTermId;
        private Guid mediaInstanceId;
        private int licenseExtensionBits;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal ProviderTermGameContentInstance(SqlDataReader reader)
        {
            this.licenseExtensionBits = reader.GetInt32(reader.GetOrdinal("licenseExtensionBits"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public ProviderTermGameContentInstance()
        {
        }
        #endregion

        #region Properties

        
        /// <summary>
        /// Allow the container class to set the providerTermId.
        /// </summary>
        internal Guid ProviderTermId
        {
            set
            {
                this.providerTermId = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of the media instance associates with this provider term.
        /// </summary>
        internal Guid MediaInstanceId
        {
            get
            {
                return this.mediaInstanceId;
            }
            set
            {
                this.mediaInstanceId = value;
            }
        }
         

        /// <summary>
        /// The id of the licenser for the media instance this provider term applies.
        /// </summary>
        public int LicenseExtensionBits
        {
            get
            {
                return this.licenseExtensionBits;
            }
            set
            {
                this.licenseExtensionBits = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("ProviderTermGameContentInstance");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("providerTermId", this.providerTermId);
                context.SerializeElement("mediaInstanceId", this.mediaInstanceId);
                context.SerializeElement("licenseExtensionBits", this.licenseExtensionBits);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::providerTermId");
                if (null != attr) this.providerTermId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::mediaInstanceId");
                if (null != attr) this.mediaInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::licenseExtensionBits");
                if (null != attr) this.licenseExtensionBits = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ProviderTermGameContentInstanceAsset.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the ProviderTermGameContentInstanceAsset data, and creation of 
    /// the ProviderTermGameContentInstanceAsset class.
    /// </summary>
    public class ProviderTermGameContentInstanceAsset : ICatalogData
    {
        #region Fields
        private Guid providerTermId;
        private Guid mediaInstanceId;
        private int assetId;
        private int quantity;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal ProviderTermGameContentInstanceAsset(SqlDataReader reader)
        {
           this.assetId = reader.IsDBNull(reader.GetOrdinal("assetId")) ? -1 : reader.GetInt32(reader.GetOrdinal("assetId"));
            this.quantity = reader.IsDBNull(reader.GetOrdinal("quantity")) ? -1 : reader.GetInt32(reader.GetOrdinal("quantity"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public ProviderTermGameContentInstanceAsset()
        {
        }
        #endregion

        #region Properties

        /// <summary>
        /// Allow the container class to set the providerTermId.
        /// </summary>
        internal Guid ProviderTermId
        {
            set
            {
                this.providerTermId = value;
            }
        }



        /// <summary>
        /// Gets or sets the id of the media instance associates with this provider term.
        /// </summary>
        internal Guid MediaInstanceId
        {
            get
            {
                return this.mediaInstanceId;
            }
            set
            {
                this.mediaInstanceId = value;
            }
        }


        /// <summary>
        /// The id of the licenser for the media instance this provider term applies.
        /// </summary>
        public int AssetId
        {
            get
            {
                return this.assetId;
            }
            set
            {
                this.assetId = value;
            }
        }

        /// <summary>
        /// The quantity ties to the the asset id.
        /// </summary>
        public int Quantity
        {
            get
            {
                return this.quantity;
            }
            set
            {
                this.quantity = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("ProviderTermGameContentInstanceAsset");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("providerTermId", this.providerTermId);
                context.SerializeElement("mediaInstanceId", this.mediaInstanceId);
                context.SerializeElement("assetId", this.assetId);
                context.SerializeElement("quantity", this.quantity);
                context.SerializeEndElement();
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::providerTermId");
                if (null != attr) this.providerTermId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::mediaInstanceId");
                if (null != attr) this.mediaInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::assetId");
                if (null != attr) this.assetId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::quantity");
                if (null != attr) this.quantity = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Publishing.cs ===
using System;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides modification of batch data for offer and video in the catalog.
    /// </summary>
    public class Publishing : ICatalogData
    {
        /// <summary>
        /// Target status of the batch operation.
        /// </summary>
        public enum PublishingVisiblityStatus
        {
            /// <summary>
            /// Enumeration to describe Live status
            /// </summary>
            Live = 3,
            /// <summary>
            /// Enumeration to describe withdrawn status
            /// </summary>
            Withdraw = 4,
            /// <summary>
            /// Enumeration to describe no change in status
            /// </summary>
            NoChange=-1
        };
        #region Constants
        #endregion

        #region Fields
        private DataChangeType modified;
        private Guid[] offerInstanceIDs = null;
        private DateTime? offerinstanceStartDateTime;
        private DateTime? offerinstanceEndDateTime;
        private PublishingVisiblityStatus visibilityStatus;
        #endregion

        #region Constructors

        /// <summary>
        /// Paramerterless constructor required for SOAP
        /// </summary>
        public Publishing()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// The target visibility status(live/withdraw) of the batch operation. 
        /// </summary>
        public PublishingVisiblityStatus VisibilityStatus
        {
            get { return visibilityStatus; }
            set { visibilityStatus = value; }
        }
        /// <summary>
        /// The array that holds the ids of the recorders that needs to be updated. 
        /// </summary>
        public Guid[] OfferInstanceIDs
        {
            get { return offerInstanceIDs; }
            set { offerInstanceIDs = value; }
        }
        /// <summary>
        /// This is required by the interface. But in this class, we do not use it. 
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return modified;
            }
            set
            {
                this.modified = value;
            }
        }
        /// <summary>
        /// Start time of the Offerinstance, this is used when the target visibility status is live. 
        /// </summary>
        public DateTime? OfferinstanceStartDateTime
        {
            get { return offerinstanceStartDateTime; }
            set 
            {
                Validate.ValidateDate(ref value);
                this.offerinstanceStartDateTime = value; 
            }
        }
        /// <summary>
        /// Start time of the Offerinstance, this is used when the target visibility status is withdraw. 
        /// </summary>
        public DateTime? OfferinstanceEndDateTime
        {
            get { return offerinstanceEndDateTime; }
            set 
            {
                Validate.ValidateDate(ref value);
                this.offerinstanceEndDateTime = value; 
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Saves changes made to the given offer/media objects .
        /// </summary>
        public static void Save(Publishing publishing)
        {
            using (Serialization context = new Serialization())
            {
                context.SerializeStartElement("Data");
                publishing.Serialize(context);
                context.SerializeEndElement();
                Publishing.Save(context.ResultXml);
            }
        }
        /// <summary>
        /// Serialize the Publishing batch request into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        /// <returns></returns>
        public void Serialize(Serialization context)
        {
            context.SerializeStartElement("IDs");
            if (offerInstanceIDs != null)
            {
                foreach (Guid id in this.offerInstanceIDs)
                {
                    if (id != Guid.Empty)
                    {
                        context.SerializeStartElement("ID");
                        context.SerializeElement("OfferInstanceID", id);
                        context.SerializeEndElement();
                    }
                }
            }
            context.SerializeEndElement();
            context.SerializeElement("offerinstanceStartDateTime", this.offerinstanceStartDateTime);
            context.SerializeElement("offerinstanceEndDateTime", this.offerinstanceEndDateTime);
            context.SerializeElement("visibilityStatus", (int)this.visibilityStatus);
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {

        }


        /// <summary>
        /// Saves changes made to the given Publishing batch request specified as xml.
        /// </summary>
        /// <param name="xmlPublishing">Image data to be save to the database.</param>
        public static void Save(string xmlPublishing)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "PublishingSave",
                        xmlPublishing);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "PublishingSave");
                throw;
            }
        }

        /// <summary>
        /// This is required by the interface, we are not using this method in this class. 
        /// </summary>
        /// <param name="type"></param>
        /// <param name="cascade"></param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\RatingSystem.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of RatingSystem data in the catalog.
    /// </summary>
    public class RatingSystem : Utils.IKeyed<Int32>
    {
        #region Fields
        private int id;
        private string name;
        private List<String> countries = new List<String>();
        private List<RatingValue> values = new List<RatingValue>();
        private List<RatingDescriptor> descriptors = new List<RatingDescriptor>();

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,RatingSystem> RatingSystemCache = new Utils.KeyedCache<Int32,RatingSystem>(
                        new Utils.KeyedCache<Int32,Catalog.RatingSystem>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Empty constructor to allow serialization over SOAP.
        /// </summary>
        public RatingSystem()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RatingSystem class.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="countries"></param>
        public RatingSystem(int id,
                                    string name,
                                    string[] countries )
        {
            this.id = id;
            this.name = name;
            this.countries.Clear();
            this.countries.AddRange( countries );
        }

        /// <summary>
        /// Initializes a new instance of the RatingSystem class.
        /// </summary>
        /// <param name="reader"></param>
        private RatingSystem( SqlDataReader reader )
        {
            id = reader.GetInt32(reader.GetOrdinal("ratingSystemId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets this RatingSystem Id.
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets this RatingSystem name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets the countries for which this rating system applies
        /// </summary>
        public string[] Countries
        {
            get
            {
                return this.countries.ToArray();
            }
            set
            {
                this.countries.Clear();
                this.countries.AddRange( value );
            }
        }
        
        /// <summary>
        /// Get or sets the set of values for this rating system
        /// </summary>
        public RatingValue[] Values
        {
            get
            {
                return this.values.ToArray();
            }
            set
            {
                this.values.Clear();
                this.values.AddRange( value );
            }
        }
        
        /// <summary>
        /// Get or sets the set of descriptors for this rating system
        /// </summary>
        public RatingDescriptor[] Descriptors
        {
            get
            {
                return this.descriptors.ToArray();
            }
            set
            {
                this.descriptors.Clear();
                this.descriptors.AddRange( value );
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets a RatingSystem given a ratingSystemId.
        /// </summary>
        /// <param name="ratingSystemId">The Id of the Role to retrieve</param>
        /// <returns>The RatingSystem for the specified ratingSystemId</returns>
        public static RatingSystem Get(int ratingSystemId)
        {
            RatingSystem r = null;
            try
            {
                r = RatingSystemCache.Get(ratingSystemId);
            }
            catch (ArgumentException)
            {
            }
            return r;
        }

        /// <summary>
        /// Gets all RatingSystems in the catalog.
        /// </summary>
        /// <returns>All RatingSystems in the catalog</returns>
        public static List<RatingSystem> Get()
        {
            return RatingSystemCache.Get();
        }

        /// <summary>
        /// Gets all RatingSystems in the catalog.
        /// </summary>
        /// <returns>All RatingSystems in the catalog</returns>
        private static List<RatingSystem> GetData()
        {
            Dictionary<Int32,RatingSystem> ratingSystems = new Dictionary<Int32,RatingSystem>();

            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "RatingSystemGet"
                    ))
            {
                // Get the systems
                if (reader.HasRows)
                {
                    while( reader.Read())
                    {
                        RatingSystem ratingSystem = new RatingSystem( reader );
                        ratingSystems.Add( ratingSystem.Id, ratingSystem );
                    }
                }

                // Get the countries to which each of the systems is applicable
                reader.NextResult();
                while (reader.Read())
                {
                    RatingSystem ratingSystem = ratingSystems[ reader.GetInt32(reader.GetOrdinal("ratingSystemId")) ];
                    if ( ratingSystem != null )
                    {
                        ratingSystem.countries.Add( reader.GetString(reader.GetOrdinal("countryCode")));
                    }
                }            

                // Get the values for each of the systems
                reader.NextResult();
                while (reader.Read())
                {
                    RatingSystem ratingSystem = ratingSystems[ reader.GetInt32(reader.GetOrdinal("ratingSystemId")) ];
                    if ( ratingSystem != null )
                    {
                        ratingSystem.values.Add( new RatingValue(reader));
                    }
                }            

                // Get the descriptors for each of the systems
                reader.NextResult();
                while (reader.Read())
                {
                    RatingSystem ratingSystem = ratingSystems[ reader.GetInt32(reader.GetOrdinal("ratingSystemId")) ];
                    if ( ratingSystem != null )
                    {
                        ratingSystem.descriptors.Add( new RatingDescriptor(reader));
                    }
                }            
            }

            // Convert the dictionary into a list.
            List<RatingSystem> list = new List<RatingSystem>();
            foreach( RatingSystem ratingSystem in ratingSystems.Values )
            {
                list.Add( ratingSystem ); 
            }
            return list;
        }
        /// <summary>
        /// Returns the next available id
        /// </summary>
        /// <returns></returns>
        public static int GetAvailableId()
        {
            try
            {
                int retvalue = Convert.ToInt32(SqlHelper.ExecuteScalar(CatalogDatabase.RawCatalogDBConnectionString, CommandType.Text, "select dbo.GenerateIdRatingSystem()"));
                return retvalue;
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GenerateIdRatingSystem");
                throw;
            }
        }

        /// <summary>
        /// Compares two rating systme objects by id to see if they are the same
        /// </summary>
        public int CompareTo(Int32 other)
        {
            return Id.CompareTo(other);
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ProviderTermMediaInstance.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the ProviderTermMediaInstance data, and creation of the ProviderTermMediaInstance class.
    /// </summary>
    public class ProviderTermMediaInstance : ICatalogData
    {
        #region Fields
        private Guid providerTermId;
        private Guid mediaInstanceId;
        private int licenseTypeId;
        private DateTime? expirationDate = null;
        private List<ProviderTermGameContentInstance> gameContents = new List<ProviderTermGameContentInstance>();
        private List<ProviderTermGameContentInstanceAsset> gameContentAssets = new List<ProviderTermGameContentInstanceAsset>();
        private List<ProviderTermMediaInstanceClientType> clientTypes = new List<ProviderTermMediaInstanceClientType>();
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal ProviderTermMediaInstance(SqlDataReader reader)
        {
            this.providerTermId = reader.GetGuid(reader.GetOrdinal("providerTermId"));
            this.mediaInstanceId = reader.GetGuid(reader.GetOrdinal("mediaInstanceId"));
            this.licenseTypeId = reader.GetInt32(reader.GetOrdinal("licenseTypeId"));
            if (! reader.IsDBNull(reader.GetOrdinal("expirationDate")))
                this.expirationDate = reader.GetDateTime(reader.GetOrdinal("expirationDate"));
            
            //Initialize clientTypes
            reader.NextResult();
            while (reader.Read())
            {
                this.clientTypes.Add(new ProviderTermMediaInstanceClientType(reader));
            }

            //ProviderTermGameContentInstance
            reader.NextResult();
            while (reader.Read())
            {
                this.gameContents.Add(new ProviderTermGameContentInstance(reader));
            }

            //ProviderTermGameContentInstanceAsset
            reader.NextResult();
            while (reader.Read())
            {
                this.gameContentAssets.Add(new ProviderTermGameContentInstanceAsset(reader));
            }
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public ProviderTermMediaInstance()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow the container class to set the providerTermId.
        /// </summary>
        internal Guid ProviderTermId
        {
            get
            {
                return this.providerTermId;
            }
            set
            {
                this.providerTermId = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of the media instance associates with this provider term.
        /// </summary>
        public Guid MediaInstanceId
        {
            get
            {
                return this.mediaInstanceId;
            }
            set
            {
                this.mediaInstanceId = value;
            }
        }

        
        /// <summary>
        /// The id of the license type this provider term applies.
        /// </summary>
        public int LicenseTypeId
        {
            get
            {
                return this.licenseTypeId;
            }
            set
            {
                if (LicenseType.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid licenserTypeId specified [{0}].", value));
                this.licenseTypeId = value;
            }
        }

        /// <summary>
        /// License expiration date.
        /// </summary>
        public DateTime? ExpirationDate
        {
            get
            {
                return this.expirationDate;
            }
            set
            {
                this.expirationDate = value;
            }
        }

        /// <summary>
        /// Gets or sets the list of client types for this object.
        /// </summary>
        public ProviderTermMediaInstanceClientType[] ClientTypes
        {
            get
            {
                return this.clientTypes.ToArray();
            }
            set
            {
                this.clientTypes.Clear();
                if (value != null)
                    this.clientTypes.AddRange(value);
            }
        }

        /// <summary>
        /// The list of game content instances associated with this provider term.
        /// </summary>
        public ProviderTermGameContentInstance[] GameContentInstances
        {
            get
            {
                return this.gameContents.ToArray();
            }
            set
            {
                this.gameContents.Clear();
                if (value != null)
                    this.gameContents.AddRange(value);
            }
        }

        /// <summary>
        /// The list of game content instances associated with this provider term.
        /// </summary>
        public ProviderTermGameContentInstanceAsset[] GameContentAssetInstances
        {
            get
            {
                return this.gameContentAssets.ToArray();
            }
            set
            {
                this.gameContentAssets.Clear();
                if (value != null)
                    this.gameContentAssets.AddRange(value);
            }
        }
        
        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        internal ProviderTermMediaInstance Clone()
        {
            ProviderTermMediaInstance ptmi = new ProviderTermMediaInstance();
            ptmi.clientTypes = this.clientTypes;
            ptmi.expirationDate = this.expirationDate;
            ptmi.gameContentAssets = this.gameContentAssets;
            ptmi.gameContents = this.gameContents;
            ptmi.licenseTypeId = this.licenseTypeId;
            ptmi.mediaInstanceId = this.mediaInstanceId;
            ptmi.modified = this.modified;
            ptmi.providerTermId = this.providerTermId;
            return ptmi;
        }

        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("ProviderTermMediaInstance");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("providerTermId", this.providerTermId);
                context.SerializeElement("mediaInstanceId", this.mediaInstanceId);
                context.SerializeElement("licenseTypeId", this.licenseTypeId);
                context.SerializeElement("expirationDate", this.expirationDate);

                //Serialize ProviderTermMediaInstanceClientType
                foreach (ProviderTermMediaInstanceClientType clientType in this.clientTypes)
                {
                    clientType.ProviderTermId = this.providerTermId;
                    clientType.MediaInstanceId = this.mediaInstanceId;
                    clientType.Serialize(context);
                }

                //ProviderTermGameContentInstance
                foreach (ProviderTermGameContentInstance gameContentInstance in this.gameContents)
                {
                    gameContentInstance.ProviderTermId = this.providerTermId;
                    gameContentInstance.MediaInstanceId = this.mediaInstanceId;
                    gameContentInstance.Serialize(context);
                }

                //ProviderTermGameContentInstanceAsset
                foreach (ProviderTermGameContentInstanceAsset gameContentAssetInstance in this.gameContentAssets)
                {
                    gameContentAssetInstance.ProviderTermId = this.providerTermId;
                    gameContentAssetInstance.MediaInstanceId = this.mediaInstanceId;
                    gameContentAssetInstance.Serialize(context);
                }

                context.SerializeEndElement();
              }
            else
            {
                if (this.modified == DataChangeType.Add || this.modified == DataChangeType.Delete)
                {
                    this.SetModified(this.modified, true);
                }

                //Serialize ProviderTermMediaInstance
                if (this.modified != DataChangeType.None)
                {
                    context.SerializeStartElement("ProviderTermMediaInstance");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("providerTermId", this.providerTermId);
                    context.SerializeElement("mediaInstanceId", this.mediaInstanceId);
                    context.SerializeElement("licenseTypeId", this.licenseTypeId);
                    context.SerializeElement("expirationDate", this.expirationDate);
                    context.SerializeEndElement();
                }

                //Serialize ProviderTermMediaInstanceClientType
                foreach (ProviderTermMediaInstanceClientType clientType in this.clientTypes)
                {
                    clientType.ProviderTermId = this.providerTermId;
                    clientType.MediaInstanceId = this.mediaInstanceId;
                    clientType.Serialize(context);
                }

                //ProviderTermGameContentInstance
                foreach (ProviderTermGameContentInstance gameContentInstance in this.gameContents)
                {
                    gameContentInstance.ProviderTermId = this.providerTermId;
                    gameContentInstance.MediaInstanceId = this.mediaInstanceId;
                    gameContentInstance.Serialize(context);
                }

                //ProviderTermGameContentInstanceAsset
                foreach (ProviderTermGameContentInstanceAsset gameContentAssetInstance in this.gameContentAssets)
                {
                    gameContentAssetInstance.ProviderTermId = this.providerTermId;
                    gameContentAssetInstance.MediaInstanceId = this.mediaInstanceId;
                    gameContentAssetInstance.Serialize(context);
                }
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::providerTermId");
                if (null != attr) this.providerTermId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::mediaInstanceId");
                if (null != attr) this.mediaInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::licenseTypeId");
                if (null != attr) this.licenseTypeId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::expirationDate");
                if (null != attr) this.expirationDate = Serialization.DeserializeDateTimeElement(attr.InnerText);

                XmlNodeList nodes = node.SelectNodes("child::ProviderTermMediaInstanceClientType");
                foreach (XmlNode subnode in nodes)
                {
                    ProviderTermMediaInstanceClientType miClientType = new ProviderTermMediaInstanceClientType();
                    miClientType.Deserialize(subnode);
                    this.clientTypes.Add(miClientType);
                }

                nodes = node.SelectNodes("child::ProviderTermGameContentInstance");
                foreach (XmlNode subnode in nodes)
                {
                    ProviderTermGameContentInstance gameContent = new ProviderTermGameContentInstance();
                    gameContent.Deserialize(subnode);
                    this.gameContents.Add(gameContent);
                }

                nodes = node.SelectNodes("child::ProviderTermGameContentInstanceAsset");
                foreach (XmlNode subnode in nodes)
                {
                    ProviderTermGameContentInstanceAsset gciAsset = new ProviderTermGameContentInstanceAsset();
                    gciAsset.Deserialize(subnode);
                    this.gameContentAssets.Add(gciAsset);
                }
            }
        }


        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
            if (cascade)
            {
                foreach (ProviderTermMediaInstanceClientType clientType in this.clientTypes)
                    clientType.SetModified(type, cascade);

                foreach (ProviderTermGameContentInstance gameContentInstance in this.gameContents)
                    gameContentInstance.SetModified(type, cascade);

                foreach (ProviderTermGameContentInstanceAsset gameContentAssetInstance in this.gameContentAssets)
                    gameContentAssetInstance.SetModified(type, cascade);
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\PublishingSearch.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define publishing search response class.
    /// </summary>
    public class PublishingSearchResponse : Response
    {
        #region Fields
        private DateTime offerStartDate;
        private DateTime offerEndDate;
        private int providerId = -1;
        private string mediaTitle = string.Empty;
        private string offerTitle = string.Empty;
        private string countryCode = string.Empty;
        private Guid offerId = Guid.Empty;
        private Guid mediaId = Guid.Empty;
        private Guid offerInstanceId = Guid.Empty;
        private int? seasonNumber;
        private int? episodeNumber;
        private bool selected = false;
        #endregion
        #region Properties
        /// <summary>
        /// This is used by UI only. The SP does not supply value for this field. 
        /// </summary>
        public bool Selected
        {
            get { return selected; }
            set { selected = value; }
        }
        /// <summary>
        /// Start date of the offer instance.
        /// </summary>
        public DateTime OfferStartDate
        {
            get { return offerStartDate; }
            set { offerStartDate = value; }
        }
        /// <summary>
        /// End date of the offer instance.
        /// </summary>
        public DateTime OfferEndDate
        {
            get { return offerEndDate; }
            set { offerEndDate = value; }
        }
        /// <summary>
        /// Provider ID of the offer
        /// </summary>
        public int ProviderId
        {
            get { return providerId; }
            set { providerId = value; }
        }
        /// <summary>
        /// Title of the media store in MediaLocal table with lcid=1033(en-US)
        /// </summary>
        public string MediaTitle
        {
            get { return mediaTitle; }
            set { mediaTitle = value; }
        }

        /// <summary>
        /// Title of the offer from the offer
        /// </summary>
        public string OfferTitle
        {
            get { return offerTitle; }
            set { offerTitle = value; }
        }

        /// <summary>
        /// Country code associated with the offer instance
        /// </summary>
        public string CountryCode
        {
            get { return countryCode; }
            set { countryCode = value; }
        }

        /// <summary>
        /// ID of the offer
        /// </summary>
        public Guid OfferId
        {
            get { return offerId; }
            set { offerId = value; }
        }
        /// <summary>
        /// Media ID of the media related with the offer.
        /// </summary>
        public Guid MediaId
        {
            get { return mediaId; }
            set { mediaId = value; }
        }
        /// <summary>
        /// OfferInstance ID.
        /// </summary>
        public Guid OfferInstanceGuid
        {
            get { return offerInstanceId; }
            set { offerInstanceId = value; }
        }
        /// <summary>
        /// Season number of the video if the video has one.
        /// </summary>
        public int? SeasonNumber
        {
            get { return seasonNumber; }
            set { seasonNumber = value; }
        }
        /// <summary>
        /// EpisodeNumber of the video if the video has one. 
        /// </summary>
        public int? EpisodeNumber
        {
            get { return episodeNumber; }
            set { episodeNumber = value; }
        }
        #endregion


        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public PublishingSearchResponse()
        {
        }
        /// <summary>
        /// Constructor used to read the data out of a db reader after calling the search SP. 
        /// </summary>
        /// <param name="reader">reader returned by the sql helper that calls PublishingSearch SP</param>
        public PublishingSearchResponse(SqlDataReader reader)
        {
            this.offerStartDate = reader.IsDBNull(reader.GetOrdinal("offerStartDate")) ? new DateTime(1900, 1, 1) : reader.GetDateTime(reader.GetOrdinal("offerStartDate"));
            this.offerEndDate = reader.IsDBNull(reader.GetOrdinal("offerEndDate")) ? new DateTime(1900, 1, 1) : reader.GetDateTime(reader.GetOrdinal("offerEndDate"));
            this.providerId = reader.IsDBNull(reader.GetOrdinal("providerId")) ? -1 : reader.GetInt32(reader.GetOrdinal("providerId"));
            this.mediaTitle = reader.IsDBNull(reader.GetOrdinal("mediaTitle")) ? string.Empty : reader.GetString(reader.GetOrdinal("mediaTitle"));
            this.offerTitle = reader.IsDBNull(reader.GetOrdinal("offerTitle")) ? string.Empty : reader.GetString(reader.GetOrdinal("offerTitle"));
            this.countryCode = reader.IsDBNull(reader.GetOrdinal("countryCode")) ? string.Empty : reader.GetString(reader.GetOrdinal("countryCode"));
            this.offerId = reader.IsDBNull(reader.GetOrdinal("offerId")) ? Guid.Empty : reader.GetGuid(reader.GetOrdinal("offerId"));
            this.mediaId = reader.IsDBNull(reader.GetOrdinal("mediaId")) ? Guid.Empty : reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.offerInstanceId = reader.IsDBNull(reader.GetOrdinal("offerInstanceId")) ? Guid.Empty : reader.GetGuid(reader.GetOrdinal("offerInstanceId"));
            if (!reader.IsDBNull(reader.GetOrdinal("seasonNumber")))
                this.seasonNumber = reader.GetInt32(reader.GetOrdinal("seasonNumber"));
            if (!reader.IsDBNull(reader.GetOrdinal("episodeNumber")))
                this.episodeNumber = reader.GetInt32(reader.GetOrdinal("episodeNumber"));
        }
        #endregion
    }

    /// <summary>
    /// Define Publishing search request class.
    /// </summary>
    public class PublishingSearchRequest : Request
    {
        #region Fields
        private DateTime minOfferStartDate = new DateTime(1900, 1, 1);
        private DateTime maxOfferStartDate = new DateTime(2100, 1, 1);
        private DateTime minOfferEndDate = new DateTime(1900, 1, 1);
        private DateTime maxOfferEndDate = new DateTime(2100, 1, 1);
        private int providerId = -1;
        private string title = string.Empty;
        private int videoDefinition = -1;
        private int videoVisibilityStatusId = -1;
        private int offerVisibilityStatusId = -1;
        #endregion

        #region Properties
        /// <summary>
        /// Min Start date of the offer
        /// </summary>
        public DateTime MinOfferStartDate
        {
            get { return minOfferStartDate; }
            set { minOfferStartDate = value; }
        }
        /// <summary>
        /// Max Start date of the offer
        /// </summary>
        public DateTime MaxOfferStartDate
        {
            get { return maxOfferStartDate; }
            set { maxOfferStartDate = value; }
        }
        /// <summary>
        /// Min end date of the offer
        /// </summary>
        public DateTime MinOfferEndDate
        {
            get { return minOfferEndDate; }
            set { minOfferEndDate = value; }
        }
        /// <summary>
        /// Max end date of the offer
        /// </summary>
        public DateTime MaxOfferEndDate
        {
            get { return maxOfferEndDate; }
            set { maxOfferEndDate = value; }
        }
        /// <summary>
        /// Provider Of the offer
        /// </summary>
        public int ProviderId
        {
            get { return providerId; }
            set { providerId = value; }
        }
        /// <summary>
        /// Title of the offer, we only search Medialocale of the media that has lcid=1033(en-US)
        /// </summary>
        public string Title
        {
            get { return title; }
            set { title = value; }
        }
        /// <summary>
        /// Video Definnition of the video
        /// </summary>
        public int VideoDefinition
        {
            get { return videoDefinition; }
            set { videoDefinition = value; }
        }
        /// <summary>
        /// Visibility Status that stores in Media table.
        /// </summary>
        public int VideoVisibilityStatusId
        {
            get { return videoVisibilityStatusId; }
            set { videoVisibilityStatusId = value; }
        }
        /// <summary>
        /// Visibility status that stores in OfferInstanceProviderTerm table.
        /// </summary>
        public int OfferVisibilityStatusId
        {
            get { return offerVisibilityStatusId; }
            set { offerVisibilityStatusId = value; }
        }

        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public PublishingSearchRequest()
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Searches for Publishing specified by the search request object.
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<PublishingSearchResponse> responses = new List<PublishingSearchResponse>();
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "PublishingSearch",
                        this.VideoVisibilityStatusId,
                        this.offerVisibilityStatusId,
                        this.minOfferStartDate,
                        this.maxOfferStartDate,
                        this.minOfferEndDate,
                        this.maxOfferEndDate,
                        this.providerId,
                        this.title,
                        this.videoDefinition,
                        this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new PublishingSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "PublishingSearch ");
                throw;
            }
            return responses.ToArray();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\ProviderTermMediaInstanceClientType.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines the ProviderTermMediaInstanceClientType data, and creation of the ProviderTermMediaInstanceClientType class.
    /// </summary>
    public class ProviderTermMediaInstanceClientType : ICatalogData
    {
        #region Fields
        private Guid providerTermId;
        private Guid mediaInstanceId;
        private int clientTypeId;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal ProviderTermMediaInstanceClientType(SqlDataReader reader)
        {
            this.clientTypeId = reader.GetInt32(reader.GetOrdinal("clientTypeId"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public ProviderTermMediaInstanceClientType()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Allow container class to set the provider term Id for this object.
        /// </summary>
        internal Guid ProviderTermId
        {
            set { this.providerTermId = value; }
        }

        /// <summary>
        /// Allow container class to set the media instance Id for this object.
        /// </summary>
        internal Guid MediaInstanceId
        {
            set { this.mediaInstanceId = value; }
        }

        /// <summary>
        /// Gets or sets the id of client type this providerTerm/mediaInstance is associated.
        /// </summary>
        public int ClientTypeId
        {
            get
            {
                return this.clientTypeId;
            }
            set
            {
                if (ClientType.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid clientTypeId specified [{0}].", value));
                this.clientTypeId = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object object into xml.
        /// </summary>
        /// <param name="context">An instance of the Serialization object</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("ProviderTermMediaInstanceClientType");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("providerTermId", this.providerTermId);
                context.SerializeElement("mediaInstanceId", this.mediaInstanceId);
                context.SerializeElement("clientTypeId", this.clientTypeId);
                context.SerializeEndElement();
            }
        }



        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::providerTermId");
                if (null != attr) this.providerTermId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::mediaInstanceId");
                if (null != attr) this.mediaInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::clientTypeId");
                if (null != attr) this.clientTypeId = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\RatingDescriptor.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of RatingDescriptor data in the catalog.
    /// </summary>
    public class RatingDescriptor
    {
        #region Fields
        private int id;
        private string name;
        private string description;
        private int ratingSystemId;
        #endregion

        #region Constructors
        /// <summary>
        /// Empty constructor to allow serialization over SOAP.
        /// </summary>
        public RatingDescriptor()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RatingDescriptor class.
        /// </summary>
        /// <param name="reader"></param>
        internal RatingDescriptor( SqlDataReader reader )
        {
            id = reader.GetInt32(reader.GetOrdinal("ratingDescriptorId"));
            name = reader.GetString(reader.GetOrdinal("name"));
            description = reader.IsDBNull(reader.GetOrdinal("description")) ? null : reader.GetString(reader.GetOrdinal("description"));
            ratingSystemId = reader.GetInt32(reader.GetOrdinal("ratingSystemId"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets this RatingDescriptor Id.
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets this RatingDescriptor name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets this RatingDescriptor description.
        /// </summary>
        public string Description
        {
            get
            {
                return this.description;
            }
            set
            {
                this.description= value;
            }
        }

        /// <summary>
        /// The id of the RatingSystem of which this RatingDescriptor is a child
        /// </summary>
        public int RatingSystemId
        {
            get
            {
                return this.ratingSystemId;
            }
            set
            {
                this.ratingSystemId = value;
            }
        }

        #endregion

        #region Methods
        /// <summary>
        /// Gets a RatingDescriptor given a ratingDescriptorId.
        /// </summary>
        /// <param name="ratingDescriptorId">The Id of the RatingDescriptor to retrieve</param>
        /// <returns>The RatingDescriptor for the specified id</returns>
        public static RatingDescriptor Get(int ratingDescriptorId)
        {
            RatingDescriptor ratingDescriptor = null;
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "RatingDescriptorGet",
                    ratingDescriptorId
                    ))
            {
                if ( reader.Read() )
                {
                    ratingDescriptor = new RatingDescriptor(reader);
                }
            }

            return ratingDescriptor;
        }

        /// <summary>
        /// Gets all RatingDescriptors in the catalog.
        /// </summary>
        /// <returns>All RatingDescriptors in the catalog</returns>
        public static List<RatingDescriptor> Get()
        {
            List<RatingDescriptor> ratingDescriptors = new List<RatingDescriptor>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "RatingDescriptorGet"
                    ))
            {
                // Get the systems
                while( reader.Read())
                {
                    ratingDescriptors.Add( new RatingDescriptor(reader));
                }
            }

            return ratingDescriptors;
        }
        /// <summary>
        /// Returns the next available id
        /// </summary>
        /// <returns></returns>
        public static int GetAvailableId()
        {
            try
            {
                int retvalue = Convert.ToInt32(SqlHelper.ExecuteScalar(CatalogDatabase.RawCatalogDBConnectionString, CommandType.Text, "select dbo.GenerateIdRatingDescriptor()"));
                return retvalue;
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GenerateIdRatingDescriptor");
                throw;
            }

        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\RatingValue.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of RatingValue data in the catalog.
    /// </summary>
    public class RatingValue
    {
        #region Fields
        private int id;
        private string name;
        private string description;
        private int ratingSystemId;
        private Guid imageMediaId;
        #endregion

        #region Constructors
        /// <summary>
        /// Empty constructor to allow serialization over SOAP.
        /// </summary>
        public RatingValue()
        {
        }

        /// <summary>
        /// Initializes a new instance of the RatingSystem class.
        /// </summary>
        /// <param name="reader"></param>
        internal RatingValue( SqlDataReader reader )
        {
            id = reader.GetInt32(reader.GetOrdinal("ratingValueId"));
            name = reader.GetString(reader.GetOrdinal("name"));
            description = reader.IsDBNull(reader.GetOrdinal("description")) ? null : reader.GetString(reader.GetOrdinal("description"));
            ratingSystemId = reader.GetInt32(reader.GetOrdinal("ratingSystemId"));
            imageMediaId = reader.IsDBNull(reader.GetOrdinal("imageMediaId")) ? Guid.Empty : reader.GetGuid(reader.GetOrdinal("imageMediaId"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets this RatingValue Id.
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// Gets or sets this RatingValue name.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets this RatingValue description.
        /// </summary>
        public string Description
        {
            get
            {
                return this.description;
            }
            set
            {
                this.description= value;
            }
        }

        /// <summary>
        /// The id of the RatingSystem of which this RatingValue is a child
        /// </summary>
        public int RatingSystemId
        {
            get
            {
                return this.ratingSystemId;
            }
            set
            {
                this.ratingSystemId = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the id of the image associated with this RatingValue, if there is one.
        /// </summary>
        public Guid ImageMediaId
        {
            get
            {
                return this.imageMediaId;
            }
            set
            {
                this.imageMediaId = value;
            }
        }

        #endregion

        #region Methods
        /// <summary>
        /// Gets a RatingValue given a ratingValueId.
        /// </summary>
        /// <param name="ratingValueId">The Id of the RatingValue to retrieve</param>
        /// <returns>The RatingValue for the specified id</returns>
        public static RatingValue Get(int ratingValueId)
        {
            RatingValue ratingValue = null;
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "RatingValueGet",
                    ratingValueId
                    ))
            {
                if ( reader.Read() )
                {
                    ratingValue = new RatingValue(reader);
                }
            }

            return ratingValue;
        }

        /// <summary>
        /// Gets all RatingValues in the catalog.
        /// </summary>
        /// <returns>All RatingValues in the catalog</returns>
        public static List<RatingValue> Get()
        {
            List<RatingValue> ratingValues = new List<RatingValue>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "RatingValueGet"
                    ))
            {
                // Get the systems
                while( reader.Read())
                {
                    ratingValues.Add( new RatingValue(reader));
                }
            }

            return ratingValues;
        }
        /// <summary>
        /// Returns the next available id
        /// </summary>
        /// <returns></returns>
        public static int GetAvailableId()
        {
            try
            {
                int retvalue = Convert.ToInt32(SqlHelper.ExecuteScalar(CatalogDatabase.RawCatalogDBConnectionString, CommandType.Text, "select dbo.GenerateIdRatingValue()"));
                return retvalue;
            }
            catch (SqlException e)
            {
                Utils.Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "GenerateIdRatingValue");
                throw;
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Request.cs ===
using System;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define the abstract base class to be derived by specific media search class.
    /// </summary>
    public abstract class Request
    {
        /// <summary>
        /// Define the max results to return; default to 500.
        /// </summary>
        public int MaxResults = 500;

        /// <summary>
        /// Define the Search method to be implemented by the specifif media search class.
        /// </summary>
        /// <returns>The list of search results</returns>
        public abstract Response[] Search();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Response.cs ===
using System;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define the abstract base class to be derived by specific media search class.
    /// </summary>
    public abstract class Response
    {
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Role.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides editing and retrieving of Role data in the catalog, and aids in the 
    /// creation of the Role object.
    /// </summary>
    public class Role : Utils.IKeyed<Int32>
    {
        #region Fields
        private int id;
        private string name;
        private int sortOrder;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,Role> RoleCache = new Utils.KeyedCache<Int32,Role>(
                        new Utils.KeyedCache<Int32,Catalog.Role>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Contructors
        /// <summary>
        /// Empty constructor for serializing this class over SOAP.
        /// </summary>
        public Role()
        {
        }

        /// <summary>
        /// Initializes a new instance of the Role class from a db reader.
        /// </summary>
        /// <param name="reader">A sql db reader containg the data for a role</param>
        public Role(SqlDataReader reader)
        {
            id = reader.GetInt32(reader.GetOrdinal("roleId"));
            name = reader.GetString(reader.GetOrdinal("name"));
            sortOrder = reader.GetInt32(reader.GetOrdinal("sortOrder"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the id of this Role.
        /// </summary>
        public int Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the name of this Role.
        /// </summary>
        public string Name
        {
            get
            {
                return this.name;
            }
            set
            {
                Validate.IsNotEmpty(value, "Name", "Name");
                this.name = value;
            }
        }

        /// <summary>
        /// Gets or sets the sort order for this role.
        /// </summary>
        public Int32 SortOrder
        {
            get
            {
                return this.sortOrder;
            }
            set
            {
                this.sortOrder = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Gets the Role for the given id.
        /// </summary>
        /// <param name="id">The id of the Role to retrieve.</param>
        /// <returns>The Role for the given id.</returns>
        public static Role Get(int id)
        {
            return RoleCache.Get(id);
        }

        /// <summary>
        /// Gets all Roles in the catalog.
        /// </summary>
        /// <returns>All Role in the catalog.</returns>
        public static List<Role> Get()
        {
            return RoleCache.Get();
        }


        private static List<Role> GetData()
        {
            List<Role> roles = new List<Role>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "RoleGet"
                    ))
            {
                while( reader.Read() )
                {
                    roles.Add( new Role( reader ));
                }
            }
            return roles;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Store.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Represents an deivery type
    /// </summary>
    public class Store : Utils.IKeyed<Int32>
    {
        #region Fields
        private Int32 id;
        private String name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,Store> StoreCache = new Utils.KeyedCache<Int32,Store>(
                        new Utils.KeyedCache<Int32,Catalog.Store>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP
        /// </summary>
        public Store()
        {
        }

        /// <summary>
        /// Constructor that takes a db reader
        /// </summary>
        private Store( SqlDataReader reader )
        {
            id = reader.GetInt32(reader.GetOrdinal("storeId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// The id for the store
        /// </summary>
        public Int32 Id
        {
            get { return id; }
            set { id = value; }
        }

        /// <summary>
        /// The name by which the store is known - for readability purpose only
        /// </summary>
        public String Name
        {
            get
            {
                return name;
            }
            
            set
            {
                if ( String.IsNullOrEmpty( value ))
                {
                    throw new ArgumentNullException( "The name of a Store cannot be null or empty." );
                }
                name = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get the Store for a given id.
        /// </summary>
        /// <param name="id">The id of the Store to retrieve</param>
        /// <returns>The Store of the given id.</returns>
        internal static Store Get(int id)
        {
            return StoreCache.Get( id );
        }

        /// <summary>
        /// Gets the list of DeliveryTypes in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<Store> Get()
        {
            return StoreCache.Get();
        }
        
        /// <summary>
        /// Gets the list of DeliveryTypes from the database.
        /// </summary>
        /// <returns></returns>
        private static List<Store> GetData()
        {
            List<Store> stores = new List<Store>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "StoreGet"
                    ))
            {
                while( reader.Read() )
                {
                    stores.Add( new Store( reader ));
                }
            }
            return stores;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\StorageUnit.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides management of StorageUnit data in the catalog.
    /// </summary>
    public class StorageUnit : Utils.IIdentifiable<Int32>
    {
        #region Fields

        private int storageUnitId;
        private string internalName;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.Cache<StorageUnit, Int32> StorageUnitCache = new Utils.Cache<StorageUnit, Int32>(
                new Utils.Cache<StorageUnit, Int32>.CacheDataRetrievalDelegate(GetData),
                CacheRefreshPeriod);

        #endregion

        #region Constructors
        /// <summary>
        /// Empty constructor to work over SOAP.
        /// </summary>
        public StorageUnit()
        {
        }

        /// <summary>
        /// Initializes a new instance of the StorageUnit object.
        /// </summary>
        /// <param name="storageUnitId">StorageUnit code</param>
        /// <param name="internalName">StorageUnit name</param>
        public StorageUnit(int storageUnitId, string internalName)
        {
            Validate.IsNotEmpty(internalName, "InternalName", "internalName");
            this.storageUnitId = storageUnitId;
            this.internalName = internalName;
        }

        /// <summary>
        /// Initializes a new instance of the StorageUnit object.
        /// </summary>
        /// <param name="reader"></param>
        internal StorageUnit(SqlDataReader reader)
        {
            storageUnitId = reader.GetInt32(reader.GetOrdinal("storageUnitId"));
            internalName = reader.GetString(reader.GetOrdinal("internalName"));
        }
        #endregion

        #region Properties

        /// <summary>
        /// The id of this object - required for key'ing.
        /// </summary>
        public int Id
        {
            get
            {
                return this.storageUnitId;
            }
        }

        /// <summary>
        /// Gets this StorageUnit code.
        /// </summary>
        public int StorageUnitId
        {
            get
            {
                return this.storageUnitId;
            }
            set
            {
                // Empty set method so SOAP can expose this property correctly.
            }
        }

        /// <summary>
        /// Gets or sets this StorageUnit name.
        /// </summary>
        public string InternalName
        {
            get
            {
                return this.internalName;
            }
            set
            {
                Validate.IsNotEmpty(value, "InternalName", "value");
                this.internalName = value;
            }
        }

        /// <summary>
        /// Id to be used by cache
        /// </summary>
        public int PrimaryId
        {
            get { return storageUnitId; }
        }
        #endregion

        #region Methods

        /// <summary>
        /// Gets a StorageUnit given a StorageUnitCode.
        /// </summary>
        /// <param name="storageUnitId">The Code of the StorageUnit to retrieve.</param>
        /// <returns>The StorageUnit for the specified StorageUnitCode.</returns>
        public static StorageUnit Get(int storageUnitId)
        {
                return StorageUnitCache.Get(storageUnitId);
        }

        /// <summary>
        /// Gets all storageUnitId in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<StorageUnit> Get()
        {
            return StorageUnitCache.Get();
        }

        /// <summary>
        /// Gets all storageUnitId from the db.
        /// </summary>
        /// <returns></returns>
        private static List<StorageUnit> GetData()
        {
            List<StorageUnit> storageUnitIdList = new List<StorageUnit>();

            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "StorageUnitGet"
                    ))
            {
                while (reader.Read())
                {
                    storageUnitIdList.Add(new StorageUnit(reader));
                }
            }

            return storageUnitIdList;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Serialization.cs ===
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.IO;
using System.Xml;
using System.Xml.Serialization;

namespace Microsoft.Ems.Common.Catalog
{
	/// <summary>
	/// Provides xml serialization of EMS Catalog objects.
	/// </summary>
	public class Serialization : IDisposable
	{
		#region Constants				
		//Format string used to ensure we serialize the milliseconds of the date
		private const string DateTimeFormatString = "MM/dd/yyyy HH:mm:ss.fff";
        //Attribute name for indicate database operation
        private const string DBOperationNameString = "op";
        #endregion

       #region Fields
        //Used during serialization
		private StringWriter stringWriter;
		private XmlWriter xmlWriter;
        
        //Serialize only changed properties if false, 
        //Serialize all properties if true
        bool fullSerialization;

		//Holds the final xml used to save the catalog object
		private string resultXml;

        //Holds the string of xml to deserialize
        private string inputXml;

        //Holds the current serialized element
		private string currentlySerializedElement;
		#endregion

		#region Properties
		/// <summary>
		/// Gets the XML that is used to save the object
		/// </summary>
		public string ResultXml
		{
			get
			{
				if (string.IsNullOrEmpty(resultXml))
				{
					xmlWriter.Flush();
					stringWriter.Flush();
                    resultXml = stringWriter.ToString();
				}

				return resultXml;
			}
		}

		/// <summary>
		/// Get or set the XML that is used to deserialize the object and fill the properties
		/// </summary>         
        public string InputXml
        {
            get
            {
                return inputXml;
            }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    inputXml = string.Empty;
                }
                else
                {
                    this.inputXml = value;
                }
            }
        }

        /// <summary>
        /// Get or set whether this Serialization is full or only for modified 
        /// </summary>
        public bool FullSerialization
        {
            get
            {
                return this.fullSerialization;
            }
            set
            {
                this.fullSerialization = value;
            }
        }
		#endregion
		
		#region Constructors
		/// <summary>
		/// Constructor that initialize a new instance of the Serialization class.
		/// </summary>
		public Serialization()
		{
			stringWriter = new StringWriter(CultureInfo.InvariantCulture);

			XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
            xmlWriterSettings.Encoding = Encoding.Unicode; 
			xmlWriterSettings.CheckCharacters = true;

			xmlWriter = XmlTextWriter.Create(stringWriter, xmlWriterSettings);

            fullSerialization = false;
		}
		#endregion

		#region Serialization Methods
		/// <summary>
		/// Serializes start elemnet
		/// </summary>
		/// <param name="elementName">Elment name</param>
		public void SerializeStartElement(string elementName)
		{
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            //save currently processed element name
			currentlySerializedElement = elementName;

			xmlWriter.WriteStartElement(elementName);
		}

 		/// <summary>
		/// Serializes end element
		/// </summary>
		public void SerializeEndElement()
		{
			xmlWriter.WriteEndElement();
		}

        /// <summary>
        /// Serializes database operation.
        /// </summary>
        public void SerializeDatabaseOperation(DataChangeType type)
        {
            xmlWriter.WriteAttributeString(DBOperationNameString, type.ToString());
        }

        /// <summary>
        /// Serializes database operation.
        /// </summary>
        public void SerializeDatabaseOperation(InsertDataChangeType type)
        {
            xmlWriter.WriteAttributeString(DBOperationNameString, type.ToString());
        }

        /// <summary>
        /// Serializes a string attribute
        /// </summary>
        /// <param name="attributeName">Name</param>
        /// <param name="attributeValue">value</param>
        public void SerializeAttribute(string attributeName, string attributeValue)
        {
            if (string.IsNullOrEmpty(attributeName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "attributeName");
            }

            if (!string.IsNullOrEmpty(attributeValue))
            {
                xmlWriter.WriteAttributeString(attributeName, attributeValue);
            }
        }

        /// <summary>
        /// Serializes an int attribute
        /// </summary>
        /// <param name="attributeName">Name</param>
        /// <param name="attributeValue">value</param>
        public void SerializeAttribute(string attributeName, int attributeValue)
        {
            if (string.IsNullOrEmpty(attributeName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "attributeName");
            }

            xmlWriter.WriteAttributeString(attributeName, attributeValue.ToString());
        }

        /// <summary>
        /// Serializes a string element
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">value</param>
        public void SerializeElement(string elementName, string elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            if (elementValue != null)
            {
                xmlWriter.WriteElementString(elementName, elementValue);
            }
        }

        /// <summary>
        /// Serializes a nullable datetime element
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">value</param>
        public void SerializeElement(string elementName, DateTime? elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            if (elementValue.HasValue)
            {
                xmlWriter.WriteElementString(elementName, elementValue.Value.ToString(DateTimeFormatString, CultureInfo.InvariantCulture));
            }
        }
        /// <summary>
        /// Serializes a nullable datetime element
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">value</param>
        /// <param name="dateFormat">Format of the Date</param>
        public void SerializeElement(string elementName, DateTime? elementValue,string dateFormat)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            if (elementValue.HasValue)
            {
                xmlWriter.WriteElementString(elementName, elementValue.Value.ToString(dateFormat, CultureInfo.InvariantCulture));
            }
        }
        /// <summary>
        /// Serializes an Int64 element
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">Value</param>
        public void SerializeElement(string elementName, Int64 elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            xmlWriter.WriteElementString(elementName, elementValue.ToString());
        }

        /// <summary>
        /// Serializes an int element
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">Value</param>
        public void SerializeElement(string elementName, int elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            xmlWriter.WriteElementString(elementName, elementValue.ToString());
        }

        /// <summary>
        /// Serializes a nullable int element
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">Value</param>
        public void SerializeElement(string elementName, int? elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            if (elementValue.HasValue && elementValue != -1)
            {
                xmlWriter.WriteElementString(elementName, elementValue.ToString());
            }
        }

        /// <summary>
        /// Serializes a boolean element
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">Value</param>
        public void SerializeElement(string elementName, bool elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            xmlWriter.WriteElementString(elementName, (elementValue? "1" : "0"));
        }

        /// <summary>
        /// Serializes a nullable boolean element
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">Value</param>
        public void SerializeElement(string elementName, bool? elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            if (elementValue.HasValue)
            {
                xmlWriter.WriteElementString(elementName, (elementValue.Value ? "1" : "0"));
            }
        }

        /// <summary>
        /// Serializes a nullable Guid element
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">Value</param>
        public void SerializeElement(string elementName, Guid? elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            if (elementValue.HasValue)
            {
                xmlWriter.WriteElementString(elementName, elementValue.ToString());
            }
        }

        /// <summary>
        /// Serializes a Decimal element.
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">Value</param>
        public void SerializeElement(string elementName, Decimal elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            xmlWriter.WriteElementString(elementName, elementValue.ToString());
        }


        /// <summary>
        /// Serializes a nullable Decimal element.
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">Value</param>
        public void SerializeElement(string elementName, Decimal? elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            if (elementValue.HasValue )
            {
                xmlWriter.WriteElementString(elementName, elementValue.ToString());
            }
        }




        /// <summary>
        /// Serializes a byte array element.
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">Value</param>
        public void SerializeElement(string elementName, byte[] elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            if (null != elementValue)
            {
                string hexString = ByteArrayToBase64String(elementValue);
                xmlWriter.WriteElementString(elementName, hexString);
            }
        }

        /// <summary>
        /// Serializes a Double element
        /// </summary>
        /// <param name="elementName">Name</param>
        /// <param name="elementValue">Value</param>
        public void SerializeElement(string elementName, Double elementValue)
        {
            if (string.IsNullOrEmpty(elementName))
            {
                throw new ArgumentException("Argument Cannot be null or empty", "elementName");
            }

            xmlWriter.WriteElementString(elementName, elementValue.ToString() );
        }

        /// <summary>
        /// Serialize an object of given type into xml.
        /// </summary>
        /// <param name="type">Indicates the type of object to be serialize</param>
        /// <param name="obj">object to be serialize</param>
        public void SerializeObject(Type type, Object obj)
        {
            XmlSerializer serializer = new XmlSerializer(type);   
            serializer.Serialize(xmlWriter, obj);
        }

        /// <summary>
        /// Deserialize the xml string back to an object of given type.
        /// </summary>
        /// <param name="type">Indicates the objec type</param>
        /// <param name="xmlData">The xml data to be deserialized</param>
        /// <returns>The object of given type.</returns>
        public Object DeserializeObject(Type type, string xmlData)
        {
            XmlSerializer serializer = new XmlSerializer(type);
            return serializer.Deserialize(new StringReader(xmlData));
        }
        /// <summary>
        /// De-serializes DateTime property(Default format)
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value in DateTime.</returns>
        public static DateTime DeserializeDateTimeElement(string value)
        {
            if(string.IsNullOrEmpty(value))
                return DateTime.MinValue;
            else
                return DateTime.ParseExact(value, DateTimeFormatString, DateTimeFormatInfo.InvariantInfo,
                        DateTimeStyles.AllowLeadingWhite | DateTimeStyles.AllowTrailingWhite);
        }
        /// <summary>
        /// De-Serializes DateTime property with format
        /// </summary>
        /// <param name="value"></param>
        /// <param name="expectedFormat"></param>
        /// <returns></returns>
        public static DateTime DeserializeDateTimeElement(string value, string expectedFormat)
        {
            if (string.IsNullOrEmpty(value))
                return DateTime.MinValue;
            else
                return DateTime.ParseExact(value, expectedFormat, DateTimeFormatInfo.InvariantInfo,
                        DateTimeStyles.AllowLeadingWhite | DateTimeStyles.AllowTrailingWhite);
        }
        /// <summary>
        /// De-serializes string property
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value in string.</returns>
        public static string DeserializeStringElement(string value)
        {
            if (string.IsNullOrEmpty(value))
                return string.Empty;
            else
                return value;
        }

        /// <summary>
        /// De-serializes DateTime property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in DateTime.</returns>
        public static DateTime DeserializeDataTimeElement(XmlNode node, DateTime defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeDateTimeElement(attr.InnerText);
            }
        }

        /// <summary>
        /// De-serializes Guid property
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value in Guid.</returns>
        public static Guid DeserializeGuidElement(string value)
        {
            if (string.IsNullOrEmpty(value))
                return Guid.Empty;
            else
                return new Guid(value);
        }


        /// <summary>
        /// De-serializes Guid property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in Guid.</returns>
        public static Guid DeserializeGuidElement(XmlNode node, Guid defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeGuidElement(attr.InnerText);
            }
        }


        /// <summary>
        /// De-serializes int32 property
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value in int.</returns>
        public static int DeserializeIntElement(string value)
        {
            if (string.IsNullOrEmpty(value))
                return int.MinValue;
            else
                return Convert.ToInt32(value, 10);
        }


        /// <summary>
        /// De-serializes int32 property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in int.</returns>
        public static int DeserializeIntElement(XmlNode node, int defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;
            
            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// De-serializes int32 property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in int.</returns>
        public static int? DeserializeIntElement(XmlNode node, int? defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeIntElement(attr.InnerText);
            }
        }

        /// <summary>
        /// De-serializes int64 property
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value in int64.</returns>
        public static Int64 DeserializeInt64Element(string value)
        {
            if (string.IsNullOrEmpty(value))
                return Int64.MinValue;
            else
                return Convert.ToInt64(value, 10);
        }

        /// <summary>
        /// De-serializes int64 property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in int64.</returns>
        public static Int64 DeserializeIntElement(XmlNode node, Int64 defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeInt64Element(attr.InnerText);
            }
        }

        /// <summary>
        /// De-serializes bool property
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value in bool.</returns>
        public static bool DeserializeBoolElement(string value)
        {
            if (string.IsNullOrEmpty(value))
                return false;
            else
                return (Convert.ToInt32(value)!= 0);
        }

        /// <summary>
        /// De-serializes bool property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in bool.</returns>
        public static bool DeserializeBoolElement(XmlNode node, bool defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeBoolElement(attr.InnerText);
            }
        }

        /// <summary>
        /// De-serializes bool property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in bool.</returns>
        public static bool? DeserializeBoolElement(XmlNode node, bool? defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeBoolElement(attr.InnerText);
            }
        }

        /// <summary>
        /// De-serializes double property
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value in double.</returns>
        public static Double DeserializeDoubleElement(string value)
        {
            if (string.IsNullOrEmpty(value))
                return Double.MinValue;
            else
                return Convert.ToDouble(value);
        }

        /// <summary>
        /// De-serializes double property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in double.</returns>
        public static Double DeserializeDoubleElement(XmlNode node, Double defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeDoubleElement(attr.InnerText);
            }
        }
        
        /// <summary>
        /// De-serializes decimal property
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value in decimal.</returns>
        public static Decimal DeserializeDecimalElement(string value)
        {
            if (string.IsNullOrEmpty(value))
                return Decimal.MinusOne;
            else
                return Convert.ToDecimal(value);
        }

        /// <summary>
        /// De-serializes decimal property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in decimal.</returns>
        public static Decimal DeserializeDecimalElement(XmlNode node, Decimal defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeDecimalElement(attr.InnerText);
            }
        }

        /// <summary>
        /// De-serializes Byte Array property
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value in Byte Array.</returns>
        public static byte[] DeserializeByteArrayElement(string value)
        {
            if (string.IsNullOrEmpty(value))
                return null;
            else
            {
                return HexStringToByteArray(value);
            }
        }

        /// <summary>
        /// De-serializes Byte array property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in Byte Array.</returns>
        public static byte[] DeserializeByteArrayElement(XmlNode node, byte[] defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeByteArrayElement(attr.InnerText);
            }
        }

        /// <summary>
        /// De-serializes string property
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value in string.</returns>
        public static string DeserializeStringElement(XmlNode node, string defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.SelectSingleNode(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return attr.InnerText;
            }
        }

        /// <summary>
        /// De-serializes DataChangeType attribute
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value of DataChangeType.</returns>
        public static DataChangeType DeserializeDataChangeElement(string value)
        {
            if (string.IsNullOrEmpty(value))
                return DataChangeType.None;
            else
            {
                switch (value)
                {
                    case "Add": return DataChangeType.Add;
                    case "Update": return DataChangeType.Update;
                    case "Delete": return DataChangeType.Delete;
                    default: return DataChangeType.None;
                }
            }
        }

        /// <summary>
        /// De-serializes DataChangeType attribute
        /// </summary>
        /// <param name="value">value in string</param>      
        /// <returns>The value of DataChangeType.</returns>
        public static InsertDataChangeType DeserializeInsertDataChangeElement(string value)
        {
            if (string.IsNullOrEmpty(value))
                return InsertDataChangeType.None;
            else
            {
                switch (value)
                {
                    case "Add": return InsertDataChangeType.Add;
                    case "Update": return InsertDataChangeType.Update;
                    default: return InsertDataChangeType.None;
                }
            }
        }

        /// <summary>
        /// De-serializes DataChangeType attribute
        /// </summary>
        /// <param name="node">Xml node contains the property</param> 
        /// <param name="defaultValue">defaultValue to return when node is null</param> 
        /// <param name="xpath">xpath to the property</param>
        /// <returns>The value of DataChangeType.</returns>
        public static DataChangeType DeserializeDataChangeElement(XmlNode node, DataChangeType defaultValue, string xpath)
        {
            if (null == node)
                return defaultValue;

            XmlNode attr = node.Attributes.GetNamedItem(xpath);
            if (null == attr)
            {
                return defaultValue;
            }
            else
            {
                return DeserializeDataChangeElement(attr.InnerText);
            }
        }



        private static byte[] HexStringToByteArray(string s)
        {
            s = s.Trim().ToUpper();

            if (s[0] == '0' && s[1] == 'X')
                s = s.Substring(2);

            int numBytes = s.Length / 2;
            byte[] bytes = new byte[numBytes];

            for (int j = 0; j < numBytes; j++)
            {
                bytes[j] = Byte.Parse(s.Substring(j * 2, 2), NumberStyles.HexNumber);
            }

            return bytes;
        }

        private static string ByteArrayToBase64String(byte[] bytes)
        {
            return System.Convert.ToBase64String(bytes);
        }


        #endregion
        
        #region IDisposable Members
        /// <summary>
		/// Closes internal objects
		/// </summary>
		public void Close()
		{
			if (xmlWriter != null)
			{
				xmlWriter.Close();
				xmlWriter = null;
			}

			if (stringWriter != null)
			{
				stringWriter.Close();
				stringWriter = null;
			}
		}

		/// <summary>
		/// Dispose the objects internal state
		/// </summary>
		public void Dispose()
		{
			Close();
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\SQLHelper.cs ===
//===============================================================================
// Microsoft Data Access Application Block for .NET
// http://msdn.microsoft.com/library/en-us/dnbda/html/daab-rm.asp
//
// SQLHelper.cs
//
// This file contains the implementations of the SqlHelper and SqlHelperParameterCache
// classes.
//
// For more information see the Data Access Application Block Implementation Overview. 
// 
//===============================================================================
// Copyright (C) 2000-2001 Microsoft Corporation
// All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR
// FITNESS FOR A PARTICULAR PURPOSE.
//==============================================================================

using System;
using System.Data;
using System.Xml;
using System.Data.SqlClient;
using System.Collections;
using System.Diagnostics;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
    /// common uses of SqlClient.
    /// </summary>
    internal sealed class SqlHelper
    {
        #region private utility methods & constructors

        //Since this class provides only static methods, make the default constructor private to prevent 
        //instances from being created with "new SqlHelper()".
        private SqlHelper() { }



        /// <summary>
        /// This method is used to attach array of SqlParameters to a SqlCommand.
        /// 
        /// This method will assign a value of DbNull to any parameter with a direction of
        /// InputOutput and a value of null.  
        /// 
        /// This behavior will prevent default values from being used, but
        /// this will be the less common case than an intended pure output parameter (derived as InputOutput)
        /// where the user provided no input value.
        /// </summary>
        /// <param name="command">The command to which the parameters will be added</param>
        /// <param name="commandParameters">an array of SqlParameters tho be added to command</param>
        private static void AttachParameters(SqlCommand command, SqlParameter[] commandParameters)
        {
            foreach (SqlParameter p in commandParameters)
            {
                //check for derived output value with no value assigned
                if ((p.Direction == ParameterDirection.InputOutput) && (p.Value == null))
                {
                    p.Value = DBNull.Value;
                }

                command.Parameters.Add(p);
            }
        }

        /// <summary>
        /// This method assigns an array of values to an array of SqlParameters.
        /// </summary>
        /// <param name="commandParameters">array of SqlParameters to be assigned values</param>
        /// <param name="parameterValues">array of objects holding the values to be assigned</param>
        private static void AssignParameterValues(SqlParameter[] commandParameters, object[] parameterValues)
        {
            if ((commandParameters == null) || (parameterValues == null))
            {
                //do nothing if we get no data
                return;
            }

            // we must have the same number of values as we pave parameters to put them in
            if (commandParameters.Length != parameterValues.Length)
            {
                throw new ArgumentException("Parameter count does not match Parameter Value count.");
            }

            //iterate through the SqlParameters, assigning the values from the corresponding position in the 
            //value array
            for (int i = 0, j = commandParameters.Length; i < j; i++)
            {
                commandParameters[i].Value = parameterValues[i];
            }
        }

        /// <summary>
        /// This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
        /// to the provided command.
        /// </summary>
        /// <param name="command">the SqlCommand to be prepared</param>
        /// <param name="connection">a valid SqlConnection, on which to execute this command</param>
        /// <param name="transaction">a valid SqlTransaction, or 'null'</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
        private static void PrepareCommand(SqlCommand command, SqlConnection connection, SqlTransaction transaction, CommandType commandType, string commandText, SqlParameter[] commandParameters)
        {
            //if the provided connection is not open, we will open it
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
            }

            //associate the connection with the command
            command.Connection = connection;

            //set the command text (stored procedure name or SQL statement)
            command.CommandText = commandText;

            //if we were provided a transaction, assign it.
            if (transaction != null)
            {
                command.Transaction = transaction;
            }

            //set the command type
            command.CommandType = commandType;

            //attach the command parameters if they are provided
            if (commandParameters != null)
            {
                AttachParameters(command, commandParameters);
            }

            return;
        }


        #endregion private utility methods & constructors

        #region ExecuteNonQuery

        /// <summary>
        /// Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
        /// the connection string. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(string connectionString, CommandType commandType,
            string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteNonQuery(connectionString, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(string connectionString, CommandType commandType,
            string commandText, params SqlParameter[] commandParameters)
        {
            //create & open a SqlConnection, and dispose of it after we are done.
            using (SqlConnection cn = new SqlConnection(connectionString))
            {
                cn.Open();

                //call the overload that takes a connection in place of the connection string
                return ExecuteNonQuery(cn, commandType, commandText, commandParameters);
            }
        }

        /// <summary>
        /// Private - RS. takes care of returning ret value from SP.
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="spName">the name of the stored prcedure</param>
        /// <param name="retVal">Return value</param>
        /// <param name="retValRequired">Return value required</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(string connectionString, string spName, bool retValRequired,
            out int retVal, params object[] parameterValues)
        {
            SqlParameter[] commandParameters;
            return ExecuteNonQuery(retValRequired, connectionString, spName, out retVal,
                out commandParameters, parameterValues);

        }

        /// <summary>
        /// Private - RS. takes care of returning out parameters and return values from SP. 
        /// </summary>
        /// <param name="retValRequired"> Return value required</param>
        /// <param name="connectionString">Connection string</param>
        /// <param name="spName">Stored Procedure name</param>
        /// <param name="retVal">Return Value</param>
        /// <param name="commandParameters">Command Parameters</param>
        /// <param name="parameterValues">Parameter values</param>
        /// <returns>Integer value returned from stored procedure</returns>
        public static int ExecuteNonQuery(bool retValRequired, string connectionString, string spName,
            out int retVal, out SqlParameter[] commandParameters, params object[] parameterValues)
        {
            retVal = 0;
            commandParameters = null;

            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                // pull the parameters for this stored procedure from the parameter cache
                // (or discover them & populate the cache)
                commandParameters = SqlHelperParameterCache.GetSpParameterSet(
                    connectionString, spName, retValRequired);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                int rowsAffected =
                    ExecuteNonQuery(connectionString, CommandType.StoredProcedure, spName,
                    commandParameters);

                // extract ret val from stored proc if that is needed
                if (retValRequired)
                    retVal = (int)commandParameters[0].Value;

                return rowsAffected;
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteNonQuery(connectionString, CommandType.StoredProcedure, spName);
            }
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
        /// the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="spName">the name of the stored prcedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(string connectionString, string spName,
            params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                // pull the parameters for this stored procedure from the parameter cache
                // (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(
                    connectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteNonQuery(connectionString, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteNonQuery(connectionString, CommandType.StoredProcedure, spName);
            }
        }


        /// <summary>
        /// Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(SqlConnection connection, CommandType commandType,
            string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteNonQuery(connection, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(SqlConnection connection, CommandType commandType,
            string commandText, params SqlParameter[] commandParameters)
        {
            //create a command and prepare it for execution
            SqlCommand cmd = new SqlCommand();
            PrepareCommand(cmd, connection, (SqlTransaction)null, commandType, commandText, commandParameters);
            int retval = 0;

            //=================================================================
            // If we find a deadlock, retry upto 3 times, then give up (RS)
            //=================================================================
            int count = 0; bool done = false;
            while (count < 3 && !done)
            {
                try
                {
                    //finally, execute the command.
                    retval = cmd.ExecuteNonQuery();
                }
                catch (SqlException e)
                {
                    if (e.Number == 1205) // there was a deadlock, so retry
                    {
                        Trace.WriteLine("Sql deadlock occured in " + commandText);
                        count++;
                        continue;
                    }
                    else
                    {
                        // re-throw the exception
                        throw;
                    }
                }
                // reach here if there were no exceptions, non-Sql exception or
                // sql non-deadlock exception. quit in these cases.
                done = true;
            }

            // detach the SqlParameters from the command object, so they can be used again.
            //cmd.Parameters.Clear();
            return retval;
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
        /// using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(SqlConnection connection, string spName,
            params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(connection.ConnectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteNonQuery(connection, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteNonQuery(connection, CommandType.StoredProcedure, spName);
            }
        }

        /// <summary>
        /// Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(SqlTransaction transaction, CommandType commandType,
            string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteNonQuery(transaction, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(SqlTransaction transaction, CommandType commandType,
            string commandText, params SqlParameter[] commandParameters)
        {
            //create a command and prepare it for execution
            SqlCommand cmd = new SqlCommand();
            PrepareCommand(cmd, transaction.Connection, transaction, commandType, commandText, commandParameters);
            int retval = 0;

            //=================================================================
            // If we find a deadlock, retry upto 3 times, then give up (RS)
            //=================================================================
            int count = 0; bool done = false;
            while (count < 3 && !done)
            {
                try
                {
                    //finally, execute the command.
                    retval = cmd.ExecuteNonQuery();
                }
                catch (SqlException e)
                {
                    if (e.Number == 1205) // there was a deadlock, so retry
                    {
                        Trace.WriteLine("Sql deadlock occured in " + commandText);
                        count++;
                        continue;
                    }
                    else
                    {
                        // re-throw the exception
                        throw;
                    }
                }
                // reach here if there were no exceptions, non-Sql exception or
                // sql non-deadlock exception. quit in these cases.
                done = true;
            }

            // detach the SqlParameters from the command object, so they can be used again.
            cmd.Parameters.Clear();
            return retval;
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
        /// SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="connStr">Connection string</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static int ExecuteNonQuery(SqlTransaction transaction,
            string connStr, string spName, params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters =
                    SqlHelperParameterCache.GetSpParameterSet(connStr, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteNonQuery(transaction, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteNonQuery(transaction, CommandType.StoredProcedure, spName);
            }
        }


        #endregion ExecuteNonQuery

        #region ExecuteDataSet

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
        /// the connection string. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataset(string connectionString, CommandType commandType,
            string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteDataset(connectionString, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataset(string connectionString, CommandType commandType,
            string commandText, params SqlParameter[] commandParameters)
        {
            //create & open a SqlConnection, and dispose of it after we are done.
            using (SqlConnection cn = new SqlConnection(connectionString))
            {
                cn.Open();

                //call the overload that takes a connection in place of the connection string
                return ExecuteDataset(cn, commandType, commandText, commandParameters);
            }
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
        /// the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataset(string connectionString, string spName,
            params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(connectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteDataset(connectionString, CommandType.StoredProcedure, spName,
                    commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteDataset(connectionString, CommandType.StoredProcedure, spName);
            }
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataset(SqlConnection connection, CommandType commandType,
            string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteDataset(connection, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataset(SqlConnection connection, CommandType commandType,
            string commandText, params SqlParameter[] commandParameters)
        {
            return ExecuteDatasetWithTimeout(connection, commandType, commandText, -1, commandParameters);
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataset(SqlConnection connection, string spName, params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(connection.ConnectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteDataset(connection, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteDataset(connection, CommandType.StoredProcedure, spName);
            }
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataset(SqlTransaction transaction, CommandType commandType, string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteDataset(transaction, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// RS - never use this version since we dont use transactions with ExecuteDataset.
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataset(SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter[] commandParameters)
        {
            SqlDataAdapter da = null;
            try
            {
                //create a command and prepare it for execution
                SqlCommand cmd = new SqlCommand();
                PrepareCommand(cmd, transaction.Connection, transaction, commandType, commandText, commandParameters);

                //create the DataAdapter & DataSet
                da = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();

                //fill the DataSet using default values for DataTable names, etc.
                da.Fill(ds);

                // detach the SqlParameters from the command object, so they can be used again.
                cmd.Parameters.Clear();

                //return the dataset
                return ds;
            }
            finally
            {
                if (da != null) da.Dispose();
            }
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
        /// SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDataset(SqlTransaction transaction, string spName, params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(transaction.Connection.ConnectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteDataset(transaction, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteDataset(transaction, CommandType.StoredProcedure, spName);
            }
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandTimeout">Command timeout in seconds</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDatasetWithTimeout(string connectionString, CommandType commandType,
            string commandText, int commandTimeout, params SqlParameter[] commandParameters)
        {
            //create & open a SqlConnection, and dispose of it after we are done.
            using (SqlConnection cn = new SqlConnection(connectionString))
            {
                cn.Open();

                //call the overload that takes a connection in place of the connection string
                return ExecuteDataset(cn, commandType, commandText, commandParameters);
            }
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandTimeout">Command timeout in seconds</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static DataSet ExecuteDatasetWithTimeout(SqlConnection connection, CommandType commandType,
            string commandText, int commandTimeout, params SqlParameter[] commandParameters)
        {
            SqlDataAdapter da = null;
            try
            {
                //create a command and prepare it for execution
                SqlCommand cmd = new SqlCommand();
                PrepareCommand(cmd, connection, (SqlTransaction)null, commandType, commandText,
                    commandParameters);
                if (commandTimeout != -1)
                    cmd.CommandTimeout = commandTimeout;

                //create the DataAdapter & DataSet
                da = new SqlDataAdapter(cmd);
                DataSet ds = new DataSet();

                //=================================================================
                // If we find a deadlock, retry upto 3 times, then give up (RS)
                //=================================================================
                int count = 0; bool done = false;
                while (count < 3 && !done)
                {
                    try
                    {
                        //fill the DataSet using default values for DataTable names, etc.
                        da.Fill(ds);
                    }
                    catch (SqlException e)
                    {
                        if (e.Number == 1205) // there was a deadlock, so retry
                        {
                            Trace.WriteLine("Sql deadlock occured in " + commandText);
                            count++;
                            continue;
                        }
                        else
                        {
                            // re-throw the exception
                            throw;
                        }
                    }
                    // reach here if there were no exceptions, non-Sql exception or
                    // sql non-deadlock exception. quit in these cases.
                    done = true;
                }

                // detach the SqlParameters from the command object, so they can be used again.            
                cmd.Parameters.Clear();

                //return the dataset
                return ds;
            }
            finally
            {
                if (da != null) da.Dispose();
            }
        }

        #endregion ExecuteDataSet

        #region ExecuteReader

        /// <summary>
        /// this enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
        /// we can set the appropriate CommandBehavior when calling ExecuteReader()
        /// </summary>
        private enum SqlConnectionOwnership
        {
            /// <summary>Connection is owned and managed by SqlHelper</summary>
            Internal,
            /// <summary>Connection is owned and managed by the caller</summary>
            External
        }

        /// <summary>
        /// Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
        /// </summary>
        /// <remarks>
        /// If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
        /// 
        /// If the caller provided the connection, we want to leave it to them to manage.
        /// </remarks>
        /// <param name="connection">a valid SqlConnection, on which to execute this command</param>
        /// <param name="transaction">a valid SqlTransaction, or 'null'</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
        /// <param name="connectionOwnership">indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
        /// <returns>SqlDataReader containing the results of the command</returns>
        private static SqlDataReader ExecuteReader(SqlConnection connection,
            SqlTransaction transaction, CommandType commandType,
            string commandText, SqlParameter[] commandParameters,
            SqlConnectionOwnership connectionOwnership)
        {
            //create a command and prepare it for execution
            SqlCommand cmd = new SqlCommand();
            PrepareCommand(cmd, connection, transaction, commandType, commandText, commandParameters);

            //create a reader
            SqlDataReader dr = null;

            //=================================================================
            // If we find a deadlock, retry upto 3 times, then give up (RS)
            //=================================================================
            int count = 0; bool done = false;
            while (count < 3 && !done)
            {
                try
                {
                    // call ExecuteReader with the appropriate CommandBehavior
                    if (connectionOwnership == SqlConnectionOwnership.External)
                    {
                        dr = cmd.ExecuteReader();
                    }
                    else
                    {
                        dr = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                    }
                }
                catch (SqlException e)
                {
                    if (e.Number == 1205) // there was a deadlock, so retry
                    {
                        Trace.WriteLine("Sql deadlock occured in " + commandText);
                        count++;
                        continue;
                    }
                    else
                    {
                        // re-throw the exception
                        throw;
                    }
                }
                // reach here if there were no exceptions, non-Sql exception or
                // sql non-deadlock exception. quit in these cases.
                done = true;
            }

            // detach the SqlParameters from the command object, so they can be used again.
            cmd.Parameters.Clear();

            return dr;
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
        /// the connection string. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>a SqlDataReader containing the resultset generated by the command</returns>
        public static SqlDataReader ExecuteReader(string connectionString, CommandType commandType,
            string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteReader(connectionString, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>a SqlDataReader containing the resultset generated by the command</returns>
        public static SqlDataReader ExecuteReader(string connectionString, CommandType commandType,
            string commandText, params SqlParameter[] commandParameters)
        {
            //create & open a SqlConnection
            SqlConnection cn = new SqlConnection(connectionString);
            cn.Open();

            try
            {
                //call the private overload that takes an internally owned connection in place of the connection string
                return ExecuteReader(cn, null, commandType, commandText, commandParameters, SqlConnectionOwnership.Internal);
            }
            catch
            {
                //if we fail to return the SqlDatReader, we need to close the connection ourselves
                cn.Close();
                throw;
            }
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
        /// the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>a SqlDataReader containing the resultset generated by the command</returns>
        public static SqlDataReader ExecuteReader(string connectionString, string spName,
            params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(connectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteReader(connectionString, CommandType.StoredProcedure, spName,
                    commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteReader(connectionString, CommandType.StoredProcedure, spName);
            }
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>a SqlDataReader containing the resultset generated by the command</returns>
        public static SqlDataReader ExecuteReader(SqlConnection connection, CommandType commandType,
            string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteReader(connection, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>a SqlDataReader containing the resultset generated by the command</returns>
        public static SqlDataReader ExecuteReader(SqlConnection connection, CommandType commandType,
            string commandText, params SqlParameter[] commandParameters)
        {
            //pass through the call to the private overload using a null transaction value and an externally owned connection
            return ExecuteReader(connection, (SqlTransaction)null, commandType, commandText, commandParameters, SqlConnectionOwnership.External);
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>a SqlDataReader containing the resultset generated by the command</returns>
        public static SqlDataReader ExecuteReader(SqlConnection connection, string spName,
            params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(connection.ConnectionString, spName);

                AssignParameterValues(commandParameters, parameterValues);

                return ExecuteReader(connection, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteReader(connection, CommandType.StoredProcedure, spName);
            }
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>a SqlDataReader containing the resultset generated by the command</returns>
        public static SqlDataReader ExecuteReader(SqlTransaction transaction, CommandType commandType,
            string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteReader(transaction, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///   SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>a SqlDataReader containing the resultset generated by the command</returns>
        public static SqlDataReader ExecuteReader(SqlTransaction transaction, CommandType commandType,
            string commandText, params SqlParameter[] commandParameters)
        {
            //pass through to private overload, indicating that the connection is owned by the caller
            return ExecuteReader(transaction.Connection, transaction, commandType, commandText, commandParameters, SqlConnectionOwnership.External);
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
        /// SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>a SqlDataReader containing the resultset generated by the command</returns>
        public static SqlDataReader ExecuteReader(SqlTransaction transaction, string spName,
            params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(transaction.Connection.ConnectionString, spName);

                AssignParameterValues(commandParameters, parameterValues);

                return ExecuteReader(transaction, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteReader(transaction, CommandType.StoredProcedure, spName);
            }
        }

        #endregion ExecuteReader

        #region ExecuteScalar

        /// <summary>
        /// Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
        /// the connection string. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        public static object ExecuteScalar(string connectionString, CommandType commandType, string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteScalar(connectionString, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        public static object ExecuteScalar(string connectionString, CommandType commandType, string commandText, params SqlParameter[] commandParameters)
        {
            //create & open a SqlConnection, and dispose of it after we are done.
            using (SqlConnection cn = new SqlConnection(connectionString))
            {
                cn.Open();

                //call the overload that takes a connection in place of the connection string
                return ExecuteScalar(cn, commandType, commandText, commandParameters);
            }
        }
        /// <summary>
        /// Returns XML Reader
        /// </summary>
        /// <param name="connectionString">a valid Connection String</param>
        /// <param name="commandType">Command Type</param>
        /// <param name="commandText">stored procedure/T-SQL Command</param>
        /// <param name="commandParameters">an array of SQL Parameters</param>
        /// <returns></returns>
        public static XmlReader ExecuteXmlReader(string connectionString, CommandType commandType, string commandText, params SqlParameter[] commandParameters)
        {
            //create & open a SqlConnection, and dispose of it after we are done.
            using (SqlConnection cn = new SqlConnection(connectionString))
            {
                cn.Open();

                //call the overload that takes a connection in place of the connection string
                return ExecuteXmlReader(cn, commandType, commandText, commandParameters);
            }
        }
        /// <summary>
        /// Returns XML Reader as a string
        /// </summary>
        /// <param name="connectionString">a valid Connection String</param>
        /// <param name="commandType">Command Type</param>
        /// <param name="commandText">stored procedure/T-SQL Command</param>
        /// <param name="commandParameters">an array of SQL Parameters</param>
        /// <returns></returns>
        public static string ExecuteXmlReaderAsString(string connectionString, CommandType commandType, string commandText, params SqlParameter[] commandParameters)
        {
            XmlReader reader = null;
            string retValue = string.Empty;
            //create & open a SqlConnection, and dispose of it after we are done.
            using (SqlConnection cn = new SqlConnection(connectionString))
            {
                cn.Open();

                //call the overload that takes a connection in place of the connection string
                reader = ExecuteXmlReader(cn, commandType, commandText, commandParameters);
                reader.Read();
                while (reader.ReadState != ReadState.EndOfFile)
                {
                    retValue += reader.ReadOuterXml();
                }
                return retValue;
            }
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
        /// the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  xmlReader result = ExecuteXmlReader(connString, "PublishOrders", 24, 36);
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="spName">the name of the stored prcedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>an int representing the number of rows affected by the command</returns>
        public static XmlReader ExecuteXmlReader(string connectionString, string spName,
            params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                // pull the parameters for this stored procedure from the parameter cache
                // (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(
                    connectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteXmlReader(connectionString, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteXmlReader(connectionString, CommandType.StoredProcedure, spName);
            }
        }
        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
        /// the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        public static object ExecuteScalar(string connectionString, string spName, params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(connectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteScalar(connectionString, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteScalar(connectionString, CommandType.StoredProcedure, spName);
            }
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        public static object ExecuteScalar(SqlConnection connection, CommandType commandType, string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteScalar(connection, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        public static object ExecuteScalar(SqlConnection connection, CommandType commandType, string commandText, params SqlParameter[] commandParameters)
        {
            //create a command and prepare it for execution
            SqlCommand cmd = new SqlCommand();
            PrepareCommand(cmd, connection, (SqlTransaction)null, commandType, commandText, commandParameters);

            //execute the command & return the results
            object retval = cmd.ExecuteScalar();

            // detach the SqlParameters from the command object, so they can be used again.
            cmd.Parameters.Clear();
            return retval;

        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
        /// using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        public static object ExecuteScalar(SqlConnection connection, string spName, params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(connection.ConnectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteScalar(connection, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteScalar(connection, CommandType.StoredProcedure, spName);
            }
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        public static object ExecuteScalar(SqlTransaction transaction, CommandType commandType, string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteScalar(transaction, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        public static object ExecuteScalar(SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter[] commandParameters)
        {
            //create a command and prepare it for execution
            SqlCommand cmd = new SqlCommand();
            PrepareCommand(cmd, transaction.Connection, transaction, commandType, commandText, commandParameters);

            //execute the command & return the results
            object retval = cmd.ExecuteScalar();

            // detach the SqlParameters from the command object, so they can be used again.
            cmd.Parameters.Clear();
            return retval;
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
        /// SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>an object containing the value in the 1x1 resultset generated by the command</returns>
        public static object ExecuteScalar(SqlTransaction transaction, string spName, params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(transaction.Connection.ConnectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteScalar(transaction, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteScalar(transaction, CommandType.StoredProcedure, spName);
            }
        }

        #endregion ExecuteScalar

        #region ExecuteXmlReader

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
        /// <returns>an XmlReader containing the resultset generated by the command</returns>
        public static XmlReader ExecuteXmlReader(SqlConnection connection, CommandType commandType, string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteXmlReader(connection, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>an XmlReader containing the resultset generated by the command</returns>
        public static XmlReader ExecuteXmlReader(SqlConnection connection, CommandType commandType, string commandText, params SqlParameter[] commandParameters)
        {
            //create a command and prepare it for execution
            SqlCommand cmd = new SqlCommand();
            PrepareCommand(cmd, connection, (SqlTransaction)null, commandType, commandText, commandParameters);

            //create the DataAdapter & DataSet
            XmlReader retval = cmd.ExecuteXmlReader();

            // detach the SqlParameters from the command object, so they can be used again.
            cmd.Parameters.Clear();
            return retval;

        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
        /// using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
        /// </remarks>
        /// <param name="connection">a valid SqlConnection</param>
        /// <param name="spName">the name of the stored procedure using "FOR XML AUTO"</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>an XmlReader containing the resultset generated by the command</returns>
        public static XmlReader ExecuteXmlReader(SqlConnection connection, string spName, params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(connection.ConnectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteXmlReader(connection, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteXmlReader(connection, CommandType.StoredProcedure, spName);
            }
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
        /// <returns>an XmlReader containing the resultset generated by the command</returns>
        public static XmlReader ExecuteXmlReader(SqlTransaction transaction, CommandType commandType, string commandText)
        {
            //pass through the call providing null for the set of SqlParameters
            return ExecuteXmlReader(transaction, commandType, commandText, (SqlParameter[])null);
        }

        /// <summary>
        /// Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
        /// using the provided parameters.
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">the stored procedure name or T-SQL command using "FOR XML AUTO"</param>
        /// <param name="commandParameters">an array of SqlParamters used to execute the command</param>
        /// <returns>an XmlReader containing the resultset generated by the command</returns>
        public static XmlReader ExecuteXmlReader(SqlTransaction transaction, CommandType commandType, string commandText, params SqlParameter[] commandParameters)
        {
            //create a command and prepare it for execution
            SqlCommand cmd = new SqlCommand();
            PrepareCommand(cmd, transaction.Connection, transaction, commandType, commandText, commandParameters);

            //create the DataAdapter & DataSet
            XmlReader retval = cmd.ExecuteXmlReader();

            // detach the SqlParameters from the command object, so they can be used again.
            cmd.Parameters.Clear();
            return retval;
        }

        /// <summary>
        /// Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
        /// SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
        /// stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
        /// </summary>
        /// <remarks>
        /// This method provides no access to output parameters or the stored procedure's return value parameter.
        /// 
        /// e.g.:  
        ///  XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
        /// </remarks>
        /// <param name="transaction">a valid SqlTransaction</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="parameterValues">an array of objects to be assigned as the input values of the stored procedure</param>
        /// <returns>a dataset containing the resultset generated by the command</returns>
        public static XmlReader ExecuteXmlReader(SqlTransaction transaction, string spName, params object[] parameterValues)
        {
            //if we receive parameter values, we need to figure out where they go
            if ((parameterValues != null) && (parameterValues.Length > 0))
            {
                //pull the parameters for this stored procedure from the parameter cache (or discover them & populate the cache)
                SqlParameter[] commandParameters = SqlHelperParameterCache.GetSpParameterSet(transaction.Connection.ConnectionString, spName);

                //assign the provided values to these parameters based on parameter order
                AssignParameterValues(commandParameters, parameterValues);

                //call the overload that takes an array of SqlParameters
                return ExecuteXmlReader(transaction, CommandType.StoredProcedure, spName, commandParameters);
            }
            //otherwise we can just call the SP without params
            else
            {
                return ExecuteXmlReader(transaction, CommandType.StoredProcedure, spName);
            }
        }


        #endregion ExecuteXmlReader

        #region SqlDataReader Wrappers

        //public static T GetNullableColumn<T>( SqlDateReader reader, String columnName, T valueForNull )
        //{
        //}

        public static Guid GetNullableGuid(SqlDataReader reader, string columnName) { return GetNullableGuid(reader, columnName, Guid.Empty); }
        public static Guid GetNullableGuid(SqlDataReader reader, string columnName, Guid nullValue) { return GetNullable<Guid>(reader, columnName, nullValue); }
        public static Int32 GetNullableInt32(SqlDataReader reader, string columnName) { return GetNullableInt32(reader, columnName, -1); }
        public static Int32 GetNullableInt32(SqlDataReader reader, string columnName, Int32 nullValue) { return GetNullable<Int32>(reader, columnName, nullValue); }
        public static bool GetNullableBool(SqlDataReader reader, string columnName) { return GetNullableBool(reader, columnName, false); }
        public static bool GetNullableBool(SqlDataReader reader, string columnName, bool nullValue) { return GetNullable<bool>(reader, columnName, nullValue); }
        public static Byte GetNullableByte(SqlDataReader reader, string columnName) { return GetNullableByte(reader, columnName, 0); }
        public static Byte GetNullableByte(SqlDataReader reader, string columnName, Byte nullValue) { return GetNullable<Byte>(reader, columnName, nullValue); }
        public static string GetNullableString(SqlDataReader reader, string columnName) { return GetNullableString(reader, columnName, String.Empty); }
        public static string GetNullableString(SqlDataReader reader, string columnName, string nullValue) { return GetNullable<string>(reader, columnName, nullValue); }
        public static DateTime GetNullableDateTime(SqlDataReader reader, string columnName) { return GetNullableDateTime(reader, columnName, DateTime.MinValue); }
        public static DateTime GetNullableDateTime(SqlDataReader reader, string columnName, DateTime nullValue) { return GetNullable<DateTime>(reader, columnName, nullValue); }
        public static Decimal? GetNullableDecimal(SqlDataReader reader, string columnName) { return GetNullableDecimal(reader, columnName, null); }
        public static Decimal? GetNullableDecimal(SqlDataReader reader, string columnName, Decimal? nullValue) { return GetNullable<Decimal?>(reader, columnName, nullValue); }

        public static Int32? GetInt32(SqlDataReader reader, string columnName) { return GetInt32(reader, columnName, null); }
        public static Int32? GetInt32(SqlDataReader reader, string columnName, Int32? nullValue) { return GetNullable<Int32?>(reader, columnName, nullValue); }
        public static bool? GetBool(SqlDataReader reader, string columnName) { return GetBool(reader, columnName, null); }
        public static bool? GetBool(SqlDataReader reader, string columnName, bool? nullValue) { return GetNullable<bool?>(reader, columnName, nullValue); }

        public static byte[] GetBytes(SqlDataReader reader, string columnName)
        {
            long bufSizeNeeded = 0;
            byte[] propValue;
            if (!reader.IsDBNull(reader.GetOrdinal(columnName)))
            {
                bufSizeNeeded = reader.GetBytes(reader.GetOrdinal(columnName), 0, null, 0, 0); //to get the size needed
                propValue = new byte[bufSizeNeeded];
                reader.GetBytes(reader.GetOrdinal(columnName), 0, propValue, 0, propValue.Length);
                return propValue;
            }
            else
            {
                return null;
            }

        }

        public static T GetNullable<T>(SqlDataReader reader, string columnName, T nullValue)
        {
            // Validation
            if (reader == null)
            {
                throw new ArgumentNullException("The supplied SQlDataReader was null.");
            }
            if (String.IsNullOrEmpty(columnName))
            {
                throw new ArgumentException("columnName", "The column name from which to extract the data was not supplied");
            }

            int ordinal = reader.GetOrdinal(columnName);

            // Handle the case where the value in the column is null.
            if (reader.IsDBNull(ordinal))
            {
                return nullValue;
            }

            // The value in the column was not null - retrieve and return
            if (typeof(T) == typeof(Guid))
            {
                return (T)(Object)reader.GetGuid(ordinal);
            }
            else if ((typeof(T) == typeof(Int32)) || (typeof(T) == typeof(Int32?)))
            {
                return (T)(Object)reader.GetInt32(ordinal);
            }
            else if (typeof(T) == typeof(Byte))
            {
                return (T)(Object)reader.GetByte(ordinal);
            }
            else if (typeof(T) == typeof(String))
            {
                return (T)(Object)reader.GetString(ordinal);
            }
            else if (typeof(T) == typeof(DateTime))
            {
                return (T)(Object)reader.GetDateTime(ordinal);
            }
            else if ((typeof(T) == typeof(Decimal)) || (typeof(T) == typeof(Decimal?)))
            {
                return (T)(Object)reader.GetDecimal(ordinal);
            }
            else if ((typeof(T) == typeof(Boolean)) || (typeof(T) == typeof(Boolean?)))
            {
                return (T)(Object)reader.GetBoolean(ordinal);
            }
            else if (typeof(T) == typeof(Byte))
            {
                return (T)(Object)reader.GetByte(ordinal);
            }

            throw new ArgumentException(String.Format("Type {0} is not supported by GetNullable.", typeof(T)));
        }

        #endregion SqlDataReader Wrappers
    }

    /// <summary>
    /// SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
    /// ability to discover parameters for stored procedures at run-time.
    /// </summary>
    internal sealed class SqlHelperParameterCache
    {
        #region private methods, variables, and constructors

        //Since this class provides only static methods, make the default constructor private to prevent 
        //instances from being created with "new SqlHelperParameterCache()".
        private SqlHelperParameterCache() { }

        private static Hashtable paramCache = Hashtable.Synchronized(new Hashtable());

        /// <summary>
        /// resolve at run time the appropriate set of SqlParameters for a stored procedure
        /// </summary>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="includeReturnValueParameter">whether or not to include their return value parameter</param>
        /// <returns></returns>
        private static SqlParameter[] DiscoverSpParameterSet(string connectionString, string spName,
            bool includeReturnValueParameter)
        {
            using (SqlConnection cn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand(spName, cn))
            {
                cn.Open();
                cmd.CommandType = CommandType.StoredProcedure;

                SqlCommandBuilder.DeriveParameters(cmd);

                if (!includeReturnValueParameter)
                {
                    cmd.Parameters.RemoveAt(0);
                }

                SqlParameter[] discoveredParameters = new SqlParameter[cmd.Parameters.Count]; ;

                cmd.Parameters.CopyTo(discoveredParameters, 0);

                return discoveredParameters;
            }
        }


        //deep copy of cached SqlParameter array
        private static SqlParameter[] CloneParameters(SqlParameter[] originalParameters)
        {
            SqlParameter[] clonedParameters = new SqlParameter[originalParameters.Length];

            for (int i = 0, j = originalParameters.Length; i < j; i++)
            {
                clonedParameters[i] = (SqlParameter)((ICloneable)originalParameters[i]).Clone();
            }

            return clonedParameters;
        }

        #endregion private methods, variables, and constructors

        #region caching functions

        /// <summary>
        /// add parameter array to the cache
        /// </summary>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <param name="commandParameters">an array of SqlParamters to be cached</param>
        public static void CacheParameterSet(string connectionString, string commandText, params SqlParameter[] commandParameters)
        {
            string hashKey = connectionString + ":" + commandText;

            paramCache[hashKey] = commandParameters;
        }

        /// <summary>
        /// retrieve a parameter array from the cache
        /// </summary>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="commandText">the stored procedure name or T-SQL command</param>
        /// <returns>an array of SqlParamters</returns>
        public static SqlParameter[] GetCachedParameterSet(string connectionString, string commandText)
        {
            string hashKey = connectionString + ":" + commandText;

            SqlParameter[] cachedParameters = (SqlParameter[])paramCache[hashKey];

            if (cachedParameters == null)
            {
                return null;
            }
            else
            {
                return CloneParameters(cachedParameters);
            }
        }

        #endregion caching functions

        #region Parameter Discovery Functions

        /// <summary>
        /// Retrieves the set of SqlParameters appropriate for the stored procedure
        /// </summary>
        /// <remarks>
        /// This method will query the database for this information, and then store it in a cache for future requests.
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <returns>an array of SqlParameters</returns>
        public static SqlParameter[] GetSpParameterSet(string connectionString, string spName)
        {
            return GetSpParameterSet(connectionString, spName, false);
        }

        /// <summary>
        /// Retrieves the set of SqlParameters appropriate for the stored procedure
        /// </summary>
        /// <remarks>
        /// This method will query the database for this information, and then store it in a cache for future requests.
        /// </remarks>
        /// <param name="connectionString">a valid connection string for a SqlConnection</param>
        /// <param name="spName">the name of the stored procedure</param>
        /// <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
        /// <returns>an array of SqlParameters</returns>
        public static SqlParameter[] GetSpParameterSet(string connectionString,
            string spName, bool includeReturnValueParameter)
        {
            string hashKey = connectionString + ":" + spName +
                (includeReturnValueParameter ? ":include ReturnValue Parameter" : "");

            SqlParameter[] cachedParameters;

            cachedParameters = (SqlParameter[])paramCache[hashKey];

            if (cachedParameters == null)
            {
                cachedParameters = (SqlParameter[])(paramCache[hashKey] = DiscoverSpParameterSet(connectionString, spName, includeReturnValueParameter));
            }

            return CloneParameters(cachedParameters);
        }

        #endregion Parameter Discovery Functions
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\TaskStatus.cs ===
using System;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Xml;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines DRM Task Queue
    /// </summary>
    public class TaskStatus : Utils.IIdentifiable<Int32>
    {
        #region Constants
            private const int nameLength=255;
        #endregion

        #region Fields
        private int id;
        private string name;
        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.Cache<TaskStatus, Int32> TaskStatusCache = new Utils.Cache<TaskStatus, Int32>(
                        new Utils.Cache<TaskStatus, Int32>.CacheDataRetrievalDelegate(GetData),
                        CacheRefreshPeriod);

        #endregion

        #region Constructors
        /// <summary>
        /// Default DRM Task Queue Constructor
        /// </summary>
        public TaskStatus()
        { 
        }
        /// <summary>
        /// OverLoaded Constructor accepting SQLDataReader as parameter
        /// </summary>
        /// <param name="reader"></param>
        public TaskStatus(SqlDataReader reader)
        {
            this.id = reader.GetInt32(reader.GetOrdinal("taskStatusId"));
            this.name = reader.GetString(reader.GetOrdinal("taskStatusName"));
       }
        #endregion

        #region Properties
        /// <summary>
        /// Gets/Sets the TaskInstanceId
        /// </summary>
        public int PrimaryId
        {
            get
            {
                return id;
            }
        }
        /// <summary>
        /// TaskInstance Id
        /// </summary>
        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
        /// <summary>
        /// Gets/Sets the FileName
        /// </summary>
        public String Name
        {
            get
            {
                return name;
            }
            set
            {
                Validate.IsNotLongerThan(value, nameLength, "name", "name");
                name = value;
            }
        }
        #endregion

        #region Methods
        private static List<TaskStatus> GetData()
        {
            List<TaskStatus> taskStatus = new List<TaskStatus>();

            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "TaskStatusGet"
                    ))
            {
                while (reader.Read())
                {
                    taskStatus.Add(new TaskStatus(reader));
                }
            }
            return taskStatus;
        }
        /// <summary>
        /// Gets all the Task status
        /// </summary>
        /// <returns></returns>
        public static List<TaskStatus> Get()
        {
            return TaskStatusCache.Get();
        }
        /// <summary>
        /// Gets all the Task status by id
        /// </summary>
        /// <returns></returns>
        internal static TaskStatus Get(int taskStatusId)
        {
            return TaskStatusCache.Get(taskStatusId);
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\TaskSearch.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define Task search response class.
    /// </summary>
    public class TaskSearchResponse : Response
    {
        #region Fields
        private string fileName;
        private string inputFileLocation;
        private string stagerFileLocation;
        private string asperaFileLocation;
        private string outputFileLocation;
        private string statusMessage;
        private DateTime lastUpdatedDate;
        private Guid taskInstanceId;
        private string taskStatusName;
        private Int32 taskStatusId;
        #endregion

        #region Properties
        /// <summary>
        /// Gets/Sets the TaskStatus Id
        /// </summary>
        public Int32 TaskStatusId
        {
            get
            {
                return taskStatusId;
            }
            set
            {
                taskStatusId = value;
            }
        }
        /// <summary>
        /// Gets/Sets the File Name
        /// </summary>
        public string FileName
        {
            get
            {
                return fileName;
            }
            set
            {
                fileName = value;
            }
        }
        /// <summary>
        /// Gets/Sets the Input FileLocation
        /// </summary>
        public string InputFileLocation
        {
            get
            {
                return inputFileLocation;
            }
            set
            {
                inputFileLocation = value;
            }
        }
        /// <summary>
        /// Gets/Sets the stagerFileLocation
        /// </summary>
        public string StagerFileLocation
        {
            get
            {
                return stagerFileLocation;
            }
            set
            {
                stagerFileLocation = value;
            }
        }
        /// <summary>
        /// Gets/Sets the outputFileLocation
        /// </summary>
        public string OutputFileLocation
        {
            get
            {
                return outputFileLocation;
            }
            set
            {
                outputFileLocation = value;
            }
        }
        /// <summary>
        /// Gets/Sets the the Status Message
        /// </summary>
        public string StatusMessage
        {
            get
            {
                return statusMessage;
            }
            set
            {
                statusMessage = value;
            }
        }
        /// <summary>
        /// Gets/Sets the LastUpdatedDate
        /// </summary>
        public DateTime LastUpdatedDate
        {
            get
            {
                return lastUpdatedDate;
            }
            set
            {
                lastUpdatedDate = value;
            }
        }
        /// <summary>
        /// Gets/Sets the TaskinstancId
        /// </summary>
        public Guid TaskInstanceId
        {
            get
            {
                return taskInstanceId;
            }
            set
            {
                taskInstanceId = value;
            }
        }
        /// <summary>
        /// Gets/Sets the TaskStatus Name
        /// </summary>
        public string TaskStatusName
        {
            get
            {
                return taskStatusName;
            }
            set
            {
                taskStatusName = value;
            }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Default Constructor for Soap
        /// </summary>
        public TaskSearchResponse()
        {

        }
        /// <summary>
        /// Private constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal TaskSearchResponse(SqlDataReader reader)
        {
            this.taskInstanceId = reader.GetGuid(reader.GetOrdinal("taskInstanceId"));
            this.statusMessage = SqlHelper.GetNullableString(reader, "statusMessage", string.Empty);
            this.asperaFileLocation = SqlHelper.GetNullableString(reader, "asperaFileLocation", string.Empty);
            this.stagerFileLocation = SqlHelper.GetNullableString(reader, "stagerFileLocation", string.Empty);
            this.outputFileLocation = SqlHelper.GetNullableString(reader, "outputFileLocation", string.Empty);
            this.inputFileLocation = SqlHelper.GetNullableString(reader, "inputFileLocation", string.Empty);
            this.fileName = SqlHelper.GetNullableString(reader, "inputFileLocation", string.Empty);
            this.lastUpdatedDate = reader.GetDateTime(reader.GetOrdinal("lastUpdatedDate"));
            this.taskStatusName = SqlHelper.GetNullableString(reader, "taskStatusName", string.Empty);
            this.taskStatusId = reader.GetInt32(reader.GetOrdinal("taskStatusId"));
        }
        #endregion
    }

    /// <summary>
    /// Define video search request class.
    /// </summary>
    public class TaskSearchRequest : Request
    {
        #region Fields
        private int? taskStatusId;
        private string inputLocation;
        #endregion

        # region Constants
            private static readonly uint inputFileLocationLength = 4000;
        # endregion

        #region Properties
        /// <summary>
        /// Gets/Sets the TaskstatusId
        /// </summary>
        public int? TaskStatusId
        {
            get
            {
                return taskStatusId;
            }
            set
            {
                taskStatusId = value;
            }
        }
        /// <summary>
        /// Gets/Sets the InputFileLocation
        /// </summary>
        public string InputLocation
        {
            get
            {
                return inputLocation;
            }   
            set
            {
                Validate.IsNotLongerThan(value,inputFileLocationLength,"inputLocation","inputLocation");
                inputLocation = value;
            }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public TaskSearchRequest()
        {
        }
        #endregion
        # region Methods
        /// <summary>
        /// Search Response Overridden Implementaiton
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            return null;
        }
        # endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Task.cs ===
using System;
using System.Data;
using System.Data.SqlClient;
using System.Xml;
using System.Xml.Serialization;
using System.Collections.Generic;
using Microsoft.Ems.Common.Utils;
using System.IO;
using System.Reflection;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines Tasks Queue
    /// </summary>
    public class Task
    {
        #region Constants
        private readonly uint fileNameLength = 255;
        private readonly uint inputLocationLength = 4000;
        private readonly uint outputLocationLength = 4000;
        private readonly uint stagerFileLocationLength = 4000;
        private readonly uint asperaFileLocationLength = 4000;
        private readonly uint statusMessageLength = 4000;
        #endregion

        #region Fields
        /// <summary>
        /// taskInstanceid variable
        /// </summary>
        protected Guid taskInstanceId;
        /// <summary>
        /// variable for filename
        /// </summary>
        protected string fileName = string.Empty;
        /// <summary>
        /// inputFileLocation
        /// </summary>
        protected string inputFileLocation = string.Empty;
        /// <summary>
        /// outputfilelocation
        /// </summary>
        protected string outputFileLocation = string.Empty;
        /// <summary>
        /// Task start date
        /// </summary>
        protected DateTime startDate;
        /// <summary>
        /// task End date
        /// </summary>
        protected DateTime? endDate;
        /// <summary>
        /// task status id
        /// </summary>
        protected int taskStatusId;
        /// <summary>
        /// task status name
        /// </summary>
        protected string taskStatusName;
        /// <summary>
        /// XML Task data
        /// </summary>
        protected string taskData;
        /// <summary>
        /// change type attribute
        /// </summary>
        protected DataChangeType modified = DataChangeType.None;
        /// <summary>
        /// stager file Location
        /// </summary>
        protected string stagerFileLocation = string.Empty;
        /// <summary>
        /// aspera file Location
        /// </summary>
        protected string asperaFileLocation = string.Empty;
        /// <summary>
        /// status message
        /// </summary>
        protected string statusMessage = string.Empty;
        /// <summary>
        /// Indicates if the Validation needs to be done
        /// </summary>
        protected bool doValidation = true;
        /// <summary>
        /// XSD Path for the Schema Validation
        /// </summary>
        private static string xsdPath = string.Empty;
        #endregion

        #region Constructors
        /// <summary>
        /// Default DRM Task Queue Constructor
        /// </summary>
        public Task()
        {
        }
        /// <summary>
        /// Overloaded constructor which allows boolean to skip validations(Used by DRM Automation process)
        /// </summary>
        /// <param name="doValidation"></param>
        public Task(bool doValidation)
        {
            this.doValidation = doValidation;
        }
        /// <summary>
        /// OverLoaded Constructor accepting SQLDataReader as parameter
        /// </summary>
        /// <param name="reader"></param>
        public Task(SqlDataReader reader)
        {
            this.taskInstanceId = reader.GetGuid(reader.GetOrdinal("taskInstanceId"));
            this.fileName = reader.GetString(reader.GetOrdinal("fileName"));
            this.inputFileLocation = reader.GetString(reader.GetOrdinal("inputFileLocation"));
            this.outputFileLocation = SqlHelper.GetNullableString(reader, "outputFileLocation", string.Empty);
            this.startDate = reader.GetDateTime(reader.GetOrdinal("startDate"));
            this.endDate = SqlHelper.GetNullableDateTime(reader, "endDate");
            this.taskStatusId = reader.GetInt32(reader.GetOrdinal("taskStatusId"));
            this.taskStatusName = SqlHelper.GetNullableString(reader, "taskStatusName", string.Empty);
            this.taskData = SqlHelper.GetNullableString(reader, "taskData", string.Empty);
            this.stagerFileLocation = SqlHelper.GetNullableString(reader, "stagerFileLocation", string.Empty);
            this.asperaFileLocation = SqlHelper.GetNullableString(reader, "asperaFileLocation", string.Empty);
            this.statusMessage = SqlHelper.GetNullableString(reader, "statusMessage", string.Empty);
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets/Sets the TaskStatus ID
        /// </summary>
        public int TaskStatusId
        {
            get
            {
                return taskStatusId;
            }
            set
            {
                if (doValidation)
                {
                    if (TaskStatus.Get(value) == null)
                        throw new ArgumentException(String.Format("Invalid TaskStatusId {0}.", value));
                }
                taskStatusId = value;
            }
        }
        /// <summary>
        /// Gets/Sets the TaskStatusName
        /// </summary>
        public string TaskStatusName
        {
            get
            {
                return taskStatusName;
            }
            set
            {
                taskStatusName = value;
            }
        }
        /// <summary>
        /// Gets/Sets the Task Data 
        /// </summary>
        public string TaskData
        {
            get
            {
                return taskData;
            }
            set
            {
                taskData = value;
            }
        }
        /// <summary>
        /// Gets/Sets the TaskInstanceId
        /// </summary>
        public Guid TaskInstanceId
        {
            get
            {
                return taskInstanceId;
            }
            set
            {
                taskInstanceId = value;
            }
        }
        /// <summary>
        /// Gets/Sets the FileName
        /// </summary>
        public String FileName
        {
            get
            {
                return fileName;
            }
            set
            {
                Validate.IsNotEmpty(value, "fileName", "fileName");
                Validate.IsNotLongerThan(value, fileNameLength, "fileName", "fileName");
                fileName = value;
            }
        }
        /// <summary>
        /// Gets/Sets the InputFileLocation
        /// </summary>
        [XmlElement(IsNullable = true)]
        public String InputFileLocation
        {
            get
            {
                return inputFileLocation;
            }
            set
            {
                Validate.IsNotEmpty(value, "inputFileLocation", "inputFileLocation");
                Validate.IsNotLongerThan(value, inputLocationLength, "inputFileLocation", "inputFileLocation");
                inputFileLocation = value;
            }
        }
        /// <summary>
        /// Gets/Sets the OutputFileLocation
        /// </summary>
        public String OutputFileLocation
        {
            get
            {
                return outputFileLocation;
            }
            set
            {
                Validate.IsNotLongerThan(value, outputLocationLength, "outputFileLocation", "outputFileLocation");
                outputFileLocation = value;
            }
        }
        /// <summary>
        /// Gets/Sets the End Date
        /// </summary>
        public DateTime? EndDate
        {
            get
            {
                return endDate;
            }
            set
            {
                endDate = value;
            }
        }
        /// <summary>
        /// Gets/Sets the Start Date
        /// </summary>
        public DateTime StartDate
        {
            get
            {
                return startDate;
            }
            set
            {
                startDate = value;
            }
        }
        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        /// <summary>
        /// Gets/sets the stager fiel locaiton
        /// </summary>
        public string StagerFileLocation
        {
            get
            {
                return this.stagerFileLocation;
            }
            set
            {
                Validate.IsNotLongerThan(value, stagerFileLocationLength, "stagerFileLocation", "stagerFileLocation");
                this.stagerFileLocation = value;
            }
        }
        /// <summary>
        /// Gets/Sets the Aspera file Localtion
        /// </summary>
        public string AsperaFileLocation
        {
            get
            {
                return this.asperaFileLocation;
            }
            set
            {
                Validate.IsNotLongerThan(value, asperaFileLocationLength, "asperaFileLocation", "asperaFileLocation");
                this.asperaFileLocation = value;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public string StatusMessage
        {
            get
            {
                return this.statusMessage;
            }
            set
            {
                Validate.IsNotLongerThan(value, statusMessageLength, "statusMessage", "statusMessage");
                this.statusMessage = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Initializes the XSD SchemaDefinition File Location
        /// </summary>
        public static void Initialize()
        {
            string path = string.Empty;
            path = Assembly.GetExecutingAssembly().CodeBase;
            xsdPath = Path.GetDirectoryName(path) + @"..\..\xsd\Task.xsd";
        }
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        public virtual string Serialize()
        {
            using (Serialization serializer = new Serialization())
            {
                if (this.modified != DataChangeType.None)
                {
                    serializer.SerializeStartElement("Task");
                    serializer.SerializeDatabaseOperation(this.modified);
                    serializer.SerializeElement("taskInstanceId", this.taskInstanceId);
                    serializer.SerializeElement("fileName", this.fileName);
                    serializer.SerializeElement("inputFileLocation", this.inputFileLocation);
                    serializer.SerializeElement("outputFileLocation", this.outputFileLocation);
                    serializer.SerializeElement("taskStatusId", this.taskStatusId);
                    serializer.SerializeElement("stagerFileLocation", this.stagerFileLocation);
                    serializer.SerializeElement("asperaFileLocation", this.asperaFileLocation);
                    serializer.SerializeElement("statusMessage", this.statusMessage);
                    this.SerializeTaskData(serializer);
                    serializer.SerializeEndElement();
                }
                return serializer.ResultXml;
            }
        }
        /// <summary>
        /// Virtual implementation of SerializeTaskData(Returns Empty task Data Node)
        /// </summary>
        /// <returns></returns>
        protected virtual void SerializeTaskData(Serialization serializer)
        {
            if (serializer == null)
                throw new ArgumentException("Serialization context is Null", "serializer");
            serializer.SerializeElement("TaskData", this.taskData);
        }
        /// <summary>
        /// Deserializes 
        /// </summary>
        ///<param name="serializedXML"></param>
        /// <returns></returns>
        public virtual void DeSerialize(string serializedXML)
        {
            XmlDataDocument xmlDocument = new XmlDataDocument();
            xmlDocument.LoadXml(serializedXML);
            XmlNode node = xmlDocument.SelectSingleNode("//Task");
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;
                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("//Task//taskInstanceId");
                if (null != attr) this.taskInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("//Task//fileName");
                this.fileName = Serialization.DeserializeStringElement(node, string.Empty, "//Task//fileName");

                attr = node.SelectSingleNode("//Task//inputFileLocation");
                this.inputFileLocation = Serialization.DeserializeStringElement(attr.InnerText);

                attr = node.SelectSingleNode("//Task//outputFileLocation");
                this.outputFileLocation = Serialization.DeserializeStringElement(attr.InnerText);

                attr = node.SelectSingleNode("//Task//TaskData");
                if (null != attr) this.taskData = Serialization.DeserializeStringElement(attr.InnerText);

                attr = node.SelectSingleNode("//Task//stagerFileLocation");
                if (null != attr) this.stagerFileLocation = Serialization.DeserializeStringElement(attr.InnerText);

                attr = node.SelectSingleNode("//Task//asperaFileLocation");
                if (null != attr) this.asperaFileLocation = Serialization.DeserializeStringElement(attr.InnerText);

                attr = node.SelectSingleNode("//Task//statusMessage");
                if (null != attr) this.statusMessage = Serialization.DeserializeStringElement(attr.InnerText);

                attr = node.SelectSingleNode("//Task//taskStatusId");
                if (null != attr) this.taskStatusId = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }
        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        /// <summary>
        /// Serializes and Saves the Queue Object
        /// </summary>
        ///<param name="task">DRM Task Queue Object</param>
        public static void Save(Task task)
        {
            string serializedXml = task.Serialize();
            Task.Save(serializedXml);
        }
        /// <summary>
        /// Get method without parameters
        /// </summary>
        /// <returns></returns>
        public static List<Task> Get()
        {
            List<Task> taskQueues = new List<Task>();

            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "TaskQueueGet"
                    ))
            {
                while (reader.Read())
                {
                    taskQueues.Add(new Task(reader));
                }
            }
            return taskQueues;
        }
        /// <summary>
        /// Overloaded Get with taskstatus as parameter
        /// </summary>
        /// <param name="taskStatusId"></param>
        /// <returns></returns>
        public static List<Task> Get(int taskStatusId)
        {
            try
            {
                List<Task> taskQueues = new List<Task>();
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "TaskQueueGet"
                        , taskStatusId))
                {
                    while (reader.Read())
                    {
                        taskQueues.Add(new Task(reader));
                    }
                }
                return taskQueues;
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "TaskQueueGet");
                throw;
            }
        }
        /// <summary>
        /// Gets the Queue as XML
        /// </summary>
        /// <returns></returns>
        public static string GetAvailableTaskAsXML()
        {
            string retValue = string.Empty;
            try
            {
                retValue = SqlHelper.ExecuteXmlReaderAsString(
                        CatalogDatabase.RawCatalogDBConnectionString,
                       CommandType.StoredProcedure,
                        "TaskQueueAvailableGetXML"
                        );

            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "TaskQueueAvailableGetXML");
                throw;
            }
            return retValue;
        }
        /// <summary>
        /// Delete the Queue
        /// </summary>
        public static void PurgeQueue()
        {
            try
            {
                SqlHelper.ExecuteNonQuery
                         (
                          CatalogDatabase.RawCatalogDBConnectionString,
                          "TaskQueuePurge"
                          );
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "TaskQueuePurge");
                throw;
            }
        }
        /// <summary>
        /// Saves the Queue Object
        /// </summary>
        /// <param name="xmlDRMQueue"></param>
        public static void Save(string xmlDRMQueue)
        {
            if (string.IsNullOrEmpty(xmlDRMQueue))
            {
                throw new ArgumentException("Invalid XML String", "xmlDRMQueue");
            }
            if (!string.IsNullOrEmpty(xsdPath))
            {
                if (File.Exists(new Uri(xsdPath).AbsolutePath))
                {
                    Validate.IsValidXml(xmlDRMQueue, xsdPath);
                }
            }
            try
            {
                SqlHelper.ExecuteNonQuery(
                       CatalogDatabase.RawCatalogDBConnectionString,
                       "TaskSave",
                       xmlDRMQueue);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "TaskSave");
                throw;
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\RawCatalogDB.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Ems.CatalogAccess {
    using System;
    using System.Data;
    using System.Data.SqlClient;
    
    
    internal partial class rawcatalogdb {
        
        protected string m_connectionstring;
        
        public rawcatalogdb(string server, string database) {
            m_connectionstring = String.Format("Data Source={0};Initial Catalog={1};Integrated Security=True", server, database);
        }
        
        public rawcatalogdb(string connectionstring) {
            this.m_connectionstring = connectionstring;
        }
        
        public int AudioEncodingGet(int audioEncodingId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "AudioEncodingGet";
                command.Connection.Open();

                // Define audioEncodingId
                SqlParameter prm_audioEncodingId = new SqlParameter("@audioEncodingId", SqlDbType.Int);
                prm_audioEncodingId.Direction = ParameterDirection.Input;
                prm_audioEncodingId.Value = audioEncodingId;
                command.Parameters.Add(prm_audioEncodingId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int CategoryCorporationUpsert(int categoryId, int lcid, string description, string htmlDescription, System.Guid logoImageId, System.Guid backgroundImageId, string website, string rssFeatures, string rssAnnouncements, string rssNews) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "CategoryCorporationUpsert";
                command.Connection.Open();

                // Define categoryId
                SqlParameter prm_categoryId = new SqlParameter("@categoryId", SqlDbType.Int);
                prm_categoryId.Direction = ParameterDirection.Input;
                prm_categoryId.Value = categoryId;
                command.Parameters.Add(prm_categoryId);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define description
                SqlParameter prm_description = new SqlParameter("@description", SqlDbType.NVarChar);
                prm_description.Direction = ParameterDirection.Input;
                prm_description.Value = description;
                command.Parameters.Add(prm_description);

                // Define htmlDescription
                SqlParameter prm_htmlDescription = new SqlParameter("@htmlDescription", SqlDbType.NVarChar);
                prm_htmlDescription.Direction = ParameterDirection.Input;
                prm_htmlDescription.Value = htmlDescription;
                command.Parameters.Add(prm_htmlDescription);

                // Define logoImageId
                SqlParameter prm_logoImageId = new SqlParameter("@logoImageId", SqlDbType.UniqueIdentifier);
                prm_logoImageId.Direction = ParameterDirection.Input;
                prm_logoImageId.Value = logoImageId;
                command.Parameters.Add(prm_logoImageId);

                // Define backgroundImageId
                SqlParameter prm_backgroundImageId = new SqlParameter("@backgroundImageId", SqlDbType.UniqueIdentifier);
                prm_backgroundImageId.Direction = ParameterDirection.Input;
                prm_backgroundImageId.Value = backgroundImageId;
                command.Parameters.Add(prm_backgroundImageId);

                // Define website
                SqlParameter prm_website = new SqlParameter("@website", SqlDbType.VarChar);
                prm_website.Direction = ParameterDirection.Input;
                prm_website.Value = website;
                command.Parameters.Add(prm_website);

                // Define rssFeatures
                SqlParameter prm_rssFeatures = new SqlParameter("@rssFeatures", SqlDbType.VarChar);
                prm_rssFeatures.Direction = ParameterDirection.Input;
                prm_rssFeatures.Value = rssFeatures;
                command.Parameters.Add(prm_rssFeatures);

                // Define rssAnnouncements
                SqlParameter prm_rssAnnouncements = new SqlParameter("@rssAnnouncements", SqlDbType.VarChar);
                prm_rssAnnouncements.Direction = ParameterDirection.Input;
                prm_rssAnnouncements.Value = rssAnnouncements;
                command.Parameters.Add(prm_rssAnnouncements);

                // Define rssNews
                SqlParameter prm_rssNews = new SqlParameter("@rssNews", SqlDbType.VarChar);
                prm_rssNews.Direction = ParameterDirection.Input;
                prm_rssNews.Value = rssNews;
                command.Parameters.Add(prm_rssNews);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int CategoryEnumerateForMedia(System.Guid mediaId, int lcid) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "CategoryEnumerateForMedia";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int CategorySystemGet(int categorySystemId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "CategorySystemGet";
                command.Connection.Open();

                // Define categorySystemId
                SqlParameter prm_categorySystemId = new SqlParameter("@categorySystemId", SqlDbType.Int);
                prm_categorySystemId.Direction = ParameterDirection.Input;
                prm_categorySystemId.Value = categorySystemId;
                command.Parameters.Add(prm_categorySystemId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int CategorySystemUpsert(int categorySystemId, string name, int isCorporation) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "CategorySystemUpsert";
                command.Connection.Open();

                // Define categorySystemId
                SqlParameter prm_categorySystemId = new SqlParameter("@categorySystemId", SqlDbType.Int);
                prm_categorySystemId.Direction = ParameterDirection.Input;
                prm_categorySystemId.Value = categorySystemId;
                command.Parameters.Add(prm_categorySystemId);

                // Define name
                SqlParameter prm_name = new SqlParameter("@name", SqlDbType.NVarChar);
                prm_name.Direction = ParameterDirection.Input;
                prm_name.Value = name;
                command.Parameters.Add(prm_name);

                // Define isCorporation
                SqlParameter prm_isCorporation = new SqlParameter("@isCorporation", SqlDbType.Int);
                prm_isCorporation.Direction = ParameterDirection.Input;
                prm_isCorporation.Value = isCorporation;
                command.Parameters.Add(prm_isCorporation);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int CategoryUpsert(int categorySystemId, int parentCategoryId, int categoryId, int lcid, string name) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "CategoryUpsert";
                command.Connection.Open();

                // Define categorySystemId
                SqlParameter prm_categorySystemId = new SqlParameter("@categorySystemId", SqlDbType.Int);
                prm_categorySystemId.Direction = ParameterDirection.Input;
                prm_categorySystemId.Value = categorySystemId;
                command.Parameters.Add(prm_categorySystemId);

                // Define parentCategoryId
                SqlParameter prm_parentCategoryId = new SqlParameter("@parentCategoryId", SqlDbType.Int);
                prm_parentCategoryId.Direction = ParameterDirection.Input;
                prm_parentCategoryId.Value = parentCategoryId;
                command.Parameters.Add(prm_parentCategoryId);

                // Define categoryId
                SqlParameter prm_categoryId = new SqlParameter("@categoryId", SqlDbType.Int);
                prm_categoryId.Direction = ParameterDirection.Input;
                prm_categoryId.Value = categoryId;
                command.Parameters.Add(prm_categoryId);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define name
                SqlParameter prm_name = new SqlParameter("@name", SqlDbType.NVarChar);
                prm_name.Direction = ParameterDirection.Input;
                prm_name.Value = name;
                command.Parameters.Add(prm_name);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int ContributorAliasUpsert(System.Guid contributorId, string alias, out System.Guid contributorAliasId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "ContributorAliasUpsert";
                command.Connection.Open();

                // Define contributorId
                SqlParameter prm_contributorId = new SqlParameter("@contributorId", SqlDbType.UniqueIdentifier);
                prm_contributorId.Direction = ParameterDirection.Input;
                prm_contributorId.Value = contributorId;
                command.Parameters.Add(prm_contributorId);

                // Define alias
                SqlParameter prm_alias = new SqlParameter("@alias", SqlDbType.NVarChar);
                prm_alias.Direction = ParameterDirection.Input;
                prm_alias.Value = alias;
                command.Parameters.Add(prm_alias);

                // Define contributorAliasId
                SqlParameter prm_contributorAliasId = new SqlParameter("@contributorAliasId", SqlDbType.UniqueIdentifier);
                prm_contributorAliasId.Direction = ParameterDirection.Output;
                command.Parameters.Add(prm_contributorAliasId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results
                if ((prm_contributorAliasId.Value == null)) {
                    contributorAliasId = ((System.Guid)(prm_contributorAliasId.Value));
                }
                else {
                    contributorAliasId = ((System.Guid)(prm_contributorAliasId.Value));
                }


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int ContributorGet(string contributorIds) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "ContributorGet";
                command.Connection.Open();

                // Define contributorIds
                SqlParameter prm_contributorIds = new SqlParameter("@contributorIds", SqlDbType.NVarChar);
                prm_contributorIds.Direction = ParameterDirection.Input;
                prm_contributorIds.Value = contributorIds;
                command.Parameters.Add(prm_contributorIds);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int ContributorRelationshipTypeGet(int contributorRelationshipTypeId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "ContributorRelationshipTypeGet";
                command.Connection.Open();

                // Define contributorRelationshipTypeId
                SqlParameter prm_contributorRelationshipTypeId = new SqlParameter("@contributorRelationshipTypeId", SqlDbType.Int);
                prm_contributorRelationshipTypeId.Direction = ParameterDirection.Input;
                prm_contributorRelationshipTypeId.Value = contributorRelationshipTypeId;
                command.Parameters.Add(prm_contributorRelationshipTypeId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int CountryGet(string countryCode) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "CountryGet";
                command.Connection.Open();

                // Define countryCode
                SqlParameter prm_countryCode = new SqlParameter("@countryCode", SqlDbType.Char);
                prm_countryCode.Direction = ParameterDirection.Input;
                prm_countryCode.Value = countryCode;
                command.Parameters.Add(prm_countryCode);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int GameConsumableUpsert(System.Guid gameAssetMediaId, System.Guid gameMediaId, int liveTitleAssetId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "GameConsumableUpsert";
                command.Connection.Open();

                // Define gameAssetMediaId
                SqlParameter prm_gameAssetMediaId = new SqlParameter("@gameAssetMediaId", SqlDbType.UniqueIdentifier);
                prm_gameAssetMediaId.Direction = ParameterDirection.Input;
                prm_gameAssetMediaId.Value = gameAssetMediaId;
                command.Parameters.Add(prm_gameAssetMediaId);

                // Define gameMediaId
                SqlParameter prm_gameMediaId = new SqlParameter("@gameMediaId", SqlDbType.UniqueIdentifier);
                prm_gameMediaId.Direction = ParameterDirection.Input;
                prm_gameMediaId.Value = gameMediaId;
                command.Parameters.Add(prm_gameMediaId);

                // Define liveTitleAssetId
                SqlParameter prm_liveTitleAssetId = new SqlParameter("@liveTitleAssetId", SqlDbType.Int);
                prm_liveTitleAssetId.Direction = ParameterDirection.Input;
                prm_liveTitleAssetId.Value = liveTitleAssetId;
                command.Parameters.Add(prm_liveTitleAssetId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int GameContentInstanceUpsert(System.Guid gameContentInstanceId, int installSize, int packageSize, byte[] encryptedSymKey, byte[] encryptedPublicKey, string url, byte[] liveContentId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "GameContentInstanceUpsert";
                command.Connection.Open();

                // Define gameContentInstanceId
                SqlParameter prm_gameContentInstanceId = new SqlParameter("@gameContentInstanceId", SqlDbType.UniqueIdentifier);
                prm_gameContentInstanceId.Direction = ParameterDirection.Input;
                prm_gameContentInstanceId.Value = gameContentInstanceId;
                command.Parameters.Add(prm_gameContentInstanceId);

                // Define installSize
                SqlParameter prm_installSize = new SqlParameter("@installSize", SqlDbType.Int);
                prm_installSize.Direction = ParameterDirection.Input;
                prm_installSize.Value = installSize;
                command.Parameters.Add(prm_installSize);

                // Define packageSize
                SqlParameter prm_packageSize = new SqlParameter("@packageSize", SqlDbType.Int);
                prm_packageSize.Direction = ParameterDirection.Input;
                prm_packageSize.Value = packageSize;
                command.Parameters.Add(prm_packageSize);

                // Define encryptedSymKey
                SqlParameter prm_encryptedSymKey = new SqlParameter("@encryptedSymKey", SqlDbType.VarBinary);
                prm_encryptedSymKey.Direction = ParameterDirection.Input;
                prm_encryptedSymKey.Value = encryptedSymKey;
                command.Parameters.Add(prm_encryptedSymKey);

                // Define encryptedPublicKey
                SqlParameter prm_encryptedPublicKey = new SqlParameter("@encryptedPublicKey", SqlDbType.VarBinary);
                prm_encryptedPublicKey.Direction = ParameterDirection.Input;
                prm_encryptedPublicKey.Value = encryptedPublicKey;
                command.Parameters.Add(prm_encryptedPublicKey);

                // Define url
                SqlParameter prm_url = new SqlParameter("@url", SqlDbType.VarChar);
                prm_url.Direction = ParameterDirection.Input;
                prm_url.Value = url;
                command.Parameters.Add(prm_url);

                // Define liveContentId
                SqlParameter prm_liveContentId = new SqlParameter("@liveContentId", SqlDbType.VarBinary);
                prm_liveContentId.Direction = ParameterDirection.Input;
                prm_liveContentId.Value = liveContentId;
                command.Parameters.Add(prm_liveContentId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int GameContentUpsert(System.Guid gameContentMediaId, System.Guid gameMediaId, int providerCategoryId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "GameContentUpsert";
                command.Connection.Open();

                // Define gameContentMediaId
                SqlParameter prm_gameContentMediaId = new SqlParameter("@gameContentMediaId", SqlDbType.UniqueIdentifier);
                prm_gameContentMediaId.Direction = ParameterDirection.Input;
                prm_gameContentMediaId.Value = gameContentMediaId;
                command.Parameters.Add(prm_gameContentMediaId);

                // Define gameMediaId
                SqlParameter prm_gameMediaId = new SqlParameter("@gameMediaId", SqlDbType.UniqueIdentifier);
                prm_gameMediaId.Direction = ParameterDirection.Input;
                prm_gameMediaId.Value = gameMediaId;
                command.Parameters.Add(prm_gameMediaId);

                // Define providerCategoryId
                SqlParameter prm_providerCategoryId = new SqlParameter("@providerCategoryId", SqlDbType.Int);
                prm_providerCategoryId.Direction = ParameterDirection.Input;
                prm_providerCategoryId.Value = providerCategoryId;
                command.Parameters.Add(prm_providerCategoryId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int GameLocaleUpsert(System.Guid gameMediaId, int lcid, string customGenre) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "GameLocaleUpsert";
                command.Connection.Open();

                // Define gameMediaId
                SqlParameter prm_gameMediaId = new SqlParameter("@gameMediaId", SqlDbType.UniqueIdentifier);
                prm_gameMediaId.Direction = ParameterDirection.Input;
                prm_gameMediaId.Value = gameMediaId;
                command.Parameters.Add(prm_gameMediaId);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define customGenre
                SqlParameter prm_customGenre = new SqlParameter("@customGenre", SqlDbType.NVarChar);
                prm_customGenre.Direction = ParameterDirection.Input;
                prm_customGenre.Value = customGenre;
                command.Parameters.Add(prm_customGenre);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int GameUpsert(System.Guid gameMediaId, int liveTitleId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "GameUpsert";
                command.Connection.Open();

                // Define gameMediaId
                SqlParameter prm_gameMediaId = new SqlParameter("@gameMediaId", SqlDbType.UniqueIdentifier);
                prm_gameMediaId.Direction = ParameterDirection.Input;
                prm_gameMediaId.Value = gameMediaId;
                command.Parameters.Add(prm_gameMediaId);

                // Define liveTitleId
                SqlParameter prm_liveTitleId = new SqlParameter("@liveTitleId", SqlDbType.Int);
                prm_liveTitleId.Direction = ParameterDirection.Input;
                prm_liveTitleId.Value = liveTitleId;
                command.Parameters.Add(prm_liveTitleId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int GetVersion() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "GetVersion";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int ImageFormatGet(int imageFormatId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "ImageFormatGet";
                command.Connection.Open();

                // Define imageFormatId
                SqlParameter prm_imageFormatId = new SqlParameter("@imageFormatId", SqlDbType.Int);
                prm_imageFormatId.Direction = ParameterDirection.Input;
                prm_imageFormatId.Value = imageFormatId;
                command.Parameters.Add(prm_imageFormatId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int ImageSizeGet(int imageSizeId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "ImageSizeGet";
                command.Connection.Open();

                // Define imageSizeId
                SqlParameter prm_imageSizeId = new SqlParameter("@imageSizeId", SqlDbType.Int);
                prm_imageSizeId.Direction = ParameterDirection.Input;
                prm_imageSizeId.Value = imageSizeId;
                command.Parameters.Add(prm_imageSizeId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int LicenseTypeGet(int licenseTypeId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "LicenseTypeGet";
                command.Connection.Open();

                // Define licenseTypeId
                SqlParameter prm_licenseTypeId = new SqlParameter("@licenseTypeId", SqlDbType.Int);
                prm_licenseTypeId.Direction = ParameterDirection.Input;
                prm_licenseTypeId.Value = licenseTypeId;
                command.Parameters.Add(prm_licenseTypeId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int LicenseTypeGetAll() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "LicenseTypeGetAll";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int LocaleGet(int lcid) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "LocaleGet";
                command.Connection.Open();

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaAdd(int mediaTypeId, int providerId, System.DateTime originalReleaseDate, string displayOriginalReleaseDate, string title, string titleSort, string reducedTitle, string description, string reducedDescription, int lcid, out System.Guid mediaId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaAdd";
                command.Connection.Open();

                // Define mediaTypeId
                SqlParameter prm_mediaTypeId = new SqlParameter("@mediaTypeId", SqlDbType.Int);
                prm_mediaTypeId.Direction = ParameterDirection.Input;
                prm_mediaTypeId.Value = mediaTypeId;
                command.Parameters.Add(prm_mediaTypeId);

                // Define providerId
                SqlParameter prm_providerId = new SqlParameter("@providerId", SqlDbType.Int);
                prm_providerId.Direction = ParameterDirection.Input;
                prm_providerId.Value = providerId;
                command.Parameters.Add(prm_providerId);

                // Define originalReleaseDate
                SqlParameter prm_originalReleaseDate = new SqlParameter("@originalReleaseDate", SqlDbType.DateTime);
                prm_originalReleaseDate.Direction = ParameterDirection.Input;
                prm_originalReleaseDate.Value = originalReleaseDate;
                command.Parameters.Add(prm_originalReleaseDate);

                // Define displayOriginalReleaseDate
                SqlParameter prm_displayOriginalReleaseDate = new SqlParameter("@displayOriginalReleaseDate", SqlDbType.VarChar);
                prm_displayOriginalReleaseDate.Direction = ParameterDirection.Input;
                prm_displayOriginalReleaseDate.Value = displayOriginalReleaseDate;
                command.Parameters.Add(prm_displayOriginalReleaseDate);

                // Define title
                SqlParameter prm_title = new SqlParameter("@title", SqlDbType.NVarChar);
                prm_title.Direction = ParameterDirection.Input;
                prm_title.Value = title;
                command.Parameters.Add(prm_title);

                // Define titleSort
                SqlParameter prm_titleSort = new SqlParameter("@titleSort", SqlDbType.NVarChar);
                prm_titleSort.Direction = ParameterDirection.Input;
                prm_titleSort.Value = titleSort;
                command.Parameters.Add(prm_titleSort);

                // Define reducedTitle
                SqlParameter prm_reducedTitle = new SqlParameter("@reducedTitle", SqlDbType.NVarChar);
                prm_reducedTitle.Direction = ParameterDirection.Input;
                prm_reducedTitle.Value = reducedTitle;
                command.Parameters.Add(prm_reducedTitle);

                // Define description
                SqlParameter prm_description = new SqlParameter("@description", SqlDbType.NVarChar);
                prm_description.Direction = ParameterDirection.Input;
                prm_description.Value = description;
                command.Parameters.Add(prm_description);

                // Define reducedDescription
                SqlParameter prm_reducedDescription = new SqlParameter("@reducedDescription", SqlDbType.NVarChar);
                prm_reducedDescription.Direction = ParameterDirection.Input;
                prm_reducedDescription.Value = reducedDescription;
                command.Parameters.Add(prm_reducedDescription);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Output;
                command.Parameters.Add(prm_mediaId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results
                if ((prm_mediaId.Value == null)) {
                    mediaId = ((System.Guid)(prm_mediaId.Value));
                }
                else {
                    mediaId = ((System.Guid)(prm_mediaId.Value));
                }


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaCategoryUpsert(System.Guid mediaId, int categoryId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaCategoryUpsert";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define categoryId
                SqlParameter prm_categoryId = new SqlParameter("@categoryId", SqlDbType.Int);
                prm_categoryId.Direction = ParameterDirection.Input;
                prm_categoryId.Value = categoryId;
                command.Parameters.Add(prm_categoryId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaContributorEnumerate(System.Guid mediaId, int roleId, int primary) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaContributorEnumerate";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define roleId
                SqlParameter prm_roleId = new SqlParameter("@roleId", SqlDbType.Int);
                prm_roleId.Direction = ParameterDirection.Input;
                prm_roleId.Value = roleId;
                command.Parameters.Add(prm_roleId);

                // Define primary
                SqlParameter prm_primary = new SqlParameter("@primary", SqlDbType.TinyInt);
                prm_primary.Direction = ParameterDirection.Input;
                prm_primary.Value = primary;
                command.Parameters.Add(prm_primary);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaDelete(int idoc) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaDelete";
                command.Connection.Open();

                // Define idoc
                SqlParameter prm_idoc = new SqlParameter("@idoc", SqlDbType.Int);
                prm_idoc.Direction = ParameterDirection.Input;
                prm_idoc.Value = idoc;
                command.Parameters.Add(prm_idoc);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaEnumerateForCategory(int categoryId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaEnumerateForCategory";
                command.Connection.Open();

                // Define categoryId
                SqlParameter prm_categoryId = new SqlParameter("@categoryId", SqlDbType.Int);
                prm_categoryId.Direction = ParameterDirection.Input;
                prm_categoryId.Value = categoryId;
                command.Parameters.Add(prm_categoryId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaGet(System.Guid mediaId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaGet";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaInstanceUpsert(System.Guid mediaInstanceId, System.Guid mediaId, int isAcquirable, int isAdSupported, int isPreview) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaInstanceUpsert";
                command.Connection.Open();

                // Define mediaInstanceId
                SqlParameter prm_mediaInstanceId = new SqlParameter("@mediaInstanceId", SqlDbType.UniqueIdentifier);
                prm_mediaInstanceId.Direction = ParameterDirection.Input;
                prm_mediaInstanceId.Value = mediaInstanceId;
                command.Parameters.Add(prm_mediaInstanceId);

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define isAcquirable
                SqlParameter prm_isAcquirable = new SqlParameter("@isAcquirable", SqlDbType.TinyInt);
                prm_isAcquirable.Direction = ParameterDirection.Input;
                prm_isAcquirable.Value = isAcquirable;
                command.Parameters.Add(prm_isAcquirable);

                // Define isAdSupported
                SqlParameter prm_isAdSupported = new SqlParameter("@isAdSupported", SqlDbType.TinyInt);
                prm_isAdSupported.Direction = ParameterDirection.Input;
                prm_isAdSupported.Value = isAdSupported;
                command.Parameters.Add(prm_isAdSupported);

                // Define isPreview
                SqlParameter prm_isPreview = new SqlParameter("@isPreview", SqlDbType.TinyInt);
                prm_isPreview.Direction = ParameterDirection.Input;
                prm_isPreview.Value = isPreview;
                command.Parameters.Add(prm_isPreview);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaLocaleMapUpsert(System.Guid mediaId, int lcid, int lcidMap) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaLocaleMapUpsert";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define lcidMap
                SqlParameter prm_lcidMap = new SqlParameter("@lcidMap", SqlDbType.Int);
                prm_lcidMap.Direction = ParameterDirection.Input;
                prm_lcidMap.Value = lcidMap;
                command.Parameters.Add(prm_lcidMap);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaLocaleUpsert(System.Guid mediaId, int lcid, string title, string titleSort, string reducedTitle, string description, string reducedDescription) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaLocaleUpsert";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define title
                SqlParameter prm_title = new SqlParameter("@title", SqlDbType.NVarChar);
                prm_title.Direction = ParameterDirection.Input;
                prm_title.Value = title;
                command.Parameters.Add(prm_title);

                // Define titleSort
                SqlParameter prm_titleSort = new SqlParameter("@titleSort", SqlDbType.NVarChar);
                prm_titleSort.Direction = ParameterDirection.Input;
                prm_titleSort.Value = titleSort;
                command.Parameters.Add(prm_titleSort);

                // Define reducedTitle
                SqlParameter prm_reducedTitle = new SqlParameter("@reducedTitle", SqlDbType.NVarChar);
                prm_reducedTitle.Direction = ParameterDirection.Input;
                prm_reducedTitle.Value = reducedTitle;
                command.Parameters.Add(prm_reducedTitle);

                // Define description
                SqlParameter prm_description = new SqlParameter("@description", SqlDbType.NVarChar);
                prm_description.Direction = ParameterDirection.Input;
                prm_description.Value = description;
                command.Parameters.Add(prm_description);

                // Define reducedDescription
                SqlParameter prm_reducedDescription = new SqlParameter("@reducedDescription", SqlDbType.NVarChar);
                prm_reducedDescription.Direction = ParameterDirection.Input;
                prm_reducedDescription.Value = reducedDescription;
                command.Parameters.Add(prm_reducedDescription);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaRatingDescriptorUpsert(System.Guid mediaId, int ratingDescriptorId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaRatingDescriptorUpsert";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define ratingDescriptorId
                SqlParameter prm_ratingDescriptorId = new SqlParameter("@ratingDescriptorId", SqlDbType.Int);
                prm_ratingDescriptorId.Direction = ParameterDirection.Input;
                prm_ratingDescriptorId.Value = ratingDescriptorId;
                command.Parameters.Add(prm_ratingDescriptorId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaRatingUpsert(System.Guid mediaId, int ratingValueId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaRatingUpsert";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define ratingValueId
                SqlParameter prm_ratingValueId = new SqlParameter("@ratingValueId", SqlDbType.Int);
                prm_ratingValueId.Direction = ParameterDirection.Input;
                prm_ratingValueId.Value = ratingValueId;
                command.Parameters.Add(prm_ratingValueId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaRelationshipSearch(System.Guid mediaId, int lcid) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaRelationshipSearch";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaRelationshipTypeAdd(int mediaRelationshipTypeId, string name) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaRelationshipTypeAdd";
                command.Connection.Open();

                // Define mediaRelationshipTypeId
                SqlParameter prm_mediaRelationshipTypeId = new SqlParameter("@mediaRelationshipTypeId", SqlDbType.Int);
                prm_mediaRelationshipTypeId.Direction = ParameterDirection.Input;
                prm_mediaRelationshipTypeId.Value = mediaRelationshipTypeId;
                command.Parameters.Add(prm_mediaRelationshipTypeId);

                // Define name
                SqlParameter prm_name = new SqlParameter("@name", SqlDbType.NVarChar);
                prm_name.Direction = ParameterDirection.Input;
                prm_name.Value = name;
                command.Parameters.Add(prm_name);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaRelationshipTypeEnumerate() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaRelationshipTypeEnumerate";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaRelationshipTypeGet(int mediaRelationshipTypeId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaRelationshipTypeGet";
                command.Connection.Open();

                // Define mediaRelationshipTypeId
                SqlParameter prm_mediaRelationshipTypeId = new SqlParameter("@mediaRelationshipTypeId", SqlDbType.Int);
                prm_mediaRelationshipTypeId.Direction = ParameterDirection.Input;
                prm_mediaRelationshipTypeId.Value = mediaRelationshipTypeId;
                command.Parameters.Add(prm_mediaRelationshipTypeId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaRelationshipUpsert(System.Guid mediaId, System.Guid relatedMediaId, int mediaRelationshipTypeId, int sortOrder) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaRelationshipUpsert";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define relatedMediaId
                SqlParameter prm_relatedMediaId = new SqlParameter("@relatedMediaId", SqlDbType.UniqueIdentifier);
                prm_relatedMediaId.Direction = ParameterDirection.Input;
                prm_relatedMediaId.Value = relatedMediaId;
                command.Parameters.Add(prm_relatedMediaId);

                // Define mediaRelationshipTypeId
                SqlParameter prm_mediaRelationshipTypeId = new SqlParameter("@mediaRelationshipTypeId", SqlDbType.Int);
                prm_mediaRelationshipTypeId.Direction = ParameterDirection.Input;
                prm_mediaRelationshipTypeId.Value = mediaRelationshipTypeId;
                command.Parameters.Add(prm_mediaRelationshipTypeId);

                // Define sortOrder
                SqlParameter prm_sortOrder = new SqlParameter("@sortOrder", SqlDbType.Int);
                prm_sortOrder.Direction = ParameterDirection.Input;
                prm_sortOrder.Value = sortOrder;
                command.Parameters.Add(prm_sortOrder);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaSet(int idoc) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaSet";
                command.Connection.Open();

                // Define idoc
                SqlParameter prm_idoc = new SqlParameter("@idoc", SqlDbType.Int);
                prm_idoc.Direction = ParameterDirection.Input;
                prm_idoc.Value = idoc;
                command.Parameters.Add(prm_idoc);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaTypeAdd(int mediaTypeId, string name, string mediaClass) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaTypeAdd";
                command.Connection.Open();

                // Define mediaTypeId
                SqlParameter prm_mediaTypeId = new SqlParameter("@mediaTypeId", SqlDbType.Int);
                prm_mediaTypeId.Direction = ParameterDirection.Input;
                prm_mediaTypeId.Value = mediaTypeId;
                command.Parameters.Add(prm_mediaTypeId);

                // Define name
                SqlParameter prm_name = new SqlParameter("@name", SqlDbType.NVarChar);
                prm_name.Direction = ParameterDirection.Input;
                prm_name.Value = name;
                command.Parameters.Add(prm_name);

                // Define mediaClass
                SqlParameter prm_mediaClass = new SqlParameter("@mediaClass", SqlDbType.NVarChar);
                prm_mediaClass.Direction = ParameterDirection.Input;
                prm_mediaClass.Value = mediaClass;
                command.Parameters.Add(prm_mediaClass);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaTypeEnumerate() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaTypeEnumerate";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaUpdate(System.Guid mediaId, int providerId, System.DateTime originalReleaseDate, string displayOriginalReleaseDate, string title, string titleSort, string reducedTitle, string description, string reducedDescription, int lcid) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaUpdate";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define providerId
                SqlParameter prm_providerId = new SqlParameter("@providerId", SqlDbType.Int);
                prm_providerId.Direction = ParameterDirection.Input;
                prm_providerId.Value = providerId;
                command.Parameters.Add(prm_providerId);

                // Define originalReleaseDate
                SqlParameter prm_originalReleaseDate = new SqlParameter("@originalReleaseDate", SqlDbType.DateTime);
                prm_originalReleaseDate.Direction = ParameterDirection.Input;
                prm_originalReleaseDate.Value = originalReleaseDate;
                command.Parameters.Add(prm_originalReleaseDate);

                // Define displayOriginalReleaseDate
                SqlParameter prm_displayOriginalReleaseDate = new SqlParameter("@displayOriginalReleaseDate", SqlDbType.NVarChar);
                prm_displayOriginalReleaseDate.Direction = ParameterDirection.Input;
                prm_displayOriginalReleaseDate.Value = displayOriginalReleaseDate;
                command.Parameters.Add(prm_displayOriginalReleaseDate);

                // Define title
                SqlParameter prm_title = new SqlParameter("@title", SqlDbType.NVarChar);
                prm_title.Direction = ParameterDirection.Input;
                prm_title.Value = title;
                command.Parameters.Add(prm_title);

                // Define titleSort
                SqlParameter prm_titleSort = new SqlParameter("@titleSort", SqlDbType.NVarChar);
                prm_titleSort.Direction = ParameterDirection.Input;
                prm_titleSort.Value = titleSort;
                command.Parameters.Add(prm_titleSort);

                // Define reducedTitle
                SqlParameter prm_reducedTitle = new SqlParameter("@reducedTitle", SqlDbType.NVarChar);
                prm_reducedTitle.Direction = ParameterDirection.Input;
                prm_reducedTitle.Value = reducedTitle;
                command.Parameters.Add(prm_reducedTitle);

                // Define description
                SqlParameter prm_description = new SqlParameter("@description", SqlDbType.NVarChar);
                prm_description.Direction = ParameterDirection.Input;
                prm_description.Value = description;
                command.Parameters.Add(prm_description);

                // Define reducedDescription
                SqlParameter prm_reducedDescription = new SqlParameter("@reducedDescription", SqlDbType.NVarChar);
                prm_reducedDescription.Direction = ParameterDirection.Input;
                prm_reducedDescription.Value = reducedDescription;
                command.Parameters.Add(prm_reducedDescription);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int MediaUpsert(System.Guid mediaId, int mediaTypeId, int providerId, System.DateTime originalReleaseDate, string displayOriginalReleaseDate, System.DateTime visibilityDate) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "MediaUpsert";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define mediaTypeId
                SqlParameter prm_mediaTypeId = new SqlParameter("@mediaTypeId", SqlDbType.Int);
                prm_mediaTypeId.Direction = ParameterDirection.Input;
                prm_mediaTypeId.Value = mediaTypeId;
                command.Parameters.Add(prm_mediaTypeId);

                // Define providerId
                SqlParameter prm_providerId = new SqlParameter("@providerId", SqlDbType.Int);
                prm_providerId.Direction = ParameterDirection.Input;
                prm_providerId.Value = providerId;
                command.Parameters.Add(prm_providerId);

                // Define originalReleaseDate
                SqlParameter prm_originalReleaseDate = new SqlParameter("@originalReleaseDate", SqlDbType.DateTime);
                prm_originalReleaseDate.Direction = ParameterDirection.Input;
                prm_originalReleaseDate.Value = originalReleaseDate;
                command.Parameters.Add(prm_originalReleaseDate);

                // Define displayOriginalReleaseDate
                SqlParameter prm_displayOriginalReleaseDate = new SqlParameter("@displayOriginalReleaseDate", SqlDbType.VarChar);
                prm_displayOriginalReleaseDate.Direction = ParameterDirection.Input;
                prm_displayOriginalReleaseDate.Value = displayOriginalReleaseDate;
                command.Parameters.Add(prm_displayOriginalReleaseDate);

                // Define visibilityDate
                SqlParameter prm_visibilityDate = new SqlParameter("@visibilityDate", SqlDbType.DateTime);
                prm_visibilityDate.Direction = ParameterDirection.Input;
                prm_visibilityDate.Value = visibilityDate;
                command.Parameters.Add(prm_visibilityDate);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int Merge(string tableName) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "Merge";
                command.Connection.Open();

                // Define tableName
                SqlParameter prm_tableName = new SqlParameter("@tableName", SqlDbType.VarChar);
                prm_tableName.Direction = ParameterDirection.Input;
                prm_tableName.Value = tableName;
                command.Parameters.Add(prm_tableName);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int OfferInstanceProviderTermUpsert(System.Guid offerInstanceId, System.Guid providerTermId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "OfferInstanceProviderTermUpsert";
                command.Connection.Open();

                // Define offerInstanceId
                SqlParameter prm_offerInstanceId = new SqlParameter("@offerInstanceId", SqlDbType.UniqueIdentifier);
                prm_offerInstanceId.Direction = ParameterDirection.Input;
                prm_offerInstanceId.Value = offerInstanceId;
                command.Parameters.Add(prm_offerInstanceId);

                // Define providerTermId
                SqlParameter prm_providerTermId = new SqlParameter("@providerTermId", SqlDbType.UniqueIdentifier);
                prm_providerTermId.Direction = ParameterDirection.Input;
                prm_providerTermId.Value = providerTermId;
                command.Parameters.Add(prm_providerTermId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int OfferInstanceUpsert(System.Guid offerInstanceId, System.Guid offerId, System.Guid mediaId, string sku, int pricingRuleId, int pointsPrice, System.DateTime startDateTime, System.DateTime endDateTime, string countryCode, int visibilityLevelId, int requiredUserTypeId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "OfferInstanceUpsert";
                command.Connection.Open();

                // Define offerInstanceId
                SqlParameter prm_offerInstanceId = new SqlParameter("@offerInstanceId", SqlDbType.UniqueIdentifier);
                prm_offerInstanceId.Direction = ParameterDirection.Input;
                prm_offerInstanceId.Value = offerInstanceId;
                command.Parameters.Add(prm_offerInstanceId);

                // Define offerId
                SqlParameter prm_offerId = new SqlParameter("@offerId", SqlDbType.UniqueIdentifier);
                prm_offerId.Direction = ParameterDirection.Input;
                prm_offerId.Value = offerId;
                command.Parameters.Add(prm_offerId);

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define sku
                SqlParameter prm_sku = new SqlParameter("@sku", SqlDbType.NVarChar);
                prm_sku.Direction = ParameterDirection.Input;
                prm_sku.Value = sku;
                command.Parameters.Add(prm_sku);

                // Define pricingRuleId
                SqlParameter prm_pricingRuleId = new SqlParameter("@pricingRuleId", SqlDbType.Int);
                prm_pricingRuleId.Direction = ParameterDirection.Input;
                prm_pricingRuleId.Value = pricingRuleId;
                command.Parameters.Add(prm_pricingRuleId);

                // Define pointsPrice
                SqlParameter prm_pointsPrice = new SqlParameter("@pointsPrice", SqlDbType.Int);
                prm_pointsPrice.Direction = ParameterDirection.Input;
                prm_pointsPrice.Value = pointsPrice;
                command.Parameters.Add(prm_pointsPrice);

                // Define startDateTime
                SqlParameter prm_startDateTime = new SqlParameter("@startDateTime", SqlDbType.DateTime);
                prm_startDateTime.Direction = ParameterDirection.Input;
                prm_startDateTime.Value = startDateTime;
                command.Parameters.Add(prm_startDateTime);

                // Define endDateTime
                SqlParameter prm_endDateTime = new SqlParameter("@endDateTime", SqlDbType.DateTime);
                prm_endDateTime.Direction = ParameterDirection.Input;
                prm_endDateTime.Value = endDateTime;
                command.Parameters.Add(prm_endDateTime);

                // Define countryCode
                SqlParameter prm_countryCode = new SqlParameter("@countryCode", SqlDbType.Char);
                prm_countryCode.Direction = ParameterDirection.Input;
                prm_countryCode.Value = countryCode;
                command.Parameters.Add(prm_countryCode);

                // Define visibilityLevelId
                SqlParameter prm_visibilityLevelId = new SqlParameter("@visibilityLevelId", SqlDbType.Int);
                prm_visibilityLevelId.Direction = ParameterDirection.Input;
                prm_visibilityLevelId.Value = visibilityLevelId;
                command.Parameters.Add(prm_visibilityLevelId);

                // Define requiredUserTypeId
                SqlParameter prm_requiredUserTypeId = new SqlParameter("@requiredUserTypeId", SqlDbType.Int);
                prm_requiredUserTypeId.Direction = ParameterDirection.Input;
                prm_requiredUserTypeId.Value = requiredUserTypeId;
                command.Parameters.Add(prm_requiredUserTypeId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int OfferStoreUpsert(System.Guid offerId, int storeId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "OfferStoreUpsert";
                command.Connection.Open();

                // Define offerId
                SqlParameter prm_offerId = new SqlParameter("@offerId", SqlDbType.UniqueIdentifier);
                prm_offerId.Direction = ParameterDirection.Input;
                prm_offerId.Value = offerId;
                command.Parameters.Add(prm_offerId);

                // Define storeId
                SqlParameter prm_storeId = new SqlParameter("@storeId", SqlDbType.Int);
                prm_storeId.Direction = ParameterDirection.Input;
                prm_storeId.Value = storeId;
                command.Parameters.Add(prm_storeId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int OfferUpsert(System.Guid offerId, System.Guid mediaId, string name) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "OfferUpsert";
                command.Connection.Open();

                // Define offerId
                SqlParameter prm_offerId = new SqlParameter("@offerId", SqlDbType.UniqueIdentifier);
                prm_offerId.Direction = ParameterDirection.Input;
                prm_offerId.Value = offerId;
                command.Parameters.Add(prm_offerId);

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define name
                SqlParameter prm_name = new SqlParameter("@name", SqlDbType.NVarChar);
                prm_name.Direction = ParameterDirection.Input;
                prm_name.Value = name;
                command.Parameters.Add(prm_name);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int PreviewMediaInstanceTypeGet(int previewMediaInstanceTypeId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "PreviewMediaInstanceTypeGet";
                command.Connection.Open();

                // Define previewMediaInstanceTypeId
                SqlParameter prm_previewMediaInstanceTypeId = new SqlParameter("@previewMediaInstanceTypeId", SqlDbType.Int);
                prm_previewMediaInstanceTypeId.Direction = ParameterDirection.Input;
                prm_previewMediaInstanceTypeId.Value = previewMediaInstanceTypeId;
                command.Parameters.Add(prm_previewMediaInstanceTypeId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int ProviderTermMediaInstanceUpsert(System.Guid providerTermId, System.Guid mediaInstanceId, int licenserId, int licenseTypeId, int deliveryTypeId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "ProviderTermMediaInstanceUpsert";
                command.Connection.Open();

                // Define providerTermId
                SqlParameter prm_providerTermId = new SqlParameter("@providerTermId", SqlDbType.UniqueIdentifier);
                prm_providerTermId.Direction = ParameterDirection.Input;
                prm_providerTermId.Value = providerTermId;
                command.Parameters.Add(prm_providerTermId);

                // Define mediaInstanceId
                SqlParameter prm_mediaInstanceId = new SqlParameter("@mediaInstanceId", SqlDbType.UniqueIdentifier);
                prm_mediaInstanceId.Direction = ParameterDirection.Input;
                prm_mediaInstanceId.Value = mediaInstanceId;
                command.Parameters.Add(prm_mediaInstanceId);

                // Define licenserId
                SqlParameter prm_licenserId = new SqlParameter("@licenserId", SqlDbType.Int);
                prm_licenserId.Direction = ParameterDirection.Input;
                prm_licenserId.Value = licenserId;
                command.Parameters.Add(prm_licenserId);

                // Define licenseTypeId
                SqlParameter prm_licenseTypeId = new SqlParameter("@licenseTypeId", SqlDbType.Int);
                prm_licenseTypeId.Direction = ParameterDirection.Input;
                prm_licenseTypeId.Value = licenseTypeId;
                command.Parameters.Add(prm_licenseTypeId);

                // Define deliveryTypeId
                SqlParameter prm_deliveryTypeId = new SqlParameter("@deliveryTypeId", SqlDbType.Int);
                prm_deliveryTypeId.Direction = ParameterDirection.Input;
                prm_deliveryTypeId.Value = deliveryTypeId;
                command.Parameters.Add(prm_deliveryTypeId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int ProviderTermUpsert(System.Guid providerTermId, System.Guid mediaId, decimal wholesalePrice, System.DateTime startDateTime, System.DateTime endDateTime, string countryCode, int licenserId, string externalLicenserContentId, int providerId, string externalProviderContentId, int automaticallyGenerateOffer, string modifiedBy) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "ProviderTermUpsert";
                command.Connection.Open();

                // Define providerTermId
                SqlParameter prm_providerTermId = new SqlParameter("@providerTermId", SqlDbType.UniqueIdentifier);
                prm_providerTermId.Direction = ParameterDirection.Input;
                prm_providerTermId.Value = providerTermId;
                command.Parameters.Add(prm_providerTermId);

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define wholesalePrice
                SqlParameter prm_wholesalePrice = new SqlParameter("@wholesalePrice", SqlDbType.Decimal);
                prm_wholesalePrice.Direction = ParameterDirection.Input;
                prm_wholesalePrice.Value = wholesalePrice;
                command.Parameters.Add(prm_wholesalePrice);

                // Define startDateTime
                SqlParameter prm_startDateTime = new SqlParameter("@startDateTime", SqlDbType.DateTime);
                prm_startDateTime.Direction = ParameterDirection.Input;
                prm_startDateTime.Value = startDateTime;
                command.Parameters.Add(prm_startDateTime);

                // Define endDateTime
                SqlParameter prm_endDateTime = new SqlParameter("@endDateTime", SqlDbType.DateTime);
                prm_endDateTime.Direction = ParameterDirection.Input;
                prm_endDateTime.Value = endDateTime;
                command.Parameters.Add(prm_endDateTime);

                // Define countryCode
                SqlParameter prm_countryCode = new SqlParameter("@countryCode", SqlDbType.Char);
                prm_countryCode.Direction = ParameterDirection.Input;
                prm_countryCode.Value = countryCode;
                command.Parameters.Add(prm_countryCode);

                // Define licenserId
                SqlParameter prm_licenserId = new SqlParameter("@licenserId", SqlDbType.Int);
                prm_licenserId.Direction = ParameterDirection.Input;
                prm_licenserId.Value = licenserId;
                command.Parameters.Add(prm_licenserId);

                // Define externalLicenserContentId
                SqlParameter prm_externalLicenserContentId = new SqlParameter("@externalLicenserContentId", SqlDbType.NVarChar);
                prm_externalLicenserContentId.Direction = ParameterDirection.Input;
                prm_externalLicenserContentId.Value = externalLicenserContentId;
                command.Parameters.Add(prm_externalLicenserContentId);

                // Define providerId
                SqlParameter prm_providerId = new SqlParameter("@providerId", SqlDbType.Int);
                prm_providerId.Direction = ParameterDirection.Input;
                prm_providerId.Value = providerId;
                command.Parameters.Add(prm_providerId);

                // Define externalProviderContentId
                SqlParameter prm_externalProviderContentId = new SqlParameter("@externalProviderContentId", SqlDbType.NVarChar);
                prm_externalProviderContentId.Direction = ParameterDirection.Input;
                prm_externalProviderContentId.Value = externalProviderContentId;
                command.Parameters.Add(prm_externalProviderContentId);

                // Define automaticallyGenerateOffer
                SqlParameter prm_automaticallyGenerateOffer = new SqlParameter("@automaticallyGenerateOffer", SqlDbType.TinyInt);
                prm_automaticallyGenerateOffer.Direction = ParameterDirection.Input;
                prm_automaticallyGenerateOffer.Value = automaticallyGenerateOffer;
                command.Parameters.Add(prm_automaticallyGenerateOffer);

                // Define modifiedBy
                SqlParameter prm_modifiedBy = new SqlParameter("@modifiedBy", SqlDbType.NVarChar);
                prm_modifiedBy.Direction = ParameterDirection.Input;
                prm_modifiedBy.Value = modifiedBy;
                command.Parameters.Add(prm_modifiedBy);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int RatingDescriptorAdd(int ratingDescriptorId, int ratingSystemId, string name, string description) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "RatingDescriptorAdd";
                command.Connection.Open();

                // Define ratingDescriptorId
                SqlParameter prm_ratingDescriptorId = new SqlParameter("@ratingDescriptorId", SqlDbType.Int);
                prm_ratingDescriptorId.Direction = ParameterDirection.Input;
                prm_ratingDescriptorId.Value = ratingDescriptorId;
                command.Parameters.Add(prm_ratingDescriptorId);

                // Define ratingSystemId
                SqlParameter prm_ratingSystemId = new SqlParameter("@ratingSystemId", SqlDbType.Int);
                prm_ratingSystemId.Direction = ParameterDirection.Input;
                prm_ratingSystemId.Value = ratingSystemId;
                command.Parameters.Add(prm_ratingSystemId);

                // Define name
                SqlParameter prm_name = new SqlParameter("@name", SqlDbType.NVarChar);
                prm_name.Direction = ParameterDirection.Input;
                prm_name.Value = name;
                command.Parameters.Add(prm_name);

                // Define description
                SqlParameter prm_description = new SqlParameter("@description", SqlDbType.NVarChar);
                prm_description.Direction = ParameterDirection.Input;
                prm_description.Value = description;
                command.Parameters.Add(prm_description);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int RatingDescriptorGet(int ratingDescriptorId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "RatingDescriptorGet";
                command.Connection.Open();

                // Define ratingDescriptorId
                SqlParameter prm_ratingDescriptorId = new SqlParameter("@ratingDescriptorId", SqlDbType.Int);
                prm_ratingDescriptorId.Direction = ParameterDirection.Input;
                prm_ratingDescriptorId.Value = ratingDescriptorId;
                command.Parameters.Add(prm_ratingDescriptorId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int RatingSystemAdd(int ratingSystemId, string name) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "RatingSystemAdd";
                command.Connection.Open();

                // Define ratingSystemId
                SqlParameter prm_ratingSystemId = new SqlParameter("@ratingSystemId", SqlDbType.Int);
                prm_ratingSystemId.Direction = ParameterDirection.Input;
                prm_ratingSystemId.Value = ratingSystemId;
                command.Parameters.Add(prm_ratingSystemId);

                // Define name
                SqlParameter prm_name = new SqlParameter("@name", SqlDbType.NVarChar);
                prm_name.Direction = ParameterDirection.Input;
                prm_name.Value = name;
                command.Parameters.Add(prm_name);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int RatingSystemCountryAdd(int ratingSystemId, string countryCode) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "RatingSystemCountryAdd";
                command.Connection.Open();

                // Define ratingSystemId
                SqlParameter prm_ratingSystemId = new SqlParameter("@ratingSystemId", SqlDbType.Int);
                prm_ratingSystemId.Direction = ParameterDirection.Input;
                prm_ratingSystemId.Value = ratingSystemId;
                command.Parameters.Add(prm_ratingSystemId);

                // Define countryCode
                SqlParameter prm_countryCode = new SqlParameter("@countryCode", SqlDbType.Char);
                prm_countryCode.Direction = ParameterDirection.Input;
                prm_countryCode.Value = countryCode;
                command.Parameters.Add(prm_countryCode);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int RatingSystemGet(int ratingSystemId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "RatingSystemGet";
                command.Connection.Open();

                // Define ratingSystemId
                SqlParameter prm_ratingSystemId = new SqlParameter("@ratingSystemId", SqlDbType.Int);
                prm_ratingSystemId.Direction = ParameterDirection.Input;
                prm_ratingSystemId.Value = ratingSystemId;
                command.Parameters.Add(prm_ratingSystemId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int RatingValueAdd(int ratingValueId, int ratingSystemId, string name, string description, int sortOrder) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "RatingValueAdd";
                command.Connection.Open();

                // Define ratingValueId
                SqlParameter prm_ratingValueId = new SqlParameter("@ratingValueId", SqlDbType.Int);
                prm_ratingValueId.Direction = ParameterDirection.Input;
                prm_ratingValueId.Value = ratingValueId;
                command.Parameters.Add(prm_ratingValueId);

                // Define ratingSystemId
                SqlParameter prm_ratingSystemId = new SqlParameter("@ratingSystemId", SqlDbType.Int);
                prm_ratingSystemId.Direction = ParameterDirection.Input;
                prm_ratingSystemId.Value = ratingSystemId;
                command.Parameters.Add(prm_ratingSystemId);

                // Define name
                SqlParameter prm_name = new SqlParameter("@name", SqlDbType.NVarChar);
                prm_name.Direction = ParameterDirection.Input;
                prm_name.Value = name;
                command.Parameters.Add(prm_name);

                // Define description
                SqlParameter prm_description = new SqlParameter("@description", SqlDbType.NVarChar);
                prm_description.Direction = ParameterDirection.Input;
                prm_description.Value = description;
                command.Parameters.Add(prm_description);

                // Define sortOrder
                SqlParameter prm_sortOrder = new SqlParameter("@sortOrder", SqlDbType.Int);
                prm_sortOrder.Direction = ParameterDirection.Input;
                prm_sortOrder.Value = sortOrder;
                command.Parameters.Add(prm_sortOrder);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int RatingValueGet(int ratingValueId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "RatingValueGet";
                command.Connection.Open();

                // Define ratingValueId
                SqlParameter prm_ratingValueId = new SqlParameter("@ratingValueId", SqlDbType.Int);
                prm_ratingValueId.Direction = ParameterDirection.Input;
                prm_ratingValueId.Value = ratingValueId;
                command.Parameters.Add(prm_ratingValueId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int TransferContributorDataToCore() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "TransferContributorDataToCore";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int TransferDataToCore() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "TransferDataToCore";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int TransferDomainDataToCore() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "TransferDomainDataToCore";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int TransferGameDataToCore() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "TransferGameDataToCore";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int TransferMediaDataToCore() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "TransferMediaDataToCore";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int TransferMusicDataToCore() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "TransferMusicDataToCore";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int TransferOfferDataToCore() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "TransferOfferDataToCore";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int TransferPodcastDataToCore() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "TransferPodcastDataToCore";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int TransferVideoDataToCore() {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "TransferVideoDataToCore";
                command.Connection.Open();

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoDefinitionGet(int videoDefinitionId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoDefinitionGet";
                command.Connection.Open();

                // Define videoDefinitionId
                SqlParameter prm_videoDefinitionId = new SqlParameter("@videoDefinitionId", SqlDbType.Int);
                prm_videoDefinitionId.Direction = ParameterDirection.Input;
                prm_videoDefinitionId.Value = videoDefinitionId;
                command.Parameters.Add(prm_videoDefinitionId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoDelete(int idoc) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoDelete";
                command.Connection.Open();

                // Define idoc
                SqlParameter prm_idoc = new SqlParameter("@idoc", SqlDbType.Int);
                prm_idoc.Direction = ParameterDirection.Input;
                prm_idoc.Value = idoc;
                command.Parameters.Add(prm_idoc);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoEncodingGet(int videoEncodingId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoEncodingGet";
                command.Connection.Open();

                // Define videoEncodingId
                SqlParameter prm_videoEncodingId = new SqlParameter("@videoEncodingId", SqlDbType.Int);
                prm_videoEncodingId.Direction = ParameterDirection.Input;
                prm_videoEncodingId.Value = videoEncodingId;
                command.Parameters.Add(prm_videoEncodingId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoGet(System.Guid videoMediaId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoGet";
                command.Connection.Open();

                // Define videoMediaId
                SqlParameter prm_videoMediaId = new SqlParameter("@videoMediaId", SqlDbType.UniqueIdentifier);
                prm_videoMediaId.Direction = ParameterDirection.Input;
                prm_videoMediaId.Value = videoMediaId;
                command.Parameters.Add(prm_videoMediaId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSave(string xmlData) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSave";
                command.Connection.Open();

                // Define xmlData
                SqlParameter prm_xmlData = new SqlParameter("@xmlData", SqlDbType.NVarChar);
                prm_xmlData.Direction = ParameterDirection.Input;
                prm_xmlData.Value = xmlData;
                command.Parameters.Add(prm_xmlData);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSearch(System.Guid mediaId, int mediaTypeId, string title, string description, string visibilityDateFrom, System.DateTime visibilityDateTo, int maxRows) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSearch";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define mediaTypeId
                SqlParameter prm_mediaTypeId = new SqlParameter("@mediaTypeId", SqlDbType.Int);
                prm_mediaTypeId.Direction = ParameterDirection.Input;
                prm_mediaTypeId.Value = mediaTypeId;
                command.Parameters.Add(prm_mediaTypeId);

                // Define title
                SqlParameter prm_title = new SqlParameter("@title", SqlDbType.NVarChar);
                prm_title.Direction = ParameterDirection.Input;
                prm_title.Value = title;
                command.Parameters.Add(prm_title);

                // Define description
                SqlParameter prm_description = new SqlParameter("@description", SqlDbType.NVarChar);
                prm_description.Direction = ParameterDirection.Input;
                prm_description.Value = description;
                command.Parameters.Add(prm_description);

                // Define visibilityDateFrom
                SqlParameter prm_visibilityDateFrom = new SqlParameter("@visibilityDateFrom", SqlDbType.NVarChar);
                prm_visibilityDateFrom.Direction = ParameterDirection.Input;
                prm_visibilityDateFrom.Value = visibilityDateFrom;
                command.Parameters.Add(prm_visibilityDateFrom);

                // Define visibilityDateTo
                SqlParameter prm_visibilityDateTo = new SqlParameter("@visibilityDateTo", SqlDbType.DateTime);
                prm_visibilityDateTo.Direction = ParameterDirection.Input;
                prm_visibilityDateTo.Value = visibilityDateTo;
                command.Parameters.Add(prm_visibilityDateTo);

                // Define maxRows
                SqlParameter prm_maxRows = new SqlParameter("@maxRows", SqlDbType.Int);
                prm_maxRows.Direction = ParameterDirection.Input;
                prm_maxRows.Value = maxRows;
                command.Parameters.Add(prm_maxRows);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSeasonEnumerateForSeries(System.Guid mediaId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSeasonEnumerateForSeries";
                command.Connection.Open();

                // Define mediaId
                SqlParameter prm_mediaId = new SqlParameter("@mediaId", SqlDbType.UniqueIdentifier);
                prm_mediaId.Direction = ParameterDirection.Input;
                prm_mediaId.Value = mediaId;
                command.Parameters.Add(prm_mediaId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSeasonGet(System.Guid videoSeasonMediaId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSeasonGet";
                command.Connection.Open();

                // Define videoSeasonMediaId
                SqlParameter prm_videoSeasonMediaId = new SqlParameter("@videoSeasonMediaId", SqlDbType.UniqueIdentifier);
                prm_videoSeasonMediaId.Direction = ParameterDirection.Input;
                prm_videoSeasonMediaId.Value = videoSeasonMediaId;
                command.Parameters.Add(prm_videoSeasonMediaId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSeasonSave(string xmlData) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSeasonSave";
                command.Connection.Open();

                // Define xmlData
                SqlParameter prm_xmlData = new SqlParameter("@xmlData", SqlDbType.NVarChar);
                prm_xmlData.Direction = ParameterDirection.Input;
                prm_xmlData.Value = xmlData;
                command.Parameters.Add(prm_xmlData);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSeasonUpsert(out System.Guid videoSeasonMediaId, int mediaTypeId, int providerId, System.DateTime visibilityDate, System.DateTime originalReleaseDate, string displayoriginalReleaseDate, string title, string titleSort, string reducedTitle, string description, string reducedDescription, int lcid, int seasonNumber, int isComplete, System.Guid videoSeriesMediaId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSeasonUpsert";
                command.Connection.Open();

                // Define videoSeasonMediaId
                SqlParameter prm_videoSeasonMediaId = new SqlParameter("@videoSeasonMediaId", SqlDbType.UniqueIdentifier);
                prm_videoSeasonMediaId.Direction = ParameterDirection.Output;
                command.Parameters.Add(prm_videoSeasonMediaId);

                // Define mediaTypeId
                SqlParameter prm_mediaTypeId = new SqlParameter("@mediaTypeId", SqlDbType.Int);
                prm_mediaTypeId.Direction = ParameterDirection.Input;
                prm_mediaTypeId.Value = mediaTypeId;
                command.Parameters.Add(prm_mediaTypeId);

                // Define providerId
                SqlParameter prm_providerId = new SqlParameter("@providerId", SqlDbType.Int);
                prm_providerId.Direction = ParameterDirection.Input;
                prm_providerId.Value = providerId;
                command.Parameters.Add(prm_providerId);

                // Define visibilityDate
                SqlParameter prm_visibilityDate = new SqlParameter("@visibilityDate", SqlDbType.DateTime);
                prm_visibilityDate.Direction = ParameterDirection.Input;
                prm_visibilityDate.Value = visibilityDate;
                command.Parameters.Add(prm_visibilityDate);

                // Define originalReleaseDate
                SqlParameter prm_originalReleaseDate = new SqlParameter("@originalReleaseDate", SqlDbType.DateTime);
                prm_originalReleaseDate.Direction = ParameterDirection.Input;
                prm_originalReleaseDate.Value = originalReleaseDate;
                command.Parameters.Add(prm_originalReleaseDate);

                // Define displayoriginalReleaseDate
                SqlParameter prm_displayoriginalReleaseDate = new SqlParameter("@displayoriginalReleaseDate", SqlDbType.VarChar);
                prm_displayoriginalReleaseDate.Direction = ParameterDirection.Input;
                prm_displayoriginalReleaseDate.Value = displayoriginalReleaseDate;
                command.Parameters.Add(prm_displayoriginalReleaseDate);

                // Define title
                SqlParameter prm_title = new SqlParameter("@title", SqlDbType.NVarChar);
                prm_title.Direction = ParameterDirection.Input;
                prm_title.Value = title;
                command.Parameters.Add(prm_title);

                // Define titleSort
                SqlParameter prm_titleSort = new SqlParameter("@titleSort", SqlDbType.NVarChar);
                prm_titleSort.Direction = ParameterDirection.Input;
                prm_titleSort.Value = titleSort;
                command.Parameters.Add(prm_titleSort);

                // Define reducedTitle
                SqlParameter prm_reducedTitle = new SqlParameter("@reducedTitle", SqlDbType.NVarChar);
                prm_reducedTitle.Direction = ParameterDirection.Input;
                prm_reducedTitle.Value = reducedTitle;
                command.Parameters.Add(prm_reducedTitle);

                // Define description
                SqlParameter prm_description = new SqlParameter("@description", SqlDbType.NVarChar);
                prm_description.Direction = ParameterDirection.Input;
                prm_description.Value = description;
                command.Parameters.Add(prm_description);

                // Define reducedDescription
                SqlParameter prm_reducedDescription = new SqlParameter("@reducedDescription", SqlDbType.NVarChar);
                prm_reducedDescription.Direction = ParameterDirection.Input;
                prm_reducedDescription.Value = reducedDescription;
                command.Parameters.Add(prm_reducedDescription);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define seasonNumber
                SqlParameter prm_seasonNumber = new SqlParameter("@seasonNumber", SqlDbType.Int);
                prm_seasonNumber.Direction = ParameterDirection.Input;
                prm_seasonNumber.Value = seasonNumber;
                command.Parameters.Add(prm_seasonNumber);

                // Define isComplete
                SqlParameter prm_isComplete = new SqlParameter("@isComplete", SqlDbType.TinyInt);
                prm_isComplete.Direction = ParameterDirection.Input;
                prm_isComplete.Value = isComplete;
                command.Parameters.Add(prm_isComplete);

                // Define videoSeriesMediaId
                SqlParameter prm_videoSeriesMediaId = new SqlParameter("@videoSeriesMediaId", SqlDbType.UniqueIdentifier);
                prm_videoSeriesMediaId.Direction = ParameterDirection.Input;
                prm_videoSeriesMediaId.Value = videoSeriesMediaId;
                command.Parameters.Add(prm_videoSeriesMediaId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results
                if ((prm_videoSeasonMediaId.Value == null)) {
                    videoSeasonMediaId = ((System.Guid)(prm_videoSeasonMediaId.Value));
                }
                else {
                    videoSeasonMediaId = ((System.Guid)(prm_videoSeasonMediaId.Value));
                }


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSeriesGet(System.Guid videoSeriesMediaId) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSeriesGet";
                command.Connection.Open();

                // Define videoSeriesMediaId
                SqlParameter prm_videoSeriesMediaId = new SqlParameter("@videoSeriesMediaId", SqlDbType.UniqueIdentifier);
                prm_videoSeriesMediaId.Direction = ParameterDirection.Input;
                prm_videoSeriesMediaId.Value = videoSeriesMediaId;
                command.Parameters.Add(prm_videoSeriesMediaId);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSeriesSave(string xmlData) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSeriesSave";
                command.Connection.Open();

                // Define xmlData
                SqlParameter prm_xmlData = new SqlParameter("@xmlData", SqlDbType.NVarChar);
                prm_xmlData.Direction = ParameterDirection.Input;
                prm_xmlData.Value = xmlData;
                command.Parameters.Add(prm_xmlData);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSeriesSearch(string title) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSeriesSearch";
                command.Connection.Open();

                // Define title
                SqlParameter prm_title = new SqlParameter("@title", SqlDbType.NVarChar);
                prm_title.Direction = ParameterDirection.Input;
                prm_title.Value = title;
                command.Parameters.Add(prm_title);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSeriesUpsert(out System.Guid videoSeriesMediaId, int mediaTypeId, int providerId, System.DateTime visibilityDate, System.DateTime originalReleaseDate, string displayoriginalReleaseDate, string title, string titleSort, string reducedTitle, string description, string reducedDescription, int lcid, string productionCompany, int isOrderBySeason) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSeriesUpsert";
                command.Connection.Open();

                // Define videoSeriesMediaId
                SqlParameter prm_videoSeriesMediaId = new SqlParameter("@videoSeriesMediaId", SqlDbType.UniqueIdentifier);
                prm_videoSeriesMediaId.Direction = ParameterDirection.Output;
                command.Parameters.Add(prm_videoSeriesMediaId);

                // Define mediaTypeId
                SqlParameter prm_mediaTypeId = new SqlParameter("@mediaTypeId", SqlDbType.Int);
                prm_mediaTypeId.Direction = ParameterDirection.Input;
                prm_mediaTypeId.Value = mediaTypeId;
                command.Parameters.Add(prm_mediaTypeId);

                // Define providerId
                SqlParameter prm_providerId = new SqlParameter("@providerId", SqlDbType.Int);
                prm_providerId.Direction = ParameterDirection.Input;
                prm_providerId.Value = providerId;
                command.Parameters.Add(prm_providerId);

                // Define visibilityDate
                SqlParameter prm_visibilityDate = new SqlParameter("@visibilityDate", SqlDbType.DateTime);
                prm_visibilityDate.Direction = ParameterDirection.Input;
                prm_visibilityDate.Value = visibilityDate;
                command.Parameters.Add(prm_visibilityDate);

                // Define originalReleaseDate
                SqlParameter prm_originalReleaseDate = new SqlParameter("@originalReleaseDate", SqlDbType.DateTime);
                prm_originalReleaseDate.Direction = ParameterDirection.Input;
                prm_originalReleaseDate.Value = originalReleaseDate;
                command.Parameters.Add(prm_originalReleaseDate);

                // Define displayoriginalReleaseDate
                SqlParameter prm_displayoriginalReleaseDate = new SqlParameter("@displayoriginalReleaseDate", SqlDbType.VarChar);
                prm_displayoriginalReleaseDate.Direction = ParameterDirection.Input;
                prm_displayoriginalReleaseDate.Value = displayoriginalReleaseDate;
                command.Parameters.Add(prm_displayoriginalReleaseDate);

                // Define title
                SqlParameter prm_title = new SqlParameter("@title", SqlDbType.NVarChar);
                prm_title.Direction = ParameterDirection.Input;
                prm_title.Value = title;
                command.Parameters.Add(prm_title);

                // Define titleSort
                SqlParameter prm_titleSort = new SqlParameter("@titleSort", SqlDbType.NVarChar);
                prm_titleSort.Direction = ParameterDirection.Input;
                prm_titleSort.Value = titleSort;
                command.Parameters.Add(prm_titleSort);

                // Define reducedTitle
                SqlParameter prm_reducedTitle = new SqlParameter("@reducedTitle", SqlDbType.NVarChar);
                prm_reducedTitle.Direction = ParameterDirection.Input;
                prm_reducedTitle.Value = reducedTitle;
                command.Parameters.Add(prm_reducedTitle);

                // Define description
                SqlParameter prm_description = new SqlParameter("@description", SqlDbType.NVarChar);
                prm_description.Direction = ParameterDirection.Input;
                prm_description.Value = description;
                command.Parameters.Add(prm_description);

                // Define reducedDescription
                SqlParameter prm_reducedDescription = new SqlParameter("@reducedDescription", SqlDbType.NVarChar);
                prm_reducedDescription.Direction = ParameterDirection.Input;
                prm_reducedDescription.Value = reducedDescription;
                command.Parameters.Add(prm_reducedDescription);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define productionCompany
                SqlParameter prm_productionCompany = new SqlParameter("@productionCompany", SqlDbType.NVarChar);
                prm_productionCompany.Direction = ParameterDirection.Input;
                prm_productionCompany.Value = productionCompany;
                command.Parameters.Add(prm_productionCompany);

                // Define isOrderBySeason
                SqlParameter prm_isOrderBySeason = new SqlParameter("@isOrderBySeason", SqlDbType.TinyInt);
                prm_isOrderBySeason.Direction = ParameterDirection.Input;
                prm_isOrderBySeason.Value = isOrderBySeason;
                command.Parameters.Add(prm_isOrderBySeason);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results
                if ((prm_videoSeriesMediaId.Value == null)) {
                    videoSeriesMediaId = ((System.Guid)(prm_videoSeriesMediaId.Value));
                }
                else {
                    videoSeriesMediaId = ((System.Guid)(prm_videoSeriesMediaId.Value));
                }


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoSet(int idoc) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoSet";
                command.Connection.Open();

                // Define idoc
                SqlParameter prm_idoc = new SqlParameter("@idoc", SqlDbType.Int);
                prm_idoc.Direction = ParameterDirection.Input;
                prm_idoc.Value = idoc;
                command.Parameters.Add(prm_idoc);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        public int VideoUpsert(
                    out System.Guid videoMediaId, 
                    int mediaTypeId, 
                    int providerId, 
                    System.DateTime visibilityDate, 
                    System.DateTime originalReleaseDate, 
                    string displayOriginalReleaseDate, 
                    string title, 
                    string titleSort, 
                    string reducedTitle, 
                    string description, 
                    string reducedDescription, 
                    int lcid, 
                    string crid, 
                    string isan, 
                    string upc, 
                    string subTitle, 
                    int durationSecs, 
                    string productionCompany, 
                    string copyright) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "VideoUpsert";
                command.Connection.Open();

                // Define videoMediaId
                SqlParameter prm_videoMediaId = new SqlParameter("@videoMediaId", SqlDbType.UniqueIdentifier);
                prm_videoMediaId.Direction = ParameterDirection.Output;
                command.Parameters.Add(prm_videoMediaId);

                // Define mediaTypeId
                SqlParameter prm_mediaTypeId = new SqlParameter("@mediaTypeId", SqlDbType.Int);
                prm_mediaTypeId.Direction = ParameterDirection.Input;
                prm_mediaTypeId.Value = mediaTypeId;
                command.Parameters.Add(prm_mediaTypeId);

                // Define providerId
                SqlParameter prm_providerId = new SqlParameter("@providerId", SqlDbType.Int);
                prm_providerId.Direction = ParameterDirection.Input;
                prm_providerId.Value = providerId;
                command.Parameters.Add(prm_providerId);

                // Define visibilityDate
                SqlParameter prm_visibilityDate = new SqlParameter("@visibilityDate", SqlDbType.DateTime);
                prm_visibilityDate.Direction = ParameterDirection.Input;
                prm_visibilityDate.Value = visibilityDate;
                command.Parameters.Add(prm_visibilityDate);

                // Define originalReleaseDate
                SqlParameter prm_originalReleaseDate = new SqlParameter("@originalReleaseDate", SqlDbType.DateTime);
                prm_originalReleaseDate.Direction = ParameterDirection.Input;
                prm_originalReleaseDate.Value = originalReleaseDate;
                command.Parameters.Add(prm_originalReleaseDate);

                // Define displayOriginalReleaseDate
                SqlParameter prm_displayOriginalReleaseDate = new SqlParameter("@displayOriginalReleaseDate", SqlDbType.VarChar);
                prm_displayOriginalReleaseDate.Direction = ParameterDirection.Input;
                prm_displayOriginalReleaseDate.Value = displayOriginalReleaseDate;
                command.Parameters.Add(prm_displayOriginalReleaseDate);

                // Define title
                SqlParameter prm_title = new SqlParameter("@title", SqlDbType.NVarChar);
                prm_title.Direction = ParameterDirection.Input;
                prm_title.Value = title;
                command.Parameters.Add(prm_title);

                // Define titleSort
                SqlParameter prm_titleSort = new SqlParameter("@titleSort", SqlDbType.NVarChar);
                prm_titleSort.Direction = ParameterDirection.Input;
                prm_titleSort.Value = titleSort;
                command.Parameters.Add(prm_titleSort);

                // Define reducedTitle
                SqlParameter prm_reducedTitle = new SqlParameter("@reducedTitle", SqlDbType.NVarChar);
                prm_reducedTitle.Direction = ParameterDirection.Input;
                prm_reducedTitle.Value = reducedTitle;
                command.Parameters.Add(prm_reducedTitle);

                // Define description
                SqlParameter prm_description = new SqlParameter("@description", SqlDbType.NVarChar);
                prm_description.Direction = ParameterDirection.Input;
                prm_description.Value = description;
                command.Parameters.Add(prm_description);

                // Define reducedDescription
                SqlParameter prm_reducedDescription = new SqlParameter("@reducedDescription", SqlDbType.NVarChar);
                prm_reducedDescription.Direction = ParameterDirection.Input;
                prm_reducedDescription.Value = reducedDescription;
                command.Parameters.Add(prm_reducedDescription);

                // Define lcid
                SqlParameter prm_lcid = new SqlParameter("@lcid", SqlDbType.Int);
                prm_lcid.Direction = ParameterDirection.Input;
                prm_lcid.Value = lcid;
                command.Parameters.Add(prm_lcid);

                // Define crid
                SqlParameter prm_crid = new SqlParameter("@crid", SqlDbType.NVarChar);
                prm_crid.Direction = ParameterDirection.Input;
                prm_crid.Value = crid;
                command.Parameters.Add(prm_crid);

                // Define isan
                SqlParameter prm_isan = new SqlParameter("@isan", SqlDbType.NVarChar);
                prm_isan.Direction = ParameterDirection.Input;
                prm_isan.Value = isan;
                command.Parameters.Add(prm_isan);

                // Define upc
                SqlParameter prm_upc = new SqlParameter("@upc", SqlDbType.NVarChar);
                prm_upc.Direction = ParameterDirection.Input;
                prm_upc.Value = upc;
                command.Parameters.Add(prm_upc);

                // Define subTitle
                SqlParameter prm_subTitle = new SqlParameter("@subTitle", SqlDbType.NVarChar);
                prm_subTitle.Direction = ParameterDirection.Input;
                prm_subTitle.Value = subTitle;
                command.Parameters.Add(prm_subTitle);

                // Define durationSecs
                SqlParameter prm_durationSecs = new SqlParameter("@durationSecs", SqlDbType.Int);
                prm_durationSecs.Direction = ParameterDirection.Input;
                prm_durationSecs.Value = durationSecs;
                command.Parameters.Add(prm_durationSecs);

                // Define productionCompany
                SqlParameter prm_productionCompany = new SqlParameter("@productionCompany", SqlDbType.NVarChar);
                prm_productionCompany.Direction = ParameterDirection.Input;
                prm_productionCompany.Value = productionCompany;
                command.Parameters.Add(prm_productionCompany);

                // Define copyright
                SqlParameter prm_copyright = new SqlParameter("@copyright", SqlDbType.NVarChar);
                prm_copyright.Direction = ParameterDirection.Input;
                prm_copyright.Value = copyright;
                command.Parameters.Add(prm_copyright);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results
                if ((prm_videoMediaId.Value == null)) {
                    videoMediaId = ((System.Guid)(prm_videoMediaId.Value));
                }
                else {
                    videoMediaId = ((System.Guid)(prm_videoMediaId.Value));
                }


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        /// 
        public int XLinkedServerAdd(string linkedServer, string sourceServer, string database, string remoteLogin, string remotePwd) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "XLinkedServerAdd";
                command.Connection.Open();

                // Define linkedServer
                SqlParameter prm_linkedServer = new SqlParameter("@linkedServer", SqlDbType.VarChar);
                prm_linkedServer.Direction = ParameterDirection.Input;
                prm_linkedServer.Value = linkedServer;
                command.Parameters.Add(prm_linkedServer);

                // Define sourceServer
                SqlParameter prm_sourceServer = new SqlParameter("@sourceServer", SqlDbType.VarChar);
                prm_sourceServer.Direction = ParameterDirection.Input;
                prm_sourceServer.Value = sourceServer;
                command.Parameters.Add(prm_sourceServer);

                // Define database
                SqlParameter prm_database = new SqlParameter("@database", SqlDbType.VarChar);
                prm_database.Direction = ParameterDirection.Input;
                prm_database.Value = database;
                command.Parameters.Add(prm_database);

                // Define remoteLogin
                SqlParameter prm_remoteLogin = new SqlParameter("@remoteLogin", SqlDbType.VarChar);
                prm_remoteLogin.Direction = ParameterDirection.Input;
                prm_remoteLogin.Value = remoteLogin;
                command.Parameters.Add(prm_remoteLogin);

                // Define remotePwd
                SqlParameter prm_remotePwd = new SqlParameter("@remotePwd", SqlDbType.VarChar);
                prm_remotePwd.Direction = ParameterDirection.Input;
                prm_remotePwd.Value = remotePwd;
                command.Parameters.Add(prm_remotePwd);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
        
        /// 
        public int XLinkedServerDrop(string linkedServer) {
            // Initialize the SqlCommand
            SqlCommand command = new SqlCommand();
            try {
                command.Connection = new SqlConnection(m_connectionstring);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "XLinkedServerDrop";
                command.Connection.Open();

                // Define linkedServer
                SqlParameter prm_linkedServer = new SqlParameter("@linkedServer", SqlDbType.VarChar);
                prm_linkedServer.Direction = ParameterDirection.Input;
                prm_linkedServer.Value = linkedServer;
                command.Parameters.Add(prm_linkedServer);

                // Define a SqlParameter to get the return value
                SqlParameter prm_return = new SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4);
                prm_return.Direction = ParameterDirection.ReturnValue;
                command.Parameters.Add(prm_return);

                // Execute
                command.ExecuteNonQuery();

                // Collect the results


                return ((int)(prm_return.Value));
            }
            finally {
                command.Connection.Close();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\UserType.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Represents an deivery type
    /// </summary>
    public class UserType : Utils.IKeyed<Int32>
    {
        #region Fields
        private Int32 id;
        private String name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,UserType> UserTypeCache = new Utils.KeyedCache<Int32,UserType>(
                        new Utils.KeyedCache<Int32,Catalog.UserType>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP
        /// </summary>
        public UserType()
        {
        }

        /// <summary>
        /// Constructor that takes a db reader
        /// </summary>
        private UserType( SqlDataReader reader )
        {
            id = reader.GetInt32(reader.GetOrdinal("userTypeId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// The id for the user type
        /// </summary>
        public Int32 Id
        {
            get { return id; }
            set { id = value; }
        }

        /// <summary>
        /// The name by which the user type is known - for readability purpose only
        /// </summary>
        public String Name
        {
            get
            {
                return name;
            }
            
            set
            {
                if ( String.IsNullOrEmpty( value ))
                {
                    throw new ArgumentNullException( "The name of a UserType cannot be null or empty." );
                }
                name = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get the UserType for a given id.
        /// </summary>
        /// <param name="id">The id of the UserType to retrieve</param>
        /// <returns>The UserType of the given id.</returns>
        internal static UserType Get(int id)
        {
            return UserTypeCache.Get( id );
        }

        /// <summary>
        /// Gets the list of UserTypes in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<UserType> Get()
        {
            return UserTypeCache.Get();
        }
        
        /// <summary>
        /// Gets the list of DeliveryTypes from the database.
        /// </summary>
        /// <returns></returns>
        private static List<UserType> GetData()
        {
            List<UserType> userTypes = new List<UserType>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "UserTypeGet"
                    ))
            {
                while( reader.Read() )
                {
                    userTypes.Add( new UserType( reader ));
                }
            }
            return userTypes;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Video.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides retrieval and editing of Video data in the catalog.
    /// </summary>
    public class Video : Media
    {
        #region Constants
        /// <summary>
        /// Defines Video table column lengths
        /// </summary>
        private const int cridLength = 200;
        private const int isanLength = 50;
        private const int upcLength = 50;
        private const int subtitleLength = 100;
        private const int productionCompanyLength = 100;
        private const int copyrightLength = 255;
        private const int productionIdLength = 10;
        #endregion

        #region Fields
        private string crid;
        private string isan;
        private string upc;
        private string subTitle;
        private int? durationSecs;
        private string productionCompany;
        private int? spokenLanguage;
        private int? episodeNumber = 0;
        private string productionId;

        //List of relationships that flow to this media from other media
        private List<MediaRelationship> reverseRelationships = new List<MediaRelationship>();
        
        private InsertDataChangeType modified = InsertDataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        private Video(SqlDataReader reader) : base(reader)
        {
            reader.NextResult();
            if (reader.Read())
            {                
                this.crid               = SqlHelper.GetNullableString( reader, "crid" );
                this.isan               = SqlHelper.GetNullableString( reader, "isan" );
                this.upc                = SqlHelper.GetNullableString( reader, "upc" );
                this.subTitle           = SqlHelper.GetNullableString( reader, "subTitle" );
                this.durationSecs       = SqlHelper.GetNullableInt32( reader, "durationSecs" );
                this.productionCompany  = SqlHelper.GetNullableString( reader, "productionCompany" );
                this.spokenLanguage     = SqlHelper.GetNullableInt32( reader, "spokenLanguage" );
                this.episodeNumber      = SqlHelper.GetNullableInt32( reader, "episodeNumber");
                this.productionId       = SqlHelper.GetNullableString( reader, "productionId" );
            }

            //Initialize relationship
            reader.NextResult();
            while (reader.Read())
            {
                reverseRelationships.Add(new MediaRelationship(reader));
            }
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public Video()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the Crid of this video content
        /// </summary>
        /// <remarks>
        /// http://en.wikipedia.org/wiki/Crid
        /// </remarks>
        public string Crid
        {
            get
            {
                return this.crid;
            }
            set
            {
                if (!String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, cridLength, "Crid", "Crid");
                this.crid = value;
            }
        }

        /// <summary>
        /// Gets or sets the ISAN of this video content 
        /// </summary>
        /// <remarks>
        /// http://en.wikipedia.org/wiki/ISAN
        /// </remarks>
        public string Isan
        {
            get
            {
                return this.isan;
            }
            set
            {
                if (!String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, isanLength, "Isan", "Isan");
                this.isan = value;
            }
        }

        /// <summary>
        /// Gets or sets the UPC of this video content 
        /// </summary>
        /// <remarks>
        /// http://en.wikipedia.org/wiki/Universal_Product_Code
        /// </remarks>
        public string Upc
        {
            get
            {
                return this.upc;
            }
            set
            {
                if (!String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, upcLength, "Upc", "Upc");
                this.upc = value;
            }
        }

        /// <summary>
        /// Gets or sets the Subtitle of this video content
        /// </summary>
        public string Subtitle
        {
            get
            {
                return this.subTitle;
            }
            set
            {
                if (!String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, subtitleLength, "Subtitle", "Subtitle");
                this.subTitle = value;
            }
        }

        /// <summary>
        /// Gets or sets the duratoin (in seconds) of the video file
        /// </summary>
        public int? Duration
        {
            get
            {
                return this.durationSecs;
            }
            set
            {
                this.durationSecs = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of the company that produced the video content
        /// </summary>
        public string ProductionCompany
        {
            get
            {
                return this.productionCompany;
            }
            set
            {
                if (!String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, productionCompanyLength, "ProductionCompany", "ProductionCompany");
               this.productionCompany = value;
            }
        }

        /// <summary>
        /// Gets or sets the SpokenLanguage message on the video content
        /// </summary>
        public int? SpokenLanguage
        {
            get
            {
                return this.spokenLanguage;
            }
            set
            {
                if (value.HasValue)
                {
                    if (Locale.Get(value.Value) == null)
                        throw new ArgumentException(String.Format("Invalid Lcid {0}.", value));
                }
                this.spokenLanguage = value;
            }
        }


        /// <summary>
        /// If this video is an tv episode, gets or sets the episode number
        /// </summary>
        public int? EpisodeNumber
        {
            get
            {
                return this.episodeNumber;
            }
            set
            {
                this.episodeNumber = value;
            }
        }

        /// <summary>
        /// Gets or sets the list of MediaRelationships that relate other media to this media
        /// </summary>
        public MediaRelationship[] ReverseRelationships
        {
            get
            {
                return this.reverseRelationships.ToArray();
            }
            set
            {
                this.reverseRelationships.Clear();
                if (value != null)
                    this.reverseRelationships.AddRange(value);
            }
        }

        /// <summary>
        /// If this video is an tv episode, gets or sets the production id
        /// </summary>
        public String ProductionId
        {
            get
            {
                return this.productionId;
            }
            set
            {
                Validate.IsNotLongerThan( value, productionIdLength, "ProductionId", "ProductionId");
                this.productionId = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        override public InsertDataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
                base.Modified = value;
            }
        }        
        #endregion

        #region Methods
        /// <summary>
        /// Gets the full Video object from the database for the given id.
        /// </summary>
        /// <param name="id">The id of the video to get.</param>
        /// <returns>The Video object for the given id.</returns>
        public static Video Get(Guid id)
        {
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "VideoGet",
                        id))
                {
                    if (reader.Read())
                        return new Video(reader);
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "VideoGet");
                throw;
            }
            return null;
        }

        /// <summary>
        /// Saves changes made to the given Video object to the database.
        /// </summary>
        public static void Save(Video video)
        {
            if (video == null)
            {
                throw new ArgumentNullException("Cannot save null video");
            }

            using (Serialization serializer = new Serialization())
            {
                serializer.SerializeStartElement("Data");
                video.Serialize(serializer);
                serializer.SerializeEndElement();
                Video.Save(serializer.ResultXml);
            }            
        }

        /// <summary>
        /// Saves changes made to the given Video object specified as xml.
        /// </summary>
        /// <param name="xmlVideo">Video data to be save to the database.</param>
        public static void Save(string xmlVideo)
        {
            try
            {
                #if DEBUG
                //Validate.IsValidXml(xmlVideo, @"d:\corext\ems\main_dev\private\common\catalog\XSD\video.xsd");
                //File.WriteAllText(@"d:\temp\video.xml", xmlVideo);
                #endif
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "VideoSave",
                        xmlVideo);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "VideoSave");
                throw;
            }
        }

        /// <summary>
        /// Serialize the Video object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public override void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                //Video
                context.SerializeStartElement("Video");
                context.SerializeDatabaseOperation(this.modified);

                //Call base class to serialize media.
                base.Serialize(context);

                context.SerializeElement("videoMediaId", this.Id);
                context.SerializeElement("crid", this.crid);
                context.SerializeElement("isan", this.isan);
                context.SerializeElement("upc", this.upc);
                context.SerializeElement("subTitle", this.subTitle);
                context.SerializeElement("durationSecs", this.durationSecs);
                context.SerializeElement("productionCompany", this.productionCompany);
                context.SerializeElement("spokenLanguage", this.spokenLanguage);

                //VideoEpisode
                if (this.episodeNumber > 0)
                {
                    context.SerializeStartElement("VideoEpisode");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("videoMediaId", this.Id);
                    context.SerializeElement("episodeNumber", this.episodeNumber);
                    context.SerializeElement("productionId", this.productionId);
                    context.SerializeEndElement();
                }
                
                // Serialize the reversed relationships. These will be saved along with 
                // other relationships that are serialized in the base class
                foreach (MediaRelationship relationship in reverseRelationships)
                {
                    relationship.MediaId = relationship.RelatedMediaId;
                    relationship.RelatedMediaId = this.Id;
                    relationship.Serialize(context);
                }
                
                context.SerializeEndElement();
            }
            else
            {
                //If this video series is to be added/deleted; mark all children to be added/deleted.
                if (this.modified == InsertDataChangeType.Add)
                {
                    this.SetModified(this.modified, true);
                }

                //Call base class to serialize media.
                base.Serialize(context);

                if (modified != InsertDataChangeType.None)
                {
                    //Video
                    context.SerializeStartElement("Video");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("videoMediaId", this.Id);
                    context.SerializeElement("crid", this.crid);
                    context.SerializeElement("isan", this.isan);
                    context.SerializeElement("upc", this.upc);
                    context.SerializeElement("subTitle", this.subTitle);
                    context.SerializeElement("durationSecs", this.durationSecs);
                    context.SerializeElement("productionCompany", this.productionCompany);
                    context.SerializeElement("spokenLanguage", this.spokenLanguage);
                    context.SerializeEndElement();

                    //VideoEpisode
                    if (this.episodeNumber > 0)
                    {
                        context.SerializeStartElement("VideoEpisode");
                        context.SerializeDatabaseOperation(this.modified);
                        context.SerializeElement("videoMediaId", this.Id);
                        context.SerializeElement("episodeNumber", this.episodeNumber);
                        context.SerializeElement("productionId", this.productionId);
                        context.SerializeEndElement();
                    }

                    // Serialize the reversed relationships. These will be saved along with 
                    // other relationships that are serialized in the base class
                    foreach (MediaRelationship relationship in reverseRelationships)
                    {
                        relationship.MediaId = relationship.RelatedMediaId;
                        relationship.RelatedMediaId = this.Id;
                        relationship.Serialize(context);
                    }
                }
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public override void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                // Call Deserialize for base object MediaData
                XmlNode child = node.SelectSingleNode("child::MediaData");
                if (child != null) base.Deserialize(child);

                attr = node.SelectSingleNode("child::crid");
                if (null != attr) this.crid = attr.InnerText;

                attr = node.SelectSingleNode("child::isan");
                if (null != attr) this.isan = attr.InnerText;

                attr = node.SelectSingleNode("child::upc");
                if (null != attr) this.upc = attr.InnerText;

                attr = node.SelectSingleNode("child::subTitle");
                if (null != attr) this.subTitle = attr.InnerText;

                attr = node.SelectSingleNode("child::durationSecs");
                if (null != attr) this.durationSecs = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::productionCompany");
                if (null != attr) this.productionCompany = attr.InnerText;

                attr = node.SelectSingleNode("child::spokenLanguage");
                if (null != attr) this.spokenLanguage = Serialization.DeserializeIntElement(attr.InnerText);
                
                child = node.SelectSingleNode("child::VideoEpisode");
                if (child != null)
                {
                    attr = child.SelectSingleNode("child::videoMediaId");
                    if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                    attr = child.SelectSingleNode("child::episodeNumber");
                    if (null != attr) this.episodeNumber = Serialization.DeserializeIntElement(attr.InnerText);

                    attr = child.SelectSingleNode("child::productionId");
                    if (null != attr) this.productionId = attr.InnerText;
                }
                
                XmlNodeList mediaRelationships = node.SelectNodes("child::MediaRelationship");
                foreach (XmlNode relationship in mediaRelationships)
                {
                    MediaRelationship mediaRelation = new MediaRelationship();
                    mediaRelation.Deserialize(relationship);
                    this.reverseRelationships.Add(mediaRelation);
                }

            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public override void SetModified(InsertDataChangeType type, bool cascade)
        {
            base.SetModified(type, cascade);
            this.modified = type;
            if (cascade)
            {
                foreach (MediaRelationship relationship in reverseRelationships)
                {
                    relationship.SetModified((DataChangeType)type, cascade);
                }
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\Validate.cs ===
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Schema;



namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Validate helps the entire class library to throw consistently typed and formatted exception when validating common data types.
    /// </summary>
    internal static class Validate
    {
        //minimum valid sql datetime value
        static readonly DateTime MinValidSqlDatetime = new DateTime(1753, 1, 1, 0, 0, 0, DateTimeKind.Utc);

        //These constants should match storage limits.
        private const uint MaximumNameLength = 50;
        private const uint MaximumDescriptionLength = 4000;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsNotNull(object value, string argumentName, string paramName)
        {
            if (value == null)
            {
                throw new ArgumentNullException(paramName, string.Format(CultureInfo.InvariantCulture, "{0} is null.", argumentName));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsNotEmpty(string value, string argumentName, string paramName)
        {
            if (String.IsNullOrEmpty(value))
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is Null/Empty.", argumentName), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsNotEmpty(Guid value, string argumentName, string paramName)
        {
            if (value == Guid.Empty)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is Guid.Empty.", argumentName), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsNotAllWhitespace(string value, string argumentName, string paramName)
        {
            if ((value == null) || (value.Length == 0))
            {
                return;
            }
            if (value.Trim().Length == 0)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is all whitespace.", argumentName), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsNotEmptyOrAllWhitespace(string value, string argumentName, string paramName)
        {
            if (value == null)
            {
                return;
            }
            if (value.Trim().Length == 0)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is string.Empty or all whitespace.", argumentName), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void DoesNotStartOrEndWithWhitespace(string value, string argumentName, string paramName)
        {
            if (value == null)
            {
                return;
            }
            if (value.Trim().Length != value.Length)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} starts or ends with whitespace.", argumentName), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="length"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsExactLength(string value, uint length, string argumentName, string paramName)
        {
            if (value == null)
            {
                return;
            }
            if (value.Length != length)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is not {1} characters.", argumentName, length), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="maxLength"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsNotLongerThan(string value, uint maxLength, string argumentName, string paramName)
        {
            if (value == null)
            {
                return;
            }
            if (value.Length > maxLength)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is longer than {1} characters.", argumentName, maxLength), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="dateTime"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsValidDateTime(DateTime dateTime, string argumentName, string paramName)
        {
            //IsUtcDateTime(dateTime, argumentName, paramName);
            IsValidSqlDateTime(dateTime, argumentName, paramName);
        }
        /// <summary>
        /// Validates the Datetime to check for SQL max / min date and replace it in case the date is greater than SQL Max/Min date
        /// </summary>
        /// <param name="dateTime"></param>
        public static void ValidateDate(ref DateTime dateTime)
        {
            if (dateTime > Constants.CatalogMaxDate)
            {
                dateTime = Constants.CatalogMaxDate;
            }
            if (dateTime < Constants.CatalogMinDate)
            {
                dateTime = Constants.CatalogMinDate;
            }
        }
        /// <summary>
        /// Validates the Datetime to check for SQL max / min date and replace it in case the date is greater than SQL Max/Min date
        /// </summary>
        /// <param name="dateTime"></param>
        public static void ValidateDate(ref DateTime? dateTime)
        {
            if (dateTime.HasValue)
            {
                if (dateTime.Value > Constants.CatalogMaxDate)
                {
                    dateTime = Constants.CatalogMaxDate;
                }
                if (dateTime.Value < Constants.CatalogMinDate)
                {
                    dateTime = Constants.CatalogMinDate;
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="dateTime"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsValidDateTime(DateTime? dateTime, string argumentName, string paramName)
        {
            if (dateTime.HasValue)
            {
                IsValidDateTime(dateTime.Value, argumentName, paramName);
            }
        }

        private static void IsValidSqlDateTime(DateTime dateTime, string argumentName, string paramName)
        {
            if (dateTime < MinValidSqlDatetime)
            {
                //TODO: Should this be some kind of overflow exception? format exception?
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} with value {1} is outside the range of SQL date/time.", argumentName, dateTime), paramName);
            }
        }

        private static void IsUtcDateTime(DateTime dateTime, string argumentName, string paramName)
        {
            if ((dateTime.Kind != DateTimeKind.Utc))
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is DateTimeKind.{1}.", argumentName, dateTime.Kind), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="minValue"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsLessThan(int value, int minValue, string argumentName, string paramName)
        {
            if (value < minValue)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is less than {1}.", argumentName, minValue), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="minValue"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsLessThan(long value, int minValue, string argumentName, string paramName)
        {
            if (value < minValue)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is less than {1}.", argumentName, minValue), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="minValue"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        [SuppressMessage("Microsoft.Performance", "CA1811")]	//although not yet called in the assembly, this method is here for completeness.
        public static void IsLessThanOrEqual(int value, int minValue, string argumentName, string paramName)
        {
            if (value <= minValue)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is less than or equal to {1}.", argumentName, minValue), paramName);
            }
        }

        /// <summary>
        /// Verifies that the value IS greater than or equal to the max value. If it is not, an exception is thrown
        /// </summary>
        /// <param name="value">The value to validate</param>
        /// <param name="minValue">The value to compare to</param>
        /// <param name="argumentName">The argument name</param>
        /// <param name="paramName">The param name</param>
        [SuppressMessage("Microsoft.Performance", "CA1811")]	//although not yet called in the assembly, this method is here for completeness.
        public static void IsLessThanOrEqual(Double value, Double minValue, string argumentName, string paramName)
        {
            if (value > minValue)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is greater than {1} - must be less than or equal to.", argumentName, minValue), paramName);
            }
        }

        /// <summary>
        /// Verifies that the value IS greater than or equal to the max value. If it is not, an exception is thrown
        /// </summary>
        /// <param name="value">The value to validate</param>
        /// <param name="minValue">The value to compare to</param>
        /// <param name="argumentName">The argument name</param>
        /// <param name="paramName">The param name</param>
        [SuppressMessage("Microsoft.Performance", "CA1811")]	//although not yet called in the assembly, this method is here for completeness.
        public static void IsLessThanOrEqual(Decimal value, Decimal minValue, string argumentName, string paramName)
        {
            if (value > minValue)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is greater than {1} - must be less than or equal to.", argumentName, minValue), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="maxValue"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        public static void IsGreaterThan(int value, int maxValue, string argumentName, string paramName)
        {
            if (value > maxValue)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is greater than {1}.", argumentName, maxValue), paramName);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="maxValue"></param>
        /// <param name="argumentName"></param>
        /// <param name="paramName"></param>
        [SuppressMessage("Microsoft.Performance", "CA1811")]	//although not yet called in the assembly, this method is here for completeness.
        public static void IsGreaterThanOrEqual(int value, int maxValue, string argumentName, string paramName)
        {
            if (value >= maxValue)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is greater than or equal to {1}.", argumentName, maxValue), paramName);
            }
        }

        /// <summary>
        /// Verifies that the value IS greater than or equal to the max value. If it is not, an exception is thrown
        /// </summary>
        /// <param name="value">The value to validate</param>
        /// <param name="maxValue">The value to compare to</param>
        /// <param name="argumentName">The argument name</param>
        /// <param name="paramName">The param name</param>
        [SuppressMessage("Microsoft.Performance", "CA1811")]	//although not yet called in the assembly, this method is here for completeness.
        public static void IsGreaterThanOrEqual(Double value, Double maxValue, string argumentName, string paramName)
        {
            if (value < maxValue)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is less than {1} - must be greater than or equal to.", argumentName, maxValue), paramName);
            }
        }

        /// <summary>
        /// Verifies that the value IS greater than or equal to the max value. If it is not, an exception is thrown
        /// </summary>
        /// <param name="value">The value to validate</param>
        /// <param name="maxValue">The value to compare to</param>
        /// <param name="argumentName">The argument name</param>
        /// <param name="paramName">The param name</param>
        [SuppressMessage("Microsoft.Performance", "CA1811")]	//although not yet called in the assembly, this method is here for completeness.
        public static void IsGreaterThanOrEqual(Decimal value, Decimal maxValue, string argumentName, string paramName)
        {
            if (value < maxValue)
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is less than {1} - must be greater than or equal to.", argumentName, maxValue), paramName);
            }
        }

        /// <summary>
        /// Verifies that the value IS greater than or equal to the max value. If it is not, an exception is thrown
        /// </summary>
        /// <param name="value">The value to validate</param>
        /// <param name="maxValue">The value to compare to</param>
        /// <param name="argumentName">The argument name</param>
        /// <param name="paramName">The param name</param>
        [SuppressMessage("Microsoft.Performance", "CA1811")]	//although not yet called in the assembly, this method is here for completeness.
        public static void IsGreaterThanOrEqual(Decimal? value, Decimal? maxValue, string argumentName, string paramName)
        {
            if (( value.HasValue ) && (value < maxValue))
            {
                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture, "{0} is less than {1} - must be greater than or equal to.", argumentName, maxValue), paramName);
            }
        }

        /// <summary>
        /// Validate whether the specified XML segment validates against the specified XSD.
        /// </summary>
        /// <param name="xmlData">Xml data to be validated</param>
        /// <param name="schemaPath">The xsd file name/path</param>
        public static void IsValidXml(string xmlData, string schemaPath)
        {
            //Initialize XmlReader settings
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.Schemas.Add(null, schemaPath);
            settings.ValidationType = ValidationType.Schema;
            settings.ValidationEventHandler += new ValidationEventHandler(XmlValidationHandler);

            //Initialize XmlReader
            TextReader txtReader = new StringReader(xmlData);
            XmlReader xmlReader = XmlReader.Create(txtReader, settings);

            //Validate Xml
            while (xmlReader.Read()) { }
        }

        internal static void XmlValidationHandler(object sender, ValidationEventArgs args)
        {
            throw new XmlException(
                String.Format("Xml {0}: {1}.",
                ((args.Severity == XmlSeverityType.Warning) ? "warning" : "error"),
                args.Exception));
        }

        internal static void IsValidName(string value, string argumentName, string paramName)
        {
            Validate.IsNotNull(value, argumentName, paramName);
            Validate.IsNotLongerThan(value, MaximumNameLength, argumentName, paramName);
        }

        internal static void IsValidDescription(string value, string argumentName, string paramName)
        {
            Validate.IsNotNull(value, argumentName, paramName);
            Validate.IsNotLongerThan(value, MaximumDescriptionLength, argumentName, paramName);
        }
        /// <summary>
        /// Validates the URL for null and incorrect Format
        /// </summary>
        /// <param name="value"></param>
        /// <param name="argumentName"></param>
        /// <param name="maxlength"></param>
        /// <param name="paramName"></param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="UriFormatException"></exception>
        internal static void IsValidURL(string value, uint maxlength, string argumentName, string paramName)
        {
            try
            {
                Uri uri = new Uri(value);
                Validate.IsNotLongerThan(value, maxlength, argumentName, paramName);
            }
            catch (ArgumentNullException ex)
            {
                throw new ArgumentNullException("The url string is null", ex);
            }
            catch (UriFormatException)
            {
                throw new UriFormatException("The url is in incorrect format");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoDefinition.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Represents a video definition type with its localized textual name
    /// </summary>
    public class VideoDefinition : Utils.IKeyed<Int32>
    {
        #region Fields
        private Int32 id;
        private String name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,VideoDefinition> VideoDefinitionCache = new Utils.KeyedCache<Int32,VideoDefinition>(
                        new Utils.KeyedCache<Int32,Catalog.VideoDefinition>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Default constructor required for SOAP.
        /// </summary>
        public VideoDefinition()
        {
        }

        /// <summary>
        /// Initialize a new instance of the ImageFormat class given a sql data reader
        /// </summary>
        /// <param name="reader"></param>
        public VideoDefinition(SqlDataReader reader)
        {
            id = reader.GetInt32(reader.GetOrdinal("videoDefinitionId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }

        #endregion

        #region Properties
        /// <summary>
        /// The id for the video definition
        /// </summary>
        public Int32 Id
        {
            get { return id; }
            set { id = value; }
        }

        /// <summary>
        /// The name by which the video definition is known - for readability purpose only
        /// </summary>
        public String Name
        {
            get
            {
                return name;
            }
            
            set
            {
                if ( String.IsNullOrEmpty( value ))
                {
                    throw new ArgumentNullException( "The name of a VideoDefinition cannot be null or empty." );
                }
                name = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Gets a VideoDefinition for given a lcid.
        /// </summary>
        /// <param name="id">The id of the VideoDefinition to retrieve</param>
        /// <returns>The id of the VideoDefinition</returns>
        internal static VideoDefinition Get(int id)
        {
            return VideoDefinitionCache.Get(id);
        }

        /// <summary>
        /// Gets all VideoDefinition in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<VideoDefinition> Get()
        {
            return VideoDefinitionCache.Get();
        }

        /// <summary>
        /// Gets all VideoDefinition in the catalog.
        /// </summary>
        /// <returns></returns>
        private static List<VideoDefinition> GetData()
        {
            List<VideoDefinition> videoDefinitions = new List<VideoDefinition>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "VideoDefinitionGet"
                    ))
            {
                while( reader.Read() )
                {
                    videoDefinitions.Add( new VideoDefinition( reader ));
                }
            }
            return videoDefinitions;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoInstance.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines VideoInstance data, and creation of the VideoInstance class.
    /// </summary>
    public class VideoInstance : MediaInstance
    {
        #region Constants
        private const int audioChannelLength = 50;
        private const int videoAspectRatioLength = 50;
        private const int videoResolutionLength = 50;
        #endregion

        #region Fields
        private bool isDRM;
        private int audioEncodingId;
        private string audioChannel;
        private int? audioSamplingRate;
        private bool audioCC;
        private int? burntInSubtitleLcid;
        private int? audioBitRate;
        private int videoDefinitionId;
        private string videoAspectRatio;
        private string videoResolution;
        private int videoEncodingId;
        private int videoBitRate;
        private int? videoFrame;
        private List<VideoAudioTrackLanguage> audioTrackLanguages = new List<VideoAudioTrackLanguage>();
        private List<VideoFile> videoFiles = new List<VideoFile>();
        private List<VideoSubtitle> subtitles = new List<VideoSubtitle>();
        private InsertDataChangeType modified = InsertDataChangeType.None;
        private bool enabled;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal VideoInstance(SqlDataReader reader)
            : base(reader)
        {
            //Initialzie VideoInstance
            this.isDRM = (reader.GetByte(reader.GetOrdinal("isDRM")) == 1);
            this.audioEncodingId = reader.GetInt32(reader.GetOrdinal("audioEncodingId"));
            this.audioChannel = reader.IsDBNull(reader.GetOrdinal("audioChannel"))? string.Empty : reader.GetString(reader.GetOrdinal("audioChannel"));
            this.audioSamplingRate = reader.IsDBNull(reader.GetOrdinal("audioSamplingRate")) ? -1 : reader.GetInt32(reader.GetOrdinal("audioSamplingRate"));
            this.audioCC = reader.IsDBNull(reader.GetOrdinal("audioCC"))? false : (reader.GetByte(reader.GetOrdinal("audioCC")) == 1);
            this.burntInSubtitleLcid = reader.IsDBNull(reader.GetOrdinal("burntInSubtitleLcid"))? -1 : reader.GetInt32(reader.GetOrdinal("burntInSubtitleLcid"));
            this.audioBitRate = reader.IsDBNull(reader.GetOrdinal("audioBitRate")) ? -1 : reader.GetInt32(reader.GetOrdinal("audioBitRate"));
            this.videoDefinitionId = reader.GetInt32(reader.GetOrdinal("videoDefinitionId"));
            this.videoAspectRatio = reader.GetString(reader.GetOrdinal("videoAspectRatio"));
            this.videoResolution = reader.GetString(reader.GetOrdinal("videoResolution"));
            this.videoEncodingId = reader.GetInt32(reader.GetOrdinal("videoEncodingId"));
            this.videoBitRate = reader.GetInt32(reader.GetOrdinal("videoBitRate"));
            this.videoFrame = reader.IsDBNull(reader.GetOrdinal("videoFrame")) ? -1 : reader.GetInt32(reader.GetOrdinal("videoFrame"));
            this.enabled = (reader.GetByte(reader.GetOrdinal("enabled")) == 1);

            //Initialize audioTrackLanguages
            reader.NextResult();
            while (reader.Read())
            {
                this.audioTrackLanguages.Add(new VideoAudioTrackLanguage(reader));
            }

            //Initialize videoFiles
            reader.NextResult();
            while (reader.Read())
            {
                this.videoFiles.Add(new VideoFile(reader));
            }

            //Initialize videoSubtitles
            reader.NextResult();
            while (reader.Read())
            {
                this.subtitles.Add(new VideoSubtitle(reader));
            }
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public VideoInstance()
        {
        }

        /// <summary>
        /// Initializes a new instance of the VideoInstance class with minimally required data, 
        /// and id to be assigned by the system.
        /// </summary>
        /// <param name="isAcquirable"></param>
        /// <param name="isAdSupported"></param>
        /// <param name="isPreview"></param>
        /// <param name="isDRM"></param>
        /// <param name="audioEncodingId"></param>
        /// <param name="audioChannel"></param>
        /// <param name="audioSamplingRate"></param>
        /// <param name="audioCC"></param>
        /// <param name="burntInSubtitleLcid"></param>
        /// <param name="audioBitRate"></param>
        /// <param name="videoDefinitionId"></param>
        /// <param name="videoAspectRatio"></param>
        /// <param name="videoResolution"></param>
        /// <param name="videoEncodingId"></param>
        /// <param name="videoBitRate"></param>
        /// <param name="videoFrame"></param>
        /// <param name="enabled"></param>
        public VideoInstance(
                    bool isAcquirable,
                    bool isAdSupported,
                    bool isPreview,
                    bool isDRM,
                    int audioEncodingId,
                    string audioChannel,
                    int? audioSamplingRate,
                    bool audioCC,
                    int? burntInSubtitleLcid,
                    int? audioBitRate,
                    int videoDefinitionId,
                    string videoAspectRatio,
                    string videoResolution,
                    int videoEncodingId,
                    int videoBitRate,
                    int? videoFrame,
                    bool enabled) 
            : base(Guid.NewGuid(), isAcquirable, isAdSupported, isPreview) 
        {
            if (!String.IsNullOrEmpty(audioChannel))
                Validate.IsNotLongerThan(audioChannel, audioChannelLength, "audioChannel", "audioChannel");
            Validate.IsNotNull(videoAspectRatio, "videoAspectRatio", "videoAspectRation");
            Validate.IsNotLongerThan(videoAspectRatio, videoAspectRatioLength, "videoAspectRatio", "videoAspectRatio");
            Validate.IsNotNull(videoResolution, "videoResolution", "videoResolution");
            Validate.IsNotLongerThan(videoResolution, videoResolutionLength, "videoResolution", "videoResolution");
            
            this.isDRM = isDRM;
            this.audioEncodingId = audioEncodingId;
            this.audioChannel = audioChannel;
            this.audioSamplingRate = audioSamplingRate;
            this.audioCC = audioCC;
            this.burntInSubtitleLcid = burntInSubtitleLcid;
            this.audioBitRate = audioBitRate;
            this.videoDefinitionId = videoDefinitionId;
            this.videoAspectRatio = videoAspectRatio;
            this.videoResolution = videoResolution;
            this.videoEncodingId = videoEncodingId;
            this.videoBitRate = videoBitRate;
            this.videoFrame = videoFrame;
            this.enabled = enabled;

            this.modified = InsertDataChangeType.Update;
        }

        /// <summary>
        /// Initializes a new instance of the VideoInstance class with minimally required data.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="isAcquirable"></param>
        /// <param name="isAdSupported"></param>
        /// <param name="isPreview"></param>
        /// <param name="isDRM"></param>
        /// <param name="audioEncodingId"></param>
        /// <param name="audioChannel"></param>
        /// <param name="audioSamplingRate"></param>
        /// <param name="audioCC"></param>
        /// <param name="burntInSubtitleLcid"></param>
        /// <param name="audioBitRate"></param>
        /// <param name="videoDefinitionId"></param>
        /// <param name="videoAspectRatio"></param>
        /// <param name="videoResolution"></param>
        /// <param name="videoEncodingId"></param>
        /// <param name="videoBitRate"></param>
        /// <param name="videoFrame"></param>
        /// <param name="enabled"></param>
        public VideoInstance(
                    Guid id,
                    bool isAcquirable,
                    bool isAdSupported,
                    bool isPreview,
                    bool isDRM,
                    int audioEncodingId,
                    string audioChannel,
                    int? audioSamplingRate,
                    bool audioCC,
                    int? burntInSubtitleLcid,
                    int? audioBitRate,
                    int videoDefinitionId,
                    string videoAspectRatio,
                    string videoResolution,
                    int videoEncodingId,
                    int videoBitRate,
                    int? videoFrame,
                    bool enabled)
            : base(id, isAcquirable, isAdSupported, isPreview)
        {
            if (!String.IsNullOrEmpty(audioChannel))
                Validate.IsNotLongerThan(audioChannel, audioChannelLength, "audioChannel", "audioChannel");
            Validate.IsNotNull(videoAspectRatio, "videoAspectRatio", "videoAspectRation");
            Validate.IsNotLongerThan(videoAspectRatio, videoAspectRatioLength, "videoAspectRatio", "videoAspectRatio");
            Validate.IsNotNull(videoResolution, "videoResolution", "videoResolution");
            Validate.IsNotLongerThan(videoResolution, videoResolutionLength, "videoResolution", "videoResolution");

            this.isDRM = isDRM;
            this.audioEncodingId = audioEncodingId;
            this.audioChannel = audioChannel;
            this.audioSamplingRate = audioSamplingRate;
            this.audioCC = audioCC;
            this.burntInSubtitleLcid = burntInSubtitleLcid;
            this.audioBitRate = audioBitRate;
            this.videoDefinitionId = videoDefinitionId;
            this.videoAspectRatio = videoAspectRatio;
            this.videoResolution = videoResolution;
            this.videoEncodingId = videoEncodingId;
            this.videoBitRate = videoBitRate;
            this.videoFrame = videoFrame;
            this.enabled = enabled;

            this.modified = InsertDataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets whether this video instance is DRM encoded.
        /// </summary>
        public bool IsDRM
        {
            get
            {
                return this.isDRM;
            }
            set
            {
                this.isDRM = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of the audio encoding.
        /// </summary>
        public int AudioEncodingId
        {
            get
            {
                return this.audioEncodingId;
            }
            set
            {
                if (AudioEncoding.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalide AudioEncodingId value {0}", value)); 
                this.audioEncodingId = value;
            }
        }

        /// <summary>
        /// Gets or sets the audio channel.
        /// </summary>
        public string AudioChannel
        {
            get
            {
                return this.audioChannel;
            }
            set
            {
                if (String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, audioChannelLength, "AudioChannel", "AudioChannel");
                this.audioChannel = value;
            }
        }

        /// <summary>
        /// Gets or sets the audio sample rate.
        /// </summary>
        public int? AudioSamplingRate
        {
            get
            {
                return this.audioSamplingRate;
            }
            set
            {
                this.audioSamplingRate = value;
            }
        }

        /// <summary>
        /// Gets or sets whether this video instance has closed caption.
        /// </summary>
        public bool AudioCC
        {
            get
            {
                return this.audioCC;
            }
            set
            {
                this.audioCC = value;
            }
        }

        /// <summary>
        /// Gets or sets the language lcid of the burnt in subtitle.
        /// </summary>
        public int? BurntInSubtitleLcid
        {
            get
            {
                return this.burntInSubtitleLcid;
            }
            set
            {
                this.burntInSubtitleLcid = value;
            }
        }

        /// <summary>
        /// Gets or sets the audio bit rate for this video instance.
        /// </summary>
        public int? AudioBitRate
        {
            get
            {
                return this.audioBitRate;
            }
            set
            {
                this.audioBitRate = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of video definition.
        /// </summary>
        public int VideoDefinitionId
        {
            get
            {
                return this.videoDefinitionId;
            }
            set
            {
                if (VideoDefinition.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid VideoDefinitionId value {0}.", value));
                this.videoDefinitionId = value;
            }
        }

        /// <summary>
        /// Gets or sets the video aspect ratio.
        /// </summary>
        public string VideoAspectRatio
        {
            get
            {
                return this.videoAspectRatio;
            }
            set
            {
                Validate.IsNotEmpty(value, "VideoAspectRatio", "VideoAspectRatio");
                Validate.IsNotLongerThan(value, videoAspectRatioLength, "VideoAspectRatio", "VideoAspectRatio");
                this.videoAspectRatio = value;
            }
        }

        /// <summary>
        /// Gets or sets the video resolution.
        /// </summary>
        public string VideoResolution
        {
            get
            {
                return this.videoResolution;
            }
            set
            {
                Validate.IsNotLongerThan(value, videoResolutionLength, "VideoResolution", "VideoResolution");
                this.videoResolution = value;
            }
        }

        /// <summary>
        /// Gets or sets the id of the video encoding for this video instance.
        /// </summary>
        public int VideoEncodingId
        {
            get
            {
                return this.videoEncodingId;
            }
            set
            {
                if (VideoEncoding.Get(value) == null)
                    throw new ArgumentException(String.Format("Invalide VideoEncodingId {0}.", value));
                this.videoEncodingId = value;
            }
        }

        /// <summary>
        /// Gets or sets the video bit rate.
        /// </summary>
        public int VideoBitRate
        {
            get
            {
                return this.videoBitRate;
            }
            set
            {
                this.videoBitRate = value;
            }
        }

        /// <summary>
        /// Gets or sets the video frame for this video instance.
        /// </summary>
        public int? VideoFrame
        {
            get
            {
                return this.videoFrame;
            }
            set
            {
                this.videoFrame = value;
            }
        }

        /// <summary>
        /// Gets or sets the array of audio tracking language lcids.
        /// </summary>
        public VideoAudioTrackLanguage[] AudioTrackLanguages
        {
            get
            {
                return this.audioTrackLanguages.ToArray();
            }
            set
            {
                this.audioTrackLanguages.Clear();
                if (value != null)
                    this.audioTrackLanguages.AddRange(value);
            }
        }


        /// <summary>
        /// Gets or sets the array of audio tracking language lcids.
        /// </summary>
        public VideoSubtitle[] Subtitles
        {
            get
            {
                return this.subtitles.ToArray();
            }
            set
            {
                this.subtitles.Clear();
                if (value != null)
                    this.subtitles.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets the array of VideoFiles associates with this video instance.
        /// </summary>
        public VideoFile[] VideoFiles
        {
            get
            {
                return this.videoFiles.ToArray();
            }
            set
            {
                this.videoFiles.Clear();
                if (value != null)
                    this.videoFiles.AddRange(value);
            }
        }

        /// <summary>
        /// Gets or sets whether or not this video instance is enabled or not
        /// </summary>
        public bool Enabled
        {
            get
            {
                return this.enabled;
            }
            set
            {
                this.enabled = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public override void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("VideoInstance");
                context.SerializeDatabaseOperation(this.modified);

                //Serialize Media record
                base.Serialize(context);

                context.SerializeElement("videoMediaInstanceId", this.Id);
                context.SerializeElement("isDRM", this.isDRM);
                context.SerializeElement("audioEncodingId", this.audioEncodingId);
                context.SerializeElement("audioChannel", this.audioChannel);
                context.SerializeElement("audioSamplingRate", this.audioSamplingRate);
                context.SerializeElement("audioCC", this.AudioCC);
                context.SerializeElement("burntInSubtitleLcid", this.burntInSubtitleLcid);
                context.SerializeElement("audioBitRate", this.audioBitRate);
                context.SerializeElement("videoDefinitionId", this.videoDefinitionId);
                context.SerializeElement("videoAspectRatio", this.videoAspectRatio);
                context.SerializeElement("videoResolution", this.videoResolution);
                context.SerializeElement("videoEncodingId", this.videoEncodingId);
                context.SerializeElement("videoBitRate", this.videoBitRate);
                context.SerializeElement("videoFrame", this.videoFrame);
                context.SerializeElement("enabled", this.enabled);

                //audioTrackLanguages
                foreach (VideoAudioTrackLanguage audioTrackLanguage in this.audioTrackLanguages)
                {
                    audioTrackLanguage.VideoMediaInstanceId = this.Id;
                    audioTrackLanguage.Serialize(context);
                }

                //videoFiles
                foreach (VideoFile videoFile in this.videoFiles)
                {
                    videoFile.VideoMediaInstanceId = this.Id;
                    videoFile.Serialize(context);
                }

                //videoSubtitles
                foreach (VideoSubtitle subtitle in this.subtitles)
                {
                    subtitle.VideoMediaInstanceId = this.Id;
                    subtitle.Serialize(context);
                }                

                context.SerializeEndElement();
            }
            else
            {
                
                //Serialize Media record first
                base.Serialize(context);

                //videoInstance
                if (this.Modified != InsertDataChangeType.None)
                {
                    context.SerializeStartElement("VideoInstance");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("videoMediaInstanceId", this.Id);
                    context.SerializeElement("isDRM", this.isDRM);
                    context.SerializeElement("audioEncodingId", this.audioEncodingId);
                    context.SerializeElement("audioChannel", this.audioChannel);
                    context.SerializeElement("audioSamplingRate", this.audioSamplingRate);
                    context.SerializeElement("audioCC", this.AudioCC);
                    context.SerializeElement("burntInSubtitleLcid", this.burntInSubtitleLcid);
                    context.SerializeElement("audioBitRate", this.audioBitRate);
                    context.SerializeElement("videoDefinitionId", this.videoDefinitionId);
                    context.SerializeElement("videoAspectRatio", this.videoAspectRatio);
                    context.SerializeElement("videoResolution", this.videoResolution);
                    context.SerializeElement("videoEncodingId", this.videoEncodingId);
                    context.SerializeElement("videoBitRate", this.videoBitRate);
                    context.SerializeElement("videoFrame", this.videoFrame);
                    context.SerializeElement("enabled", this.enabled);
                    context.SerializeEndElement();
                }

                //audioTrackLanguages
                foreach (VideoAudioTrackLanguage audioTrackLanguage in this.audioTrackLanguages)
                {
                    audioTrackLanguage.VideoMediaInstanceId = this.Id;
                    audioTrackLanguage.Serialize(context);
                }

                //videoFiles
                foreach (VideoFile videoFile in this.videoFiles)
                {
                    videoFile.VideoMediaInstanceId = this.Id;
                    videoFile.Serialize(context);
                }

                //videoSubtitles
                foreach (VideoSubtitle subtitle in this.subtitles)
                {
                    subtitle.VideoMediaInstanceId = this.Id;
                    subtitle.Serialize(context);
                }
            }            
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public override void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.Modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                XmlNode mediaInstanceNode = node.SelectSingleNode("child::MediaInstance");
                if (mediaInstanceNode != null)
                {
                    base.Deserialize(mediaInstanceNode);
                }

                attr = node.SelectSingleNode("child::videoMediaInstanceId");
                if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::isDRM");
                if (null != attr) this.isDRM = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::audioEncodingId");
                if (null != attr) this.audioEncodingId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::audioChannel");
                if (null != attr) this.audioChannel = attr.InnerText;

                attr = node.SelectSingleNode("child::audioSamplingRate");
                if (null != attr) this.audioSamplingRate = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::audioCC");
                if (null != attr) this.AudioCC = Serialization.DeserializeBoolElement(attr.InnerText);

                attr = node.SelectSingleNode("child::burntInSubtitleLcid");
                if (null != attr) this.burntInSubtitleLcid = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::audioBitRate");
                if (null != attr) this.audioBitRate = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::videoDefinitionId");
                if (null != attr) this.videoDefinitionId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::videoAspectRatio");
                if (null != attr) this.videoAspectRatio = attr.InnerText;

                attr = node.SelectSingleNode("child::videoResolution");
                if (null != attr) this.videoResolution = attr.InnerText;

                attr = node.SelectSingleNode("child::videoEncodingId");
                if (null != attr) this.videoEncodingId = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::videoBitRate");
                if (null != attr) this.videoBitRate = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::videoFrame");
                if (null != attr) this.videoFrame = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::enabled");
                if (null != attr) this.enabled = Serialization.DeserializeBoolElement(attr.InnerText);

                XmlNodeList videoAudioTrackLanguageNodes = node.SelectNodes("child::VideoAudioTrackLanguage");
                foreach (XmlNode videoAudioTrackLanguageNode in videoAudioTrackLanguageNodes)
                {
                    VideoAudioTrackLanguage VTLanguage = new VideoAudioTrackLanguage();
                    VTLanguage.Deserialize(videoAudioTrackLanguageNode);
                    this.audioTrackLanguages.Add(VTLanguage);
                }

                XmlNodeList videoFileNodes = node.SelectNodes("child::VideoFile");
                foreach (XmlNode videoFileNode in videoFileNodes)
                {
                    VideoFile videoFile = new VideoFile();
                    videoFile.Deserialize(videoFileNode);
                    this.videoFiles.Add(videoFile);
                }

                XmlNodeList videoSubtitleNodes = node.SelectNodes("child::VideoSubtitle");
                foreach (XmlNode videoSubtitleNode in videoSubtitleNodes)
                {
                    VideoSubtitle subtitle = new VideoSubtitle();
                    subtitle.Deserialize(videoSubtitleNode);
                    this.subtitles.Add(subtitle);
                }
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public override void SetModified(InsertDataChangeType type, bool cascade)
        {

            base.SetModified(type, cascade);
            this.modified = type;

            if (cascade)
            {
                //audioTrackLanguages
                foreach (VideoAudioTrackLanguage audioTrackLanguage in this.audioTrackLanguages)
                    audioTrackLanguage.SetModified((DataChangeType)type, cascade);

                //videoFiles
                foreach (VideoFile videoFile in this.videoFiles)
                    videoFile.SetModified((DataChangeType)type, cascade);

                //videoSubtitles
                foreach (VideoSubtitle subtitle in this.subtitles)
                    subtitle.SetModified((DataChangeType)type, cascade);
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoAudioTrackLanguage.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines VideoAudioTrackLanguage data, and creation of the VideoAudioTrackLanguage class.
    /// </summary>
    public class VideoAudioTrackLanguage : ICatalogData
    {
        #region Fields
        private Guid videoMediaInstanceId;
        private int lcid;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Contructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal VideoAudioTrackLanguage(SqlDataReader reader)
        {
            this.lcid = reader.GetInt32(reader.GetOrdinal("lcid"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public VideoAudioTrackLanguage()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the VideoAudioTrackLanguagee class.
        /// </summary>
        /// <param name="lcid">The language lcid</param>
        public VideoAudioTrackLanguage(int lcid)
        {
            if (Locale.Get(lcid) == null)
                throw new ArgumentException(string.Format("Invalid lcid value {0}.", lcid));

            this.lcid = lcid;
            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Sets the videoMediaInstanceId that associate with this object.
        /// </summary>
        internal Guid VideoMediaInstanceId
        {
            set
            {
                this.videoMediaInstanceId = value;
            }
        }

        /// <summary>
        /// Gets or sets the language lcid assoicate with this video instance.
        /// </summary>
        public int Lcid
        {
            get
            {
                return this.lcid;
            }
            set
            {
                if (Locale.Get(value) == null)
                    throw new ArgumentException(string.Format("Invalid Lcid value {0}.", value));

                this.lcid = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serialize the Video object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("VideoAudioTrackLanguage");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("videoMediaInstanceId", this.videoMediaInstanceId);
                context.SerializeElement("lcid", this.lcid);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::videoMediaInstanceId");
                if (null != attr) this.videoMediaInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::lcid");
                if (null != attr) this.lcid = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }


        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoFile.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines VideoFile data, and creation of the VideoFile class.
    /// </summary>
    public class VideoFile : ICatalogData
    {
        #region Constants
        private const int fileUrlLength = 1024;
        #endregion

        #region Fields
        private Guid id;
        private Guid videoMediaInstanceId;
        private string fileUrl;
        private Int64 size;
        private int? durationSecs;
        private int fileIndex;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal VideoFile(SqlDataReader reader)
        {
            this.id = reader.GetGuid(reader.GetOrdinal("videoFileId"));
            this.fileUrl = reader.IsDBNull(reader.GetOrdinal("fileUrl"))? string.Empty : reader.GetString(reader.GetOrdinal("fileUrl"));
            this.size = reader.GetInt64(reader.GetOrdinal("size"));
            this.durationSecs = reader.IsDBNull(reader.GetOrdinal("durationSecs")) ? -1 : reader.GetInt32(reader.GetOrdinal("durationSecs"));
            this.fileIndex = reader.GetInt32(reader.GetOrdinal("fileIndex"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public VideoFile()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the VideoFile class.
        /// </summary>
        /// <param name="fileUrl"></param>
        /// <param name="size"></param>
        /// <param name="durationSecs"></param>
        /// <param name="fileIndex"></param>
        public VideoFile(string fileUrl, Int64 size, int? durationSecs, int fileIndex)
        {
            if (!String.IsNullOrEmpty(fileUrl))
                Validate.IsNotLongerThan(fileUrl, fileUrlLength, "fileUrl", "fileUrl");

            this.id = Guid.NewGuid();
            this.fileUrl = fileUrl;
            this.size = size;
            this.durationSecs = durationSecs;
            this.fileIndex = fileIndex;

            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Sets the videoInstanceId that associate with this audioTrackLanguage
        /// </summary>
        internal Guid VideoMediaInstanceId
        {
            set
            {
                this.videoMediaInstanceId = value;
            }
        }

        /// <summary>
        /// The internal id for this video file
        /// </summary>
        public Guid Id
        {
            get
            {
                return this.id;
            }
            set
            {
                this.id = value;
            }
        }

        /// <summary>
        /// The url to the video file
        /// </summary>
        public string FileUrl
        {
            get
            {
                return this.fileUrl;
            }
            set
            {
                if (!String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, fileUrlLength, "FileUrl", "FileUrl");
                this.fileUrl = value;
            }
        }

        /// <summary>
        /// The size, in bytes, of the file
        /// </summary>
         public Int64 Size
        {
            get
            {
                return this.size;
            }
            
            set
            {
                this.size = value;
            }
        }

        /// <summary>
        /// The duration, in seconds, of this file
        /// </summary>
        public int? Duration
        {
            get
            {
                return this.durationSecs;
            }
            
            set
            {
                this.durationSecs = value;
            }
        }

        /// <summary>
        /// The position of this file in the list of all files for the media instance.
        /// The indexes should be zero based
        /// </summary>
        public int Index
        {
            get
            {
                return this.fileIndex;
            }
            set
            {
                this.fileIndex = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("VideoFile");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("videoFileId", this.id);
                context.SerializeElement("videoMediaInstanceId", this.videoMediaInstanceId);
                context.SerializeElement("fileUrl", this.fileUrl);
                context.SerializeElement("size", this.size);
                context.SerializeElement("durationSecs", this.durationSecs);
                context.SerializeElement("fileIndex", this.fileIndex);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::videoFileId");
                if (null != attr) this.id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::videoMediaInstanceId");
                if (null != attr) this.videoMediaInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::fileUrl");
                if (null != attr) this.fileUrl = attr.InnerText;

                attr = node.SelectSingleNode("child::size");
                if (null != attr) this.size = Serialization.DeserializeInt64Element(attr.InnerText);

                attr = node.SelectSingleNode("child::durationSecs");
                if (null != attr) this.durationSecs = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::fileIndex");
                if (null != attr) this.fileIndex = Serialization.DeserializeIntElement(attr.InnerText);
            }
        }


        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoSearch.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define video search response class.
    /// </summary>
    public class VideoSearchResponse : Response
    {
        #region Fields
        private Guid mediaId;
        private string title;
        private string locale;
        private DateTime? availableDate;
        private string visibilityStatus;
        #endregion

        #region Properties
        /// <summary>
        /// Video id
        /// </summary>
        public Guid MediaId
        {
            get 
            { 
                return this.mediaId; 
            }
            set 
            {
                this.mediaId = value;
            }
        }

        /// <summary>
        /// Video title
        /// </summary>
        public string Title
        {
            get 
            { 
                return this.title; 
            }
            set 
            {
                this.title = value;
            }
        }

        /// <summary>
        /// Video title locale
        /// </summary>
        public string Locale
        {
            get 
            { 
                return this.locale; 
            }
            set 
            {
                this.locale = value;
            }
        }

        /// <summary>
        /// The date in which the video is available in the catalog.
        /// </summary>
        public DateTime? AvailableDate
        {
            get 
            { 
                return this.availableDate; 
            }
            set
            {
               this.availableDate = value;
               
            }
        }
        /// <summary>
        /// Gets/Sets the Visibility Status
        /// </summary>
        public string VisibilityStatus
        {
            get
            {
                return this.visibilityStatus;
            }
            set
            {
                this.visibilityStatus = value;
            }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public VideoSearchResponse()
        {
        }

        /// <summary>
        /// Private constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal VideoSearchResponse(SqlDataReader reader)
        {
            this.mediaId = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.title = reader.IsDBNull(reader.GetOrdinal("title")) ? "" : reader.GetString(reader.GetOrdinal("title"));
            this.locale = reader.GetString(reader.GetOrdinal("locale"));
            this.visibilityStatus = reader.GetString(reader.GetOrdinal("VisibilityStatusName"));
            if(!reader.IsDBNull(reader.GetOrdinal("visibilityDate")))
                this.availableDate = reader.GetDateTime(reader.GetOrdinal("visibilityDate"));
        }
        #endregion
    }

    /// <summary>
    /// Define video search request class.
    /// </summary>
    public class VideoSearchRequest : Request
    {
        #region Fields
        private int?        mediaStatusId = null;
        private int?        mediaTypeId = null;
        private Guid?       mediaId = null;
        private string      mediaTitle = null;
        private DateTime?   availableFromDate = null;
        private DateTime?   availableToDate = null;
        private List<int>   categoryIds = new List<int>();
	    private int?        metadataProviderId = null;
        private String      productionId = null;

        /// <summary>
        /// The max allowed length for a production id 
        /// </summary>
        public static readonly UInt32 ProductionIdMaxLength = 10;
        
        #endregion

        #region Properties
        /// <summary>
        /// The id of the provider.
        /// </summary>
        public int? MetadataProviderId
        {
            get
            {
                return this.metadataProviderId;
            }
            set
            {
                this.metadataProviderId = value;
            }
        }
	
        /// <summary>
        /// The id of the media visibility status.
        /// </summary>
        public int? MediaStatusId
        {
            get
            {
                return this.mediaStatusId;
            }
            set
            {
                this.mediaStatusId = value;
            }
        }

        /// <summary>
        /// The id of the media type.
        /// </summary>
        public int? MediaTypeId
        {
            get 
            { 
                return this.mediaTypeId; 
            }
            set 
            { 
                this.mediaTypeId = value; 
            }
        }

        /// <summary>
        /// The id of the video.
        /// </summary>
        public Guid? MediaId
        {
            get 
            { 
                return this.mediaId; 
            }
            set 
            { 
                this.mediaId = value; 
            }
        }

        /// <summary>
        /// The title of the media.
        /// </summary>
        public string MediaTitle
        {
            get 
            { 
                return this.mediaTitle; 
            }
            set 
            { 
                this.mediaTitle = value; 
            }
        }

        /// <summary>
        /// The begin date of the video is visible in the video catalog.
        /// </summary>
        public DateTime? AvailableFromDate
        {
            get
            {
                return this.availableFromDate;
            }
            set
            {
                Validate.ValidateDate(ref value);
                this.availableFromDate = value;
            }
        }

        /// <summary>
        /// The end date of the video is visible in the video catalog.
        /// </summary>
        public DateTime? AvailableToDate
        {
            get
            {
                return this.availableToDate;
            }
            set
            {
              Validate.ValidateDate(ref value);
              this.availableToDate = value;
            }
        }

        /// <summary>
        /// The list of category ids.
        /// </summary>
        public int[] CategoryIds
        {
            get
            {
                return this.categoryIds.ToArray();
            }
            set
            {
                this.categoryIds.Clear();
                if (value != null)
                    this.categoryIds.AddRange(value);
            }
        }

        /// <summary>
        /// An episodes production id - this is what the provider often idenfies the episode by.
        /// </summary>
        public String ProductionId
        {
            get
            {
                return this.productionId;
            }
            set
            {
                // blank value is stored as null
                if ( value != null )
                {
                    value = value.Trim();
                    if ( value.Length == 0 )
                    {
                        value = null;
                    }
                }
                Validate.IsNotLongerThan( value, ProductionIdMaxLength, "productionId", "productionId");
                this.productionId = value;
            }
        }

        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public VideoSearchRequest()
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Searches for videos specified by the search request object.
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<VideoSearchResponse> responses = new List<VideoSearchResponse>();
            try
            {
                //Build categoryIds string if any
                string cids = string.Empty;
                foreach (int id in this.categoryIds)
                {
                    if (cids.Length > 0)
                        cids += ",";
                    cids += id.ToString();
                }

                if (string.IsNullOrEmpty(cids))
                {
                    cids = null;
                }


                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "VideoSearch",
                        this.MediaStatusId,
                        this.mediaTypeId,
                        this.MediaId,
                        this.mediaTitle,
                        this.availableFromDate,
                        this.availableToDate,
                        this.metadataProviderId,
                        cids,
                        this.productionId,
                        (this.MaxResults <= 0)? base.MaxResults : this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new VideoSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "VideoSearch");
                throw;
            }
            return responses.ToArray();
        }        
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoEncoding.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Xml.Serialization;
using Microsoft.Ems.Common.Utils;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Represents an video encoding type with its localized textual name
    /// </summary>
    public class VideoEncoding : Utils.IKeyed<Int32>
    {
        # region Constants
        private const int nameLength = 50;
        # endregion

        #region Fields
        private Int32 id;
        private String name;
        private DataChangeType modified = DataChangeType.None;
        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,VideoEncoding> VideoEncodingCache = new Utils.KeyedCache<Int32,VideoEncoding>(
                        new Utils.KeyedCache<Int32,Catalog.VideoEncoding>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Default constructor required for SOAP.
        /// </summary>
        public VideoEncoding()
        {
        }

        /// <summary>
        /// Initialize a new instance of the VideoEncoding class given a sql data reader
        /// </summary>
        /// <param name="reader"></param>
        public VideoEncoding(SqlDataReader reader)
        {
            id = reader.GetInt32(reader.GetOrdinal("videoEncodingId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }        
        #endregion

        #region Properties
        /// <summary>
        /// The id for the video encoding
        /// </summary>
        public Int32 Id
        {
            get { return id; }
            set { id = value; }
        }

        /// <summary>
        /// The name by which the video encoding is known - for readability purpose only
        /// </summary>
        [XmlElement(IsNullable = true)]
        public String Name
        {
            get
            {
                return name;
            }
            
            set
            {
                Validate.IsNotEmpty(value, "Name", "Name");
                Validate.IsNotLongerThan(value, nameLength, "Name", "Name");
                name = value;
            }
        }
        /// <summary>
        /// Change type for Data modification
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Gets a VideoEncoding for given a lcid.
        /// </summary>
        /// <param name="id">The id of the VideoEncoding to retrieve</param>
        /// <returns>The id of the VideoEncoding</returns>
        internal static VideoEncoding Get(int id)
        {
            return VideoEncodingCache.Get(id);
        }

        /// <summary>
        /// Gets all VideoEncoding in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<VideoEncoding> Get()
        {
            return VideoEncodingCache.Get();
        }

        /// <summary>
        /// Gets all VideoEncoding in the catalog.
        /// </summary>
        /// <returns></returns>
        private static List<VideoEncoding> GetData()
        {
            List<VideoEncoding> videoEncodings = new List<VideoEncoding>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "VideoEncodingGet"
                    ))
            {
                while( reader.Read() )
                {
                    videoEncodings.Add( new VideoEncoding( reader ));
                }
            }
            return videoEncodings;
        }
        /// <summary>
        /// Overloaded save method which has Video Encoding as the Input Parameter
        /// </summary>
        ///<param name="videoEncoding">Video Object for Encoding</param>
        public static void Save(VideoEncoding videoEncoding)
        {
            if (videoEncoding == null)
            {
                throw new ArgumentNullException("Cannot save null video encoding");
            }

            if (videoEncoding.Id == -1 && string.IsNullOrEmpty(videoEncoding.name))
            {
                return;
            }
            using (Serialization serializer = new Serialization())
            {
                serializer.SerializeStartElement("Data");
                videoEncoding.Serialize(serializer);
                serializer.SerializeEndElement();
                VideoEncoding.Save(serializer.ResultXml);
            }
        }
        /// <summary>
        /// Overloaded save method which has XML as input parameter
        /// </summary>
        ///<param name="xmlVideoEncoding">XML String for Video Encoding Save</param>
        private static void Save(string xmlVideoEncoding)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "VideoEncodingSave",
                        xmlVideoEncoding);
                //Refresh the Cache    
                VideoEncodingCache.Refresh();
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "VideoEncodingSave");
                throw;
            }
        }
        /// <summary>
        /// Serialize Method for AudioEncoding object
        /// </summary>
        /// <param name="context"></param>
        public void Serialize(Serialization context)
        {
            if (context != null)
            {
                if (this.modified != DataChangeType.None)
                {
                    context.SerializeStartElement("VideoEncoding");
                    context.SerializeDatabaseOperation(this.modified);
                    if (this.Id != -1)
                    {
                        context.SerializeElement("videoEncodingId", this.Id);
                    }
                    if (!string.IsNullOrEmpty(this.name))
                    {
                        context.SerializeElement("videoEncodingName", this.name);
                    }
                    context.SerializeEndElement();
                }
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoSeasonSearch.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define VideoSeason search response class.
    /// </summary>
    public class VideoSeasonSearchResponse : Response
    {
        #region Fields
        private Guid mediaId;
        private string title;
        private string locale;
        private DateTime availableDate;
        private int seasonNumber;
        private string visibilityStatus;
        #endregion

        #region Properties
        /// <summary>
        /// VideoSeason id
        /// </summary>
        public Guid MediaId
        {
            get
            {
                return this.mediaId;
            }
            set
            {
                this.mediaId = value;
            }
        }

        /// <summary>
        /// VideoSeason title
        /// </summary>
        public string Title
        {
            get
            {
                return this.title;
            }
            set
            {
                this.title = value;
            }
        }

        /// <summary>
        /// VideoSeason title locale
        /// </summary>
        public string Locale
        {
            get
            {
                return this.locale;
            }
            set
            {
                this.locale = value;
            }
        }

        /// <summary>
        /// The date in which the videoSeason is available in the catalog.
        /// </summary>
        public DateTime AvailableDate
        {
            get
            {
                return this.availableDate;
            }
            set
            {
                this.availableDate = value;
            }
        }

        /// <summary>
        /// The season number this video belongs to.
        /// </summary>
        public int SeasonNumber
        {
            get
            {
                return this.seasonNumber;
            }
            set
            {
                this.seasonNumber = value;
            }
        }
        /// <summary>
        /// Gets/Sets the Visibility Status
        /// </summary>
        public string VisibilityStatus
        {
            get
            {
                return this.visibilityStatus;
            }
            set
            {
                this.visibilityStatus = value;
            }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public VideoSeasonSearchResponse()
        {
        }

        /// <summary>
        /// Private constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal VideoSeasonSearchResponse(SqlDataReader reader)
        {
            this.mediaId = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.title = reader.IsDBNull(reader.GetOrdinal("title")) ? "" : reader.GetString(reader.GetOrdinal("title"));
            this.locale = reader.GetString(reader.GetOrdinal("locale"));
            this.visibilityStatus = reader.GetString(reader.GetOrdinal("VisibilityStatusName"));
            if (!reader.IsDBNull(reader.GetOrdinal("visibilityDate")))
                this.availableDate = reader.GetDateTime(reader.GetOrdinal("visibilityDate"));
            this.seasonNumber = reader.GetInt32(reader.GetOrdinal("seasonNumber"));
        }
        #endregion
    }

    /// <summary>
    /// Define videoSeason search request class.
    /// </summary>
    public class VideoSeasonSearchRequest : Request
    {
        #region Fields
        private int? mediaStatusId = null;
        private int? mediaTypeId = null;
        private Guid? mediaId = null;
        private string mediaTitle = null;
        private DateTime? availableFromDate = null;
        private DateTime? availableToDate = null;
        private int? seasonNumber = null;
        private int? metadataProviderId = null;
        private string sortDesc = null;
        #endregion

        #region Properties
        ///<summary>
        ///The sort description
        ///</summary>
        public string SortDesc
        {
            get
            {
                return this.sortDesc;
            }
            set
            {
                this.sortDesc = value;
            }
        }


        ///<summary>
        ///The id of the provider
        ///</summary>
        public int? MetadataProviderId
        {
            get
            {
                return this.metadataProviderId;
            }
            set
            {
                this.metadataProviderId = value;
            }
        }


        /// <summary>
        /// The id of the media visibility status.
        /// </summary>
        public int? MediaStatusId
        {
            get
            {
                return this.mediaStatusId;
            }
            set
            {
                this.mediaStatusId = value;
            }
        }

        /// <summary>
        /// The id of the media type.
        /// </summary>
        public int? MediaTypeId
        {
            get
            {
                return this.mediaTypeId;
            }
            set
            {
                this.mediaTypeId = value;
            }
        }

        /// <summary>
        /// The id of the VideoSeries.
        /// </summary>
        public Guid? MediaId
        {
            get
            {
                return this.mediaId;
            }
            set
            {
                this.mediaId = value;
            }
        }

        /// <summary>
        /// The title of the media.
        /// </summary>
        public string MediaTitle
        {
            get
            {
                return this.mediaTitle;
            }
            set
            {
                this.mediaTitle = value;
            }
        }

        /// <summary>
        /// The begin date of the VideoSeries is visible in the VideoSeries catalog.
        /// </summary>
        public DateTime? AvailableFromDate
        {
            get
            {
                return this.availableFromDate;
            }
            set
            {
                Validate.ValidateDate(ref value);
                this.availableFromDate = value;
            }
        }

        /// <summary>
        /// The end date of the VideoSeries is visible in the VideoSeries catalog.
        /// </summary>
        public DateTime? AvailableToDate
        {
            get
            {
                return this.availableToDate;
            }
            set
            {
               Validate.ValidateDate(ref value);
               this.availableToDate = value;
            }
        }

        /// <summary>
        /// The season number of the video.
        /// </summary>
        public int? SeasonNumber
        {
            get
            {
                return this.seasonNumber;
            }
            set
            {
                this.seasonNumber = value;
            }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public VideoSeasonSearchRequest()
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Searches for videoSeasons specified by the search request object.
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<VideoSeasonSearchResponse> responses = new List<VideoSeasonSearchResponse>();
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "VideoSeasonSearch",
                        this.MediaStatusId,
                        this.mediaTypeId,
                        this.MediaId,
                        this.mediaTitle,
                        this.availableFromDate,
                        this.availableToDate,
                        this.metadataProviderId,
                        this.seasonNumber,
                        this.sortDesc,
                        (this.MaxResults <= 0) ? base.MaxResults : this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new VideoSeasonSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "VideoSeasonSearch");
                throw;
            }
            return responses.ToArray();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoSeason.cs ===
using System;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides retrieval and editing of VideoSeason data in the catalog.
    /// </summary>
    public class VideoSeason : Media
    {
        #region Fields
        private int seasonNumber;
        private bool isComplete;
        private InsertDataChangeType modified = InsertDataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that a takes SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        private VideoSeason(SqlDataReader reader) : base(reader)
        {
            reader.NextResult();
            if (reader.Read())
            {
                this.seasonNumber = reader.GetInt32(reader.GetOrdinal("seasonNumber"));
                this.isComplete = (reader.GetByte(reader.GetOrdinal("isComplete")) == 1)? true : false;
            }
        }

        /// <summary>
        /// Parameterless constructore required for SOAP.
        /// </summary>
        public VideoSeason()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets whether the season is still running(false) or complete(true)
        /// </summary>
        public bool IsComplete
        {
            get
            {
                return this.isComplete;
            }
            set
            {
                this.isComplete = value;
            }
        }
        /// <summary>
        /// Gets or sets the TV season number
        /// </summary>
        public int SeasonNumber
        {
            get
            {
                return this.seasonNumber;
            }
            set
            {
                if (value < 0)
                    throw new ArgumentException("SeasonNumber must be greater or equal to zero", "SeasonNumber");
                this.seasonNumber = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets the full VideoSeason object from the database for the given id.
        /// </summary>
        /// <param name="id">The id of the VideoSeason to get.</param>
        /// <returns>The VideoSeason object.</returns>
        public static VideoSeason Get(Guid id)
        {
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "VideoSeasonGet",
                        id))
                {
                    if (reader.Read())
                        return new VideoSeason(reader);
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "VideoSeasonGet");
                throw;
            }
            return null;
        }

        /// <summary>
        /// Saves changes made to the given VideoSeason object.
        /// </summary>
        public static void Save(VideoSeason videoSeason)
        {
            if (videoSeason == null)
            {
                throw new ArgumentNullException("Cannot save null video season");
            }

            using (Serialization serializer = new Serialization())
            {
                serializer.SerializeStartElement("Data");
                videoSeason.Serialize(serializer);
                serializer.SerializeEndElement();
                VideoSeason.Save(serializer.ResultXml);
            }
        }

        /// <summary>
        /// Saves changes made to the given VideoSeason object specified as xml.
        /// </summary>
        /// <param name="xmlVideoSeason">VideoSeason data to be save to the database.</param>
        public static void Save(string xmlVideoSeason)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "VideoSeasonSave",
                        xmlVideoSeason);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "VideoSeasonSave");
                throw;
            }
        }

        /// <summary>
        /// Serialize the VideoSeason object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        /// <returns></returns>
        public override void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("VideoSeason");
                context.SerializeDatabaseOperation(this.modified);

                //Call base class to serialize media.
                base.Serialize(context);

                context.SerializeElement("videoSeasonMediaId", this.Id);
                context.SerializeElement("seasonNumber", this.seasonNumber);
                context.SerializeElement("isComplete", this.isComplete);
                context.SerializeEndElement();
            }
            else
            {
                //If this video series is to be added/deleted; mark all children to be added/deleted.
                if (this.Modified == InsertDataChangeType.Add)
                {
                    this.SetModified(this.Modified, true);
                }

                //Call base class to serialize media.
                base.Serialize(context);

                if (this.Modified != InsertDataChangeType.None)
                {
                    context.SerializeStartElement("VideoSeason");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("videoSeasonMediaId", this.Id);
                    context.SerializeElement("seasonNumber", this.seasonNumber);
                    context.SerializeElement("isComplete", this.isComplete);
                    context.SerializeEndElement();
                }
            }            
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public override void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                // Call Deserialize for base object MediaData
                XmlNode child = node.SelectSingleNode("child::MediaData");
                if (child != null) base.Deserialize(child);

                attr = node.SelectSingleNode("child::videoSeasonMediaId");
                if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::seasonNumber");
                if (null != attr) this.seasonNumber = Serialization.DeserializeIntElement(attr.InnerText);

                attr = node.SelectSingleNode("child::isComplete");
                if (null != attr) this.isComplete = Serialization.DeserializeBoolElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public override void SetModified(InsertDataChangeType type, bool cascade)
        {
            base.SetModified(type, cascade);
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoSubtitle.cs ===
using System;
using System.Data.SqlClient;
using System.Xml;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Defines VideoSubtitle data, and creation of the VideoSubtitle class.
    /// </summary>
    public class VideoSubtitle : ICatalogData
    {
        #region Constants
        private const int languageCodeLength = 3;
        private const int fileUrlLength = 1024;
        #endregion

        #region Fields
        private Guid videoMediaInstanceId;
        private string languageCode;
        private string fileUrl;
        private DataChangeType modified = DataChangeType.None;
        #endregion

        #region Contructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        internal VideoSubtitle(SqlDataReader reader)
        {
            this.languageCode = reader.GetString(reader.GetOrdinal("languageCode"));
            this.fileUrl = reader.IsDBNull(reader.GetOrdinal("fileUrl")) ? string.Empty : reader.GetString(reader.GetOrdinal("fileUrl"));
        }

        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public VideoSubtitle()
        {
        }

        /// <summary>
        /// Constructor that initializes a new instance of the VideoSubtitle class.
        /// </summary>
        /// <param name="languageCode">The language code of this video subtitle</param>
        /// <param name="fileUrl">File url that contains the subtitle text</param>
        public VideoSubtitle(string languageCode, string fileUrl)
        {
            Validate.IsNotNull(languageCode, "languageCode", "languageCode");
            Validate.IsNotLongerThan(languageCode, languageCodeLength, "languageCode", "languageCode");
            if (!String.IsNullOrEmpty(fileUrl))
                Validate.IsNotLongerThan(fileUrl, fileUrlLength, "fileUrl", "fileUrl");

            this.languageCode = languageCode;
            this.fileUrl = fileUrl;
            this.modified = DataChangeType.Update;
        }
        #endregion

        #region Properties
        /// <summary>
        /// Sets the videoInstanceId that associate with this videoSubtitle
        /// </summary>
        internal Guid VideoMediaInstanceId
        {
            set
            {
                this.videoMediaInstanceId = value;
            }
        }

        /// <summary>
        /// Gets or sets the language code of this VideoSubtitle.
        /// </summary>
        public string LanguageCode
        {
            get
            {
                return this.languageCode;
            }
            set
            {
                if (this.languageCode != value)
                {
                    Validate.IsNotNull(value, "LanguageCode", "LanguageCode");
                    Validate.IsNotLongerThan(value, languageCodeLength, "LanguageCode", "LanguageCode");
                    this.languageCode = value;
                }
            }
        }

        /// <summary>
        /// The url to the video subtitle file
        /// </summary>
        public string FileUrl
        {
            get
            {
                return this.fileUrl;
            }

            set
            {
                if (!String.IsNullOrEmpty(value))
                    Validate.IsValidURL(value, fileUrlLength, "FileUrl", "FileUrl");
                this.fileUrl = value;
            }
        }

        /// <summary>
        /// Gets or sets the modified state of the object in relation to record in the backing database store.
        /// </summary>
        public DataChangeType Modified
        {
            get
            {
                return this.modified;
            }
            set
            {
                this.modified = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Serializes this object into xml.
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        public void Serialize(Serialization context)
        {
            if (this.modified != DataChangeType.None || context.FullSerialization)
            {
                context.SerializeStartElement("VideoSubtitle");
                context.SerializeDatabaseOperation(this.modified);
                context.SerializeElement("videoMediaInstanceId", this.videoMediaInstanceId);
                context.SerializeElement("languageCode", this.languageCode);
                context.SerializeElement("fileUrl", this.fileUrl);
                context.SerializeEndElement();
            }
        }


        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public virtual void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeDataChangeElement(attr.Value.ToString());

                attr = node.SelectSingleNode("child::videoMediaInstanceId");
                if (null != attr) this.videoMediaInstanceId = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::languageCode");
                if (null != attr) this.languageCode = attr.InnerText;

                attr = node.SelectSingleNode("child::fileUrl");
                if (null != attr) this.fileUrl = attr.InnerText;
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public void SetModified(DataChangeType type, bool cascade)
        {
            this.modified = type;
            //No cascade down since this object has no child object
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoSeries.cs ===
using System;
using System.Data.SqlClient;
using System.IO;
using System.Xml;
using Microsoft.Ems.Common.Utils;


namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Provides retrieval and editing of VideoSeries data in the catalog.
    /// </summary>
    public class VideoSeries : Media
    {
        #region Constants
        private const int productionCompanyLength = 100;
        #endregion

        #region Fields
        private string productionCompany;
        private bool isOrderBySeason;
        private InsertDataChangeType modified = InsertDataChangeType.None;
        #endregion

        #region Constructors
        /// <summary>
        /// Constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader">SqlDataReader</param>
        private VideoSeries(SqlDataReader reader) : base(reader)
        {
            reader.NextResult();
            if (reader.Read())
            {
                this.productionCompany = SqlHelper.GetNullableString(reader, "productionCompany");
                this.isOrderBySeason = (reader.GetByte(reader.GetOrdinal("isOrderBySeason")) == 1) ? true : false;
            }
        }

        /// <summary>
        /// Parameterless constructore required for SOAP.
        /// </summary>
        public VideoSeries()
        {
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets or sets the production company of this video series
        /// </summary>
        public string ProductionCompany
        {
            get
            {
                return this.productionCompany;
            }
            set
            {
                if (String.IsNullOrEmpty(value))
                    Validate.IsNotLongerThan(value, productionCompanyLength, "ProductionCompany", "ProductionCompany");
                this.productionCompany = value;
            }
        }

        /// <summary>
        /// Gets or sets whether we should sort the contained media by season number
        /// </summary>
        public bool IsOrderBySeason
        {
            get
            {
                return this.isOrderBySeason;
            }
            set
            {
                this.isOrderBySeason = value;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Gets the full VideoSeries object from the database for the given id.
        /// </summary>
        /// <param name="id">The id of the VideoSeries to get.</param>
        /// <returns>The VideoSeries object.</returns>
        public static VideoSeries Get(Guid id)
        {
            try
            {
                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "VideoSeriesGet",
                        id))
                {
                    if (reader.Read())
                        return new VideoSeries(reader);
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "VideoSeriesGet");
                throw;
            }
            return null;
        }

        /// <summary>
        /// Saves changes made to the given VideoSeries object.
        /// </summary>
        public static void Save(VideoSeries videoSeries)
        {
            if (videoSeries == null)
            {
                throw new ArgumentNullException("Cannot save null video series");
            }

            using (Serialization serializer = new Serialization())
            {
                serializer.SerializeStartElement("Data");
                videoSeries.Serialize(serializer);
                serializer.SerializeEndElement();
                VideoSeries.Save(serializer.ResultXml);
            }
        }

        /// <summary>
        /// Saves changes made to the given Video object specified as xml.
        /// </summary>
        /// <param name="xmlVideoSeries">VideoSeries data to be save to the database.</param>
        public static void Save(string xmlVideoSeries)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "VideoSeriesSave",
                        xmlVideoSeries);
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "VideoSeriesSave");
                throw;
            }
        }

        /// <summary>
        /// Serialize the Video object into xml (for preparation to save to the database).
        /// </summary>
        /// <param name="context">Serialization object instance</param>
        /// <returns></returns>
        public override void Serialize(Serialization context)
        {
            if (context.FullSerialization)
            {
                context.SerializeStartElement("VideoSeries");
                context.SerializeDatabaseOperation(this.modified);

                //Call base class to serialize media.
                base.Serialize(context);

                context.SerializeElement("videoSeriesMediaId", this.Id);
                context.SerializeElement("productionCompany", this.productionCompany);
                context.SerializeElement("isOrderBySeason", this.isOrderBySeason);
                context.SerializeEndElement();
            }
            else
            {
                //If this video series is to be added/deleted; mark all children to be added/deleted.
                if (this.Modified == InsertDataChangeType.Add)
                {
                    this.SetModified(this.Modified, true);
                }

                //Call base class to serialize media.
                base.Serialize(context);

                if (this.Modified != InsertDataChangeType.None)
                {
                    context.SerializeStartElement("VideoSeries");
                    context.SerializeDatabaseOperation(this.modified);
                    context.SerializeElement("videoSeriesMediaId", this.Id);
                    context.SerializeElement("productionCompany", this.productionCompany);
                    context.SerializeElement("isOrderBySeason", this.isOrderBySeason);
                    context.SerializeEndElement();
                }
            }
        }

        /// <summary>
        /// Load properties and contained objects to the obejct from a XMLNode and its sub-nodes.
        /// </summary>
        /// <param name="node">XML node with elements represting all properties and contained objects if any</param>
        public override void Deserialize(XmlNode node)
        {
            if (node == null)
            {
                return;
            }
            else
            {
                XmlNode attr = null;

                attr = node.Attributes.GetNamedItem("op");
                if (null != attr) this.modified = Serialization.DeserializeInsertDataChangeElement(attr.Value.ToString());

                // Call Deserialize for base object MediaData
                XmlNode child = node.SelectSingleNode("child::MediaData");
                if (child != null) base.Deserialize(child);

                attr = node.SelectSingleNode("child::videoSeriesMediaId");
                if (null != attr) this.Id = Serialization.DeserializeGuidElement(attr.InnerText);

                attr = node.SelectSingleNode("child::productionCompany");
                if (null != attr) this.productionCompany = attr.InnerText;

                attr = node.SelectSingleNode("child::isOrderBySeason");
                if (null != attr) this.isOrderBySeason = Serialization.DeserializeBoolElement(attr.InnerText);
            }
        }

        /// <summary>
        /// Sets this object's modified flag.
        /// </summary>
        /// <param name="type">Data change type</param>
        /// <param name="cascade">Indicate whether to cascade down to contained objects.</param>
        public override void SetModified(InsertDataChangeType type, bool cascade)
        {
            base.SetModified(type, cascade);
            this.modified = type;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VideoSeriesSearch.cs ===
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Define VideoSeries search response class.
    /// </summary>
    public class VideoSeriesSearchResponse : Response
    {
        #region Fields
        private Guid mediaId;
        private string title;
        private string locale;
        private DateTime? availableDate;
        private string visibilityStatus;
        #endregion

        #region Properties
        /// <summary>
        /// VideoSeries id
        /// </summary>
        public Guid MediaId
        {
            get
            {
                return this.mediaId;
            }
            set
            {
                this.mediaId = value;
            }
        }

        /// <summary>
        /// VideoSeries title
        /// </summary>
        public string Title
        {
            get
            {
                return this.title;
            }
            set
            {
                this.title = value;
            }
        }

        /// <summary>
        /// VideoSeries title locale
        /// </summary>
        public string Locale
        {
            get
            {
                return this.locale;
            }
            set
            {
                this.locale = value;
            }
        }

        /// <summary>
        /// The date in which the VideoSeries is available in the catalog.
        /// </summary>
        public DateTime? AvailableDate
        {
            get
            {
                return this.availableDate;
            }
            set
            {
                this.availableDate = value;
            }
        }
        /// <summary>
        /// Gets/Sets the Visibility Status
        /// </summary>
        public string VisibilityStatus
        {
            get
            {
                return this.visibilityStatus;
            }
            set
            {
                this.visibilityStatus = value;
            }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP.
        /// </summary>
        public VideoSeriesSearchResponse()
        {
        }

        /// <summary>
        /// Private constructor that takes a SqlDataReader.
        /// </summary>
        /// <param name="reader"></param>
        internal VideoSeriesSearchResponse(SqlDataReader reader)
        {
            this.mediaId = reader.GetGuid(reader.GetOrdinal("mediaId"));
            this.title = reader.IsDBNull(reader.GetOrdinal("title")) ? "" : reader.GetString(reader.GetOrdinal("title"));
            this.locale = reader.GetString(reader.GetOrdinal("locale"));
            this.visibilityStatus = reader.GetString(reader.GetOrdinal("VisibilityStatusName"));
            if (!reader.IsDBNull(reader.GetOrdinal("visibilityDate")))
                this.availableDate = reader.GetDateTime(reader.GetOrdinal("visibilityDate"));
        }
        #endregion
    }

    /// <summary>
    /// Define VideoSeries search request class.
    /// </summary>
    public class VideoSeriesSearchRequest : Request
    {
        #region Fields
        private int? mediaStatusId = null;
        private int? mediaTypeId = null;
        private Guid? mediaId = null;
        private string mediaTitle = null;
        private DateTime? availableFromDate = null;
        private DateTime? availableToDate = null;
        private List<int> categoryIds = new List<int>();
        private int? metadataProviderId = null;
        #endregion

        #region Properties
        ///<summary>
        /// The id of the provider.
        ///</summary>
        public int? MetadataProviderId
        {
            get
            {
                return this.metadataProviderId;
            }
            set
            {
                this.metadataProviderId = value;
            }
        }

        /// <summary>
        /// The id of the media visibility status.
        /// </summary>
        public int? MediaStatusId
        {
            get
            {
                return this.mediaStatusId;
            }
            set
            {
                this.mediaStatusId = value;
            }
        }

        /// <summary>
        /// The id of the media type.
        /// </summary>
        public int? MediaTypeId
        {
            get
            {
                return this.mediaTypeId;
            }
            set
            {
                this.mediaTypeId = value;
            }
        }

        /// <summary>
        /// The id of the VideoSeries.
        /// </summary>
        public Guid? MediaId
        {
            get
            {
                return this.mediaId;
            }
            set
            {
                this.mediaId = value;
            }
        }

        /// <summary>
        /// The title of the media.
        /// </summary>
        public string MediaTitle
        {
            get
            {
                return this.mediaTitle;
            }
            set
            {
                this.mediaTitle = value;
            }
        }

        /// <summary>
        /// The begin date of the VideoSeries is visible in the VideoSeries catalog.
        /// </summary>
        public DateTime? AvailableFromDate
        {
            get
            {
                return this.availableFromDate;
            }
            set
            {
               Validate.ValidateDate(ref value);
               this.availableFromDate = value;
            }
        }

        /// <summary>
        /// The end date of the VideoSeries is visible in the VideoSeries catalog.
        /// </summary>
        public DateTime? AvailableToDate
        {
            get
            {
                return this.availableToDate;
            }
            set
            {
               Validate.ValidateDate(ref value);
               this.availableToDate = value;
            }
        }

        /// <summary>
        /// The list of category ids.
        /// </summary>
        public int[] CategoryIds
        {
            get
            {
                return this.categoryIds.ToArray();
            }
            set
            {
                this.categoryIds.Clear();
                if (value != null)
                    this.categoryIds.AddRange(value);
            }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor reqired for SOAP.
        /// </summary>
        public VideoSeriesSearchRequest()
        {
        }
        #endregion

        #region Methods
        /// <summary>
        /// Searches for VideoSeries specified by the search request object.
        /// </summary>
        /// <returns></returns>
        public override Response[] Search()
        {
            List<VideoSeriesSearchResponse> responses = new List<VideoSeriesSearchResponse>();
            try
            {
                //Build categoryIds string if any
                string cids = string.Empty;
                foreach (int id in this.categoryIds)
                {
                    if (cids.Length > 0)
                        cids += ",";
                    cids += id.ToString();
                }

                if (string.IsNullOrEmpty(cids))
                {
                    cids = null;
                }


                using( SqlDataReader reader = SqlHelper.ExecuteReader(
                        CatalogDatabase.RawCatalogDBConnectionString,
                        "VideoSeriesSearch",
                        this.MediaStatusId,
                        this.mediaTypeId,
                        this.MediaId,
                        this.mediaTitle,
                        this.availableFromDate,
                        this.availableToDate,
                        this.metadataProviderId,
                        cids,
                        (this.MaxResults <= 0) ? base.MaxResults : this.MaxResults))
                {
                    while (reader.Read())
                    {
                        responses.Add(new VideoSeriesSearchResponse(reader));
                    }
                }
            }
            catch (SqlException e)
            {
                Event.RaiseSqlExceptionEvent(e, CatalogDatabase.RawCatalogDBConnectionString, "VideoSeriesSearch");
                throw;
            }
            return responses.ToArray();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VisibilityStatus.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Represents visibility status of a media
    /// </summary>
    public class VisibilityStatus : Utils.IKeyed<Int32>
    {
        #region Fields
        private Int32 id;
        private String name;

        private static readonly TimeSpan CacheRefreshPeriod = new TimeSpan(0, 10, 0);
        private static readonly Utils.KeyedCache<Int32, VisibilityStatus> VisibilityStatusCache = new Utils.KeyedCache<Int32, VisibilityStatus>(
                        new Utils.KeyedCache<Int32, Catalog.VisibilityStatus>.CachedDataLoaderDelegate(GetData),
                        CacheRefreshPeriod);
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP
        /// </summary>
        public VisibilityStatus()
        {
        }

        /// <summary>
        /// Constructor that takes a db reader
        /// </summary>
        private VisibilityStatus(SqlDataReader reader)
        {
            id = reader.GetInt32(reader.GetOrdinal("visibilityStatusId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// The id for the visibility level
        /// </summary>
        public Int32 Id
        {
            get { return id; }
            set { id = value; }
        }

        /// <summary>
        /// The name by which the visbility status is known - for readability purpose only
        /// </summary>
        public String Name
        {
            get
            {
                return name;
            }

            set
            {
                if (String.IsNullOrEmpty(value))
                {
                    throw new ArgumentNullException("The name of a VisibilityStatus cannot be null or empty.");
                }
                name = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get the VisibilityStatus for a given id.
        /// </summary>
        /// <param name="id">The id of the VisibilityStatus to retrieve</param>
        /// <returns>The VisibilityStatus of the given id.</returns>
        internal static VisibilityStatus Get(int id)
        {
            return VisibilityStatusCache.Get(id);
        }

        /// <summary>
        /// Gets the list of VisibilityStatus in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<VisibilityStatus> Get()
        {
            return VisibilityStatusCache.Get();
        }

        /// <summary>
        /// Gets the list of VisibilityStatuss from the database.
        /// </summary>
        /// <returns></returns>
        private static List<VisibilityStatus> GetData()
        {
            List<VisibilityStatus> visibilityStatuss = new List<VisibilityStatus>();

            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "VisibilityStatusGet"
                    ))
            {
                while (reader.Read())
                {
                    visibilityStatuss.Add(new VisibilityStatus(reader));
                }
            }
            return visibilityStatuss;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_microsoft.ems.apps.web.editorial_none_12.4.56.0_none_69d373ac46b412ac
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_microsoft.ems.apps.web.editorial_no-public-key_12.4.56.0_x-ww_63dc880a
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=microsoft.ems.apps.web.editorial
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_microsoft.ems.apps.web.editorial_no-public-key_12.4.56.0_x-ww_63dc880a
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_microsoft.ems.apps.web.editorial_no-public-key_12.4.56.0_x-ww_63dc880a.manifest
XP_MANIFEST_PATH=manifests\x86_microsoft.ems.apps.web.editorial_no-public-key_12.4.56.0_x-ww_63dc880a.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_microsoft.ems.apps.web.editorial_no-public-key_12.4.56.0_x-ww_63dc880a.cat
XP_CATALOG_PATH=manifests\x86_microsoft.ems.apps.web.editorial_no-public-key_12.4.56.0_x-ww_63dc880a.cat
XP_PAYLOAD_PATH=x86_microsoft.ems.apps.web.editorial_no-public-key_12.4.56.0_x-ww_63dc880a
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=microsoft.ems.apps.web.editorial,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\catalog\VisibilityLevel.cs ===
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

using Utils = Microsoft.Ems.Common.Utils;

namespace Microsoft.Ems.Common.Catalog
{
    /// <summary>
    /// Represents a visibility with its localized textual name
    /// </summary>
    public class VisibilityLevel : Utils.IKeyed<Int32>
    {
        #region Fields
        private Int32 id;
        private String name;

        private static readonly TimeSpan CacheRefreshPeriod =  new TimeSpan( 0, 10, 0 );
        private static readonly Utils.KeyedCache<Int32,VisibilityLevel> VisibilityLevelCache = new Utils.KeyedCache<Int32,VisibilityLevel>(
                        new Utils.KeyedCache<Int32,Catalog.VisibilityLevel>.CachedDataLoaderDelegate( GetData ),
                        CacheRefreshPeriod );
        #endregion

        #region Constructors
        /// <summary>
        /// Parameterless constructor required for SOAP
        /// </summary>
        public VisibilityLevel()
        {
        }

        /// <summary>
        /// Constructor that takes a db reader
        /// </summary>
        private VisibilityLevel( SqlDataReader reader )
        {
            id = reader.GetInt32(reader.GetOrdinal("visibilityLevelId"));
            name = reader.GetString(reader.GetOrdinal("name"));
        }
        #endregion

        #region Properties
        /// <summary>
        /// The id for the visibility level
        /// </summary>
        public Int32 Id
        {
            get { return id; }
            set { id = value; }
        }

        /// <summary>
        /// The name by which the visbility levle  is known - for readability purpose only
        /// </summary>
        public String Name
        {
            get
            {
                return name;
            }
            
            set
            {
                if ( String.IsNullOrEmpty( value ))
                {
                    throw new ArgumentNullException( "The name of a VisibilityLevel cannot be null or empty." );
                }
                name = value;
            }
        }
        #endregion

        #region Public Methods
        /// <summary>
        /// Get the VisibilityLevel for a given id.
        /// </summary>
        /// <param name="id">The id of the VisibilityLevel to retrieve</param>
        /// <returns>The VisibilityLevel of the given id.</returns>
        internal static VisibilityLevel Get(int id)
        {
            return VisibilityLevelCache.Get( id );
        }

        /// <summary>
        /// Gets the list of VisibilityLevel in the catalog.
        /// </summary>
        /// <returns></returns>
        public static List<VisibilityLevel> Get()
        {
            return VisibilityLevelCache.Get();
        }
        
        /// <summary>
        /// Gets the list of VisibilityLevels from the database.
        /// </summary>
        /// <returns></returns>
        private static List<VisibilityLevel> GetData()
        {
            List<VisibilityLevel> visibilityLevels = new List<VisibilityLevel>();
            
            using( SqlDataReader reader = SqlHelper.ExecuteReader(
                    CatalogDatabase.RawCatalogDBConnectionString,
                    "VisibilityLevelGet"
                    ))
            {
                while( reader.Read() )
                {
                    visibilityLevels.Add( new VisibilityLevel( reader ));
                }
            }
            return visibilityLevels;
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Code.4.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\Operation.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "D5B2FF76F8728BCD89D04086637BC825"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\Operation.cs"
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

/// <summary>
/// Summary description for Operation
/// </summary>
public class Operation
{
	private Operation()
	{
	}
}

public enum Operation_Mode
{
    Add,
    Edit,
    Delete,
    Import,
    Undefined
}

public enum Master_Menu_Item
{
    Master_Menu_Video,
    Master_Menu_VideoSeries,
    Master_Menu_VideoSeason
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Code.1.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\ClientMediaContributor.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "A87370A8A6BE257FCCD42175DDAEEBB0"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\ClientMediaContributor.cs"
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

/// <summary>
/// Summary description for ClientMediaContributor
/// </summary>
public class ClientMediaContributor : MediaContributor
{
    //private string _name;
    public ClientMediaContributor()
    {

    }

    public ClientMediaContributor(MediaContributor mc)
    {
        base.Character = mc.Character;
        base.ContributorAliasId = mc.ContributorAliasId;
        base.ContributorId = mc.ContributorId;
        base.IsPrimary = mc.IsPrimary;
        base.Modified = mc.Modified;
        base.RoleId = mc.RoleId;
        base.SortOrder = mc.SortOrder;
    }

    //public string Name
    //{
        //get
        //{
            //return _name;
        //}
        //set
        //{
            //_name = value;
        //}
    //}
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Code.0.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\XmlImportExportHelper.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "BBBBD5C4EBA5C9F570CBB3317A58CC5E"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\XmlImportExportHelper.cs"
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.IO;
using System.Xml;
using System.Xml.Schema;

/// <summary>
/// Summary description for XmlImportExportHelper
/// </summary>
public static class XmlImportExportHelper
{
    /// <summary>
    /// Validate xml and de-serialize it to an media object.
    /// </summary>
    /// <param name="v1"> media object, it can be a Video, VideoSeason or VideoSeries</param>
    /// <param name="xsdPath">relative path that stores schema file</param>
    /// <param name="s">strea that provides xml</param>
    /// <returns></returns>
    public static Media ValidateAndReadMediaImportXml(Media v1, string xsdPath, Stream s)
    {
        s.Position = 0;
        System.Xml.Serialization.XmlSerializer xs = new System.Xml.Serialization.XmlSerializer(v1.GetType());
        XmlReaderSettings readerSettings = new XmlReaderSettings();
        XmlSchemaSet schemaSet = new XmlSchemaSet();

        schemaSet.Add(null, HttpContext.Current.Request.PhysicalApplicationPath + xsdPath);
        readerSettings.ValidationType = ValidationType.Schema;
        readerSettings.Schemas = schemaSet;

        using (XmlReader r = XmlReader.Create(s, readerSettings))
        {
            int i = 0;
            while (r.Read())
                i++;
        }
        s.Position = 0;
        return (Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Media)(xs.Deserialize(s));
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Code.2.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\MediaRelationshipHandler.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "FE031A99AC9DEF28B9A7B5F284557928"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\MediaRelationshipHandler.cs"
using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using Microsoft.Ems.Apps.Web.Editorial;


/// <summary>
/// This class shares common codes used for handling MediaRelationship selection on
/// on Video Tools' Image and Related media tab.
/// </summary>
public class MediaRelationshipHandler
{
    /// <summary>
    /// Encoded the specified MediaRelationship key information in the dropdown list 
    /// </summary>
    /// <param name="ddl"></param>
    /// <param name="mr"></param>
    public static void BindRelationship(MediaRelationship mr, DropDownList ddl)
    {
        if (mr != null && ddl != null)
        {
            //Append relatedMediaId to each dropdown list value
            foreach (ListItem item in ddl.Items)
            {
                item.Value = string.Format("{0},{1}", item.Value, mr.RelatedMediaId);
            }

            //Remember current selection 
            int index = ddl.Items[0].Value.LastIndexOf(',');
            ddl.Items[0].Value = string.Format("{0},{1}", ddl.Items[0].Value, mr.MediaRelationshipTypeId);

            //Mark current selection
            ddl.SelectedValue = string.Format("{0},{1}", mr.MediaRelationshipTypeId, mr.RelatedMediaId);
        }
    }

    /// <summary>
    /// Update in-Session media.Relationships object with the relationship specified in the current
    /// dropdownlist.
    /// </summary>
    /// <param name="media"></param>
    /// <param name="ddl"></param>
    /// <returns></returns>
    public static void SelectRelationship(Media media, DropDownList ddl)
    {
        if (media != null && media.Relationships != null)
        {
            //Get previous selected value which encoded in ddl.Item[0]'s value
            int index = ddl.Items[0].Value.LastIndexOf(',');
            int oldRelationshipTypeId = Int32.Parse(ddl.Items[0].Value.Substring(index + 1));

            //Get current selection key
            string[] keys = ddl.SelectedValue.Split(',');
            int newRelationshipTypeId = Int32.Parse(keys[0]);
            Guid mediaId = new Guid(keys[1]);

            //Check for currently selected relatedMediaId/mediaRelationshipId pair already exists
            MediaRelationship mediaRelationship = Array.Find(media.Relationships,
                                    delegate(MediaRelationship mr)
                                    {
                                        return (mr.RelatedMediaId.Equals(mediaId) &&
                                                mr.MediaRelationshipTypeId == newRelationshipTypeId &&
                                                mr.Modified != DataChangeType.Delete);
                                    });
            if (mediaRelationship != null)
            {
                MessageBox.Show(string.Format("{0}/{1} pair value already exists; selection not allow.", mediaId, newRelationshipTypeId));

                //Undo selection
                ddl.SelectedValue = string.Format("{0},{1}", mediaRelationship.MediaRelationshipTypeId, mediaRelationship.RelatedMediaId);
                return;
            }

            //Find the mediaRelationship object being changed.
            mediaRelationship = Array.Find(media.Relationships,
                                    delegate(MediaRelationship mr)
                                    {
                                        return (mr.RelatedMediaId.Equals(mediaId) &&
                                                mr.MediaRelationshipTypeId == oldRelationshipTypeId);
                                    });
            if (mediaRelationship.Modified == DataChangeType.None)
            {
                //Need to mark the original record for deletion by cloning then set the Modified flag.
                MediaRelationship mrDelete = new MediaRelationship();
                mrDelete.RelatedMediaId = mediaRelationship.RelatedMediaId;
                mrDelete.MediaRelationshipTypeId = mediaRelationship.MediaRelationshipTypeId;
                mrDelete.Modified = DataChangeType.Delete;
                
                media.Relationships = DisplayHelper.ArrayItemAdd(media.Relationships, mrDelete);
            }

            //Update the mediaRelationship object being selected
            mediaRelationship.MediaRelationshipTypeId = Int32.Parse(keys[0]);
            mediaRelationship.Modified = DataChangeType.Update;

            //Remember the newly selected value
            ddl.Items[0].Value = string.Format("{0},{1}", 
                            ddl.Items[0].Value.Substring(0, index), 
                            mediaRelationship.MediaRelationshipTypeId);
        }
    }

    /// <summary>
    /// Delete the specified mediaId/mediaRelationshipTypeId pair from media.Relationships
    /// </summary>
    /// <param name="media"></param>
    /// <param name="mediaId"></param>
    /// <param name="mediaRelationshipTypeId"></param>
    public static void DeleteRelationship(Media media, Guid mediaId, int mediaRelationshipTypeId)
    {
        if (media != null && media.Relationships != null)
        {
            MediaRelationship mediaRelationship = Array.Find(media.Relationships,
                            delegate(MediaRelationship mr)
                            {
                                return (mr.RelatedMediaId.Equals(mediaId) &&
                                        mr.MediaRelationshipTypeId == mediaRelationshipTypeId &&
                                        mr.Modified != DataChangeType.Delete);
                            });
            if (mediaRelationship != null)
                mediaRelationship.Modified = DataChangeType.Delete;
        }
    }

    /// <summary>
    /// Checks whether there is any duplicate mediaId/mediaRelationshipTypeId pair in the list.
    /// </summary>
    /// <param name="media">Media.Relationships object to be check</param>
    /// <param name="imageRelated">Check for image related only or general</param>
    /// <returns></returns>
    public static bool CheckDuplicateRelationship(Media media, bool imageRelated)
    {
        if (media == null)
            return false;
        if (media.Relationships == null)
            return false;

        Dictionary<string, string> dict = new Dictionary<string, string>();
        foreach (MediaRelationship mr in media.Relationships)
        {
            //Not check for to-be-deleted record
            if (mr.Modified == DataChangeType.Delete)
                continue;

            //Not check for unintented type
            if (DisplayHelper.IsMediaRelationImageType(mr) != imageRelated)
                continue;

            string key = string.Format("{0},{1}", mr.RelatedMediaId, mr.MediaRelationshipTypeId);
            if (dict.ContainsKey(key))
                return true;
            else
                dict.Add(key, key);
        }
        return false;
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Code.5.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\Constants.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "C1267B6215F62DC766428001C3A1A812"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\Constants.cs"
using System;
using System.Data;
using System.Diagnostics;
using System.Configuration;
using System.Security.Cryptography.X509Certificates;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Data.SqlTypes;
using System.Net;

/// <summary>
/// Summary description for Constants
/// </summary>
public class Constants
{
    public static readonly Int32 ProviderIdForEditorial = 2;
    public static readonly Int32 ProviderIdForMicrosoft = 6;

    public static readonly Int32 MediaTypeIdForPodcast = 13;

    public static readonly Int32 MediaRelationshipTypeIdMediaToImage = 15;

    public static readonly Int32 CategorySystemIdPodcast = 5000;

    public static readonly DateTime WithdrawnPodcastDate = new DateTime(2999, 1, 1);

    public static readonly String SessionVariable_PodcastContext = "podcast_context";
    public static readonly String SessionVariable_PodcastSubmissionsInstance = "podcast_submissions_instance";
    public static readonly String SessionVariable_PodcastSearchSet = "podcast_submissions_set";
    public static readonly String SessionVariable_PodcastEpisodesSet = "podcast_episodes_set";
    public static readonly String SessionVariable_PodcastSearchSetTimestamp = "podcast_submissions_set_time_stamp";
    public static readonly String SessionVariable_PodcastSearchPageIndex = "podcast_search_page_number";
    public static readonly String SessionVariable_PodcastSubmissionsPageIndex = "podcast_submissions_page_number";
    public static readonly String SessionVariable_PodcastEpisodesPageIndex = "podcast_episode_page_number";
    public static readonly String SessionVariable_PodcastEasyBacktrack = "podcast_easy_backtrack";
    public static readonly String SessionVariable_MediaAssociatedImageMedia = "MediaAssociatedImageMedia";


    public static readonly Int32 JpgImageFormatId = 4;
    public static readonly Int32 PngImageFormatId = 5;
    /// <summary>
    /// Represents the Max date which can be stored in SQL db, this is presently set to SQLDatetime.MaxValue
    /// </summary>
    public static readonly DateTime CatalogMaxDate = SqlDateTime.MaxValue.Value;
    /// <summary>
    /// Represents the Min date which can be stored in SQL db, this is presently set to SQLDatetime.MinValue
    /// </summary>
    public static readonly DateTime CatalogMinDate = SqlDateTime.MinValue.Value;

    public enum MediaRelationshipTypeId
    {
        MediaToAssociatedDownload=2,
        VideoTrailerToGame=4,
        SeriesToEpisode=7,
        SeasonToEpisode=8,
        VirtualChannelToVideo=9,
        RelatedAlbum=18,
        PromoToMedia=20,
        MediaToPreview=21,
        RelatedPlaylist=28,
        MusicVideoTrack=30
    }

    public enum MediaTypeId
    {
        None = 0,
        TVEpisode = 8,
        TVSeason = 9,
        TVSeries = 10
    }

    //private static readonly String EMSEditorialEventSource = "EMS Editorial";

	public Constants()
	{
        /**
         * TODO ajaffray to fix in sprint 5
        try
        {
            if (!EventLog.Exists(EMSEditorialEventSource))
            {
                EventLog.CreateEventSource(EMSEditorialEventSource, "EMS");
            }
        }
        catch (Exception)
        {
        }
         * **/
	}

    private static CatalogServices _proxy = null;
    private static Object _proxyLockObject = new Object();
    public static CatalogServices Proxy
    {
        get
        {
            if (_proxy == null)
            {
                lock(_proxyLockObject)
                {
                    if (_proxy == null)
                    {
                        _proxy = new CatalogServices();
                        _proxy.Url = ConfigurationManager.AppSettings["CatalogWebServiceUrl"];
                        _proxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
                        string webproxy = string.Empty;
                        try
                        {
                            webproxy = ConfigurationManager.AppSettings["webproxy"];
                            if (string.IsNullOrEmpty(webproxy))
                            {
                                _proxy.Proxy = new WebProxy();
                            }
                            else
                            {
                                _proxy.Proxy = new WebProxy(webproxy, true);
                            }
                        }
                        catch (Exception ex)
                        {
                            _proxy = null; // Null out proxy value so it will reload next time
                            throw new ArgumentException("Could not set proxy value from configuration, value used was invalid: " + webproxy, ex);
                        }

                        String certNameToFind = ConfigurationManager.AppSettings["CatalogWebServiceCertName"];
                        X509Store store = new X509Store("My", StoreLocation.LocalMachine);
                        try
                        {
                            store.Open(OpenFlags.ReadOnly);
                            X509Certificate2Collection certs = store.Certificates;
                            foreach (X509Certificate2 cert in certs)
                            {
                                String[] subjectAttributes = cert.Subject.Split(',');
                                String name = null;
                                foreach (String subjectAttribute in subjectAttributes)
                                {
                                    if (subjectAttribute.Trim().StartsWith("CN="))
                                    {
                                        name = subjectAttribute.Trim().Substring(3);
                                        if (name == certNameToFind)
                                        {
                                            _proxy.ClientCertificates.Add(cert);
                                        }
                                    }
                                }
                            }
                        }
                        finally
                        {
                            store.Close();
                        }
                        CatalogServices.Catalog = _proxy;
                    }
                }
            }
            return _proxy;
        }
    }

    public static TimeSpan PodcastDownloadTimeout
    {
        get
        {
            try
            {
                return TimeSpan.Parse(ConfigurationManager.AppSettings["PodcastDownloadTimeout"]);
            }
            catch (Exception)
            {
                return new TimeSpan(0, 0, 15);
            }
        }
    }

    public static String PodcastDownloadProxy
    {
        get
        {
            String podcastDownloadProxyServer = null;
            try
            {

                podcastDownloadProxyServer = ConfigurationManager.AppSettings["PodcastDownloadProxy"];
            }
            catch (Exception)
            {
            }

            if (podcastDownloadProxyServer == String.Empty)
            {
                podcastDownloadProxyServer = null;
            }
            return podcastDownloadProxyServer;
        }
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Code.6.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\ImageFileHandler.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "A9D72ABE7E3E6F8254E74C337B5133F9"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\ImageFileHandler.cs"
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Collections;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Configuration;


/// <summary>
/// Helper class used by web componenet to
/// finish physical image file operation.(upload/prop images).
/// </summary>
public class ImageFileHandler
{
#region Private fields
    /// <summary>
    /// the following 6 private fields are used to store settings from 
    /// web.config to define the behavor of ImageFileHandler class.
    /// </summary>
    private static int jpgCompressionLevel = 90;
    private static string limeLightURLPath = string.Empty;
    private static string tempImageFolder = string.Empty;
    private static string sanImageFolder = string.Empty;
    private static string tempStorageURLPrefix = string.Empty;
    private static int aspectRatioWarningPercentage = 3;
    private static string limeLightURLPrefix = string.Empty;

    /// <summary>
    /// The size id to use for the orignal image
    /// AJ: this should not be set-able!
    /// </summary>
    private static int originalImageSizeID;
    private static readonly Int32 customImageSizeId = -1;
    private static readonly Int32 thumbnailImageSizeId = 4;
    private static readonly Int32 podcastImageSizeId = 11;
    
    #endregion
#region Properties
    public static int AspectRatioWarningPercentage
    {
        get { return ImageFileHandler.aspectRatioWarningPercentage; }
        set { ImageFileHandler.aspectRatioWarningPercentage = value; }
    }
    public static Int32 CustomImageSizeId
    {
        get { return customImageSizeId; }
    }

    public static Int32 ThumbnailImageSizeId
    {
        get { return thumbnailImageSizeId; }
    }

    public static Int32 PodcastImageSizeId
    {
        get { return podcastImageSizeId; }
    }

    public static int OriginalImageSizeID
    {
        get { return ImageFileHandler.originalImageSizeID; }
        set { ImageFileHandler.originalImageSizeID = value; }
    }
    public static string TempStorageURLPrefix
    {
        get { return ImageFileHandler.tempStorageURLPrefix; }
        set { ImageFileHandler.tempStorageURLPrefix = value; }
    }
    public static string LimeLightURLPrefix
    {
        get { return ImageFileHandler.limeLightURLPrefix; }
        set { ImageFileHandler.limeLightURLPrefix = value; }
    }



    public static string SanImageFolder
    {
        get
        {
            return sanImageFolder;
        }
        set
        {
            sanImageFolder = value;
        }
    }

    public static string TempImageFolder
    {
        get
        {
            return tempImageFolder;
        }
        set
        {
            tempImageFolder = value;
        }
    }

    public static int JpgCompressionLevel
    {
        get
        {
            return jpgCompressionLevel;
        }
        set
        {
            jpgCompressionLevel = value;
        }
    }
 #endregion    
#region Public Method
    /// <summary>
    /// LimeLightURLPath used to hold image content.
    /// </summary>
    public static string LimeLightURLPath
    {
        get 
        { 
            return ImageFileHandler.limeLightURLPath; 
        }
        set 
        { 
            ImageFileHandler.limeLightURLPath = value; 
        }
    }
    /// <summary>
    /// Default constructor.
    /// </summary>
    public ImageFileHandler()
    {

    }
		
    /// <summary>
    /// Uploads an image to both temporary storage and the SAN
    /// </summary>
    /// <param name="image">The image object to be uploaded</param>
    /// <param name="fileGuid">The GUID of the image if previously uploaded, other Guid.Empty</param>
    public static Guid UploadImage(System.Drawing.Image image, Guid fileGuid)
    {
        // We only handle JPEGs and PNGs
        String fileExtension = ".jpg";

        // Get the byte stream for this image
        MemoryStream ms = new MemoryStream();
        image.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
        Byte[] imageBytes = ms.GetBuffer();

        // Upload to temp file storage first. If the guid provided is not Guid.Empty,
        // then it will attempt to overwrite any existing image at that location
        // Otherwise, we get back a new guid
        Guid newGuid = WriteFileToStorage(fileExtension, imageBytes, fileGuid, tempImageFolder);

        // Now push the image out to the SAN folder.
        return WriteFileToStorage(fileExtension, imageBytes, newGuid, sanImageFolder);
    }
    /// <summary>
    /// Helper function to load config from web.config
    /// </summary>
    public static void LoadPropertyFromWebCfgFile()
    {
        try
        {
            ImageFileHandler.TempImageFolder = ConfigurationManager.AppSettings["TempStorageUNCPath"];
            ImageFileHandler.TempStorageURLPrefix = ConfigurationManager.AppSettings["TempStorageURLPrefix"];
            ImageFileHandler.SanImageFolder = ConfigurationManager.AppSettings["SanUNCPath"];
            ImageFileHandler.LimeLightURLPrefix = ConfigurationManager.AppSettings["LimeLightURLPrefix"];
            ImageFileHandler.LimeLightURLPath = ConfigurationManager.AppSettings["LimeLightURLPath"];
            ImageFileHandler.AspectRatioWarningPercentage = int.Parse(ConfigurationManager.AppSettings["AspectRatioWarningPercentage"]);
            ImageFileHandler.JpgCompressionLevel = int.Parse(ConfigurationManager.AppSettings["JpgCompressionLevel"]);
        }
        catch (Exception ex)
        {
            throw new Exception("Failed to load config value.", ex);
        }
    }
    
    /// <summary>
    /// Upload Image file to temp storange and san storage. this function does not prop resized image.
    /// </summary>
    /// <param name="fileInfo">Info the upload file</param>
    /// <param name="file">the binary content of the file</param>
    /// <param name="fileGuid">
    /// Guid of the file. this parameter can be Guid.empty or an existing guid. If it is Guid.empty, 
    /// a new guid will be generated. If fileGuid is a valid non-empty guid, we will try to find the 
    /// existing file and use the file content passed by file paramemter to replace the existing one.
    /// </param>
    /// <returns>the guid for the file uploaded</returns>
    public static Guid UploadImage(FileInfo fileInfo, byte[] file, Guid fileGuid)
    {
        //we get the result, just in case if we pass guid.empty as a input, the return guid will not be the same as 
        //fileGuid, when we put it into san, we need to use the new guid. 
        Guid guid = WriteFileToStorage(fileInfo.Extension, file, fileGuid, tempImageFolder);
        return WriteFileToStorage(fileInfo.Extension, file, guid, sanImageFolder);
    }
    /// <summary>
    /// Check aspect ration change is larger than certain percentage or not. 
    /// if it is return return false. otherwise return true.
    /// </summary>
    /// <param name="sourceWidth">Width of the source image</param>
    /// <param name="sourceHeight">Height of the source image</param>
    /// <param name="destWidth">Width of the resized image</param>
    /// <param name="destHeight">Height of the resized image</param>
    /// <param name="threadholdPercentage">Threadhold of the aspect ration change.</param>
    /// <returns>If the change is equal or larger than threadholdPercentage, return false;
    /// otherwise true.</returns>
    public static bool CheckAspectRatio(int sourceWidth, int sourceHeight, int destWidth, int destHeight, int threadholdPercentage)
    {
        if (sourceHeight <= 0 || sourceWidth <= 0 || destHeight <= 0 || destWidth <= 0 || threadholdPercentage < 0 || threadholdPercentage > 100)
            return false;
        float soruceImageAspectRatio = (float)sourceWidth / (float)sourceHeight;
        float destImageAspectRatio = (float)destWidth / (float)destHeight;
        return System.Math.Abs(
            (soruceImageAspectRatio - destImageAspectRatio) / soruceImageAspectRatio
        ) < ((float)threadholdPercentage / 100.0);
    }
    /// <summary>
    /// return properties of the image by out parameters.
    /// </summary>
    /// <param name="ImageInstanceID">ID of the image</param>
    /// <param name="width">out parameter to return width of the image</param>
    /// <param name="height">out parameter to return height of the image</param>
    /// <param name="fileSize">out parameter to return file size of the image</param>
    /// <param name="fileExtension">out parameter to return file extension of the image</param>
    public static void GetImageFileProperty(Guid ImageInstanceID, out int width, out int height, out int fileSize, out string fileExtension)
    {
        string ImageInstanceFileName = string.Empty;
        string originalSizeImageFolderPath = sanImageFolder + @"\" + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray()) + @"\" + ImageInstanceID.ToString().Substring(ImageInstanceID.ToString().Length-2, 2) + @"\";
        try
        {
            ImageInstanceFileName = Directory.GetFiles(originalSizeImageFolderPath, "*" + ImageInstanceID.ToString() + "*")[0];
        }
        catch (Exception ex)
        {
            throw new IOException("Original file with ID: " + ImageInstanceID.ToString() + " does not exist.", ex);
        }
        FileInfo fileInfo = new FileInfo(ImageInstanceFileName);
        System.Drawing.Image originalImage = System.Drawing.Image.FromFile(ImageInstanceFileName);
        fileExtension = fileInfo.Extension;
        fileSize = (int)fileInfo.Length;
        width = originalImage.Width;
        height = originalImage.Height;
        originalImage.Dispose();
    }
    /// <summary>
    /// Prop images to lime light network
    /// </summary>
    /// <param name="image">image object to be proped</param>
    /// <param name="sizeTable">Hashtable,the key is the guid of the image instance, and the element 
    /// is ImageSize object which contains the size ID and the width& height the image to be resized to </param>
    /// <param name="originalSizeImageInstanceID">The image instance that contains the original image to be used
    /// as a source for resizing operation</param>
    public static void PropImage(Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image image, Hashtable sizeTable, Guid originalSizeImageInstanceID)
    {
        string originalSizeImageFolderPath = tempImageFolder + @"\" + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray()) + @"\" + originalSizeImageInstanceID.ToString().Substring(originalSizeImageInstanceID.ToString().Length - 2, 2) + @"\";
        string OriginalImageFileName;
        System.Drawing.Image originalImage;
        System.Drawing.Image destImage;
        string originalImageFileExtension;
        string destImageFileFullPath;
        MemoryStream destFileStream;

        try
        {
            OriginalImageFileName = Directory.GetFiles(originalSizeImageFolderPath, "*" + originalSizeImageInstanceID.ToString() + "*")[0];
        }
        catch
        {
            throw new IOException("Original file with ID: " + originalSizeImageInstanceID.ToString() + " does not exist.");
        }
        originalImageFileExtension = new FileInfo(OriginalImageFileName).Extension;
        originalImage = System.Drawing.Image.FromFile(OriginalImageFileName);
        try
        {

            foreach (Guid imInstID in sizeTable.Keys)
            {
                bool foundmatch = false;
                ImageInstance currentImInst = null;
                foreach (ImageInstance imInst in image.Instances)
                {
                    if (imInst.Id == imInstID)
                    {
                        currentImInst = imInst;
                        foundmatch = true;
                        break;
                    }
                }

                if (!foundmatch)
                    throw new ArgumentException("Key: " + imInstID.ToString() + " in size table not in image instances of the image");
                destImageFileFullPath = tempImageFolder + @"\" + imInstID.ToString().Substring(imInstID.ToString().Length - 2, 2) + @"\" + imInstID + originalImageFileExtension;

                if (originalImage.Width == ((ImageSize)(sizeTable[imInstID])).Width && originalImage.Height == ((ImageSize)(sizeTable[imInstID])).Height)
                {
                    destFileStream = new MemoryStream(File.ReadAllBytes(OriginalImageFileName));
                }
                else
                {
                    if (originalImage.PixelFormat == PixelFormat.Indexed
                        || originalImage.PixelFormat == PixelFormat.Format8bppIndexed
                        || originalImage.PixelFormat == PixelFormat.Format4bppIndexed
                        || originalImage.PixelFormat == PixelFormat.Format1bppIndexed
                        )
                    {
                        destImage = new Bitmap(((ImageSize)(sizeTable[imInstID])).Width, ((ImageSize)(sizeTable[imInstID])).Height, PixelFormat.Format24bppRgb);

                    }
                    else
                    {
                        destImage = new Bitmap(((ImageSize)(sizeTable[imInstID])).Width, ((ImageSize)(sizeTable[imInstID])).Height, originalImage.PixelFormat);
                    }
                    Graphics graphic = Graphics.FromImage(destImage);
                    graphic.CompositingQuality = CompositingQuality.HighQuality;
                    graphic.SmoothingMode = SmoothingMode.HighQuality;
                    graphic.InterpolationMode = InterpolationMode.HighQualityBicubic;
                    graphic.DrawImage(originalImage,
                        new Rectangle(0, 0, ((ImageSize)(sizeTable[imInstID])).Width, ((ImageSize)(sizeTable[imInstID])).Height)
                        );
                    try
                    {
                        destFileStream = new MemoryStream();
                        if (originalImageFileExtension.ToLower().EndsWith("jpg") || originalImageFileExtension.ToLower().EndsWith("jpeg"))
                        {
                            System.Drawing.Imaging.Encoder qualityEncoder = System.Drawing.Imaging.Encoder.Quality;
                            EncoderParameter ratio = new EncoderParameter(qualityEncoder, jpgCompressionLevel);
                            // Add the quality parameter to the list
                            EncoderParameters codecParams = new EncoderParameters(1);
                            codecParams.Param[0] = ratio;
                            ImageCodecInfo codecInfo = GetEncoderInfo("image/jpeg");
                            destImage.Save(destFileStream, codecInfo, codecParams);
                        }
                        else if (originalImageFileExtension.ToLower().EndsWith("png"))
                        {

                            destImage.Save(destFileStream, System.Drawing.Imaging.ImageFormat.Png);
                        }
                        else
                        {
                            throw new ArgumentException("The original Image's format: " + originalImageFileExtension + " is not supported.");
                        }
                    }
                    catch (IOException ex)
                    {
                        throw new IOException("IO error while writing image with ID: " + originalSizeImageInstanceID.ToString() + ".", ex);
                    }

                }
                currentImInst.FileSize = (int)destFileStream.Length;
                //TODO: need to modify it after confirm with PM.
                currentImInst.FileUrl = GenerateLiveURL(imInstID, originalImageFileExtension);
                //to tmp folder
                WriteFileToStorage(originalImageFileExtension, destFileStream.ToArray(), imInstID, tempImageFolder);
                //to san folder
                WriteFileToStorage(originalImageFileExtension, destFileStream.ToArray(), imInstID, sanImageFolder);
                destFileStream.Close();
            }
        }
        catch (Exception)
        {
            if (originalImage != null)
                originalImage.Dispose();
            throw;
        }
        originalImage.Dispose();
    }
	#endregion 
#region Private Methods
    private static Guid WriteFileToStorage(string fileExtension, byte[] fileArray, Guid fileGuid, string destImageFolder)
    {
        if (!(fileExtension.ToLower().EndsWith("jpg") ||
            fileExtension.ToLower().EndsWith("jpeg") ||
            fileExtension.ToLower().EndsWith("png")
            ))
            throw new ArgumentException("Picture file must be in jpg/jpeg or png format.");
        Guid newFileGuid = fileGuid == null || fileGuid == Guid.Empty ? Guid.NewGuid() : fileGuid;
        
        try
        {
            if (!Directory.Exists(destImageFolder + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray())))
                Directory.CreateDirectory(destImageFolder + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray()));
            string TargetFolderPath = destImageFolder + @"\" + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray()) + @"\" + newFileGuid.ToString().Substring(newFileGuid.ToString().Length - 2, 2) + @"\";
            string TargetFilePath = TargetFolderPath + newFileGuid.ToString() + fileExtension;
            if (!Directory.Exists(TargetFolderPath))
                Directory.CreateDirectory(TargetFolderPath);
            if (File.Exists(TargetFilePath))
            {
                if (!(new FileInfo(TargetFilePath).Length == fileArray.Length) && fileGuid == newFileGuid)
                {
                    File.Delete(TargetFilePath);
                    FileStream fs = new FileStream(TargetFilePath, FileMode.CreateNew);
                    // Create the writer for data.
                    BinaryWriter w = new BinaryWriter(fs);
                    // Write data to Test.data.
                    w.Write(fileArray);
                    w.Close();
                    fs.Close();
                    fs = null;
                    w = null;
                    //File.WriteAllBytes(TargetFilePath, fileArray);
                }
            }
            else
            {
                FileStream fs = new FileStream(TargetFilePath, FileMode.CreateNew);
                // Create the writer for data.
                BinaryWriter w = new BinaryWriter(fs);
                // Write data to Test.data.
                w.Write(fileArray);
                w.Close();
                fs.Close();
                fs = null;
                w = null;
                // File.WriteAllBytes(TargetFilePath, fileArray);
            }
        }
        catch (IOException ex)
        {
            throw new IOException("Error occured during write image file " + newFileGuid.ToString() + ".", ex);
        }
        return newFileGuid;
    }
    //TODO: modify it after getting the method to generate live url.
    private static string GenerateLiveURL(Guid imInstID, string originalImageFileExtension)
    {
        return ImageFileHandler.LimeLightURLPrefix.TrimEnd("/".ToCharArray()) + "/" + ImageFileHandler.limeLightURLPath.Trim("/".ToCharArray()) + "/" + imInstID.ToString().Substring(imInstID.ToString().Length - 2, 2) + "/" + imInstID.ToString() + originalImageFileExtension;
    }
    private static ImageCodecInfo GetEncoderInfo(String mimeType)
    {
        int j;
        ImageCodecInfo[] encoders;
        encoders = ImageCodecInfo.GetImageEncoders();
        for (j = 0; j < encoders.Length; j++)
        {
            if (encoders[j].MimeType == mimeType)
                return encoders[j];
        } return null;
    } 
#endregion
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Code.3.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\DisplayHelper.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "0007B17684FE92448A7CF6EF8CC6845D"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\DisplayHelper.cs"
using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Text;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    /// <summary>
    /// This class contains helper functions for UI control display.
    /// </summary>
    public class DisplayHelper
    {
        /// <summary>
        /// Added the given item to the specified ListBox in sorted order by value.
        /// </summary>
        /// <param name="item">The list item to be added</param>
        /// <param name="listBox">The listBox those item to be added to</param>
        public static void ListBoxSortedAdd(ListItem item, ListBox listBox)
        {
            if (item == null || listBox == null)
                return;

            int index = 0;
            for (int i = 0; i < listBox.Items.Count; i++)
            {
                if (listBox.Items[i].Value.CompareTo(item.Value) < 0)
                    index++;
                else
                    break;
            }
            listBox.Items.Insert(index, item);
        }

        /// <summary>
        /// Added the given item to the specified ListBox in sorted order by value. Will
        /// attempt to caste the value as an integer, if that does not work it will compare
        /// the string versions
        /// </summary>
        /// <param name="item">The list item to be added</param>
        /// <param name="listBox">The listBox those item to be added to</param>
        public static void ListBoxSortedAddValueAsInt(ListItem item, ListBox listBox)
        {
            if (item == null || listBox == null)
                return;

            int index = 0;
            for (int i = 0; i < listBox.Items.Count; i++)
            {
                int integer1 = 0;
                int integer2 = 0;
                if (int.TryParse(listBox.Items[i].Value, out integer1)
                && int.TryParse(item.Value, out integer2))
                {
                    if (integer1 < integer2)
                        index++;
                    else
                        break;
                }
                else
                {
                    if (listBox.Items[i].Value.CompareTo(item.Value) < 0)
                        index++;
                    else
                        break;
                }
            }
            listBox.Items.Insert(index, item);
        }

        /// <summary>
        /// Remove all items from the list box.
        /// </summary>
        /// <param name="listBox">ListBox to clear</param>
        public static void ResetListBox(ListBox listBox)
        {
            listBox.Items.Clear();
        }

        /// <summary>
        /// Reset each item from right to left list box.
        /// </summary>
        /// <param name="leftListBox">The left ListBox</param>
        /// <param name="rightListBox">The right ListBox</param>
        public static void ResetListBox(ListBox leftListBox, ListBox rightListBox)
        {
            foreach (ListItem item in rightListBox.Items)
            {
                ListBoxSortedAdd(item, leftListBox);
            }
            rightListBox.Items.Clear();
        }

        /// <summary>
        /// Return the list of values from the list box.
        /// </summary>
        /// <param name="listBox"></param>
        /// <returns></returns>
        public static List<String> GetListBoxItem(ListBox listBox)
        {
            if (listBox.Items.Count == 0)
                return null;

            List<string> result = new List<String>();
            foreach (ListItem item in listBox.Items)
            {
                result.Add(item.Value);
            }
            return result;
        }

        /// <summary>
        /// Move list item from one list box to another.
        /// </summary>
        /// <param name="fromListBox">The source ListBox</param>
        /// <param name="toListBox">The destination ListBox</param>
        public static void MoveListBoxItem(ListBox fromListBox, ListBox toListBox)
        {
            ListItem item = fromListBox.SelectedItem;
            if (item != null)
            {
                item.Selected = false;
                fromListBox.Items.Remove(item);
                if (!toListBox.Items.Contains(item))
                {
                    ListBoxSortedAddValueAsInt(item, toListBox);
                }
            }
        }

        /// <summary>
        /// Select the target item from the left ListBox and move it to the right ListBox.
        /// </summary>
        /// <param name="target"></param>
        /// <param name="listBoxLeft"></param>
        /// <param name="listBoxRight"></param>
        public static void SelectListBoxItem(int target, ListBox leftListBox, ListBox rightListBox)
        {
            foreach (ListItem item in leftListBox.Items)
            {
                if (item.Value == target.ToString())
                {
                    ListBoxSortedAdd(item, rightListBox);
                    leftListBox.Items.Remove(item);
                    return;
                }
            }
        }

        /// <summary>
        /// Select the target item from the left ListBox and move it to the right ListBox.
        /// </summary>
        /// <param name="target"></param>
        /// <param name="listBoxLeft"></param>
        /// <param name="listBoxRight"></param>
        public static void SelectListBoxItem(string target, ListBox leftListBox, ListBox rightListBox)
        {
            foreach (ListItem item in leftListBox.Items)
            {
                if (item.Value == target)
                {
                    ListBoxSortedAdd(item, rightListBox);
                    leftListBox.Items.Remove(item);
                    return;
                }
            }
        }

        /// <summary>
        /// Select the target item from the DropDownList items.
        /// </summary>
        /// <param name="target">The target item to match</param>
        /// <param name="items">The list of items to search</param>
        public static void SelectDropDownListItem(int target, DropDownList list)
        {
            list.ClearSelection();
            foreach (ListItem item in list.Items)
            {
                if (item.Value == target.ToString())
                {
                    item.Selected = true;
                    break;
                }
            }
        }

        /// <summary>
        /// Select the target item from the DropDownList items.
        /// </summary>
        /// <param name="target">The target item to match</param>
        /// <param name="items">The list of items to search</param>
        public static void SelectDropDownListItem(int? target, DropDownList list)
        {
            list.ClearSelection();
            if (target == null)
            {
                list.SelectedIndex = 0;
                return;
            }

            foreach (ListItem item in list.Items)
            {
                if (item.Value == target.ToString())
                {
                    item.Selected = true;
                    break;
                }
            }
        }

        /// <summary>
        /// Select the target item from the DropDownList items.
        /// </summary>
        /// <param name="target">The target item to match</param>
        /// <param name="items">The list of items to search</param>
        public static void SelectDropDownListItem(string target, DropDownList list)
        {
            list.ClearSelection();
            foreach (ListItem item in list.Items)
            {
                if (item.Value == target)
                {
                    item.Selected = true;
                    break;
                }
            }
        }

        /// <summary>
        /// Determine whether the specified target value is selected in the list box
        /// </summary>
        /// <param name="target">Target value to be check</param>
        /// <param name="list">ListBox to be check against</param>
        /// <returns></returns>
        public static bool IsItemSelected(int target, ListBox list)
        {
            foreach (ListItem item in list.Items)
            {
                if (item.Value == target.ToString())
                {
                    return true;
                }
            }
            return false;
        }


        /// <summary>
        /// Determine whether the specified target value is selected in the list box
        /// </summary>
        /// <param name="target">Target value to be check</param>
        /// <param name="list">ListBox to be check against</param>
        /// <returns></returns>
        public static bool IsItemSelected(string target, ListBox list)
        {
            foreach (ListItem item in list.Items)
            {
                if (item.Value == target)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Return the passed datetime value in text format: mm/dd/yyyy
        /// </summary>
        /// <param name="dateTime">DateTime value to be formatted</param>
        /// <returns></returns>
        public static string GetDateDisplay(DateTime dateTime)
        {
            string result = "";
            if (dateTime != null && dateTime != DateTime.MinValue)
            {
                result = String.Format("{0:D2}/{1:D2}/{2:D4}", dateTime.Month, dateTime.Day, dateTime.Year);
            }
            return result;
        }

        /// <summary>
        /// Return the passed datetime value in text format: mm/dd/yyyy
        /// </summary>
        /// <param name="dateTime">DateTime value to be formatted</param>
        /// <returns></returns>
        public static string GetDateDisplay(DateTime? dateTime)
        {
            string result = "";
            if (dateTime.HasValue && dateTime != DateTime.MinValue)
            {
                result = String.Format("{0:D2}/{1:D2}/{2:D4}", dateTime.Value.Month, dateTime.Value.Day, dateTime.Value.Year);
            }
            return result;
        }

        /// <summary>
        /// Validate whether the specified date string represents a valid date.
        /// </summary>
        /// <param name="dateTime">DateTime value to be checked</param>
        /// <returns></returns>
        public static bool IsValidDate(string dateTime)
        {
            DateTime dt;
            return DateTime.TryParse(dateTime, out dt);
        }
        /// <summary>
        /// Validates the Datetime to check for SQL max / min date and replace it in case the date is greater than SQL Max/Min date
        /// </summary>
        /// <param name="dateTime"></param>
        /// /// <param name="paramName"></param>
        public static bool ValidateDate(DateTime dateTime)
        {
            if (dateTime > Constants.CatalogMaxDate)
            {
                return false;
            }
            if (dateTime < Constants.CatalogMinDate)
            {
                return false;
            }
            return true;
        }
        /// <summary>
        /// Validates the Datetime to check for SQL max / min date and replace it in case the date is greater than SQL Max/Min date
        /// </summary>
        /// <param name="dateTime"></param>
        /// <param name="paramName"></param>
        public static bool ValidateDate(DateTime? dateTime)
        {
            if (dateTime.HasValue)
            {
                if (dateTime.Value > Constants.CatalogMaxDate)
                {
                    return false;
                }
                if (dateTime.Value < Constants.CatalogMinDate)
                {
                    return false;
                }
            }
            return true;
        }
        /// <summary>
        /// Validate whether the specified date strings in range.
        /// </summary>
        /// <param name="begDateTime"></param>
        /// <param name="endDateTime"></param>
        /// <returns></returns>
        public static bool IsValidDateRange(string begDateTime, string endDateTime)
        {
            if (IsValidDate(begDateTime) == false)
                return false;
            if (IsValidDate(endDateTime) == false)
                return false;

            DateTime dt1, dt2;
            dt1 = DateTime.Parse(begDateTime);
            dt2 = DateTime.Parse(endDateTime);
            if (dt1 > dt2)
                return false;

            return true;
        }

        /// <summary>
        /// Return the passed text string as datetime value
        /// </summary>
        /// <param name="dateTime">Datetime string</param>
        /// <param name="defaultHour">default hour to use</param>
        /// <param name="defaultMinue">default minute to use</param>
        /// <returns></returns>
        public static DateTime GetDateValue(string dateTime, int defaultHour, int defaultMinute)
        {
            DateTime result = DateTime.MinValue;
            if (dateTime != null && dateTime.Trim().Length > 0)
            {
                if (DateTime.TryParse(dateTime, out result) == true)
                    result = new DateTime(result.Year, result.Month, result.Day, defaultHour, defaultMinute, 0, DateTimeKind.Utc);
            }
            return result;
        }

        public static T[] ArrayItemAdd<T>(T[] arrItems, T item)
        {
            int count = (arrItems == null) ? 1 : arrItems.Length + 1;
            T[] newArray = new T[count];

            if (arrItems != null)
                Array.Copy(arrItems, newArray, arrItems.Length);

            newArray[count-1] = item;
            return newArray;
        }

        public static T[] ArrayItemRemove<T>(T[] array, T item)
        {
            T[] newArray = null;

            if (array.Length > 1)
            {
                int itemRemoving = Array.FindIndex(array, delegate(T t) { return item.Equals(t) ;});

                if (itemRemoving != -1)
                {
                    newArray = new T[array.Length - 1];
                    Array.Copy(array, newArray, itemRemoving);
                    Array.Copy(array, itemRemoving + 1, newArray, itemRemoving, array.Length - itemRemoving - 1);
                }
            }

            return newArray;
        }

        public static bool IsRelatedToVideo(MediaRelationship mrs)
        {
            int type = mrs.MediaRelationshipTypeId;
            if ((type == (int)Constants.MediaRelationshipTypeId.MediaToAssociatedDownload
                || type == (int)Constants.MediaRelationshipTypeId.MediaToPreview
                || type == (int)Constants.MediaRelationshipTypeId.MusicVideoTrack
                || type == (int)Constants.MediaRelationshipTypeId.PromoToMedia
                || type == (int)Constants.MediaRelationshipTypeId.RelatedAlbum
                || type == (int)Constants.MediaRelationshipTypeId.RelatedPlaylist
                || type == (int)Constants.MediaRelationshipTypeId.SeasonToEpisode
                || type == (int)Constants.MediaRelationshipTypeId.SeriesToEpisode
                || type == (int)Constants.MediaRelationshipTypeId.VideoTrailerToGame
                || type == (int)Constants.MediaRelationshipTypeId.VirtualChannelToVideo)
                && mrs.Modified != DataChangeType.Delete)
            {
                return true;
            }            

            return false;
        }

        public static bool IsMediaRelationImageType(MediaRelationship mr)
        {
            return ((mr.MediaRelationshipTypeId == 15) ||
                    (mr.MediaRelationshipTypeId == 19) ||
                    (mr.MediaRelationshipTypeId == 22) ||
                    (mr.MediaRelationshipTypeId == 23) ||
                    (mr.MediaRelationshipTypeId == 24) ||
                    (mr.MediaRelationshipTypeId == 25) ||
                    (mr.MediaRelationshipTypeId == 26) ||
                    (mr.MediaRelationshipTypeId == 27))
                    ;
        }


        public static bool IsMediaRelationOtherType(MediaRelationship mr)
        {
            return ((mr.MediaRelationshipTypeId == 2) ||
                    (mr.MediaRelationshipTypeId == 7) ||
                    (mr.MediaRelationshipTypeId == 18) ||
                    (mr.MediaRelationshipTypeId == 20) ||
                    (mr.MediaRelationshipTypeId == 21) ||
                    (mr.MediaRelationshipTypeId == 28) ||
                    (mr.MediaRelationshipTypeId == 30))
                    ;
        }

        /// <summary>
        /// This function determines whether the URL contains the specified name
        /// </summary>
        /// <param name="context"></param>
        /// <param name="pageName"></param>
        /// <returns></returns>
        public static bool IsUrlContain(HttpContext context, string pageName)
        {
            if (context != null)
            {
                string url = context.Request.RawUrl.ToLowerInvariant();
                return (url.IndexOf(pageName.ToLower()) >= 0);
            }
            else
                return false;
        }

        public static string BuildRepresentStringForVideoInstance(VideoInstance vi, Locale[] locales )
        {
            StringBuilder text = new StringBuilder(350);
            int definitionId = vi.VideoDefinitionId;

            VideoDefinition[] definitions = Constants.Proxy.GetVideoDefinition();
            VideoDefinition vd = Array.Find(definitions, delegate(VideoDefinition vdd) { return vdd.Id == definitionId; });

            if (vd != null)
            {
                text.Append(vd.Name);
                text.Append("; ");
            }
            else
            {
                text.Append(" , ");
            }

            text.Append(vi.AudioChannel);
            text.Append(" Ch. Audio, ");

            VideoAudioTrackLanguage[] audioTrackLanguages = vi.AudioTrackLanguages;
            if ((audioTrackLanguages != null) && (audioTrackLanguages.Length > 0))
            {
                int lcid = audioTrackLanguages[0].Lcid;
                Locale locale = Array.Find(locales, delegate(Locale l) { return l.LCID == lcid; });
                text.Append(locale.LocaleCode);
            }

            text.Append("; Subtitle: ");

            int? burntInSubtitleLcid = vi.BurntInSubtitleLcid;

            if (burntInSubtitleLcid != null)
            {
                Locale burntLocale = Array.Find(locales, delegate(Locale l) { return l.LCID == burntInSubtitleLcid; });

                if (burntLocale != null)
                {
                    text.Append(burntLocale.LocaleCode);
                }
                else
                {
                    text.Append("None");
                }
            }
            else
            {
                text.Append("None");
            }

            text.Append("; Preview: ");

            bool isPreview = vi.IsPreview;

            if (isPreview)
            {
                Country country = Constants.Proxy.GetCountry(vi.Preview.CountryCode);
                if (country != null)
                {
                    if (!string.IsNullOrEmpty(country.Name))
                    {
                        text.Append(country.Name);
                    }
                }
            }
            else
            {
                text.Append("No");
            }

            return text.ToString();
        }
    }
}

#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Code.7.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\AssemblyInfo.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "F76961A32B3F322D890F7823249572ED"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\AssemblyInfo.cs"
using System.Reflection;
using System.Runtime.CompilerServices;

//
// if you want to use a private version file and customize this, see
// file://samsndrop02/CoreXT-Latest/docs/corext/corext/version.htm
//

#if FIXED_ASSEMBLY_VERSION
[assembly: AssemblyVersion("12.4.0.0")]
[assembly: AssemblyFileVersion("12.4.56.0")]
#else
[assembly: AssemblyVersion("12.4.56.0")]
#endif


[assembly: AssemblyCompany("Microsoft Corporation")]
[assembly: AssemblyProduct("Microsoft(R) Xbox(TM)")] 
[assembly: AssemblyCopyright("\xA9 Microsoft Corporation. All rights reserved.")]
[assembly: AssemblyTrademark("Microsoft(R) is a registered trademark of Microsoft Corporation. Xbox(TM) is a trademark of Microsoft Corporation.")]
[assembly: AssemblyDescription("Built by: Administrator")] 

#if ENABLE_CODESIGN

#if ENABLE_PRS_DELAYSIGN
[assembly: AssemblyKeyFile(@"C:\Depot\XONLINE_MAIN\private\keys\XBLKey.snk")]
[assembly: AssemblyKeyName("")]
[assembly: AssemblyDelaySign(true)]
#else
#if !CUSTOM_KEYFILE
[assembly: AssemblyKeyFile(@"C:\Depot\XONLINE_MAIN\public\internal\strongnamekeys\fake\CoreXTTestKey.snk")]
[assembly: AssemblyKeyName("")]
#endif
[assembly: AssemblyDelaySign(false)]
#endif

#endif


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Code.9.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.CodeDom.Compiler.GeneratedCodeAttribute("ASP.NET", "2.0.50727.4971")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.1.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "9DE5DD22B3BC8AF01CBED13C2FED9DBB"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using proxy = Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

public partial class CategoryAddEdit : System.Web.UI.Page
{
    protected proxy.Category c = null;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            if (Session["Category"] != null)
            {
                c = (proxy.Category)Session["Category"];

                if (c.Id != -1)
                {
                    this.lblCategoryID.Text = c.Id.ToString().Trim() + ",";
                    this.lblCategoryName.Text = c.LocalizedName;
                    this.ctrlContributorParentEdit.FilterCategorySystem = proxy.CategorySystem.Get(c.CategorySystemId);
                }                
            }
        }        
    }

    public void SaveButton_OnClick(object sender, EventArgs e)
    {
        if (Session["Category"] != null)
        {
            proxy.Category c = (proxy.Category)Session["Category"];
            Boolean englishMapped = false;
            foreach (proxy.CategoryLocaleMap clm in c.CategoryLocaleMap)
            {
                if (clm.Modified == proxy.DataChangeType.Delete)
                {                    
                    MessageBox.Show("For locale: " + proxy.Locale.Get(clm.FromLcid).InternalName + ". Cannot remove a category locale if it was previously mapped");
                    return;
                }

                if (clm.ToLcid == 1033)
                {
                    englishMapped = true;
                }
            }
            if (!englishMapped)
            {
                MessageBox.Show("English locale is required to be a primary locale");
                return;
            }          

            Constants.Proxy.SaveCategory(c);
            proxy.CategorySystem.Refresh();
            c = null;
            Session["LocaleAdded"] = false;
            Response.Redirect("Category.aspx", false);            
        }
    }

    public void CancelButton_OnClick(object sender, EventArgs e)
    {
        Session.Remove("Category");
        Session["LocaleAdded"] = false;
        Response.Redirect("Category.aspx", false);
    }

}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.11.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "DE0C503FBB599F153BD7C6C436B42669"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class SessionTimedOutPage : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        Label1.Text = "Your session has timed out after " + Session.Timeout + " minutes.";
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.13.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "A93F44CF3B4C07417402ACD4972558E8"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class ImageSearch : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.12.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "E5A7D8C23CCF64AAF81131E04C28C591"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class ImageSearch : System.Web.SessionState.IRequiresSessionState {
    
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
    protected global::ASP.component_imagesearch_ascx ImageSearch1;
    
    #line default
    #line hidden
    
    
    #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
    protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class imagesearch_aspx : global::ImageSearch, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public imagesearch_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/ImageSearch.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.imagesearch_aspx.@__initialized == false)) {
                global::ASP.imagesearch_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[8];
                dependencies[0] = "~/ImageSearch.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/ImageSearch.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                dependencies[6] = "~/Component/ImageSearch.ascx";
                dependencies[7] = "~/Component/ImageSearch.ascx.cs";
                global::ASP.imagesearch_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.imagesearch_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_imagesearch_ascx @__BuildControlImageSearch1() {
            global::ASP.component_imagesearch_ascx @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__ctrl = new global::ASP.component_imagesearch_ascx();
            
            #line default
            #line hidden
            this.ImageSearch1 = @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__ctrl.ID = "ImageSearch1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent1(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_imagesearch_ascx @__ctrl1;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__ctrl1 = this.@__BuildControlImageSearch1();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <br />\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl2;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__ctrl2 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    \r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(imagesearch_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__ctrl.Title = "Search Images";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent1)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearch.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.imagesearch_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.imagesearch_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return 1445951278;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.0.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "2814E5125A898CC9CD5F31767966B98A"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class CategoryAddEdit : System.Web.SessionState.IRequiresSessionState {
    
    
    #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::AjaxControlToolkit.ToolkitScriptManager ScriptManager1;
    
    #line default
    #line hidden
    
    
    #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.WebControls.Label AddEditLabel;
    
    #line default
    #line hidden
    
    
    #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.WebControls.Label ErrorLabel;
    
    #line default
    #line hidden
    
    
    #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.WebControls.Label CategoryIDLabel;
    
    #line default
    #line hidden
    
    
    #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.WebControls.Label lblCategoryID;
    
    #line default
    #line hidden
    
    
    #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.WebControls.Label lblCategoryName;
    
    #line default
    #line hidden
    
    
    #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.WebControls.Button SaveButton;
    
    #line default
    #line hidden
    
    
    #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.WebControls.Button CancelButton;
    
    #line default
    #line hidden
    
    
    #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::ASP.component_categoryparenteditcontrol_ascx ctrlContributorParentEdit;
    
    #line default
    #line hidden
    
    
    #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.UpdatePanel updatePanel2;
    
    #line default
    #line hidden
    
    
    #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::AjaxControlToolkit.TabPanel Panel2;
    
    #line default
    #line hidden
    
    
    #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::ASP.component_categorylocalecontrol_ascx ctrlContributorLocale;
    
    #line default
    #line hidden
    
    
    #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.UpdatePanel updatePanel1;
    
    #line default
    #line hidden
    
    
    #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::AjaxControlToolkit.TabPanel Panel1;
    
    #line default
    #line hidden
    
    
    #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::AjaxControlToolkit.TabContainer Tabs;
    
    #line default
    #line hidden
    
    
    #line 47 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.WebControls.TableCell TableCell1;
    
    #line default
    #line hidden
    
    
    #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.WebControls.TableRow TableRow1;
    
    #line default
    #line hidden
    
    
    #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::System.Web.UI.WebControls.Table Main;
    
    #line default
    #line hidden
    
    
    #line 75 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class categoryaddedit_aspx : global::CategoryAddEdit, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public categoryaddedit_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/CategoryAddEdit.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.categoryaddedit_aspx.@__initialized == false)) {
                dependencies = new string[20];
                dependencies[0] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                dependencies[1] = "~/Component/PreviewControl.ascx";
                dependencies[2] = "~/Component/CategoryParentEditControl.ascx";
                dependencies[3] = "~/Component/CategoryLocaleControl.ascx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/PreviewControl.ascx.cs";
                dependencies[6] = "~/Component/DoubleListBoxControl.ascx.cs";
                dependencies[7] = "~/Component/HorizontalAddRemoveControl.ascx";
                dependencies[8] = "~/MasterPage.master.cs";
                dependencies[9] = "~/Component/TextBoxUpdateControl.ascx";
                dependencies[10] = "~/MasterPage.master";
                dependencies[11] = "~/Component/CategoriesTreeControl.ascx.cs";
                dependencies[12] = "~/Component/CategoriesTreeControl.ascx";
                dependencies[13] = "~/Component/DoubleListBoxControl.ascx";
                dependencies[14] = "~/Component/CategoryParentEditControl.ascx.cs";
                dependencies[15] = "~/Component/TextBoxUpdateControl.ascx.cs";
                dependencies[16] = "~/CategoryAddEdit.aspx.cs";
                dependencies[17] = "~/Component/HorizontalAddRemoveControl.ascx.cs";
                dependencies[18] = "~/CategoryAddEdit.aspx";
                dependencies[19] = "~/Component/CategoryLocaleControl.ascx";
                global::ASP.categoryaddedit_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.categoryaddedit_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ToolkitScriptManager @__BuildControlScriptManager1() {
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::AjaxControlToolkit.ToolkitScriptManager();
            
            #line default
            #line hidden
            this.ScriptManager1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.EnablePartialRendering = true;
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "ScriptManager1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlAddEditLabel() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.AddEditLabel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "AddEditLabel";
            
            #line default
            #line hidden
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Text = "Add/Edit";
            
            #line default
            #line hidden
            
            #line 19 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Font.Bold = true;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlErrorLabel() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.ErrorLabel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "ErrorLabel";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Visible = false;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Font.Bold = true;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ForeColor = System.Drawing.Color.Red;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlCategoryIDLabel() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.CategoryIDLabel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "CategoryIDLabel";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Font.Bold = true;
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Text = "Category ID, name: ";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControllblCategoryID() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.lblCategoryID = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "lblCategoryID";
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Text = "XXXXXXXXX";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControllblCategoryName() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.lblCategoryName = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "lblCategoryName";
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Text = "XXXXXXXXX";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlSaveButton() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.SaveButton = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "SaveButton";
            
            #line default
            #line hidden
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Text = "Save Category Record";
            
            #line default
            #line hidden
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Click += new System.EventHandler(this.SaveButton_OnClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlCancelButton() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.CancelButton = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "CancelButton";
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Text = "Cancel Category Changes";
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Click += new System.EventHandler(this.CancelButton_OnClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_categoryparenteditcontrol_ascx @__BuildControlctrlContributorParentEdit() {
            global::ASP.component_categoryparenteditcontrol_ascx @__ctrl;
            
            #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::ASP.component_categoryparenteditcontrol_ascx();
            
            #line default
            #line hidden
            this.ctrlContributorParentEdit = @__ctrl;
            
            #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 53 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "ctrlContributorParentEdit";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control5(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                    "));
            
            #line default
            #line hidden
            global::ASP.component_categoryparenteditcontrol_ascx @__ctrl1;
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl1 = this.@__BuildControlctrlContributorParentEdit();
            
            #line default
            #line hidden
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanel2() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanel2 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control5));
            
            #line default
            #line hidden
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "updatePanel2";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control4(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl1;
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl1 = this.@__BuildControlupdatePanel2();
            
            #line default
            #line hidden
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.TabPanel @__BuildControlPanel2() {
            global::AjaxControlToolkit.TabPanel @__ctrl;
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::AjaxControlToolkit.TabPanel();
            
            #line default
            #line hidden
            this.Panel2 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control4));
            
            #line default
            #line hidden
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "Panel2";
            
            #line default
            #line hidden
            
            #line 49 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.HeaderText = "Edit Parent";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_categorylocalecontrol_ascx @__BuildControlctrlContributorLocale() {
            global::ASP.component_categorylocalecontrol_ascx @__ctrl;
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::ASP.component_categorylocalecontrol_ascx();
            
            #line default
            #line hidden
            this.ctrlContributorLocale = @__ctrl;
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "ctrlContributorLocale";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control7(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl(" \r\n                                    "));
            
            #line default
            #line hidden
            global::ASP.component_categorylocalecontrol_ascx @__ctrl1;
            
            #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl1 = this.@__BuildControlctrlContributorLocale();
            
            #line default
            #line hidden
            
            #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                    <br /><br />\r\n                             " +
                        "    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanel1() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanel1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control7));
            
            #line default
            #line hidden
            
            #line 60 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "updatePanel1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control6(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl1;
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl1 = this.@__BuildControlupdatePanel1();
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.TabPanel @__BuildControlPanel1() {
            global::AjaxControlToolkit.TabPanel @__ctrl;
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::AjaxControlToolkit.TabPanel();
            
            #line default
            #line hidden
            this.Panel1 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control6));
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "Panel1";
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.HeaderText = "Locale";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.TabContainer @__BuildControlTabs() {
            global::AjaxControlToolkit.TabContainer @__ctrl;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::AjaxControlToolkit.TabContainer();
            
            #line default
            #line hidden
            this.Tabs = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "Tabs";
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(760, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ActiveTabIndex = 0;
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.TabPanel @__ctrl1;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl1 = this.@__BuildControlPanel2();
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.TabPanel @__ctrl2;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl2 = this.@__BuildControlPanel1();
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                            "));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableCell @__BuildControlTableCell1() {
            global::System.Web.UI.WebControls.TableCell @__ctrl;
            
            #line 47 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TableCell();
            
            #line default
            #line hidden
            this.TableCell1 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 47 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "TableCell1";
            
            #line default
            #line hidden
            global::AjaxControlToolkit.TabContainer @__ctrl1;
            
            #line 47 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl1 = this.@__BuildControlTabs();
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 47 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.TableCellCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableCell @__ctrl1;
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl1 = this.@__BuildControlTableCell1();
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TableRow @__BuildControlTableRow1() {
            global::System.Web.UI.WebControls.TableRow @__ctrl;
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TableRow();
            
            #line default
            #line hidden
            this.TableRow1 = @__ctrl;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "TableRow1";
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            this.@__BuildControl__control3(@__ctrl.Cells);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.WebControls.TableRowCollection @__ctrl) {
            global::System.Web.UI.WebControls.TableRow @__ctrl1;
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl1 = this.@__BuildControlTableRow1();
            
            #line default
            #line hidden
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Table @__BuildControlMain() {
            global::System.Web.UI.WebControls.Table @__ctrl;
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Table();
            
            #line default
            #line hidden
            this.Main = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "Main";
            
            #line default
            #line hidden
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            this.@__BuildControl__control2(@__ctrl.Rows);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 75 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 75 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 75 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl1;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl1 = this.@__BuildControlScriptManager1();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n    <script language=\"javascript\" type=\"text/javascript\" src=\"~/JavaScripts/H" +
                        "ourglassJavascript.js\"></script>\r\n\r\n    <table border=\"0\">\r\n        <tr>\r\n      " +
                        "      <td>\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl2;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl2 = this.@__BuildControlAddEditLabel();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl3;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl3 = this.@__BuildControlErrorLabel();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            </td>\r\n            <td>\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl4;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl4 = this.@__BuildControlCategoryIDLabel();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl5;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl5 = this.@__BuildControllblCategoryID();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl6;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl6 = this.@__BuildControllblCategoryName();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl6);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td>\r\n             " +
                        "   "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl7;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl7 = this.@__BuildControlSaveButton();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl7);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            </td>\r\n            <td>\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl8;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl8 = this.@__BuildControlCancelButton();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl8);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n            <td colspan=\"2\">\r\n " +
                        "               &nbsp;\r\n            </td>\r\n        </tr>\r\n        <tr>\r\n         " +
                        "   <td colspan=\"2\">\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Table @__ctrl9;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl9 = this.@__BuildControlMain();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl9);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            </td>\r\n        </tr>\r\n    </table>\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl10;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl10 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl10);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(categoryaddedit_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__ctrl.Theme = "SiteTheme";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\CategoryAddEdit.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.categoryaddedit_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return -1052298480;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.10.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "349FFBB4D94429534E2A7195EBFB3D1F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class SessionTimedOutPage : System.Web.SessionState.IRequiresSessionState {
    
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
    protected global::System.Web.UI.WebControls.Label Label1;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class sessiontimedout_aspx : global::SessionTimedOutPage, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sessiontimedout_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/SessionTimedOut.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.sessiontimedout_aspx.@__initialized == false)) {
                global::ASP.sessiontimedout_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[4];
                dependencies[0] = "~/SessionTimedOut.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/SessionTimedOut.aspx.cs";
                global::ASP.sessiontimedout_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.sessiontimedout_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel1() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__ctrl.ID = "Label1";
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(35, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__ctrl.Text = "Label";
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(671, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent1(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__ctrl1 = this.@__BuildControlLabel1();
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(sessiontimedout_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__ctrl.Title = "Untitled Page";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 2 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent1)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\SessionTimedOut.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.sessiontimedout_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.sessiontimedout_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return 964418586;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.15.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "3B7221524FF6B2360F57473420C7FF56"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class Image : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.14.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "250A942EE7B30B93E84BFA8D5C5DC3CF"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Ems.Apps.Web.Editorial {
    
    
    public partial class Image : System.Web.SessionState.IRequiresSessionState {
        
        
        #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
        protected global::System.Web.UI.WebControls.LinkButton LinkButton1;
        
        #line default
        #line hidden
        
        
        #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
        protected global::System.Web.UI.WebControls.LinkButton LinkButton2;
        
        #line default
        #line hidden
        
        
        #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
        protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
        
        #line default
        #line hidden
        
        protected System.Web.Profile.DefaultProfile Profile {
            get {
                return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
            }
        }
        
        protected System.Web.HttpApplication ApplicationInstance {
            get {
                return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
            }
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class image_aspx : global::Microsoft.Ems.Apps.Web.Editorial.Image, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public image_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Image.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.image_aspx.@__initialized == false)) {
                global::ASP.image_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[6];
                dependencies[0] = "~/Image.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Image.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                global::ASP.image_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.image_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.LinkButton @__BuildControlLinkButton1() {
            global::System.Web.UI.WebControls.LinkButton @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.LinkButton();
            
            #line default
            #line hidden
            this.LinkButton1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl.ID = "LinkButton1";
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl.PostBackUrl = "ImageUpload.aspx";
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("Upload Image"));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.LinkButton @__BuildControlLinkButton2() {
            global::System.Web.UI.WebControls.LinkButton @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.LinkButton();
            
            #line default
            #line hidden
            this.LinkButton2 = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl.ID = "LinkButton2";
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl.PostBackUrl = "ImageSearch.aspx";
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("Search Image"));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent1(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<div>\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.LinkButton @__ctrl1;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl1 = this.@__BuildControlLinkButton1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.LinkButton @__ctrl2;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl2 = this.@__BuildControlLinkButton2();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n    &nbsp;"));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl3;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl3 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n</div>\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(image_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl.EnableEventValidation = false;
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__ctrl.Title = "EMS Tools";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent1)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Image.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.image_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.image_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return -461490413;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Code.8.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\MessageBox.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "D1CF27DB3D9CBFDE8EAB5C70AE82DFE2"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\App_Code\MessageBox.cs"
using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Collections;
using System.Text;

/// <summary>
/// Summary description for MessageBox
/// </summary>
public class MessageBox
{
    private static Hashtable m_executingPages = new Hashtable();
    private MessageBox() { }
    public static void Show(string sMessage)
    {
        // If this is the first time a page has called this method then
        if (!m_executingPages.Contains(HttpContext.Current.Handler))
        {
            // Attempt to cast HttpHandler as a Page.
            Page executingPage = HttpContext.Current.Handler as Page;
            if (executingPage != null)
            {
                // Create a Queue to hold one or more messages.
                Queue messageQueue = new Queue();
                // Add our message to the Queue
                messageQueue.Enqueue(sMessage);
                // Add our message queue to the hash table. Use our page reference
                // (IHttpHandler) as the key.
                m_executingPages.Add(HttpContext.Current.Handler, messageQueue);
                // Wire up Unload event so that we can inject 
                // some JavaScript for the alerts.
                executingPage.Unload += new EventHandler(ExecutingPage_Unload);
            }
        }
        else
        {
            // If were here then the method has allready been 
            // called from the executing Page.
            // We have allready created a message queue and stored a
            // reference to it in our hastable. 
            Queue queue = (Queue)m_executingPages[HttpContext.Current.Handler];
            // Add our message to the Queue
            queue.Enqueue(sMessage);
        }
    }

    // Our page has finished rendering so lets output the
    // JavaScript to produce the alert's
    private static void ExecutingPage_Unload(object sender, EventArgs e)
    {
        // Get our message queue from the hashtable
        Queue queue = (Queue)m_executingPages[HttpContext.Current.Handler];
        if (queue != null)
        {
            StringBuilder sb = new StringBuilder();
            // How many messages have been registered?
            int iMsgCount = queue.Count;
            // Use StringBuilder to build up our client slide JavaScript.
            sb.Append("<script language='javascript'>");
            // Loop round registered messages
            string sMsg;
            while (iMsgCount-- > 0)
            {
                sMsg = (string)queue.Dequeue();
                sMsg = sMsg.Replace("\n", "\\n");
                sMsg = sMsg.Replace("\"", "'");
                sb.Append(@"alert( """ + sMsg + @""" );");
            }
            // Close our JS
            sb.Append(@"</script>");
            // Were done, so remove our page reference from the hashtable
            m_executingPages.Remove(HttpContext.Current.Handler);
            // Write the JavaScript to the end of the response stream.
            HttpContext.Current.Response.Write(sb.ToString());
        }
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.17.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "1C42DF96F5636CBA4986F1D1058019E6"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class ImageSearchResult : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.16.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "27CEF62B55548147A1E783CC1FFE8FF5"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class ImageSearchResult : System.Web.SessionState.IRequiresSessionState {
    
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
    protected global::ASP.component_imagesearchresult_ascx ImageSearchResult1;
    
    #line default
    #line hidden
    
    
    #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
    protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class imagesearchresult_aspx : global::ImageSearchResult, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public imagesearchresult_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/ImageSearchResult.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.imagesearchresult_aspx.@__initialized == false)) {
                global::ASP.imagesearchresult_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[8];
                dependencies[0] = "~/ImageSearchResult.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/ImageSearchResult.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                dependencies[6] = "~/Component/ImageSearchResult.ascx";
                dependencies[7] = "~/Component/ImageSearchResult.ascx.cs";
                global::ASP.imagesearchresult_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.imagesearchresult_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_imagesearchresult_ascx @__BuildControlImageSearchResult1() {
            global::ASP.component_imagesearchresult_ascx @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__ctrl = new global::ASP.component_imagesearchresult_ascx();
            
            #line default
            #line hidden
            this.ImageSearchResult1 = @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__ctrl.ID = "ImageSearchResult1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent1(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_imagesearchresult_ascx @__ctrl1;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__ctrl1 = this.@__BuildControlImageSearchResult1();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <br />\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl2;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__ctrl2 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    \r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(imagesearchresult_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__ctrl.Title = "Image Search Result";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent1)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageSearchResult.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.imagesearchresult_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.imagesearchresult_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return 879152176;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.19.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "31828B0B26D9A8D90FA52F8716343AB4"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Web.Services;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using System.Collections.Generic;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class _Default : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
        }
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.18.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "929558839FF060AD99A1F2C6A8F36AE3"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Ems.Apps.Web.Editorial {
    
    
    public partial class _Default : System.Web.SessionState.IRequiresSessionState {
        
        protected System.Web.Profile.DefaultProfile Profile {
            get {
                return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
            }
        }
        
        protected System.Web.HttpApplication ApplicationInstance {
            get {
                return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
            }
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class default_aspx : global::Microsoft.Ems.Apps.Web.Editorial._Default, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public default_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Default.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.default_aspx.@__initialized == false)) {
                global::ASP.default_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[4];
                dependencies[0] = "~/Default.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Default.aspx.cs";
                global::ASP.default_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.default_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<table border=\"0\" id=\"imageMenu\" style=\"width: 100%; vertical-align: top;\">\r\n</" +
                        "table>\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(default_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Default.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.default_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.default_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return -1005266328;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.2.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "75D9A9937ACF9CF76D2C6E10BB72AAE4"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class Default4 : System.Web.SessionState.IRequiresSessionState {
    
    
    #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
    protected global::ASP.component_addimagefile_ascx AddImageFile1;
    
    #line default
    #line hidden
    
    
    #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
    protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
    
    #line default
    #line hidden
    
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
    protected global::System.Web.UI.WebControls.Panel MainPanel;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class imageupload_aspx : global::Default4, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public imageupload_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/ImageUpload.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.imageupload_aspx.@__initialized == false)) {
                dependencies = new string[12];
                dependencies[0] = "~/MasterPage.master";
                dependencies[1] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[2] = "~/Component/AddImageFile.ascx";
                dependencies[3] = "~/ImageUpload.aspx.cs";
                dependencies[4] = "~/Component/AlertBox.ascx.cs";
                dependencies[5] = "~/Component/AddImageFile.ascx.cs";
                dependencies[6] = "~/Component/DoubleListBoxControl.ascx";
                dependencies[7] = "~/MasterPage.master.cs";
                dependencies[8] = "~/Component/AlertBox.ascx";
                dependencies[9] = "~/Component/DoubleListBoxControl.ascx.cs";
                dependencies[10] = "~/ImageUpload.aspx";
                dependencies[11] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                global::ASP.imageupload_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.imageupload_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_addimagefile_ascx @__BuildControlAddImageFile1() {
            global::ASP.component_addimagefile_ascx @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl = new global::ASP.component_addimagefile_ascx();
            
            #line default
            #line hidden
            this.AddImageFile1 = @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl.ID = "AddImageFile1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Panel @__BuildControlMainPanel() {
            global::System.Web.UI.WebControls.Panel @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Panel();
            
            #line default
            #line hidden
            this.MainPanel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl.ID = "MainPanel";
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        "));
            
            #line default
            #line hidden
            global::ASP.component_addimagefile_ascx @__ctrl1;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl1 = this.@__BuildControlAddImageFile1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        <br />\r\n        "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl2;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl2 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent1(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Panel @__ctrl1;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl1 = this.@__BuildControlMainPanel();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(imageupload_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl.EnableEventValidation = false;
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__ctrl.Title = "Upload Image";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent1)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.imageupload_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return -306893522;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.20.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.CodeDom.Compiler.GeneratedCodeAttribute("ASP.NET", "2.0.50727.4971")]

namespace @__ASP {
    
    
    internal class FastObjectFactory_app_web_0o2h4cc1 {
        
        
        #line 1 "c:\\dummy.txt"

        #line default
        #line hidden
        
        
        private FastObjectFactory_app_web_0o2h4cc1() {
        }
        
        static object Create_ASP_categoryaddedit_aspx() {
            return new ASP.categoryaddedit_aspx();
        }
        
        static object Create_ASP_imageupload_aspx() {
            return new ASP.imageupload_aspx();
        }
        
        static object Create_ASP_imageassociated_aspx() {
            return new ASP.imageassociated_aspx();
        }
        
        static object Create_ASP_imageedit_aspx() {
            return new ASP.imageedit_aspx();
        }
        
        static object Create_ASP_category_aspx() {
            return new ASP.category_aspx();
        }
        
        static object Create_ASP_sessiontimedout_aspx() {
            return new ASP.sessiontimedout_aspx();
        }
        
        static object Create_ASP_imagesearch_aspx() {
            return new ASP.imagesearch_aspx();
        }
        
        static object Create_ASP_image_aspx() {
            return new ASP.image_aspx();
        }
        
        static object Create_ASP_imagesearchresult_aspx() {
            return new ASP.imagesearchresult_aspx();
        }
        
        static object Create_ASP_default_aspx() {
            return new ASP.default_aspx();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.3.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "8B4B32FFA9A12D9236C3B03BD4EEA212"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageUpload.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class Default4 : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {

    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.4.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "4E1A37987EC6B8AFCA29DDCB68E5A483"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class ImageAssociated : System.Web.SessionState.IRequiresSessionState {
    
    
    #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::AjaxControlToolkit.ToolkitScriptManager ScriptManager1;
    
    #line default
    #line hidden
    
    
    #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.Label Label3;
    
    #line default
    #line hidden
    
    
    #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.Label Label1;
    
    #line default
    #line hidden
    
    
    #line 21 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.TextBox tbxMediaID;
    
    #line default
    #line hidden
    
    
    #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.Label Label2;
    
    #line default
    #line hidden
    
    
    #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.DropDownList ddlMediaType;
    
    #line default
    #line hidden
    
    
    #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.Button btnLoad;
    
    #line default
    #line hidden
    
    
    #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.DropDownList ddlDim1;
    
    #line default
    #line hidden
    
    
    #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.DropDownList ddlLocale;
    
    #line default
    #line hidden
    
    
    #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.GridView gridView;
    
    #line default
    #line hidden
    
    
    #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.Button btnAddNew;
    
    #line default
    #line hidden
    
    
    #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.Button btnAddExisting;
    
    #line default
    #line hidden
    
    
    #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.WebControls.Button btnSave;
    
    #line default
    #line hidden
    
    
    #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::System.Web.UI.UpdatePanel UpdatePanel1;
    
    #line default
    #line hidden
    
    
    #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class imageassociated_aspx : global::ImageAssociated, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public imageassociated_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/ImageAssociated.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.imageassociated_aspx.@__initialized == false)) {
                dependencies = new string[6];
                dependencies[0] = "~/ImageAssociated.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/ImageAssociated.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                global::ASP.imageassociated_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.imageassociated_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ToolkitScriptManager @__BuildControlScriptManager1() {
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::AjaxControlToolkit.ToolkitScriptManager();
            
            #line default
            #line hidden
            this.ScriptManager1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.EnablePartialRendering = true;
            
            #line default
            #line hidden
            
            #line 13 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "ScriptManager1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel3() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label3 = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "Label3";
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Media associated image(s) editor";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel1() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "Label1";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Media ID";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Font.Bold = true;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControltbxMediaID() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 21 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.tbxMediaID = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 21 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "tbxMediaID";
            
            #line default
            #line hidden
            
            #line 21 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(270, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel2() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label2 = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "Label2";
            
            #line default
            #line hidden
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Media Type";
            
            #line default
            #line hidden
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Font.Bold = true;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlddlMediaType() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.ddlMediaType = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "ddlMediaType";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.DataTextField = "Name";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.DataValueField = "ID";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(136, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlbtnLoad() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.btnLoad = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "btnLoad";
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Load";
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Click += new System.EventHandler(this.btnLoad_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlddlDim1() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.ddlDim1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "ddlDim1";
            
            #line default
            #line hidden
            
            #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.DataTextField = "Name";
            
            #line default
            #line hidden
            
            #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.DataValueField = "Id";
            
            #line default
            #line hidden
            
            #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Visible = false;
            
            #line default
            #line hidden
            
            #line 26 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(1, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlddlLocale() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.ddlLocale = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "ddlLocale";
            
            #line default
            #line hidden
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.DataTextField = "LocaleCode";
            
            #line default
            #line hidden
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.DataValueField = "LCID";
            
            #line default
            #line hidden
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Visible = false;
            
            #line default
            #line hidden
            
            #line 29 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(16, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ButtonField @__BuildControl__control4() {
            global::System.Web.UI.WebControls.ButtonField @__ctrl;
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ButtonField();
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ButtonType = System.Web.UI.WebControls.ButtonType.Image;
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.CommandName = "up";
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Up";
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.HeaderText = "Up";
            
            #line default
            #line hidden
            
            #line 34 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ImageUrl = "~/Images/uparrow.PNG";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ButtonField @__BuildControl__control5() {
            global::System.Web.UI.WebControls.ButtonField @__ctrl;
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ButtonField();
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ButtonType = System.Web.UI.WebControls.ButtonType.Image;
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.CommandName = "down";
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Down";
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.HeaderText = "Down";
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ImageUrl = "~/Images/downarrow.PNG";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ButtonField @__BuildControl__control6() {
            global::System.Web.UI.WebControls.ButtonField @__ctrl;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ButtonField();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ButtonType = System.Web.UI.WebControls.ButtonType.Image;
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Remove";
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.CommandName = "delete";
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.HeaderText = "Remove";
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ImageUrl = "~/Images/WasteBasket_Button.gif";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Image @__BuildControl__control9() {
            global::System.Web.UI.WebControls.Image @__ctrl;
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Image();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "ImageThumnail";
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(75, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(75, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ImageUrl = "~/Images/PreviewNotAvailable.GIF";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control10() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 44 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 44 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "lblLocale";
            
            #line default
            #line hidden
            
            #line 44 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Label";
            
            #line default
            #line hidden
            
            #line 44 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(124, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControl__control11() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "ddlRelationType";
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(278, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.DataTextField = "Name";
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.DataValueField = "Id";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListBox @__BuildControl__control12() {
            global::System.Web.UI.WebControls.ListBox @__ctrl;
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "lbxDim";
            
            #line default
            #line hidden
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(114, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 51 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(409, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control8(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    <table style=\"width: 318px; height: 142px\">\r\n              " +
                        "          <tr>\r\n                            <td rowspan=\"2\" style=\"width: 64px\">" +
                        "\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Image @__ctrl1;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl1 = this.@__BuildControl__control9();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                            <td>\r\n                                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl2;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl2 = this.@__BuildControl__control10();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                            <td>\r\n                                &nbsp;"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl3;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl3 = this.@__BuildControl__control11();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                        </tr>\r\n                        <tr>\r\n             " +
                        "               <td colspan=\"2\">\r\n                                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListBox @__ctrl4;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl4 = this.@__BuildControl__control12();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                        </tr>\r\n                    </table>\r\n             " +
                        "   "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control7() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control8), null);
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.HeaderText = "ImageInfo";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.DataControlFieldCollection @__ctrl) {
            global::System.Web.UI.WebControls.ButtonField @__ctrl1;
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl1 = this.@__BuildControl__control4();
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ButtonField @__ctrl2;
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl2 = this.@__BuildControl__control5();
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ButtonField @__ctrl3;
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl3 = this.@__BuildControl__control6();
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl4;
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl4 = this.@__BuildControl__control7();
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.GridView @__BuildControlgridView() {
            global::System.Web.UI.WebControls.GridView @__ctrl;
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.GridView();
            
            #line default
            #line hidden
            this.gridView = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "gridView";
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.AutoGenerateColumns = false;
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            this.@__BuildControl__control3(@__ctrl.Columns);
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.RowDataBound += new System.Web.UI.WebControls.GridViewRowEventHandler(this.gridView_RowDataBound);
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.RowCommand += new System.Web.UI.WebControls.GridViewCommandEventHandler(this.gridView_RowCommand);
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.RowDeleted += new System.Web.UI.WebControls.GridViewDeletedEventHandler(this.gridView_RowDeleted);
            
            #line default
            #line hidden
            
            #line 32 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.RowDeleting += new System.Web.UI.WebControls.GridViewDeleteEventHandler(this.gridView_RowDeleting);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlbtnAddNew() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.btnAddNew = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "btnAddNew";
            
            #line default
            #line hidden
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Add new";
            
            #line default
            #line hidden
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Click += new System.EventHandler(this.btnAddNew_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlbtnAddExisting() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.btnAddExisting = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "btnAddExisting";
            
            #line default
            #line hidden
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Add existing";
            
            #line default
            #line hidden
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Click += new System.EventHandler(this.btnAddExisting_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlbtnSave() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.btnSave = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "btnSave";
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Text = "Save";
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Click += new System.EventHandler(this.btnSave_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        &nbsp;\r\n    &nbsp;"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl1 = this.@__BuildControlLabel3();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <hr />\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl2;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl2 = this.@__BuildControlLabel1();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("&nbsp;\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl3;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl3 = this.@__BuildControltbxMediaID();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl4;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl4 = this.@__BuildControlLabel2();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl5;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl5 = this.@__BuildControlddlMediaType();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl6;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl6 = this.@__BuildControlbtnLoad();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl6);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl7;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl7 = this.@__BuildControlddlDim1();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl7);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl8;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl8 = this.@__BuildControlddlLocale();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl8);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.GridView @__ctrl9;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl9 = this.@__BuildControlgridView();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl9);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <hr />\r\n    <table style=\"width: 647px\">\r\n        <tr>\r\n            <td sty" +
                        "le=\"width: 42px\">\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl10;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl10 = this.@__BuildControlbtnAddNew();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl10);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            </td>\r\n            <td style=\"width: 236px\">\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl11;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl11 = this.@__BuildControlbtnAddExisting();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl11);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n            <td align=\"right\">\r\n                "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl12;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl12 = this.@__BuildControlbtnSave();
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl12);
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n        </tr>\r\n    </table>\r\n    <br />\r\n    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlUpdatePanel1() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.UpdatePanel1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "UpdatePanel1";
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ChildrenAsTriggers = true;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent1(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl1;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl1 = this.@__BuildControlScriptManager1();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<script language=\"javascript\" type=\"text/javascript\" src=\"JavaScripts/Hourglass" +
                        "Javascript.js\"></script>\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl2;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl2 = this.@__BuildControlUpdatePanel1();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <br />\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl3;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl3 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(imageassociated_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__ctrl.Title = "Images Associated with a Media";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent1)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.imageassociated_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return 1309446308;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.5.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "C9B6AE5B424879B13C5D8125145B20EA"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageAssociated.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;
using System.Net;
using System.Collections.Generic;
using System.Text;

public partial class ImageAssociated : System.Web.UI.Page
{
    private class MediaAssociated
    {
        private Media media;
        private int mediaTypeId;

        public Media Media
        {
            get { return media; }
            set { media = value; }
        }
        public int MediaTypeId
        {
            get { return mediaTypeId; }
            set { mediaTypeId = value; }
        }
        MediaAssociatedImage[] associatedImages;

        public MediaAssociatedImage[] AssociatedImages
        {
            get { return associatedImages; }
            set { associatedImages = value; }
        }

    }
    private class MediaAssociatedImage
    {
        private Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image image;
        private MediaRelationship mediaRelationship;

        public MediaRelationship MediaRelationship
        {
            get { return mediaRelationship; }
            set { mediaRelationship = value; }
        }


        public Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image Image
        {
            get { return image; }
            set { image = value; }
        }


    }
    protected void Page_Load(object sender, EventArgs e)
    {


        CatalogServices cs;
        if (!IsPostBack)
        {
            cs = Constants.Proxy;
            ddlMediaType.DataSource = cs.GetMediaType();
            ddlMediaType.DataBind();

            //TODO:remove this line after debug
            ddlMediaType.SelectedIndex = 12;


            ddlDim1.DataSource = cs.GetImageSize();
            ddlDim1.DataBind();
            ddlLocale.DataSource = cs.GetLocale();
            ddlLocale.DataBind();

            ImageFileHandler.LoadPropertyFromWebCfgFile();
            if (Session[Constants.SessionVariable_MediaAssociatedImageMedia] != null)
            {
                LoadMedia(Session["MediaAssociatedImage"] as Media);
                Session[Constants.SessionVariable_MediaAssociatedImageMedia] = null;
            }
        }



        if (Session["SelectedImage"] != null)
        {
            bool duplicateFlag = false;
            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image im = (Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image)(Session["SelectedImage"]);

            MediaAssociated mediaAssociated = (MediaAssociated)Session["mediaAssociated"];
            foreach (MediaAssociatedImage im1 in mediaAssociated.AssociatedImages)
            {
                if (im.Id == im1.Image.Id)
                {
                    MessageBox.Show("Meida with ID:" + im.Id.ToString() + " is in associated image list already.");
                    duplicateFlag = true; ;
                }
            }
            List<MediaRelationship> mRealationshipList = new List<MediaRelationship>(mediaAssociated.Media.Relationships);
            List<MediaAssociatedImage> tmplist = new List<MediaAssociatedImage>(mediaAssociated.AssociatedImages);

            if (!duplicateFlag)
            {
                MediaRelationship tmpRelationship = new MediaRelationship();
                tmpRelationship.Modified = DataChangeType.Add;
                tmpRelationship.RelatedMediaId = im.Id;
                //Hardcode to 15 which is mediatoimage relationship.
                tmpRelationship.MediaRelationshipTypeId = 15;
                tmpRelationship.RelatedMediaTitle = im.Locales[0].Title;
                mRealationshipList.Add(tmpRelationship);
                mediaAssociated.Media.Relationships = mRealationshipList.ToArray();
                MediaAssociatedImage mediaAssociatedImage = new MediaAssociatedImage();
                mediaAssociatedImage.Image = im;
                mediaAssociatedImage.MediaRelationship = tmpRelationship;
                tmplist.Add(mediaAssociatedImage);
            }
            mediaAssociated.AssociatedImages = tmplist.ToArray();

            gridView.DataSource = mediaAssociated.AssociatedImages;

            gridView.DataBind();
            Session["SelectedImage"] = null;

            Label2.Visible = false;
            ddlMediaType.Visible = false;
            btnLoad.Visible = false;
            tbxMediaID.ReadOnly = true;
            tbxMediaID.Text = mediaAssociated.Media.Id.ToString();
            btnAddExisting.Enabled = true;
            btnAddNew.Enabled = true;
            btnSave.Enabled = true;
        }
    }
    private void LoadMedia(Media media)
    {
        CatalogServices cs = Constants.Proxy;
        MediaAssociated mediaAssociated = new MediaAssociated();
        Guid MediaID = Guid.Empty;
        List<MediaAssociatedImage> imageList = new List<MediaAssociatedImage>();

        mediaAssociated.Media = media;
        if (mediaAssociated.Media == null)
            return;
        foreach (MediaRelationship mRrelationship in mediaAssociated.Media.Relationships)
        {
            if (IsAnImageRelationship(mRrelationship.MediaRelationshipTypeId))
            {
                MediaAssociatedImage mediaAssociatedImage = new MediaAssociatedImage();
                mediaAssociatedImage.Image = cs.GetImage(mRrelationship.RelatedMediaId);
                mediaAssociatedImage.MediaRelationship = mRrelationship;
                imageList.Add(mediaAssociatedImage);
            }
        }
        mediaAssociated.AssociatedImages = imageList.ToArray();
        Session["mediaAssociated"] = mediaAssociated;
        gridView.DataSource = mediaAssociated.AssociatedImages;
        gridView.DataBind();
        ((MediaAssociated)(Session["mediaAssociated"])).MediaTypeId = media.MediaTypeId;

        Label2.Visible = false;
        ddlMediaType.Visible = false;
        btnLoad.Visible = false;
        tbxMediaID.ReadOnly = true;
        tbxMediaID.Text = media.Id.ToString();
        btnAddExisting.Enabled = true;
        btnAddNew.Enabled = true;
        btnSave.Enabled = true;
    }
    
    protected void btnLoad_Click(object sender, EventArgs e)
    {
        CatalogServices cs = Constants.Proxy;
        MediaAssociated mediaAssociated = new MediaAssociated();
        Media media = null;
        Guid MediaID = Guid.Empty;
        try
        {
            MediaID = new Guid(tbxMediaID.Text);
        }
        catch
        {
        }
        switch (int.Parse(ddlMediaType.SelectedItem.Value))
        {
            //TODO:add more here.
            case 2:
                media = cs.GetVideo(MediaID);
                break;
            case 13:
                media = cs.GetPodcast(MediaID);
                break;
            case 14:
                media = cs.GetImage(MediaID);
                break;

            default:
                throw new Exception("Media Type: " + ddlMediaType.SelectedItem.Text + " not supported.");
        }
        LoadMedia(media);
    }
    private bool IsAnImageRelationship(int relationship)
    {
        if (relationship == 15)
            return true;
        return false;
    }
    protected void gridView_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        CatalogServices cs = Constants.Proxy;
        int OriginalImageSizeID = 0, ThumbnailImageSizeID = 0;
        string imInstDisplay = string.Empty;

        foreach (ImageSize imSize in Constants.Proxy.GetImageSize())
        {

            if (imSize.Name.CompareTo("Original Image") == 0)
                OriginalImageSizeID = imSize.Id;

            if (imSize.Name.CompareTo("EMS Tool Thumbnail") == 0)
            {

                ThumbnailImageSizeID = imSize.Id;
            }
        }
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            StringBuilder tooltipStr = new StringBuilder();
            Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image im = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[e.Row.RowIndex].Image;
            //            e.Row.Cells[0].Text = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[e.Row.RowIndex].Image.Locales[0].Title;
            System.Web.UI.WebControls.Image displayIm = (System.Web.UI.WebControls.Image)e.Row.FindControl("ImageThumnail");
            System.Web.UI.WebControls.ListBox lboxDim = (System.Web.UI.WebControls.ListBox)e.Row.FindControl("lbxDim");
            System.Web.UI.WebControls.DropDownList lboxRelation = (System.Web.UI.WebControls.DropDownList)e.Row.FindControl("ddlRelationType");
            System.Web.UI.WebControls.Label lblLocale = (System.Web.UI.WebControls.Label)e.Row.FindControl("lblLocale");
            lboxRelation.DataSource = cs.GetMediaRelationshipType();
            lboxRelation.DataBind();
            lboxRelation.Items.FindByValue(((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[e.Row.RowIndex].MediaRelationship.MediaRelationshipTypeId.ToString()).Selected = true;
            tooltipStr.Append("Title:");
            if(im.Locales.Length>0)
                tooltipStr.Append(im.Locales[0].Title);
            else
                tooltipStr.Append("(None)");
            tooltipStr.Append("\n\rDescription: ");
            if (im.Locales.Length > 0)
                tooltipStr.Append(im.Locales[0].Description);
            else
                tooltipStr.Append("(None)");

            tooltipStr.Append(".\n\rDimension(s):\n\r");
            foreach (ImageInstance iminst in im.Instances)
            {
                //ImInstDisplay imInstDisplay = new ImInstDisplay();
                if (iminst.ImageSizeId == OriginalImageSizeID)
                {
                    continue;
                }
                else if (iminst.ImageSizeId == ThumbnailImageSizeID)
                {
                    displayIm.ImageUrl = iminst.FileUrl;
                    continue;
                }
                ListItem listitem = ddlDim1.Items.FindByValue(iminst.ImageSizeId.ToString());
                int width, height, fileSize;
                string fileext;

                if (iminst.ImageSizeId == 0
                    || iminst.ImageSizeId == -1)
                {
                    ImageFileHandler.GetImageFileProperty(iminst.Id, out width, out height, out fileSize, out fileext);
                }
                else
                {
                    width = ((ImageSize)(Array.Find(Constants.Proxy.GetImageSize(), delegate(ImageSize im1) { return im1.Id == iminst.ImageSizeId; }))).Width;
                    height = ((ImageSize)(Array.Find(Constants.Proxy.GetImageSize(), delegate(ImageSize im1) { return im1.Id == iminst.ImageSizeId; }))).Height;
                }
                if (listitem == null)
                {
                    lboxDim.Items.Add(new ListItem("Custom size image(W x H:" + width.ToString() + " x " + height.ToString() + ")", "-1 " + width.ToString() + " " + height.ToString() + " " + iminst.Id.ToString()));
                    tooltipStr.Append("Custom size image(W x H:" + width.ToString() + " x " + height.ToString() + ")\n\r");
                }
                else
                {
                    lboxDim.Items.Add(new ListItem(listitem.Text + " (W x H:" + width.ToString() + " x " + height.ToString() + ")", iminst.ImageSizeId + " " + width.ToString() + " " + height.ToString() + " " + iminst.Id.ToString()));
                    tooltipStr.Append(listitem.Text + " (W x H:" + width.ToString() + " x " + height.ToString() + ")\n\r");
                }
            }
            lblLocale.Text = ddlLocale.Items.FindByValue(((ImageInstance)(im.Instances[0])).Lcid.ToString()).Text;
            displayIm.ToolTip = tooltipStr.ToString();

        }
    }

    protected void gridView_RowCommand(object sender, GridViewCommandEventArgs e)
    {

        int rowindex;
        rowindex = int.Parse(e.CommandArgument.ToString());
        if (e.CommandName.CompareTo("up") == 0)
        {
            if (rowindex == 0)
                return;
            MediaAssociatedImage data = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex];
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex] = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex - 1];
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex - 1] = data;
            gridView.DataSource = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages;
            gridView.DataBind();
        }
        else if (e.CommandName.CompareTo("down") == 0)
        {
            if (rowindex == gridView.Rows.Count - 1)
                return;
            MediaAssociatedImage data = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex];
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex] = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex + 1];
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[rowindex + 1] = data;
            gridView.DataSource = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages;
            gridView.DataBind();
        }
        else if (e.CommandName.CompareTo("delete") == 0)
        {
            List<MediaAssociatedImage> newlist = new List<MediaAssociatedImage>();
            for (int i = 0; i < ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages.Length; i++)
            {
                if (i != rowindex)
                    newlist.Add(((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[i]);
            }
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages = newlist.ToArray();
            gridView.DataSource = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages;
            gridView.DataBind();
        }
    }
    protected void gridView_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {

    }
    protected void gridView_RowDeleted(object sender, GridViewDeletedEventArgs e)
    {

    }

    protected void btnSave_Click(object sender, EventArgs e)
    {
        List<MediaRelationship> mediaRelList = new List<MediaRelationship>();
        CatalogServices cs = Constants.Proxy;
        //set to delete
        if (Session["mediaAssociated"] == null)
            return;
        foreach (MediaRelationship mediaRelationship in ((MediaAssociated)(Session["mediaAssociated"])).Media.Relationships)
        {
            if (IsAnImageRelationship(mediaRelationship.MediaRelationshipTypeId) && mediaRelationship.Modified != DataChangeType.Add)
                mediaRelationship.Modified = DataChangeType.Delete;
        }
        //mark the one that still in the grid to update. 
        for (int i = 0; i < ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages.Length; i++)
        {
            MediaAssociatedImage mediaAssociatedImage = ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[i];
            bool foundflag = false;
            foreach (MediaRelationship mediaRelationship in ((MediaAssociated)(Session["mediaAssociated"])).Media.Relationships)
            {
                if (mediaAssociatedImage.MediaRelationship.RelatedMediaId == mediaRelationship.RelatedMediaId)
                {
                    mediaRelationship.Modified = DataChangeType.Update;
                    mediaRelationship.SortOrder = i;
                    mediaRelList.Add(mediaRelationship);
                    foundflag = true;
                    break;
                }
            }
            if (!foundflag)
            {
                mediaAssociatedImage.MediaRelationship.Modified = DataChangeType.Add;
                mediaAssociatedImage.MediaRelationship.SortOrder = i;
                mediaRelList.Add(mediaAssociatedImage.MediaRelationship);
            }
        }
        //put those deleted in, so that db can delete them.
        foreach (MediaRelationship mediaRelationship in ((MediaAssociated)(Session["mediaAssociated"])).Media.Relationships)
        {
            if (mediaRelationship.Modified == DataChangeType.Delete)
            {
                mediaRelList.Add(mediaRelationship);
            }

        }
        //foreach(MediaRelationship mediaRelationship in mediaRelList)
        MediaRelationship[] tmpMR = mediaRelList.ToArray();
        for (int i = 0; i < tmpMR.Length; i++)
        {
            if (tmpMR[i].Modified == DataChangeType.Update)
            {
                MediaRelationship tmp = new MediaRelationship();
                tmpMR[i].Modified = DataChangeType.Add;
                tmp.Modified = DataChangeType.Delete;
                tmp.MediaRelationshipTypeId = tmpMR[i].MediaRelationshipTypeId;
                tmp.RelatedMediaId = tmpMR[i].RelatedMediaId;
                tmp.RelatedMediaTitle = tmpMR[i].RelatedMediaTitle;
                tmp.SortOrder = tmpMR[i].SortOrder;
                mediaRelList.Add(tmp);
            }
        }
        for (int i = 0; i < gridView.Rows.Count; i++)
        {
            System.Web.UI.WebControls.DropDownList lboxRelation = ((DropDownList)(gridView.Rows[i].FindControl("ddlRelationType")));
            ((MediaAssociated)(Session["mediaAssociated"])).AssociatedImages[i].MediaRelationship.MediaRelationshipTypeId = int.Parse(lboxRelation.SelectedValue);
        }

       (((MediaAssociated)(Session["mediaAssociated"])).Media).Relationships = mediaRelList.ToArray();

        switch (((MediaAssociated)(Session["mediaAssociated"])).MediaTypeId)
        {
           
            case 2:
            case 3:
            case 4:
            case 7:
            case 11:
            case 30:
                cs.SaveVideo((Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Video)(((MediaAssociated)(Session["mediaAssociated"])).Media));
                break;
            case 13:
                cs.SavePodcast((Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Podcast)(((MediaAssociated)(Session["mediaAssociated"])).Media));
                break;
            case 12:
            case 14:
            case 15:
            case 16:
            case 17:
            case 28:
            case 31:
                cs.SaveImage((Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.Image)(((MediaAssociated)(Session["mediaAssociated"])).Media));
                break;

            default:
                throw new Exception("Media Type: " + ddlMediaType.SelectedItem.Text + " not supported.");
        }
    }
    protected void btnAddNew_Click(object sender, EventArgs e)
    {
        Session["AddNewImageReturnURL"] = "~/ImageAssociated.aspx";
        Response.Redirect("~/ImageUpload.aspx");
    }
    protected void btnAddExisting_Click(object sender, EventArgs e)
    {
        Session["AddNewImageReturnURL"] = "~/ImageAssociated.aspx";
        Response.Redirect("~/ImageSearch.aspx");
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.7.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "58746D3AC733013789B64A100DA6F884"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

public partial class ImageEdit : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        //Retrieve page parameter
        string[] queryParams = this.ClientQueryString.ToLowerInvariant().Split('&');
        Guid mediaID = Guid.Empty;
        for (int i = 0; i < queryParams.Length; i++)
        {
            if (queryParams[i].IndexOf("i=") >= 0)
            {
                mediaID = new Guid(queryParams[i].Substring(2));
            }
        }
        if (mediaID == Guid.Empty)
            Response.Redirect("~/ImageSearch.aspx");
        ImageEdit1.ImageID = mediaID;
    }
}


#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.8.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "BD90917C0EE9574B862800A1489D55BC"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Ems.Apps.Web.Editorial {
    
    
    public partial class CategoryPage : System.Web.SessionState.IRequiresSessionState {
        
        
        #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
        protected global::AjaxControlToolkit.ToolkitScriptManager ScriptManager1;
        
        #line default
        #line hidden
        
        
        #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
        protected global::System.Web.UI.WebControls.Label lblError;
        
        #line default
        #line hidden
        
        
        #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
        protected global::System.Web.UI.WebControls.Label Label1;
        
        #line default
        #line hidden
        
        
        #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
        protected global::ASP.component_categoriestreecontrol_ascx selectCategoryForAddEditTreeView;
        
        #line default
        #line hidden
        
        
        #line 27 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
        protected global::System.Web.UI.WebControls.ImageButton AddCategory;
        
        #line default
        #line hidden
        
        
        #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
        protected global::System.Web.UI.WebControls.ImageButton EditCategory;
        
        #line default
        #line hidden
        
        
        #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
        protected global::System.Web.UI.WebControls.Label Label2;
        
        #line default
        #line hidden
        
        
        #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
        protected global::System.Web.UI.WebControls.Label lblSelectedNodePath;
        
        #line default
        #line hidden
        
        
        #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
        protected global::System.Web.UI.UpdatePanel updatePanel7;
        
        #line default
        #line hidden
        
        
        #line 56 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
        protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
        
        #line default
        #line hidden
        
        protected System.Web.Profile.DefaultProfile Profile {
            get {
                return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
            }
        }
        
        protected System.Web.HttpApplication ApplicationInstance {
            get {
                return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
            }
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 4 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class category_aspx : global::Microsoft.Ems.Apps.Web.Editorial.CategoryPage, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public category_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Category.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.category_aspx.@__initialized == false)) {
                global::ASP.category_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[8];
                dependencies[0] = "~/Category.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Category.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                dependencies[6] = "~/Component/CategoriesTreeControl.ascx";
                dependencies[7] = "~/Component/CategoriesTreeControl.ascx.cs";
                global::ASP.category_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.category_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ToolkitScriptManager @__BuildControlScriptManager1() {
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl = new global::AjaxControlToolkit.ToolkitScriptManager();
            
            #line default
            #line hidden
            this.ScriptManager1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.EnablePartialRendering = true;
            
            #line default
            #line hidden
            
            #line 10 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ID = "ScriptManager1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControllblError() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.lblError = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ID = "lblError";
            
            #line default
            #line hidden
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.EnableViewState = false;
            
            #line default
            #line hidden
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.Font.Bold = true;
            
            #line default
            #line hidden
            
            #line 16 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ForeColor = System.Drawing.Color.Red;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel1() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ID = "Label1";
            
            #line default
            #line hidden
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.Text = "Category to Edit:";
            
            #line default
            #line hidden
            
            #line 22 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.Font.Bold = true;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_categoriestreecontrol_ascx @__BuildControlselectCategoryForAddEditTreeView() {
            global::ASP.component_categoriestreecontrol_ascx @__ctrl;
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl = new global::ASP.component_categoriestreecontrol_ascx();
            
            #line default
            #line hidden
            this.selectCategoryForAddEditTreeView = @__ctrl;
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 24 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ID = "selectCategoryForAddEditTreeView";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControlAddCategory() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 27 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            this.AddCategory = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 27 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ID = "AddCategory";
            
            #line default
            #line hidden
            
            #line 27 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 27 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.Click += new System.Web.UI.ImageClickEventHandler(this.AddCategory_OnClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControlEditCategory() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            this.EditCategory = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ID = "EditCategory";
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ImageUrl = "~/Images/Edit.gif";
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.Click += new System.Web.UI.ImageClickEventHandler(this.EditCategory_OnClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLabel2() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.Label2 = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ID = "Label2";
            
            #line default
            #line hidden
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.Text = "Selected Category:";
            
            #line default
            #line hidden
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.Font.Bold = true;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControllblSelectedNodePath() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.lblSelectedNodePath = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 45 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ID = "lblSelectedNodePath";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            <table border=\"0\">\r\n                <tr>\r\n                    <td>\r" +
                        "\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl1 = this.@__BuildControllblError();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n       " +
                        "             <td>\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl2;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl2 = this.@__BuildControlLabel1();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        <br />\r\n                        "));
            
            #line default
            #line hidden
            global::ASP.component_categoriestreecontrol_ascx @__ctrl3;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl3 = this.@__BuildControlselectCategoryForAddEditTreeView();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    </td>\r\n                    <td>\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl4;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl4 = this.@__BuildControlAddCategory();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        <br />\r\n                        <br />\r\n               " +
                        "         "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl5;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl5 = this.@__BuildControlEditCategory();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(0, 333, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl6;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl6 = this.@__BuildControlLabel2();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(@__ctrl6);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        <br />\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl7;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl7 = this.@__BuildControllblSelectedNodePath();
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(@__ctrl7);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n       " +
                        "             <td>\r\n                        &nbsp;\r\n                    </td>\r\n  " +
                        "              </tr>\r\n            </table>\r\n        "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanel7() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanel7 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ID = "updatePanel7";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 56 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 56 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 56 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl1;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl1 = this.@__BuildControlScriptManager1();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl2;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl2 = this.@__BuildControlupdatePanel7();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl3;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl3 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(category_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.category_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.category_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return 1326813512;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.6.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "40ED091731F0EF6EA560C76774C575DC"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



public partial class ImageEdit : System.Web.SessionState.IRequiresSessionState {
    
    
    #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
    protected global::ASP.component_imageedit_ascx ImageEdit1;
    
    #line default
    #line hidden
    
    
    #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
    protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
    
    #line default
    #line hidden
    
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
    protected global::System.Web.UI.WebControls.Panel MainPanel;
    
    #line default
    #line hidden
    
    protected System.Web.Profile.DefaultProfile Profile {
        get {
            return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
        }
    }
    
    protected System.Web.HttpApplication ApplicationInstance {
        get {
            return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class imageedit_aspx : global::ImageEdit, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public imageedit_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/ImageEdit.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.imageedit_aspx.@__initialized == false)) {
                dependencies = new string[12];
                dependencies[0] = "~/Component/ImageEdit.ascx.cs";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[3] = "~/Component/ImageEdit.ascx";
                dependencies[4] = "~/ImageEdit.aspx";
                dependencies[5] = "~/Component/DoubleListBoxControl.ascx";
                dependencies[6] = "~/MasterPage.master.cs";
                dependencies[7] = "~/ImageEdit.aspx.cs";
                dependencies[8] = "~/Component/AlertBox.ascx";
                dependencies[9] = "~/Component/DoubleListBoxControl.ascx.cs";
                dependencies[10] = "~/Component/AlertBox.ascx.cs";
                dependencies[11] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                global::ASP.imageedit_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.imageedit_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_imageedit_ascx @__BuildControlImageEdit1() {
            global::ASP.component_imageedit_ascx @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl = new global::ASP.component_imageedit_ascx();
            
            #line default
            #line hidden
            this.ImageEdit1 = @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl.ID = "ImageEdit1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Panel @__BuildControlMainPanel() {
            global::System.Web.UI.WebControls.Panel @__ctrl;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Panel();
            
            #line default
            #line hidden
            this.MainPanel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl.ID = "MainPanel";
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        "));
            
            #line default
            #line hidden
            global::ASP.component_imageedit_ascx @__ctrl1;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl1 = this.@__BuildControlImageEdit1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        <br />\r\n        "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl2;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl2 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent1(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Panel @__ctrl1;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl1 = this.@__BuildControlMainPanel();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(imageedit_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl.EnableEventValidation = false;
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__ctrl.Title = "Image Edit";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent1)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\ImageEdit.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.imageedit_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return -1201146756;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_alu8066w.1.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "B7283768AAD3ECDFCA6D32AF8C6BAD85"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Services.Protocols;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Proxy = Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class LicenseType : System.Web.UI.Page
    {

        # region Constants
        private const string emptyErrorMessage = "Error: {0} is not specified";
        private const string legalTextDuplicate = "Legal Text with selected Locale already exists";
        private const string licenseTypeDuplicate = "LicenseType ID {0} already Exists";
        private const string licenseTypeSession = "LicenseType";
        private const string licenseTypeOperationSession = "LicenseTypeOperationMode";
        private const string legalTextOperationModeSession = "legalTextOperationMode";
        private const string legalTextLocaleSession = "legalTextLocale";
        # endregion

        # region Methods
        /// <summary>
        /// Page load event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!this.IsPostBack)
            {

                string licenstypeId = (this.Request.QueryString.Count > 0) ? this.Request.QueryString[0] : null;
                Proxy.LicenseType licenseType = null;
                try
                {
                    if (licenstypeId != null)
                    {
                        licenseType = Constants.Proxy.GetLicenseType(Convert.ToInt32(licenstypeId));
                        this.TitleMsg.Text = "Edit LicenseType";
                        Session[licenseTypeOperationSession] = Operation_Mode.Edit;

                    }
                    else
                    {
                        licenseType = new Proxy.LicenseType();
                        licenseType.Name = String.Empty;
                        licenseType.Name = String.Empty;
                        licenseType.LicenseClassId = -1;
                        this.TitleMsg.Text = "Add LicenseType";
                        Session[licenseTypeOperationSession] = Operation_Mode.Add;

                    }
                }
                catch (SoapException ex)
                {
                    this.ErrorMsg.Text = String.Format("Unable to retrieve LicenseType information: {0}", ex.Message);
                    return;
                }
                Session[licenseTypeSession] = licenseType;
                Session[legalTextOperationModeSession] = Operation_Mode.Undefined;
                PopulateDomainData();
                PopulateControls(licenseType);
                SetLicenseTypeEditState();
                SetLegalTextEditState();
            }
        }
        /// <summary>
        /// The method Populates the Domain Data Drop Down
        /// </summary>
        private void PopulateDomainData()
        {
            LicenseClassList.DataSource = Constants.Proxy.GetLicenseClass();
            LicenseClassList.DataTextField = "Name";
            LicenseClassList.DataValueField = "Id";
            LicenseClassList.DataBind();

            LocaleList.DataSource = Constants.Proxy.GetLocale();
            LocaleList.DataTextField = "LocaleCode";
            LocaleList.DataValueField = "Id";
            LocaleList.DataBind();

            LocaleList.Items.Insert(0, new ListItem("<Select>", "-1"));
        }
        /// <summary>
        /// Populate the Controls from the LicenseType Class
        /// </summary>
        /// <param name="licenseType"></param>
        private void PopulateControls(Proxy.LicenseType licenseType)
        {
            Operation_Mode licenseTypeOperationMode = (Operation_Mode)Session[licenseTypeOperationSession];
            if (licenseTypeOperationMode == Operation_Mode.Edit)
            {

                LicenseTypeId.Text = licenseType.Id.ToString();

            }
            else if (licenseTypeOperationMode == Operation_Mode.Add)
            {

                LicenseTypeId.Text = string.Empty;
            }
            LicenseTypeNameLabel.Text = licenseType.Name;
            LicenseTypeName.Text = licenseType.Name;
            LicenseClassList.SelectedValue = licenseType.LicenseClassId.ToString();
            LicenseXML.Text = licenseType.LicenseXML;
            BindLegalText(licenseType);

        }
        /// <summary>
        /// Binds the Legal Text array list to the LegalText Listbox
        /// Exclude the legal texts marked for deletion
        /// </summary>
        /// <param name="licenseType"></param>
        private void BindLegalText(Proxy.LicenseType licenseType)
        {
            if (LegalTextList.Items.Count > 0)
            {
                LegalTextList.Items.Clear();
            }
            if (licenseType.LegalTextLocales != null)
            {
                foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocale in licenseType.LegalTextLocales)
                {
                    if (legalTextLocale.Modified != Proxy.DataChangeType.Delete)
                    {
                        ListItem listItem = new ListItem(legalTextLocale.Locale, legalTextLocale.Legaltextlcid.ToString());
                        LegalTextList.Items.Add(listItem);
                    }
                }
                if (LegalTextList.Items.Count > 0)
                {
                    LegalTextList.SelectedIndex = 0;
                    LegalTextList_SelectedIndexChanged(LegalTextList, EventArgs.Empty);
                }
                else
                {
                    LocaleList.SelectedValue = "-1";
                    LegalText.Text = string.Empty;
                }
            }
        }
        /// <summary>
        /// Selected Index changed Event for LegalText List
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void LegalTextList_SelectedIndexChanged(object sender, EventArgs e)
        {
            Proxy.LicenseTypeLegalTextLocale legalTextLocale = GetLicenseTypeLegalTextLocale(Int32.Parse(LegalTextList.SelectedValue));
            LocaleList.SelectedValue = legalTextLocale.Legaltextlcid.ToString();
            LegalText.Text = legalTextLocale.Text;
        }
        /// <summary>
        /// Validates the LicenseType Data before Save
        /// </summary>
        /// <returns></returns>
        private bool ValidateLicenseTypeData()
        {
            this.ErrorMsg.Text = string.Empty;
            int val;

            if (Int32.TryParse(this.LicenseTypeId.Text.Trim(), out val) == false)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "LicenseType id");
                return false;
            }

            if (this.LicenseTypeName.Text.Trim().Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "LicenseType name");
                return false;
            }
            if (this.LicenseXML.Text.Trim().Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "License XML");
                return false;
            }

            if (this.LicenseClassList.SelectedValue.Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "LicenseClass");
                return false;
            }
            return true;
        }
        /// <summary>
        /// Validates the Legal Text Data
        /// </summary>
        /// <returns></returns>
        private bool ValidateLegalText()
        {
            this.ErrorMsg.Text = string.Empty;

            if (this.LocaleList.SelectedValue.Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "Legal Text Locale");
                return false;
            }
            if (this.LocaleList.SelectedValue.Equals("-1"))
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "Legal Text Locale");
                return false;

            }
            if (this.LegalText.Text.Length == 0)
            {
                this.ErrorMsg.Text = string.Format(emptyErrorMessage, "Legal Text");
                return false;
            }

            return true;

        }
        /// <summary>
        /// Sets the control's state according to the Mode of Operation
        /// </summary>
        private void SetLicenseTypeEditState()
        {
            Operation_Mode licenseTypeOperationMode = (Operation_Mode)Session[licenseTypeOperationSession];
            if (licenseTypeOperationMode == Operation_Mode.Add)
            {
                this.LicenseTypeId.Enabled = true;
            }
            this.LicenseTypeName.Enabled = true;
            this.LicenseXML.Enabled = true;
            this.LicenseClassList.Enabled = true;
        }
        /// <summary>
        /// Add legal text Click event 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnAddLegalText_Click(object sender, ImageClickEventArgs e)
        {
            LocaleList.SelectedValue = "-1";
            LegalText.Text = string.Empty;
            Session[legalTextOperationModeSession] = Operation_Mode.Add;
            SetLegalTextEditState();

        }
        /// <summary>
        /// Sets the Legal Text Edit state
        /// </summary>
        /// <param name="beditLegalText"></param>
        private void SetLegalTextEditState()
        {
            Operation_Mode legalTextOperationMode = (Operation_Mode)Session[legalTextOperationModeSession];

            this.btnDeleteLegalText.Enabled = true;
            this.LegalTextList.Enabled = true;
            this.LegalText.Enabled = true;
            this.SaveLegalText.Enabled = true;
            this.CancelLegalText.Enabled = true;
            this.LocaleList.Enabled = true;
            this.btnAddLegalText.Enabled = true;
            this.btnEditLegalText.Enabled = true;

            if (legalTextOperationMode == Operation_Mode.Add)
            {
                this.btnEditLegalText.Enabled = false;
                this.btnDeleteLegalText.Enabled = false;

            }
            else if (legalTextOperationMode == Operation_Mode.Edit)
            {
                this.btnAddLegalText.Enabled = false;
                this.btnDeleteLegalText.Enabled = false;
            }
            else if (legalTextOperationMode == Operation_Mode.Undefined)
            {
                this.SaveLegalText.Enabled = false;
                this.CancelLegalText.Enabled = false;
                this.LocaleList.Enabled = false;
                this.LegalText.Enabled = false;
            }
        }
        /// <summary>
        /// Edit Legal Text Click Event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnEditLegalText_Click(object sender, ImageClickEventArgs e)
        {
            if (LegalTextList.SelectedIndex >= 0)
            {
                Session[legalTextOperationModeSession] = Operation_Mode.Edit;
                SetLegalTextEditState();
            }
        }
        /// <summary>
        /// Click Event for save legal text
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void SaveLegalText_Click(object sender, EventArgs e)
        {
            if (!ValidateLegalText())
            {
                return;
            }
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            Proxy.LicenseTypeLegalTextLocale legalTextLocale = Session[legalTextLocaleSession] as Proxy.LicenseTypeLegalTextLocale;
            Operation_Mode legalTextOperationMode = (Operation_Mode)Session[legalTextOperationModeSession];
            if (legalTextOperationMode == Operation_Mode.Edit)
            {
                if (licenseType.LegalTextLocales != null)
                {
                    foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocaleInstance in licenseType.LegalTextLocales)
                    {
                        if (legalTextLocale.Legaltextlcid == legalTextLocaleInstance.Legaltextlcid)
                        {
                            legalTextLocaleInstance.Text = this.LegalText.Text;
                            legalTextLocaleInstance.Modified = Proxy.DataChangeType.Update;
                        }

                    }
                }
            }
            else if (legalTextOperationMode == Operation_Mode.Add)
            {
                this.ErrorMsg.Text = string.Empty;
                if (GetLicenseTypeLegalTextLocale(Int32.Parse(this.LocaleList.SelectedValue)) != null)
                {
                    this.ErrorMsg.Text = legalTextDuplicate;
                    return;
                }
                Proxy.LicenseTypeLegalTextLocale legalText = new Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.LicenseTypeLegalTextLocale();
                legalText.Legaltextlcid = Int32.Parse(this.LocaleList.SelectedValue);
                legalText.Locale = this.LocaleList.SelectedItem.Text;
                legalText.Text = this.LegalText.Text;
                legalText.Modified = Proxy.DataChangeType.Add;
                legalText.LicenseTypeId = licenseType.Id;
                licenseType.LegalTextLocales = DisplayHelper.ArrayItemAdd(licenseType.LegalTextLocales, legalText);
            }
            BindLegalText(licenseType);
            ResetLegalTextState();

        }
        /// <summary>
        /// Finds the Legal Text based on lcid
        /// </summary>
        /// <param name="lcid"></param>
        /// <returns></returns>
        private Proxy.LicenseTypeLegalTextLocale GetLicenseTypeLegalTextLocale(int lcid)
        {
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            if (licenseType.LegalTextLocales != null)
            {
                foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocale in licenseType.LegalTextLocales)
                {
                    if (legalTextLocale.Legaltextlcid == lcid && legalTextLocale.Modified != Proxy.DataChangeType.Delete)
                    {
                        Session[legalTextLocaleSession] = legalTextLocale;
                        return legalTextLocale;
                    }
                }
            }
            Session[legalTextLocaleSession] = null;
            return null;
        }
        /// <summary>
        /// Delete Legal Text Button Click Event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnDeleteLegalText_Click(object sender, ImageClickEventArgs e)
        {
            if (LegalTextList.SelectedIndex >= 0)
            {
                Proxy.LicenseTypeLegalTextLocale legalTextLocale = Session[legalTextLocaleSession] as Proxy.LicenseTypeLegalTextLocale;
                Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
                legalTextLocale.Modified = Proxy.DataChangeType.Delete;
                BindLegalText(licenseType);
            }
        }
        /// <summary>
        /// Resets the Legal Text State
        /// </summary>
        private void ResetLegalTextState()
        {
            this.LegalText.Enabled = false;
            this.LocaleList.Enabled = false;
            this.SaveLegalText.Enabled = false;
            this.LegalTextList.Enabled = true;
            this.btnAddLegalText.Enabled = true;
            this.btnDeleteLegalText.Enabled = true;
            this.btnEditLegalText.Enabled = true;
            this.CancelLegalText.Enabled = false;

        }
        /// <summary>
        /// Cancel button click event handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Cancel_Click(object sender, EventArgs e)
        {
            Response.Redirect("LicenseTypeList.aspx");
        }
        /// <summary>
        /// Save License Type Button Click
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void SaveLicenseType_Click(object sender, EventArgs e)
        {
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            Operation_Mode licenseTypeOperationMode = (Operation_Mode)Session[licenseTypeOperationSession];
            if (!ValidateLicenseTypeData())
            {
                return;
            }
            if (licenseTypeOperationMode == Operation_Mode.Add)
            {
                if (Constants.Proxy.GetLicenseType(Int32.Parse(LicenseTypeId.Text)) != null)
                {
                    this.ErrorMsg.Text = String.Format(licenseTypeDuplicate, LicenseTypeId.Text);
                    return;
                }
                licenseType.Id = Int32.Parse(LicenseTypeId.Text);
                licenseType.Modified = Proxy.DataChangeType.Add;
                if (licenseType.LegalTextLocales != null)
                {
                    foreach (Proxy.LicenseTypeLegalTextLocale legalTextLocale in licenseType.LegalTextLocales)
                    {
                        legalTextLocale.LicenseTypeId = licenseType.Id;
                    }
                }
            }
            else if (licenseTypeOperationMode == Operation_Mode.Edit)
            {
                licenseType.Modified = Proxy.DataChangeType.Update;
            }
            licenseType.LicenseClassId = Int32.Parse(LicenseClassList.SelectedValue.Trim());
            licenseType.LicenseXML = LicenseXML.Text.Trim();
            licenseType.Name = LicenseTypeName.Text.Trim();
            try
            {
                Constants.Proxy.SaveLicenseType(licenseType);
            }
            catch (SoapException ex)
            {
                this.ErrorMsg.Text = String.Format("Unable to save LicenseType information: {0}", ex.Message);
                return;
            }
            Response.Redirect("LicenseTypeList.aspx");
        }
        /// <summary>
        /// Cancel button click event handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void CancelLegalText_Click(object sender, EventArgs e)
        {
            Proxy.LicenseType licenseType = Session[licenseTypeSession] as Proxy.LicenseType;
            ResetLegalTextState();
            BindLegalText(licenseType);
        }
        # endregion

    }
}

#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_0o2h4cc1.9.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "8CE3219272C936B44E37B43E9517CD2E"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Category.aspx.cs"
using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

using proxy = Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class CategoryPage : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                this.selectCategoryForAddEditTreeView.CategorySystems = Constants.Proxy.GetCategorySystem();
                this.selectCategoryForAddEditTreeView.CategorySystemSelectAction = TreeNodeSelectAction.Expand;
            }
            lblSelectedNodePath.Text = selectCategoryForAddEditTreeView.SelectedCategoryPath;
            Session["LocaleAdded"] = false;
        }

        public void EditCategory_OnClick(object sender, EventArgs e)
        {
            if (this.selectCategoryForAddEditTreeView.SelectedCategoryID == -1)
            {
                lblError.Text = "Please select the category before editing.";
                return;   
            }
            // Grab the category from the cache and populate it into a new category instance
            proxy.Category cachedCat = proxy.CategorySystem.GetCategoryById(this.selectCategoryForAddEditTreeView.SelectedCategoryID);
            
            proxy.Category newCategory = new proxy.Category();
            newCategory.Id = cachedCat.Id;
            newCategory.ParentCategoryId = cachedCat.ParentCategoryId;
            newCategory.CategorySystemId = cachedCat.CategorySystemId;

            List<CategoryLocaleMap> clmList = new List<CategoryLocaleMap>();
            foreach(CategoryLocaleMap cachedClm in cachedCat.CategoryLocaleMap)
            {
                CategoryLocaleMap clm = new CategoryLocaleMap();
                clm.FromLcid = cachedClm.FromLcid;
                clm.ToLcid = cachedClm.ToLcid;
                clmList.Add(clm);
            }
            newCategory.CategoryLocaleMap = clmList.ToArray();

            List<CategoryLocale> clList = new List<CategoryLocale>();
            foreach (CategoryLocale cachedCl in cachedCat.Locales)
            {
                CategoryLocale cl = null;
                if (cachedCl is CategoryCorporationLocale)
                {
                    cl = new CategoryCorporationLocale();
                    ((CategoryCorporationLocale)cl).BackgroundImageId = ((CategoryCorporationLocale)cachedCl).BackgroundImageId;
                    ((CategoryCorporationLocale)cl).Description = ((CategoryCorporationLocale)cachedCl).Description;
                    ((CategoryCorporationLocale)cl).HtmlDescription = ((CategoryCorporationLocale)cachedCl).HtmlDescription;
                    ((CategoryCorporationLocale)cl).LogoImageId = ((CategoryCorporationLocale)cachedCl).LogoImageId;
                    ((CategoryCorporationLocale)cl).RssAnnouncement = ((CategoryCorporationLocale)cachedCl).RssAnnouncement;
                    ((CategoryCorporationLocale)cl).RssFeatures = ((CategoryCorporationLocale)cachedCl).RssFeatures;
                    ((CategoryCorporationLocale)cl).RssNews = ((CategoryCorporationLocale)cachedCl).RssNews;
                    ((CategoryCorporationLocale)cl).WebSite = ((CategoryCorporationLocale)cachedCl).WebSite;
                }
                else
                {
                    cl = new CategoryLocale();
                }                
                cl.Lcid = cachedCl.Lcid;
                cl.Name = cachedCl.Name;
                cl.CategoryId = cachedCl.CategoryId;
                List<int> lcidMaps = new List<int>();
                foreach (int i in cachedCl.LcidMaps)
                {
                    lcidMaps.Add(i);
                }
                cl.LcidMaps = lcidMaps.ToArray();
                clList.Add(cl);
            }
            newCategory.Locales = clList.ToArray();

            Session.Add("Category", newCategory);
            Response.Redirect("CategoryAddEdit.aspx");
        }

        public void AddCategory_OnClick(object sender, EventArgs e)
        {
            Session["Category"] = NewCategory();
            Response.Redirect("CategoryAddEdit.aspx");
        }

        private proxy.Category NewCategory()
        {
            proxy.Category c = new proxy.Category();
            c.Id = -1;
            c.Modified = DataChangeType.Add;
            c.CategoryLocaleMap = new CategoryLocaleMap[0];
            
            return c;
        }
    }
}



#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_alu8066w.0.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "1B21498B67B7BDE85AF7C5BCB873E1B7"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Ems.Apps.Web.Editorial {
    
    
    public partial class LicenseType : System.Web.SessionState.IRequiresSessionState {
        
        
        #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::AjaxControlToolkit.ToolkitScriptManager ScriptManager1;
        
        #line default
        #line hidden
        
        
        #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Label TitleMsg;
        
        #line default
        #line hidden
        
        
        #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Label LicenseTypeNameLabel;
        
        #line default
        #line hidden
        
        
        #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Label ErrorMsg;
        
        #line default
        #line hidden
        
        
        #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.TextBox LicenseTypeId;
        
        #line default
        #line hidden
        
        
        #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.TextBox LicenseTypeName;
        
        #line default
        #line hidden
        
        
        #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.DropDownList LicenseClassList;
        
        #line default
        #line hidden
        
        
        #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.TextBox LicenseXML;
        
        #line default
        #line hidden
        
        
        #line 69 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Button SaveLicenseType;
        
        #line default
        #line hidden
        
        
        #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Button Cancel;
        
        #line default
        #line hidden
        
        
        #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.ListBox LegalTextList;
        
        #line default
        #line hidden
        
        
        #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.ImageButton btnAddLegalText;
        
        #line default
        #line hidden
        
        
        #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.ImageButton btnEditLegalText;
        
        #line default
        #line hidden
        
        
        #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.ImageButton btnDeleteLegalText;
        
        #line default
        #line hidden
        
        
        #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.DropDownList LocaleList;
        
        #line default
        #line hidden
        
        
        #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.TextBox LegalText;
        
        #line default
        #line hidden
        
        
        #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Button SaveLegalText;
        
        #line default
        #line hidden
        
        
        #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.WebControls.Button CancelLegalText;
        
        #line default
        #line hidden
        
        
        #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
        protected global::System.Web.UI.UpdatePanel updatePanel1;
        
        #line default
        #line hidden
        
        protected System.Web.Profile.DefaultProfile Profile {
            get {
                return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
            }
        }
        
        protected System.Web.HttpApplication ApplicationInstance {
            get {
                return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
            }
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class domain_licensetype_aspx : global::Microsoft.Ems.Apps.Web.Editorial.LicenseType, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public domain_licensetype_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Domain/LicenseType.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.domain_licensetype_aspx.@__initialized == false)) {
                global::ASP.domain_licensetype_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[4];
                dependencies[0] = "~/Domain/LicenseType.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Domain/LicenseType.aspx.cs";
                global::ASP.domain_licensetype_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.domain_licensetype_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ToolkitScriptManager @__BuildControlScriptManager1() {
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::AjaxControlToolkit.ToolkitScriptManager();
            
            #line default
            #line hidden
            this.ScriptManager1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.EnablePartialRendering = true;
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "ScriptManager1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlTitleMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.TitleMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "TitleMsg";
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Font.Bold = true;
            
            #line default
            #line hidden
            
            #line 15 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlLicenseTypeNameLabel() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.LicenseTypeNameLabel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LicenseTypeNameLabel";
            
            #line default
            #line hidden
            
            #line 18 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ForeColor = System.Drawing.Color.Blue;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlErrorMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.ErrorMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "ErrorMsg";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.CssClass = "errorMsg";
            
            #line default
            #line hidden
            
            #line 23 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlLicenseTypeId() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.LicenseTypeId = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LicenseTypeId";
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.MaxLength = 50;
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(360, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 35 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlLicenseTypeName() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.LicenseTypeName = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LicenseTypeName";
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.MaxLength = 50;
            
            #line default
            #line hidden
            
            #line 42 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(360, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlLicenseClassList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.LicenseClassList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LicenseClassList";
            
            #line default
            #line hidden
            
            #line 50 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(360, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlLicenseXML() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.LicenseXML = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LicenseXML";
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.TextMode = System.Web.UI.WebControls.TextBoxMode.MultiLine;
            
            #line default
            #line hidden
            
            #line 59 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(360, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlSaveLicenseType() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 69 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.SaveLicenseType = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 69 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "SaveLicenseType";
            
            #line default
            #line hidden
            
            #line 69 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "Save";
            
            #line default
            #line hidden
            
            #line 69 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.EventHandler(this.SaveLicenseType_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlCancel() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.Cancel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "Cancel";
            
            #line default
            #line hidden
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "Cancel";
            
            #line default
            #line hidden
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.EventHandler(this.Cancel_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListBox @__BuildControlLegalTextList() {
            global::System.Web.UI.WebControls.ListBox @__ctrl;
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListBox();
            
            #line default
            #line hidden
            this.LegalTextList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LegalTextList";
            
            #line default
            #line hidden
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.AutoPostBack = true;
            
            #line default
            #line hidden
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.SelectionMode = System.Web.UI.WebControls.ListSelectionMode.Single;
            
            #line default
            #line hidden
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(390, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(120, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 95 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.SelectedIndexChanged += new System.EventHandler(this.LegalTextList_SelectedIndexChanged);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControlbtnAddLegalText() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            this.btnAddLegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "btnAddLegalText";
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ToolTip = "Add Localized Legal Text";
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 103 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.Web.UI.ImageClickEventHandler(this.btnAddLegalText_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControlbtnEditLegalText() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            this.btnEditLegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "btnEditLegalText";
            
            #line default
            #line hidden
            
            #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ToolTip = "Edit Localized Legal Text";
            
            #line default
            #line hidden
            
            #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ImageUrl = "~/Images/Edit.gif";
            
            #line default
            #line hidden
            
            #line 109 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.Web.UI.ImageClickEventHandler(this.btnEditLegalText_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControlbtnDeleteLegalText() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            this.btnDeleteLegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "btnDeleteLegalText";
            
            #line default
            #line hidden
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ToolTip = "Delete Localized Legal Text";
            
            #line default
            #line hidden
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ImageUrl = "~/Images/wastebasket_button.gif";
            
            #line default
            #line hidden
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.Web.UI.ImageClickEventHandler(this.btnDeleteLegalText_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlLocaleList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.LocaleList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LocaleList";
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(390, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 126 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlLegalText() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.LegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "LegalText";
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(390, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.MaxLength = 2000;
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.TextMode = System.Web.UI.WebControls.TextBoxMode.MultiLine;
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlSaveLegalText() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.SaveLegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "SaveLegalText";
            
            #line default
            #line hidden
            
            #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "Save Legal Text";
            
            #line default
            #line hidden
            
            #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            
            #line 145 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.EventHandler(this.SaveLegalText_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlCancelLegalText() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.CancelLegalText = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "CancelLegalText";
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Text = "Cancel";
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Enabled = false;
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Click += new System.EventHandler(this.CancelLegalText_Click);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            <table>\r\n                <table>\r\n                    <tr valign=\"t" +
                        "op\">\r\n                        <td style=\"width: 150px\">\r\n                       " +
                        "     "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl1 = this.@__BuildControlTitleMsg();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        </td>\r\n                        <td style=\"width: 450px\"" +
                        ">\r\n                            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl2;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl2 = this.@__BuildControlLicenseTypeNameLabel();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n                        </td>\r\n                    </tr>\r\n               " +
                        " </table>\r\n                <table>\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl3;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl3 = this.@__BuildControlErrorMsg();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(0, 552, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl4;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl4 = this.@__BuildControlLicenseTypeId();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(552, 382, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl5;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl5 = this.@__BuildControlLicenseTypeName();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(934, 442, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl6;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl6 = this.@__BuildControlLicenseClassList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl6);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(1376, 428, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl7;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl7 = this.@__BuildControlLicenseXML();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl7);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(1804, 522, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl8;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl8 = this.@__BuildControlSaveLicenseType();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl8);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                                        </td>\r\n                                " +
                        "    </tr>\r\n                                    <tr>\r\n                           " +
                        "             <td colspan=\"2\">\r\n                                            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl9;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl9 = this.@__BuildControlCancel();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl9);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(2326, 982, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListBox @__ctrl10;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl10 = this.@__BuildControlLegalTextList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl10);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(3308, 316, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl11;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl11 = this.@__BuildControlbtnAddLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl11);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(3624, 284, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl12;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl12 = this.@__BuildControlbtnEditLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl12);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(3908, 284, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl13;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl13 = this.@__BuildControlbtnDeleteLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl13);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(4192, 516, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl14;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl14 = this.@__BuildControlLocaleList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl14);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(4708, 401, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl15;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl15 = this.@__BuildControlLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl15);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(5109, 349, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl16;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl16 = this.@__BuildControlSaveLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl16);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl17;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl17 = this.@__BuildControlCancelLegalText();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl17);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        </td>\r\n                     </tr>\r\n                </ta" +
                        "ble>\r\n            </table>\r\n        "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanel1() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanel1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.ID = "updatePanel1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl1;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl1 = this.@__BuildControlScriptManager1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n <script language=\"javascript\" type=\"text/javascript\" src=\"~/JavaScripts/Hourgl" +
                        "assJavascript.js\"></script>\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl2;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl2 = this.@__BuildControlupdatePanel1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(domain_licensetype_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Title = "Xbox Domain Data Management Tools- LicenseType Edit";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__ctrl.Theme = "SiteTheme";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseType.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.domain_licensetype_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.domain_licensetype_aspx.@__fileDependencies);
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return -1002593277;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_alu8066w.10.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.CodeDom.Compiler.GeneratedCodeAttribute("ASP.NET", "2.0.50727.4971")]

namespace @__ASP {
    
    
    internal class FastObjectFactory_app_web_alu8066w {
        
        
        #line 1 "c:\\dummy.txt"

        #line default
        #line hidden
        
        
        private FastObjectFactory_app_web_alu8066w() {
        }
        
        static object Create_ASP_domain_licensetype_aspx() {
            return new ASP.domain_licensetype_aspx();
        }
        
        static object Create_ASP_domain_licensetypelist_aspx() {
            return new ASP.domain_licensetypelist_aspx();
        }
        
        static object Create_ASP_domain_pricingrule_aspx() {
            return new ASP.domain_pricingrule_aspx();
        }
        
        static object Create_ASP_domain_pricingrulelist_aspx() {
            return new ASP.domain_pricingrulelist_aspx();
        }
        
        static object Create_ASP_domain_entitylist_aspx() {
            return new ASP.domain_entitylist_aspx();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_alu8066w.4.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "D4DF0C33FFEB15159E01D9AB5765F370"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Ems.Apps.Web.Editorial {
    
    
    public partial class PricingRuleEdit : System.Web.SessionState.IRequiresSessionState {
        
        
        #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::AjaxControlToolkit.ToolkitScriptManager ScriptManager1;
        
        #line default
        #line hidden
        
        
        #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.Label TitleMsg;
        
        #line default
        #line hidden
        
        
        #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.Label ErrorMsg;
        
        #line default
        #line hidden
        
        
        #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.TextBox RuleID;
        
        #line default
        #line hidden
        
        
        #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.TextBox RuleName;
        
        #line default
        #line hidden
        
        
        #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.DropDownList ProviderList;
        
        #line default
        #line hidden
        
        
        #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.DropDownList CountryList;
        
        #line default
        #line hidden
        
        
        #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.DropDownList RetailCurrencyList;
        
        #line default
        #line hidden
        
        
        #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.DropDownList WholesaleCurrencyList;
        
        #line default
        #line hidden
        
        
        #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.DropDownList MediaTypeList;
        
        #line default
        #line hidden
        
        
        #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.HtmlControls.HtmlGenericControl reqStartDate;
        
        #line default
        #line hidden
        
        
        #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.TextBox StartDate;
        
        #line default
        #line hidden
        
        
        #line 79 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.TextBox Margin;
        
        #line default
        #line hidden
        
        
        #line 84 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.TextBox Rate;
        
        #line default
        #line hidden
        
        
        #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.GridView PriceGrid;
        
        #line default
        #line hidden
        
        
        #line 216 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.Label MasterStatusDisplay;
        
        #line default
        #line hidden
        
        
        #line 220 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.Button MasterSave;
        
        #line default
        #line hidden
        
        
        #line 224 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.WebControls.Button MasterCancel;
        
        #line default
        #line hidden
        
        
        #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::System.Web.UI.UpdatePanel updatePanel1;
        
        #line default
        #line hidden
        
        
        #line 235 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
        protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
        
        #line default
        #line hidden
        
        protected System.Web.Profile.DefaultProfile Profile {
            get {
                return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
            }
        }
        
        protected System.Web.HttpApplication ApplicationInstance {
            get {
                return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
            }
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 3 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class domain_pricingrule_aspx : global::Microsoft.Ems.Apps.Web.Editorial.PricingRuleEdit, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public domain_pricingrule_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Domain/PricingRule.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.domain_pricingrule_aspx.@__initialized == false)) {
                global::ASP.domain_pricingrule_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[6];
                dependencies[0] = "~/Domain/PricingRule.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Domain/PricingRule.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                global::ASP.domain_pricingrule_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.domain_pricingrule_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ToolkitScriptManager @__BuildControlScriptManager1() {
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::AjaxControlToolkit.ToolkitScriptManager();
            
            #line default
            #line hidden
            this.ScriptManager1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EnablePartialRendering = true;
            
            #line default
            #line hidden
            
            #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ScriptManager1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlTitleMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.TitleMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "TitleMsg";
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CssClass = "heading";
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("Add/Edit PricingRule"));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlErrorMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.ErrorMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ErrorMsg";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CssClass = "errorMsg";
            
            #line default
            #line hidden
            
            #line 12 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EnableViewState = false;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlRuleID() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.RuleID = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "RuleID";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 5;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlRuleName() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.RuleName = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "RuleName";
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 50;
            
            #line default
            #line hidden
            
            #line 25 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlProviderList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.ProviderList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ProviderList";
            
            #line default
            #line hidden
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataValueField = "Id";
            
            #line default
            #line hidden
            
            #line 30 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataTextField = "Name";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control4() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "US";
            
            #line default
            #line hidden
            
            #line 37 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "United States";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control5() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "CA";
            
            #line default
            #line hidden
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Canada";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control6() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "FR";
            
            #line default
            #line hidden
            
            #line 39 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "France";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control7() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "DE";
            
            #line default
            #line hidden
            
            #line 40 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Germany";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.ListItemCollection @__ctrl) {
            global::System.Web.UI.WebControls.ListItem @__ctrl1;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control4();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl2;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control5();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl3;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControl__control6();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl4;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl4 = this.@__BuildControl__control7();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlCountryList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.CountryList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "CountryList";
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.@__BuildControl__control3(@__ctrl.Items);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlRetailCurrencyList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.RetailCurrencyList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "RetailCurrencyList";
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataValueField = "Id";
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataTextField = "Name";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlWholesaleCurrencyList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.WholesaleCurrencyList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "WholesaleCurrencyList";
            
            #line default
            #line hidden
            
            #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataValueField = "Id";
            
            #line default
            #line hidden
            
            #line 55 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.DataTextField = "Name";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control9() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "2";
            
            #line default
            #line hidden
            
            #line 62 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Movie";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control10() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 63 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 63 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "11";
            
            #line default
            #line hidden
            
            #line 63 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Movie Preview";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control11() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "3";
            
            #line default
            #line hidden
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "TV Show";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control12() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "8";
            
            #line default
            #line hidden
            
            #line 65 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "TV Episode";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control13() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "9";
            
            #line default
            #line hidden
            
            #line 66 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "TV Season";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ListItem @__BuildControl__control14() {
            global::System.Web.UI.WebControls.ListItem @__ctrl;
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ListItem();
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Value = "10";
            
            #line default
            #line hidden
            
            #line 67 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "TV Series";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control8(System.Web.UI.WebControls.ListItemCollection @__ctrl) {
            global::System.Web.UI.WebControls.ListItem @__ctrl1;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control9();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl2;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control10();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl3;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControl__control11();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl4;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl4 = this.@__BuildControl__control12();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl5;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl5 = this.@__BuildControl__control13();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl5);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ListItem @__ctrl6;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl6 = this.@__BuildControl__control14();
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl6);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.DropDownList @__BuildControlMediaTypeList() {
            global::System.Web.UI.WebControls.DropDownList @__ctrl;
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.DropDownList();
            
            #line default
            #line hidden
            this.MediaTypeList = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "MediaTypeList";
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 61 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.@__BuildControl__control8(@__ctrl.Items);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.HtmlControls.HtmlGenericControl @__BuildControlreqStartDate() {
            global::System.Web.UI.HtmlControls.HtmlGenericControl @__ctrl;
            
            #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.HtmlControls.HtmlGenericControl("span");
            
            #line default
            #line hidden
            this.reqStartDate = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "reqStartDate";
            
            #line default
            #line hidden
            
            #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("class", "validator");
            
            #line default
            #line hidden
            
            #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Visible = false;
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 73 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("*"));
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlStartDate() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.StartDate = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "StartDate";
            
            #line default
            #line hidden
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 74 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 10;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlMargin() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 79 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.Margin = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 79 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "Margin";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControlRate() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 84 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            this.Rate = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 84 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "Rate";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control16() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 198 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 198 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceIdEmpty";
            
            #line default
            #line hidden
            
            #line 198 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 198 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 5;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control17() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 199 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 199 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceFromEmpty";
            
            #line default
            #line hidden
            
            #line 199 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 199 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control18() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 200 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 200 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceToEmpty";
            
            #line default
            #line hidden
            
            #line 200 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 200 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control19() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 201 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 201 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PointsRetailEmpty";
            
            #line default
            #line hidden
            
            #line 201 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 201 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 7;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control20() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 202 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 202 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceRetailEmpty";
            
            #line default
            #line hidden
            
            #line 202 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 202 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control21() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceAddButton";
            
            #line default
            #line hidden
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "InsertEmpty";
            
            #line default
            #line hidden
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 203 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control15(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(this.CreateResourceBasedLiteralControl(5458, 607, true));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control16();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                    <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl2;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control17();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                    <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl3;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControl__control18();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                    <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl4;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl4 = this.@__BuildControl__control19();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                    <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl5;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl5 = this.@__BuildControl__control20();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                    <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl6;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl6 = this.@__BuildControl__control21();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl6);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n                </tr>           \r\n                </table>\r\n            "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control22(System.Web.UI.WebControls.PagerSettings @__ctrl) {
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Mode = System.Web.UI.WebControls.PagerButtons.NumericFirstLast;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control23(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control27() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 112 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 112 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceIdLabel";
            
            #line default
            #line hidden
            
            #line 112 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control26(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control27();
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control29() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceIdEdit";
            
            #line default
            #line hidden
            
            #line 115 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control28(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control29();
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control31() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 118 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 118 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceIdFooter";
            
            #line default
            #line hidden
            
            #line 118 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 118 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 5;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control30(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control31();
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control25() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control26), null);
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control28), null);
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control30));
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "ID";
            
            #line default
            #line hidden
            
            #line 110 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control34() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 124 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 124 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceFromLabel";
            
            #line default
            #line hidden
            
            #line 124 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control33(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control34();
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control36() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 127 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 127 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceFromEdit";
            
            #line default
            #line hidden
            
            #line 127 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 127 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control35(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control36();
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control38() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 130 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 130 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceFromFooter";
            
            #line default
            #line hidden
            
            #line 130 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 130 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control37(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control38();
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control32() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control33), null);
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control35), null);
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control37));
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "Price From";
            
            #line default
            #line hidden
            
            #line 122 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control41() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 136 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 136 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceToLabel";
            
            #line default
            #line hidden
            
            #line 136 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control40(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control41();
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control43() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 139 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 139 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceToEdit";
            
            #line default
            #line hidden
            
            #line 139 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 139 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control42(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control43();
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control45() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceToFooter";
            
            #line default
            #line hidden
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 142 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control44(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control45();
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control39() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control40), null);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control42), null);
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control44));
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "Price To";
            
            #line default
            #line hidden
            
            #line 134 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control48() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 148 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 148 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PointsRetailLabel";
            
            #line default
            #line hidden
            
            #line 148 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 148 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            ((System.Web.UI.IAttributeAccessor)(@__ctrl)).SetAttribute("MaxLength", "10");
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control47(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control48();
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control50() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 151 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 151 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PointsRetailEdit";
            
            #line default
            #line hidden
            
            #line 151 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 151 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 7;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control49(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control50();
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control52() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 154 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 154 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PointsRetailFooter";
            
            #line default
            #line hidden
            
            #line 154 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 154 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 7;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control51(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control52();
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control46() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control47), null);
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control49), null);
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control51));
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "Points Retail";
            
            #line default
            #line hidden
            
            #line 146 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control55() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 160 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 160 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceRetailLabel";
            
            #line default
            #line hidden
            
            #line 160 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control54(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control55();
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control57() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 163 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 163 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceRetailEdit";
            
            #line default
            #line hidden
            
            #line 163 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 163 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control56(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control57();
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control59() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 166 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 166 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceRetailFooter";
            
            #line default
            #line hidden
            
            #line 166 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 166 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MaxLength = 19;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control58(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control59();
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control53() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control54), null);
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control56), null);
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control58));
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "Price Retail";
            
            #line default
            #line hidden
            
            #line 158 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control62() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ImageAdd";
            
            #line default
            #line hidden
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ImageUrl = "~/Images/Edit.gif";
            
            #line default
            #line hidden
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "Edit";
            
            #line default
            #line hidden
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 172 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ConfirmButtonExtender @__BuildControl__control63() {
            global::AjaxControlToolkit.ConfirmButtonExtender @__ctrl;
            
            #line 173 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::AjaxControlToolkit.ConfirmButtonExtender();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 173 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ConfirmButtonExtenderDelete";
            
            #line default
            #line hidden
            
            #line 173 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.TargetControlID = "ImageRemove";
            
            #line default
            #line hidden
            
            #line 173 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ConfirmText = "Are you sure you want to delete this price instance?";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control64() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ImageRemove";
            
            #line default
            #line hidden
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ImageUrl = "~/Images/WasteBasket_Button.gif";
            
            #line default
            #line hidden
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "Delete";
            
            #line default
            #line hidden
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 175 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control61(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl1;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control62();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ConfirmButtonExtender @__ctrl2;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control63();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl3;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControl__control64();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.LinkButton @__BuildControl__control66() {
            global::System.Web.UI.WebControls.LinkButton @__ctrl;
            
            #line 178 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.LinkButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 178 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "LinkUpdate";
            
            #line default
            #line hidden
            
            #line 178 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Update";
            
            #line default
            #line hidden
            
            #line 178 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "Update";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.LinkButton @__BuildControl__control67() {
            global::System.Web.UI.WebControls.LinkButton @__ctrl;
            
            #line 179 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.LinkButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 179 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "LinkCancel";
            
            #line default
            #line hidden
            
            #line 179 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Cancel";
            
            #line default
            #line hidden
            
            #line 179 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "Cancel";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control65(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.LinkButton @__ctrl1;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control66();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.LinkButton @__ctrl2;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control67();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control69() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "ImageButton3";
            
            #line default
            #line hidden
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CommandName = "Insert";
            
            #line default
            #line hidden
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 182 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control68(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl1;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control69();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("  \r\n                    "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control60() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control61), null);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EditItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control65), null);
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control68));
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderText = "Action";
            
            #line default
            #line hidden
            
            #line 170 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control24(System.Web.UI.WebControls.DataControlFieldCollection @__ctrl) {
            global::System.Web.UI.WebControls.TemplateField @__ctrl1;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControl__control25();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl2;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControl__control32();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl3;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControl__control39();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl4;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl4 = this.@__BuildControl__control46();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl5;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl5 = this.@__BuildControl__control53();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl5);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl6;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl6 = this.@__BuildControl__control60();
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Add(@__ctrl6);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.GridView @__BuildControlPriceGrid() {
            global::System.Web.UI.WebControls.GridView @__ctrl;
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.GridView();
            
            #line default
            #line hidden
            this.PriceGrid = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.EmptyDataTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control15));
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "PriceGrid";
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.AutoGenerateColumns = false;
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.AllowPaging = true;
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ShowHeader = true;
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ShowFooter = true;
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.HeaderStyle.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.PageSize = 10;
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.CssClass = "grid";
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(500, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.@__BuildControl__control22(@__ctrl.PagerSettings);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.@__BuildControl__control23(@__ctrl.HeaderStyle);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.@__BuildControl__control24(@__ctrl.Columns);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowDataBound += new System.Web.UI.WebControls.GridViewRowEventHandler(this.PriceGrid_OnRowDataBound);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowEditing += new System.Web.UI.WebControls.GridViewEditEventHandler(this.PriceGrid_OnRowEditing);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowCancelingEdit += new System.Web.UI.WebControls.GridViewCancelEditEventHandler(this.PriceGrid_OnRowCancelingEdit);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowUpdating += new System.Web.UI.WebControls.GridViewUpdateEventHandler(this.PriceGrid_OnRowUpdating);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowDeleting += new System.Web.UI.WebControls.GridViewDeleteEventHandler(this.PriceGrid_OnRowDeleting);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.PageIndexChanging += new System.Web.UI.WebControls.GridViewPageEventHandler(this.PriceGrid_OnPageIndexChanging);
            
            #line default
            #line hidden
            
            #line 90 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.RowCommand += new System.Web.UI.WebControls.GridViewCommandEventHandler(this.PriceGrid_OnRowCommand);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlMasterStatusDisplay() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 216 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.MasterStatusDisplay = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 216 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "MasterStatusDisplay";
            
            #line default
            #line hidden
            
            #line 216 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlMasterSave() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 220 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.MasterSave = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 220 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "MasterSave";
            
            #line default
            #line hidden
            
            #line 220 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Save";
            
            #line default
            #line hidden
            
            #line 220 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Click += new System.EventHandler(this.PriceSave_OnClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Button @__BuildControlMasterCancel() {
            global::System.Web.UI.WebControls.Button @__ctrl;
            
            #line 224 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Button();
            
            #line default
            #line hidden
            this.MasterCancel = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 224 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "MasterCancel";
            
            #line default
            #line hidden
            
            #line 224 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Text = "Cancel";
            
            #line default
            #line hidden
            
            #line 224 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Click += new System.EventHandler(this.PriceCancel_OnClick);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl(" \r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControlTitleMsg();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl2;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControlErrorMsg();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<br />\r\n<table border=\"0\" cellpadding=\"0\">\r\n<tr valign=\"top\">\r\n    <td>\r\n    <div" +
                        " style=\"border-width:thin; border-style:solid\">\r\n    <table>\r\n    <tr>\r\n        " +
                        "<td align=\"right\">ID</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl3;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControlRuleID();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n        <td></td>\r\n    </tr>    \r\n    <tr>\r\n        <td align=\"right\">Name" +
                        "</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl4;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl4 = this.@__BuildControlRuleName();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"right\">Provider" +
                        "</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl5;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl5 = this.@__BuildControlProviderList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"right\">Country<" +
                        "/td>\r\n        <td>\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl6;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl6 = this.@__BuildControlCountryList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl6);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("    \r\n        </td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"r" +
                        "ight\">\r\n            Retail Currency</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl7;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl7 = this.@__BuildControlRetailCurrencyList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl7);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        </td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"right" +
                        "\">\r\n            Wholesale Currency</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl8;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl8 = this.@__BuildControlWholesaleCurrencyList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl8);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        </td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"right" +
                        "\">Media Type</td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.DropDownList @__ctrl9;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl9 = this.@__BuildControlMediaTypeList();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl9);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("    \r\n        </td>\r\n        <td></td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"r" +
                        "ight\" valign=\"middle\">"));
            
            #line default
            #line hidden
            global::System.Web.UI.HtmlControls.HtmlGenericControl @__ctrl10;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl10 = this.@__BuildControlreqStartDate();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl10);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("<nobr>Start Date</nobr></td>\r\n        <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl11;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl11 = this.@__BuildControlStartDate();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl11);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n    </tr> \r\n    <tr >\r\n        <td align=\"right\">Margin</td>\r\n        <td>" +
                        "\r\n            "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl12;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl12 = this.@__BuildControlMargin();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl12);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td align=\"right\">Rate</td>\r\n      " +
                        "  <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl13;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl13 = this.@__BuildControlRate();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl13);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n    </tr>\r\n    <tr><td colspan=\"2\"></td></tr>\r\n    <tr valign=\"top\">\r\n    " +
                        "    <td align=\"right\" valign=\"top\">Price Mapping</td>\r\n        <td colspan=\"2\">\r" +
                        "\n        "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.GridView @__ctrl14;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl14 = this.@__BuildControlPriceGrid();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl14);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        </td>\r\n    </tr>\r\n    </table>\r\n    </div>\r\n    </td>\r\n    <td id=\"stat" +
                        "us\">\r\n        <table style=\"width:150px; background-color:#C5D2D3\">\r\n        <tr" +
                        "><td>Status</td>\r\n            <td>"));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl15;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl15 = this.@__BuildControlMasterStatusDisplay();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl15);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("</td>\r\n        </tr>\r\n        <tr><td colspan=\"2\">\r\n                <br />\r\n     " +
                        "           "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl16;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl16 = this.@__BuildControlMasterSave();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl16);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n            </td>\r\n        </tr>\r\n        <tr><td colspan=\"2\">\r\n               " +
                        " "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Button @__ctrl17;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl17 = this.@__BuildControlMasterCancel();
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl17);
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                <br />\r\n            </td>\r\n        </tr>  \r\n        <tr><td>&nb" +
                        "sp;</td></tr>\r\n        </table>\r\n    </td>    \r\n</tr>\r\n</table>\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanel1() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanel1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "updatePanel1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 235 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 235 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 235 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl1;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl1 = this.@__BuildControlScriptManager1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<script language=\"javascript\" type=\"text/javascript\" src=\"~/JavaScripts/Hourgla" +
                        "ssJavascript.js\"></script>\r\n"));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl2;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl2 = this.@__BuildControlupdatePanel1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl3;
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl3 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <br />\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(domain_pricingrule_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__ctrl.Title = "Xbox Domain Data Management Tools";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 6 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n\r\n\r\n\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.domain_pricingrule_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.domain_pricingrule_aspx.@__fileDependencies);
            this.Request.ValidateInput();
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return 1220681079;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_alu8066w.3.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "58AAF68670A25F41928FC891B9FECD1B"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx.cs"
using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class LicenseTypeList : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!this.IsPostBack)
            {
                BindLicenseTypeList();
            }
        }

        protected void LicenseTypeGrid_OnRowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.LicenseType licenseType = e.Row.DataItem as Microsoft.Ems.Apps.Web.CatalogWebServiceProxy.LicenseType;
                ((Label)e.Row.FindControl("IdLabel")).Text = licenseType.Id.ToString();
                ((Label)e.Row.FindControl("NameLabel")).Text = licenseType.Name;
                ((Label)e.Row.FindControl("LicenseClassListLabel")).Text = Constants.Proxy.GetLicenseClass(licenseType.LicenseClassId).Name;
                ((TextBox)e.Row.FindControl("LicenseXmlLabel")).Text = licenseType.LicenseXML;
            }
        }
        protected void LicenseTypeGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            LicenseTypeGrid.PageIndex = e.NewPageIndex;
            BindLicenseTypeList();
        }
        protected void LicenseTypeGrid_OnRowEditing(object sender, GridViewEditEventArgs e)
        {
            GridView gridView = (GridView)sender;
            string licenseTypeId = ((Label)gridView.Rows[e.NewEditIndex].FindControl("IdLabel")).Text;
            LicenseTypeGrid.EditIndex = e.NewEditIndex;
            BindLicenseTypeList();
            Response.Redirect("LicenseType.aspx?LicenseTypeID=" + licenseTypeId);

        }
        private void BindLicenseTypeList()
        {
            LicenseTypeGrid.DataSource = Constants.Proxy.GetLicenseType();
            LicenseTypeGrid.DataBind();
        }
        protected void LicenseTypeGrid_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "Insert")
            {
                Response.Redirect("LicenseType.aspx");
            }
        }
    }
}



#line default
#line hidden
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_alu8066w.2.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "1A02E8F40CA1F232B6A446B309A026BF"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Ems.Apps.Web.Editorial {
    
    
    public partial class LicenseTypeList : System.Web.SessionState.IRequiresSessionState {
        
        
        #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
        protected global::AjaxControlToolkit.ToolkitScriptManager ScriptManager1;
        
        #line default
        #line hidden
        
        
        #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
        protected global::System.Web.UI.UpdatePanel updatePanel1;
        
        #line default
        #line hidden
        
        
        #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
        protected global::System.Web.UI.WebControls.Label ErrorMsg;
        
        #line default
        #line hidden
        
        
        #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
        protected global::System.Web.UI.WebControls.GridView LicenseTypeGrid;
        
        #line default
        #line hidden
        
        
        #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
        protected global::ASP.component_sessiontimedoutredirect_ascx SessionTimedOutRedirect1;
        
        #line default
        #line hidden
        
        protected System.Web.Profile.DefaultProfile Profile {
            get {
                return ((System.Web.Profile.DefaultProfile)(this.Context.Profile));
            }
        }
        
        protected System.Web.HttpApplication ApplicationInstance {
            get {
                return ((System.Web.HttpApplication)(this.Context.ApplicationInstance));
            }
        }
    }
}
namespace ASP {
    
    #line 284 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Security;
    
    #line default
    #line hidden
    
    #line 283 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.SessionState;
    
    #line default
    #line hidden
    
    #line 7 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
    using AjaxControlToolkit;
    
    #line default
    #line hidden
    
    #line 281 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
    using System.Web.UI.WebControls;
    
    #line default
    #line hidden
    
    #line 279 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text;
    
    #line default
    #line hidden
    
    #line 277 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections.Specialized;
    
    #line default
    #line hidden
    
    #line 285 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Profile;
    
    #line default
    #line hidden
    
    #line 276 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Collections;
    
    #line default
    #line hidden
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
    using System.Web.UI.WebControls.WebParts;
    
    #line default
    #line hidden
    
    #line 278 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Configuration;
    
    #line default
    #line hidden
    
    #line 275 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System;
    
    #line default
    #line hidden
    
    #line 5 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
    using ASP;
    
    #line default
    #line hidden
    
    #line 282 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.Caching;
    
    #line default
    #line hidden
    
    #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
    using System.Web.UI;
    
    #line default
    #line hidden
    
    #line 280 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Text.RegularExpressions;
    
    #line default
    #line hidden
    
    #line 289 "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\web.config"
    using System.Web.UI.HtmlControls;
    
    #line default
    #line hidden
    
    
    [System.Runtime.CompilerServices.CompilerGlobalScopeAttribute()]
    public class domain_licensetypelist_aspx : global::Microsoft.Ems.Apps.Web.Editorial.LicenseTypeList, System.Web.IHttpHandler {
        
        private static bool @__initialized;
        
        private static object @__stringResource;
        
        private static object @__fileDependencies;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public domain_licensetypelist_aspx() {
            string[] dependencies;
            
            #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx.cs"
            ((global::System.Web.UI.Page)(this)).AppRelativeVirtualPath = "~/Domain/LicenseTypeList.aspx";
            
            #line default
            #line hidden
            if ((global::ASP.domain_licensetypelist_aspx.@__initialized == false)) {
                global::ASP.domain_licensetypelist_aspx.@__stringResource = this.ReadStringResource();
                dependencies = new string[6];
                dependencies[0] = "~/Domain/LicenseTypeList.aspx";
                dependencies[1] = "~/MasterPage.master";
                dependencies[2] = "~/MasterPage.master.cs";
                dependencies[3] = "~/Domain/LicenseTypeList.aspx.cs";
                dependencies[4] = "~/Component/SessionTimedOutRedirect.ascx";
                dependencies[5] = "~/Component/SessionTimedOutRedirect.ascx.cs";
                global::ASP.domain_licensetypelist_aspx.@__fileDependencies = this.GetWrappedFileDependencies(dependencies);
                global::ASP.domain_licensetypelist_aspx.@__initialized = true;
            }
            this.Server.ScriptTimeout = 30000000;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::AjaxControlToolkit.ToolkitScriptManager @__BuildControlScriptManager1() {
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::AjaxControlToolkit.ToolkitScriptManager();
            
            #line default
            #line hidden
            this.ScriptManager1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.EnablePartialRendering = true;
            
            #line default
            #line hidden
            
            #line 9 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "ScriptManager1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control2(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.UpdatePanel @__BuildControlupdatePanel1() {
            global::System.Web.UI.UpdatePanel @__ctrl;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.UpdatePanel();
            
            #line default
            #line hidden
            this.updatePanel1 = @__ctrl;
            @__ctrl.TemplateControl = this;
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ContentTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control2));
            
            #line default
            #line hidden
            
            #line 11 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "updatePanel1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControlErrorMsg() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            this.ErrorMsg = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "ErrorMsg";
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.CssClass = "errorMsg";
            
            #line default
            #line hidden
            
            #line 17 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Text = "";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control3(System.Web.UI.WebControls.PagerSettings @__ctrl) {
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Mode = System.Web.UI.WebControls.PagerButtons.NumericFirstLast;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control4(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control5(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control6(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control7(System.Web.UI.WebControls.TableItemStyle @__ctrl) {
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.VerticalAlign = System.Web.UI.WebControls.VerticalAlign.Top;
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control11() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "IdLabel";
            
            #line default
            #line hidden
            
            #line 33 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control10(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control11();
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control9() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control10), null);
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderText = "ID";
            
            #line default
            #line hidden
            
            #line 31 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control14() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "NameLabel";
            
            #line default
            #line hidden
            
            #line 38 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control13(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control14();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control12() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control13), null);
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderText = "Name";
            
            #line default
            #line hidden
            
            #line 36 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(200, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.Label @__BuildControl__control17() {
            global::System.Web.UI.WebControls.Label @__ctrl;
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.Label();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "LicenseClassListLabel";
            
            #line default
            #line hidden
            
            #line 43 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control16(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl1;
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control17();
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control15() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control16), null);
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderText = "License Class";
            
            #line default
            #line hidden
            
            #line 41 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(150, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TextBox @__BuildControl__control20() {
            global::System.Web.UI.WebControls.TextBox @__ctrl;
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TextBox();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "LicenseXmlLabel";
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(400, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.TextMode = System.Web.UI.WebControls.TextBoxMode.MultiLine;
            
            #line default
            #line hidden
            
            #line 48 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ReadOnly = true;
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control19(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TextBox @__ctrl1;
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control20();
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control18() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control19), null);
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderText = "License Xml";
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(400, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 46 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Height = new System.Web.UI.WebControls.Unit(50, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control23() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "LicenseTypeEdit";
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.CommandName = "Edit";
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ImageUrl = "~/Images/Edit.gif";
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 54 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.AlternateText = "Edit LicenseType";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control22(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl1;
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control23();
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.ImageButton @__BuildControl__control25() {
            global::System.Web.UI.WebControls.ImageButton @__ctrl;
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.ImageButton();
            
            #line default
            #line hidden
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "LicenseTypeAdd";
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.CommandName = "Insert";
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ImageUrl = "~/Images/PlusSign_Button.gif";
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 58 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control24(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.ImageButton @__ctrl1;
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control25();
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n                "));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.TemplateField @__BuildControl__control21() {
            global::System.Web.UI.WebControls.TemplateField @__ctrl;
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.TemplateField();
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemTemplate = new System.Web.UI.CompiledBindableTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control22), null);
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.FooterTemplate = new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControl__control24));
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderText = "Action";
            
            #line default
            #line hidden
            
            #line 52 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ItemStyle.Width = new System.Web.UI.WebControls.Unit(100, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControl__control8(System.Web.UI.WebControls.DataControlFieldCollection @__ctrl) {
            global::System.Web.UI.WebControls.TemplateField @__ctrl1;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControl__control9();
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Add(@__ctrl1);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl2;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl2 = this.@__BuildControl__control12();
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Add(@__ctrl2);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl3;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl3 = this.@__BuildControl__control15();
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Add(@__ctrl3);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl4;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl4 = this.@__BuildControl__control18();
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Add(@__ctrl4);
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.TemplateField @__ctrl5;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl5 = this.@__BuildControl__control21();
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Add(@__ctrl5);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Web.UI.WebControls.GridView @__BuildControlLicenseTypeGrid() {
            global::System.Web.UI.WebControls.GridView @__ctrl;
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::System.Web.UI.WebControls.GridView();
            
            #line default
            #line hidden
            this.LicenseTypeGrid = @__ctrl;
            @__ctrl.TemplateControl = this;
            @__ctrl.ApplyStyleSheetSkin(this);
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "LicenseTypeGrid";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.AutoGenerateColumns = false;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.AllowPaging = true;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ShowHeader = true;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ShowFooter = true;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.HeaderStyle.Height = new System.Web.UI.WebControls.Unit(25, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.PageSize = 5;
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.CssClass = "grid";
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Width = new System.Web.UI.WebControls.Unit(500, System.Web.UI.WebControls.UnitType.Pixel);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control3(@__ctrl.PagerSettings);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control4(@__ctrl.HeaderStyle);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control5(@__ctrl.RowStyle);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control6(@__ctrl.FooterStyle);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control7(@__ctrl.EmptyDataRowStyle);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.@__BuildControl__control8(@__ctrl.Columns);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.RowDataBound += new System.Web.UI.WebControls.GridViewRowEventHandler(this.LicenseTypeGrid_OnRowDataBound);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.RowEditing += new System.Web.UI.WebControls.GridViewEditEventHandler(this.LicenseTypeGrid_OnRowEditing);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.PageIndexChanging += new System.Web.UI.WebControls.GridViewPageEventHandler(this.LicenseTypeGrid_OnPageIndexChanging);
            
            #line default
            #line hidden
            
            #line 20 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.RowCommand += new System.Web.UI.WebControls.GridViewCommandEventHandler(this.LicenseTypeGrid_RowCommand);
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::ASP.component_sessiontimedoutredirect_ascx @__BuildControlSessionTimedOutRedirect1() {
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl;
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl = new global::ASP.component_sessiontimedoutredirect_ascx();
            
            #line default
            #line hidden
            this.SessionTimedOutRedirect1 = @__ctrl;
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.InitializeAsUserControl(this.Page);
            
            #line default
            #line hidden
            
            #line 64 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.ID = "SessionTimedOutRedirect1";
            
            #line default
            #line hidden
            return @__ctrl;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlContent(System.Web.UI.Control @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::AjaxControlToolkit.ToolkitScriptManager @__ctrl1;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl1 = this.@__BuildControlScriptManager1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl1);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n <script language=\"javascript\" type=\"text/javascript\" src=\"~/JavaScripts/Hourgl" +
                        "assJavascript.js\"></script>\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.UpdatePanel @__ctrl2;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl2 = this.@__BuildControlupdatePanel1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl2);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <div>\r\n        <span class=\"heading\">Add/Edit LicenseType:&nbsp;</span> \r\n " +
                        "       "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.Label @__ctrl3;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl3 = this.@__BuildControlErrorMsg();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl3);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n        <br />\r\n    </div>\r\n    "));
            
            #line default
            #line hidden
            global::System.Web.UI.WebControls.GridView @__ctrl4;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl4 = this.@__BuildControlLicenseTypeGrid();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl4);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    "));
            
            #line default
            #line hidden
            global::ASP.component_sessiontimedoutredirect_ascx @__ctrl5;
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl5 = this.@__BuildControlSessionTimedOutRedirect1();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(@__ctrl5);
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n    <br />\r\n"));
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void @__BuildControlTree(domain_licensetypelist_aspx @__ctrl) {
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.MasterPageFile = "~/MasterPage.master";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__ctrl.Title = "Xbox Domain Data Management Tools";
            
            #line default
            #line hidden
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.InitializeCulture();
            
            #line default
            #line hidden
            
            #line 8 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            this.AddContentTemplate("ContentPlaceHolder", new System.Web.UI.CompiledTemplateBuilder(new System.Web.UI.BuildTemplateMethod(this.@__BuildControlContent)));
            
            #line default
            #line hidden
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            
            #line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx"
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n"));
            
            #line default
            #line hidden
        }
        
        
        #line 912304 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\LicenseTypeList.aspx.cs"
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void FrameworkInitialize() {
            base.FrameworkInitialize();
            this.SetStringResourcePointer(global::ASP.domain_licensetypelist_aspx.@__stringResource, 0);
            this.@__BuildControlTree(this);
            this.AddWrappedFileDependencies(global::ASP.domain_licensetypelist_aspx.@__fileDependencies);
        }
        
        #line default
        #line hidden
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override int GetTypeHashCode() {
            return -819301442;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override void ProcessRequest(System.Web.HttpContext context) {
            base.ProcessRequest(context);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\ContentIngestion\CatalogTools\obj\i386\Temporary ASP.NET Files\editorial\8f4d21dd\c2b988d\App_Web_alu8066w.5.cs ===
﻿#pragma checksum "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx.cs" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "0C0AF967A3C97F5D3D9818B6674F241F"

#line 1 "j:\xonline_main\private\server\contentingestion\catalogtools\website\Domain\PricingRule.aspx.cs"
using System;
using System.Configuration;
using System.Collections.Generic;
using System.Data;
using System.Net;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Microsoft.Ems.Apps.Web.CatalogWebServiceProxy;

namespace Microsoft.Ems.Apps.Web.Editorial
{
    public partial class PricingRuleEdit : System.Web.UI.Page
    {
        string _priceId;
        string _priceFrom;
        string _priceTo;
        string _pointsRetail;
        string _priceRetail;

        const int maxPrecisionDigits = 18;
        const int maxScaleDigits = 4;


        protected void Page_Load(object sender, EventArgs e)
        {
            if (!this.IsPostBack)
            {
                //Retrieve current PricingRule objec to edit/add
                int ruleId = -1;
                if (this.ClientQueryString.Length > 0)
                {
                    if (Int32.TryParse(this.ClientQueryString, out ruleId) == false)
                        ruleId = -1;
                }
                this.ErrorMsg.Text = "";

                //Store list of PricingRuleInstance in memory as list for easy manipulation
                PricingRule price;
                List<PricingRuleInstance> priceMap = new List<PricingRuleInstance>();
                if (ruleId == -1)
                {
                    this.TitleMsg.Text = "Add New Pricing Rule";
                    price = new PricingRule();
                    price.PrimaryId = -1;
                    price.RetailCurrencyCode = "USD";
                    price.WholesaleCurrencyCode = "USD";
                }
                else
                {
                    this.TitleMsg.Text = "Edit Pricing Rule";
                    price = Constants.Proxy.GetPricingRule(ruleId);
                    foreach (PricingRuleInstance pi in price.PricingRuleInstances)
                        priceMap.Add(pi);
                }
                Session["Price"] = price;
                Session["PriceMap"] = priceMap;

                this.RetailCurrencyList.DataSource = Constants.Proxy.GetCurrency();
                this.RetailCurrencyList.DataBind();
                this.RetailCurrencyList.SelectedValue = "USD";

                this.WholesaleCurrencyList.DataSource = Constants.Proxy.GetCurrency();
                this.WholesaleCurrencyList.DataBind();
                this.WholesaleCurrencyList.SelectedValue = "USD";

                //Display PriceRule for edit
                DisplayPrice();
            }
        }

        private void BindPriceMap()
        {
            PriceGrid.DataSource = Session["PriceMap"] as List<PricingRuleInstance>;
            PriceGrid.DataBind();
        }

        protected void PriceGrid_OnRowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                PricingRuleInstance priceMap = e.Row.DataItem as PricingRuleInstance;

                if ((e.Row.RowState & DataControlRowState.Edit) == DataControlRowState.Edit)
                {
                    ((Label)e.Row.FindControl("PriceIdEdit")).Text = priceMap.Id.ToString();
                    ((TextBox)e.Row.FindControl("PriceFromEdit")).Text = priceMap.PriceWholesaleFrom.ToString();
                    ((TextBox)e.Row.FindControl("PriceToEdit")).Text = priceMap.PriceWholesaleTo.ToString();
                    ((TextBox)e.Row.FindControl("PointsRetailEdit")).Text = priceMap.PointsRetail.ToString();
                    ((TextBox)e.Row.FindControl("PriceRetailEdit")).Text = priceMap.PriceRetail.ToString();
                }
                else
                {
                    ((Label)e.Row.FindControl("PriceIdLabel")).Text = priceMap.Id.ToString();
                    ((Label)e.Row.FindControl("PriceFromLabel")).Text = priceMap.PriceWholesaleFrom.ToString();
                    ((Label)e.Row.FindControl("PriceToLabel")).Text = priceMap.PriceWholesaleTo.ToString();
                    ((Label)e.Row.FindControl("PointsRetailLabel")).Text = priceMap.PointsRetail.ToString();
                    ((Label)e.Row.FindControl("PriceRetailLabel")).Text = priceMap.PriceRetail.ToString();
                }
            }
        }

        protected void PriceGrid_OnPageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            PriceGrid.PageIndex = e.NewPageIndex;
            BindPriceMap();
        }

        protected void PriceGrid_OnRowEditing(object sender, GridViewEditEventArgs e)
        {
            PriceGrid.EditIndex = e.NewEditIndex;
            BindPriceMap();
        }

        protected void PriceGrid_OnRowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            PriceGrid.EditIndex = -1;
            BindPriceMap();
        }

        private bool ValidateNotNullOrNegative(string str, string field)
        {
            Decimal d;
            if (Decimal.TryParse(str, out d) == false)
            {
                this.ErrorMsg.Text = field + " must be numeric and non-negative.";
                return false;
            }
            if (d < 0)
            {
                this.ErrorMsg.Text = field +  " must be numeric and non-negative.";
                return false;
            }
            return true;
        }

        protected void PriceGrid_OnRowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            if (ValidateNotNullOrNegative(((Label)PriceGrid.Rows[e.RowIndex].FindControl("PriceIdEdit")).Text.Trim(), "Price ID"))
            {
                _priceId = ((Label)PriceGrid.Rows[e.RowIndex].FindControl("PriceIdEdit")).Text.Trim();
            }
            else
            {
                return;
            }
            
            if(ValidateNotNullOrNegative(((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceFromEdit")).Text.Trim(), "Price From"))
            {
                _priceFrom = ((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceFromEdit")).Text.Trim();
            }
            else
            {
                return;
            }
            
            if(ValidateNotNullOrNegative(((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceToEdit")).Text.Trim(), "Price To"))            
            {
                _priceTo = ((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PriceToEdit")).Text.Trim();
            }
            else
            {
                return;
            }
            
            if(ValidateNotNullOrNegative(((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PointsRetailEdit")).Text.Trim(), "Points Retail"))
            {
                _pointsRetail = ((TextBox)PriceGrid.Rows[e.RowIndex].FindControl("PointsRetailEdit")).Text.Trim();
            }
            else
            {
                return;
            }

            PricingRuleInstance priceMap = (Session["PriceMap"] as List<PricingRuleInstance>)[PriceGrid.PageIndex * PriceGrid.PageSize + e.RowIndex];
            if (SavePricingRuleInstance(DataChangeType.Update, priceMap))
            {
                PriceGrid.EditIndex = -1;
                BindPriceMap();
            }
        }

        protected void PriceGrid_OnRowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            List<PricingRuleInstance> priceMapList = Session["PriceMap"]as List<PricingRuleInstance>;
            PricingRuleInstance priceMap = priceMapList[PriceGrid.PageIndex * PriceGrid.PageSize + e.RowIndex];
            priceMapList.Remove(priceMap);

            Session["PriceMap"] = priceMapList;
            BindPriceMap();
        }

        protected void PriceGrid_OnRowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName != "Insert" && e.CommandName != "InsertEmpty")
                return;
            
            if (e.CommandName == "Insert")
            {
                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceIdFooter")).Text.Trim(),"Price ID"))
                {
                    _priceId     = ((TextBox)PriceGrid.FooterRow.FindControl("PriceIdFooter")).Text.Trim();
                }
                else
                {
                    return;
                }

                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceFromFooter")).Text.Trim(),"Price From"))
                {
                    _priceFrom   = ((TextBox)PriceGrid.FooterRow.FindControl("PriceFromFooter")).Text.Trim();
                }
                else
                {
                    return;
                }
                
                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceToFooter")).Text.Trim(), "Price To"))
                {
                    _priceTo     = ((TextBox)PriceGrid.FooterRow.FindControl("PriceToFooter")).Text.Trim();
                }
                else
                {
                    return;
                }
                
                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PointsRetailFooter")).Text.Trim(),"Points Retail"))
                {
                    _pointsRetail= ((TextBox)PriceGrid.FooterRow.FindControl("PointsRetailFooter")).Text.Trim();
                }
                else
                {
                    return;
                }

                if(ValidateNotNullOrNegative(((TextBox)PriceGrid.FooterRow.FindControl("PriceRetailFooter")).Text.Trim(), "Price Retail"))
                {
                    _priceRetail = ((TextBox)PriceGrid.FooterRow.FindControl("PriceRetailFooter")).Text.Trim();
                }                                             
            }
            else if (e.CommandName == "InsertEmpty")
            {
                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceIdEmpty")).Text.Trim(), "Price ID"))
                {
                    _priceId = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceIdEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceFromEmpty")).Text.Trim(), "Price From"))
                {
                    _priceFrom = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceFromEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceToEmpty")).Text.Trim(), "Price To"))
                {
                    _priceTo = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceToEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PointsRetailEmpty")).Text.Trim(), "Points Retail"))
                {
                    _pointsRetail = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PointsRetailEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }

                if (ValidateNotNullOrNegative(((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceRetailEmpty")).Text.Trim(), "Price Retail"))
                {
                    _priceRetail = ((TextBox)PriceGrid.Controls[0].Controls[0].FindControl("PriceRetailEmpty")).Text.Trim();
                }
                else
                {
                    return;
                }
            }

            if (SavePricingRuleInstance(DataChangeType.Add, null))
            {
                BindPriceMap();
            }
        }

        protected void PriceSave_OnClick(object sender, EventArgs e)
        {
            if (SavePricingRule())
            {
                Response.Redirect("PricingRuleList.aspx");
            }
        }

        protected void PriceCancel_OnClick(object sender, EventArgs e)
        {
            Response.Redirect("PricingRuleList.aspx");
        }

        private void DisplayPrice()
        {
            PricingRule price = Session["Price"] as PricingRule;

            //Display the data list
            this.ProviderList.DataSource = Constants.Proxy.GetProvider();
            this.ProviderList.DataBind();

            if (price.PrimaryId != -1)
            {
                this.RuleID.Text = price.PrimaryId.ToString();
                this.RuleID.ReadOnly = true;
                this.RuleName.Focus();
            }
            else
            {
                this.RuleID.Focus();
            }

            this.RuleName.Text = pri