esi+2]
	movsx	ebx, WORD PTR [esi]
	and	ebp, 4095		// dwFrac = dwFraction & 0x0fff
	sub	ecx, ebx		// x   = NewSample - OldSample
	imul	ecx, ebp		// x  *= Frac
	sar	ecx, 12			// x >>= 12
	add	edi, 8			// plBuild += 2
	add	ecx, ebx		// NewSample += x

	movd		mm1, ecx
	punpcklwd	mm1, mm1
	
	pmulhw		mm1, mm6			// Only need high parts.
	punpcklwd	mm1, mm1
	psrad		mm1, 15

	paddd		mm1, QWORD PTR [edi-8]
	movq		QWORD PTR [edi-8], mm1

//	mov	ebx, DWORD PTR [edi-8]
	mov	ebp, DWORD PTR [esp+8]	// dwStep
//	add	ebx, ecx
	add	eax, ebp		// dwFraction += dwStep
//	mov	DWORD PTR [edi-8], ebx	// *plBuild += x

//	mov	ebx, DWORD PTR [edi-4]
//	add	ebx, ecx
	mov	ecx, eax
//	mov	DWORD PTR [edi-4], ebx	// (*plBuild+1) += x

	shr	ecx, 12
	mov	ebp, eax
	lea	esi, [edx+ecx*2]	// pSource + (dwFraction >> 12) * 4
	cmp	edi, DWORD PTR [esp+0]	// plBuild < plBuildEnd
	jb	Lab0
Exit0:
	emms
	add	esp, 12
	pop	ebp
	mov	dwFraction, eax
	mov	plBuild, edi
	}
#else
    LONG SampleNext;
    while ((plBuild < plBuildEnd) && (XpSource < pSourceEnd))
    {
      LONG Sample;
      Sample = ((LONG)*((SHORT*)(XpSource)));
      SampleNext = ((LONG)*(((SHORT*)(XpSource))+1));
      LONG dwFrac = dwFraction & FRACT_MASK;
      Sample += ((SampleNext - Sample) * dwFrac) >> FRACT_SHIFT;
      dwFraction += dwStep;
      *XplBuild += DIVIDEBY2POW16(Sample * (int)pMixSource->m_dwLVolume);
      *(XplBuild + 1) += DIVIDEBY2POW16(Sample * (int)pMixSource->m_dwRVolume);
      plBuild += 2;
    }
#endif

    pSource          = XpSource;
    dwFraction &= FRACT_MASK;		// Eliminate accumulated offsets.
    nInputByteCount -=  pSource - pSourceStart;

    if (pSource >= pSourceWrap) {	// Goes to -1 position if necessary.
       pSource -= pMixSource->m_cbBuffer;
    }

    pSourceStart = pSource;
    pSourceEnd   = pSource + nInputByteCount;
  }

  *((LONG **)ppSource) = (LONG *)pSource;
    pMixSource->m_cSamplesInCache += ((plBuild - plBuildStart) / 2);
  *pplBuild = plBuild;
    pMixSource->m_dwFraction = dwFraction;
  
  return ((int)nInputByteCount <= 0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\merge39.inc ===
/***************************************************************************
 * Copyright (C) 1997-1998 Microsoft Corporation.  All Rights Reserved.
 ***************************************************************************/

/* Merge39 */
/* H_16_BITS */
/* H_STEREO */
/* H_BUILD_STEREO */
/* H_SIGNED */
/* H_ORDER_LR  */
/* H_NOLOOP  */
/* H_NO_RESAMPLE  */
/* H_NO_SCALE  */
/* H_NO_FILTER  */
#define MERGE39ASM
BOOL Merge39Asm (CMixSource *pMixSource, DWORD nInputByteCount, void *pSourceWrap, PLONG *pplBuild, PLONG plBuildEnd, void **ppSource) {
  PLONG plBuild = *pplBuild;
  BYTE *pSource = *((BYTE **)ppSource);
  BYTE *pSourceStart = pSource;
  BYTE *pSourceEnd = pSource + nInputByteCount;
  PLONG plBuildStart = plBuild;

  #undef STEP_SIZE
  #define STEP_SIZE (sizeof(WORD) + sizeof(WORD))

  #ifdef USE_ITERS
  #undef USE_ITERS
  #endif
  #ifdef XpSource
  #undef XpSource
  #endif
  #ifdef XplBuild
  #undef XplBuild
  #endif
  #define XpSource (pSource + (iters * STEP_SIZE))
  #define XplBuild (plBuild + (iters * 2))

  if (nInputByteCount == LONG_MAX) {	// Handle any wrap issues.
     pSourceEnd = NULL;
     pSourceEnd--;
     nInputByteCount = pSourceEnd - pSource;
     if (nInputByteCount > LONG_MAX) {
        nInputByteCount = LONG_MAX;
        pSourceEnd = pSource + nInputByteCount;
     }
  }
  
  while ((plBuild < plBuildEnd) && (pSource < pSourceEnd))
    {
    if (pSourceEnd > pSourceWrap)
       pSourceEnd = (BYTE *)pSourceWrap;

    
    LONG iters, i;
    i     = plBuildEnd - plBuild;
    iters = pSourceEnd - pSource;
    iters /= STEP_SIZE;
    i /= 2;;
    if (i < iters) iters = i;
    i = iters;
#if 1
     if (iters) {
      if (pMixSource->m_fUse_MMX)
      _asm {
        mov	ebx, iters
        mov	esi, pSource
	lea	ebx, [ebx*4-4]				// 2 at a time.
	cmp	ebx, 12
        mov	edi, plBuild
	jl	OneSample

	sub	ebx, 4
	lea	ecx, [esi+ebx]
	test	ecx, 7
	je	DoMMX

	add	ebx, 4

OneSample:	
	movsx	ecx, WORD PTR [esi+ebx]
	movsx	edx, WORD PTR [esi+ebx+2]
	add	DWORD PTR [edi+ebx*2], ecx
	add	DWORD PTR [edi+ebx*2+4], edx
	test	ebx, ebx
	je	Done

	sub	ebx, 4
	je	OneSample				// Actually 2 samples

	sub	ebx, 4
DoMMX:
#ifdef GTW_REORDER
	cmp	ebx, 16
	jl	DoMMX00


	movq		mm1, QWORD PTR [esi+ebx]	// Load source
	punpckhwd	mm2, mm1			// First stereo sample
	sub	ebx, 16
	punpcklwd	mm1, mm1			// Second stereo sample
	psrad		mm1, 16
	psrad		mm2, 16

	movq		mm3, QWORD PTR [esi+ebx-8+16]	// Load source
	jmp	DoMMX000
DoMMX0:
	movq		mm3, QWORD PTR [esi+ebx-8+16]	// Load source
	psrad		mm2, 16
DoMMX000:
	paddd		mm1, QWORD PTR [edi+ebx*2+32]
	punpckhwd	mm4, mm3			// First stereo sample

	paddd		mm2, QWORD PTR [edi+ebx*2+8+32]
	punpcklwd	mm3, mm3			// Second stereo sample

	movq		QWORD PTR [edi+ebx*2+32], mm1
	psrad		mm3, 16

	movq		QWORD PTR [edi+ebx*2+8+32], mm2
	psrad		mm4, 16

	movq		mm1, QWORD PTR [esi+ebx-16+16]	// Load source

	paddd		mm3, QWORD PTR [edi+ebx*2-16+32]
	punpckhwd	mm2, mm1			// First stereo sample

	paddd		mm4, QWORD PTR [edi+ebx*2+8-16+32]
	punpcklwd	mm1, mm1			// Second stereo sample

	movq		QWORD PTR [edi+ebx*2-16+32], mm3
	psrad		mm1, 16

	movq		QWORD PTR [edi+ebx*2+8-16+32], mm4
	sub	ebx, 16

	jge	DoMMX0

	psrad		mm2, 16
	paddd		mm1, QWORD PTR [edi+ebx*2+32]
	paddd		mm2, QWORD PTR [edi+ebx*2+8+32]
	movq		QWORD PTR [edi+ebx*2+32], mm1
	movq		QWORD PTR [edi+ebx*2+8+32], mm2

	add		ebx, 8
	jge		DoMMX00

	add		ebx, 4
	je		OneSample
	jmp		Done
	
#endif
DoMMX00:
	movq		mm1, QWORD PTR [esi+ebx]	// Load source
	punpckhwd	mm2, mm1			// First stereo sample
	punpcklwd	mm1, mm1			// Second stereo sample
	psrad		mm1, 16
	psrad		mm2, 16
	paddd		mm1, QWORD PTR [edi+ebx*2]
	paddd		mm2, QWORD PTR [edi+ebx*2+8]
	movq		QWORD PTR [edi+ebx*2], mm1
	movq		QWORD PTR [edi+ebx*2+8], mm2
	
	sub		ebx, 8
	jge		DoMMX00

	add	ebx, 4
	je	OneSample
	
Done:
	emms
	}
      else
        _asm {
        mov	ebx, iters
        mov	esi, pSource
	lea	ebx, [ebx*4-4]
        mov	edi, plBuild
        push	ebp
	mov	ebp, DWORD PTR [esi+ebx]
Lab:
	mov	eax, ebp

	sal	ebp, 16
	mov	ecx, DWORD PTR[edi+ebx*2]

	sar	eax, 16
	mov	edx, DWORD PTR[edi+ebx*2+4]

	sar	ebp, 16
	add	edx, eax

	add	ecx, ebp
	sub	ebx, 4

	mov	DWORD PTR [edi+ebx*2+8], ecx
	mov	ebp, DWORD PTR [esi+ebx]

	mov	DWORD PTR [edi+ebx*2+12], edx
	jge	SHORT Lab

        pop	ebp
      }
    }
#elif 0
    if (iters) {
      _asm {
        mov	ebx, iters
        mov	esi, pSource
	lea	ebx, [ebx*4-4]
        mov	edi, plBuild
        push	ebp
	mov	ebp, DWORD PTR [esi+ebx]
Lab:
	mov	eax, ebp

	sal	ebp, 16
	mov	ecx, DWORD PTR[edi+ebx*2]

	sar	eax, 16
	mov	edx, DWORD PTR[edi+ebx*2+4]

	sar	ebp, 16
	add	edx, eax

	add	ecx, ebp
	sub	ebx, 4

	mov	DWORD PTR [edi+ebx*2+8], ecx
	mov	ebp, DWORD PTR [esi+ebx]

	mov	DWORD PTR [edi+ebx*2+12], edx
	jge	SHORT Lab
        pop	ebp
      }
    }
#else
    while(--iters >= 0)
    {
    	LONG SampleR;
	LONG SampleL;
	SampleL = *((SHORT*)(XpSource));
      	SampleR = *(((SHORT*)(XpSource))+1);
        *XplBuild += SampleL;
        *(XplBuild + 1) += SampleR;
    }
#endif
    iters = i;
    i *= 2;;
    plBuild  += i;
    pSource          = XpSource;
    nInputByteCount -=  pSource - pSourceStart;

    if (pSource >= pSourceWrap) {	// Goes to -1 position if necessary.
       pSource -= pMixSource->m_cbBuffer;
    }

    pSourceStart = pSource;
    pSourceEnd   = pSource + nInputByteCount;
  }


  *((LONG **)ppSource) = (LONG *)pSource;
  pMixSource->m_cSamplesInCache += ((plBuild - plBuildStart) / 2);
  *pplBuild = plBuild;
  
  return ((int)nInputByteCount <= 0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\merge34.inc ===
/***************************************************************************
 * Copyright (C) 1997-1998 Microsoft Corporation.  All Rights Reserved.
 ***************************************************************************/

/* Merge34 */
/* H_8_BITS  */
/* H_STEREO */
/* H_BUILD_STEREO */
/* H_UNSIGNED  */
/* H_ORDER_LR  */
/* H_NOLOOP  */
/* H_NO_RESAMPLE  */
/* H_NO_SCALE  */
/* H_NO_FILTER  */
#define MERGE34ASM
BOOL Merge34Asm (CMixSource *pMixSource, DWORD nInputByteCount, void *pSourceWrap, PLONG *pplBuild, PLONG plBuildEnd, void **ppSource) {
  PLONG plBuild = *pplBuild;
  BYTE *pSource = *((BYTE **)ppSource);
  BYTE *pSourceStart = pSource;
  BYTE *pSourceEnd = pSource + nInputByteCount;
  PLONG plBuildStart = plBuild;
  
  #undef STEP_SIZE
  #define STEP_SIZE (sizeof(BYTE) + sizeof(BYTE))

  #ifdef USE_ITERS
  #undef USE_ITERS
  #endif
  #ifdef XpSource
  #undef XpSource
  #endif
  #ifdef XplBuild
  #undef XplBuild
  #endif
  
  #define XpSource (pSource + (iters * STEP_SIZE))
  #define XplBuild (plBuild + (iters * 2))

  if (nInputByteCount == LONG_MAX) {	// Handle any wrap issues.
     pSourceEnd = NULL;
     pSourceEnd--;
     nInputByteCount = pSourceEnd - pSource;
     if (nInputByteCount > LONG_MAX) {
        nInputByteCount = LONG_MAX;
        pSourceEnd = pSource + nInputByteCount;
     }
  }
  
  while ((plBuild < plBuildEnd) && (pSource < pSourceEnd))
    {
    if (pSourceEnd > pSourceWrap)
       pSourceEnd = (BYTE *)pSourceWrap;

    LONG iters, i;
    i     = plBuildEnd - plBuild;
    iters = pSourceEnd - pSource;
    iters /= STEP_SIZE;
    i /= 2;;
    if (i < iters) iters = i;
    i = iters;
#if 1
    if (iters) {
      _asm {
	mov	ecx, pMixSource
        mov	ebx, iters
        mov	esi, pSource
	lea	ebx, [ebx*2-2]
	cmp	ebx, 14
        mov	edi, plBuild
	push	ebp
	jl	LastSamples

	mov	ecx, [ecx]pMixSource.m_fUse_MMX
	test	ecx, ecx
	je	LastSamples

	sub	ebx, 6
	lea	ecx, [esi+ebx]
	pxor	mm0, mm0
	mov	edx, 128
	movd		mm5, edx	// 0, 0, 0, 128
	punpcklwd	mm5, mm5	// 0, 0, 128, 128
	punpckldq	mm5, mm5	// 128, 128, 128, 128

	test	ecx, 7
	je	DoMMX

	add	ebx, 6

FirstSamples:	
	xor	eax, eax
	xor	ecx, ecx

	mov	al, BYTE PTR [esi+ebx]
	mov	cl, BYTE PTR [esi+ebx+1]

	mov	edx, DWORD PTR [edi+ebx*4]
	mov	ebp, DWORD PTR [edi+ebx*4+4]

	sub	eax, 128
	sub	ecx, 128

	shl	eax, 8
	shl	ecx, 8

	add	edx, eax
	add	ebp, ecx

	mov	DWORD PTR [edi+ebx*4], edx
	mov	DWORD PTR [edi+ebx*4+4], ebp

	sub	ebx, 2
	lea	ecx, [esi+ebx]
	and	ecx, 7
	cmp	ecx, 6
	jne	FirstSamples

	sub	ebx, 6

DoMMX:
#ifdef GTW_REORDER
	movq		mm1, QWORD PTR [esi+ebx]	// Load 4 samples.
	movq		mm3, mm1
	punpcklbw	mm1, mm0			// Make unsigned 16 bit.
	punpckhbw	mm3, mm0
	psubw		mm1, mm5
	psubw		mm3, mm5
	psllw		mm1, 8				// * 256
	psllw		mm3, 8
	jmp	DoMMX00
DoMMX0:
	paddd		mm3, QWORD PTR [edi+ebx*4+16+32]
	psrad		mm2, 16

	movq		mm1, QWORD PTR [esi+ebx]	// Load 4 samples.
	psrad		mm4, 16

	movq		QWORD PTR [edi+ebx*4+16+32], mm3
	movq		mm3, mm1

	paddd		mm4, QWORD PTR [edi+ebx*4+24+32]
	punpcklbw	mm1, mm0			// Make unsigned 16 bit.

	paddd		mm2, QWORD PTR [edi+ebx*4+8+32]
	punpckhbw	mm3, mm0

	psubw		mm1, mm5
	psubw		mm3, mm5

	movq		QWORD PTR [edi+ebx*4+8+32],  mm2
	psllw		mm1, 8				// * 256

	movq		QWORD PTR [edi+ebx*4+24+32], mm4
	psllw		mm3, 8

DoMMX00:
	punpckhwd	mm2, mm1
	sub		ebx, 8

	punpcklwd	mm1, mm1
	movq		mm4, mm3

	psrad		mm1, 16

	paddd		mm1, QWORD PTR [edi+ebx*4+32]
	punpckhwd	mm4, mm3

	punpcklwd	mm3, mm3

	movq		QWORD PTR [edi+ebx*4+32],    mm1
	psrad		mm3, 16

	jge		DoMMX0

	psrad		mm2, 16

	paddd		mm2, QWORD PTR [edi+ebx*4+8+32]
	paddd		mm3, QWORD PTR [edi+ebx*4+16+32]
	psrad		mm4, 16

	movq		QWORD PTR [edi+ebx*4+8+32],  mm2
	paddd		mm4, QWORD PTR [edi+ebx*4+24+32]
	movq		QWORD PTR [edi+ebx*4+16+32], mm3
	movq		QWORD PTR [edi+ebx*4+24+32], mm4
#else
	movq		mm1, QWORD PTR [esi+ebx]	// Load 4 samples.
	movq		mm3, mm1
	punpcklbw	mm1, mm0			// Make unsigned 16 bit.
	punpckhbw	mm3, mm0
	psubw		mm1, mm5
	psubw		mm3, mm5
	psllw		mm1, 8				// * 256
	psllw		mm3, 8
	punpckhwd	mm2, mm1

	movq		mm4, mm3
	punpcklwd	mm1, mm1

	punpckhwd	mm4, mm3
	punpcklwd	mm3, mm3

	psrad		mm1, 16
	psrad		mm2, 16

	paddd		mm1, QWORD PTR [edi+ebx*4]
	psrad		mm3, 16

	paddd		mm2, QWORD PTR [edi+ebx*4+8]
	psrad		mm4, 16

	paddd		mm3, QWORD PTR [edi+ebx*4+16]
	paddd		mm4, QWORD PTR [edi+ebx*4+24]
	movq		QWORD PTR [edi+ebx*4],    mm1
	movq		QWORD PTR [edi+ebx*4+8],  mm2
	movq		QWORD PTR [edi+ebx*4+16], mm3
	movq		QWORD PTR [edi+ebx*4+24], mm4
	
	sub		ebx, 8
	jge		DoMMX
#endif

	emms
	add	ebx, 8
	je	Done

	sub	ebx, 2
	
LastSamples:	
	xor	eax, eax
	xor	ecx, ecx

	mov	al, BYTE PTR [esi+ebx]
	mov	cl, BYTE PTR [esi+ebx+1]

	mov	edx, DWORD PTR [edi+ebx*4]
	mov	ebp, DWORD PTR [edi+ebx*4+4]

	sub	eax, 128
	sub	ecx, 128

	shl	eax, 8
	shl	ecx, 8

	add	edx, eax
	add	ebp, ecx

	mov	DWORD PTR [edi+ebx*4], edx
	mov	DWORD PTR [edi+ebx*4+4], ebp

	sub	ebx, 2
	jge	LastSamples
Done:
	pop	ebp
	}
    }
#elif 0
    if (iters)
	_asm {
	mov	esi, pSource
	mov	edi, plBuild
	mov	ebx, iters
	push	ebp

	lea	ebx, [ebx*2-2]
Lab:
	xor	eax, eax
	xor	ecx, ecx

	mov	al, BYTE PTR [esi+ebx]
	mov	cl, BYTE PTR [esi+ebx+1]

	mov	edx, DWORD PTR [edi+ebx*4]
	mov	ebp, DWORD PTR [edi+ebx*4+4]

	sub	eax, 128
	sub	ecx, 128

	shl	eax, 8
	shl	ecx, 8

	add	edx, eax
	add	ebp, ecx

	mov	DWORD PTR [edi+ebx*4], edx
	mov	DWORD PTR [edi+ebx*4+4], ebp

	sub	ebx, 2
	jge	Lab

	pop	ebp
	}
#else
    while(--iters >= 0)
    {
       LONG SampleL;
       LONG SampleR;
       SampleL = ((LONG)(*((BYTE*)(XpSource)))) * 256 - 32768L;
       SampleR = ((LONG)(*(((BYTE*)(XpSource))+1))) * 256 - 32768L;
       *XplBuild += SampleL;
       *(XplBuild + 1) += SampleR;
    }
#endif

    iters = i;
    i *= 2;;
    plBuild  += i;
    pSource          = XpSource;
    nInputByteCount -=  pSource - pSourceStart;

    if (pSource >= pSourceWrap) {	// Goes to -1 position if necessary.
       pSource -= pMixSource->m_cbBuffer;
    }

    pSourceStart = pSource;
    pSourceEnd   = pSource + nInputByteCount;
  }

  *((LONG **)ppSource) = (LONG *)pSource;
    pMixSource->m_cSamplesInCache += ((plBuild - plBuildStart) / 2);
  *pplBuild = plBuild;
  
  return ((int)nInputByteCount <= 0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\merge96.inc ===
/*
 * Merge96.inc
 *
 * Copyright (C) 1997-1998 Microsoft Corporation.  All Rights Reserved.
 */

/* H_8_BITS  */
/* H_MONO  */
/* H_BUILD_STEREO */
/* H_UNSIGNED  */
/* H_ORDER_LR  */
/* H_NOLOOP  */
/* H_RESAMPLE */
/* H_NO_SCALE  */
/* H_NO_FILTER  */
#define MERGE96ASM
BOOL Merge96Asm (CMixSource *pMixSource, DWORD nInputByteCount, void *pSourceWrap, PLONG *pplBuild, PLONG plBuildEnd, void **ppSource) {
  PLONG plBuild = *pplBuild;
  BYTE *pSource = *((BYTE **)ppSource);
  BYTE *pSourceStart = pSource;
  BYTE *pSourceEnd = pSource + nInputByteCount;
  PLONG plBuildStart = plBuild;
  DWORD dwFraction = pMixSource->m_dwFraction;
  DWORD dwStep     = pMixSource->m_step_fract;
  #undef STEP_SIZE
  #define STEP_SIZE (sizeof(BYTE))
  #ifdef USE_ITERS
  #undef USE_ITERS
  #endif
  #ifdef XpSource
  #undef XpSource
  #endif
  #ifdef XplBuild
  #undef XplBuild
  #endif
  #define XplBuild plBuild
  #define XpSource  (pSource + ((dwFraction >> FRACT_SHIFT) * STEP_SIZE))

  if (nInputByteCount == LONG_MAX) {	// Handle any wrap issues.
     pSourceEnd = NULL;
     pSourceEnd--;
     nInputByteCount = pSourceEnd - pSource;
     if (nInputByteCount > LONG_MAX) {
        nInputByteCount = LONG_MAX;
        pSourceEnd = pSource + nInputByteCount;
     }
  }
  
  *((BYTE **)&pSourceWrap) -= STEP_SIZE;
  
  while ((plBuild < plBuildEnd) && (pSource < pSourceEnd))
    {
    if (pSourceEnd > pSourceWrap)
       pSourceEnd = (BYTE *)pSourceWrap;

    
#if 1
	if (1 || !pMixSource->m_fUse_MMX)	// Non-MMX is faster.
	_asm {
	mov	esi, pSource
	mov	edx, esi
	mov	eax, dwFraction
	mov	edi, plBuild		// plBuild
	mov	ecx, eax
	shr	ecx, 12
	add	esi, ecx		// pSource
	push	ebp
	push	DWORD PTR dwStep
	push	DWORD PTR pSourceEnd
	push	DWORD PTR plBuildEnd

	cmp	edi, DWORD PTR [esp+0]	// plBuild >= plBuildEnd
	jae	Exit

	mov	ebp, eax
	xor	ecx, ecx
Lab:
	cmp	esi, DWORD PTR [esp+4]	// pSource >= pSourceEnd
	jae	Exit

	mov	cl, BYTE PTR [esi+1]
	xor	ebx, ebx
	sub	ecx, 128
	mov	bl, BYTE PTR [esi]
	shl	ecx, 8
	sub	ebx, 128
	shl	ebx, 8
	and	ebp, 4095		// dwFrac = dwFraction & 0x0fff
	sub	ecx, ebx		// x   = NewSample - OldSample
	imul	ecx, ebp		// x  *= Frac
	mov	ebp, DWORD PTR [edi]
	sar	ecx, 12			// x >>= 12
	add	ecx, ebx		// NewSample += x
	mov	ebx, DWORD PTR [edi+4]
	add	ebp, ecx
	add	ebx, ecx
	mov	DWORD PTR [edi], ebp
	add	edi, 8			// plBuild += 2
	mov	ebp, DWORD PTR [esp+8]	// dwStep
	mov	DWORD PTR [edi-4], ebx	// (*plBuild+1) += x
	add	eax, ebp		// dwFraction += dwStep
	mov	ecx, eax
	shr	ecx, 12
	mov	ebp, eax
	lea	esi, [edx+ecx*1]	// pSource + (dwFraction >> 12) * 4
	xor	ecx, ecx

	cmp	edi, DWORD PTR [esp+0]	// plBuild < plBuildEnd
	jb	Lab
Exit:
	add	esp, 12
	pop	ebp
	mov	dwFraction, eax
	mov	plBuild, edi
	}
	else
	_asm {
	mov	esi, pSource
	mov	edx, esi
	mov	eax, dwFraction
	mov	edi, plBuild		// plBuild
	mov	ecx, eax
	shr	ecx, 12
	add	esi, ecx		// pSource
	push	ebp
	push	DWORD PTR dwStep
	push	DWORD PTR pSourceEnd
	push	DWORD PTR plBuildEnd

	cmp	edi, DWORD PTR [esp+0]	// plBuild >= plBuildEnd
	jae	Exit0

	mov	ebp, eax
	xor	ecx, ecx
Lab0:
	cmp	esi, DWORD PTR [esp+4]	// pSource >= pSourceEnd
	jae	Exit0

	mov	cl, BYTE PTR [esi+1]
	xor	ebx, ebx
	sub	ecx, 128
	mov	bl, BYTE PTR [esi]
	shl	ecx, 8
	sub	ebx, 128
	shl	ebx, 8
	and	ebp, 4095		// dwFrac = dwFraction & 0x0fff
	sub	ecx, ebx		// x   = NewSample - OldSample
	imul	ecx, ebp		// x  *= Frac
//	mov	ebp, DWORD PTR [edi]
	sar	ecx, 12			// x >>= 12
	add	ecx, ebx		// NewSample += x

	movd		mm1, ecx
	punpckldq	mm1, mm1
	paddd		mm1, QWORD PTR [edi]
	movq		QWORD PTR [edi], mm1
	
//	mov	ebx, DWORD PTR [edi+4]
//	add	ebp, ecx
//	add	ebx, ecx
//	mov	DWORD PTR [edi], ebp
	add	edi, 8			// plBuild += 2
	mov	ebp, DWORD PTR [esp+8]	// dwStep
//	mov	DWORD PTR [edi-4], ebx	// (*plBuild+1) += x
	add	eax, ebp		// dwFraction += dwStep
	mov	ecx, eax
	shr	ecx, 12
	mov	ebp, eax
	lea	esi, [edx+ecx*1]	// pSource + (dwFraction >> 12) * 4
	xor	ecx, ecx

	cmp	edi, DWORD PTR [esp+0]	// plBuild < plBuildEnd
	jb	Lab0
Exit0:
	emms
	add	esp, 12
	pop	ebp
	mov	dwFraction, eax
	mov	plBuild, edi
	}
#else
    LONG SampleNext, SampleSave;
    while ((plBuild < plBuildEnd) && (XpSource < pSourceEnd))
    {
      LONG Sample;
      Sample = ((LONG)(*((BYTE*)(XpSource)))) * 256 - 32768L;
      SampleNext = ((LONG)(*(((BYTE*)(XpSource))+1))) * 256 - 32768L;
      LONG dwFrac = dwFraction & FRACT_MASK;
      SampleSave = Sample;
      Sample += ((SampleNext - Sample) * dwFrac) >> FRACT_SHIFT;
      dwFraction += dwStep;
      *XplBuild += Sample;
      *(XplBuild + 1) += Sample;
      plBuild += 2;
    }
#endif

    pSource          = XpSource;
    dwFraction &= FRACT_MASK;		// Eliminate accumulated offsets.
    nInputByteCount -=  pSource - pSourceStart;

    if (pSource >= pSourceWrap) {	// Goes to -1 position if necessary.
       pSource -= pMixSource->m_cbBuffer;
    }

    pSourceStart = pSource;
    pSourceEnd   = pSource + nInputByteCount;
  }

  *((LONG **)ppSource) = (LONG *)pSource;
    pMixSource->m_cSamplesInCache += ((plBuild - plBuildStart) / 2);
  *pplBuild = plBuild;
    pMixSource->m_dwFraction = dwFraction;
  
  return ((int)nInputByteCount <= 0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\merge37.inc ===
/***************************************************************************
 * Copyright (C) 1997-1998 Microsoft Corporation.  All Rights Reserved.
 ***************************************************************************/

/* Merge37 */
/* H_16_BITS */
/* H_MONO  */
/* H_BUILD_STEREO */
/* H_SIGNED */
/* H_ORDER_LR  */
/* H_NOLOOP  */
/* H_NO_RESAMPLE  */
/* H_NO_SCALE  */
/* H_NO_FILTER  */
#define MERGE37ASM
BOOL Merge37Asm (CMixSource *pMixSource, DWORD nInputByteCount, void *pSourceWrap, PLONG *pplBuild, PLONG plBuildEnd, void **ppSource) {
  PLONG plBuild = *pplBuild;
  BYTE *pSource = *((BYTE **)ppSource);
  BYTE *pSourceStart = pSource;
  BYTE *pSourceEnd = pSource + nInputByteCount;
  PLONG plBuildStart = plBuild;
  
  #undef STEP_SIZE
  #define STEP_SIZE (sizeof(WORD))
  #ifdef USE_ITERS
  #undef USE_ITERS
  #endif
  #ifdef XpSource
  #undef XpSource
  #endif
  #ifdef XplBuild
  #undef XplBuild
  #endif
  #define XpSource (pSource + (iters * STEP_SIZE))
  #define XplBuild (plBuild + (iters * 2))

  if (nInputByteCount == LONG_MAX) {	// Handle any wrap issues.
     pSourceEnd = NULL;
     pSourceEnd--;
     nInputByteCount = pSourceEnd - pSource;
     if (nInputByteCount > LONG_MAX) {
        nInputByteCount = LONG_MAX;
        pSourceEnd = pSource + nInputByteCount;
     }
  }
  
  while ((plBuild < plBuildEnd) && (pSource < pSourceEnd))
    {
    if (pSourceEnd > pSourceWrap)
       pSourceEnd = (BYTE *)pSourceWrap;

    
    LONG iters, i;
    i     = plBuildEnd - plBuild;
    iters = pSourceEnd - pSource;
    iters /= STEP_SIZE;
    i /= 2;;
    if (i < iters) iters = i;
    i = iters;
#if 1
     if (iters) {
       _asm {
        mov	ecx, pMixSource
        mov	ebx, iters
        mov	esi, pSource
	lea	ebx, [ebx*2-2]				// 2 at a time.
	cmp	ebx, 14
        mov	edi, plBuild
	jl	LastSamples

	mov	ecx, [ecx]pMixSource.m_fUse_MMX
	test	ecx, ecx
	je	LastSamples

	sub	ebx, 6
	pxor	mm0, mm0
	lea	ecx, [esi+ebx]
	test	ecx, 7
	je	DoMMX

	add	ebx, 6

FirstSamples:	
	movsx	ecx, WORD PTR [esi+ebx]
	add	DWORD PTR [edi+ebx*4], ecx
	add	DWORD PTR [edi+ebx*4+4], ecx
	sub	ebx, 2
	lea	ecx, [esi+ebx]
	and	ecx, 7
	cmp	ecx, 6
	jne	FirstSamples

	sub	ebx, 6

DoMMX:
#ifdef GTW_REORDER
	movq		mm1, QWORD PTR [esi+ebx]	// Load source

	punpckhwd	mm3, mm1
	punpcklwd	mm1, mm1

	psrad		mm1, 16
	psrad		mm3, 16

	jmp	DoMMX00

DoMMX0:
	movq		mm1, QWORD PTR [esi+ebx]	// Load source

	movq		QWORD PTR [edi+ebx*4+16+32], mm3
	punpckhwd	mm3, mm1

	paddd		mm4, QWORD PTR [edi+ebx*4+24+32]
	punpcklwd	mm1, mm1

	movq		QWORD PTR [edi+ebx*4+8 +32], mm2
	psrad		mm1, 16

	movq		QWORD PTR [edi+ebx*4+24+32], mm4
	psrad		mm3, 16

DoMMX00:
	movq		mm2, mm1
	sub		ebx, 8

	punpckldq	mm1, mm1

	paddd		mm1, QWORD PTR [edi+ebx*4+32]
	punpckhdq	mm2, mm2

	paddd		mm2, QWORD PTR [edi+ebx*4+8+32]
	movq		mm4, mm3

	movq		QWORD PTR [edi+ebx*4+32],    mm1
	punpckldq	mm3, mm3

	paddd		mm3, QWORD PTR [edi+ebx*4+16+32]
	punpckhdq	mm4, mm4

	jge		DoMMX0

	paddd		mm4, QWORD PTR [edi+ebx*4+24+32]

	movq		QWORD PTR [edi+ebx*4+8 +32], mm2
	movq		QWORD PTR [edi+ebx*4+16+32], mm3
	movq		QWORD PTR [edi+ebx*4+24+32], mm4
#else
#if 0
	movq		mm1, QWORD PTR [esi+ebx]	// Load source
	movq		mm3, mm1			// Mono samples

	punpcklwd	mm1, mm1
	punpckhwd	mm3, mm3

	punpckhwd	mm2, mm1
	punpcklwd	mm1, mm1
	punpckhwd	mm4, mm3
	punpcklwd	mm3, mm3

	psrad		mm1, 16
	psrad		mm2, 16
	psrad		mm3, 16
	psrad		mm4, 16
#else
	movq		mm1, QWORD PTR [esi+ebx]	// Load source

	punpckhwd	mm3, mm1
	punpcklwd	mm1, mm1

	psrad		mm1, 16
	psrad		mm3, 16

	movq		mm2, mm1
	movq		mm4, mm3

	punpckldq	mm1, mm1
	punpckhdq	mm2, mm2
	punpckldq	mm3, mm3
	punpckhdq	mm4, mm4
#endif
	paddd		mm1, QWORD PTR [edi+ebx*4]
	paddd		mm2, QWORD PTR [edi+ebx*4+8]
	paddd		mm3, QWORD PTR [edi+ebx*4+16]
	paddd		mm4, QWORD PTR [edi+ebx*4+24]
	movq		QWORD PTR [edi+ebx*4],    mm1
	movq		QWORD PTR [edi+ebx*4+8],  mm2
	movq		QWORD PTR [edi+ebx*4+16], mm3
	movq		QWORD PTR [edi+ebx*4+24], mm4
	
	sub		ebx, 8
	jge		DoMMX
#endif

	emms
	add	ebx, 8
	je	Done

	sub	ebx, 2
	
LastSamples:	
	movsx	eax, WORD PTR [esi+ebx]

	mov	ecx, DWORD PTR[edi+ebx*4]
	mov	edx, DWORD PTR[edi+ebx*4+4]

	add	ecx, eax
	add	edx, eax

	sub	ebx, 2
	mov	DWORD PTR [edi+ebx*4+8], ecx

	mov	DWORD PTR [edi+ebx*4+12], edx
	jge	LastSamples
Done:
	}
    }
#elif 0
    if (iters) {
      _asm {
        mov	ebx, iters
        mov	esi, pSource
	lea	ebx, [ebx*2-2]
        mov	edi, plBuild
Lab:
	movsx	eax, WORD PTR [esi+ebx]

	mov	ecx, DWORD PTR[edi+ebx*4]
	mov	edx, DWORD PTR[edi+ebx*4+4]

	add	ecx, eax
	add	edx, eax

	sub	ebx, 2
	mov	DWORD PTR [edi+ebx*4+8], ecx

	mov	DWORD PTR [edi+ebx*4+12], edx
	jge	SHORT Lab
      }
    }
#else
    while(--iters >= 0)
    {
      LONG Sample;
      Sample = ((LONG)*((SHORT*)(XpSource)));
      *XplBuild += Sample;
      *(XplBuild + 1) += Sample;
    }
#endif
    iters = i;
    i *= 2;;
    plBuild  += i;
    pSource          = XpSource;
    nInputByteCount -=  pSource - pSourceStart;

    if (pSource >= pSourceWrap) {	// Goes to -1 position if necessary.
       pSource -= pMixSource->m_cbBuffer;
    }

    pSourceStart = pSource;
    pSourceEnd   = pSource + nInputByteCount;
  }

  *((LONG **)ppSource) = (LONG *)pSource;
    pMixSource->m_cSamplesInCache += ((plBuild - plBuildStart) / 2);
  *pplBuild = plBuild;
  
  return ((int)nInputByteCount <= 0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\merge98.inc ===
/*
 * Merge98.inc
 *
 * Copyright (C) 1997-1998 Microsoft Corporation.  All Rights Reserved.
 */

/* Merge98 */
/* H_8_BITS  */
/* H_STEREO */
/* H_BUILD_STEREO */
/* H_UNSIGNED  */
/* H_ORDER_LR  */
/* H_NOLOOP  */
/* H_RESAMPLE */
/* H_NO_SCALE  */
/* H_NO_FILTER  */
#define MERGE98ASM
BOOL Merge98Asm (CMixSource *pMixSource, DWORD nInputByteCount, void *pSourceWrap, PLONG *pplBuild, PLONG plBuildEnd, void **ppSource) {
  PLONG plBuild = *pplBuild;
  BYTE *pSource = *((BYTE **)ppSource);
  BYTE *pSourceStart = pSource;
  BYTE *pSourceEnd = pSource + nInputByteCount;
  PLONG plBuildStart = plBuild;
  
  DWORD dwFraction = pMixSource->m_dwFraction;
  DWORD dwStep     = pMixSource->m_step_fract;

  #undef STEP_SIZE
  #define STEP_SIZE (sizeof(BYTE) + sizeof(BYTE))

  #ifdef USE_ITERS
  #undef USE_ITERS
  #endif
  #ifdef XpSource
  #undef XpSource
  #endif
  #ifdef XplBuild
  #undef XplBuild
  #endif
  #define XplBuild plBuild
  
  #define XpSource  (pSource + ((dwFraction >> FRACT_SHIFT) * STEP_SIZE))
  
  if (nInputByteCount == LONG_MAX) {	// Handle any wrap issues.
     pSourceEnd = NULL;
     pSourceEnd--;
     nInputByteCount = pSourceEnd - pSource;
     if (nInputByteCount > LONG_MAX) {
        nInputByteCount = LONG_MAX;
        pSourceEnd = pSource + nInputByteCount;
     }
  }
  
  *((BYTE **)&pSourceWrap) -= STEP_SIZE;
  
  while ((plBuild < plBuildEnd) && (pSource < pSourceEnd))
    {
    if (pSourceEnd > pSourceWrap)
       pSourceEnd = (BYTE *)pSourceWrap;
    
#if 1
	if (!pMixSource->m_fUse_MMX)
	_asm {
	mov	esi, pSource
	mov	edx, esi
	mov	eax, dwFraction
	mov	edi, plBuild		// plBuild
	mov	ecx, eax
	shr	ecx, 12
	lea	esi, [esi+ecx*2]	// pSource
	push	ebp
	push	DWORD PTR dwStep
	push	DWORD PTR pSourceEnd
	push	DWORD PTR plBuildEnd

	cmp	edi, DWORD PTR [esp+0]	// plBuild >= plBuildEnd
	jae	Exit

	mov	ebp, eax
	xor	ecx, ecx
Lab:
	cmp	esi, DWORD PTR [esp+4]	// pSource >= pSourceEnd
	jae	Exit

	mov	cl, BYTE PTR [esi+2]
	xor	ebx, ebx
	sub	ecx, 128
	mov	bl, BYTE PTR [esi]
	shl	ecx, 8
	sub	ebx, 128
	shl	ebx, 8
	and	ebp, 4095		// dwFrac = dwFraction & 0x0fff
	sub	ecx, ebx		// x   = NewSample - OldSample
	imul	ecx, ebp		// x  *= Frac
	sar	ecx, 12			// x >>= 12
	add	ecx, ebx		// NewSample += x
	mov	ebx, DWORD PTR [edi]
	add	ebx, ecx
	xor	ecx, ecx
	mov	DWORD PTR [edi], ebx
	mov	cl, BYTE PTR [esi+3]
	xor	ebx, ebx
	sub	ecx, 128
	mov	bl, BYTE PTR [esi+1]
	shl	ecx, 8
	sub	ebx, 128
	shl	ebx, 8
	add	edi, 8			// plBuild += 2
	sub	ecx, ebx		// x   = NewSample - OldSample
	imul	ecx, ebp		// x  *= Frac
	sar	ecx, 12			// x >>= 12
	mov	ebp, DWORD PTR [esp+8]	// dwStep
	add	ecx, ebx		// NewSample += x
	mov	ebx, DWORD PTR [edi-4]
	add	eax, ebp		// dwFraction += dwStep
	add	ebx, ecx
	mov	ecx, eax
	mov	DWORD PTR [edi-4], ebx	// (*plBuild+1) += x
	shr	ecx, 12
	mov	ebp, eax
	lea	esi, [edx+ecx*2]	// pSource + (dwFraction >> 12) * 4
	xor	ecx, ecx

	cmp	edi, DWORD PTR [esp+0]	// plBuild < plBuildEnd
	jb	Lab
Exit:
	add	esp, 12
	pop	ebp
	mov	dwFraction, eax
	mov	plBuild, edi
	}
	else
	_asm {
	mov	esi, pSource
	mov	edx, esi
	mov	eax, dwFraction
	mov	edi, plBuild		// plBuild
	mov	ecx, eax
	shr	ecx, 12
	lea	esi, [esi+ecx*2]	// pSource
	push	ebp
	push	DWORD PTR dwStep
	push	DWORD PTR pSourceEnd
	push	DWORD PTR plBuildEnd

	cmp	edi, DWORD PTR [esp+0]	// plBuild >= plBuildEnd
	jae	Exit0

	mov		ecx, 128
	movd		mm6, ecx	// 0, 0, 0, 128
	punpcklwd	mm6, mm6	// 0, 0, 128, 128
	punpckldq	mm6, mm6	// 128, 128, 128, 128

	mov	ebp, eax
	xor	ecx, ecx

Lab0:
	cmp	esi, DWORD PTR [esp+4]	// pSource >= pSourceEnd
	jae	Exit0

	movd		mm1, DWORD PTR [esi]
	punpcklbw	mm1, mm0
	psubw		mm1, mm6
	psllw		mm1, 8

	movq		mm2, mm1
	punpckhdq	mm2, mm2	// Put next sample in low half.
	psubw		mm2, mm1

//	mov	cl, BYTE PTR [esi+2]
//	xor	ebx, ebx
//	sub	ecx, 128
//	mov	bl, BYTE PTR [esi]
//	shl	ecx, 8
//	sub	ebx, 128
//	shl	ebx, 8
	and	ebp, 4095		// dwFrac = dwFraction & 0x0fff

	movd		mm5, ebp
	punpcklwd	mm1, mm1	
	punpcklwd	mm5, mm5	
	psrad		mm1, 16
#ifdef DO_MORE_ACCURATE_VERSION
	movq		mm3, mm2	// Use for high half of multiply.

	pmullw		mm2, mm5	// Low word.
	pmulhw		mm3, mm5	// High word results.

	punpcklwd	mm2, mm3	// Low bits are Left, high are Right.
#else
	pmulhw		mm2, mm5
	punpcklwd	mm2, mm2	// Lower 4 bits are randomized.
#endif
	psrad		mm2, 12
	paddd		mm1, mm2
	paddd		mm1, QWORD PTR [edi]
	movq		QWORD PTR [edi], mm1

//	sub	ecx, ebx		// x   = NewSample - OldSample
//	imul	ecx, ebp		// x  *= Frac
//	sar	ecx, 12			// x >>= 12
//	add	ecx, ebx		// NewSample += x
//	mov	ebx, DWORD PTR [edi]
//	add	ebx, ecx
//	xor	ecx, ecx
//	mov	DWORD PTR [edi], ebx
//	mov	cl, BYTE PTR [esi+3]
//	xor	ebx, ebx
//	sub	ecx, 128
//	mov	bl, BYTE PTR [esi+1]
//	shl	ecx, 8
//	sub	ebx, 128
//	shl	ebx, 8
	add	edi, 8			// plBuild += 2
//	sub	ecx, ebx		// x   = NewSample - OldSample
//	imul	ecx, ebp		// x  *= Frac
//	sar	ecx, 12			// x >>= 12
	mov	ebp, DWORD PTR [esp+8]	// dwStep
//	add	ecx, ebx		// NewSample += x
//	mov	ebx, DWORD PTR [edi-4]
	add	eax, ebp		// dwFraction += dwStep
//	add	ebx, ecx
	mov	ecx, eax
//	mov	DWORD PTR [edi-4], ebx	// (*plBuild+1) += x
	shr	ecx, 12
	mov	ebp, eax
	lea	esi, [edx+ecx*2]	// pSource + (dwFraction >> 12) * 4
	xor	ecx, ecx

	cmp	edi, DWORD PTR [esp+0]	// plBuild < plBuildEnd
	jb	Lab0
Exit0:
	emms
	add	esp, 12
	pop	ebp
	mov	dwFraction, eax
	mov	plBuild, edi
	}
#else
    while ((plBuild < plBuildEnd) && (XpSource < pSourceEnd))
    {
      LONG SampleLNext;
      LONG SampleRNext;
      LONG SampleL;
      LONG SampleR;
          
      SampleL = ((LONG)(*((BYTE*)(XpSource)))) * 256 - 32768L;
      SampleR = ((LONG)(*(((BYTE*)(XpSource))+1))) * 256 - 32768L;
      SampleLNext = ((LONG)(*(((BYTE*)(XpSource))+2))) * 256 - 32768L;
      SampleRNext = ((LONG)(*(((BYTE*)(XpSource))+3))) * 256 - 32768L;

        LONG dwFrac = dwFraction & FRACT_MASK;
        SampleL += ((SampleLNext - SampleL) * dwFrac) >> FRACT_SHIFT;
        SampleR += ((SampleRNext - SampleR) * dwFrac) >> FRACT_SHIFT;
        dwFraction += dwStep;
        *XplBuild += SampleL;
        *(XplBuild + 1) += SampleR;
        plBuild += 2;
    }
#endif

    pSource          = XpSource;
    dwFraction &= FRACT_MASK;		// Eliminate accumulated offsets.
    nInputByteCount -=  pSource - pSourceStart;

    if (pSource >= pSourceWrap) {	// Goes to -1 position if necessary.
       pSource -= pMixSource->m_cbBuffer;
    }

    pSourceStart = pSource;
    pSourceEnd   = pSource + nInputByteCount;
  }

  *((LONG **)ppSource) = (LONG *)pSource;
    pMixSource->m_cSamplesInCache += ((plBuild - plBuildStart) / 2);
  *pplBuild = plBuild;
    pMixSource->m_dwFraction = dwFraction;
  
  return ((int)nInputByteCount <= 0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\mergemmx.inc ===
/*
 * MergeMMX - do a SRC conversion of two 32-bit buffers.
 *
 * Copyright (C) 1998 Microsoft Corporation.  All Rights Reserved.
 */

void
MergeMMX
	(
	PLONG pSrc,
	PLONG pSrcEnd,
	PLONG pDst,
	PLONG pDstEnd,
	DWORD dwFrac
	)
{
#if 0
#ifdef Not_VxD
    DPF(0, "MergeXXX ENT: pDst 0x%08lx pDstEnd 0x%08lx pSrc 0x%08lx pSrcEnd 0x%08lx Frac 0x%08lx", pDst, pDstEnd, pSrc, pSrcEnd, dwFrac);
#else
    DPF(("Merge32 ENT: pDst 0x%08lx pDstEnd 0x%08lx pSrc 0x%08lx pSrcEnd 0x%08lx dwFrac 0x%08lx", pDst, pDstEnd, pSrc, pSrcEnd, dwFrac));
#endif
#endif
   /*	No nested loops, just a simple traversal.
    */
   _asm {
	mov	esi, pSrc
	mov	edi, pDst

	push	dwFrac
	push	pDstEnd
	mov	eax, pSrcEnd
	sub	eax, 8
	push	eax
	push	ebp
	xor	eax, eax		// Fractional counter.
	mov	edx, esi
	mov	ebp, eax		// Current fraction.

// Note that the exact number of times through the loop can be calculated...

	cmp	edi, DWORD PTR [esp+8]	// plBuild >= plBuildEnd
	jae	Exit

Top:
	cmp	esi, DWORD PTR [esp+4]	// pSource >= pSourceEnd
	jae	Exit

// End note.

	movq		mm1, QWORD PTR [esi]
	and	ebp, 4095		// dwFrac = dwFraction & 0x0fff

	movq		mm2, QWORD PTR [esi+8]
	movd		mm5, ebp

	psubd		mm2, mm1
	punpcklwd	mm5, mm5

	packssdw	mm2, mm2	// Use the 2 lowest words.
	add	edi, 8			// plBuild += 2

	movq		mm3, mm2
	pmullw		mm2, mm5

	movq		mm6, QWORD PTR [edi-8]
	pmulhw		mm3, mm5

	mov	ebp, DWORD PTR [esp+12]	// dwStep
	paddd		mm1, mm6

	add	eax, ebp		// dwFraction += dwStep
	punpcklwd	mm2, mm3

	mov	ecx, eax
	psrad		mm2, 12

	mov	ebp, eax
	shr	ecx, 12

	paddd		mm1, mm2
	movq		QWORD PTR [edi-8], mm1

	lea	esi, [edx+ecx*8]	// pSource + (dwFraction >> 12) * 8
	cmp	edi, DWORD PTR [esp+8]	// plBuild < plBuildEnd

	jb	Top
Exit:
	emms
	pop	ebp
	add	esp, 12
	mov pDst, edi
	mov pSrc, esi
	}
#if 0
#ifdef Not_VxD
    DPF(0, "MergeXXX EXT: pDst 0x%08lx pDstEnd 0x%08lx pSrc 0x%08lx pSrcEnd 0x%08lx", pDst, pDstEnd, pSrc, pSrcEnd);
#else
    DPF(("Merge32 EXT: pDst 0x%08lx pDstEnd 0x%08lx pSrc 0x%08lx pSrcEnd 0x%08lx", pDst, pDstEnd, pSrc, pSrcEnd));
#endif
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\misc.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       misc.h
 *  Content:    Miscelaneous utility functions
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  12/31/96    dereks  Created
 *
 ***************************************************************************/

#ifndef __MISC_H__
#define __MISC_H__

// No appropriate waveOut/waveIn device id
#define WAVE_DEVICEID_NONE          MAX_UINT

// Non-window state
#define SW_NOSTATE                  MAX_UINT

// EnumStandardFormats callback type
typedef BOOL (CALLBACK *LPFNEMUMSTDFMTCALLBACK)(LPCWAVEFORMATEX, LPVOID);

// Pragma reminders
#define QUOTE0(a)           #a
#define QUOTE1(a)           QUOTE0(a)
#define MESSAGE(a)          message(__FILE__ ", line " QUOTE1(__LINE__) ": " a)
#define TODO(a)             MESSAGE("TODO: " a)

// Default buffer format
#define DEF_FMT_CHANNELS    2
#define DEF_FMT_SAMPLES     22050
#define DEF_FMT_BITS        8

// Default primary buffer size
#define DEF_PRIMARY_SIZE    0x8000

// Miscellaneous helper macros
#define LXOR(a, b) \
            (!(a) != !(b))

#define BLOCKALIGN(a, b) \
            (((a) / (b)) * (b))

#define BLOCKALIGNPAD(a, b) \
            (BLOCKALIGN(a, b) + (((a) % (b)) ? (b) : 0))

#define HRFROMP(p) \
            ((p) ? DS_OK : DSERR_OUTOFMEMORY)

#define MAKEBOOL(a) \
            (!!(a))

#define NUMELMS(a) \
            (sizeof(a) / sizeof((a)[0]))

#define ADD_WRAP(val, add, max) \
            (((val) + (add)) % (max))

#define INC_WRAP(val, max) \
            ((val) = ADD_WRAP(val, 1, max))

#define MIN(a, b) \
            min(a, b)

#define MAX(a, b) \
            max(a, b)

#define BETWEEN(value, minimum, maximum) \
            min(maximum, max(minimum, value))

#define ABS(n) \
            ((n) > 0 ? (n) : (-n))

typedef struct tagCOMPAREBUFFER
{
    DWORD           dwFlags;
    LPCWAVEFORMATEX pwfxFormat;
    GUID            guid3dAlgorithm;
} COMPAREBUFFER, *LPCOMPAREBUFFER;

typedef const COMPAREBUFFER *LPCCOMPAREBUFFER;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// DDHELP globals
extern DWORD dwHelperPid;
extern HINSTANCE hModule;

// Versions of Windows that we care about
typedef enum
{
    WIN_UNKNOWN,
    WIN_9X,
    WIN_ME,
    WIN_NT,
    WIN_2K,
    WIN_XP
} WINVERSION;

// Find simplified Windows version
extern WINVERSION GetWindowsVersion(void);

// waveIn/Out helpers
extern HRESULT OpenWaveOut(LPHWAVEOUT, UINT, LPCWAVEFORMATEX);
extern HRESULT CloseWaveOut(LPHWAVEOUT);
extern HRESULT OpenWaveIn(LPHWAVEIN, UINT, LPCWAVEFORMATEX, DWORD_PTR, DWORD_PTR, DWORD);
extern HRESULT CloseWaveIn(LPHWAVEIN);
extern void InterruptSystemEvent(UINT);
extern HRESULT GetWaveOutVolume(UINT, DWORD, LPLONG, LPLONG);
extern HRESULT SetWaveOutVolume(UINT, DWORD, LONG, LONG);
extern BOOL IsWaveDeviceMappable(UINT, BOOL);
extern UINT GetNextMappableWaveDevice(UINT, BOOL);
extern HRESULT WaveMessage(UINT, BOOL, UINT, DWORD_PTR, DWORD_PTR);
extern UINT WaveGetNumDevs(BOOL);
extern HRESULT GetWaveDeviceInterface(UINT, BOOL, LPTSTR *);
extern HRESULT GetWaveDeviceIdFromInterface(LPCTSTR, BOOL, LPUINT);
extern HRESULT GetWaveDeviceDevnode(UINT, BOOL, LPDWORD);
extern HRESULT GetWaveDeviceIdFromDevnode(DWORD, BOOL, LPUINT);

// Error code translations
extern HRESULT MMRESULTtoHRESULT(MMRESULT);
extern HRESULT WIN32ERRORtoHRESULT(DWORD);
extern HRESULT GetLastErrorToHRESULT(void);
extern LPCTSTR HRESULTtoSTRING(HRESULT);
extern void HresultToString(HRESULT, LPTSTR, UINT, LPTSTR, UINT);

// ANSI/Unicode conversion
extern DWORD AnsiToAnsi(LPCSTR, LPSTR, DWORD);
extern DWORD AnsiToUnicode(LPCSTR, LPWSTR, DWORD);
extern DWORD UnicodeToAnsi(LPCWSTR, LPSTR, DWORD);
extern DWORD UnicodeToUnicode(LPCWSTR, LPWSTR, DWORD);

#ifdef UNICODE
#define AnsiToTchar AnsiToUnicode
#define TcharToAnsi UnicodeToAnsi
#define UnicodeToTchar UnicodeToUnicode
#define TcharToUnicode UnicodeToUnicode
#else // UNICODE
#define AnsiToTchar AnsiToAnsi
#define TcharToAnsi AnsiToAnsi
#define UnicodeToTchar UnicodeToAnsi
#define TcharToUnicode AnsiToUnicode
#endif // UNICODE

extern LPSTR AnsiToAnsiAlloc(LPCSTR);
extern LPWSTR AnsiToUnicodeAlloc(LPCSTR);
extern LPSTR UnicodeToAnsiAlloc(LPCWSTR);
extern LPWSTR UnicodeToUnicodeAlloc(LPCWSTR);

#ifdef UNICODE
#define AnsiToTcharAlloc AnsiToUnicodeAlloc
#define TcharToAnsiAlloc UnicodeToAnsiAlloc
#define UnicodeToTcharAlloc UnicodeToUnicodeAlloc
#define TcharToUnicodeAlloc UnicodeToUnicodeAlloc
#define TcharToTcharAlloc UnicodeToUnicodeAlloc
#else // UNICODE
#define AnsiToTcharAlloc AnsiToAnsiAlloc
#define TcharToAnsiAlloc AnsiToAnsiAlloc
#define UnicodeToTcharAlloc UnicodeToAnsiAlloc
#define TcharToUnicodeAlloc AnsiToUnicodeAlloc
#define TcharToTcharAlloc AnsiToAnsiAlloc
#endif // UNICODE

__inline UINT lstrsizeA(LPCSTR pszString)
{
    return pszString ? lstrlenA(pszString) + 1 : 0;
}

__inline UINT lstrsizeW(LPCWSTR pszString)
{
    return pszString ? sizeof(WCHAR) * (lstrlenW(pszString) + 1) : 0;
}

#ifdef UNICODE
#define lstrsize lstrsizeW
#else // UNICODE
#define lstrsize lstrsizeA
#endif // UNICODE

// Window helpers
extern HWND GetRootParentWindow(HWND);
extern HWND GetForegroundApplication(void);
extern UINT GetWindowState(HWND);

// Wave format helpers
extern void FillPcmWfx(LPWAVEFORMATEX, WORD, DWORD, WORD);
extern LPWAVEFORMATEX AllocPcmWfx(WORD, DWORD, WORD);
extern DWORD GetWfxSize(LPCWAVEFORMATEX, DWORD);
extern void CopyWfx(LPCWAVEFORMATEX, LPWAVEFORMATEX);
extern LPWAVEFORMATEX CopyWfxAlloc(LPCWAVEFORMATEX);
extern LPDSCEFFECTDESC CopyDSCFXDescAlloc(DWORD,LPDSCEFFECTDESC);
extern HRESULT CopyWfxApi(LPCWAVEFORMATEX, LPWAVEFORMATEX, LPDWORD);
extern BOOL CmpWfx(LPCWAVEFORMATEX, LPCWAVEFORMATEX);
extern LPWAVEFORMATEX AllocPcmWfx(WORD, DWORD, WORD);
extern BOOL EnumStandardFormats(LPCWAVEFORMATEX, LPWAVEFORMATEX, LPFNEMUMSTDFMTCALLBACK, LPVOID);
extern void FillSilence(LPVOID, DWORD, WORD);
extern void FillNoise(LPVOID, DWORD, WORD);

__inline void FillDefWfx(LPWAVEFORMATEX pwfx)
{
    FillPcmWfx(pwfx, DEF_FMT_CHANNELS, DEF_FMT_SAMPLES, DEF_FMT_BITS);
}

__inline LPWAVEFORMATEX AllocDefWfx(void)
{
    return AllocPcmWfx(DEF_FMT_CHANNELS, DEF_FMT_SAMPLES, DEF_FMT_BITS);
}

// Attenuation value conversion
extern void VolumePanToAttenuation(LONG, LONG, LPLONG, LPLONG);
extern void AttenuationToVolumePan(LONG, LONG, LPLONG, LPLONG);
extern LONG MultiChannelToStereoPan(DWORD, const DWORD*, const LONG*);
extern void FillDsVolumePan(LONG, LONG, PDSVOLUMEPAN);

// Miscellaneous dsound helpers
extern int CountBits(DWORD word);
extern int HighestBit(DWORD word);
extern DWORD GetAlignedBufferSize(LPCWAVEFORMATEX, DWORD);
extern DWORD PadCursor(DWORD, DWORD, LPCWAVEFORMATEX, LONG);
extern HRESULT CopyDsBufferDesc(LPCDSBUFFERDESC, LPDSBUFFERDESC);
extern BOOL CompareBufferProperties(LPCCOMPAREBUFFER, LPCCOMPAREBUFFER);

__inline ULONG AddRef(PULONG pulRefCount)
{
    ASSERT(pulRefCount);
    ASSERT(*pulRefCount < MAX_ULONG);
    
    if(*pulRefCount < MAX_ULONG)
    {
        (*pulRefCount)++;
    }

    return *pulRefCount;
}

__inline ULONG Release(PULONG pulRefCount)
{
    ASSERT(pulRefCount);
    ASSERT(*pulRefCount > 0);
    
    if(*pulRefCount > 0)
    {
        (*pulRefCount)--;
    }

    return *pulRefCount;
}

// File information
extern HRESULT GetFixedFileInformationA(LPCSTR, VS_FIXEDFILEINFO *);
extern HRESULT GetFixedFileInformationW(LPCWSTR, VS_FIXEDFILEINFO *);

#ifdef UNICODE
#define GetFixedFileInformation GetFixedFileInformationW
#else // UNICODE
#define GetFixedFileInformation GetFixedFileInformationA
#endif // UNICODE

#ifdef __cplusplus
}
#endif // __cplusplus

#ifdef __cplusplus

// Callback function wrapper classes
class CUsesEnumStandardFormats
{
public:
    CUsesEnumStandardFormats(void);
    virtual ~CUsesEnumStandardFormats(void);

protected:
    virtual BOOL EnumStandardFormats(LPCWAVEFORMATEX, LPWAVEFORMATEX);
    virtual BOOL EnumStandardFormatsCallback(LPCWAVEFORMATEX) = 0;

private:
    static BOOL CALLBACK EnumStandardFormatsCallbackStatic(LPCWAVEFORMATEX, LPVOID);
};

#endif // __cplusplus

#endif __MISC_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\misc.c ===
/***************************************************************************
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       misc.c
 *  Content:    Miscelaneous utility functions
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  12/31/96    dereks  Created
 *
 ***************************************************************************/

#include "dsoundi.h"
#include <mediaerr.h>  // For DMO_E_TYPE_NOT_ACCEPTED

// Some error code descriptions used by HresultToString() below
#define REGDB_E_CLASSNOTREG_EXPLANATION     TEXT("Class not registered")
#define DMO_E_TYPE_NOT_ACCEPTED_EXPLANATION TEXT("Wave format not supported by effect")
#define S_FALSE_EXPLANATION                 TEXT("Special success code")


/***************************************************************************
 *
 *  OpenWaveOut
 *
 *  Description:
 *      Opens the waveOut device.
 *
 *  Arguments:
 *      LPHWAVEOUT * [out]: receives pointer to the waveOut device handle.
 *      UINT [in]: device id.
 *      LPWAVEFORMATEX [in]: format in which to open the device.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "OpenWaveOut"

HRESULT OpenWaveOut(LPHWAVEOUT phWaveOut, UINT uDeviceId, LPCWAVEFORMATEX pwfxFormat)
{
    const HANDLE            hProcess        = GetCurrentProcess();
    const HANDLE            hThread         = GetCurrentThread();
    LPHWAVEOUT              phwo            = NULL;
    LPWAVEFORMATEX          pwfx            = NULL;
    BOOL                    fInHelper       = FALSE;
    DWORD                   dwPriorityClass;
    INT                     nPriority;
    HRESULT                 hr;
    MMRESULT                mmr;

    DPF_ENTER();
    CHECK_WRITE_PTR(phWaveOut);
    CHECK_READ_PTR(pwfxFormat);

    // Here's a quick lesson on the Win9X kernel.  If process A and
    // process B look at the memory at address 0x12345678, the data will
    // not be the same.  This is part of the fun of virtual addresses.
    // The only way to get around this is to allocate from a shared heap.
    // In order to make waveOutOpen and waveOutClose work properly from
    // within DDHELP's process space, we can only pass pointers into the
    // shared heap around unless we're actually running in DDHELP's
    // context.  For that reason, this function actually allocates an
    // HWAVEOUT.

    // Another thing to know here is that waveOutOpen doesn't respond well
    // to being called with a process or thread priority higher than normal.

    #ifdef SHARED
    // Are we being called from the helper process?
    if(GetCurrentProcessId() == dwHelperPid)
        fInHelper = TRUE;
    #endif // SHARED

    // Save the current process and thread priorities and reset them to normal
    if(!fInHelper)
    {
        dwPriorityClass = GetPriorityClass(hProcess);
        nPriority = GetThreadPriority(hThread);

        SetPriorityClass(hProcess, NORMAL_PRIORITY_CLASS);
        SetThreadPriority(hThread, THREAD_PRIORITY_NORMAL);
    }

    // Allocate a copy of the waveOut handle
    if(IN_SHARED_MEMORY(phWaveOut))
        phwo = phWaveOut;
    else
        phwo = MEMALLOC(HWAVEOUT);
    hr = HRFROMP(phwo);

    // Allocate a copy of the format
    if(SUCCEEDED(hr))
    {
        if(IN_SHARED_MEMORY(pwfxFormat))
            pwfx = (LPWAVEFORMATEX)pwfxFormat;
        else
            pwfx = CopyWfxAlloc(pwfxFormat);
        hr = HRFROMP(pwfx);
    }

    // Open the waveOut device
    if(SUCCEEDED(hr))
    {
        #ifdef SHARED
        if(!fInHelper)
            mmr = HelperWaveOpen(phwo, uDeviceId, pwfx);
        else
        #endif
            mmr = waveOutOpen(phwo, uDeviceId, pwfx, 0, 0, 0);

        hr = MMRESULTtoHRESULT(mmr);
        DPF(SUCCEEDED(hr) ? DPFLVL_MOREINFO : DPFLVL_ERROR, "waveOutOpen returned %s (%lu)", HRESULTtoSTRING(hr), mmr);
    }

    // Restore the process and thread priorities
    if(!fInHelper)
    {
        SetPriorityClass(hProcess, dwPriorityClass);
        SetThreadPriority(hThread, nPriority);
    }

    // Success
    if(SUCCEEDED(hr))
        *phWaveOut = *phwo;

    if(phwo != phWaveOut)
        MEMFREE(phwo);

    if(pwfx != pwfxFormat)
        MEMFREE(pwfx);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CloseWaveOut
 *
 *  Description:
 *      Closes the waveOut device.
 *
 *  Arguments:
 *      LPHWAVEOUT * [in/out]: waveOut device handle.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CloseWaveOut"

HRESULT CloseWaveOut(LPHWAVEOUT phWaveOut)
{
    HRESULT hr = DS_OK;
    DPF_ENTER();
    CHECK_WRITE_PTR(phWaveOut);

    if (IsValidHandleValue(*phWaveOut))
    {
        HANDLE      hProcess        = GetCurrentProcess();
        HANDLE      hThread         = GetCurrentThread();
        DWORD       dwPriorityClass = GetPriorityClass(hProcess);
        INT         nPriority       = GetThreadPriority(hThread);
        MMRESULT    mmr;

        // Temporarily reset our process and thread priorities
        SetPriorityClass(hProcess, NORMAL_PRIORITY_CLASS);
        SetThreadPriority(hThread, THREAD_PRIORITY_NORMAL);

        // Close the waveOut device
        #ifdef SHARED
        if(GetCurrentProcessId() != dwHelperPid)
            mmr = HelperWaveClose((DWORD)*phWaveOut);
        else
        #endif
            mmr = waveOutClose(*phWaveOut);
        *phWaveOut = NULL;

        // Restore the process and thread priorities
        SetPriorityClass(hProcess, dwPriorityClass);
        SetThreadPriority(hThread, nPriority);

        hr = MMRESULTtoHRESULT(mmr);
        DPF(SUCCEEDED(hr) ? DPFLVL_MOREINFO : DPFLVL_ERROR, "waveOutClose returned %s (%lu)", HRESULTtoSTRING(hr), mmr);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  OpenWaveIn
 *
 *  Description:
 *      Opens the waveIn device safely (by temporarily lowering our process
 *      and thread priorities during the waveInOpen call)
 *
 *  Arguments:
 *      LPHWAVEIN * [out]: receives pointer to the waveIn device handle.
 *      UINT [in]: device id.
 *      LPWAVEFORMATEX [in]: format in which to open the device.
 *      DWORD_PTR [in]: callback function pointer.
 *      DWORD_PTR [in]: context pointer for the callback function.
 *      DWORD [in]: flags for opening the device
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "OpenWaveIn"

HRESULT OpenWaveIn(LPHWAVEIN phWaveIn, UINT uDeviceId, LPCWAVEFORMATEX pwfxFormat,
                   DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen)
{
    const HANDLE            hProcess        = GetCurrentProcess();
    const HANDLE            hThread         = GetCurrentThread();
    DWORD                   dwPriorityClass = GetPriorityClass(hProcess);
    INT                     nPriority       = GetThreadPriority(hThread);
    HRESULT                 hr;
    MMRESULT                mmr;

    DPF_ENTER();
    CHECK_READ_PTR(pwfxFormat);

    // Temporarily reset our process and thread priorities
    SetPriorityClass(hProcess, NORMAL_PRIORITY_CLASS);
    SetThreadPriority(hThread, THREAD_PRIORITY_NORMAL);

    // Open the waveIn device
    mmr = waveInOpen(phWaveIn, uDeviceId, pwfxFormat, dwCallback, dwInstance, fdwOpen);
    hr = MMRESULTtoHRESULT(mmr);
    DPF(SUCCEEDED(hr) ? DPFLVL_MOREINFO : DPFLVL_WARNING, "waveInOpen returned %s (%lu)", HRESULTtoSTRING(hr), mmr);

    // Restore the process and thread priorities
    SetPriorityClass(hProcess, dwPriorityClass);
    SetThreadPriority(hThread, nPriority);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CloseWaveIn
 *
 *  Description:
 *      Closes the waveIn device safely.
 *
 *  Arguments:
 *      LPHWAVEIN * [in/out]: waveIn device handle.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CloseWaveIn"

HRESULT CloseWaveIn(LPHWAVEIN phWaveIn)
{
    HRESULT hr = DS_OK;
    DPF_ENTER();
    CHECK_WRITE_PTR(phWaveIn);

    if (IsValidHandleValue(*phWaveIn))
    {
        HANDLE      hProcess        = GetCurrentProcess();
        HANDLE      hThread         = GetCurrentThread();
        DWORD       dwPriorityClass = GetPriorityClass(hProcess);
        INT         nPriority       = GetThreadPriority(hThread);
        MMRESULT    mmr;

        // Temporarily reset our process and thread priorities
        SetPriorityClass(hProcess, NORMAL_PRIORITY_CLASS);
        SetThreadPriority(hThread, THREAD_PRIORITY_NORMAL);

        // Close the waveIn device
        mmr = waveInClose(*phWaveIn);
        *phWaveIn = 0;

        // Restore the process and thread priorities
        SetPriorityClass(hProcess, dwPriorityClass);
        SetThreadPriority(hThread, nPriority);

        hr = MMRESULTtoHRESULT(mmr);
        DPF(SUCCEEDED(hr) ? DPFLVL_MOREINFO : DPFLVL_ERROR, "waveInClose returned %s (%lu)", HRESULTtoSTRING(hr), mmr);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  MMRESULTtoHRESULT
 *
 *  Description:
 *      Translates an MMRESULT to an HRESULT.
 *
 *  Arguments:
 *      MMRESULT [in]: multimedia result code.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "MMRESULTtoHRESULT"

HRESULT MMRESULTtoHRESULT(MMRESULT mmr)
{
    HRESULT                 hr;

    switch(mmr)
    {
        case MMSYSERR_NOERROR:
            hr = DS_OK;
            break;

        case MMSYSERR_BADDEVICEID:
        case MMSYSERR_NODRIVER:
            hr = DSERR_NODRIVER;
            break;

        case MMSYSERR_ALLOCATED:
            hr = DSERR_ALLOCATED;
            break;

        case MMSYSERR_NOMEM:
            hr = DSERR_OUTOFMEMORY;
            break;

        case MMSYSERR_NOTSUPPORTED:
            hr = DSERR_UNSUPPORTED;
            break;

        case WAVERR_BADFORMAT:
            hr = DSERR_BADFORMAT;
            break;

        default:
            DPF(DPFLVL_INFO, "Unexpected MMRESULT code: %ld", mmr);
            hr = DSERR_GENERIC;
            break;
    }

    return hr;
}


/***************************************************************************
 *
 *  WIN32ERRORtoHRESULT
 *
 *  Description:
 *      Translates a Win32 error code to an HRESULT.
 *
 *  Arguments:
 *      DWORD [in]: Win32 error code.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "WIN32ERRORtoHRESULT"

HRESULT WIN32ERRORtoHRESULT(DWORD dwError)
{
    HRESULT                 hr;

    switch(dwError)
    {
        case ERROR_SUCCESS:
            hr = DS_OK;
            break;

        case ERROR_INVALID_FUNCTION:
        case ERROR_BAD_COMMAND:
            hr = DSERR_INVALIDCALL;
            break;

        case ERROR_INVALID_DATA:
        case ERROR_INVALID_PARAMETER:
        case ERROR_INSUFFICIENT_BUFFER:
        case ERROR_NOACCESS:
        case ERROR_INVALID_FLAGS:
            hr = DSERR_INVALIDPARAM;
            break;

        case ERROR_NOT_ENOUGH_MEMORY:
        case ERROR_OUTOFMEMORY:
        case ERROR_NO_SYSTEM_RESOURCES:
        case ERROR_NONPAGED_SYSTEM_RESOURCES:
        case ERROR_PAGED_SYSTEM_RESOURCES:
            hr = DSERR_OUTOFMEMORY;
            break;

        case ERROR_NOT_SUPPORTED:
        case ERROR_CALL_NOT_IMPLEMENTED:
        case ERROR_PROC_NOT_FOUND:
        // These three are often returned by KS filters:
        case ERROR_NOT_FOUND:
        case ERROR_NO_MATCH:
        case ERROR_SET_NOT_FOUND:
            hr = DSERR_UNSUPPORTED;
            break;

        case ERROR_FILE_NOT_FOUND:
        case ERROR_PATH_NOT_FOUND:
        case ERROR_DLL_NOT_FOUND:
            hr = DSERR_NODRIVER;
            break;

        case ERROR_ACCESS_DENIED:
            hr = DSERR_ACCESSDENIED;
            break;

        default:
            DPF(DPFLVL_INFO, "Unexpected Win32 error code: %ld", dwError);
            hr = DSERR_GENERIC;
            break;
    }

    return hr;
}


/***************************************************************************
 *
 *  GetLastErrorToHRESULT
 *
 *  Description:
 *      Converts the error code returned from GetLastError to an HRESULT.
 *      Note that this function should never be called when success is
 *      assumed.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetLastErrorToHRESULT"

HRESULT GetLastErrorToHRESULT(void)
{
    DWORD                   dwError;
    HRESULT                 hr;

    dwError = GetLastError();

    if(ERROR_SUCCESS == dwError)
    {
        // ASSERT(ERROR_SUCCESS != dwError);
        // This ASSERT has been commented out for years with a cryptic note
        // "Removed for path problem".  Re-instating to see what happens...
        //
        // OK, the path problem we were talking about was a failure with
        // GetFileVersionInfoSize() - when passed a pathname including a
        // nonexistent directory, it fails but doesn't set the last error.

        hr = DSERR_GENERIC;
    }
    else
    {
        hr = WIN32ERRORtoHRESULT(dwError);
    }

    return hr;
}


/***************************************************************************
 *
 *  AnsiToAnsi
 *
 *  Description:
 *      Converts an ANSI string to ANSI.
 *
 *  Arguments:
 *      LPCSTR [in]: source string.
 *      LPSTR [out]: destination string.
 *      DWORD [in]: size of destination string, in characters.
 *
 *  Returns:
 *      DWORD: required size of destination string buffer, in characters.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "AnsiToAnsi"

DWORD AnsiToAnsi(LPCSTR pszSource, LPSTR pszDest, DWORD ccDest)
{
    if(pszDest && ccDest)
    {
        lstrcpynA(pszDest, pszSource, ccDest);
    }

    return lstrlenA(pszSource) + 1;
}


/***************************************************************************
 *
 *  AnsiToUnicode
 *
 *  Description:
 *      Converts an ANSI string to Unicode.
 *
 *  Arguments:
 *      LPCSTR [in]: source string.
 *      LPWSTR [out]: destination string.
 *      DWORD [in]: size of destination string, in characters.
 *
 *  Returns:
 *      DWORD: required size of destination string buffer, in characters.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "AnsiToUnicode"

DWORD AnsiToUnicode(LPCSTR pszSource, LPWSTR pszDest, DWORD ccDest)
{
    if(!pszDest)
    {
        ccDest = 0;
    }
    else if(!ccDest)
    {
        pszDest = NULL;
    }

    return MultiByteToWideChar(CP_ACP, 0, pszSource, -1, pszDest, ccDest);
}


/***************************************************************************
 *
 *  UnicodeToAnsi
 *
 *  Description:
 *      Converts a Unicode string to ANSI.
 *
 *  Arguments:
 *      LPCWSTR [in]: source string.
 *      LPSTR [out]: destination string.
 *      DWORD [in]: size of destination string, in characters.
 *
 *  Returns:
 *      DWORD: required size of destination string buffer, in characters.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "UnicodeToAnsi"

DWORD UnicodeToAnsi(LPCWSTR pszSource, LPSTR pszDest, DWORD ccDest)
{
    if(!pszDest)
    {
        ccDest = 0;
    }
    else if(!ccDest)
    {
        pszDest = NULL;
    }

    return WideCharToMultiByte(CP_ACP, 0, pszSource, -1, pszDest, ccDest, NULL, NULL);
}


/***************************************************************************
 *
 *  UnicodeToUnicode
 *
 *  Description:
 *      Converts a Unicode string to Unicode.
 *
 *  Arguments:
 *      LPCWSTR [in]: source string.
 *      LPWSTR [out]: destination string.
 *      DWORD [in]: size of destination string, in characters.
 *
 *  Returns:
 *      DWORD: required size of destination string buffer, in characters.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "UnicodeToUnicode"

DWORD UnicodeToUnicode(LPCWSTR pszSource, LPWSTR pszDest, DWORD ccDest)
{
    if(pszDest && ccDest)
    {
        lstrcpynW(pszDest, pszSource, ccDest);
    }

    return lstrlenW(pszSource) + 1;
}


/***************************************************************************
 *
 *  AnsiToAnsiAlloc
 *
 *  Description:
 *      Converts an ANSI string to ANSI.  Use MemFree to free the
 *      returned string.
 *
 *  Arguments:
 *      LPCSTR [in]: source string.
 *
 *  Returns:
 *      LPSTR: destination string.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "AnsiToAnsiAlloc"

LPSTR AnsiToAnsiAlloc(LPCSTR pszSource)
{
    LPSTR                   pszDest;
    DWORD                   ccDest;

    ccDest = AnsiToAnsi(pszSource, NULL, 0);
    pszDest = MEMALLOC_A(CHAR, ccDest);

    if(pszDest)
    {
        AnsiToAnsi(pszSource, pszDest, ccDest);
    }

    return pszDest;
}


/***************************************************************************
 *
 *  AnsiToUnicodeAlloc
 *
 *  Description:
 *      Converts an ANSI string to Unicode.  Use MemFree to free the
 *      returned string.
 *
 *  Arguments:
 *      LPCSTR [in]: source string.
 *
 *  Returns:
 *      LPWSTR: destination string.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "AnsiToUnicodeAlloc"

LPWSTR AnsiToUnicodeAlloc(LPCSTR pszSource)
{
    LPWSTR                  pszDest;
    DWORD                   ccDest;

    ccDest = AnsiToUnicode(pszSource, NULL, 0);
    pszDest = MEMALLOC_A(WCHAR, ccDest);

    if(pszDest)
    {
        AnsiToUnicode(pszSource, pszDest, ccDest);
    }

    return pszDest;
}


/***************************************************************************
 *
 *  UnicodeToAnsiAlloc
 *
 *  Description:
 *      Converts a Unicode string to ANSI.  Use MemFree to free the
 *      returned string.
 *
 *  Arguments:
 *      LPCWSTR [in]: source string.
 *
 *  Returns:
 *      LPSTR: destination string.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "UnicodeToAnsiAlloc"

LPSTR UnicodeToAnsiAlloc(LPCWSTR pszSource)
{
    LPSTR                   pszDest;
    DWORD                   ccDest;

    ccDest = UnicodeToAnsi(pszSource, NULL, 0);
    pszDest = MEMALLOC_A(CHAR, ccDest);

    if(pszDest)
    {
        UnicodeToAnsi(pszSource, pszDest, ccDest);
    }

    return pszDest;
}


/***************************************************************************
 *
 *  UnicodeToUnicodeAlloc
 *
 *  Description:
 *      Converts a Unicode string to Unicode.  Use MemFree to free the
 *      returned string.
 *
 *  Arguments:
 *      LPCWSTR [in]: source string.
 *
 *  Returns:
 *      LPWSTR: destination string.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "UnicodeToUnicodeAlloc"

LPWSTR UnicodeToUnicodeAlloc(LPCWSTR pszSource)
{
    LPWSTR                  pszDest;
    DWORD                   ccDest;

    ccDest = UnicodeToUnicode(pszSource, NULL, 0);
    pszDest = MEMALLOC_A(WCHAR, ccDest);

    if(pszDest)
    {
        UnicodeToUnicode(pszSource, pszDest, ccDest);
    }

    return pszDest;
}


/***************************************************************************
 *
 *  GetRootParentWindow
 *
 *  Description:
 *      Retrieves the topmost unowned window in a family.
 *
 *  Arguments:
 *      HWND [in]: window handle who's parent we're looking for.
 *
 *  Returns:
 *      HWND: topmost unowned window in the family.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetRootParentWindow"

HWND GetRootParentWindow(HWND hWnd)
{
    HWND                hWndParent;

    while(hWndParent = GetParent(hWnd))
    {
        hWnd = hWndParent;
    }

    return hWnd;
}


/***************************************************************************
 *
 *  GetForegroundApplication
 *
 *  Description:
 *      Finds the window handle for the application that currently has
 *      focus.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HWND: Window handle of the app in focus.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetForegroundApplication"

HWND GetForegroundApplication(void)
{
    HWND                    hWnd;

    hWnd = GetForegroundWindow();

    if(hWnd)
    {
        hWnd = GetRootParentWindow(hWnd);
    }

    return hWnd;
}


/***************************************************************************
 *
 *  GetWindowState
 *
 *  Description:
 *      Retrieves the show state of the given window.
 *
 *  Arguments:
 *      HWND [in]: window in question.
 *
 *  Returns:
 *      UINT: show state of the window.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetWindowState"

UINT GetWindowState(HWND hWnd)
{
    UINT                    uState  = SW_NOSTATE;
    WINDOWPLACEMENT         wp;

    wp.length = sizeof(wp);

    if(IsWindow(hWnd) && GetWindowPlacement(hWnd, &wp))
    {
        uState = wp.showCmd;
    }

    return uState;
}


/***************************************************************************
 *
 *  FillPcmWfx
 *
 *  Description:
 *      Fills a WAVEFORMATEX structure, given only the necessary values.
 *
 *  Arguments:
 *      LPWAVEFORMATEX [out]: structure to fill.
 *      WORD [in]: number of channels.
 *      DWORD [in]: samples per second.
 *      WORD [in]: bits per sample.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "FillPcmWfx"

void FillPcmWfx(LPWAVEFORMATEX pwfx, WORD wChannels, DWORD dwSamplesPerSec, WORD wBitsPerSample)
{
    DPF_ENTER();

    pwfx->wFormatTag = WAVE_FORMAT_PCM;
    pwfx->nChannels = BETWEEN(wChannels, 1, 2);
    pwfx->nSamplesPerSec = BETWEEN(dwSamplesPerSec, DSBFREQUENCY_MIN, DSBFREQUENCY_MAX);

    if(wBitsPerSample < 12)
    {
        pwfx->wBitsPerSample = 8;
    }
    else
    {
        pwfx->wBitsPerSample = 16;
    }

    pwfx->nBlockAlign = pwfx->nChannels * pwfx->wBitsPerSample / 8;
    pwfx->nAvgBytesPerSec = pwfx->nSamplesPerSec * pwfx->nBlockAlign;
    pwfx->cbSize = 0;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  AllocPcmWfx
 *
 *  Description:
 *      Allocates and fills a WAVEFORMATEX structure, given only the
 *      necessary values.
 *
 *  Arguments:
 *      WORD [in]: number of channels.
 *      DWORD [in]: samples per second.
 *      WORD [in]: bits per sample.
 *
 *  Returns:
 *      LPWAVEFORMATEX: pointer to the format.  The caller is responsible
 *                      for freeing this buffer.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "AllocPcmWfx"

LPWAVEFORMATEX AllocPcmWfx(WORD wChannels, DWORD dwSamplesPerSec, WORD wBitsPerSample)
{
    LPWAVEFORMATEX          pwfx;

    DPF_ENTER();

    pwfx = MEMALLOC(WAVEFORMATEX);

    if(pwfx)
    {
        FillPcmWfx(pwfx, wChannels, dwSamplesPerSec, wBitsPerSample);
    }

    DPF_LEAVE(pwfx);

    return pwfx;
}


/***************************************************************************
 *
 *  GetWfxSize
 *
 *  Description:
 *      Gets the size of a WAVEFORMATEX structure.
 *
 *  Arguments:
 *      LPCWAVEFORMATEX [in]: source.
 *      DWORD [in]: access rights.
 *
 *  Returns:
 *      DWORD: size of the above structure.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetWfxSize"

DWORD GetWfxSize(LPCWAVEFORMATEX pwfxSrc, DWORD dwAccess)
{
    DWORD                   dwSize;

    DPF_ENTER();

    ASSERT(LXOR(GENERIC_READ == dwAccess, GENERIC_WRITE == dwAccess));

    if(WAVE_FORMAT_PCM == pwfxSrc->wFormatTag)
    {
        if(GENERIC_READ == dwAccess)
        {
            dwSize = sizeof(PCMWAVEFORMAT);
        }
        else
        {
            dwSize = sizeof(WAVEFORMATEX);
        }
    }
    else
    {
        dwSize = sizeof(WAVEFORMATEX) + pwfxSrc->cbSize;
    }

    DPF_LEAVE(dwSize);

    return dwSize;
}


/***************************************************************************
 *
 *  CopyWfx
 *
 *  Description:
 *      Makes a copy of a WAVEFORMATEX structure.
 *
 *  Arguments:
 *      LPCWAVEFORMATEX [in]: source.
 *      LPWAVEFORMATEX [out]: dest.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CopyWfx"

void CopyWfx(LPCWAVEFORMATEX pwfxSrc, LPWAVEFORMATEX pwfxDest)
{
    DWORD                   cbSrc;
    DWORD                   cbDest;

    DPF_ENTER();

    cbSrc = GetWfxSize(pwfxSrc, GENERIC_READ);
    cbDest = GetWfxSize(pwfxSrc, GENERIC_WRITE);

    CopyMemory(pwfxDest, pwfxSrc, cbSrc);
    ZeroMemoryOffset(pwfxDest, cbDest, cbSrc);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CopyWfxAlloc
 *
 *  Description:
 *      Makes a copy of a WAVEFORMATEX structure.
 *
 *  Arguments:
 *      LPCWAVEFORMATEX [in]: source.
 *
 *  Returns:
 *      LPWAVEFORMATEX: destination.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CopyWfxAlloc"

LPWAVEFORMATEX CopyWfxAlloc(LPCWAVEFORMATEX pwfxSrc)
{
    LPWAVEFORMATEX          pwfxDest;
    DWORD                   cbSrc;
    DWORD                   cbDest;

    DPF_ENTER();

    cbSrc = GetWfxSize(pwfxSrc, GENERIC_READ);
    cbDest = GetWfxSize(pwfxSrc, GENERIC_WRITE);

    pwfxDest = (LPWAVEFORMATEX)MEMALLOC_A(BYTE, cbDest);

    if(pwfxDest)
    {
        CopyMemory(pwfxDest, pwfxSrc, cbSrc);
        ZeroMemoryOffset(pwfxDest, cbDest, cbSrc);
    }

    DPF_LEAVE(pwfxDest);

    return pwfxDest;
}


/***************************************************************************
 *
 *  CopyDSCFXDescAlloc
 *
 *  Description:
 *      Makes a copy of a WAVEFORMATEX structure.
 *
 *  Arguments:
 *      LPCWAVEFORMATEX [in]: source.
 *
 *  Returns:
 *      LPWAVEFORMATEX: destination.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CopyDSCFXDescAlloc"

LPDSCEFFECTDESC CopyDSCFXDescAlloc
(
    DWORD           dwFXCount,
    LPDSCEFFECTDESC pDSCFXDesc
)
{
    LPDSCEFFECTDESC         lpDSCFXDesc;

    DPF_ENTER();

    lpDSCFXDesc = (LPDSCEFFECTDESC)MEMALLOC_A(BYTE, dwFXCount*sizeof(DSCEFFECTDESC));

    if(lpDSCFXDesc)
    {
        CopyMemory(lpDSCFXDesc, pDSCFXDesc, dwFXCount*sizeof(DSCEFFECTDESC));
    }

    DPF_LEAVE(lpDSCFXDesc);

    return lpDSCFXDesc;
}


/***************************************************************************
 *
 *  CopyWfxApi
 *
 *  Description:
 *      Copies one WAVEFORMATEX to another.
 *
 *  Arguments:
 *      LPWAVEFORMATEX [in]: source format.
 *      LPWAVEFORMATEX [out]: destination format.
 *      LPDWORD [in/out]: destination format size.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CopyWfxApi"

HRESULT CopyWfxApi(LPCWAVEFORMATEX pwfxSource, LPWAVEFORMATEX pwfxDest, LPDWORD pdwSize)
{
    const DWORD             dwEntrySize = *pdwSize;
    HRESULT                 hr          = DS_OK;

    DPF_ENTER();

    *pdwSize = GetWfxSize(pwfxSource, GENERIC_WRITE);

    if(*pdwSize > dwEntrySize && pwfxDest)
    {
        RPF(DPFLVL_ERROR, "Buffer too small");
        hr = DSERR_INVALIDPARAM;
    }

    if(SUCCEEDED(hr) && pwfxDest)
    {
        CopyWfx(pwfxSource, pwfxDest);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CmpWfx
 *
 *  Description:
 *      Compares two WAVEFORMATEX structures.
 *
 *  Arguments:
 *      LPCWAVEFORMATEX [in]: format 1.
 *      LPCWAVEFORMATEX [in]: format 2.
 *
 *  Returns:
 *      BOOL: TRUE if they are identical.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CmpWfx"

BOOL CmpWfx(LPCWAVEFORMATEX pwfx1, LPCWAVEFORMATEX pwfx2)
{
    BOOL                    fCmp    = TRUE;
    DWORD                   dwSize1;
    DWORD                   dwSize2;

    DPF_ENTER();

    dwSize1 = GetWfxSize(pwfx1, GENERIC_READ);
    dwSize2 = GetWfxSize(pwfx2, GENERIC_READ);

    if(dwSize1 != dwSize2)
    {
        fCmp = FALSE;
    }

    if(fCmp)
    {
        fCmp = CompareMemory(pwfx1, pwfx2, dwSize1);
    }

    DPF_LEAVE(fCmp);

    return fCmp;
}


/***************************************************************************
 *
 *  VolumePanToAttenuation
 *
 *  Description:
 *      Calculates channel attenuation based on volume and pan.
 *
 *  Arguments:
 *      LONG [in]: volume.
 *      LONG [in]: pan.
 *      LPLONG [out]: receives left attenuation.
 *      LPLONG [out]: receives right attenuation.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "VolumePanToAttenuation"

void VolumePanToAttenuation(LONG lVolume, LONG lPan, LPLONG plLeft, LPLONG plRight)
{
    LONG                    lLeft;
    LONG                    lRight;

    DPF_ENTER();

    if(lPan >= 0)
    {
        lLeft = lVolume - lPan;
        lRight = lVolume;
    }
    else
    {
        lLeft = lVolume;
        lRight = lVolume + lPan;
    }

    if(plLeft)
    {
        *plLeft = lLeft;
    }

    if(plRight)
    {
        *plRight = lRight;
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  AttenuationToVolumePan
 *
 *  Description:
 *      Calculates volume and pan based on channel attenuation.
 *
 *  Arguments:
 *      LONG [in]: left attenuation.
 *      LONG [in]: right attenuation.
 *      LPLONG [out]: receives volume.
 *      LPLONG [out]: receives pan.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "AttenuationToVolumePan"

void AttenuationToVolumePan(LONG lLeft, LONG lRight, LPLONG plVolume, LPLONG plPan)
{
    LONG                    lVolume;
    LONG                    lPan;

    DPF_ENTER();

    if(lLeft >= lRight)
    {
        lVolume = lLeft;
        lPan = lRight - lVolume;
    }
    else
    {
        lVolume = lRight;
        lPan = lVolume - lLeft;
    }

    if(plVolume)
    {
        *plVolume = lVolume;
    }

    if(plPan)
    {
        *plPan = lPan;
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  MultiChannelToStereoPan
 *
 *  Description:
 *      Calculates volume and pan based on channel attenuation.
 *
 *  Arguments:
 *      DWORD [in]: number of channels in following two arrays.
 *      const DWORD* [in]: speaker position codes for each channel.
 *      const LONG* [in]: DSBVOLUME levels for each channel.
 *
 *  Returns:
 *      LONG: pan value calculated.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "MultiChannelToStereoPan"

LONG MultiChannelToStereoPan(DWORD dwChannelCount, const DWORD* pdwChannels, const LONG* plChannelVolumes)
{
    LONG lPan = 0;
    DWORD i;

    DPF_ENTER();
    ASSERT(dwChannelCount && pdwChannels && plChannelVolumes);

    for (i=0; i<dwChannelCount; ++i)
    {
        switch (pdwChannels[i])
        {
            case SPEAKER_FRONT_LEFT:
            case SPEAKER_BACK_LEFT:
            case SPEAKER_FRONT_LEFT_OF_CENTER:
            case SPEAKER_SIDE_LEFT:
            case SPEAKER_TOP_FRONT_LEFT:
            case SPEAKER_TOP_BACK_LEFT:
                --lPan;
                break;

            case SPEAKER_FRONT_RIGHT:
            case SPEAKER_BACK_RIGHT:
            case SPEAKER_FRONT_RIGHT_OF_CENTER:
            case SPEAKER_SIDE_RIGHT:
            case SPEAKER_TOP_FRONT_RIGHT:
            case SPEAKER_TOP_BACK_RIGHT:
                ++lPan;
                break;
        }
    }

    lPan = (lPan * DSBPAN_RIGHT) / dwChannelCount;
    ASSERT(DSBPAN_LEFT <= lPan && lPan <= DSBPAN_RIGHT);
    // FIXME - this hack isn't acoustically correct

    DPF_LEAVE(lPan);
    return lPan;
}


/***************************************************************************
 *
 *  FillDsVolumePan
 *
 *  Description:
 *      Fills a DSVOLUMEPAN structure based on volume and pan dB values.
 *
 *  Arguments:
 *      LONG [in]: volume.
 *      LONG [in]: pan.
 *      PDSVOLUMEPAN [out]: receives calculated volume and pan.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "FillDsVolumePan"

void FillDsVolumePan(LONG lVolume, LONG lPan, PDSVOLUMEPAN pdsvp)
{
    LONG                    lLeft;
    LONG                    lRight;

    DPF_ENTER();

    lVolume = BETWEEN(lVolume, DSBVOLUME_MIN, DSBVOLUME_MAX);
    lPan = BETWEEN(lPan, DSBPAN_LEFT, DSBPAN_RIGHT);

    VolumePanToAttenuation(lVolume, lPan, &lLeft, &lRight);

    pdsvp->lVolume = lVolume;
    pdsvp->lPan = lPan;

    pdsvp->dwTotalLeftAmpFactor = DBToAmpFactor(lLeft);
    pdsvp->dwTotalRightAmpFactor = DBToAmpFactor(lRight);

    pdsvp->dwVolAmpFactor = DBToAmpFactor(pdsvp->lVolume);

    if(pdsvp->lPan >= 0)
    {
        pdsvp->dwPanLeftAmpFactor = DBToAmpFactor(-pdsvp->lPan);
        pdsvp->dwPanRightAmpFactor = DBToAmpFactor(0);
    }
    else
    {
        pdsvp->dwPanLeftAmpFactor = DBToAmpFactor(0);
        pdsvp->dwPanRightAmpFactor = DBToAmpFactor(pdsvp->lPan);
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CountBits
 *
 *  Description:
 *      Counts the numbers of bits set to 1 in a DWORD.
 *
 *  Arguments:
 *      DWORD [in]: a DWORD.
 *
 *  Returns:
 *      int: number of bits set in the DWORD.
 *
 ***************************************************************************/

int CountBits(DWORD dword)
{
    int bitCount = 0;

    if (dword)
        do ++bitCount;
        while (dword &= (dword-1));

    return bitCount;
}


/***************************************************************************
 *
 *  HighestBit
 *
 *  Description:
 *      Finds the highest set bit in a DWORD.
 *
 *  Arguments:
 *      DWORD [in]: a DWORD.
 *
 *  Returns:
 *      int: highest bit set in the DWORD.
 *
 ***************************************************************************/

int HighestBit(DWORD dword)
{
    int highestBit = 0;

    if (dword)
        do ++highestBit;
        while (dword >>= 1);

    return highestBit;
}


/***************************************************************************
 *
 *  GetAlignedBufferSize
 *
 *  Description:
 *      Returns a properly aligned buffer size.
 *
 *  Arguments:
 *      LPCWAVEFORMATEX [in]: format of the buffer.
 *      DWORD [in]: buffer size.
 *
 *  Returns:
 *      DWORD: buffer size.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetAlignedBufferSize"

DWORD GetAlignedBufferSize(LPCWAVEFORMATEX pwfx, DWORD dwSize)
{
    DWORD dwAlignError=0;

    DPF_ENTER();

    if (pwfx->nBlockAlign != 0) // Otherwise we get a divide-by-0 below
    {
        dwAlignError = dwSize % pwfx->nBlockAlign;
    }

    if(dwAlignError)
    {
        RPF(DPFLVL_WARNING, "Buffer size misaligned by %lu bytes", dwAlignError);
        dwSize += pwfx->nBlockAlign - dwAlignError;
    }

    DPF_LEAVE(dwSize);

    return dwSize;
}


/***************************************************************************
 *
 *  FillSilence
 *
 *  Description:
 *      Fills a buffer with silence.
 *
 *  Arguments:
 *      LPVOID [in]: pointer to the buffer.
 *      DWORD [in]: sizer of above buffer.
 *      WORD [in]: bits per sample - determines the silence level
 *                 (0x80 for 8-bit data, 0x0 for 16-bit data)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "FillSilence"

void FillSilence(LPVOID pvBuffer, DWORD cbBuffer, WORD wBitsPerSample)
{
    DPF_ENTER();

    FillMemory(pvBuffer, cbBuffer, (BYTE)((8 == wBitsPerSample) ? 0x80 : 0));

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  FillNoise
 *
 *  Description:
 *      Fills a buffer with white noise.
 *
 *  Arguments:
 *      LPVOID [in]: pointer to the buffer.
 *      DWORD [in]: size of above buffer.
 *      WORD [in]: bits per sample - determines the silence level
 *                 (0x80 for 8-bit data, 0x0 for 16-bit data)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "FillNoise"

void FillNoise(LPVOID pvBuffer, DWORD dwSize, WORD wBitsPerSample)
{
    LPBYTE                  pb      = (LPBYTE)pvBuffer;
    DWORD                   dwRand  = 0;

    DPF_ENTER();

    while(dwSize--)
    {
        dwRand *= 214013;
        dwRand += 2531011;

        *pb = (BYTE)((dwRand >> 24) & 0x0000003F);
        if (wBitsPerSample == 8)
            *pb = *pb + 0x60;  // So we end up with a range of 0x60 to 0x9F
        else
            *pb = *pb - 0x20;  // Range of -0x2020 to 0x1F1F
        ++pb;
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  InterruptSystemEventCallback
 *
 *  Description:
 *      Stops any currently playing system event.
 *
 *  Arguments:
 *      LPCWAVEFORMATEX [in]: device format.
 *      LPVOID [in]: context argument.
 *
 *  Returns:
 *      BOOL: TRUE to continue enumerating.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "InterruptSystemEventCallback"

BOOL CALLBACK InterruptSystemEventCallback(LPCWAVEFORMATEX pwfx, LPVOID pvContext)
{
    HWAVEOUT                hwo;
    HRESULT                 hr;

    DPF_ENTER();

    // The easiest (best? only?) way to cancel a system event is to open
    // waveOut.  So, we'll just open it and close it.  Let's use a really
    // simple format that every card should support...
    hr = OpenWaveOut(&hwo, *(LPUINT)pvContext, pwfx);

    if(SUCCEEDED(hr))
        CloseWaveOut(&hwo);

    DPF_LEAVE(FAILED(hr));
    return FAILED(hr);
}


/***************************************************************************
 *
 *  InterruptSystemEvent
 *
 *  Description:
 *      Stops any currently playing system event.
 *
 *  Arguments:
 *      UINT [in]: waveOut device id, or WAVE_DEVICEID_NONE.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "InterruptSystemEvent"

void InterruptSystemEvent(UINT uDeviceId)
{
    DPF_ENTER();

    // The easiest (best? only?) way to cancel a system event is to open
    // waveOut.  So, we'll just open it and close it.
    EnumStandardFormats(NULL, NULL, InterruptSystemEventCallback, &uDeviceId);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  EnumStandardFormats
 *
 *  Description:
 *      Finds the next closest useable format for the given output device.
 *
 *  Arguments:
 *      LPWAVEFORMATEX [in]: preferred format.
 *      LPWAVEFORMATEX [out]: receives next best format.
 *      LPFNEMUMSTDFMTCALLBACK [in]: callback function.
 *      LPVOID [in]: context argument passed directly to callback function.
 *
 *  Returns:
 *      BOOL: TRUE if the callback function returned FALSE, indicating a
 *            format was selected.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "EnumStandardFormats"

BOOL EnumStandardFormats(LPCWAVEFORMATEX pwfxPreferred, LPWAVEFORMATEX pwfxFormat, LPFNEMUMSTDFMTCALLBACK pfnCallback, LPVOID pvContext)
{
    const WORD              aChannels[]         = { 1, 2 };
    const DWORD             aSamplesPerSec[]    = { 8000, 11025, 22050, 44100, 48000 };
    const WORD              aBitsPerSample[]    = { 8, 16 };
    BOOL                    fContinue           = TRUE;
    BOOL                    fExactMatch         = FALSE;
    UINT                    iChannels           = 0;
    UINT                    iSamplesPerSec      = 0;
    UINT                    iBitsPerSample      = 0;
    BOOL                    fPcmFormat          = TRUE;
    UINT                    cChannels;
    UINT                    cSamplesPerSec;
    UINT                    cBitsPerSample;
    WAVEFORMATEX            wfx;

    DPF_ENTER();

    // Try the preferred format first
    if(pwfxPreferred)
    {
        fPcmFormat = IsValidPcmWfx(pwfxPreferred);

        DPF(DPFLVL_INFO, "Trying %u channels, %lu Hz, %u-bit (preferred)...", pwfxPreferred->nChannels, pwfxPreferred->nSamplesPerSec, pwfxPreferred->wBitsPerSample);
        fContinue = pfnCallback(pwfxPreferred, pvContext);
    }

    // Did the preferred format work?
    if(fContinue && pwfxPreferred && fPcmFormat)
    {
        // Find the preferred format in our list of standard formats
        for(iChannels = 0; iChannels < NUMELMS(aChannels) - 1; iChannels++)
        {
            if(pwfxPreferred->nChannels >= aChannels[iChannels] && pwfxPreferred->nChannels < aChannels[iChannels + 1])
            {
                break;
            }
        }

        for(iSamplesPerSec = 0; iSamplesPerSec < NUMELMS(aSamplesPerSec) - 1; iSamplesPerSec++)
        {
            if(pwfxPreferred->nSamplesPerSec >= aSamplesPerSec[iSamplesPerSec] && pwfxPreferred->nSamplesPerSec < aSamplesPerSec[iSamplesPerSec + 1])
            {
                break;
            }
        }

        for(iBitsPerSample = 0; iBitsPerSample < NUMELMS(aBitsPerSample) - 1; iBitsPerSample++)
        {
            if(pwfxPreferred->wBitsPerSample >= aBitsPerSample[iBitsPerSample] && pwfxPreferred->wBitsPerSample < aBitsPerSample[iBitsPerSample + 1])
            {
                break;
            }
        }

        // Does the preferred format match a standard format exactly?
        if(pwfxPreferred->nChannels == aChannels[iChannels])
        {
            if(pwfxPreferred->nSamplesPerSec == aSamplesPerSec[iSamplesPerSec])
            {
                if(pwfxPreferred->wBitsPerSample == aBitsPerSample[iBitsPerSample])
                {
                    fExactMatch = TRUE;
                }
            }
        }
    }

    // Loop through each standard format looking for one that works
    if(fContinue && fPcmFormat)
    {
        pwfxPreferred = &wfx;

        for(cChannels = NUMELMS(aChannels); fContinue && cChannels; cChannels--, INC_WRAP(iChannels, NUMELMS(aChannels)))
        {
            for(cSamplesPerSec = NUMELMS(aSamplesPerSec); fContinue && cSamplesPerSec; cSamplesPerSec--, INC_WRAP(iSamplesPerSec, NUMELMS(aSamplesPerSec)))
            {
                for(cBitsPerSample = NUMELMS(aBitsPerSample); fContinue && cBitsPerSample; cBitsPerSample--, INC_WRAP(iBitsPerSample, NUMELMS(aBitsPerSample)))
                {
                    // Let's not try the preferred format twice
                    if(fExactMatch)
                    {
                        fExactMatch = FALSE;
                        continue;
                    }

                    FillPcmWfx(&wfx, aChannels[iChannels], aSamplesPerSec[iSamplesPerSec], aBitsPerSample[iBitsPerSample]);

                    DPF(DPFLVL_INFO, "Trying %u channels, %lu Hz, %u-bit (standard)...", wfx.nChannels, wfx.nSamplesPerSec, wfx.wBitsPerSample);
                    fContinue = pfnCallback(&wfx, pvContext);
                }
            }
        }
    }

    if(!fContinue)
    {
        DPF(DPFLVL_INFO, "Whaddaya know?  It worked!");

        if(pwfxFormat)
        {
            CopyWfx(pwfxPreferred, pwfxFormat);
        }
    }

    DPF_LEAVE(!fContinue);

    return !fContinue;
}


/***************************************************************************
 *
 *  GetWaveOutVolume
 *
 *  Description:
 *      Gets attenuation for a waveOut device
 *
 *  Arguments:
 *      UINT [in]: device id.
 *      DWORD [in]: WAVEOUTCAPS support flags.
 *      LPLONG [out]: receives left-channel attenuation.
 *      LPLONG [out]: receives right-channel attenuation.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetWaveOutVolume"

HRESULT GetWaveOutVolume(UINT uDeviceId, DWORD dwSupport, LPLONG plLeft, LPLONG plRight)
{
    DWORD                   dwVolume    = MAX_DWORD;
    HRESULT                 hr          = DS_OK;
    MMRESULT                mmr;

    DPF_ENTER();

    if(WAVE_DEVICEID_NONE != uDeviceId && dwSupport & WAVECAPS_VOLUME)
    {
        mmr = waveOutGetVolume((HWAVEOUT)IntToPtr(uDeviceId), &dwVolume);
        hr = MMRESULTtoHRESULT(mmr);

        if(SUCCEEDED(hr) && !(dwSupport & WAVECAPS_LRVOLUME))
        {
            dwVolume = MAKELONG(LOWORD(dwVolume), LOWORD(dwVolume));
        }
    }

    if(SUCCEEDED(hr) && plLeft)
    {
        *plLeft = AmpFactorToDB(LOWORD(dwVolume));
    }

    if(SUCCEEDED(hr) && plRight)
    {
        *plRight = AmpFactorToDB(HIWORD(dwVolume));
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetWaveOutVolume
 *
 *  Description:
 *      Sets attenuation on a waveOut device
 *
 *  Arguments:
 *      UINT [in]: device id.
 *      DWORD [in]: WAVEOUTCAPS support flags.
 *      LONG [in]: left-channel attenuation.
 *      LONG [in]: right-channel attenuation.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "SetWaveOutVolume"

HRESULT SetWaveOutVolume(UINT uDeviceId, DWORD dwSupport, LONG lLeft, LONG lRight)
{
    HRESULT                 hr  = DS_OK;
    MMRESULT                mmr;

    DPF_ENTER();

    if(WAVE_DEVICEID_NONE != uDeviceId && dwSupport & WAVECAPS_VOLUME)
    {
        if(!(dwSupport & WAVECAPS_LRVOLUME))
        {
            lLeft += lRight;
            lLeft /= 2;
            lRight = lLeft;
        }

        mmr = waveOutSetVolume((HWAVEOUT)IntToPtr(uDeviceId), MAKELONG(DBToAmpFactor(lLeft), DBToAmpFactor(lRight)));
        hr = MMRESULTtoHRESULT(mmr);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  HRESULTtoSTRING
 *
 *  Description:
 *      Translates a DirectSound error code to a string value.
 *
 *  Arguments:
 *      HRESULT [in]: result code.
 *
 *  Returns:
 *      LPCSTR: string representation.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "HRESULTtoSTRING"

LPCTSTR HRESULTtoSTRING(HRESULT hr)
{
    static TCHAR            szResult[0x100];

    HresultToString(hr, szResult, NUMELMS(szResult), NULL, 0);

    return szResult;
}


/***************************************************************************
 *
 *  HresultToString
 *
 *  Description:
 *      Translates a DirectSound error code to a string value.
 *
 *  Arguments:
 *      HRESULT [in]: result code.
 *      LPCSTR [out]: string form of result code buffer.
 *      UINT [in]: size of above buffer, in characters.
 *      LPCSTR [out]: result code explanation.
 *      UINT [in]: size of above buffer, in characters.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "HresultToString"

void HresultToString(HRESULT hr, LPTSTR pszString, UINT ccString, LPTSTR pszExplanation, UINT ccExplanation)
{
    if(SUCCEEDED(hr) && S_OK != hr && S_FALSE != hr && DS_NO_VIRTUALIZATION != hr && DS_INCOMPLETE != hr)
    {
        DPF(DPFLVL_WARNING, "Unknown successful return code 0x%8.8lX", hr);
    }

#define CASE_HRESULT_LOOKUP(a) \
            case a: \
                if(pszString && ccString) lstrcpyn(pszString, TEXT(#a), ccString); \
                if(pszExplanation && ccExplanation) lstrcpyn(pszExplanation, a##_EXPLANATION, ccExplanation); \
                break;

    switch(hr)
    {
        CASE_HRESULT_LOOKUP(DS_OK);
        CASE_HRESULT_LOOKUP(S_FALSE);
        CASE_HRESULT_LOOKUP(DS_NO_VIRTUALIZATION);
        CASE_HRESULT_LOOKUP(DS_INCOMPLETE);
        CASE_HRESULT_LOOKUP(DSERR_ALLOCATED);
        CASE_HRESULT_LOOKUP(DSERR_CANTLOCKPLAYCURSOR);
        CASE_HRESULT_LOOKUP(DSERR_CONTROLUNAVAIL);
        CASE_HRESULT_LOOKUP(DSERR_INVALIDPARAM);
        CASE_HRESULT_LOOKUP(DSERR_INVALIDCALL);
        CASE_HRESULT_LOOKUP(DSERR_GENERIC);
        CASE_HRESULT_LOOKUP(DSERR_PRIOLEVELNEEDED);
        CASE_HRESULT_LOOKUP(DSERR_OUTOFMEMORY);
        CASE_HRESULT_LOOKUP(DSERR_BADFORMAT);
        CASE_HRESULT_LOOKUP(DSERR_UNSUPPORTED);
        CASE_HRESULT_LOOKUP(DSERR_NODRIVER);
        CASE_HRESULT_LOOKUP(DSERR_ALREADYINITIALIZED);
        CASE_HRESULT_LOOKUP(DSERR_NOAGGREGATION);
        CASE_HRESULT_LOOKUP(DSERR_BUFFERLOST);
        CASE_HRESULT_LOOKUP(DSERR_OTHERAPPHASPRIO);
        CASE_HRESULT_LOOKUP(DSERR_UNINITIALIZED);
        CASE_HRESULT_LOOKUP(DSERR_NOINTERFACE);
        CASE_HRESULT_LOOKUP(DSERR_ACCESSDENIED);
        CASE_HRESULT_LOOKUP(DSERR_DS8_REQUIRED);
        CASE_HRESULT_LOOKUP(DSERR_SENDLOOP);
        CASE_HRESULT_LOOKUP(DSERR_BADSENDBUFFERGUID);
        CASE_HRESULT_LOOKUP(DSERR_OBJECTNOTFOUND);

        // Some external codes that can be returned by the dsound API
        CASE_HRESULT_LOOKUP(REGDB_E_CLASSNOTREG);
        CASE_HRESULT_LOOKUP(DMO_E_TYPE_NOT_ACCEPTED);

        default:
            if(pszString && ccString >= 11) wsprintf(pszString, TEXT("0x%8.8lX"), hr);
            if(pszExplanation && ccExplanation) lstrcpyn(pszExplanation, TEXT("Unknown error"), ccExplanation);
            break;
    }

#undef CASE_HRESULT_LOOKUP
}


/***************************************************************************
 *
 *  IsWaveDeviceMappable
 *
 *  Description:
 *      Determines if a waveOut device is mappable or not.
 *
 *  Arguments:
 *      UINT [in]: waveOut device id.
 *      BOOL [in]: TRUE if capture.
 *
 *  Returns:
 *      BOOL: TRUE if the device is mappable.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "IsWaveDeviceMappable"

BOOL IsWaveDeviceMappable(UINT uDeviceId, BOOL fCapture)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = WaveMessage(uDeviceId, fCapture, DRV_QUERYMAPPABLE, 0, 0);

    DPF_LEAVE(SUCCEEDED(hr));

    return SUCCEEDED(hr);
}


/***************************************************************************
 *
 *  GetNextMappableWaveDevice
 *
 *  Description:
 *      Gets the next valid, mappable waveIn/Out device.
 *
 *  Arguments:
 *      UINT [in]: starting device id, or WAVE_DEVICEID_NONE.
 *      BOOL [in]: TRUE if capture.
 *
 *  Returns:
 *      UINT: next device id, or WAVE_DEVICEID_NONE
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetNextMappableWaveDevice"

UINT GetNextMappableWaveDevice(UINT uDeviceId, BOOL fCapture)
{
    const UINT                    cDevices  = WaveGetNumDevs(fCapture);

    DPF_ENTER();

    if(WAVE_DEVICEID_NONE == uDeviceId)
    {
        uDeviceId = 0;
    }
    else
    {
        uDeviceId++;
    }

    while(uDeviceId < cDevices)
    {
        if(IsValidWaveDevice(uDeviceId, fCapture, NULL))
        {
            if(IsWaveDeviceMappable(uDeviceId, fCapture))
            {
                break;
            }
        }

        uDeviceId++;
    }

    if(uDeviceId >= cDevices)
    {
        uDeviceId = WAVE_DEVICEID_NONE;
    }

    DPF_LEAVE(uDeviceId);

    return uDeviceId;
}


/***************************************************************************
 *
 *  GetFixedFileInformation
 *
 *  Description:
 *      Gets fixed file information for a specified file.
 *
 *  Arguments:
 *      LPCSTR [in]: file path.
 *      VS_FIXEDFILEINFO * [out]: receives fixed file information.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetFixedFileInformationA"

HRESULT GetFixedFileInformationA(LPCSTR pszFile, VS_FIXEDFILEINFO *pInfo)
{
    LPVOID                  pvFileVersionInfo   = NULL;
    HRESULT                 hr                  = DS_OK;
    DWORD                   cbFileVersionInfo;
    LPVOID                  pvFixedFileInfo;
    UINT                    cbFixedFileInfo;
    BOOL                    f;

    DPF_ENTER();

    // Get the file's version information size
    cbFileVersionInfo = GetFileVersionInfoSizeA((LPSTR)pszFile, NULL);

    if(!cbFileVersionInfo)
    {
        hr = GetLastErrorToHRESULT();
        DPF(DPFLVL_ERROR, "GetFileVersionInfoSize failed with %s (%lu)", HRESULTtoSTRING(hr), GetLastError());
    }

    // Allocate the version information
    if(SUCCEEDED(hr))
    {
        pvFileVersionInfo = MEMALLOC_A(BYTE, cbFileVersionInfo);
        hr = HRFROMP(pvFileVersionInfo);
    }

    // Get the version information
    if(SUCCEEDED(hr))
    {
        f = GetFileVersionInfoA((LPSTR)pszFile, 0, cbFileVersionInfo, pvFileVersionInfo);

        if(!f)
        {
            hr = GetLastErrorToHRESULT();
            DPF(DPFLVL_ERROR, "GetFileVersionInfo failed with %s (%lu)", HRESULTtoSTRING(hr), GetLastError());
        }
    }

    // Get the fixed file information
    if(SUCCEEDED(hr))
    {
        f = VerQueryValueA(pvFileVersionInfo, "\\", &pvFixedFileInfo, &cbFixedFileInfo);

        if(!f)
        {
            hr = GetLastErrorToHRESULT();
            DPF(DPFLVL_ERROR, "VerQueryValue failed with %s (%lu)", HRESULTtoSTRING(hr), GetLastError());
        }
    }

    if(SUCCEEDED(hr))
    {
        ASSERT(sizeof(*pInfo) <= cbFixedFileInfo);
        CopyMemory(pInfo, pvFixedFileInfo, sizeof(*pInfo));
    }

    // Clean up
    MEMFREE(pvFileVersionInfo);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


#undef DPF_FNAME
#define DPF_FNAME "GetFixedFileInformationW"

HRESULT GetFixedFileInformationW(LPCWSTR pszFile, VS_FIXEDFILEINFO *pInfo)
{
    HRESULT                 hr                  = DS_OK;
#ifdef UNICODE
    LPVOID                  pvFileVersionInfo   = NULL;
    DWORD                   cbFileVersionInfo;
    LPVOID                  pvFixedFileInfo;
    UINT                    cbFixedFileInfo;
    BOOL                    f;
#else // UNICODE
    LPSTR                   pszFileA;
#endif // UNICODE

    DPF_ENTER();

#ifdef UNICODE

    // Get the file's version information size
    cbFileVersionInfo = GetFileVersionInfoSizeW((LPWSTR)pszFile, NULL);

    if(!cbFileVersionInfo)
    {
        hr = GetLastErrorToHRESULT();
        DPF(DPFLVL_ERROR, "GetFileVersionInfoSize failed with %s (%lu)", HRESULTtoSTRING(hr), GetLastError());
    }

    // Allocate the version information
    if(SUCCEEDED(hr))
    {
        pvFileVersionInfo = MEMALLOC_A(BYTE, cbFileVersionInfo);
        hr = HRFROMP(pvFileVersionInfo);
    }

    // Get the version information
    if(SUCCEEDED(hr))
    {
        f = GetFileVersionInfoW((LPWSTR)pszFile, 0, cbFileVersionInfo, pvFileVersionInfo);

        if(!f)
        {
            hr = GetLastErrorToHRESULT();
            DPF(DPFLVL_ERROR, "GetFileVersionInfo failed with %s (%lu)", HRESULTtoSTRING(hr), GetLastError());
        }
    }

    // Get the fixed file information
    if(SUCCEEDED(hr))
    {
        f = VerQueryValueW(pvFileVersionInfo, L"\\", &pvFixedFileInfo, &cbFixedFileInfo);

        if(!f)
        {
            hr = GetLastErrorToHRESULT();
            DPF(DPFLVL_ERROR, "VerQueryValue failed with %s (%lu)", HRESULTtoSTRING(hr), GetLastError());
        }
    }

    if(SUCCEEDED(hr))
    {
        ASSERT(sizeof(*pInfo) <= cbFixedFileInfo);
        CopyMemory(pInfo, pvFixedFileInfo, sizeof(*pInfo));
    }

    // Clean up
    MEMFREE(pvFileVersionInfo);

#else // UNICODE

    pszFileA = UnicodeToAnsiAlloc(pszFile);
    hr = HRFROMP(pszFileA);

    if(SUCCEEDED(hr))
    {
        hr = GetFixedFileInformationA(pszFileA, pInfo);
    }

    MEMFREE(pszFileA);

#endif // UNICODE

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  PadCursor
 *
 *  Description:
 *      Pads a play or write cursor.
 *
 *  Arguments:
 *      DWORD [in]: cursor position.
 *      DWORD [in]: buffer size.
 *      LPCWAVEFORMATEX [in]: buffer format.
 *      LONG [in]: pad value in milliseconds.
 *
 *  Returns:
 *      DWORD: new cursor position.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "PadCursor"

DWORD PadCursor(DWORD dwPosition, DWORD cbBuffer, LPCWAVEFORMATEX pwfx, LONG lPad)
{
    DPF_ENTER();

    dwPosition += ((pwfx->nSamplesPerSec * lPad + 500) / 1000) * pwfx->nBlockAlign;
    dwPosition %= cbBuffer;

    DPF_LEAVE(dwPosition);
    return dwPosition;
}


/***************************************************************************
 *
 *  CopyDsBufferDesc
 *
 *  Description:
 *      Copies a DSBUFFERDESC structure.
 *
 *  Arguments:
 *      LPDSBUFFERDESC [in]: source.
 *      LPDSBUFFERDESC [out]: destination.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CopyDsBufferDesc"

HRESULT CopyDsBufferDesc(LPCDSBUFFERDESC pSource, LPDSBUFFERDESC pDest)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    CopyMemory(pDest, pSource, sizeof(*pSource));

    if(pSource->lpwfxFormat)
    {
        pDest->lpwfxFormat = CopyWfxAlloc(pSource->lpwfxFormat);
        hr = HRFROMP(pDest->lpwfxFormat);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  WaveMessage
 *
 *  Description:
 *      Sends a message to a wave device.
 *
 *  Arguments:
 *      UINT [in]: waveOut device.
 *      BOOL [in]: TRUE if capture.
 *      UINT [in]: message identifier.
 *      DWORD [in]: parameter 1.
 *      DWORD [in]: parameter 2.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "WaveMessage"

HRESULT WaveMessage(UINT uDeviceId, BOOL fCapture, UINT uMessage, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
{
    typedef MMRESULT (WINAPI *LPFNWAVEOUTMESSAGE)(HWAVEOUT, UINT, DWORD_PTR, DWORD_PTR);

    LPFNWAVEOUTMESSAGE      pfn;
    MMRESULT                mmr;
    HRESULT                 hr;

    DPF_ENTER();

    if(fCapture)
    {
        pfn = (LPFNWAVEOUTMESSAGE)waveInMessage;
    }
    else
    {
        pfn = waveOutMessage;
    }

    mmr = pfn((HWAVEOUT)IntToPtr(uDeviceId), uMessage, dwParam1, dwParam2);

    // In Win9x, MMSYSERR_INVALPARAM here means no device.
    if (mmr == MMSYSERR_INVALPARAM)
    {
        hr = DSERR_NODRIVER;
    }
    else
    {
        hr = MMRESULTtoHRESULT(mmr);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  WaveGetNumDevs
 *
 *  Description:
 *      Gets the number of wave devices in the system.
 *
 *  Arguments:
 *      BOOL [in]: TRUE if capture.
 *
 *  Returns:
 *      UINT: number of wave devices.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "WaveGetNumDevs"

UINT WaveGetNumDevs(BOOL fCapture)
{
    UINT                    cDevs;

    DPF_ENTER();

    if(fCapture)
    {
        cDevs = waveInGetNumDevs();
    }
    else
    {
        cDevs = waveOutGetNumDevs();
    }

    DPF_LEAVE(cDevs);
    return cDevs;
}


/***************************************************************************
 *
 *  GetWaveDeviceInterface
 *
 *  Description:
 *      Gets the interface for a given waveOut device id.
 *
 *  Arguments:
 *      UINT [in]: waveOut device id.
 *      BOOL [in]: TRUE if capture.
 *      LPTSTR * [out]: receives interface string.  The caller is
 *                      responsible for freeing this memory.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetWaveDeviceInterface"

HRESULT GetWaveDeviceInterface(UINT uDeviceId, BOOL fCapture, LPTSTR *ppszInterface)
{
    LPWSTR                      pszInterfaceW   = NULL;
    LPTSTR                      pszInterface    = NULL;
    ULONG                       cbInterface;
    HRESULT                     hr;

    DPF_ENTER();

    // Note: There is no mechanism for getting the interface for a legacy
    // driver on NT; only WDM drivers.
    hr = WaveMessage(uDeviceId, fCapture, DRV_QUERYDEVICEINTERFACESIZE, (DWORD_PTR)&cbInterface, 0);

    if(SUCCEEDED(hr))
    {
        pszInterfaceW = (LPWSTR)MEMALLOC_A(BYTE, cbInterface);
        hr = HRFROMP(pszInterfaceW);
    }

    if(SUCCEEDED(hr))
    {
        hr = WaveMessage(uDeviceId, fCapture, DRV_QUERYDEVICEINTERFACE, (DWORD_PTR)pszInterfaceW, cbInterface);
    }

    if(SUCCEEDED(hr))
    {
        pszInterface = UnicodeToTcharAlloc(pszInterfaceW);
        hr = HRFROMP(pszInterface);
    }

    if(SUCCEEDED(hr))
    {
        *ppszInterface = pszInterface;
    }

    MEMFREE(pszInterfaceW);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetWaveDeviceIdFromInterface
 *
 *  Description:
 *      Gets the waveOut device id for a given device interface.
 *
 *  Arguments:
 *      LPCWSTR [in]: device interface.
 *      BOOL [in]: TRUE if capture.
 *      LPUINT [out]: receives wave device id.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetWaveDeviceIdFromInterface"

HRESULT GetWaveDeviceIdFromInterface(LPCTSTR pszInterface, BOOL fCapture, LPUINT puDeviceId)
{
    const UINT              cDevices    = WaveGetNumDevs(fCapture);
    LPTSTR                  pszThis     = NULL;
    HRESULT                 hr          = DS_OK;
    UINT                    uId;

    DPF_ENTER();

    for(uId = 0; uId < cDevices; uId++)
    {
        hr = GetWaveDeviceInterface(uId, fCapture, &pszThis);

        if(SUCCEEDED(hr) && !lstrcmpi(pszInterface, pszThis))
        {
            break;
        }

        MEMFREE(pszThis);
    }

    MEMFREE(pszThis);

    if(uId < cDevices)
    {
        *puDeviceId = uId;
    }
    else
    {
        DPF(DPFLVL_ERROR, "Can't find waveIn/Out device id for interface %s", pszInterface);
        hr = DSERR_NODRIVER;
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetWaveDeviceDevnode
 *
 *  Description:
 *      Gets the devnode for a given waveOut device id.
 *
 *  Arguments:
 *      UINT [in]: waveOut device id.
 *      BOOL [in]: TRUE if capture.
 *      LPDWORD [out]: receives devnode.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetWaveDeviceDevnode"

HRESULT GetWaveDeviceDevnode(UINT uDeviceId, BOOL fCapture, LPDWORD pdwDevnode)
{
    HRESULT                     hr;

    DPF_ENTER();

    hr = WaveMessage(uDeviceId, fCapture, DRV_QUERYDEVNODE, (DWORD_PTR)pdwDevnode, 0);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetWaveDeviceIdFromDevnode
 *
 *  Description:
 *      Gets the waveOut device id for a given devnode.
 *
 *  Arguments:
 *      DWORD [in]: devnode.
 *      BOOL [in]: TRUE if capture.
 *      LPUINT [out]: receives wave device id.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetWaveDeviceIdFromDevnode"

HRESULT GetWaveDeviceIdFromDevnode(DWORD dwDevnode, BOOL fCapture, LPUINT puDeviceId)
{
    const UINT              cDevices    = WaveGetNumDevs(fCapture);
    HRESULT                 hr          = DS_OK;
    UINT                    uId;
    DWORD                   dwThis;

    DPF_ENTER();

    for(uId = 0; uId < cDevices; uId++)
    {
        hr = GetWaveDeviceDevnode(uId, fCapture, &dwThis);

        if(SUCCEEDED(hr) && dwThis == dwDevnode)
        {
            break;
        }
    }

    if(uId < cDevices)
    {
        *puDeviceId = uId;
    }
    else
    {
        DPF(DPFLVL_ERROR, "Can't find waveIn/Out device id for devnode 0x%8.8lX", dwDevnode);
        hr = DSERR_NODRIVER;
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CompareBufferProperties
 *
 *  Description:
 *      Determines if a buffer supports a set of properties.
 *
 *  Arguments:
 *      LPCCOMPAREBUFFER [in]: buffer 1.
 *      LPCCOMPAREBUFFER [in]: buffer 2.
 *
 *  Returns:
 *      BOOL: TRUE if the buffers are compatible.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CompareBufferProperties"

BOOL CompareBufferProperties(LPCCOMPAREBUFFER pBuffer1, LPCCOMPAREBUFFER pBuffer2)
{
    const DWORD             dwOptionalMask  = DSBCAPS_CTRLFREQUENCY | DSBCAPS_CTRLPAN | DSBCAPS_CTRLVOLUME | DSBCAPS_CTRLPOSITIONNOTIFY;
    const DWORD             dwIgnoreMask    = dwOptionalMask | DSBCAPS_FOCUSMASK | DSBCAPS_CTRLFX;
    DWORD                   dwFlags[2];
    BOOL                    fCompare;

    DPF_ENTER();

    // Compare the necessary flags
    dwFlags[0] = pBuffer1->dwFlags;
    dwFlags[0] &= ~dwIgnoreMask;

    dwFlags[1] = pBuffer2->dwFlags;
    dwFlags[1] &= ~dwIgnoreMask;

    if(!(dwFlags[0] & DSBCAPS_LOCMASK))
    {
        dwFlags[1] &= ~DSBCAPS_LOCMASK;
    }

    fCompare = (dwFlags[0] == dwFlags[1]);

    // Compare the optional flags
    if(fCompare)
    {
        dwFlags[0] = pBuffer1->dwFlags;
        dwFlags[0] &= dwOptionalMask;

        dwFlags[1] = pBuffer2->dwFlags;
        dwFlags[1] &= dwOptionalMask;

        // Make sure buffer 1 has no optional flags that are absent in buffer 2
        fCompare = !(dwFlags[0] & (dwFlags[1] ^ dwFlags[0]));
    }

    // Compare the format
    if(fCompare)
    {
        const WAVEFORMATEX *pwfx1 = pBuffer1->pwfxFormat;
        const WAVEFORMATEX *pwfx2 = pBuffer2->pwfxFormat;

        if (pwfx1->wFormatTag == pwfx2->wFormatTag) {
            if (WAVE_FORMAT_PCM == pwfx1->wFormatTag) {
                fCompare = !memcmp(pwfx1, pwfx2, sizeof(PCMWAVEFORMAT));
            } else if (pwfx1->cbSize == pwfx2->cbSize) {
                fCompare = !memcmp(pwfx1, pwfx2, sizeof(WAVEFORMATEX) + pwfx1->cbSize);
            } else {
                fCompare = FALSE;
            }
        } else {
            fCompare = FALSE;
        }
    }

    // Compare the 3D algorithm
    if(fCompare && (pBuffer1->dwFlags & DSBCAPS_CTRL3D))
    {
        fCompare = IsEqualGUID(&pBuffer1->guid3dAlgorithm, &pBuffer2->guid3dAlgorithm);
    }

    DPF_LEAVE(fCompare);
    return fCompare;
}


/***************************************************************************
 *
 *  GetWindowsVersion
 *
 *  Description:
 *      Determines the version of Windows we are running on.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      WINVERSION: Host Windows version.
 *
 ***************************************************************************/

WINVERSION GetWindowsVersion(void)
{
    WINVERSION winVersion = WIN_UNKNOWN;
    OSVERSIONINFO osvi;

    // Initialize the osvi structure
    ZeroMemory(&osvi,sizeof osvi);
    osvi.dwOSVersionInfoSize = sizeof osvi;

    if (GetVersionEx(&osvi))
        if (osvi.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS) // Win9x
            if (osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 90)
                winVersion = WIN_ME;
            else
                winVersion = WIN_9X;
        else // WinNT
            if (osvi.dwMajorVersion == 4)
                winVersion = WIN_NT;
            else if (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 0)
                winVersion = WIN_2K;
            else
                winVersion = WIN_XP;

    return winVersion;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\mergefak.inc ===
/*
 * MergeFak.inc
 *
 * Copyright (C) 1998 Microsoft Corporation.  All Rights Reserved.
 */

BOOL MergeFake
    (long operation,
    CMixSource *pMixSource,
    DWORD nInputByteCount,
    void *pSourceWrap,
    PLONG *pplBuild,
    PLONG plBuildEnd,
    void **ppSource)
{
  PLONG plBuild = *pplBuild;
  BYTE *pSource = *((BYTE **)ppSource);
  BYTE *pSourceStart = pSource;
  BYTE *pSourceEnd = pSource + nInputByteCount;
  PLONG plBuildStart = plBuild;
  DWORD dwFraction = pMixSource->m_dwFraction;
  DWORD dwStep     = pMixSource->m_step_fract;
  int StepSize;

  StepSize = 1;
  if (operation & H_STEREO)  StepSize *= 2; // Source operands.
  if (operation & H_16_BITS) StepSize *= 2;

  #ifdef XplBuild
  #undef XplBuild
  #endif
  #ifdef XpSource
  #undef XpSource
  #endif

  #define XplBuild plBuild
  #define XpSource  (pSource + ((dwFraction >> FRACT_SHIFT) * StepSize))

  if (nInputByteCount == LONG_MAX) {    // Handle any wrap issues.
     pSourceEnd = NULL;
     pSourceEnd--;
     if ((pSourceEnd - pSource) > LONG_MAX) {
        nInputByteCount = LONG_MAX;
        pSourceEnd = pSource + nInputByteCount;
     }
     else
     {
        nInputByteCount = PtrDiffToUlong(pSourceEnd - pSource);
     }
  }
  
  *((BYTE **)&pSourceWrap) -= StepSize;
  
  while ((plBuild < plBuildEnd) && (pSource < pSourceEnd))
  {
    if (pSourceEnd > pSourceWrap)
       pSourceEnd = (BYTE *)pSourceWrap;

#if 1
    // Precalc this!
    long x = PtrDiffToLong(plBuildEnd - plBuild)  / 2;     // Max output samples.
    long y = PtrDiffToLong(pSourceEnd - XpSource) / StepSize;  // Max input samples.

//  y <<= 12;
//  y +=  dwStep - 1;           // Round to next item.
//  y  /= dwStep;
    y = (long)((((__int64)y << 12) + (dwStep-1)) / dwStep);
////    y >>= 12;               // Number of input steps.

    if (y > x) {                // More input than output.
        plBuild    += x * 2;
        dwFraction += x * dwStep;
    }
    else {
        plBuild    += y * 2;    // More output positions than input.
        dwFraction += y * dwStep;
    }
    // Note that the above could be used in the real routines...
#else
    while ((plBuild < plBuildEnd) && (XpSource < pSourceEnd))
    {
      dwFraction += dwStep;
      plBuild += 2;
    }
#endif

    pSource          = XpSource;
    dwFraction &= FRACT_MASK;       // Eliminate accumulated offsets.
    nInputByteCount -=  PtrDiffToUlong(pSource - pSourceStart);

    if (pSource >= pSourceWrap) {   // Goes to -1 position if necessary.
       pSource -= pMixSource->m_cbBuffer;
    }

    pSourceStart = pSource;
    pSourceEnd   = pSource + nInputByteCount;
  }

  *((LONG **)ppSource) = (LONG *)pSource;
    pMixSource->m_cSamplesInCache += PtrDiffToInt(plBuild - plBuildStart) / 2;
  *pplBuild = plBuild;
    pMixSource->m_dwFraction = dwFraction;
  
  return ((int)nInputByteCount <= 0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\mergexxx.inc ===
/*
 * MergeXXX - do a SRC conversion of two 32-bit buffers.
 *
 * Copyright (C) 1998 Microsoft Corporation.  All Rights Reserved.
 */

void
MergeXXX
	(
	PLONG pSrc,
	PLONG pSrcEnd,
	PLONG pDst,
	PLONG pDstEnd,
	DWORD dwFrac
	)
{
#if 0
#ifdef Not_VxD
    DPF(0, "MergeXXX ENT: pDst 0x%08lx pDstEnd 0x%08lx pSrc 0x%08lx pSrcEnd 0x%08lx Frac 0x%08lx", pDst, pDstEnd, pSrc, pSrcEnd, dwFrac);
#else
    DPF(("Merge32 ENT: pDst 0x%08lx pDstEnd 0x%08lx pSrc 0x%08lx pSrcEnd 0x%08lx dwFrac 0x%08lx", pDst, pDstEnd, pSrc, pSrcEnd, dwFrac));
#endif
#endif
   /*	No nested loops, just a simple traversal.
    */
   _asm {
	mov	esi, pSrc
	mov	edi, pDst

	push	dwFrac
	push	pDstEnd
	mov	eax, pSrcEnd
	sub	eax, 8
	push	eax
	push	ebp
	xor	eax, eax		// Fractional counter.
	mov	edx, esi
	mov	ebp, eax		// Current fraction.

	cmp	edi, DWORD PTR [esp+8]	// plBuild >= plBuildEnd
	jae	Exit

Top:
	cmp	esi, DWORD PTR [esp+4]	// pSource >= pSourceEnd
	jae	Exit

	mov	ecx, DWORD PTR [esi+8]
	mov	ebx, DWORD PTR [esi]
	and	ebp, 4095		// dwFrac = dwFraction & 0x0fff
	sub	ecx, ebx		// x   = NewSample - OldSample
	imul	ecx, ebp		// x  *= Frac
	sar	ecx, 12			// x >>= 12
	add	ecx, ebx		// NewSample += x
	mov	ebx, DWORD PTR [edi]
	add	ebx, ecx

	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [edi], ebx

	mov	ebx, DWORD PTR [esi+4]
	sub	ecx, ebx		// x   = NewSample - OldSample
	add	edi, 8			// plBuild += 2
	imul	ecx, ebp		// x  *= Frac
	sar	ecx, 12			// x >>= 12
	mov	ebp, DWORD PTR [esp+12]	// dwStep
	add	ecx, ebx		// NewSample += x
	mov	ebx, DWORD PTR [edi-4]
	add	eax, ebp		// dwFraction += dwStep
	add	ebx, ecx
	mov	ecx, eax
	mov	DWORD PTR [edi-4], ebx	// (*plBuild+1) += x

	shr	ecx, 12
	mov	ebp, eax
	lea	esi, [edx+ecx*8]	// pSource + (dwFraction >> 12) * 8
	cmp	edi, DWORD PTR [esp+8]	// plBuild < plBuildEnd
	jb	Top
Exit:
	pop	ebp
	add	esp, 12
	mov pDst, edi
	mov pSrc, esi
	}
#if 0
#ifdef Not_VxD
    DPF(0, "MergeXXX EXT: pDst 0x%08lx pDstEnd 0x%08lx pSrc 0x%08lx pSrcEnd 0x%08lx", pDst, pDstEnd, pSrc, pSrcEnd);
#else
    DPF(("Merge32 EXT: pDst 0x%08lx pDstEnd 0x%08lx pSrc 0x%08lx pSrcEnd 0x%08lx", pDst, pDstEnd, pSrc, pSrcEnd));
#endif
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\miscinl.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       miscinl.h
 *  Content:    Miscelaneous inline objects.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  10/28/98    dereks  Created
 *
 ***************************************************************************/

#ifndef __MISCINL_H__
#define __MISCINL_H__

#ifdef __cplusplus

// A simple string class
class CString
{
private:
    LPSTR                   m_pszAnsi;      // Ansi version of the string
    LPWSTR                  m_pszUnicode;   // Unicode version of the string

public:
    CString(void);
    virtual ~CString(void);

public:
    virtual LPCSTR operator =(LPCSTR);
    virtual LPCWSTR operator =(LPCWSTR);
    virtual operator LPCSTR(void);
    virtual operator LPCWSTR(void);
    virtual BOOL IsEmpty(void);

private:
    virtual void AssertValid(void);
};

// The DirectSound device description
class CDeviceDescription
    : public CDsBasicRuntime
{
public:
    VADDEVICETYPE               m_vdtDeviceType;        // The device type
    GUID                        m_guidDeviceId;         // The device identifier
    CString                     m_strName;              // The device name
    CString                     m_strPath;              // The device path
    CString                     m_strInterface;         // The device interface
    DWORD                       m_dwDevnode;            // The device devnode
    UINT                        m_uWaveDeviceId;        // The wave device identifer

public:
    CDeviceDescription(VADDEVICETYPE = 0, REFGUID = GUID_NULL, UINT = WAVE_DEVICEID_NONE);
    virtual ~CDeviceDescription(void);
};

// Helper functions
template <class type> void SwapValues(type *, type *);

#endif // __cplusplus

#endif // __MISCINL_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\multi3d.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1999-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       multi3d.cpp
 *
 *  Content:    CMultiPan3dObject: the multichannel-panning 3D object.
 *              CMultiPan3dListener: corresponding 3D listener object.
 *              This class extends the hierarchy in ds3d.cpp; it's only
 *              separate because ds3d.cpp has become absurdly huge.
 *
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 * 10/30/99     DuganP  Created (based on code kindly provided by JeffTay)
 *
 ***************************************************************************/

#include <math.h>       // For atan2()

#include "dsoundi.h"    // Blob of headers
#include "multi3d.h"    // Our public interface
#include "vector.h"     // For D3DVECTOR and PI

// Uncomment this line for some trace messages specific to this file:
//#define DPF_MULTI3D DPF
#pragma warning(disable:4002)
#define DPF_MULTI3D()

#define DPF_DECIMAL(x) int(x), int(x*100 - (int)x*100)

// Any angles or distances smaller than EPSILON are considered equivalent to 0
#define EPSILON 0.00001

// Supported speaker positions, represented as azimuth angles.
//
// Here's a picture of the azimuth angles for the 8 cardinal points,
// seen from above.  The listener's head is at the origin 0, facing
// in the +z direction, with +x to the right.
//
//          +z | 0  <-- azimuth 
//             | 
//    -pi/4 \  |  / pi/4
//           \ | /
//            \|/
// -pi/2-------0-------pi/2
//      -x    /|\    +x
//           / | \
//   -3pi/4 /  |  \ 3pi/4
//             |
//          -z | pi
//
// If and when we support the SPEAKER_TOP_* speaker positions, we'll
// have to define some elevation angles here too.

#define LEFT_AZIMUTH                    (-PI/2)
#define RIGHT_AZIMUTH                   (PI/2)
#define FRONT_LEFT_AZIMUTH              (-PI/4)
#define FRONT_RIGHT_AZIMUTH             (PI/4)
#define FRONT_CENTER_AZIMUTH            0.0
#define LOW_FREQUENCY_AZIMUTH           42.0
#define BACK_LEFT_AZIMUTH               (-3*PI/4)
#define BACK_RIGHT_AZIMUTH              (3*PI/4)
#define BACK_CENTER_AZIMUTH             PI
#define FRONT_LEFT_OF_CENTER_AZIMUTH    (-PI/8)
#define FRONT_RIGHT_OF_CENTER_AZIMUTH   (PI/8)

// Supported speaker layouts:

const double CMultiPan3dListener::m_adStereoSpeakers[] =
{
    LEFT_AZIMUTH,
    RIGHT_AZIMUTH
};
// Note: we can't use FRONT_LEFT_AZIMUTH and FRONT_RIGHT_AZIMUTH here because
// of the angle-based panning algorithm below; it doesn't work well if there
// are 2 speakers with more than 180 degrees between them.  This problem may
// go away if and when we change over to a distance-based panning algorithm.

const double CMultiPan3dListener::m_adSurroundSpeakers[] =
{
    FRONT_LEFT_AZIMUTH,
    FRONT_RIGHT_AZIMUTH,
    FRONT_CENTER_AZIMUTH,
    BACK_CENTER_AZIMUTH
};
const double CMultiPan3dListener::m_adQuadSpeakers[] =
{
    FRONT_LEFT_AZIMUTH,
    FRONT_RIGHT_AZIMUTH,
    BACK_LEFT_AZIMUTH,
    BACK_RIGHT_AZIMUTH
};
const double CMultiPan3dListener::m_ad5Point1Speakers[] =
{
    FRONT_LEFT_AZIMUTH,
    FRONT_RIGHT_AZIMUTH,
    FRONT_CENTER_AZIMUTH,
    LOW_FREQUENCY_AZIMUTH,
    BACK_LEFT_AZIMUTH,
    BACK_RIGHT_AZIMUTH
};
const double CMultiPan3dListener::m_ad7Point1Speakers[] =
{
    FRONT_LEFT_AZIMUTH,
    FRONT_RIGHT_AZIMUTH,
    FRONT_CENTER_AZIMUTH,
    LOW_FREQUENCY_AZIMUTH,
    BACK_LEFT_AZIMUTH,
    BACK_RIGHT_AZIMUTH,
    FRONT_LEFT_OF_CENTER_AZIMUTH,
    FRONT_RIGHT_OF_CENTER_AZIMUTH
};


/***************************************************************************
 *    
 *  CMultiPan3dObject
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      C3dListener* [in]: (passed on to our base constructor)
 *      BOOL [in]:         (passed on to our base constructor)
 *      DWORD [in]:        (passed on to our base constructor)
 *      CKsSecondaryRenderWaveBuffer* [in]: buffer we're associated to
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultiPan3dObject::CMultiPan3dObject"

CMultiPan3dObject::CMultiPan3dObject(CMultiPan3dListener* pListener, BOOL fMuteAtMaxDistance, BOOL fDopplerEnabled,
                                     DWORD dwFrequency, CKsSecondaryRenderWaveBuffer* pBuffer)
    : CSw3dObject(pListener, DS3DALG_NO_VIRTUALIZATION, fMuteAtMaxDistance, fDopplerEnabled, dwFrequency)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CMultiPan3dObject);

    // Initialize defaults
    m_pPan3dListener = pListener;
    m_pBuffer = pBuffer;
    m_lUserVolume = DSBVOLUME_MAX;
    m_fUserMute = FALSE;
    m_vHrp.x = m_vHrp.y = m_vHrp.z = 0;
    ZeroMemory(m_lPanLevels, sizeof m_lPanLevels);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CMultiPan3dObject
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultiPan3dObject::~CMultiPan3dObject"

CMultiPan3dObject::~CMultiPan3dObject(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CMultiPan3dObject);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  SetAttenuation
 *
 *  Description:
 *      Gives the 3D object first notification of an attenuation change
 *      to its owning buffer.
 *
 *  Arguments:
 *      PDSVOLUMEPAN [in]: attenuation values.
 *      LPBOOL [out]: receives TRUE if the buffer should be notified as well.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultiPan3dObject::SetAttenuation"

HRESULT CMultiPan3dObject::SetAttenuation(PDSVOLUMEPAN pdsvp, LPBOOL pfContinue)
{
    HRESULT hr;
    DPF_ENTER();

    m_lUserVolume = pdsvp->lVolume;
    hr = Commit3dChanges();
    if (SUCCEEDED(hr))
        *pfContinue = FALSE;

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  SetMute
 *
 *  Description:
 *      Gives the 3D object first notification of a mute status change
 *      to its owning buffer.
 *
 *  Arguments:
 *      BOOL [in]: mute value.
 *      LPBOOL [out]: receives TRUE if the buffer should be notified as well.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultiPan3dObject::SetMute"

HRESULT CMultiPan3dObject::SetMute(BOOL fMute, LPBOOL pfContinue)
{
    HRESULT hr;
    DPF_ENTER();

    m_fUserMute = fMute;
    hr = Commit3dChanges();
    if (SUCCEEDED(hr))
        *pfContinue = FALSE;

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  UpdateAlgorithmHrp
 *
 *  Description:
 *      Updates Pan algorithm specific head-relative position.
 *
 *  Arguments:
 *      D3DVECTOR*: new head-relative position vector.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultiPan3dObject::UpdateAlgorithmHrp"

void CMultiPan3dObject::UpdateAlgorithmHrp(D3DVECTOR* pvHrp)
{
    DPF_ENTER();

    // Save the head-relative position vector (for use in Commit3dChanges)
    m_vHrp = *pvHrp;

    // Update m_spherical.rho too, since the UpdatePositionAttenuation()
    // method in our base class CSw3dObject needs this info
    if (pvHrp->x == 0 && pvHrp->y == 0 && pvHrp->z == 0)
        m_spherical.rho = 0.f;
    else
        m_spherical.rho = MagnitudeVector(pvHrp);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Commit3dChanges
 *
 *  Description:
 *      Commits 3D data to the device
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultiPan3dObject::Commit3dChanges"

HRESULT CMultiPan3dObject::Commit3dChanges(void)
{
    HRESULT hr;
    LONG lVolume;
    BOOL fMute;
    DWORD dwFrequency;
    int nChannels = m_pPan3dListener->m_nChannels;

    DPF_ENTER();

    if (nChannels == 0)
    {
        DPF(DPFLVL_INFO, "Called before CMultiPan3dListener::SetSpeakerConfig()");
        hr = DS_OK;  // This is OK - we'll be called again later 
    }
    else
    {
        // Calculate values
        if (DS3DMODE_DISABLE == m_opCurrent.dwMode)
        {
            lVolume = m_lUserVolume;
            fMute = m_fUserMute;
            dwFrequency = m_dwUserFrequency;
            for (int i=0; i<nChannels; ++i)
                m_lPanLevels[i] = DSBVOLUME_MAX;
        }
        else
        {
            lVolume = m_lUserVolume + CalculateVolume();
            fMute = m_fUserMute || (lVolume <= DSBVOLUME_MIN);
            dwFrequency = m_dwDopplerFrequency;
            CalculatePanValues(nChannels);
        }
        
        // Apply values
        hr = m_pBuffer->SetMute(fMute);

        if (SUCCEEDED(hr) && m_fDopplerEnabled)
            hr = m_pBuffer->SetBufferFrequency(dwFrequency, TRUE);

        if (SUCCEEDED(hr))
            hr = m_pBuffer->SetAllChannelAttenuations(lVolume, nChannels, m_lPanLevels);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CalculateVolume
 *
 *  Description:
 *      Calculates the volume value based on the object's position.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      LONG: Volume.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultiPan3dObject::CalculateVolume"

LONG CMultiPan3dObject::CalculateVolume(void)
{
    static const double d2000log2 = 602.059991328;  // 2000 * log10(2)
    // FIXME: shouldn't this be 1000 * log10(2)?
    LONG lVolume;
    DPF_ENTER();

    if (IsAtMaxDistance())
        lVolume = DSBVOLUME_MIN;
    else
    {
        double dAttenuation = m_flAttenuation * m_flAttDistance;
        if (dAttenuation > 0.0)
        {
            lVolume = LONG(fylog2x(d2000log2, dAttenuation));
            // Reduce the volume to roughly match the HRTF algorithm's level
            lVolume -= PAN3D_HRTF_ADJUSTMENT;
        }
        else
            lVolume = DSBVOLUME_MIN;
    }

    DPF_LEAVE(lVolume);
    return lVolume;
}


/***************************************************************************
 *
 *  CalculatePanValues
 *
 *  Description:
 *      Calculates the channel levels based on the object's position.
 *
 *  Arguments:
 *      int: number of channels to calculate.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultiPan3dObject::CalculatePanValues"

void CMultiPan3dObject::CalculatePanValues(int nChannels)
{
    static const double d1000log2 = 301.03; // 1000 * log10(2)
    static const float flThreshold = 2.5;   // FIXME: maybe this should be dynamic

    float xPos = m_vHrp.x, zPos = m_vHrp.z; // Head-relative sound coordinates
    double dAttenuations[MAX_CHANNELS];     // Speaker attenuations calculated
    int i;                                  // Loop counter

    DPF_ENTER();

    // Find the sound's Head-Relative Position vector's length
    // and azimuth angle (see diagram at beginning of this file)
    double dHrpAzimuth = atan2(xPos, zPos);
    double dHrpLength;  // Optimized; calculated below, only if needed

    DPF_MULTI3D(DPFLVL_INFO, "Sound source is at (x=%d.%02d, z=%d.%02d) relative to listener", DPF_DECIMAL(xPos), DPF_DECIMAL(zPos));
    DPF_MULTI3D(DPFLVL_INFO, "Sound source's azimuth angle: %d.%02d", DPF_DECIMAL(dHrpAzimuth));

    // Make the X and Z coordinates positive for convenience
    if (xPos < 0) xPos = -xPos;
    if (zPos < 0) zPos = -zPos;

    if ((xPos < EPSILON) && (zPos < EPSILON))
    {
        // The sound is practically on top of the listener;
        // distribute the signal equally to all speakers
        for (i=0; i<nChannels; ++i)
            dAttenuations[i] = 1.0 / nChannels;
    }
    else
    {
        // Initialize the speaker attenuations to silence
        for (i=0; i<nChannels; ++i)
            dAttenuations[i] = 0.0;

        if ((xPos < flThreshold) && (zPos < flThreshold) &&
            (dHrpLength = sqrt(xPos*xPos + zPos*zPos)) < flThreshold)
        {
            // Within the zero-crossing threshold, we distribute part of the
            // signal to a "phantom sound source" diametrically opposite the
            // real one, to make the crossover a little smoother
            double dPower = 0.5 + dHrpLength / (2.0 * flThreshold);
            DistributeSignal(dPower, dHrpAzimuth, nChannels, dAttenuations);
            DistributeSignal(1.0 - dPower, dHrpAzimuth + PI, nChannels, dAttenuations);
        }
        else
        {
            // Assign all the signal to the two nearest speakers
            DistributeSignal(1.0, dHrpAzimuth, nChannels, dAttenuations);
        }
    }

    // Set up the final channel levels in dsound units (millibels):
    for (i=0; i<nChannels; ++i)
    {
        if (dAttenuations[i] == 0.0)
            m_lPanLevels[i] = DSBVOLUME_MIN;
        else
            m_lPanLevels[i] = LONG(fylog2x(d1000log2, dAttenuations[i]));

        // I.e. m_lPanLevels[i] = 1000 * log10(dAttenuations[i])
        DPF_MULTI3D(DPFLVL_MOREINFO, "Speaker %d: %ld", i, m_lPanLevels[i]);
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  DistributeSignal
 *
 *  Description:
 *      Calculates the channel levels based on the object's position.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultiPan3dObject::DistributeSignal"

void CMultiPan3dObject::DistributeSignal(double dSignal, double dAzimuth, int nChannels, double dAttenuations[])
{
    DPF_ENTER();

    // Sanity checking
    ASSERT(dSignal >= 0.0 && dSignal <= 1.0);  // Fraction of signal to be distributed
    ASSERT(nChannels > 1);

    // Get the speaker position azimuth angles from our 3D listener
    const double* adSpeakerPos = m_pPan3dListener->m_adSpeakerPos;
    ASSERT(adSpeakerPos != NULL);

    // Calculate the angular distance from each speaker to the HRPV,
    // and choose the two closest speakers on either side of the HRPV
    int nSpk1 = -1, nSpk2 = -1;
    double dSpkDist1 = -4, dSpkDist2 = 4;  // 4 > PI
    for (int i=0; i<nChannels; ++i)
    {
        double dCurDist = dAzimuth - adSpeakerPos[i];

        // Normalize the distance if abs(distance) > PI
        if (dCurDist > PI)
            dCurDist -= PI_TIMES_TWO;
        else if (dCurDist < -PI)
            dCurDist += PI_TIMES_TWO;
            
        if (dCurDist <= 0 && dCurDist > dSpkDist1)
            nSpk1 = i, dSpkDist1 = dCurDist;
        else if (dCurDist >= 0 && dCurDist < dSpkDist2)
            nSpk2 = i, dSpkDist2 = dCurDist;
    }
    if (dSpkDist1 < 0) dSpkDist1 = -dSpkDist1;
    if (dSpkDist2 < 0) dSpkDist2 = -dSpkDist2;

    if (nSpk1 == -1 || nSpk2 == -1)
    {
        DPF(DPFLVL_WARNING, "Couldn't find the two closest speakers! (nSpk1=%d, nSpk2=%d)", nSpk1, nSpk2);
        nSpk1 = nSpk2 = 0;
    }

    DPF_MULTI3D(DPFLVL_INFO, "Found closest speakers: %d (angle %d.%02d, %d.%02d away) and %d (angle %d.%02d, %d.%02d away)",
                nSpk1, DPF_DECIMAL(adSpeakerPos[nSpk1]), DPF_DECIMAL(dSpkDist1),
                nSpk2, DPF_DECIMAL(adSpeakerPos[nSpk2]), DPF_DECIMAL(dSpkDist2));

    if (dSpkDist1 < EPSILON)
        dAttenuations[nSpk1] += dSignal;
    else if (dSpkDist2 < EPSILON)
        dAttenuations[nSpk2] += dSignal;
    else
    {
        // Scale the HRPV's angle between the speakers to the range [0, pi/2]
        // and take the resulting angle's tangent; this is the ratio we want
        // between the powers coming from the two chosen speakers.
        double dRatio = tan(PI_OVER_TWO * dSpkDist1 / (dSpkDist1 + dSpkDist2));

        //                     signal                      signal*ratio
        // Give first speaker --------- and second speaker ------------ :
        //                    1 + ratio                     1 + ratio

        dSignal /= (1.0 + dRatio);
        dAttenuations[nSpk1] += dSignal;
        dAttenuations[nSpk2] += dSignal * dRatio;
    }

    DPF_MULTI3D(DPFLVL_INFO, "Added %d.%02d of signal to speaker %d and %d.%02d to speaker %d",
                DPF_DECIMAL(dAttenuations[nSpk1]), nSpk1, DPF_DECIMAL(dAttenuations[nSpk2]), nSpk2);
                
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *    
 *  SetSpeakerConfig
 *
 *  Description:
 *      Sets the speaker configuration for this 3D listener.
 *
 *  Arguments:
 *      DWORD [in]: speaker configuration.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultiPan3dListener::SetSpeakerConfig"

HRESULT CMultiPan3dListener::SetSpeakerConfig(DWORD dwSpeakerConfig)
{
    DPF_ENTER();

    // First set up our internal speaker config data
    switch (DSSPEAKER_CONFIG(dwSpeakerConfig))
    {
        default:
            DPF(DPFLVL_WARNING, "Invalid speaker config; defaulting to stereo"); // Fallthru

        case DSSPEAKER_DIRECTOUT:
        case DSSPEAKER_STEREO:
        case DSSPEAKER_HEADPHONE:
            m_nChannels = 2; m_adSpeakerPos = m_adStereoSpeakers; break;

        case DSSPEAKER_SURROUND:
            m_nChannels = 4; m_adSpeakerPos = m_adSurroundSpeakers; break;

        case DSSPEAKER_QUAD:
            m_nChannels = 4; m_adSpeakerPos = m_adQuadSpeakers; break;

        case DSSPEAKER_5POINT1:
            m_nChannels = 6; m_adSpeakerPos = m_ad5Point1Speakers; break;

        case DSSPEAKER_7POINT1:
            m_nChannels = 8; m_adSpeakerPos = m_ad7Point1Speakers; break;
    }

    // Call the base class version
    HRESULT hr = C3dListener::SetSpeakerConfig(dwSpeakerConfig);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\multi3d.h ===
/***************************************************************************
 *
 *  Copyright (C) 1999-2000 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       multi3d.h
 *
 *  Content:    CMultiPan3dObject declaration.
 *
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 * 10/30/99     DuganP  Created
 *
 ***************************************************************************/

#ifndef __MULTI3D_H__
#define __MULTI3D_H__

// The current largest speaker configuration:
#define MAX_CHANNELS 8

// Forward declarations
class CMultiPan3dListener;
class CKsSecondaryRenderWaveBuffer;

// The multichannel-panning 3D object
class CMultiPan3dObject : public CSw3dObject
{
    friend class CMultiPan3dListener;

private:
    CMultiPan3dListener*          m_pPan3dListener;        // Associated 3d listener object
    CKsSecondaryRenderWaveBuffer* m_pBuffer;                    // Associated KS render buffer
    LONG                          m_lUserVolume;                // Most recent volume set by app
    BOOL                          m_fUserMute;                  // Whether buffer was muted by app
    D3DVECTOR                     m_vHrp;                       // Head-relative position vector
    LONG                          m_lPanLevels[MAX_CHANNELS];   // Channel attenuation values

public:
    CMultiPan3dObject(CMultiPan3dListener*, BOOL, BOOL, DWORD, CKsSecondaryRenderWaveBuffer*);
    ~CMultiPan3dObject(void);

public:
    // Object events
    HRESULT SetAttenuation(PDSVOLUMEPAN, LPBOOL);
    HRESULT SetMute(BOOL, LPBOOL);

private:
    // Nice math
    void UpdateAlgorithmHrp(D3DVECTOR*);
    LONG CalculateVolume(void);
    void CalculatePanValues(int);
    void DistributeSignal(double, double, int, double[]);

    // Writes data to the device
    HRESULT Commit3dChanges(void);
};

// The multichannel-panning 3D listener
class CMultiPan3dListener : public C3dListener
{
    friend class CMultiPan3dObject;

private:
    // Currently supported multichannel speaker layouts:
    static const double m_adStereoSpeakers[];
    static const double m_adSurroundSpeakers[];
    static const double m_adQuadSpeakers[];
    static const double m_ad5Point1Speakers[];
    static const double m_ad7Point1Speakers[];

    // Data used by our 3D objects for their pan calculations:
    int                 m_nChannels;    // Number of channels (speakers)
    const double*       m_adSpeakerPos; // Speaker position azimuth angles

public:
    // Speaker configuration
    virtual HRESULT SetSpeakerConfig(DWORD);
};

#endif // __MULTI3D_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\miscinl.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       miscinl.cpp
 *  Content:    Miscelaneous inline objects.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  10/28/98    dereks  Created
 *
 ***************************************************************************/


/***************************************************************************
 *
 *  CString
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CString::CString"

inline CString::CString(void)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CString);

    m_pszAnsi = NULL;
    m_pszUnicode = NULL;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CString
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CString::~CString"

inline CString::~CString(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CString);

    MEMFREE(m_pszAnsi);
    MEMFREE(m_pszUnicode);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  operator =(LPCSTR)
 *
 *  Description:
 *      Assignment operator.
 *
 *  Arguments:
 *      LPCSTR [in]: string.
 *
 *  Returns:  
 *      LPCSTR [in]: string.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CString::operator =(LPCSTR)"

inline LPCSTR CString::operator =(LPCSTR pszAnsi)
{
    MEMFREE(m_pszAnsi);
    MEMFREE(m_pszUnicode);

    if(pszAnsi)
    {
        m_pszAnsi = AnsiToAnsiAlloc(pszAnsi);
        m_pszUnicode = AnsiToUnicodeAlloc(pszAnsi);
    }
    
    AssertValid();
    
    return pszAnsi;
}


/***************************************************************************
 *
 *  operator =(LPCWSTR)
 *
 *  Description:
 *      Assignment operator.
 *
 *  Arguments:
 *      LPCWSTR [in]: string.
 *
 *  Returns:  
 *      LPCWSTR [in]: string.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CString::operator =(LPCWSTR)"

inline LPCWSTR CString::operator =(LPCWSTR pszUnicode)
{
    MEMFREE(m_pszAnsi);
    MEMFREE(m_pszUnicode);

    if(pszUnicode)
    {
        m_pszAnsi = UnicodeToAnsiAlloc(pszUnicode);
        m_pszUnicode = UnicodeToUnicodeAlloc(pszUnicode);
    }
    
    AssertValid();
    
    return pszUnicode;
}


/***************************************************************************
 *
 *  operator LPCSTR
 *
 *  Description:
 *      Cast operator.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      LPCSTR: string.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CString::operator LPCSTR"

inline CString::operator LPCSTR(void)
{
    AssertValid();
    
    return m_pszAnsi;
}


/***************************************************************************
 *
 *  operator LPCWSTR
 *
 *  Description:
 *      Cast operator.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      LPCWSTR: string.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CString::operator LPCWSTR"

inline CString::operator LPCWSTR(void)
{
    AssertValid();
    
    return m_pszUnicode;
}


/***************************************************************************
 *
 *  IsEmpty
 *
 *  Description:
 *      Determines if the string is empty or not.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      BOOL: TRUE if the string is empty.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CString::IsEmpty"

inline BOOL CString::IsEmpty(void)
{
    AssertValid();

    return !m_pszAnsi || !m_pszUnicode;
}


/***************************************************************************
 *
 *  AssertValid
 *
 *  Description:
 *      Asserts that the object is valid.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CString::AssertValid"

inline void CString::AssertValid(void)
{
    ASSERT((m_pszAnsi && m_pszUnicode) || (!m_pszAnsi && !m_pszUnicode));
}


/***************************************************************************
 *
 *  CDeviceDescription
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CDeviceDescription::CDeviceDescription"

inline CDeviceDescription::CDeviceDescription(VADDEVICETYPE vdtDeviceType, REFGUID guidDeviceId, UINT uWaveDeviceId)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CDeviceDescription);

    m_vdtDeviceType = vdtDeviceType;
    m_guidDeviceId = guidDeviceId;
    m_dwDevnode = 0;
    m_uWaveDeviceId = uWaveDeviceId;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CDeviceDescription
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CDeviceDescription::~CDeviceDescription"

inline CDeviceDescription::~CDeviceDescription(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CDeviceDescription);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CUsesEnumStandardFormats
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CUsesEnumStandardFormats::CUsesEnumStandardFormats"

inline CUsesEnumStandardFormats::CUsesEnumStandardFormats(void)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CUsesEnumStandardFormats);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CUsesEnumStandardFormats
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CUsesEnumStandardFormats::~CUsesEnumStandardFormats"

inline CUsesEnumStandardFormats::~CUsesEnumStandardFormats(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CUsesEnumStandardFormats);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  EnumStandardFormats
 *
 *  Description:
 *      Wrapper around EnumStandardFormats.
 *
 *  Arguments:
 *      LPWAVEFORMATEX [in]: preferred format.
 *      LPWAVEFORMATEX [out]: receives format.
 *
 *  Returns:  
 *      BOOL: TRUE on success.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CUsesEnumStandardFormats::EnumStandardFormats"

inline BOOL CUsesEnumStandardFormats::EnumStandardFormats(LPCWAVEFORMATEX pwfxPreferred, LPWAVEFORMATEX pwfxFormat)
{
    return ::EnumStandardFormats(pwfxPreferred, pwfxFormat, EnumStandardFormatsCallbackStatic, this);
}


/***************************************************************************
 *
 *  EnumStandardFormatsCallbackStatic
 *
 *  Description:
 *      Static callback function for EnumStandardFormats.
 *
 *  Arguments:
 *      LPWAVEFORMATEX [in]: format.
 *      LPVOID [in]: context argument.
 *
 *  Returns:  
 *      BOOL: TRUE to continue enumerating.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CUsesEnumStandardFormats::EnumStandardFormatsCallbackStatic"

inline BOOL CALLBACK CUsesEnumStandardFormats::EnumStandardFormatsCallbackStatic(LPCWAVEFORMATEX pwfxFormat, LPVOID pvContext)
{
    return ((CUsesEnumStandardFormats *)pvContext)->EnumStandardFormatsCallback(pwfxFormat); 
}


/***************************************************************************
 *
 *  SwapValues
 *
 *  Description:
 *      Swaps two values.
 *
 *  Arguments:
 *      type * [in/out]: value 1.
 *      type * [in/out]: value 2.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "SwapValues"

template <class type> void SwapValues(type *p1, type *p2)
{
    type                    temp;

    temp = *p2;
    *p2 = *p1;
    *p1 = temp;
}


/***************************************************************************
 *
 *  CUsesCallbackEvent
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CUsesCallbackEvent::CUsesCallbackEvent"

inline CUsesCallbackEvent::CUsesCallbackEvent(void)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CUsesCallbackEvent);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CUsesCallbackEvent
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CUsesCallbackEvent::~CUsesCallbackEvent"

inline CUsesCallbackEvent::~CUsesCallbackEvent(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CUsesCallbackEvent);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  AllocCallbackEvent
 *
 *  Description:
 *      Allocates a callback event.
 *
 *  Arguments:
 *      CCallbackEventPool * [in]: pool to allocate from.
 *      CCallbackEvent ** [out]: receives event.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CUsesCallbackEvent::AllocCallbackEvent"

inline HRESULT CUsesCallbackEvent::AllocCallbackEvent(CCallbackEventPool *pPool, CCallbackEvent **ppEvent)
{
    return pPool->AllocEvent(EventSignalCallbackStatic, this, ppEvent);
}


/***************************************************************************
 *
 *  EventSignalCallbackStatic
 *
 *  Description:
 *      Static callback function for the callback event.
 *
 *  Arguments:
 *      CCallbackEvent * [in]: event.
 *      LPVOID [in]: context argument.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CUsesCallbackEvent::EventSignalCallbackStatic"

inline void CALLBACK CUsesCallbackEvent::EventSignalCallbackStatic(CCallbackEvent *pEvent, LPVOID pvContext)
{
    #pragma warning(disable:4530)  // Disable the nag about compiling with -GX
    try
    {
        ((CUsesCallbackEvent *)pvContext)->EventSignalCallback(pEvent); 
    } catch (...) {}
}


/***************************************************************************
 *
 *  CEvent
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      LPCTSTR [in]: event name.
 *      BOOL [in]: TRUE to create a manual-reset event.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CEvent::CEvent"

inline CEvent::CEvent(LPCTSTR pszName, BOOL fManualReset)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CEvent);

    m_hEvent = CreateGlobalEvent(pszName, fManualReset);
    ASSERT(IsValidHandleValue(m_hEvent));

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CEvent
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      HANDLE [in]: handle to duplicate.
 *      DWORD [in]: id of the process that owns the handle.
 *      BOOL [in]: TRUE if the source handle should be closed.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CEvent::CEvent"

inline CEvent::CEvent(HANDLE hEvent, DWORD dwProcessId, BOOL fCloseSource)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CEvent);

    m_hEvent = GetGlobalHandleCopy(hEvent, dwProcessId, fCloseSource);
    ASSERT(IsValidHandleValue(m_hEvent));

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CEvent
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CEvent::~CEvent"

inline CEvent::~CEvent(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CEvent);

    CLOSE_HANDLE(m_hEvent);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Wait
 *
 *  Description:
 *      Waits for the event to be signalled.
 *
 *  Arguments:
 *      DWORD [in]: timeout value (in ms).
 *
 *  Returns:  
 *      DWORD: wait result.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CEvent::Wait"

inline DWORD CEvent::Wait(DWORD dwTimeout)
{
    return WaitObject(dwTimeout, m_hEvent);
}


/***************************************************************************
 *
 *  Set
 *
 *  Description:
 *      Sets the event.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      BOOL: TRUE on success.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CEvent::Set"

inline BOOL CEvent::Set(void)
{
    return SetEvent(m_hEvent);
}


/***************************************************************************
 *
 *  Reset
 *
 *  Description:
 *      Resets the event.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      BOOL: TRUE on success.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CEvent::Reset"

inline BOOL CEvent::Reset(void)
{
    return ResetEvent(m_hEvent);
}


/***************************************************************************
 *
 *  GetEventHandle
 *
 *  Description:
 *      Gets the actual event handle.  We use this function instead of a
 *      cast operator because I don't trust an LPVOID (which is what HANDLE)
 *      is defined as) cast operator.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      HANDLE: event handle.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CEvent::GetEventHandle"

inline HANDLE CEvent::GetEventHandle(void)
{
    return m_hEvent;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\mxvad.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       mxvad.h
 *  Content:    DirectSound mixer virtual audio device class.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  4/29/98     dereks  Created
 *
 ***************************************************************************/

#ifndef __MXVAD_H__
#define __MXVAD_H__

#ifdef __cplusplus

// Fwd decl
class CEmSecondaryRenderWaveBuffer;

// The DirectSound mixer audio device class
class CMxRenderDevice 
    : public CRenderDevice
{
public:
    CMixer *                m_pMixer;                           // The mixer object
    CMixDest *              m_pMixDest;                         // The mixer destination object
    LPWAVEFORMATEX          m_pwfxFormat;                       // Device format
    DWORD                   m_dwMixerState;                     // Mixer state

public:
    CMxRenderDevice(VADDEVICETYPE);
    virtual ~CMxRenderDevice(void);

public:
    // Device properties
    virtual HRESULT GetGlobalFormat(LPWAVEFORMATEX, LPDWORD);
    virtual HRESULT SetGlobalFormat(LPCWAVEFORMATEX);
    virtual HRESULT SetSrcQuality(DIRECTSOUNDMIXER_SRCQUALITY);

    // Buffer management
    virtual HRESULT CreateSecondaryBuffer(LPCVADRBUFFERDESC, LPVOID, CSecondaryRenderWaveBuffer **);
    virtual HRESULT CreateEmulatedSecondaryBuffer(LPCVADRBUFFERDESC, LPVOID, CSysMemBuffer *, CEmSecondaryRenderWaveBuffer **);

    // Mixer management
    virtual HRESULT CreateMixer(CMixDest *, LPCWAVEFORMATEX);
    virtual HRESULT SetMixerState(DWORD);
    virtual HRESULT LockMixerDestination(DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD) = 0;
    virtual HRESULT UnlockMixerDestination(LPVOID, DWORD, LPVOID, DWORD) = 0;
    virtual void FreeMixer(void);
};

inline HRESULT CMxRenderDevice::SetSrcQuality(DIRECTSOUNDMIXER_SRCQUALITY)
{
    return DSERR_UNSUPPORTED;
}

inline HRESULT CMxRenderDevice::CreateSecondaryBuffer(LPCVADRBUFFERDESC pDesc, LPVOID pvInstance, CSecondaryRenderWaveBuffer **ppBuffer)
{
    return CreateEmulatedSecondaryBuffer(pDesc, pvInstance, NULL, (CEmSecondaryRenderWaveBuffer **)ppBuffer);
}

#endif // __cplusplus

#endif // __MXVAD_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\onwow64.cpp ===
#include <nt.h>
#include <ntrtl.h>
#include <nturtl.h>
#include <windows.h>

/***************************************************************************
 *
 *  OnWow64
 *
 *  Description:
 *      Determines if we're running in the 32-bit WOW64 subsystem on Win64.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      BOOL: TRUE if we're running on WOW64.
 *
 ***************************************************************************/

BOOL OnWow64(void)
{
#ifdef _WIN64
    return FALSE;
#else
    PVOID Wow64Info = NULL;
    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, GetCurrentProcessId());
    LONG lStatus = NtQueryInformationProcess(hProcess, ProcessWow64Information, &Wow64Info, sizeof Wow64Info, NULL);
    CloseHandle(hProcess);
    return !NT_ERROR(lStatus) && Wow64Info;
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\pnphlp.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       pnphlp.c
 *  Content:    PnP helper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  12/17/97    dereks  Created.
 *
 ***************************************************************************/

#include "dsoundi.h"


/***************************************************************************
 *
 *  CPnpHelper
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::CPnpHelper"

CPnpHelper::CPnpHelper(void)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CPnpHelper);

    InitStruct(&m_dlSetupApi, sizeof(m_dlSetupApi));

    m_hDeviceInfoSet = NULL;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CPnpHelper
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::~CPnpHelper"

CPnpHelper::~CPnpHelper(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CPnpHelper);

    if(IsValidHandleValue(m_hDeviceInfoSet))
    {
        CloseDeviceInfoSet(m_hDeviceInfoSet);
    }

    FreeDynaLoadTable(&m_dlSetupApi.Header);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the PnP function table.
 *
 *  Arguments:
 *      REFGUID [in]: class GUID.
 *      DWORD [in]: SetupDiGetClassDevs flags.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::Initialize"

HRESULT 
CPnpHelper::Initialize
(
    REFGUID                 guidClass,
    DWORD                   dwFlags
)
{
    const LPCSTR apszFunctions[] =
    {
        UNICODE_FUNCTION_NAME("SetupDiGetClassDevs"),
        "SetupDiDestroyDeviceInfoList",
        "SetupDiEnumDeviceInfo",
        "SetupDiEnumDeviceInterfaces",
        UNICODE_FUNCTION_NAME("SetupDiGetDeviceInterfaceDetail"),
        "SetupDiOpenDevRegKey",
        UNICODE_FUNCTION_NAME("SetupDiCreateDevRegKey"),
        UNICODE_FUNCTION_NAME("SetupDiGetDeviceRegistryProperty"),
    };


    HRESULT                 hr          = DS_OK;
    BOOL                    fSuccess;
    
    DPF_ENTER();

    // Initialize the function table
    fSuccess = InitDynaLoadTable(TEXT("setupapi.dll"), apszFunctions, NUMELMS(apszFunctions), &m_dlSetupApi.Header);

    if(!fSuccess)
    {
        DPF(DPFLVL_ERROR, "Unable to initialize setupapi function table");
        hr = DSERR_GENERIC;
    }

    // Open the device information set
    if(SUCCEEDED(hr))
    {
        hr = OpenDeviceInfoSet(guidClass, dwFlags, &m_hDeviceInfoSet);
    }

    DPF_LEAVE_HRESULT(hr);
    
    return hr;
}


/***************************************************************************
 *
 *  OpenDeviceInfoSet
 *
 *  Description:
 *      Opens a device information set.
 *
 *  Arguments:
 *      REFGUID [in]: class GUID.
 *      DWORD [in]: SetupDiGetClassDevs flags.
 *      HDEVINFO * [out]: receives device information set handle.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::OpenDeviceInfoSet"

HRESULT 
CPnpHelper::OpenDeviceInfoSet
(
    REFGUID                 guidClass,
    DWORD                   dwFlags,
    HDEVINFO *              phDeviceInfoSet
)
{
    HDEVINFO                hDeviceInfoSet  = NULL;
    HRESULT                 hr              = DS_OK;

    DPF_ENTER();

    if(IS_NULL_GUID(&guidClass))
    {
        dwFlags |= DIGCF_ALLCLASSES;
    }

    hDeviceInfoSet = m_dlSetupApi.SetupDiGetClassDevs(&guidClass, NULL, NULL, dwFlags);

    if(!IsValidHandleValue(hDeviceInfoSet))
    {
        DPF(DPFLVL_ERROR, "Can't open device info set (%lu)", GetLastError());
        hr = GetLastErrorToHRESULT();
    }

    if(SUCCEEDED(hr))
    {
        *phDeviceInfoSet = hDeviceInfoSet;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CloseDeviceInfoSet
 *
 *  Description:
 *      Closes a device information set.
 *
 *  Arguments:
 *      HDEVINFO [in]: device information set HDEVINFO.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::CloseDeviceInfoSet"

HRESULT 
CPnpHelper::CloseDeviceInfoSet
(
    HDEVINFO                hDeviceInfoSet
)
{
    HRESULT                 hr          = DS_OK;
    BOOL                    fSuccess;
    
    DPF_ENTER();

    fSuccess = m_dlSetupApi.SetupDiDestroyDeviceInfoList(hDeviceInfoSet);

    if(!fSuccess)
    {
        DPF(DPFLVL_ERROR, "Can't destroy device info set (%lu)", GetLastError());
        hr = GetLastErrorToHRESULT();
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  EnumDevice
 *
 *  Description:
 *      Enumerates device in a given information set.
 *
 *  Arguments:
 *      DWORD [in]: device index.
 *      PSP_DEVINFO_DATA [out]: receives device information.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.  This function returns S_FALSE
 *               if no more items are available.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::EnumDevice"

HRESULT 
CPnpHelper::EnumDevice
(
    DWORD                   dwMemberIndex, 
    PSP_DEVINFO_DATA        pDeviceInfoData
)
{
    HRESULT                 hr          = DS_OK;
    BOOL                    fSuccess;

    DPF_ENTER();
    
    InitStruct(pDeviceInfoData, sizeof(*pDeviceInfoData));
    
    fSuccess = m_dlSetupApi.SetupDiEnumDeviceInfo(m_hDeviceInfoSet, dwMemberIndex, pDeviceInfoData);

    if(!fSuccess)
    {
        if(ERROR_NO_MORE_ITEMS == GetLastError())
        {
            hr = S_FALSE;
        }
        else
        {
            DPF(DPFLVL_ERROR, "SetupDiEnumDeviceInfo failed with %lu", GetLastError());
            hr = GetLastErrorToHRESULT();
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  FindDevice
 *
 *  Description:
 *      Finds a device interface by devnode.
 *
 *  Arguments:
 *      DWORD [in]: devnode.
 *      PSP_DEVINFO_DATA [out]: receives device information.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::FindDevice"

HRESULT 
CPnpHelper::FindDevice
(
    DWORD                   dwDevnode,
    PSP_DEVINFO_DATA        pDeviceInfoData
)
{
    DWORD                   dwMemberIndex   = 0;
    BOOL                    fFoundIt        = FALSE;
    HRESULT                 hr              = DS_OK;
    SP_DEVINFO_DATA         DeviceInfoData;

    DPF_ENTER();

    // Enumerate the devices looking for a devnode match

#ifdef DEBUG
    while(TRUE)
#else // DEBUG
    while(!fFoundIt)
#endif // DEBUG

    {
        hr = EnumDevice(dwMemberIndex++, &DeviceInfoData);

        if(DS_OK != hr)
        {
            break;
        }
        
        // DPF(DPFLVL_MOREINFO, "Found 0x%8.8lX", DeviceInfoData.DevInst);  // Too noisy
        
        if(DeviceInfoData.DevInst == dwDevnode)
        {
            if(!fFoundIt)
            {
                fFoundIt = TRUE;
                CopyMemory(pDeviceInfoData, &DeviceInfoData, sizeof(DeviceInfoData));
            }
            else
            {
                DPF(DPFLVL_ERROR, "Found extra device 0x%8.8lX in device information set", dwDevnode);
                ASSERT(!fFoundIt);
            }
        }
    }

    if(S_FALSE == hr)
    {
        hr = DS_OK;
    }

    if(SUCCEEDED(hr) && !fFoundIt)
    {
        hr = DSERR_GENERIC;
    }

    if(FAILED(hr))
    {
        DPF(DPFLVL_ERROR, "Can't find devnode 0x%8.8lX", dwDevnode);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  EnumDeviceInterface
 *
 *  Description:
 *      Enumerates device interfaces in a given information set.
 *
 *  Arguments:
 *      REFGUID [in]: interface class guid.
 *      DWORD [in]: interface index.
 *      PSP_DEVICE_INTERFACE_DATA [out]: receives device interface data.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.  This function returns S_FALSE
 *               if no more items are available.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::EnumDeviceInterface"

HRESULT 
CPnpHelper::EnumDeviceInterface
(
    REFGUID                     guidClass, 
    DWORD                       dwMemberIndex, 
    PSP_DEVICE_INTERFACE_DATA   pDeviceInterfaceData
)
{
    HRESULT                     hr          = DS_OK;
    BOOL                        fSuccess;

    DPF_ENTER();
    
    InitStruct(pDeviceInterfaceData, sizeof(*pDeviceInterfaceData));
    
    fSuccess = m_dlSetupApi.SetupDiEnumDeviceInterfaces(m_hDeviceInfoSet, NULL, &guidClass, dwMemberIndex, pDeviceInterfaceData);

    if(!fSuccess)
    {
        if(ERROR_NO_MORE_ITEMS == GetLastError())
        {
            hr = S_FALSE;
        }
        else
        {
            DPF(DPFLVL_ERROR, "SetupDiEnumDeviceInterfaces failed with %lu", GetLastError());
            hr = GetLastErrorToHRESULT();
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  FindDeviceInterface
 *
 *  Description:
 *      Finds a device interface by name.
 *
 *  Arguments:
 *      LPWSTR [in]: device interface path.
 *      REFGUID [in]: interface class GUID.
 *      PSP_DEVICE_INTERFACE_DATA [out]: receives device interface data.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::FindDeviceInterface"

HRESULT 
CPnpHelper::FindDeviceInterface
(
    LPCTSTR                     pszInterface,
    REFGUID                     guidClass,
    PSP_DEVICE_INTERFACE_DATA   pDeviceInterfaceData
)
{
    LPTSTR                      pszThisInterface    = NULL;
    DWORD                       dwMemberIndex       = 0;
    BOOL                        fFoundIt            = FALSE;
    HRESULT                     hr                  = DS_OK;
    SP_DEVICE_INTERFACE_DATA    DeviceInterfaceData;

    DPF_ENTER();

    // Enumerate the device interfaces matching the interface class GUID
    // in this device set
    InitStruct(&DeviceInterfaceData, sizeof(DeviceInterfaceData));

#ifdef DEBUG
    while(TRUE)
#else // DEBUG
    while(!fFoundIt)
#endif // DEBUG

    {
        hr = EnumDeviceInterface(guidClass, dwMemberIndex++, &DeviceInterfaceData);

        if(DS_OK != hr)
        {
            break;
        }

        hr = GetDeviceInterfacePath(&DeviceInterfaceData, &pszThisInterface);

        if(SUCCEEDED(hr))
        {
            DPF(DPFLVL_MOREINFO, "Found %s", pszThisInterface);
        }
        
        if(SUCCEEDED(hr) && !lstrcmpi(pszInterface, pszThisInterface))
        {
            if(!fFoundIt)
            {
                fFoundIt = TRUE;
                CopyMemory(pDeviceInterfaceData, &DeviceInterfaceData, sizeof(DeviceInterfaceData));
            }
            else
            {
                DPF(DPFLVL_ERROR, "Found extra device interface %s in device information set", pszInterface);
                ASSERT(!fFoundIt);
            }
        }

        MEMFREE(pszThisInterface);
    }

    if(S_FALSE == hr)
    {
        hr = DS_OK;
    }
    
    if(SUCCEEDED(hr) && !fFoundIt)
    {
        hr = DSERR_GENERIC;
    }
    
    if(FAILED(hr))
    {
        DPF(DPFLVL_ERROR, "Can't find interface %s", pszInterface);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetDeviceInterfaceDeviceInfo
 *
 *  Description:
 *      Gets device info for a given device interface.
 *
 *  Arguments:
 *      PSP_DEVICE_INTERFACE_DATA [in]: device interface data.
 *      PSP_DEVINFO_DATA [out]: receives device info data.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::GetDeviceInterfaceDeviceInfo"

HRESULT 
CPnpHelper::GetDeviceInterfaceDeviceInfo
(
    PSP_DEVICE_INTERFACE_DATA   pDeviceInterfaceData,
    PSP_DEVINFO_DATA            pDeviceInfoData
)
{
    HRESULT                     hr  = DS_OK;
    BOOL                        fSuccess;

    DPF_ENTER();

    InitStruct(pDeviceInfoData, sizeof(*pDeviceInfoData));
    
    fSuccess = m_dlSetupApi.SetupDiGetDeviceInterfaceDetail(m_hDeviceInfoSet, pDeviceInterfaceData, NULL, 0, NULL, pDeviceInfoData);

    if(!fSuccess && ERROR_INSUFFICIENT_BUFFER != GetLastError())
    {
        DPF(DPFLVL_ERROR, "Can't get device interface detail (%lu)", GetLastError());
        hr = GetLastErrorToHRESULT();
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetDeviceInterfaceDeviceInfo
 *
 *  Description:
 *      Gets device info for a given device interface.
 *
 *  Arguments:
 *      LPCTSTR [in]: device interface path.
 *      REFGUID [in]: device interface class.
 *      PSP_DEVINFO_DATA [out]: receives device info data.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::GetDeviceInterfaceDeviceInfo"

HRESULT 
CPnpHelper::GetDeviceInterfaceDeviceInfo
(
    LPCTSTR                     pszInterface,
    REFGUID                     guidClass,
    PSP_DEVINFO_DATA            pDeviceInfoData
)
{
    SP_DEVICE_INTERFACE_DATA    DeviceInterfaceData;
    HRESULT                     hr;

    DPF_ENTER();

    InitStruct(&DeviceInterfaceData, sizeof(DeviceInterfaceData));

    hr = FindDeviceInterface(pszInterface, guidClass, &DeviceInterfaceData);

    if(SUCCEEDED(hr))
    {
        hr = GetDeviceInterfaceDeviceInfo(&DeviceInterfaceData, pDeviceInfoData);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetDeviceInterfacePath
 *
 *  Description:
 *      Gets detailed information about a device interface.
 *
 *  Arguments:
 *      PSP_DEVICE_INTERFACE_DATA [in]: device interface data.
 *      LPTSTR * [out]: receives pointer to interface path.  This buffer 
 *                      must be freed by the caller.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::GetDeviceInterfacePath"

HRESULT 
CPnpHelper::GetDeviceInterfacePath
(
    PSP_DEVICE_INTERFACE_DATA           pDeviceInterfaceData,
    LPTSTR *                            ppszInterfacePath
)
{
    PSP_DEVICE_INTERFACE_DETAIL_DATA    pDeviceInterfaceDetailData  = NULL;
    LPTSTR                              pszInterfacePath            = NULL;
    HRESULT                             hr                          = DS_OK;
    DWORD                               dwSize;
    BOOL                                fSuccess;

    DPF_ENTER();

    fSuccess = m_dlSetupApi.SetupDiGetDeviceInterfaceDetail(m_hDeviceInfoSet, pDeviceInterfaceData, NULL, 0, &dwSize, NULL);

    if(fSuccess || ERROR_INSUFFICIENT_BUFFER != GetLastError())
    {
        DPF(DPFLVL_ERROR, "Can't get interface detail size (%lu)", GetLastError());
        hr = GetLastErrorToHRESULT();
    }
    
    if(SUCCEEDED(hr))
    {
        pDeviceInterfaceDetailData = (PSP_DEVICE_INTERFACE_DETAIL_DATA)MEMALLOC_A(BYTE, dwSize);
        hr = HRFROMP(pDeviceInterfaceDetailData);
    }

    if(SUCCEEDED(hr))
    {
        InitStruct(pDeviceInterfaceDetailData, sizeof(*pDeviceInterfaceDetailData));
        
        fSuccess = m_dlSetupApi.SetupDiGetDeviceInterfaceDetail(m_hDeviceInfoSet, pDeviceInterfaceData, pDeviceInterfaceDetailData, dwSize, NULL, NULL);

        if(!fSuccess)
        {
            DPF(DPFLVL_ERROR, "Can't get device interface detail (%lu)", GetLastError());
            hr = GetLastErrorToHRESULT();
        }
    }

    if(SUCCEEDED(hr))
    {
        pszInterfacePath = MEMALLOC_A_COPY(TCHAR, lstrlen(pDeviceInterfaceDetailData->DevicePath) + 1, pDeviceInterfaceDetailData->DevicePath);
        hr = HRFROMP(pszInterfacePath);
    }

    if(SUCCEEDED(hr))
    {
        *ppszInterfacePath = pszInterfacePath;
    }
    else
    {
        MEMFREE(pszInterfacePath);
    }

    MEMFREE(pDeviceInterfaceDetailData);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  OpenDeviceRegistryKey
 *
 *  Description:
 *      Opens the root registry key for a given device.
 *
 *  Arguments:
 *      PSP_DEVINFO_DATA [in]: device information.
 *      DWORD [in]: key type: DIREG_DEV or DIREG_DRV.
 *      BOOL [in]: TRUE to allow creation.
 *      PHKEY [out]: receives registry key handle.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::OpenDeviceRegistryKey"

HRESULT 
CPnpHelper::OpenDeviceRegistryKey
(
    PSP_DEVINFO_DATA        pDeviceInfoData,
    DWORD                   dwKeyType,
    BOOL                    fAllowCreate,
    PHKEY                   phkey
)
{
    HKEY                    hkey    = NULL;
    HRESULT                 hr      = DS_OK;
    UINT                    i;

    DPF_ENTER();

    ASSERT(DIREG_DEV == dwKeyType || DIREG_DRV == dwKeyType);
    
    for(i = 0; i < NUMELMS(g_arsRegOpenKey) && !IsValidHandleValue(hkey); i++)
    {
        hkey = m_dlSetupApi.SetupDiOpenDevRegKey(m_hDeviceInfoSet, pDeviceInfoData, DICS_FLAG_CONFIGSPECIFIC, 0, dwKeyType, g_arsRegOpenKey[i]);
    }

    if(!IsValidHandleValue(hkey) && fAllowCreate)
    {
        hkey = m_dlSetupApi.SetupDiCreateDevRegKey(m_hDeviceInfoSet, pDeviceInfoData, DICS_FLAG_CONFIGSPECIFIC, 0, dwKeyType, NULL, NULL);
    }

    if(!IsValidHandleValue(hkey))
    {
        DPF(DPFLVL_ERROR, "Unable to open device registry key (%lu)", GetLastError());
        hr = GetLastErrorToHRESULT();
    }

    if(SUCCEEDED(hr))
    {
        *phkey = hkey;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  OpenDeviceInterfaceRegistryKey
 *
 *  Description:
 *      Opens the root registry key for a given device.
 *
 *  Arguments:
 *      PSP_DEVINFO_DATA [in]: device information.
 *      DWORD [in]: key type: DIREG_DEV or DIREG_DRV.
 *      BOOL [in]: TRUE to allow creation.
 *      PHKEY [out]: receives registry key handle.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::OpenDeviceInterfaceRegistryKey"

HRESULT 
CPnpHelper::OpenDeviceInterfaceRegistryKey
(
    LPCTSTR                 pszInterface,
    REFGUID                 guidClass,
    DWORD                   dwKeyType,
    BOOL                    fAllowCreate,
    PHKEY                   phkey
)
{
    SP_DEVINFO_DATA         DeviceInfoData;
    HRESULT                 hr;

    DPF_ENTER();
    
    hr = GetDeviceInterfaceDeviceInfo(pszInterface, guidClass, &DeviceInfoData);

    if(SUCCEEDED(hr))
    {
        hr = OpenDeviceRegistryKey(&DeviceInfoData, dwKeyType, fAllowCreate, phkey);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetDeviceRegistryProperty
 *
 *  Description:
 *      Gets a registry property for a given device interface.
 *
 *  Arguments:
 *      PSP_DEVINFO_DATA [in]: device info.
 *      DWORD [in]: property id.
 *      LPDWORD [out]: receives property registry data type.
 *      LPVOID [out]: receives property data.
 *      DWORD [in]: property buffer size.
 *      LPDWORD [out]: receives required buffer size.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::GetDeviceRegistryProperty"

HRESULT 
CPnpHelper::GetDeviceRegistryProperty
(
    PSP_DEVINFO_DATA            pDeviceInfoData,
    DWORD                       dwProperty,
    LPDWORD                     pdwPropertyRegDataType, 
    LPVOID                      pvPropertyBuffer,
    DWORD                       dwPropertyBufferSize,
    LPDWORD                     pdwRequiredSize 
)
{
    HRESULT                     hr          = DS_OK;
    BOOL                        fSuccess;

    DPF_ENTER();

    fSuccess = m_dlSetupApi.SetupDiGetDeviceRegistryProperty(m_hDeviceInfoSet, pDeviceInfoData, dwProperty, pdwPropertyRegDataType, (LPBYTE)pvPropertyBuffer, dwPropertyBufferSize, pdwRequiredSize);

    if(!fSuccess && ERROR_INSUFFICIENT_BUFFER != GetLastError())
    {
        DPF(DPFLVL_ERROR, "Can't get device registry property (%lu)", GetLastError());
        hr = GetLastErrorToHRESULT();
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetDeviceInterfaceRegistryProperty
 *
 *  Description:
 *      Gets a registry property for a given device interface.
 *
 *  Arguments:
 *      LPCTSTR [in]: device interface.
 *      REFGUID [in]: interface class.
 *      DWORD [in]: property id.
 *      LPDWORD [out]: receives property registry data type.
 *      LPVOID [out]: receives property data.
 *      DWORD [in]: property buffer size.
 *      LPDWORD [out]: receives required buffer size.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::GetDeviceInterfaceRegistryProperty"

HRESULT 
CPnpHelper::GetDeviceInterfaceRegistryProperty
(
    LPCTSTR                     pszInterface,
    REFGUID                     guidClass,
    DWORD                       dwProperty,
    LPDWORD                     pdwPropertyRegDataType, 
    LPVOID                      pvPropertyBuffer,
    DWORD                       dwPropertyBufferSize,
    LPDWORD                     pdwRequiredSize 
)
{
    SP_DEVINFO_DATA             DeviceInfoData;
    HRESULT                     hr;

    DPF_ENTER();

    hr = GetDeviceInterfaceDeviceInfo(pszInterface, guidClass, &DeviceInfoData);

    if(SUCCEEDED(hr))
    {
        hr = GetDeviceRegistryProperty(&DeviceInfoData, dwProperty, pdwPropertyRegDataType, pvPropertyBuffer, dwPropertyBufferSize, pdwRequiredSize);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  OpenDeviceInterface
 *
 *  Description:
 *      Opens a device interface.
 *
 *  Arguments:
 *      LPCTSTR [in]: interface path.
 *      LPHANDLE [out]: receives device handle.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::OpenDeviceInterface"

HRESULT 
CPnpHelper::OpenDeviceInterface
(
    LPCTSTR                 pszInterface,
    LPHANDLE                phDevice
)
{
    HRESULT                 hr      = DS_OK;
    HANDLE                  hDevice;
    
    DPF_ENTER();

    hDevice = CreateFile(pszInterface, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, NULL);

    if(!IsValidHandleValue(hDevice))
    {
        DPF(DPFLVL_ERROR, "CreateFile failed to open %s with error %lu", pszInterface, GetLastError());
        hr = GetLastErrorToHRESULT();
    }

    if(SUCCEEDED(hr))
    {
        *phDevice = hDevice;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  OpenDeviceInterface
 *
 *  Description:
 *      Opens a device interface.
 *
 *  Arguments:
 *      PSP_DEVICE_INTERFACE_DATA [in]: device interface data.
 *      LPHANDLE [out]: receives device handle.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPnpHelper::OpenDeviceInterface"

HRESULT 
CPnpHelper::OpenDeviceInterface
(
    PSP_DEVICE_INTERFACE_DATA   pDeviceInterfaceData,
    LPHANDLE                    phDevice
)
{
    LPTSTR                      pszInterface    = NULL;
    HRESULT                     hr              = DS_OK;
    
    DPF_ENTER();

    hr = GetDeviceInterfacePath(pDeviceInterfaceData, &pszInterface);

    if(SUCCEEDED(hr))
    {
        hr = OpenDeviceInterface(pszInterface, phDevice);
    }

    MEMFREE(pszInterface);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\pnphlp.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       pnphlp.h
 *  Content:    PnP helper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  12/17/97    dereks  Created.
 *
 ***************************************************************************/

#ifndef __PNPHLP_H__
#define __PNPHLP_H__

#include <setupapi.h>
#include <cfgmgr32.h>

typedef struct tagDYNALOAD_SETUPAPI
{
    DYNALOAD    Header;

    // Begin function table...
    HDEVINFO (WINAPI *SetupDiGetClassDevs)(LPCGUID, LPCTSTR, HWND, DWORD);
    BOOL (WINAPI *SetupDiDestroyDeviceInfoList)(HDEVINFO);
    BOOL (WINAPI *SetupDiEnumDeviceInfo)(HDEVINFO, DWORD, PSP_DEVINFO_DATA);
    BOOL (WINAPI *SetupDiEnumDeviceInterfaces)(HDEVINFO, PSP_DEVINFO_DATA, LPCGUID, DWORD, PSP_DEVICE_INTERFACE_DATA);
    BOOL (WINAPI *SetupDiGetDeviceInterfaceDetail)(HDEVINFO, PSP_DEVICE_INTERFACE_DATA, PSP_DEVICE_INTERFACE_DETAIL_DATA, DWORD, LPDWORD, PSP_DEVINFO_DATA);
    HKEY (WINAPI *SetupDiOpenDevRegKey)(HDEVINFO, PSP_DEVINFO_DATA, DWORD, DWORD, DWORD, REGSAM);
    HKEY (WINAPI *SetupDiCreateDevRegKey)(HDEVINFO, PSP_DEVINFO_DATA, DWORD, DWORD, DWORD, HINF, PCSTR);
    BOOL (WINAPI *SetupDiGetDeviceRegistryProperty)(HDEVINFO, PSP_DEVINFO_DATA, DWORD, LPDWORD, LPBYTE, DWORD, LPDWORD); 
} DYNALOAD_SETUPAPI, *LPDYNALOAD_SETUPAPI;

#ifdef __cplusplus

// The PnP helper object
class CPnpHelper
    : public CDsBasicRuntime
{
private:
    DYNALOAD_SETUPAPI           m_dlSetupApi;
    HDEVINFO                    m_hDeviceInfoSet;

public:
    CPnpHelper(void);
    virtual ~CPnpHelper(void);

public:
    // Initialization
    virtual HRESULT Initialize(REFGUID, DWORD);

    // Devices
    virtual HRESULT EnumDevice(DWORD, PSP_DEVINFO_DATA);
    virtual HRESULT FindDevice(DWORD, PSP_DEVINFO_DATA);
    virtual HRESULT OpenDeviceRegistryKey(PSP_DEVINFO_DATA, DWORD, BOOL, PHKEY);
    virtual HRESULT GetDeviceRegistryProperty(PSP_DEVINFO_DATA, DWORD, LPDWORD, LPVOID, DWORD, LPDWORD);

    // Device interfaces
    virtual HRESULT EnumDeviceInterface(REFGUID, DWORD, PSP_DEVICE_INTERFACE_DATA);
    virtual HRESULT FindDeviceInterface(LPCTSTR, REFGUID, PSP_DEVICE_INTERFACE_DATA);
    virtual HRESULT GetDeviceInterfaceDeviceInfo(PSP_DEVICE_INTERFACE_DATA, PSP_DEVINFO_DATA);
    virtual HRESULT GetDeviceInterfaceDeviceInfo(LPCTSTR, REFGUID, PSP_DEVINFO_DATA);
    virtual HRESULT GetDeviceInterfacePath(PSP_DEVICE_INTERFACE_DATA, LPTSTR *);
    virtual HRESULT OpenDeviceInterfaceRegistryKey(LPCTSTR, REFGUID, DWORD, BOOL, PHKEY);
    virtual HRESULT GetDeviceInterfaceRegistryProperty(LPCTSTR, REFGUID, DWORD, LPDWORD, LPVOID, DWORD, LPDWORD);
    virtual HRESULT OpenDeviceInterface(LPCTSTR, LPHANDLE);
    virtual HRESULT OpenDeviceInterface(PSP_DEVICE_INTERFACE_DATA, LPHANDLE);

private:
    virtual HRESULT OpenDeviceInfoSet(REFGUID, DWORD, HDEVINFO *);
    virtual HRESULT CloseDeviceInfoSet(HDEVINFO);
};

#endif // __cplusplus

#endif // __PNPHLP_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\mxvad.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       mxvad.cpp
 *  Content:    DirectSound mixer virtual audio device class.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  4/29/98     dereks  Created
 *
 ***************************************************************************/

#include "dsoundi.h"


/***************************************************************************
 *
 *  CMxRenderDevice
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *     VADDEVICETYPE [in]: device type.
 *
 *  Returns:  
 *     (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMxRenderDevice::CMxRenderDevice"

CMxRenderDevice::CMxRenderDevice(VADDEVICETYPE vdt)
    : CRenderDevice(vdt)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CMxRenderDevice);

    // Initialize defaults
    m_pMixer = NULL;
    m_pMixDest = NULL;
    m_pwfxFormat = NULL;
    m_dwMixerState = VAD_BUFFERSTATE_STOPPED;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CMxRenderDevice
 *
 *  Description:
 *      Object destructor
 *
 *  Arguments:
 *     (void)
 *
 *  Returns:  
 *     (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMxRenderDevice::~CMxRenderDevice"

CMxRenderDevice::~CMxRenderDevice(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CMxRenderDevice);
    
    // Free the mixer    
    FreeMixer();

    DPF_LEAVE_VOID();    
}
    

/***************************************************************************
 *
 *  GetGlobalFormat
 *
 *  Description:
 *      Retrieves the format for the device.
 *
 *  Arguments:
 *      LPWAVEFORMATEX [out]: receives format.
 *      LPDWORD [in/out]: size of the above format.  On entry, this argument
 *                        contains the size of the buffer.  On exit, this
 *                        contains the required size of the buffer.  Call
 *                        this function twice: once to get the size, and
 *                        again to get the actual data.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMxRenderDevice::GetGlobalFormat"

HRESULT CMxRenderDevice::GetGlobalFormat(LPWAVEFORMATEX pwfxFormat, LPDWORD pdwSize)
{
    HRESULT                 hr;

    DPF_ENTER();
    
    ASSERT(m_pwfxFormat);
    
    hr = CopyWfxApi(m_pwfxFormat, pwfxFormat, pdwSize);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetGlobalFormat
 *
 *  Description:
 *      Sets the format for the device.
 *
 *  Arguments:
 *      LPWAVEFORMATEX [in]: new format
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMxRenderDevice::SetGlobalFormat"

HRESULT CMxRenderDevice::SetGlobalFormat(LPCWAVEFORMATEX pwfxFormat)
{
    HRESULT                                 hr              = DS_OK;
    CNode<CSecondaryRenderWaveBuffer *> *   pBufferNode;
    DWORD                                   dwMixerState;
    HRESULT                                 hrTemp;
    LPVOID                                  pvLock;
    DWORD                                   cbLock;

#ifdef DEBUG

    DWORD                                   dwState;

#endif // DEBUG

    DPF_ENTER();
    
    // We only support PCM
    if(!IsValidPcmWfx(pwfxFormat))
    {
        hr = DSERR_BADFORMAT;
    }

    // Suspend all playing software secondary buffers
    if(SUCCEEDED(hr))
    {
        for(pBufferNode = m_lstSecondaryBuffers.GetListHead(); pBufferNode; pBufferNode = pBufferNode->m_pNext)
        {
            // Note: CVxdSecondaryRenderWaveBuffer::SetState ignores
            // the SUSPEND flag.

#ifdef DEBUG

            hrTemp = pBufferNode->m_data->GetState(&dwState);
            ASSERT(SUCCEEDED(hrTemp) && !(dwState & VAD_BUFFERSTATE_SUSPEND));

#endif // DEBUG

            hrTemp = pBufferNode->m_data->SetState(VAD_BUFFERSTATE_SUSPEND);

            if(FAILED(hrTemp))
            {
                RPF(DPFLVL_ERROR, "Unable to suspend software secondary buffer");
            }
        }
    
        // Stop the mixer
        dwMixerState = m_dwMixerState;
        SetMixerState(VAD_BUFFERSTATE_STOPPED);

        // Set the mixer destination format
        hr = m_pMixDest->SetFormat((LPWAVEFORMATEX)pwfxFormat);
    
        if(FAILED(hr))
        {
            // Uh-oh.  Try to put the format back the way it was.
            pwfxFormat = m_pwfxFormat;
            hrTemp = m_pMixDest->SetFormat((LPWAVEFORMATEX)pwfxFormat);

            if(FAILED(hrTemp))
            {
                RPF(DPFLVL_ERROR, "Unable to restore orignal device format");
            }
        }

        // Fill the mixer destination with silence
        if(SUCCEEDED(hr))
        {
            hrTemp = LockMixerDestination(0, MAX_DWORD, &pvLock, &cbLock, NULL, NULL);

            if(SUCCEEDED(hrTemp))
            {
                FillSilence(pvLock, cbLock, pwfxFormat->wBitsPerSample);
            }

            if(SUCCEEDED(hrTemp))
            {
                hrTemp = UnlockMixerDestination(pvLock, cbLock, 0, 0);
            }

            if(FAILED(hrTemp))
            {
                RPF(DPFLVL_ERROR, "Unable to fill primary buffer with silence");
            }
        }

        // Restart the mixer
        SetMixerState(dwMixerState);

        // Restart all suspended buffers
        for(pBufferNode = m_lstSecondaryBuffers.GetListHead(); pBufferNode; pBufferNode = pBufferNode->m_pNext)
        {
            hrTemp = pBufferNode->m_data->SetState(VAD_BUFFERSTATE_SUSPEND);

            if(FAILED(hrTemp))
            {
                RPF(DPFLVL_ERROR, "Unable to restart suspended software secondary buffer");
            }
        }

        // Update the local copy of the format
        if(SUCCEEDED(hr) && pwfxFormat != m_pwfxFormat)
        {
            MEMFREE(m_pwfxFormat);

            m_pwfxFormat = CopyWfxAlloc(pwfxFormat);
            hr = HRFROMP(m_pwfxFormat);
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CreateEmulatedSecondaryBuffer
 *
 *  Description:
 *      Creates a secondary wave buffer.
 *
 *  Arguments:
 *      LPCVADRBUFFERDESC [in]: buffer description.
 *      LPVOID [in]: buffer instace identifier.
 *      CSecondaryRenderWaveBuffer ** [out]: receives pointer to new wave 
 *                                           buffer.  Use Release to free 
 *                                           this object.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMxRenderDevice::CreateEmulatedSecondaryBuffer"

HRESULT CMxRenderDevice::CreateEmulatedSecondaryBuffer(LPCVADRBUFFERDESC pDesc, LPVOID pvInstance, CSysMemBuffer *pSysMemBuffer, CEmSecondaryRenderWaveBuffer **ppBuffer)
{
    CEmSecondaryRenderWaveBuffer *  pBuffer = NULL;
    HRESULT                         hr      = DS_OK;
    
    DPF_ENTER();
    
    pBuffer = NEW(CEmSecondaryRenderWaveBuffer(this, pvInstance));
    hr = HRFROMP(pBuffer);

    if(SUCCEEDED(hr))
    {
        hr = pBuffer->Initialize(pDesc, NULL, pSysMemBuffer);
    }

    if(SUCCEEDED(hr))
    {
        *ppBuffer = pBuffer;
    }
    else
    {
        RELEASE(pBuffer);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CreateMixer
 *
 *  Description:
 *      Creates and initializes the mixer and mixer destination.
 *
 *  Arguments:
 *      CMixDest * [in]: mixer destination object pointer.  This object
 *                       should only be allocated, not actually initialized.
 *      LPWAVEFORMATEX [in]: mixer format.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMxRenderDevice::CreateMixer"

HRESULT CMxRenderDevice::CreateMixer(CMixDest *pMixDest, LPCWAVEFORMATEX pwfxFormat)
{
    HRESULT                 hr;

    DPF_ENTER();

    ASSERT(!m_pMixDest);
    ASSERT(!m_pMixer);
    ASSERT(!m_pwfxFormat);

    // Save the mixer destination pointer
    m_pMixDest = pMixDest;

    // Save a copy of the format
    m_pwfxFormat = CopyWfxAlloc(pwfxFormat);
    hr = HRFROMP(m_pwfxFormat);

    // Set the mixer destination format information
    if(SUCCEEDED(hr))
    {
        m_pMixDest->SetFormatInfo((LPWAVEFORMATEX)pwfxFormat);
    }

    // Initialize the destination
    if(SUCCEEDED(hr))
    {
        hr = m_pMixDest->Initialize();
    }

    // Create the mixer
    if(SUCCEEDED(hr))
    {
        hr = m_pMixDest->AllocMixer(&m_pMixer);
    }

    // Set the mixer destination format
    if(SUCCEEDED(hr))
    {
        hr = m_pMixDest->SetFormat((LPWAVEFORMATEX)pwfxFormat);
    }

    // Start the mixer running
    if(SUCCEEDED(hr))
    {
        hr = SetMixerState(VAD_BUFFERSTATE_STOPPED | VAD_BUFFERSTATE_WHENIDLE);
    }

    // Clean up
    // FIXME -- We are going to end up freeing m_pMixDest, but we didn't
    // Allocate it
    if(FAILED(hr))
    {
        FreeMixer();
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  FreeMixer
 *
 *  Description:
 *      Frees the mixer and mixer destination objects.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMxRenderDevice::FreeMixer"

void CMxRenderDevice::FreeMixer(void)
{
    DPF_ENTER();

    if(m_pMixDest)
    {
        if(m_pMixer) 
        {
            m_pMixer->Stop();
        }

        m_pMixDest->Stop();
        m_pMixDest->Terminate();
        
        if (m_pMixer)
        {
            m_pMixDest->FreeMixer();
            m_pMixer = NULL;
        }

        //FIXME -- We didn't allocate this, but we're going to free it!
        DELETE(m_pMixDest);
    }

    DELETE(m_pwfxFormat);

    m_dwMixerState = VAD_BUFFERSTATE_STOPPED;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  SetMixerState
 *
 *  Description:
 *      Sets mixer state.
 *
 *  Arguments:
 *      DWORD [in]: mixer state.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMxRenderDevice::SetMixerState"

HRESULT CMxRenderDevice::SetMixerState(DWORD dwState)
{
    const DWORD             dwValidMask = VAD_BUFFERSTATE_STARTED | VAD_BUFFERSTATE_LOOPING | VAD_BUFFERSTATE_WHENIDLE;
    HRESULT                 hr          = DS_OK;
    
    DPF_ENTER();
    ENTER_MIXER_MUTEX();

    ASSERT(IS_VALID_FLAGS(dwState, dwValidMask));
    
    // Update the mixer and mixer destination states
    if(dwState & VAD_BUFFERSTATE_STARTED)
    {
        ASSERT(dwState & VAD_BUFFERSTATE_LOOPING);
        
        if(dwState & VAD_BUFFERSTATE_WHENIDLE)
        {
            m_pMixer->PlayWhenIdle();
            hr = m_pMixer->Run();
        }
        else
        {
            m_pMixer->Stop();
            m_pMixDest->Play();
        }
    }
    else
    {
        if(dwState & VAD_BUFFERSTATE_WHENIDLE)
        {
            m_pMixer->StopWhenIdle();
            hr = m_pMixer->Run();
        }
        else
        {
            m_pMixer->Stop();
            m_pMixDest->Stop();
        }
    }

    // Save a copy of the new state
    DPF(DPFLVL_INFO, "Mixer state set to 0x%8.8lX", dwState);
    m_dwMixerState = dwState;

    LEAVE_MIXER_MUTEX();
    DPF_LEAVE_HRESULT(hr);

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\perf.h ===
/***************************************************************************
 *
 *  Copyright (C) 2000-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       perf.h
 *  Content:    DirectSound object implementation
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  11/29/00    arthurz Created
 *
 ***************************************************************************/

#ifndef __PERF_H__
#define __PERF_H__

#ifdef __cplusplus

#include <dxmperf.h>

void InitializePerflog(void);

class BufferPerfState
{
public:
    BufferPerfState(CDirectSoundSecondaryBuffer*);
    ~BufferPerfState();
    void Reset();
    void OnUnlockBuffer(DWORD dwOffset, DWORD dwSize);

private:
    LARGE_INTEGER* GetRegion(DWORD dwOffset) {return m_liRegionMap + dwOffset/m_nBytesPerRegion;}

    CDirectSoundSecondaryBuffer* m_pBuffer;
    LONGLONG m_llBufferDuration; // Measured in QPC ticks
    DWORD m_dwBufferSize;
    int m_nBytesPerRegion;
    LARGE_INTEGER* m_liRegionMap;
    LONGLONG m_llLastStateChangeTime; // Stores the last QPC tick count when the buffer unlock code was last called.
    BOOL m_fGlitchState; // Stores the last state (Glitch or no Glitch) when the buffer unlock code was last called.
};

#endif // __cplusplus
#endif // __PERF_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\perf.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 2000-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       perf.cpp
 *  Content:    Glitch instrumentation.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  11/29/00    arthurz Created
 *  03/19/01    duganp  Fixed memory corruption, tidied up
 *
 ***************************************************************************/

#include "dsoundi.h"

#ifdef ENABLE_PERFLOG

// Performance logging parameters
struct {
    PERFLOG_LOGGING_PARAMS Params;
    TRACE_GUID_REGISTRATION TraceGuids[1];
} g_perflogParams;

LARGE_INTEGER g_PerfFrequency;
LONGLONG g_TicksPerRegion;

// Prototypes
void OnPerflogStateChanged(void);


/***************************************************************************
 *
 *  InitializePerflog
 *
 *  Description:
 *      This routine initializes performance logging.
 *
 *  Arguments:
 *      None.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "InitializePerflog"

void InitializePerflog(void)
{
    DPF_ENTER();

    QueryPerformanceFrequency(&g_PerfFrequency);
    g_TicksPerRegion = g_PerfFrequency.QuadPart / 64;

    g_perflogParams.Params.ControlGuid = GUID_DSHOW_CTL;
    g_perflogParams.Params.OnStateChanged = OnPerflogStateChanged;
    g_perflogParams.Params.NumberOfTraceGuids = 1;
    g_perflogParams.Params.TraceGuids[0].Guid = &GUID_DSOUNDGLITCH;

    PerflogInitialize(&g_perflogParams.Params);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  OnPerflogStateChanged
 *
 *  Description:
 *      This routine is called whenever the perf logging state changes,
 *      e.g. a logging client becomes active.
 *
 *  Arguments:
 *      None.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "OnPerflogStateChanged"

void OnPerflogStateChanged(void)
{
    CNode<CDirectSound*>* pDsObj;
    CNode<CDirectSoundSecondaryBuffer*>* pDsBuf;
    DPF_ENTER();

    //
    // Enumerate existing buffers.
    //

    for (pDsObj = g_pDsAdmin->m_lstDirectSound.GetListHead();
         pDsObj != NULL;
         pDsObj = pDsObj->m_pNext)
    {
        for (pDsBuf = pDsObj->m_data->m_lstSecondaryBuffers.GetListHead();
             pDsBuf != NULL;
             pDsBuf = pDsBuf->m_pNext)
        {
            BufferPerfState* PerfState = NEW(BufferPerfState(pDsBuf->m_data));
            if (PerfState != NULL)
            {
                DELETE(pDsBuf->m_data->m_pPerfState);
                pDsBuf->m_data->m_pPerfState = PerfState;
            }
        }
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  BufferPerfState constructor/destructor.
 *
 ***************************************************************************/

BufferPerfState::BufferPerfState(CDirectSoundSecondaryBuffer* pBuffer)
{
    m_pBuffer = pBuffer;
    m_liRegionMap = NULL;
    m_fGlitchState = GLITCHTYPE_DSOUNDFIRSTGOOD;
    m_llLastStateChangeTime = 0;
}

BufferPerfState::~BufferPerfState()
{
    MEMFREE(m_liRegionMap);
}


/***************************************************************************
 *
 *  Reset
 *
 *  Description:
 *      This routine resets the internal state. Following this call,
 *      the buffer is considered up-to-date.
 *
 *  Arguments:
 *      None.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

void BufferPerfState::Reset()
{
    //
    // Calculate buffer duration.
    //

    m_dwBufferSize = m_pBuffer->GetBufferSize();

    double dBufferDurationInSecs = double(m_dwBufferSize) /
                                   double(m_pBuffer->Format()->nAvgBytesPerSec);


    m_llBufferDuration = LONGLONG(dBufferDurationInSecs * double(g_PerfFrequency.QuadPart));

    m_nBytesPerRegion = m_pBuffer->Format()->nAvgBytesPerSec / 64;

    //
    // Reset the region list (mark everything as updated right now).
    //

    LARGE_INTEGER liTimeStamp;
    QueryPerformanceCounter(&liTimeStamp);

    // This division needs to round up, or we'll corrupt memory in OnUnlockBuffer:
    int nNumberOfRegions = (m_dwBufferSize + m_nBytesPerRegion - 1) / m_nBytesPerRegion;

    MEMFREE(m_liRegionMap);
    m_liRegionMap = MEMALLOC_A(LARGE_INTEGER, nNumberOfRegions);
    if (m_liRegionMap == NULL) {
        return;
    }

    LARGE_INTEGER* pRegion = m_liRegionMap;
    LARGE_INTEGER* pMaxRegion = m_liRegionMap + nNumberOfRegions;

    while (pRegion < pMaxRegion) {
        pRegion->QuadPart = liTimeStamp.QuadPart;
        pRegion += 1;
    }
}


/***************************************************************************
 *
 *  OnUnlockBuffer
 *
 *  Description:
 *      This routine analyzes the buffer state to determine if a glitch
 *      occurred, and updates the state.
 *
 *  Arguments:
 *      Region offset (relative to the beginning of the buffer)
 *      and size (in bytes).
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

void BufferPerfState::OnUnlockBuffer(DWORD dwOffset, DWORD dwSize)
{
    DWORD dwPlayCursor;
    DWORD dwMaxOffset;
    LONGLONG llLag;
    LARGE_INTEGER liPerfCounter;
    LARGE_INTEGER* liRegionTimeStamp;
    HRESULT hr;
    DWORD dwGlitch = GLITCHTYPE_DSOUNDFIRSTGOOD;

    //
    // Protect against unforseen circumstances.
    //

    if (m_liRegionMap == NULL) {
        return;
    }

    QueryPerformanceCounter(&liPerfCounter);

    ENTER_DLL_MUTEX();
    hr = m_pBuffer->GetInternalCursors(&dwPlayCursor, NULL);
    LEAVE_DLL_MUTEX();

    dwMaxOffset = dwOffset + dwSize;

    for (; dwOffset < dwMaxOffset; dwOffset += m_nBytesPerRegion) {

        liRegionTimeStamp = GetRegion(dwOffset);

        //
        // Figure out how far behind the current play cursor we are.
        //

        if (dwPlayCursor < dwOffset) {
            llLag = (LONGLONG)(m_dwBufferSize - dwOffset + dwPlayCursor);
        }
        else {
            llLag = (LONGLONG)(dwPlayCursor - dwOffset);
        }

        llLag = llLag * g_TicksPerRegion / (LONGLONG)m_nBytesPerRegion;    // [llLag] = Ticks

        //
        // Detect a glitch.
        //

        if (liPerfCounter.QuadPart - liRegionTimeStamp->QuadPart >= llLag + m_llBufferDuration) {
            dwGlitch = GLITCHTYPE_DSOUNDFIRSTBAD;
        }

        //
        // Update region.
        //

        liRegionTimeStamp->QuadPart = liPerfCounter.QuadPart;
    }


    if (SUCCEEDED(hr)) {

        // We log a glitch only when the current state is different from the last state,
        // as we are interested only in transitions.  In logging the glitch, we return
        // the last time the buffer was in the other state, as this helps in determining
        // the length of time the buffer is in a certain state.

        if (m_fGlitchState != dwGlitch) {
            PERFLOG_AUDIOGLITCH(ULONG_PTR(this), dwGlitch, liPerfCounter.QuadPart, m_llLastStateChangeTime);
            m_fGlitchState = dwGlitch;
        }
        m_llLastStateChangeTime = liPerfCounter.QuadPart;
    }
}

#endif // ENABLE_PERFLOG
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\pset.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       pset.cpp
 *  Content:    Property Set object.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  7/29/98     dereks  Created
 *
 ***************************************************************************/

#include "dsoundi.h"


/***************************************************************************
 *
 *  CPropertySet
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPropertySet::CPropertySet"

CPropertySet::CPropertySet(void)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CPropertySet);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CPropertySet
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPropertySet::~CPropertySet"

CPropertySet::~CPropertySet(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CPropertySet);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CPropertySetHandler
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPropertySetHandler::CPropertySetHandler"

CPropertySetHandler::CPropertySetHandler(void)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CPropertySetHandler);
    
    // Initialize defaults
    m_aPropertySets = NULL;
    m_cPropertySets = 0;
    m_pvContext = NULL;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CPropertySetHandler
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPropertySetHandler::~CPropertySetHandler"

CPropertySetHandler::~CPropertySetHandler(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CPropertySetHandler);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  SetHandlerData
 *
 *  Description:
 *      Sets up the handler data structures.
 *
 *  Arguments:
 *      LPPROPERTYSET [in]: property set handler data.
 *      ULONG [in]: count of items in the above array.
 *      LPVOID [in]: context argument passed to handler functions.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPropertySetHandler::SetHandlerData"

void
CPropertySetHandler::SetHandlerData
(
    LPCPROPERTYSET          aPropertySets, 
    ULONG                   cPropertySets, 
    LPVOID                  pvContext
)
{
    DPF_ENTER();

    m_aPropertySets = aPropertySets;
    m_cPropertySets = cPropertySets;
    m_pvContext = pvContext;    

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  QuerySupport
 *
 *  Description:
 *      Queries for support of a particular property.
 *
 *  Arguments:
 *      REFGUID [in]: property set id.
 *      ULONG [in]: property id.
 *      PULONG [out]: receives support bits.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPropertySetHandler::QuerySupport"

HRESULT 
CPropertySetHandler::QuerySupport
(
    REFGUID                 guidPropertySet, 
    ULONG                   ulProperty, 
    PULONG                  pulSupportFlags
)
{
    HRESULT                 hr          = DS_OK;
    LPCPROPERTYHANDLER      pHandler;

    DPF_ENTER();
    
    pHandler = GetPropertyHandler(guidPropertySet, ulProperty);

    if(pHandler)
    {
        ASSERT(pHandler->pfnGetHandler || pHandler->pfnSetHandler);
        
        *pulSupportFlags = 0;
    
        if(pHandler->pfnGetHandler)
        {
            *pulSupportFlags |= KSPROPERTY_SUPPORT_GET;
        }

        if(pHandler->pfnSetHandler)
        {
            *pulSupportFlags |= KSPROPERTY_SUPPORT_SET;
        }
    }
    else
    {
        hr = UnsupportedQueryHandler(guidPropertySet, ulProperty, pulSupportFlags);
    }

    DPF_LEAVE(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetProperty
 *
 *  Description:
 *      Gets the value of a particular property.
 *
 *  Arguments:
 *      REFGUID [in]: property set id.
 *      ULONG [in]: property id.
 *      LPVOID [in]: property parameters.
 *      ULONG [in]: property parameters size.
 *      LPVOID [in/out]: property data.
 *      PULONG [in/out]: property data size.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPropertySetHandler::GetProperty"

HRESULT 
CPropertySetHandler::GetProperty
(
    REFGUID                 guidPropertySet, 
    ULONG                   ulProperty, 
    LPVOID                  pvParam, 
    ULONG                   cbParam, 
    LPVOID                  pvData, 
    PULONG                  pcbData
)
{
    HRESULT                 hr          = DS_OK;
    LPCPROPERTYHANDLER      pHandler;

    DPF_ENTER();
    
    pHandler = GetPropertyHandler(guidPropertySet, ulProperty);

    if(pHandler)
    {
        if(!pHandler->pfnGetHandler)
        {
            RPF(DPFLVL_ERROR, "Property %lu in set " DPF_GUID_STRING " does not support the Get method", ulProperty, DPF_GUID_VAL(guidPropertySet));
            hr = DSERR_UNSUPPORTED;
        }

        if(SUCCEEDED(hr))
        {
            if(pHandler->cbData && *pcbData < pHandler->cbData)
            {
                if(*pcbData)
                {
                    RPF(DPFLVL_ERROR, "Data buffer too small");
                    hr = DSERR_INVALIDPARAM;
                }

                *pcbData = pHandler->cbData;
            }
            else
            {
                hr = pHandler->pfnGetHandler(m_pvContext, pvData, pcbData);
            }
        }
    }
    else
    {
        hr = UnsupportedGetHandler(guidPropertySet, ulProperty, pvParam, cbParam, pvData, pcbData);
    }

    DPF_LEAVE(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetProperty
 *
 *  Description:
 *      Sets the value of a particular property.
 *
 *  Arguments:
 *      REFGUID [in]: property set id.
 *      ULONG [in]: property id.
 *      LPVOID [in]: property parameters.
 *      ULONG [in]: property parameters size.
 *      LPVOID [in]: property data.
 *      ULONG [in]: property data size.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPropertySetHandler::SetProperty"

HRESULT CPropertySetHandler::SetProperty
(
    REFGUID                 guidPropertySet, 
    ULONG                   ulProperty, 
    LPVOID                  pvParam, 
    ULONG                   cbParam, 
    LPVOID                  pvData, 
    ULONG                   cbData
)
{
    HRESULT                 hr          = DS_OK;
    LPCPROPERTYHANDLER      pHandler;

    DPF_ENTER();
    
    pHandler = GetPropertyHandler(guidPropertySet, ulProperty);

    if(pHandler)
    {
        if(!pHandler->pfnSetHandler)
        {
            RPF(DPFLVL_ERROR, "Property %lu in set " DPF_GUID_STRING " does not support the Set method", ulProperty, DPF_GUID_VAL(guidPropertySet));
            hr = DSERR_UNSUPPORTED;
        }

        if(SUCCEEDED(hr) && cbData < pHandler->cbData)
        {
            RPF(DPFLVL_ERROR, "Data buffer too small");
            hr = DSERR_INVALIDPARAM;
        }
    
        if(SUCCEEDED(hr))
        {
            ASSERT(!pvParam);
            ASSERT(!cbParam);
            
            hr = pHandler->pfnSetHandler(m_pvContext, pvData, cbData);
        }
    }
    else
    {
        hr = UnsupportedSetHandler(guidPropertySet, ulProperty, pvParam, cbParam, pvData, cbData);
    }

    DPF_LEAVE(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetPropertyHandler
 *
 *  Description:
 *      Gets a pointer to the property handler for a given property.
 *
 *  Arguments:
 *      REFGUID [in]: property set identifier.
 *      ULONG [in]: property identifier.
 *
 *  Returns:  
 *      LPCPROPERTYHANDLER: property handler, or NULL on error.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPropertySetHandler::GetPropertyHandler"

LPCPROPERTYHANDLER 
CPropertySetHandler::GetPropertyHandler
(
    REFGUID                     guidPropertySet,
    ULONG                       ulProperty
)
{
    LPCPROPERTYHANDLER          pHandler        = NULL;
    ULONG                       ulSetIndex;
    ULONG                       ulPropertyIndex;
    
    DPF_ENTER();

    for(ulSetIndex = 0; ulSetIndex < m_cPropertySets && !pHandler; ulSetIndex++)
    {
        if(IsEqualGUID(guidPropertySet, *m_aPropertySets[ulSetIndex].pguidPropertySetId))
        {
            for(ulPropertyIndex = 0; ulPropertyIndex < m_aPropertySets[ulSetIndex].cProperties && !pHandler; ulPropertyIndex++)
            {
                if(ulProperty == m_aPropertySets[ulSetIndex].aPropertyHandlers[ulPropertyIndex].ulProperty)
                {
                    pHandler = &m_aPropertySets[ulSetIndex].aPropertyHandlers[ulPropertyIndex];
                }
            }
        }
    }

    DPF_LEAVE(pHandler);

    return pHandler;
}


/***************************************************************************
 *
 *  CWrapperPropertySet
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      C3dListener * [in]: pointer to the owning listener.
 *      REFGUID [in]: 3D algorithm.
 *      DWORD [in]: buffer frequency.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CWrapperPropertySet::CWrapperPropertySet"

CWrapperPropertySet::CWrapperPropertySet
(
    void
)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CWrapperPropertySet);

    // Initialize defaults
    m_pPropertySet = NULL;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CWrapperPropertySet
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CWrapperPropertySet::~CWrapperPropertySet"

CWrapperPropertySet::~CWrapperPropertySet(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CWrapperPropertySet);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  SetObjectPointer
 *
 *  Description:
 *      Sets the real property set object pointer.
 *
 *  Arguments:
 *      CPropertySet * [in]: property set object pointer.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CWrapperPropertySet::SetObjectPointer"

HRESULT 
CWrapperPropertySet::SetObjectPointer
(
    CPropertySet *          pPropertySet
)
{
    DPF_ENTER();

    m_pPropertySet = pPropertySet;

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  QuerySupport
 *
 *  Description:
 *      Queries for support of a particular property.
 *
 *  Arguments:
 *      REFGUID [in]: property set id.
 *      ULONG [in]: property id.
 *      PULONG [out]: receives support bits.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CWrapperPropertySet::QuerySupport"

HRESULT 
CWrapperPropertySet::QuerySupport
(
    REFGUID                 guidPropertySet, 
    ULONG                   ulProperty, 
    PULONG                  pulSupportFlags
)
{
    HRESULT                 hr  = DSERR_UNSUPPORTED;

    DPF_ENTER();
    
    if(m_pPropertySet)
    {
        hr = m_pPropertySet->QuerySupport(guidPropertySet, ulProperty, pulSupportFlags);
    }

    DPF_LEAVE(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetProperty
 *
 *  Description:
 *      Gets the value of a particular property.
 *
 *  Arguments:
 *      REFGUID [in]: property set id.
 *      ULONG [in]: property id.
 *      LPVOID [in]: property parameters.
 *      ULONG [in]: property parameters size.
 *      LPVOID [in/out]: property data.
 *      PULONG [in/out]: property data size.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CWrapperPropertySet::GetProperty"

HRESULT 
CWrapperPropertySet::GetProperty
(
    REFGUID                 guidPropertySet, 
    ULONG                   ulProperty, 
    LPVOID                  pvParam, 
    ULONG                   cbParam, 
    LPVOID                  pvData, 
    PULONG                  pcbData
)
{
    HRESULT                 hr  = DSERR_UNSUPPORTED;

    DPF_ENTER();
    
    if(m_pPropertySet)
    {
        hr = m_pPropertySet->GetProperty(guidPropertySet, ulProperty, pvParam, cbParam, pvData, pcbData);
    }

    DPF_LEAVE(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetProperty
 *
 *  Description:
 *      Sets the value of a particular property.
 *
 *  Arguments:
 *      REFGUID [in]: property set id.
 *      ULONG [in]: property id.
 *      LPVOID [in]: property parameters.
 *      ULONG [in]: property parameters size.
 *      LPVOID [in]: property data.
 *      ULONG [in]: property data size.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CWrapperPropertySet::SetProperty"

HRESULT CWrapperPropertySet::SetProperty
(
    REFGUID                 guidPropertySet, 
    ULONG                   ulProperty, 
    LPVOID                  pvParam, 
    ULONG                   cbParam, 
    LPVOID                  pvData, 
    ULONG                   cbData
)
{
    HRESULT                 hr  = DSERR_UNSUPPORTED;

    DPF_ENTER();
    
    if(m_pPropertySet)
    {
        hr = m_pPropertySet->SetProperty(guidPropertySet, ulProperty, pvParam, cbParam, pvData, cbData);
    }

    DPF_LEAVE(hr);

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\pset.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       pset.h
 *  Content:    Property Set object.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  7/29/98     dereks  Created
 *
 ***************************************************************************/

#ifndef __PSET_H__
#define __PSET_H__

typedef HRESULT (WINAPI *LPFNGETHANDLER)(LPVOID, LPVOID, PULONG);
typedef HRESULT (WINAPI *LPFNSETHANDLER)(LPVOID, LPVOID, ULONG);

typedef struct tagPROPERTYHANDLER
{
    ULONG                   ulProperty;
    LPFNGETHANDLER          pfnGetHandler;
    LPFNSETHANDLER          pfnSetHandler;
    ULONG                   cbData;
} PROPERTYHANDLER, *LPPROPERTYHANDLER;

typedef const PROPERTYHANDLER *LPCPROPERTYHANDLER;

typedef struct tagPROPERTYSET
{
    LPCGUID                 pguidPropertySetId;
    ULONG                   cProperties;
    LPCPROPERTYHANDLER      aPropertyHandlers;
} PROPERTYSET, *LPPROPERTYSET;

typedef const PROPERTYSET *LPCPROPERTYSET;

#define GET_PROPERTY_HANDLER_NAME(set) \
            m_aPropertyHandlers_##set

#define BEGIN_DECLARE_PROPERTY_HANDLERS(classname, set) \
            const PROPERTYHANDLER classname##::##GET_PROPERTY_HANDLER_NAME(set)##[] = \
            {

#define DECLARE_PROPERTY_HANDLER3(property, get, set, datasize) \
                { \
                    property, \
                    (LPFNGETHANDLER)(get), \
                    (LPFNSETHANDLER)(set), \
                    datasize \
                },

#define DECLARE_PROPERTY_HANDLER2(property, get, set, datatype) \
                DECLARE_PROPERTY_HANDLER3(property, get, set, sizeof(datatype))

#define DECLARE_PROPERTY_HANDLER(property, get, set) \
                DECLARE_PROPERTY_HANDLER2(property, get, set, property##_DATA)

#define END_DECLARE_PROPERTY_HANDLERS() \
            };

#define BEGIN_DECLARE_PROPERTY_SETS(classname, membername) \
            const PROPERTYSET classname##::##membername##[] = \
            {

#define DECLARE_PROPERTY_SET(classname, set) \
                { \
                    &##set, \
                    NUMELMS(classname##::##GET_PROPERTY_HANDLER_NAME(set)), \
                    classname##::##GET_PROPERTY_HANDLER_NAME(set) \
                },

#define END_DECLARE_PROPERTY_SETS() \
            };

#define DECLARE_PROPERTY_HANDLER_DATA_MEMBER(set) \
    static const PROPERTYHANDLER GET_PROPERTY_HANDLER_NAME(set)[];

#define DECLARE_PROPERTY_SET_DATA_MEMBER(membername) \
    static const PROPERTYSET membername##[];

#ifdef __cplusplus

// Base class for property set objects
class CPropertySet
    : public CDsBasicRuntime
{
public:
    CPropertySet(void);
    virtual ~CPropertySet(void);

public:
    // Property support
    virtual HRESULT QuerySupport(REFGUID, ULONG, PULONG) = 0;
    
    // Property data
    virtual HRESULT GetProperty(REFGUID, ULONG, LPVOID, ULONG, LPVOID, PULONG) = 0;
    virtual HRESULT SetProperty(REFGUID, ULONG, LPVOID, ULONG, LPVOID, ULONG) = 0;
};

// Property set handler object
class CPropertySetHandler
{
private:
    LPCPROPERTYSET          m_aPropertySets;    // Supported property sets
    ULONG                   m_cPropertySets;    // Count of supported property sets
    LPVOID                  m_pvContext;        // Context argument

public:
    CPropertySetHandler(void);
    virtual ~CPropertySetHandler(void);

public:
    // Property handler setup
    virtual void SetHandlerData(LPCPROPERTYSET, ULONG, LPVOID);
    
    // Property support
    virtual HRESULT QuerySupport(REFGUID, ULONG, PULONG);
    
    // Property data
    virtual HRESULT GetProperty(REFGUID, ULONG, LPVOID, ULONG, LPVOID, PULONG);
    virtual HRESULT SetProperty(REFGUID, ULONG, LPVOID, ULONG, LPVOID, ULONG);

protected:
    // Unsupported property handlers
    virtual HRESULT UnsupportedQueryHandler(REFGUID, ULONG, PULONG);
    virtual HRESULT UnsupportedGetHandler(REFGUID, ULONG, LPVOID, ULONG, LPVOID, PULONG);
    virtual HRESULT UnsupportedSetHandler(REFGUID, ULONG, LPVOID, ULONG, LPVOID, ULONG);

private:
    // The proper handler
    virtual LPCPROPERTYHANDLER GetPropertyHandler(REFGUID, ULONG);
};

inline HRESULT CPropertySetHandler::UnsupportedQueryHandler(REFGUID, ULONG, PULONG)
{
    return DSERR_UNSUPPORTED;
}

inline HRESULT CPropertySetHandler::UnsupportedGetHandler(REFGUID, ULONG, LPVOID, ULONG, LPVOID, PULONG)
{
    return DSERR_UNSUPPORTED;
}

inline HRESULT CPropertySetHandler::UnsupportedSetHandler(REFGUID, ULONG, LPVOID, ULONG, LPVOID, ULONG)
{
    return DSERR_UNSUPPORTED;
}

// Wrapper property set object
class CWrapperPropertySet
    : public CPropertySet
{
protected:
    CPropertySet *          m_pPropertySet; // Pointer to the real property set object

public:
    CWrapperPropertySet(void);
    virtual ~CWrapperPropertySet(void);

public:
    // The actual property set object
    virtual HRESULT SetObjectPointer(CPropertySet *);

    // Property support
    virtual HRESULT QuerySupport(REFGUID, ULONG, PULONG);
    
    // Property data
    virtual HRESULT GetProperty(REFGUID, ULONG, LPVOID, ULONG, LPVOID, PULONG);
    virtual HRESULT SetProperty(REFGUID, ULONG, LPVOID, ULONG, LPVOID, ULONG);
};

#endif // __cplusplus

#endif // __PSET_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\reghlp.c ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       reghlp.c
 *  Content:    Registry helper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  5/6/98      dereks  Created.
 *
 ***************************************************************************/

#include "dsoundi.h"


/***************************************************************************
 *
 *  RhRegOpenKey
 *
 *  Description:
 *      Opens a registry key.
 *
 *  Arguments:
 *      HKEY [in]: parent key.
 *      LPTSTR [in]: subkey name.
 *      DWORD [in]: flags.
 *      PHKEY [out]: receives key handle.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "RhRegOpenKeyA"

HRESULT RhRegOpenKeyA(HKEY hkeyParent, LPCSTR pszName, DWORD dwFlags, PHKEY phkey)
{
    HRESULT                 hr  = DSERR_GENERIC;
    LONG                    lr;
    UINT                    i;

    DPF_ENTER();

    for(i = 0; i < NUMELMS(g_arsRegOpenKey) && FAILED(hr); i++)
    {
        lr = RegOpenKeyExA(hkeyParent, pszName, 0, g_arsRegOpenKey[i], phkey);
        hr = WIN32ERRORtoHRESULT(lr);
    }

    if(FAILED(hr) && (dwFlags & REGOPENKEY_ALLOWCREATE))
    {
        lr = RegCreateKeyA(hkeyParent, pszName, phkey);
        hr = WIN32ERRORtoHRESULT(lr);
    }

    if(FAILED(hr))
    {
        DPF(DPFLVL_MOREINFO, "Unable to open 0x%p\\%s", hkeyParent, pszName);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


#undef DPF_FNAME
#define DPF_FNAME "RhRegOpenKeyW"

HRESULT RhRegOpenKeyW(HKEY hkeyParent, LPCWSTR pszName, DWORD dwFlags, PHKEY phkey)
{
    HRESULT                 hr  = DSERR_GENERIC;
    LONG                    lr;
    UINT                    i;

    DPF_ENTER();

    for(i = 0; i < NUMELMS(g_arsRegOpenKey) && FAILED(hr); i++)
    {
        lr = RegOpenKeyExW(hkeyParent, pszName, 0, g_arsRegOpenKey[i], phkey);
        hr = WIN32ERRORtoHRESULT(lr);
    }

    if(FAILED(hr) && (dwFlags & REGOPENKEY_ALLOWCREATE))
    {
        lr = RegCreateKeyW(hkeyParent, pszName, phkey);
        hr = WIN32ERRORtoHRESULT(lr);
    }

    if(FAILED(hr))
    {
        DPF(DPFLVL_MOREINFO, "Unable to open 0x%p\\%ls", hkeyParent, pszName);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  RhRegOpenPath
 *
 *  Description:
 *      Opens a registry path.
 *
 *  Arguments:
 *      HKEY [in]: parent key.
 *      PHKEY [out]: registry key.
 *      DWORD [in]: flags.
 *      UINT [in]: path string count.
 *      ... [in]: path strings.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "RhRegOpenPath"

HRESULT RhRegOpenPath(HKEY hkeyParent, PHKEY phkey, DWORD dwFlags, UINT cStrings, ...)
{
    LPCTSTR                 pszRoot     = NULL;
    LPCTSTR                 pszDsound   = NULL;
    LPTSTR                  pszPath     = NULL;
    UINT                    ccPath      = 1;
    HRESULT                 hr          = DS_OK;
    LPCTSTR                 pszArg;
    va_list                 va;
    UINT                    i;

    DPF_ENTER();

    if(dwFlags & REGOPENPATH_DEFAULTPATH)
    {
        ASSERT(HKEY_CURRENT_USER == hkeyParent || HKEY_LOCAL_MACHINE == hkeyParent);

        if(HKEY_CURRENT_USER == hkeyParent)
        {
            pszRoot = REGSTR_HKCU;
        }
        else
        {
            pszRoot = REGSTR_HKLM;
        }
    }
    
    if(dwFlags & REGOPENPATH_DIRECTSOUNDMASK)
    {
        ASSERT(LXOR(dwFlags & REGOPENPATH_DIRECTSOUND, dwFlags & REGOPENPATH_DIRECTSOUNDCAPTURE));
        pszDsound = (dwFlags & REGOPENPATH_DIRECTSOUND) ? REGSTR_DIRECTSOUND : REGSTR_DIRECTSOUNDCAPTURE;
    }

    if(pszRoot)
    {
        ccPath += lstrlen(pszRoot) + 1;
    }

    if(pszDsound)
    {
        ccPath += lstrlen(pszDsound) + 1;
    }
    
    va_start(va, cStrings);

    for(i = 0; i < cStrings; i++)
    {
        pszArg = va_arg(va, LPCTSTR);
        ccPath += lstrlen(pszArg) + 1;
    }

    va_end(va);

    hr = MEMALLOC_A_HR(pszPath, TCHAR, ccPath);
    
    if(SUCCEEDED(hr))
    {
        if(pszRoot)
        {
            lstrcat(pszPath, pszRoot);
            lstrcat(pszPath, TEXT("\\"));
        }

        if(pszDsound)
        {
            lstrcat(pszPath, pszDsound);
            lstrcat(pszPath, TEXT("\\"));
        }
    
        va_start(va, cStrings);

        for(i = 0; i < cStrings; i++)
        {
            pszArg = va_arg(va, LPCTSTR);
            
            lstrcat(pszPath, pszArg);
            lstrcat(pszPath, TEXT("\\"));
        }

        va_end(va);

        pszPath[ccPath - 2] = TEXT('\0');

        hr = RhRegOpenKey(hkeyParent, pszPath, dwFlags & REGOPENKEY_MASK, phkey);
    }

    MEMFREE(pszPath);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  RhRegGetValue
 *
 *  Description:
 *      Gets a value from the registry.
 *
 *  Arguments:
 *      HKEY [in]: parent key.
 *      LPTSTR [in]: value name.
 *      LPDWORD [out]: receives registry type.
 *      LPVOID [out]: buffer to receive value data.
 *      DWORD [in]: size of above buffer.
 *      LPDWORD [out]: receives required buffer size.
 *  
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "RhRegGetValueA"

HRESULT RhRegGetValueA(HKEY hkeyParent, LPCSTR pszValue, LPDWORD pdwType, LPVOID pvData, DWORD cbData, LPDWORD pcbRequired)
{
    LONG                    lr;
    HRESULT                 hr;
    
    DPF_ENTER();

    if(!pvData)
    {
        cbData = 0;
    }
    else if(!cbData)
    {
        pvData = NULL;
    }
    
    lr = RegQueryValueExA(hkeyParent, pszValue, NULL, pdwType, (LPBYTE)pvData, &cbData);

    if(ERROR_INSUFFICIENT_BUFFER == lr && !pvData && !cbData && pcbRequired)
    {
        lr = ERROR_SUCCESS;
    }

    if(ERROR_PATH_NOT_FOUND == lr || ERROR_FILE_NOT_FOUND == lr)
    {
        hr =  S_FALSE;
    }
    else
    {
        hr = WIN32ERRORtoHRESULT(lr);
    }

    if(pcbRequired)
    {
        *pcbRequired = cbData;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


#undef DPF_FNAME
#define DPF_FNAME "RhRegGetValueW"

HRESULT RhRegGetValueW(HKEY hkeyParent, LPCWSTR pszValue, LPDWORD pdwType, LPVOID pvData, DWORD cbData, LPDWORD pcbRequired)
{
    LONG                    lr;
    HRESULT                 hr;
    
    DPF_ENTER();

    if(!pvData)
    {
        cbData = 0;
    }
    else if(!cbData)
    {
        pvData = NULL;
    }
    
    lr = RegQueryValueExW(hkeyParent, pszValue, NULL, pdwType, (LPBYTE)pvData, &cbData);

    if(ERROR_INSUFFICIENT_BUFFER == lr && !pvData && !cbData && pcbRequired)
    {
        lr = ERROR_SUCCESS;
    }

    if(ERROR_PATH_NOT_FOUND == lr || ERROR_FILE_NOT_FOUND == lr)
    {
        hr =  S_FALSE;
    }
    else
    {
        hr = WIN32ERRORtoHRESULT(lr);
    }

    if(pcbRequired)
    {
        *pcbRequired = cbData;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  RhRegSetValue
 *
 *  Description:
 *      Sets a value to the registry.
 *
 *  Arguments:
 *      HKEY [in]: parent key.
 *      LPTSTR [in]: value name.
 *      DWORD [in]: value type.
 *      LPVOID [in]: value data.
 *      DWORD [in]: size of above buffer.
 *  
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "RhRegSetValueA"

HRESULT RhRegSetValueA(HKEY hkeyParent, LPCSTR pszValue, DWORD dwType, LPCVOID pvData, DWORD cbData)
{
    LONG                    lr;
    HRESULT                 hr;
    
    DPF_ENTER();

    lr = RegSetValueExA(hkeyParent, pszValue, 0, dwType, (const BYTE *)pvData, cbData);
    hr = WIN32ERRORtoHRESULT(lr);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


#undef DPF_FNAME
#define DPF_FNAME "RhRegSetValueW"

HRESULT RhRegSetValueW(HKEY hkeyParent, LPCWSTR pszValue, DWORD dwType, LPCVOID pvData, DWORD cbData)
{
    LONG                    lr;
    HRESULT                 hr;
    
    DPF_ENTER();

    lr = RegSetValueExW(hkeyParent, pszValue, 0, dwType, (const BYTE *)pvData, cbData);
    hr = WIN32ERRORtoHRESULT(lr);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  RhRegDuplicateKey
 *
 *  Description:
 *      Duplicates a registry key.
 *
 *  Arguments:
 *      HKEY [in]: source key.
 *      DWORD [in]: process key was opened in.
 *      BOOL [in]: TRUE to close the source key.
 *      HKEY [out]: duplicated key handle
 *  
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "RhRegDuplicateKey"

HRESULT RhRegDuplicateKey(HKEY hkeySource, DWORD dwProcessId, BOOL fCloseSource, PHKEY phkey)
{
    HRESULT                 hr;

    DPF_ENTER();

    // Registry keys can't be duplicated on Win9x.  So, instead of duplicating
    // the handle, we have to just save a copy of the value.  In order to prevent
    // closing the original key, we're just going to leak all registry key handles.

#ifdef WINNT

    *phkey = GetLocalHandleCopy(hkeySource, dwProcessId, fCloseSource);

#else // WINNT

    *phkey = hkeySource;

#endif // WINNT

    hr = HRFROMP(*phkey);
    
    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  RhRegCloseKey
 *
 *  Description:
 *      Closes a registry key.
 *
 *  Arguments:
 *      PHKEY [in/out]: key handle.
 *  
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "RhRegCloseKey"

void RhRegCloseKey(PHKEY phkey)
{
    DPF_ENTER();

#ifdef WINNT

    if(*phkey)
    {
        RegCloseKey(*phkey);
    }

#endif // WINNT

    *phkey = NULL;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  RhRegGetPreferredDevice
 *
 *  Description:
 *      This function accesses the registry settings maintained by the
 *      wave mapper and multimedia control panel to determine the wave id
 *      of the preferred sound device.  If any of the registry keys don't
 *      exist, 0 is used as the default.
 *
 *  Arguments:
 *      BOOL [in]: TRUE to get the capture device, FALSE to get the playback
 *                 device.
 *      LPTSTR [out]: preferred device name.
 *      DWORD [in]: size of above buffer in bytes.
 *      LPUINT [out]: preferred device id.
 *      LPBOOL [out]: TRUE if the user has selected to use the preferred
 *                    device only.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "RhRegGetPreferredDevice"

HRESULT RhRegGetPreferredDevice(BOOL fCapture, LPTSTR pszDeviceName, DWORD dwNameSize, LPUINT puId, LPBOOL pfPreferredOnly)
{
    const UINT              cWaveOutDevs                = waveOutGetNumDevs();
    const UINT              cWaveInDevs                 = waveInGetNumDevs();
    HRESULT                 hr                          = DS_OK;
    HKEY                    hkeyWaveMapper;
    TCHAR                   szDeviceName[MAXPNAMELEN];
    BOOL                    fPreferredOnly;
    WAVEOUTCAPS             woc;
    WAVEINCAPS              wic;
    UINT                    uId;
    MMRESULT                mmr;

    DPF_ENTER();

    // Open the wave mapper registry key
    hr = RhRegOpenKey(HKEY_CURRENT_USER, REGSTR_WAVEMAPPER, 0, &hkeyWaveMapper);

    // Query the name of the preferred device
    if(SUCCEEDED(hr))
    {
        hr = RhRegGetStringValue(hkeyWaveMapper, fCapture ? REGSTR_RECORD : REGSTR_PLAYBACK, szDeviceName, sizeof szDeviceName);

        if(S_FALSE == hr)
        {
            DPF(DPFLVL_MOREINFO, "Preferred device value does not exist");
            hr = DSERR_GENERIC;
        }
    }

    // Use preferred only?
    if(SUCCEEDED(hr))
    {
        hr = RhRegGetBinaryValue(hkeyWaveMapper, REGSTR_PREFERREDONLY, &fPreferredOnly, sizeof(fPreferredOnly));

        if(S_FALSE == hr)
        {
            DPF(DPFLVL_MOREINFO, "Preferred only value does not exist");
            fPreferredOnly = FALSE;
        }
    }

    // Find the device id for the preferred device
    if(SUCCEEDED(hr))
    {
        if(fCapture)
        {
            for(uId = 0; uId < cWaveInDevs; uId++)
            {
                mmr = waveInGetDevCaps(uId, &wic, sizeof(wic));
                
                if(MMSYSERR_NOERROR == mmr && !lstrcmp(wic.szPname, szDeviceName))
                {
                    break;
                }
            }

            if(uId >= cWaveInDevs)
            {
                DPF(DPFLVL_MOREINFO, "Preferred device does not exist");
                hr = DSERR_NODRIVER;
            }
        }
        else
        {
            for(uId = 0; uId < cWaveOutDevs; uId++)
            {
                mmr = waveOutGetDevCaps(uId, &woc, sizeof(woc));

                if(MMSYSERR_NOERROR == mmr && !lstrcmp(woc.szPname, szDeviceName))
                {
                    break;
                }
            }

            if(uId >= cWaveOutDevs)
            {
                DPF(DPFLVL_MOREINFO, "Preferred device does not exist");
                hr = DSERR_NODRIVER;
            }
        }
    }

    // Free resources
    RhRegCloseKey(&hkeyWaveMapper);

    // If we failed to get the preferred device, we'll just use the first
    // valid, mappable device.
    if(FAILED(hr))
    {
        uId = GetNextMappableWaveDevice(WAVE_DEVICEID_NONE, fCapture);

        if(WAVE_DEVICEID_NONE != uId)
        {
            if(fCapture)
            {
                mmr = waveInGetDevCaps(uId, &wic, sizeof(wic));

                if(MMSYSERR_NOERROR == mmr)
                {
                    lstrcpy(szDeviceName, wic.szPname);
                }
            }
            else
            {
                mmr = waveOutGetDevCaps(uId, &woc, sizeof(woc));

                if(MMSYSERR_NOERROR == mmr)
                {
                    lstrcpy(szDeviceName, woc.szPname);
                }
            }

            if(MMSYSERR_NOERROR == mmr)
            {
                fPreferredOnly = FALSE;
                hr = DS_OK;
            }
        }
    }

    // Success
    if(SUCCEEDED(hr) && pszDeviceName)
    {
        lstrcpyn(pszDeviceName, szDeviceName, dwNameSize);
    }

    if(SUCCEEDED(hr) && puId)
    {
        *puId = uId;
    }

    if(SUCCEEDED(hr) && pfPreferredOnly)
    {
        *pfPreferredOnly = fPreferredOnly;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  RhRegGetSpeakerConfig
 *
 *  Description:
 *      This function accesses the registry settings maintained by the
 *      Sounds and Multimedia control panel applet to determine the
 *      currently selected Speaker Configuration.  If the appropriate
 *      registry key doesn't exist, we return DSSPEAKER_DEFAULT.
 *
 *  Arguments:
 *      HKEY [in]: root registry key of the device to be queried.
 *      LPDWORD [out]: speaker configuration.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "RhRegGetSpeakerConfig"

HRESULT RhRegGetSpeakerConfig(HKEY hkeyParent, LPDWORD pdwSpeakerConfig)
{
    HRESULT hr = DS_OK;
    HKEY hkey;
    DPF_ENTER();

    if (pdwSpeakerConfig != NULL)
    {
        *pdwSpeakerConfig = DSSPEAKER_DEFAULT;
        hr = RhRegOpenKey(hkeyParent, REGSTR_SPEAKERCONFIG, 0, &hkey);
        if (SUCCEEDED(hr))
        {
            hr = RhRegGetBinaryValue(hkey, REGSTR_SPEAKERCONFIG, pdwSpeakerConfig, sizeof *pdwSpeakerConfig);
            if (hr == S_FALSE)
                DPF(DPFLVL_MOREINFO, "Speaker configuration not defined in registry");
            RhRegCloseKey(&hkey);
        }
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  RhRegSetSpeakerConfig
 *
 *  Description:
 *      This function accesses the registry settings maintained by the
 *      Sounds and Multimedia control panel applet to set the Speaker
 *      Configuration.
 *
 *  Arguments:
 *      HKEY [in]: root registry key of the device to be configured.
 *      DWORD [in]: new speaker configuration.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "RhRegSetSpeakerConfig"

HRESULT RhRegSetSpeakerConfig(HKEY hkeyParent, DWORD dwSpeakerConfig)
{
    HRESULT hr;
    HKEY hkey;
    DPF_ENTER();

    hr = RhRegOpenKey(hkeyParent, REGSTR_SPEAKERCONFIG, REGOPENKEY_ALLOWCREATE, &hkey);
    
    if (SUCCEEDED(hr))
    {
        hr = RhRegSetBinaryValue(hkey, REGSTR_SPEAKERCONFIG, &dwSpeakerConfig, sizeof dwSpeakerConfig);
        RhRegCloseKey(&hkey);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\reghlp.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       reghlp.h
 *  Content:    Registry helper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  5/6/98      dereks  Created.
 * 4/19/99      duganp  Added support for global settings (REGSTR_GLOBAL_CONFIG)
 *                      Added a global setting for a default S/W 3D algorithm
 ***************************************************************************/

#ifndef __REGHLP_H__
#define __REGHLP_H__

// FIXME: this is a mess.  Apart from the device-specific settings we store under special
// device registry keys, we use *3* different registry keys for global settings:
//
// Debug spew settings: HKCU\Software\Microsoft\Multimedia\DirectSound\Debug
// Apphacks: HKLM\System\CurrentControlSet\Control\MediaResources\DirectSound\Application Compatibility
// Default 3D algorithm: HKLM\Software\Microsoft\DirectSound\Default Software 3D Algorithm
//
// All these should be under one key, probably HKLM\Software\Microsoft\Multimedia\DirectSound;
// none of them need to be per-user.  (Unless there's some particularly good reason why we use
// the bizarre System\CurrentControlSet\Control\MediaResources key?)

// Main resistry keys under which we store all our info:
#define REGSTR_HKCU                     TEXT("Software\\Microsoft\\Multimedia")
#define REGSTR_HKLM                     TEXT("System\\CurrentControlSet\\Control\\MediaResources")
#define REGSTR_WAVEMAPPER               TEXT("Software\\Microsoft\\Multimedia\\Sound Mapper")
#define REGSTR_GLOBAL_CONFIG            TEXT("Software\\Microsoft\\DirectSound")
#define REGSTR_MEDIACATEGORIES          TEXT("System\\CurrentControlSet\\Control\\MediaCategories")

// Values used under the REGSTR_MEDIACATEGORIES key for a particular name GUID
// retrieved from the KSCOMPONENTID structure
#define MAXNAME                         0x100
#define REGSTR_NAME                     TEXT("Name")

// Values used under the REGSTR_WAVEMAPPER key (see RhRegGetPreferredDevice)
#define REGSTR_PLAYBACK                 TEXT("Playback")
#define REGSTR_RECORD                   TEXT("Record")
#define REGSTR_PREFERREDONLY            TEXT("PreferredOnly")

// Subkeys used under REGSTR_HKLM and the PnP device registry keys (see pnphlp.cpp)
#define REGSTR_DIRECTSOUND              TEXT("DirectSound")
#define REGSTR_DIRECTSOUNDCAPTURE       TEXT("DirectSoundCapture")

// Subkeys of REGSTR_DIRECTSOUND and REGSTR_DIRECTSOUNDCAPTURE above
#define REGSTR_DEVICEPRESENCE           TEXT("Device Presence")
#define REGSTR_MIXERDEFAULTS            TEXT("Mixer Defaults")
#define REGSTR_SPEAKERCONFIG            TEXT("Speaker Configuration")
#define REGSTR_APPHACK                  TEXT("Application Compatibility")

// Global configuration values (under the REGSTR_GLOBAL_CONFIG key)
#define REGSTR_DFLT_3D_ALGORITHM        TEXT("Default Software 3D Algorithm")

// Debug output control (see debug.c)
#define REGSTR_DEBUG                    TEXT("Debug")   // Key under REGSTR_HKCU
#define REGSTR_DPFLEVEL                 TEXT("DPF")     // Values
#define REGSTR_BREAKLEVEL               TEXT("Break")
#define REGSTR_FLAGS                    TEXT("Flags")
#define REGSTR_LOGFILE                  TEXT("Log File")

// Virtual Audio Device types (see dsprvobj.cpp and vad.cpp)
#define REGSTR_EMULATED                 TEXT("Emulated")
#define REGSTR_VXD                      TEXT("VxD")
#define REGSTR_WDM                      TEXT("WDM")

// Audio device mixing properties (under REGSTR_MIXERDEFAULTS)
#define REGSTR_SRCQUALITY               TEXT("SRC Quality")
#define REGSTR_ACCELERATION             TEXT("Acceleration")

#define REGOPENKEY_ALLOWCREATE          0x00000001
#define REGOPENKEY_MASK                 0x00000001

#define REGOPENPATH_ALLOWCREATE         0x00000001
#define REGOPENPATH_DEFAULTPATH         0x00000002
#define REGOPENPATH_DIRECTSOUND         0x00000004
#define REGOPENPATH_DIRECTSOUNDCAPTURE  0x00000008
#define REGOPENPATH_DIRECTSOUNDMASK     0x0000000C
#define REGOPENPATH_MASK                0x0000000F

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

static const REGSAM g_arsRegOpenKey[] = { KEY_ALL_ACCESS, KEY_READ, KEY_QUERY_VALUE };

extern HRESULT RhRegOpenPath(HKEY, PHKEY, DWORD, UINT, ...);

extern HRESULT RhRegOpenKeyA(HKEY, LPCSTR, DWORD, PHKEY);
extern HRESULT RhRegOpenKeyW(HKEY, LPCWSTR, DWORD, PHKEY);

extern HRESULT RhRegGetValueA(HKEY, LPCSTR, LPDWORD, LPVOID, DWORD, LPDWORD);
extern HRESULT RhRegGetValueW(HKEY, LPCWSTR, LPDWORD, LPVOID, DWORD, LPDWORD);

extern HRESULT RhRegSetValueA(HKEY, LPCSTR, DWORD, LPCVOID, DWORD);
extern HRESULT RhRegSetValueW(HKEY, LPCWSTR, DWORD, LPCVOID, DWORD);

extern HRESULT RhRegDuplicateKey(HKEY, DWORD, BOOL, PHKEY);
extern void RhRegCloseKey(PHKEY);

extern HRESULT RhRegGetPreferredDevice(BOOL, LPTSTR, DWORD, LPUINT, LPBOOL);
extern HRESULT RhRegGetSpeakerConfig(HKEY, LPDWORD);
extern HRESULT RhRegSetSpeakerConfig(HKEY, DWORD);

__inline HRESULT RhRegGetBinaryValueA(HKEY hkeyParent, LPCSTR pszValue, LPVOID pvData, DWORD cbData)
{
    return RhRegGetValueA(hkeyParent, pszValue, NULL, pvData, cbData, NULL);
}

__inline HRESULT RhRegGetBinaryValueW(HKEY hkeyParent, LPCWSTR pszValue, LPVOID pvData, DWORD cbData)
{
    return RhRegGetValueW(hkeyParent, pszValue, NULL, pvData, cbData, NULL);
}

__inline HRESULT RhRegGetStringValueA(HKEY hkeyParent, LPCSTR pszValue, LPSTR pszData, DWORD cbData)
{
    return RhRegGetValueA(hkeyParent, pszValue, NULL, pszData, cbData, NULL);
}

__inline HRESULT RhRegGetStringValueW(HKEY hkeyParent, LPCWSTR pszValue, LPWSTR pszData, DWORD cbData)
{
    return RhRegGetValueW(hkeyParent, pszValue, NULL, pszData, cbData, NULL);
}

__inline HRESULT RhRegSetBinaryValueA(HKEY hkeyParent, LPCSTR pszValue, LPVOID pvData, DWORD cbData)
{
    return RhRegSetValueA(hkeyParent, pszValue, (sizeof(DWORD) == cbData) ? REG_DWORD : REG_BINARY, pvData, cbData);
}

__inline HRESULT RhRegSetBinaryValueW(HKEY hkeyParent, LPCWSTR pszValue, LPVOID pvData, DWORD cbData)
{
    return RhRegSetValueW(hkeyParent, pszValue, (sizeof(DWORD) == cbData) ? REG_DWORD : REG_BINARY, pvData, cbData);
}

__inline HRESULT RhRegSetStringValueA(HKEY hkeyParent, LPCSTR pszValue, LPCSTR pszData)
{
    return RhRegSetValueA(hkeyParent, pszValue, REG_SZ, pszData, lstrsizeA(pszData));
}

__inline HRESULT RhRegSetStringValueW(HKEY hkeyParent, LPCWSTR pszValue, LPCWSTR pszData)
{
    return RhRegSetValueW(hkeyParent, pszValue, REG_SZ, pszData, lstrsizeW(pszData));
}

#ifdef UNICODE
#define RhRegOpenKey RhRegOpenKeyW
#define RhRegGetValue RhRegGetValueW
#define RhRegSetValue RhRegSetValueW
#define RhRegGetBinaryValue RhRegGetBinaryValueW
#define RhRegSetBinaryValue RhRegSetBinaryValueW
#define RhRegGetStringValue RhRegGetStringValueW
#define RhRegSetStringValue RhRegSetStringValueW
#else // UNICODE
#define RhRegOpenKey RhRegOpenKeyA
#define RhRegGetValue RhRegGetValueA
#define RhRegSetValue RhRegSetValueA
#define RhRegGetBinaryValue RhRegGetBinaryValueA
#define RhRegSetBinaryValue RhRegSetBinaryValueA
#define RhRegGetStringValue RhRegGetStringValueA
#define RhRegSetStringValue RhRegSetStringValueA
#endif // UNICODE

#ifdef __cplusplus
}
#endif // __cplusplus

#endif __REGHLP_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\resource.h ===
//--------------------------------------------------------------------------;
//
//  File: resource.h
//
//  Copyright (c) 1995-1997 Microsoft Corporation.  All Rights Reserved.
//
//  Contents:
//      Defines for string resources.
//
//--------------------------------------------------------------------------;

#define IDS_PRIMARYDRIVER   1000
#define IDS_EMULATED        1001
#define IDS_DS_DRIVERLD     1002
#define IDS_DSC_DRIVERLD    1003
#define IDS_PRIMARYCAPDRIVER   1004
#define IDS_KSDRIVER        1005
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\rfcircvec.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       rfcircvec.cpp
 *  Content:    real float circular vector 
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  4/22/98    jstokes  Created
 *
 ***************************************************************************/

// Project-specific INCLUDEs
#include "dsoundi.h"
#include "rfcircvec.h"

// ---------------------------------------------------------------------------
// Real float circular vector

// Set buffer size
void CRfCircVec::SetSize(const size_t CstSize, const float CfInitValue)
{
	ASSERT(CstSize > 0);

	// Check if preallocation size has been set and if resizing is necessary
	if (m_stPreallocSize != 0 && CstSize <= m_stPreallocSize) {
		// Don't need to resize, just change end pointer and reset buffer
		SetEndPointer(CstSize);
		m_pfIndex = m_pfStart;
		Fill(CfInitValue);
	}
	else
		// Resizing necessary
		ResizeBuffer(CstSize, CfInitValue);
}

// Reset circular buffer
void CRfCircVec::Reset()
{
	MEMFREE(m_pfStart);
	InitData();
}

// Preallocate buffer size (to avoid excessive memory reallocation)
void CRfCircVec::PreallocateSize(const size_t CstSize, const float CfInitValue)
{
	ASSERT(CstSize > 0);
	
	// Check if buffer needs to be resized to accomodate preallocated size
	if (CstSize > m_stPreallocSize) {
		m_stPreallocSize = CstSize;
		ResizeBuffer(CstSize, CfInitValue);
	}
}

// Fill complete buffer with value
void CRfCircVec::Fill(const float CfInitValue)
{
//	DEBUG_ONLY(CheckPointers());

	for (float* pfLoopIndex = m_pfStart; pfLoopIndex<=m_pfEnd; ++pfLoopIndex)
		*pfLoopIndex = CfInitValue;
}

// Initialize data
void CRfCircVec::InitData()
{
	m_stPreallocSize = 0;
	m_pfStart = NULL;
	m_pfEnd = NULL;
	m_pfIndex = NULL;
}

// Allocate memory and initialize pointers
BOOL CRfCircVec::InitPointers(const size_t CstSize)
{
    BOOL fRetVal = FALSE;
	m_pfStart = MEMALLOC_A(FLOAT, CstSize);
	if (m_pfStart != NULL)
    {
        SetEndPointer(CstSize);
        fRetVal = TRUE;
	}
	return fRetVal;
}

// Full initialization as required in regular constructor and resize operation
BOOL CRfCircVec::Init(const size_t CstSize, const float CfInitValue)
{
    BOOL fRetVal=FALSE;

    ASSERT(CstSize > 0);
  
	// Set pointers to initial values
	if (InitPointers(CstSize))
	{
	    m_pfIndex = m_pfStart;
	    
	    // Initialize buffer with specified initialization value
	    Fill(CfInitValue);
	    fRetVal = TRUE;
	}
    return fRetVal;
}

// Resize buffer
void CRfCircVec::ResizeBuffer(const size_t CstSize, const float CfInitValue)
{
	ASSERT(CstSize > 0);

	MEMFREE(m_pfStart);
	Init(CstSize, CfInitValue);
}

// Write loop
void CRfCircVec::WriteLoop(CRfCircVec& rhs, float (CRfCircVec::* pmf)())
{
	for (size_t st(0); st<rhs.GetSize(); ++st)
		Write((rhs.*pmf)());
}

#if defined(_DEBUG)
// Check pointers
void CRfCircVec::CheckPointers() const
{
	// Make sure pointers are good
	ASSERT(m_pfStart != NULL);
//	CHECK_POINTER(m_pfEnd);
//	CHECK_POINTER(m_pfIndex);
	
	// Make sure pointers make sense
	ASSERT(m_pfEnd >= m_pfStart);
	ASSERT(m_pfIndex >= m_pfStart);
	ASSERT(m_pfIndex <= m_pfEnd);
}
#endif

// ---------------------------------------------------------------------------
// Include inline definitions out-of-line in debug version

#if defined(_DEBUG)
#include "rfcircvec.inl"
#endif

// End of RFCIRCVEC.CPP
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\rtfast.c ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       rtfast.h
 *  Content:    New versions of C runtime functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  8/27/98     dereks  Created
 *
 ***************************************************************************/

#pragma optimize("", off)
#pragma warning(push)
#pragma warning(disable:4731)


/***************************************************************************
 *
 *  FillMemory
 *
 *  Description:
 *      Fills a buffer with a given byte pattern.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      DWORD [in]: buffer size.
 *      BYTE [in]: byte pattern.
 *
 *  Returns:  
 *      (VOID)
 *
 ***************************************************************************/

RTAPI VOID RTCALLTYPE FastFillMemory(LPVOID pvDest, DWORD cbBuffer, BYTE bFill)
{
    __asm 
    {
        mov     eax, dword ptr bFill        // Fill eax with the dword 
        and     eax, 000000FFh              // version of the fill pattern

        test    eax, eax                    // If the pattern is zero, we
        jz      ZeroPattern                 // can skip some steps

        mov     ebx, eax                    // Propagate what's in al to 
        shl     ebx, 8                      // the rest of eax
        or      eax, ebx
        shl     ebx, 8
        or      eax, ebx
        shl     ebx, 8
        or      eax, ebx

    ZeroPattern:
        mov     esi, pvDest                 // esi = pvDest
        mov     ecx, cbBuffer               // ecx = cbBuffer

    ByteHead:
        test    ecx, ecx                    // Is the counter at 0?
        jz      End

        test    esi, 00000003h              // Is esi 32-bit aligned?
        jz      DwordHead

        mov     byte ptr [esi], al          // Copy al into esi
        
        inc     esi                         // Move pointers
        dec     ecx

        jmp     ByteHead                    // Loop

    DwordHead:
        cmp     ecx, 4                      // Is the counter < 4?
        jl      ByteTail

        test    esi, 0000001Fh              // Is esi 32-byte aligned?
        jz      BigLoop

        mov     dword ptr [esi], eax        // Copy eax into esi
        
        add     esi, 4                      // Move pointers
        sub     ecx, 4

        jmp     DwordHead                   // Loop
    
    BigLoop:
        cmp     ecx, 32                     // Is the counter <= 32?
        jle     DwordTail

        mov     ebx, dword ptr [esi+32]     // Prime the cache
        
        mov     dword ptr [esi+4], eax      // Copy eax into esi to esi+32
        mov     dword ptr [esi+8], eax
        mov     dword ptr [esi+12], eax
        mov     dword ptr [esi+16], eax
        mov     dword ptr [esi+20], eax
        mov     dword ptr [esi+24], eax
        mov     dword ptr [esi+28], eax
        mov     dword ptr [esi], eax        

        add     esi, 32                     // Move pointers
        sub     ecx, 32

        jmp     BigLoop                     // Loop

    DwordTail:
        cmp     ecx, 4                      // Is the counter < 4?
        jl      ByteTail

        mov     dword ptr [esi], eax        // Copy eax into esi
        
        add     esi, 4                      // Move pointers
        sub     ecx, 4

        jmp     DwordTail                   // Loop

    ByteTail:
        test    ecx, ecx                    // Is the counter at 0?
        jz      End

        mov     byte ptr [esi], al          // Copy al into esi
        
        inc     esi                         // Move pointers
        dec     ecx

        jmp     ByteTail                    // Loop

    End:
    }
}


/***************************************************************************
 *
 *  FillMemoryDword
 *
 *  Description:
 *      Fills a buffer with a given DWORD pattern.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      DWORD [in]: buffer size.
 *      DWORD [in]: pattern.
 *
 *  Returns:  
 *      (VOID)
 *
 ***************************************************************************/

RTAPI VOID RTCALLTYPE FastFillMemoryDword(LPVOID pvDest, DWORD cbBuffer, DWORD dwFill)
{
    __asm 
    {
        mov     eax, dwFill                 // eax = dwFill
        mov     esi, pvDest                 // esi = pvDest
        mov     ecx, cbBuffer               // ecx = cbBuffer

    DwordHead:
        cmp     ecx, 4                      // Is the counter < 4?
        jl      End

        test    esi, 0000001Fh              // Is esi 32-byte aligned?
        jz      BigLoop

        mov     dword ptr [esi], eax        // Copy eax into esi
        
        add     esi, 4                      // Move pointers
        sub     ecx, 4

        jmp     DwordHead                   // Loop
    
    BigLoop:
        cmp     ecx, 32                     // Is the counter <= 32?
        jle     DwordTail

        mov     ebx, dword ptr [esi+32]     // Prime the cache
        
        mov     dword ptr [esi+4], eax      // Copy eax into esi to esi+32
        mov     dword ptr [esi+8], eax
        mov     dword ptr [esi+12], eax
        mov     dword ptr [esi+16], eax
        mov     dword ptr [esi+20], eax
        mov     dword ptr [esi+24], eax
        mov     dword ptr [esi+28], eax
        mov     dword ptr [esi], eax        

        add     esi, 32                     // Move pointers
        sub     ecx, 32

        jmp     BigLoop                     // Loop

    DwordTail:
        cmp     ecx, 4                      // Is the counter < 4?
        jl      End

        mov     dword ptr [esi], eax        // Copy eax into esi
        
        add     esi, 4                      // Move pointers
        sub     ecx, 4

        jmp     DwordTail                   // Loop

    End:
    }
}


/***************************************************************************
 *
 *  CopyMemory
 *
 *  Description:
 *      Copies one buffer over another of equal size.
 *
 *  Arguments:
 *      LPVOID [in]: destination buffer pointer.
 *      LPVOID [in]: source buffer pointer.
 *      DWORD [in]: buffer size.
 *
 *  Returns:  
 *      (VOID)
 *
 ***************************************************************************/

RTAPI VOID RTCALLTYPE FastCopyMemory(LPVOID pvDest, LPCVOID pvSource, DWORD cbBuffer)
{
    __asm 
    {
        push    ebp
        
        mov     esi, pvDest                 // esi = pvDest
        mov     edi, pvSource               // edi = pvSource
        mov     ebp, cbBuffer               // ebp = cbBuffer

    ByteHead:
        test    ebp, ebp                    // Is the counter at 0?
        jz      End

        test    esi, 00000003h              // Is esi 32-bit aligned?
        jz      DwordHead

        test    edi, 00000003h              // Is edi 32-bit aligned?
        jz      DwordHead

        mov     al, byte ptr [edi]          // Copy edi into esi
        mov     byte ptr [esi], al
        
        inc     esi                         // Move pointers
        inc     edi
        dec     ebp

        jmp     ByteHead                    // Loop

    DwordHead:
        cmp     ebp, 4                      // Is the counter < 4?
        jl      ByteTail

        test    esi, 0000001Fh              // Is esi 32-byte aligned?
        jz      BigLoop

        test    edi, 0000001Fh              // Is edi 32-byte aligned?
        jz      BigLoop

        mov     eax, dword ptr [edi]        // Copy eax into esi
        mov     dword ptr [esi], eax
        
        add     esi, 4                      // Move pointers
        add     edi, 4
        sub     ebp, 4

        jmp     DwordHead                   // Loop
    
    BigLoop:
        cmp     ebp, 32                     // Is the counter < 32?
        jl      DwordTail

        mov     eax, dword ptr [edi]        // Copy edi to edi+16 into esi to esi+16
        mov     ebx, dword ptr [edi+4]
        mov     ecx, dword ptr [edi+8]
        mov     edx, dword ptr [edi+12]

        mov     dword ptr [esi], eax
        mov     dword ptr [esi+4], ebx
        mov     dword ptr [esi+8], ecx
        mov     dword ptr [esi+12], edx
        
        mov     eax, dword ptr [edi+16]     // Copy edi+16 to edi+32 into esi+16 to esi+32
        mov     ebx, dword ptr [edi+20]
        mov     ecx, dword ptr [edi+24]
        mov     edx, dword ptr [edi+28]

        mov     dword ptr [esi+16], eax
        mov     dword ptr [esi+20], ebx
        mov     dword ptr [esi+24], ecx
        mov     dword ptr [esi+28], edx
        
        add     esi, 32                     // Move pointers
        add     edi, 32
        sub     ebp, 32

        jmp     BigLoop                     // Loop

    DwordTail:
        cmp     ebp, 4                      // Is the counter < 4?
        jl      ByteTail

        mov     eax, dword ptr [edi]        // Copy edi into esi
        mov     dword ptr [esi], eax
        
        add     esi, 4                      // Move pointers
        add     edi, 4
        sub     ebp, 4

        jmp     DwordTail                   // Loop

    ByteTail:
        test    ebp, ebp                    // Is the counter at 0?
        jz      End

        mov     al, byte ptr [edi]          // Copy edi into esi
        mov     byte ptr [esi], al
        
        inc     esi                         // Move pointers
        inc     edi
        dec     ebp

        jmp     ByteTail                    // Loop

    End:
        pop     ebp
    }
}


/***************************************************************************
 *
 *  CompareMemory
 *
 *  Description:
 *      Compares one buffer to another of equal size.
 *
 *  Arguments:
 *      LPVOID [in]: destination buffer pointer.
 *      LPVOID [in]: source buffer pointer.
 *      DWORD [in]: buffer size.
 *
 *  Returns:  
 *      BOOL: TRUE if the buffers are equal.
 *
 ***************************************************************************/

RTAPI BOOL RTCALLTYPE FastCompareMemory(LPCVOID pvDest, LPCVOID pvSource, DWORD cbBuffer)
{
    BOOL                    fCompare;
    
    __asm 
    {
        push    ebp
        
        mov     esi, pvDest                 // esi = pvDest
        mov     edi, pvSource               // edi = pvSource
        mov     ebp, cbBuffer               // ebp = cbBuffer

    ByteHead:
        test    ebp, ebp                    // Is the counter at 0?
        jz      Equal

        test    esi, 00000003h              // Is esi 32-bit aligned?
        jz      DwordHead

        test    edi, 00000003h              // Is edi 32-bit aligned?
        jz      DwordHead

        mov     al, byte ptr [edi]          // Compare edi to esi
        cmp     byte ptr [esi], al
        jne     NotEqual
        
        inc     esi                         // Move pointers
        inc     edi
        dec     ebp

        jmp     ByteHead                    // Loop

    DwordHead:
        cmp     ebp, 4                      // Is the counter < 4?
        jl      ByteTail

        test    esi, 0000001Fh              // Is esi 32-byte aligned?
        jz      BigLoop

        test    edi, 0000001Fh              // Is edi 32-byte aligned?
        jz      BigLoop

        mov     eax, dword ptr [edi]        // Compare edi to esi
        cmp     dword ptr [esi], eax
        jne     NotEqual
        
        add     esi, 4                      // Move pointers
        add     edi, 4
        sub     ebp, 4

        jmp     DwordHead                   // Loop
    
    BigLoop:
        cmp     ebp, 32                     // Is the counter < 32?
        jl      DwordTail

        mov     eax, dword ptr [edi]        // Compare edi to edi+16 to esi to esi+16
        mov     ebx, dword ptr [edi+4]
        mov     ecx, dword ptr [edi+8]
        mov     edx, dword ptr [edi+12]

        cmp     dword ptr [esi], eax
        jne     NotEqual
        cmp     dword ptr [esi+4], ebx
        jne     NotEqual
        cmp     dword ptr [esi+8], ecx
        jne     NotEqual
        cmp     dword ptr [esi+12], edx
        jne     NotEqual
        
        mov     eax, dword ptr [edi+16]     // Compare edi+16 to edi+32 to esi+16 to esi+32
        mov     ebx, dword ptr [edi+20]
        mov     ecx, dword ptr [edi+24]
        mov     edx, dword ptr [edi+28]

        cmp     dword ptr [esi+16], eax
        jne     NotEqual
        cmp     dword ptr [esi+20], ebx
        jne     NotEqual
        cmp     dword ptr [esi+24], ecx
        jne     NotEqual
        cmp     dword ptr [esi+28], edx
        jne     NotEqual
        
        add     esi, 32                     // Move pointers
        add     edi, 32
        sub     ebp, 32

        jmp     BigLoop                     // Loop

    DwordTail:
        cmp     ebp, 4                      // Is the counter < 4?
        jl      ByteTail

        mov     eax, dword ptr [edi]        // Compare edi to esi
        cmp     dword ptr [esi], eax
        jne     NotEqual
        
        add     esi, 4                      // Move pointers
        add     edi, 4
        sub     ebp, 4

        jmp     DwordTail                   // Loop

    ByteTail:
        test    ebp, ebp                    // Is the counter at 0?
        jz      Equal

        mov     al, byte ptr [edi]          // Compare edi into esi
        cmp     byte ptr [esi], al
        jne     NotEqual
        
        inc     esi                         // Move pointers
        inc     edi
        dec     ebp

        jmp     ByteTail                    // Loop

    Equal:
        mov     eax, TRUE
        jmp     End      
                         
    NotEqual:
        mov     eax, FALSE

    End:
        pop     ebp

        mov     fCompare, eax
    }

    return fCompare;
}

#pragma warning(pop)
#pragma optimize("", on)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\rfcircvec.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       rfcircvec.h
 *  Content:    Header for real float circular vector.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  1/13/98     jstokes  Created
 *
 ***************************************************************************/

#if !defined(RFCIRCVEC_HEADER)
#define RFCIRCVEC_HEADER
#pragma once

// ---------------------------------------------------------------------------
// Real float circular vector

class CRfCircVec {
public:
	CRfCircVec();
	~CRfCircVec();
	BOOL Init(const size_t CstSize, const float CfInitValue);
	void SetSize(const size_t CstSize, const float CfInitValue = 0.0f);
	size_t GetSize() const;
	float LIFORead();
	void LIFONext();
	void SkipBack();
	float FIFORead();
	void FIFONext();
	void SkipForward();
	void Write(const float CfValue);
	void Fill(const float CfInitValue);
	void LIFOFill(CRfCircVec& rhs);
	void FIFOFill(CRfCircVec& rhs);
	size_t GetIndex() const;
	void SetIndex(const size_t CstIndex);
	void Reset();
	void PreallocateSize(const size_t CstSize, const float CfInitValue = 0.0f);

private:
	// Prohibit copy construction and assignment
	CRfCircVec(const CRfCircVec& rhs);
	CRfCircVec& operator=(const CRfCircVec& rhs);

	void InitData();
	float PreviousRead();
	float ReadNext();
	void WriteNext(const float CfValue);
	BOOL InitPointers(const size_t CstSize);
	void ResizeBuffer(const size_t CstSize, const float CfInitValue);
	void SetEndPointer(const size_t CstSize);
	void WriteLoop(CRfCircVec& rhs, float (CRfCircVec::* pmf)());
#if defined(_DEBUG)
	void CheckPointers() const;
#endif

	float* m_pfStart;
	float* m_pfEnd;
	float* m_pfIndex;
	size_t m_stPreallocSize;
};

// ---------------------------------------------------------------------------
// Include inline definitions inline in release version

#if !defined(_DEBUG)
#include "rfcircvec.inl"
#endif

#endif

// End of RFCIRCVEC.H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\rfcircvec.inl ===
/***************************************************************************
 *
 *  Copyright (C) 1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       rfcircvec.inl
 *  Content:    real float circular vector 
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  4/22/98    jstokes  Created
 *
 ***************************************************************************/


#if !defined(RFCIRCVEC_INLINE)
#define RFCIRCVEC_INLINE
#pragma once

// Project-specific INCLUDEs
//#include "generallibrary.h"

// ---------------------------------------------------------------------------
// Make sure inlines are out-of-line in debug version

#if !defined(_DEBUG)
#define INLINE _inline
#else
#define INLINE
#endif

// ---------------------------------------------------------------------------
// Real float circular vector

// Default constructor
INLINE CRfCircVec::CRfCircVec()
{
    InitData();
}

// Destructor
INLINE CRfCircVec::~CRfCircVec()
{
	delete[] m_pfStart;
}

// Get buffer size
INLINE size_t CRfCircVec::GetSize() const
{
//	DEBUG_ONLY(CheckPointers());

	return static_cast<size_t>((m_pfEnd - m_pfStart) + 1);
}

// Read item LIFO, advance buffer pointer, wrap around if necessary
INLINE float CRfCircVec::LIFORead()
{
	return PreviousRead();
}

// Read item FIFO, advance buffer pointer, wrap around if necessary
INLINE float CRfCircVec::FIFORead()
{
	return ReadNext();
}

// Write item, advance buffer pointer, wrap around if necessary
INLINE void CRfCircVec::Write(const float CfValue)
{
  WriteNext(CfValue);
}

// Read item from current buffer position (decremented before item was read)
INLINE float CRfCircVec::PreviousRead()
{
//	CHECK_POINTER(m_pfIndex);

	LIFONext();
	return *m_pfIndex;
}

// Read item from current buffer position (decremented before item was read)
INLINE float CRfCircVec::ReadNext()
{
//	CHECK_POINTER(m_pfIndex);

	const float CfValue(*m_pfIndex);
	FIFONext();
	return CfValue;
}

// Write item to current buffer position (incremented after item is written)
INLINE void CRfCircVec::WriteNext(const float CfValue)
{
//	CHECK_POINTER(m_pfIndex);

	*m_pfIndex = CfValue;
	SkipForward();
}

// Increments current buffer position by one, wraps around if necessary
INLINE void CRfCircVec::FIFONext()
{
//	DEBUG_ONLY(CheckPointers());

	// Wrap around if necessary
	if (++m_pfIndex > m_pfEnd)
		m_pfIndex = m_pfStart;
}

// Skip forward one element
INLINE void CRfCircVec::SkipForward()
{
	FIFONext();
}

// Decrements current buffer position by one, wraps around if necessary
INLINE void CRfCircVec::LIFONext()
{
//	DEBUG_ONLY(CheckPointers());

	// Wrap around if necessary
	if (--m_pfIndex < m_pfStart)
		m_pfIndex = m_pfEnd;
}

// Skip back one element
INLINE void CRfCircVec::SkipBack()
{
	LIFONext();
}

// Get current index
INLINE size_t CRfCircVec::GetIndex() const
{
//	DEBUG_ONLY(CheckPointers());

	return static_cast<size_t>(m_pfIndex - m_pfStart);
}

// Set current index
INLINE void CRfCircVec::SetIndex(const size_t CstIndex)
{
	ASSERT(CstIndex < GetSize());
//	DEBUG_ONLY(CheckPointers());

	m_pfIndex = m_pfStart + CstIndex;
}

// Set end pointer
INLINE void CRfCircVec::SetEndPointer(const size_t CstSize)
{
	m_pfEnd = m_pfStart + CstSize - 1;
}

// Fill with contents from other buffer, updating indices but not touching lengths (LIFO)
INLINE void CRfCircVec::LIFOFill(CRfCircVec& rhs)
{
//	DEBUG_ONLY(CheckPointers());

	WriteLoop(rhs, LIFORead);
}

// Fill with contents from other buffer, updating indices but not touching lengths (FIFO)
INLINE void CRfCircVec::FIFOFill(CRfCircVec& rhs)
{
//	DEBUG_ONLY(CheckPointers());

	WriteLoop(rhs, FIFORead);
}

#endif

// End of RFCIRCVEC.INL
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\runtime.c ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       runtime.c
 *  Content:    New versions of C runtime functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  12/17/97    dereks  Created
 *
 ***************************************************************************/


/***************************************************************************
 *
 *  FillMemory
 *
 *  Description:
 *      Fills a buffer with a given byte pattern.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      SIZE_T [in]: buffer size.
 *      BYTE [in]: byte pattern.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

RTAPI void RTCALLTYPE FillMemory(LPVOID pvDest, SIZE_T cbBuffer, BYTE bFill)
{

#ifdef Not_VxD

    ASSERT(!IsBadWritePtr(pvDest, cbBuffer));

#endif // Not_VxD

#ifdef USE_FAST_RUNTIME

    FastFillMemory(pvDest, cbBuffer, bFill);

#elif defined(USE_INTRINSICS)

    memset(pvDest, bFill, (size_t)cbBuffer);

#else

    SlowFillMemory(pvDest, cbBuffer, bFill);

#endif

}


/***************************************************************************
 *
 *  FillMemoryDword
 *
 *  Description:
 *      Fills a buffer with a given dword pattern.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      SIZE_T [in]: buffer size.
 *      DWORD [in]: pattern.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

RTAPI void RTCALLTYPE FillMemoryDword(LPVOID pvDest, SIZE_T cbBuffer, DWORD dwFill)
{

#ifdef Not_VxD

    ASSERT(!(cbBuffer % sizeof(DWORD)));
    ASSERT(!IsBadWritePtr(pvDest, cbBuffer));

#endif // Not_VxD

#ifdef USE_FAST_RUNTIME

    FastFillMemoryDword(pvDest, cbBuffer, dwFill);

#else

    SlowFillMemoryDword(pvDest, cbBuffer, dwFill);

#endif

}


/***************************************************************************
 *
 *  FillMemoryOffset
 *
 *  Description:
 *      Fills a buffer with a given byte pattern.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      SIZE_T [in]: buffer size.
 *      BYTE [in]: byte pattern.
 *      SIZE_T [in]: byte offset.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

RTAPI void RTCALLTYPE FillMemoryOffset(LPVOID pvDest, SIZE_T cbBuffer, BYTE bFill, SIZE_T ibOffset)
{
    FillMemory((LPBYTE)pvDest + ibOffset, cbBuffer - ibOffset, bFill);
}


/***************************************************************************
 *
 *  FillMemoryDwordOffset
 *
 *  Description:
 *      Fills a buffer with a given dword pattern.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      SIZE_T [in]: buffer size.
 *      DWORD [in]: pattern.
 *      SIZE_T [in]: byte offset.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

RTAPI void RTCALLTYPE FillMemoryDwordOffset(LPVOID pvDest, SIZE_T cbBuffer, DWORD dwFill, SIZE_T ibOffset)
{
    FillMemoryDword((LPBYTE)pvDest + ibOffset, cbBuffer - ibOffset, dwFill);
}


/***************************************************************************
 *
 *  ZeroMemory
 *
 *  Description:
 *      Fills a buffer with a 0 pattern.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      SIZE_T [in]: buffer size.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

RTAPI void RTCALLTYPE ZeroMemory(LPVOID pvDest, SIZE_T cbBuffer)
{
    FillMemory(pvDest, cbBuffer, 0);
}


/***************************************************************************
 *
 *  ZeroMemoryOffset
 *
 *  Description:
 *      Fills a buffer with a 0 pattern.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      SIZE_T [in]: buffer size.
 *      SIZE_T [in]: byte offset.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

RTAPI void RTCALLTYPE ZeroMemoryOffset(LPVOID pvDest, SIZE_T cbBuffer, SIZE_T ibOffset)
{
    ZeroMemory((LPBYTE)pvDest + ibOffset, cbBuffer - ibOffset);
}


/***************************************************************************
 *
 *  CopyMemory
 *
 *  Description:
 *      Copies one buffer over another of equal size.
 *
 *  Arguments:
 *      LPVOID [in]: destination buffer pointer.
 *      LPVOID [in]: source buffer pointer.
 *      SIZE_T [in]: buffer size.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

RTAPI void RTCALLTYPE CopyMemory(LPVOID pvDest, LPCVOID pvSource, SIZE_T cbBuffer)
{

#ifdef Not_VxD

    ASSERT(!IsBadWritePtr(pvDest, cbBuffer));
    ASSERT(!IsBadReadPtr(pvSource, cbBuffer));

#endif // Not_VxD

    if(pvDest == pvSource)
    {
        return;
    }

#ifdef USE_FAST_RUNTIME

    FastCopyMemory(pvDest, pvSource, cbBuffer);

#elif defined(USE_INTRINSICS)

    memcpy(pvDest, pvSource, (size_t)cbBuffer);

#else

    SlowCopyMemory(pvDest, pvSource, cbBuffer);

#endif

}


/***************************************************************************
 *
 *  CopyMemoryOffset
 *
 *  Description:
 *      Copies one buffer over another of equal size.
 *
 *  Arguments:
 *      LPVOID [in]: destination buffer pointer.
 *      LPVOID [in]: source buffer pointer.
 *      SIZE_T [in]: buffer size.
 *      SIZE_T [in]: byte offset.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

RTAPI void RTCALLTYPE CopyMemoryOffset(LPVOID pvDest, LPCVOID pvSource, SIZE_T cbBuffer, SIZE_T ibOffset)
{
    CopyMemory((LPBYTE)pvDest + ibOffset, (const BYTE *)pvSource + ibOffset, cbBuffer - ibOffset);
}


/***************************************************************************
 *
 *  CompareMemory
 *
 *  Description:
 *      Compares one buffer to another of equal size.
 *
 *  Arguments:
 *      LPVOID [in]: destination buffer pointer.
 *      LPVOID [in]: source buffer pointer.
 *      SIZE_T [in]: buffer size.
 *
 *  Returns:
 *      BOOL: TRUE if the buffers are equal.
 *
 ***************************************************************************/

RTAPI BOOL RTCALLTYPE CompareMemory(LPCVOID pvDest, LPCVOID pvSource, SIZE_T cbBuffer)
{

#ifdef Not_VxD

    ASSERT(!IsBadReadPtr(pvDest, cbBuffer));
    ASSERT(!IsBadReadPtr(pvSource, cbBuffer));

#endif // Not_VxD

    if(pvDest == pvSource)
    {
        return TRUE;
    }

#ifdef USE_FAST_RUNTIME

    return FastCompareMemory(pvDest, pvSource, cbBuffer);

#elif defined(USE_INTRINSICS)

    return !memcmp(pvDest, pvSource, (size_t)cbBuffer);

#else

    return SlowCompareMemory(pvDest, pvSource, cbBuffer);

#endif

}


/***************************************************************************
 *
 *  CompareMemoryOffset
 *
 *  Description:
 *      Compares one buffer to another of equal size.
 *
 *  Arguments:
 *      LPVOID [in]: destination buffer pointer.
 *      LPVOID [in]: source buffer pointer.
 *      SIZE_T [in]: buffer size.
 *      SIZE_T [in]: byte offset.
 *
 *  Returns:
 *      BOOL: TRUE if the buffers are equal.
 *
 ***************************************************************************/

RTAPI BOOL RTCALLTYPE CompareMemoryOffset(LPCVOID pvDest, LPCVOID pvSource, SIZE_T cbBuffer, SIZE_T ibOffset)
{
    return CompareMemory((const BYTE *)pvDest + ibOffset, (const BYTE *)pvSource + ibOffset, cbBuffer - ibOffset);
}


/***************************************************************************
 *
 *  InitStruct
 *
 *  Description:
 *      Initializes a structure.  It's assumed that the first SIZE_T of the
 *      structure should contain the structure's size.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      SIZE_T [in]: buffer size.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

RTAPI void RTCALLTYPE InitStruct(LPVOID pvDest, DWORD cbBuffer)
{
    *(LPDWORD)pvDest = cbBuffer;
    ZeroMemoryOffset(pvDest, cbBuffer, sizeof(DWORD));
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\runtime.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       runtime.cpp
 *  Content:    New versions of C++ runtime functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  12/17/97    dereks  Created
 *
 ***************************************************************************/


/***************************************************************************
 *
 *  operator new
 *
 *  Description:
 *      Overrides the global new operator.
 *
 *  Arguments:
 *      SIZE_T [in]: buffer size.
 *
 *  Returns:
 *      LPVOID: pointer to new memory block.
 *
 ***************************************************************************/

#ifdef DEBUG
__inline LPVOID __cdecl operator new(size_t cbBuffer, LPCTSTR pszFile, UINT nLine, LPCTSTR pszClass)
#else // DEBUG
__inline LPVOID __cdecl operator new(size_t cbBuffer)
#endif // DEBUG
{
    LPVOID p;

#if defined(DEBUG) && defined(Not_VxD)
    ASSERT(cbBuffer);
    p = MemAlloc(cbBuffer, pszFile, nLine, pszClass);
#else
    p = MemAlloc(cbBuffer);
#endif

    return p;
}


/***************************************************************************
 *
 *  operator delete
 *
 *  Description:
 *      Overrides the global delete operator.
 *
 *  Arguments:
 *      LPVOID [in]: memory block.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

__inline void __cdecl operator delete(LPVOID p)
{

#ifdef Not_VxD
    ASSERT(p);
#endif // Not_VxD

    MemFree(p);
}

#if _MSC_VER >= 1200

__inline void __cdecl operator delete(LPVOID p, LPCTSTR pszFile, UINT nLine, LPCTSTR pszClass)
{

#ifdef Not_VxD
    ASSERT(p);
#endif // Not_VxD

    MemFree(p);
}

#endif


/***************************************************************************
 *
 *  _purecall
 *
 *  Description:
 *      Override the CRT's __purecall() function.  This would be called if
 *      dsound had a bug and called one of its own pure virtual functions.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      int: undefined.
 *
 ***************************************************************************/

#ifdef Not_VxD
__inline int __cdecl _purecall(void)
{
    DPF(DPFLVL_ERROR, "This function should never be called");
    ASSERT(FALSE);
    return 0;
}
#endif Not_VxD


/***************************************************************************
 *
 *  __delete
 *
 *  Description:
 *      A function template used by our DELETE() macro to call the delete
 *      operator "safely".  This template generates 62 instantiations at
 *      last count, and it's pointless overhead since C++ guarantees that
 *      "delete 0" is safe.  FIXME: get rid of this as soon as convenient.
 *
 *  Arguments:
 *      void * [in]: pointer to memory block.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

template<class T> void __delete(T *p)
{
    if(p)
    {
        delete p;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\sources.inc ===
#############################################################################
# Copyright (C) Microsoft Corporation 2000
#############################################################################

!ifndef DXROOT
DXROOT = ..\..\..
!endif

!include $(DXROOT)\project.mk
!include ..\..\buildmode.inc

MAJORCOMP = windows
MINORCOMP = directx

TARGETNAME = dsound
TARGETTYPE = DYNLINK
TARGETPATH = $(_OBJ_DIR)
TARGETPATHLIB = $(_OBJ_DIR)
PASS1_PUBLISH = {$(O)\$(TARGETNAME).lib=$(SDK_LIB_PATH)\$(TARGETNAME).lib}
NTTARGETFILE0 = misc

USE_MAPSYM = 1
LARGE_ADDRESS_AWARE = 1

C_DEFINES = $(C_DEFINES) -D_WIN32 -DWHISTLER -DNot_VxD # -DPROFILEREMIXING

!if defined(USE_ICECAP) || defined(USE_ICECAP4)
LINKER_FLAGS = /debugtype:fixup
!endif

!if !$(FREEBUILD)

MSC_OPTIMIZATION = $(MSC_OPTIMIZATION) /Od

!if "$(BuildMode)" == "internal"
C_DEFINES = $(C_DEFINES) -DDEBUG=1
!else
C_DEFINES = $(C_DEFINES) -DRDEBUG=1
!endif

!endif

# We always want the .ASM dump files:
# Careful - generating .ASM files in $(O) causes "build -z" not to rebuild anything!
# Using .COD files (e.g. with /FAcs) or putting them elsewhere might help.
# Commented out for now:
# MSC_OPTIMIZATION = $(MSC_OPTIMIZATION) /FAs /Fa$(O)/

INCLUDES = $(PROJECT_INC_PATH);\
           ..\..\dsvxd;\
           $(DXROOT)\inc;\
           $(DXROOT)\misc;\
           $(DXROOT)\dxg\dd\ddraw\ddhelp;\
           $(DXROOT)\dxg\dd\ddraw\main;\
           $(BASEDIR)\public\sdk\inc;\
           $(BASEDIR)\public\internal\drivers\inc;\
           $(BASEDIR)\public\sdk\amovie\inc

LINKLIBS = $(SDK_LIB_PATH)\dmoguids.lib $(SDK_LIB_PATH)\strmbase.lib

SOURCES = debug.c \
          decibels.c \
          dllmain.cpp \
          ds3d.cpp \
          multi3d.cpp \
          dsadmin.cpp \
          dsaphack.c \
          dsapi.cpp \
          dsbnotes.cpp \
          dsbuf.cpp \
          dscap.cpp \
          dscom.cpp \
          dsfd.cpp \
          dsmemmgr.c \
          dsobj.cpp \
          dsound.rc \
          dsprvobj.cpp \
          dsvalid.c \
          dxcrt.c \
          dynaload.c \
          emvad.cpp \
          filter.c \
          grace.cpp \
          grsource.cpp \
          grsub.cpp \
          iirlut.cpp \
          kshlp.cpp \
          ksvad.cpp \
          kscap.cpp \
          ks3d.cpp \
          misc.c \
          mix.cpp \
          mxvad.cpp \
          pnphlp.cpp \
          pset.cpp \
          reghlp.c \
          rfcircvec.cpp \
          synch.cpp \
          vad.cpp \
          vector.c \
          verify.cpp \
          vmaxcoef.cpp \
          effects.cpp \
          capteff.cpp \
          dssink.cpp \
          dsbufcfg.cpp \
          dmstrm.cpp \
          ksuserw.cpp \
          streamer.cpp \
          dsclock.cpp
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\rtslow.c ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       rtslow.h
 *  Content:    New versions of C runtime functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  12/17/97    dereks  Created
 *
 ***************************************************************************/


/***************************************************************************
 *
 *  FillMemory
 *
 *  Description:
 *      Fills a buffer with a given byte pattern.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      SIZE_T [in]: buffer size.
 *      BYTE [in]: byte pattern.
 *
 *  Returns:  
 *      (VOID)
 *
 ***************************************************************************/

RTAPI VOID RTCALLTYPE SlowFillMemory(LPVOID pvDest, SIZE_T cbBuffer, BYTE bFill)
{
    PSIZE_T                 pdwBuffer;
    LPBYTE                  pbBuffer;
    SIZE_T                  dwFill;
    UINT                    i;

    for(i = 0, dwFill = bFill; i < sizeof(SIZE_T) - 1; i++)
    {
        dwFill <<= 8;
        dwFill |= bFill;
    }
    
    pdwBuffer = (PSIZE_T)pvDest;
    
    while(cbBuffer >= sizeof(*pdwBuffer))
    {
        *pdwBuffer++ = dwFill;
        cbBuffer -= sizeof(*pdwBuffer);
    }

    pbBuffer = (LPBYTE)pdwBuffer;

    while(cbBuffer)
    {
        *pbBuffer++ = bFill;
        cbBuffer--;
    }
}


/***************************************************************************
 *
 *  FillMemoryDword
 *
 *  Description:
 *      Fills a buffer with a given dword pattern.
 *
 *  Arguments:
 *      LPVOID [in]: buffer pointer.
 *      SIZE_T [in]: buffer size.
 *      DWORD [in]: pattern.
 *
 *  Returns:  
 *      (VOID)
 *
 ***************************************************************************/

RTAPI VOID RTCALLTYPE SlowFillMemoryDword(LPVOID pvDest, SIZE_T cbBuffer, DWORD dwFill)
{
    LPDWORD                 pdwBuffer;

    pdwBuffer = (LPDWORD)pvDest;
    
    while(cbBuffer >= sizeof(*pdwBuffer))
    {
        *pdwBuffer++ = dwFill;
        cbBuffer -= sizeof(*pdwBuffer);
    }
}


/***************************************************************************
 *
 *  CopyMemory
 *
 *  Description:
 *      Copies one buffer over another of equal size.
 *
 *  Arguments:
 *      LPVOID [in]: destination buffer pointer.
 *      LPVOID [in]: source buffer pointer.
 *      SIZE_T [in]: buffer size.
 *
 *  Returns:  
 *      (VOID)
 *
 ***************************************************************************/

RTAPI VOID RTCALLTYPE SlowCopyMemory(LPVOID pvDest, LPCVOID pvSource, SIZE_T cbBuffer)
{
    PSIZE_T                 pdwDest;
    const SIZE_T *          pdwSource;
    LPBYTE                  pbDest;
    const BYTE *            pbSource;

    pdwDest = (PSIZE_T)pvDest;
    pdwSource = (PSIZE_T)pvSource;
    
    while(cbBuffer >= sizeof(*pdwDest))
    {
        *pdwDest++ = *pdwSource++;
        cbBuffer -= sizeof(*pdwDest);
    }

    pbDest = (LPBYTE)pdwDest;
    pbSource = (LPBYTE)pdwSource;
    
    while(cbBuffer)
    {
        *pbDest++ = *pbSource++;
        cbBuffer--;
    }
}


/***************************************************************************
 *
 *  CompareMemory
 *
 *  Description:
 *      Compares one buffer to another of equal size.
 *
 *  Arguments:
 *      LPVOID [in]: destination buffer pointer.
 *      LPVOID [in]: source buffer pointer.
 *      SIZE_T [in]: buffer size.
 *
 *  Returns:  
 *      BOOL: TRUE if the buffers are equal.
 *
 ***************************************************************************/

RTAPI BOOL RTCALLTYPE SlowCompareMemory(LPCVOID pvDest, LPCVOID pvSource, SIZE_T cbBuffer)
{
    const SIZE_T *          pdwDest;
    const SIZE_T *          pdwSource;
    const BYTE *            pbDest;
    const BYTE *            pbSource;

    pdwDest = (PSIZE_T)pvDest;
    pdwSource = (PSIZE_T)pvSource;
    
    while(cbBuffer >= sizeof(*pdwDest))
    {
        if(*pdwDest++ != *pdwSource++)
        {
            return FALSE;
        }

        cbBuffer -= sizeof(*pdwDest);
    }

    pbDest = (LPBYTE)pdwDest;
    pbSource = (LPBYTE)pdwSource;
    
    while(cbBuffer)
    {
        if(*pbDest++ != *pbSource++)
        {
            return FALSE;
        }

        cbBuffer--;
    }

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\runtime.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       runtime.h
 *  Content:    New versions of C runtime functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  12/17/97    dereks  Created
 *
 ***************************************************************************/

#ifndef __RUNTIME_H__
#define __RUNTIME_H__

#undef FillMemory
#undef CopyMemory
#undef CompareMemory
#undef ZeroMemory
#undef DELETE

// We have BYTE, WORD and DWORD, but no QWORD?
typedef unsigned __int64 QWORD, *LPQWORD;

// Boundaries of numeric types
#define MAX_CHAR        ((CHAR)0x7F)
#define MIN_CHAR        ((CHAR)-0x7F)

#define MAX_UCHAR       ((UCHAR)0xFF)
#define MIN_UCHAR       ((UCHAR)0)

#define MAX_SHORT       ((SHORT)0x7FFF)
#define MIN_SHORT       ((SHORT)-0x7FFF)

#define MAX_USHORT      ((USHORT)0xFFFF)
#define MIN_USHORT      ((USHORT)0)

#define MAX_INT         ((INT)0x7FFFFFFF)
#define MIN_INT         ((INT)-0x7FFFFFFF)

#define MAX_UINT        ((UINT)0xFFFFFFFF)
#define MIN_UINT        ((UINT)0)

#define MAX_LONG        MAX_INT
#define MIN_LONG        MIN_INT

#define MAX_ULONG       MAX_UINT
#define MIN_ULONG       MIN_UINT

#define MAX_INT64       ((INT64)0x7FFFFFFFFFFFFFFF)
#define MIN_INT64       ((INT64)-0x7FFFFFFFFFFFFFFF)

#define MAX_UINT64      ((UINT64)0xFFFFFFFFFFFFFFFF)
#define MIN_UINT64      ((UINT64)0)

#define MAX_LONGLONG    MAX_INT64
#define MIN_LONGLONG    MIN_INT64

#define MAX_ULONGLONG   MAX_UINT64
#define MIN_ULONGLONG   MIN_UINT64

#define MAX_BYTE        MAX_UCHAR
#define MIN_BYTE        MIN_UCHAR

#define MAX_WORD        MAX_USHORT
#define MIN_WORD        MIN_USHORT

#define MAX_DWORD       MAX_ULONG
#define MIN_DWORD       MIN_ULONG

#define MAX_QWORD       MAX_UINT64
#define MIN_QWORD       MIN_UINT64

#define NUMERIC_CAST(val, type) \
            ((type)min(MAX_##type, max(MIN_##type, val)))

// Sundown
#ifdef WIN64

#pragma warning(disable:4311)   // type cast truncation

#ifndef __midl

__inline unsigned long PtrDiffToUlong(__int64 n64)
{
    return((unsigned long)n64);
}

__inline long PtrDiffToLong(__int64 n64)
{
    return((long)n64);
}

__inline int PtrDiffToInt(__int64 n64)
{
    return((int)n64);
}

#endif // __midl

#pragma warning(3:4311)   // type cast truncation

#else // WIN64

#define PtrDiffToUlong(n64) \
            ((unsigned long)(n64))

#define PtrDiffToLong(n64) \
            ((long)(n64))

#define PtrDiffToInt(n64) \
            ((int)(n64))

#endif // WIN64

#ifdef __cplusplus

#ifdef DEBUG

#define NEW(type) \
            new(TEXT(__FILE__), __LINE__, TEXT(#type)) type

#else // DEBUG

#define NEW(type) \
            new type

#endif // DEBUG

#define DELETE(p) \
            __delete(p), (p) = NULL

#define NEW_HR(p, type) \
            HRFROMP(p = NEW(type))

#endif // __cplusplus

#ifdef USE_INLINE_ASM
#define USE_FAST_RUNTIME
#endif // USE_INLINE_ASM

#ifdef Not_VxD
#define USE_INTRINSICS
#endif // Not_VxD

#define RTAPI static
#define RTCALLTYPE __cdecl

#ifdef USE_FAST_RUNTIME
#include "rtfast.c"
#endif // USE_FAST_RUNTIME

#include "rtslow.c"

#ifndef DEBUG
#undef RTAPI
#define RTAPI __inline
#endif // DEBUG

#include "runtime.c"

#ifdef __cplusplus
#include "runtime.cpp"
#endif // __cplusplus

#endif // __RUNTIME_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\streamer.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 2000 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:        streamer.cpp
 *  Content:     Implementation of class CStreamingThread.
 *  Description: This file contains the thread used by dsound to pull audio
 *               from streaming sources and/or perform FX processing on it.
 *
 *               The following types of object register with us, and we call
 *               them back periodically to do their respective processing:
 *               - CDirectSoundSink: stream data from an IDirectSoundSource.
 *               - CDirectSoundSecondaryBuffer (MIXIN buffers): write silence
 *                 to them in preparation for Send effects writing to them.
 *               - CEffectChain objects: process FX associated with a buffer.
 *
 *  History:
 *
 * Date      By       Reason
 * ========  =======  ======================================================
 * 02/01/00  duganp   Created
 *
 ***************************************************************************/

#include "dsoundi.h"

#ifdef SHARED // Shared dsound.dll (Win9x)

    // Static list of streaming/FX threads (one per dsound process).
    static CList<CStreamingThread*>* g_plstStreamingThreads;

#else // Non-shared dsound.dll (WinNT)

    // A single streaming/FX thread for the current process
    static CStreamingThread* g_pStreamingThread = NULL;

#endif


/***************************************************************************
 *
 *  GetStreamingThread
 *
 *  Description:
 *      Creates a new streaming CStreamingThread object for this process
 *      if none yet exists, and returns a pointer to it.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      CStreamingThread*: pointer to the streaming thread object.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetStreamingThread"

CStreamingThread* GetStreamingThread()
{
    DPF_ENTER();

    CStreamingThread* pStreamer = NULL;

#ifdef SHARED

    if (!g_plstStreamingThreads)
        g_plstStreamingThreads = NEW(CList<CStreamingThread*>);

    // Win9x case - look up streaming object by process ID
    DWORD dwProcId = GetCurrentProcessId();
    CNode<CStreamingThread*> *pStreamerNode;

    for (pStreamerNode = g_plstStreamingThreads->GetListHead(); pStreamerNode && !pStreamer; pStreamerNode = pStreamerNode->m_pNext)
        if (pStreamerNode->m_data->GetOwningProcess() == dwProcId)
            pStreamer = pStreamerNode->m_data;

    if (!pStreamer)
        if (pStreamer = NEW(CStreamingThread))
            if (!g_plstStreamingThreads->AddNodeToList(pStreamer))
                delete pStreamer;

#else // !SHARED

    // WinNT case - much simpler, as usual
    if (!g_pStreamingThread)
        g_pStreamingThread = NEW(CStreamingThread);
    pStreamer = g_pStreamingThread;

#endif // SHARED

    DPF_LEAVE(pStreamer);
    return pStreamer;
}


/***************************************************************************
 *
 *  FreeStreamingThread
 *
 *  Description:
 *      Frees this process's CStreamingThread - called from DllProcessDetach.
 *
 *  Arguments:
 *      DWORD [in]: Process ID of departing process.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "FreeStreamingThread"

void FreeStreamingThread(DWORD dwProcessId)
{
    DPF_ENTER();

#ifdef SHARED

    if (g_plstStreamingThreads)
    {
        CNode<CStreamingThread*> *pStreamerNode;
        for (pStreamerNode = g_plstStreamingThreads->GetListHead(); pStreamerNode; pStreamerNode = pStreamerNode->m_pNext)
            if (pStreamerNode->m_data->GetOwningProcess() == dwProcessId)
            {
                delete pStreamerNode->m_data;
                g_plstStreamingThreads->RemoveNodeFromList(pStreamerNode);
                break;
            }
        if (g_plstStreamingThreads->GetNodeCount() == 0)
            DELETE(g_plstStreamingThreads);
    }

#else // !SHARED

    if (g_pStreamingThread)
        delete g_pStreamingThread;

#endif

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CStreamingThread::CStreamingThread
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::CStreamingThread"

CStreamingThread::CStreamingThread() : CThread(FALSE, TEXT("Streaming"))
{
    DPF_ENTER();
    DPF_CONSTRUCT(CStreamingThread);

    // Initialize defaults
    m_dwInterval = INITIAL_WAKE_INTERVAL;
    m_dwWriteAhead = INITIAL_WRITEAHEAD;
    m_dwLastProcTime = MAX_DWORD;
    m_hWakeNow = INVALID_HANDLE_VALUE;
    m_nCallCount = 0;

    #ifdef DEBUG_TIMING  // Read some timing parameters from the registry
    HKEY hkey;
    if (SUCCEEDED(RhRegOpenPath(HKEY_CURRENT_USER, &hkey, REGOPENPATH_DEFAULTPATH | REGOPENPATH_DIRECTSOUND, 1, TEXT("Streaming thread settings"))))
    {
        if (SUCCEEDED(RhRegGetBinaryValue(hkey, TEXT("Wake interval"), &m_dwInterval, sizeof m_dwInterval)))
            DPF(DPFLVL_INFO, "Read initial processing period %lu from registry", m_dwInterval);
        RhRegCloseKey(&hkey);
    }
    m_dwTickCount = MAX_DWORD;
    #endif

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CStreamingThread::~CStreamingThread
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::~CStreamingThread"

CStreamingThread::~CStreamingThread()
{
    DPF_ENTER();
    DPF_DESTRUCT(CStreamingThread);

    // Undo the effect of the previous call to timeBeginPeriod(1)
    timeEndPeriod(1); 

    // Check we have no pending clients
    ASSERT(m_lstSinkClient.GetNodeCount() == 0);
    ASSERT(m_lstMixClient.GetNodeCount() == 0);
    ASSERT(m_lstFxClient.GetNodeCount() == 0);

    // Check that we've already terminated the worker thread
    #ifdef WINNT
    ASSERT(!IsThreadRunning());
    #endif
    
    // On Win9x we can't make this assertion, because we may be being freed from
    // DllProcessDetach() in the DDHELP process, which can't terminate our thread.

    // Free resources
    CLOSE_HANDLE(m_hWakeNow);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CStreamingThread::Initialize
 *
 *  Description:
 *      Initializes the CStreamingThread object: creates the wakeup event
 *      and launches the thread itself.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::Initialize"

HRESULT CStreamingThread::Initialize()
{
    HRESULT hr = DS_OK;
    DPF_ENTER();

    // Ensure that we get 1-ms resolution from timeGetTime on NT
    timeBeginPeriod(1); 

    // Create the wakeup event, if it hasn't been created already -
    // FIXME: why are we coming more than once into this function?
    if (!IsValidHandleValue(m_hWakeNow))
    {
        m_hWakeNow = CreateGlobalEvent(NULL, FALSE);
        if (!IsValidHandleValue(m_hWakeNow))
            hr = DSERR_OUTOFMEMORY;
    }

    // Create the worker thread
    if (SUCCEEDED(hr))
        hr = CThread::Initialize();

    // Boost its priority
    if (SUCCEEDED(hr))
        if (!SetThreadPriority(THREAD_PRIORITY_TIME_CRITICAL))
            DPF(DPFLVL_ERROR, "Failed to boost thread priority (error %lu)!", GetLastError());

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CStreamingThread::RegisterSink
 *
 *  Description:
 *      Registers a sink object to be called back by us for processing.
 *
 *  Arguments:
 *      CDirectSoundSink* [in]: sink object to be registered.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::RegisterSink"

HRESULT CStreamingThread::RegisterSink(CDirectSoundSink* pSink)
{
    HRESULT hr = DS_OK;
    DPF_ENTER();

    if (!IsThreadRunning())
        hr = Initialize();

    if (SUCCEEDED(hr))
    {
        ASSERT(!m_lstSinkClient.IsDataInList(pSink));
        hr = HRFROMP(m_lstSinkClient.AddNodeToList(pSink));
    }

    if (SUCCEEDED(hr))
        DPF(DPFLVL_MOREINFO, "Registered DirectSound sink at 0x%8.8lX", pSink);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CStreamingThread::RegisterMixBuffer
 *
 *  Description:
 *      Registers a MIXIN buffer to be called back by us for processing.
 *
 *  Arguments:
 *      CDirectSoundSecondaryBuffer* [in]: buffer to be registered.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::RegisterMixBuffer"

HRESULT CStreamingThread::RegisterMixBuffer(CDirectSoundSecondaryBuffer* pBuffer)
{
    HRESULT hr = DS_OK;
    DPF_ENTER();

    ASSERT(pBuffer->GetBufferType() & DSBCAPS_MIXIN);

    if (!IsThreadRunning())
        hr = Initialize();

    if (SUCCEEDED(hr))
    {
        ASSERT(!m_lstMixClient.IsDataInList(pBuffer));
        hr = HRFROMP(m_lstMixClient.AddNodeToList(pBuffer));
    }

    if (SUCCEEDED(hr))
        DPF(DPFLVL_MOREINFO, "Registered MIXIN buffer at 0x%p (owned by %s sink)", pBuffer,
            pBuffer->GetBufferType() & DSBCAPS_SINKIN ? TEXT("a") : TEXT("no"));

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CStreamingThread::RegisterFxChain
 *
 *  Description:
 *      Registers an FX chain object to be called back by us for processing.
 *
 *  Arguments:
 *      CEffectChain* [in]: FX chain object to be registered.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::RegisterFxChain"

HRESULT CStreamingThread::RegisterFxChain(CEffectChain* pFxChain)
{
    HRESULT hr = DS_OK;
    DPF_ENTER();

    if (!IsThreadRunning())
        hr = Initialize();

    if (SUCCEEDED(hr))
    {
        ASSERT(!m_lstFxClient.IsDataInList(pFxChain));
        hr = HRFROMP(m_lstFxClient.AddNodeToListHead(pFxChain));
    }

    // The SetFX() API forces apps to create send chains from the bottom up
    // (i.e. every destination is created before its send).  Hence, adding
    // nodes using AddNodeToListHEAD() here guarantees that sends will be
    // processed before their destinations.

    if (SUCCEEDED(hr))
        DPF(DPFLVL_MOREINFO, "Registered FX chain at 0x%p (associated to a %ssink buffer)", pFxChain,
            pFxChain->m_pDsBuffer->GetBufferType() & DSBCAPS_SINKIN ? TEXT("") : TEXT("non-"));

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CStreamingThread::UnregisterSink
 *
 *  Description:
 *      Unregisters a previously registered sink object.
 *
 *  Arguments:
 *      CDirectSoundSink* [in]: sink object to be unregistered.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::UnregisterSink"

void CStreamingThread::UnregisterSink(CDirectSoundSink* pSink)
{
    DPF_ENTER();

    BOOL fSuccess = m_lstSinkClient.RemoveDataFromList(pSink);
    ASSERT(fSuccess);

    MaybeTerminate();

    DPF(DPFLVL_MOREINFO, "Unregistered DirectSound sink at 0x%p", pSink);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CStreamingThread::UnregisterMixBuffer
 *
 *  Description:
 *      Unregisters a previously registered MIXIN buffer.
 *
 *  Arguments:
 *      CDirectSoundSecondaryBuffer* [in]: buffer to be unregistered.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::UnregisterMixBuffer"

void CStreamingThread::UnregisterMixBuffer(CDirectSoundSecondaryBuffer* pBuffer)
{
    DPF_ENTER();

    BOOL fSuccess = m_lstMixClient.RemoveDataFromList(pBuffer);
    ASSERT(fSuccess);

    MaybeTerminate();

    DPF(DPFLVL_MOREINFO, "Unregistered MIXIN buffer at 0x%p", pBuffer);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CStreamingThread::UnregisterFxChain
 *
 *  Description:
 *      Unregisters a previously registered FX chain object.
 *
 *  Arguments:
 *      CEffectChain* [in]: FX chain object to be unregistered.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::UnregisterFxChain"

void CStreamingThread::UnregisterFxChain(CEffectChain* pFxChain)
{
    DPF_ENTER();

    BOOL fSuccess = m_lstFxClient.RemoveDataFromList(pFxChain);
    ASSERT(fSuccess);

    MaybeTerminate();

    DPF(DPFLVL_MOREINFO, "Unregistered FX chain at 0x%p", pFxChain);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CStreamingThread::WakeUpNow
 *
 *  Description:
 *      Sets the wakeup event, so that we'll wake up and perform processing
 *      as soon as the DLL lock becomes available.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::WakeUpNow"

HRESULT CStreamingThread::WakeUpNow()
{
    #ifdef DEBUG_TIMING
    dprintf(DPFLVL_INFO, "Calling " DPF_FNAME);
    #endif

    HRESULT hr;
    DPF_ENTER();

    if (IsThreadRunning())
        hr = SetEvent(m_hWakeNow) ? DS_OK : WIN32ERRORtoHRESULT(GetLastError());
    else
        hr = DSERR_UNINITIALIZED;

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CStreamingThread::ThreadProc
 *
 *  Description:
 *      Our thread procedure.  Handles timing calculations and calls
 *      ProcessAudio() to do the actual work.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::ThreadProc"

HRESULT CStreamingThread::ThreadProc()
{
    HRESULT hr = DS_OK;
    DPF_ENTER();

    DWORD dwSleep;  // Thread sleep period in milliseconds

    if (m_dwLastProcTime == MAX_DWORD)  // First time through
    {
        dwSleep = m_dwInterval;
    }
    else // Sleep until "last time we ran ProcessAudio() + m_dwInterval"
    {
        dwSleep = m_dwLastProcTime + m_dwInterval - timeGetTime();
        if (LONG(dwSleep) < STREAMING_MIN_PERIOD)
            dwSleep = STREAMING_MIN_PERIOD;  // Minimum sleep period, to allow other threads to run
    }

    #ifdef DEBUG_TIMING
    if (dwSleep == STREAMING_MIN_PERIOD)
        DPF(DPFLVL_MOREINFO, "Using minimum sleep (%d ms)!", STREAMING_MIN_PERIOD);
    m_dwTickCount = timeGetTime();
    #endif    

    // Sleep for dwSleep milliseconds, unless m_hWakeNow kicks us out of bed
    if (TpWaitObjectArray(dwSleep, 1, &m_hWakeNow, NULL))
    {
        #ifdef DEBUG_TIMING
        DWORD dwLastTickCount = m_dwTickCount;
        m_dwTickCount = timeGetTime();
        LONG lDelay = m_dwTickCount - dwLastTickCount - dwSleep;
        if (lDelay > 20 || lDelay < -20)
            DPF(DPFLVL_MOREINFO, "%s thread woke up %d ms %s", m_pszName, ABS(lDelay), lDelay > 0 ? TEXT("late") : TEXT("early"));
        #endif

        // This is where we grab the dsound mutex and lock out anyone else from
        // using any dsound API calls for a while
        if (TpEnterDllMutex())
        {
            DWORD dwProcTime = timeGetTime();

            #ifdef DEBUG_TIMING
            lDelay = dwProcTime - m_dwTickCount;
            if (lDelay > 20)
                DPF(DPFLVL_MOREINFO, "Took %d ms to get the DLL mutex", lDelay);
            #endif
        
            REFERENCE_TIME rtSliceSize;
            if (m_dwLastProcTime == MAX_DWORD)  // First time through
                rtSliceSize = MsToRefTime(INITIAL_WAKE_INTERVAL);
            else
                rtSliceSize = MsToRefTime((dwProcTime - m_dwLastProcTime) % INTERNAL_BUFFER_LENGTH);

            // DPF(DPFLVL_MOREINFO, "Processing a slice of %lu ms", dwProcTime - m_dwLastProcTime);

            // If dwProcTime-m_dwLastProcTime > INTERNAL_BUFFER_LENGTH,
            // we've probably been stopped in the debugger or otherwise
            // interrupted for over INTERNAL_BUFFER_LENGTH milliseconds.
            // Perhaps we should reinitialize everything in this case.

            // Only process if more than 1 ms has passed since the last run.
            // If we've woken up early because someone called WakeUpNow(),
            // too bad; ProcessAudio() requires a non-zero rtSliceSize.
            if (rtSliceSize)
            {
                m_dwLastProcTime = dwProcTime;
                hr = ProcessAudio(rtSliceSize);  // Do the actual work
            }
            #ifdef DEBUG_TIMING
            else DPF(DPFLVL_INFO, "0 ms since last run - skipping ProcessAudio()");
            #endif

            LEAVE_DLL_MUTEX();
        }

        #ifdef DEBUG_TIMING
        lDelay = timeGetTime() - m_dwLastProcTime;
        if (lDelay > 20)
            DPF(DPFLVL_MOREINFO, "%s thread spent %ld ms processing!", m_pszName, lDelay);
        #endif
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CStreamingThread::ProcessAudio
 *
 *  Description:
 *      Loops through all our registered client objects, invoking the
 *      appropriate processing for each.
 *
 *  Arguments:
 *      REFERENCE_TIME [in]: Amount of audio to process in reftime units.
 *                           This can be overriden by our sink client[s].
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStreamingThread::ProcessAudio"

HRESULT CStreamingThread::ProcessAudio(REFERENCE_TIME rtSliceSize)
{
    CNode<CDirectSoundSink*>* pSinkNode;            // For iterating through our sinks
    CNode<CEffectChain*>* pFxNode;                  // For iterating through our FX chains
    CNode<CDirectSoundSecondaryBuffer*>* pMixNode;  // For iterating through our MIXIN buffers
    CDirectSoundSecondaryBuffer* pBuf;              // For convenience below
    DWORD dwLatencyBoost = 0;
    HRESULT hr;
    DPF_ENTER();

    ASSERT(rtSliceSize > 0);

    if (m_nCallCount % 100 == 0)
        DPF(DPFLVL_MOREINFO, "%dth call: processing %d sinks, %d MIXIN buffers, %d FX chains", m_nCallCount,
            m_lstSinkClient.GetNodeCount(), m_lstMixClient.GetNodeCount(), m_lstFxClient.GetNodeCount());
    ++m_nCallCount;

    #ifdef DEBUG_TIMING
    DWORD dwBefore = timeGetTime();
    #endif

    //
    // First process the active sinks (this implicitly sets up the current processing
    // slices that we'll use in the FX processing stage below for all sink buffers)
    //

    for (pSinkNode = m_lstSinkClient.GetListHead(); pSinkNode; pSinkNode = pSinkNode->m_pNext)
    {
        hr = pSinkNode->m_data->ProcessSink();
        if (hr != DS_OK)
            DPF(FAILED(hr) ? DPFLVL_ERROR : DPFLVL_INFO, "ProcessSink() at %08X returned %s", pSinkNode->m_data, HRESULTtoSTRING(hr));
    }

    #ifdef DEBUG_TIMING
    DWORD dwAfter = timeGetTime();
    if (dwAfter-dwBefore > 10)
        DPF(DPFLVL_MOREINFO, "Took %d milliseconds to process sinks", dwAfter-dwBefore);
    dwBefore = dwAfter;
    #endif

    //
    // Update the current playing states and processing slices for all "interdependent"
    // buffers (i.e. MIXIN buffers and buffers with sends).  We don't touch the current
    // slice for SINKIN buffers, since these are handled independently by their sink.
    //

    for (pMixNode = m_lstMixClient.GetListHead(); pMixNode; pMixNode = pMixNode->m_pNext)
        if ((pBuf = pMixNode->m_data)->UpdatePlayState() == Playing && !(pBuf->GetBufferType() & DSBCAPS_SINKIN))
            pBuf->MoveCurrentSlice(RefTimeToBytes(rtSliceSize, pBuf->Format()));

    for (pFxNode = m_lstFxClient.GetListHead(); pFxNode; pFxNode = pFxNode->m_pNext)
        if (!((pBuf = pFxNode->m_data->m_pDsBuffer)->GetBufferType() & DSBCAPS_MIXIN))
            if (pBuf->UpdatePlayState() == Playing && !(pBuf->GetBufferType() & DSBCAPS_SINKIN) && pFxNode->m_data->m_fHasSend)
                pBuf->MoveCurrentSlice(RefTimeToBytes(rtSliceSize, pBuf->Format()));

    // FIXME: these clunky separate loops argue for unifying MIXIN buffers with FX chains

    //
    // Set up the initial processing slices for any MIXIN buffers and effects chains
    // that have just started playing
    //

    for (pMixNode = m_lstMixClient.GetListHead(); pMixNode; pMixNode = pMixNode->m_pNext)
        pMixNode->m_data->SetInitialSlice(rtSliceSize);

    for (pFxNode = m_lstFxClient.GetListHead(); pFxNode; pFxNode = pFxNode->m_pNext)
        pFxNode->m_data->SetInitialSlice(rtSliceSize);

    //
    // Finally process effects (including sends to MIXIN buffers)
    //

    for (pFxNode = m_lstFxClient.GetListHead(); pFxNode; pFxNode = pFxNode->m_pNext)
    {
        hr = pFxNode->m_data->ProcessFx(m_dwWriteAhead, &dwLatencyBoost);
        if (FAILED(hr))
            DPF(DPFLVL_ERROR, "ProcessFx() at %08X failed with %s", pFxNode->m_data, HRESULTtoSTRING(hr));
    }

    #ifdef DEBUG_TIMING
    dwAfter = timeGetTime();
    if (dwAfter - dwBefore > 10)
        DPF(DPFLVL_MOREINFO, "Took %d milliseconds to process effects", dwAfter-dwBefore);
    dwBefore = dwAfter;
    #endif

    //
    // Call CommitToDevice() on the active MIXIN buffers
    //

    for (pMixNode = m_lstMixClient.GetListHead(); pMixNode; pMixNode = pMixNode->m_pNext)
        if ((pBuf = pMixNode->m_data)->IsPlaying())
        {
            DWORD dwStartPos, dwEndPos;
            pBuf->GetCurrentSlice(&dwStartPos, &dwEndPos);
            if (dwStartPos != MAX_DWORD)  // Can happen with sink buffers
            {
                if (dwStartPos < dwEndPos)
                    hr = pBuf->CommitToDevice(dwStartPos, dwEndPos-dwStartPos);
                else // The wraparound case
                {
                    hr = pBuf->CommitToDevice(dwStartPos, pBuf->GetBufferSize()-dwStartPos);
                    if (SUCCEEDED(hr) && dwEndPos != 0)
                        hr = pBuf->CommitToDevice(0, dwEndPos);
                }
                if (FAILED(hr))
                    DPF(DPFLVL_ERROR, "CommitToDevice() at %08X failed with %s", pBuf, HRESULTtoSTRING(hr));
            }
        }

    // Change the latency time as requested by the most-starved client
    // FIXME: this should take into account the 'danger zone', not just actual glitching
    // FIXME: tweak the wakeup interval somehow too?
    #if 0
    if (dwLatencyBoost)
    {
        m_dwWriteAhead += dwLatencyBoost;
        DPF(DPFLVL_MOREINFO, "Boosting %s thread's writeahead by %lu ms (now %lu ms)",
            m_pszName, dwLatencyBoost, m_dwWriteAhead);
    }
    #endif

    // We should always return OK here, barring catastrophic failure -
    // returning a failure code would kill the streaming thread
    DPF_LEAVE_HRESULT(DS_OK);
    return DS_OK;
}


/***************************************************************************
 *
 *  CStreamingThread::MaybeTerminate
 *
 *  Description:
 *      Terminates the thread if we have no more clients left.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

void CStreamingThread::MaybeTerminate()
{
    if (!m_lstSinkClient.GetNodeCount() && !m_lstMixClient.GetNodeCount() && !m_lstFxClient.GetNodeCount() &&
        GetCurrentProcessId() == GetOwningProcess())  // Only the owning process can terminate a thread
    {
        HRESULT hr = CThread::Terminate();
        ASSERT(SUCCEEDED(hr));
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\streamer.h ===
/***************************************************************************
 *
 *  Copyright (C) 2000 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:        streamer.h
 *  Content:     Declaration of class CStreamingThread.
 *  Description: Used to pull audio from sinks and/or perform FX processing.
 *
 *  History:
 *
 * Date      By       Reason
 * ========  =======  ======================================================
 * 02/01/00  duganp   Created
 *
 ***************************************************************************/

#ifndef __STREAMER_H__
#define __STREAMER_H__

#ifdef DEBUG
// #define DEBUG_TIMING  // Uncomment this for some fun timing traces
#endif

#ifdef DEBUG_TIMING
#define DPF_TIMING DPF
#else
#pragma warning(disable:4002)
#define DPF_TIMING()
#endif

// Some constants which determine dsound's basic timing parameters.
// These influence effects processing and streaming from dmusic.

// The streaming thread's initial wake interval in milliseconds:
#define INITIAL_WAKE_INTERVAL   30

// How many milliseconds ahead of the write cursor we stay initially:
#define INITIAL_WRITEAHEAD      100

// Standard duration of mixin/sinkin buffers in milliseconds:
// FIXME: does David's code have some hardcoded assumption about
// this size?  It only seems to work with size == 1000.
#define INTERNAL_BUFFER_LENGTH  1000


#ifdef __cplusplus

// Forward declarations
class CStreamingThread;
class CDirectSoundSink;
class CDirectSoundSecondaryBuffer;
class CEffectChain;

//
// CStreamingThread lifetime management functions
//

CStreamingThread* GetStreamingThread();     // Obtain this process's CStreamingThread, creating it if necessary
void FreeStreamingThread(DWORD dwProcId);   // Free the CStreamingThread object belonging to process dwProcId

//
// CStreamingThread: singleton object which contains and manages the thread
// responsible for periodic processing of our three types of client objects:
// DirectSound sinks, MIXIN buffers and effects chains.
//

class CStreamingThread : private CThread
{
    friend CStreamingThread* GetStreamingThread();          // Creates CStreamingThread objects
    friend void FreeStreamingThread(DWORD dwProcId);        // Deletes them

private:
    CList<CDirectSoundSink*>            m_lstSinkClient;    // List of DirectSoundSink clients
    CList<CDirectSoundSecondaryBuffer*> m_lstMixClient;     // List of MIXIN buffer clients
    CList<CEffectChain*>                m_lstFxClient;      // List of FX-processing clients
    DWORD                               m_dwInterval;       // Thread wake interval in ms
    DWORD                               m_dwLastProcTime;   // When ProcessAudio() was last called in ms
#ifdef DEBUG_TIMING
    DWORD                               m_dwTickCount;      // Used for thread timing log messages
#endif
    DWORD                               m_dwWriteAhead;     // How far ahead of the write cursor to stay in ms
    HANDLE                              m_hWakeNow;         // Event used to force instant wakeup
    int                                 m_nCallCount;       // Number of times we've called ProcessAudio

private:
    // Construction/destruction
    CStreamingThread();
    ~CStreamingThread();
    HRESULT Initialize();
    void MaybeTerminate();

public:
    // Client registration methods
    HRESULT RegisterSink(CDirectSoundSink*);
    HRESULT RegisterMixBuffer(CDirectSoundSecondaryBuffer*);
    HRESULT RegisterFxChain(CEffectChain*);
    void UnregisterSink(CDirectSoundSink*);
    void UnregisterMixBuffer(CDirectSoundSecondaryBuffer*);
    void UnregisterFxChain(CEffectChain*);

    // Thread control methods
    void SetWakePeriod(DWORD dw) {m_dwInterval = dw;}
    void SetWriteAhead(DWORD dw) {m_dwWriteAhead = dw;}
    DWORD GetWakePeriod() {return m_dwInterval;}
    DWORD GetWriteAhead() {return m_dwWriteAhead;}
    HRESULT WakeUpNow();  // Force immediate processing

private:
    // The worker thread procedure and its minions
    HRESULT ThreadProc();
    HRESULT ProcessAudio(REFERENCE_TIME);
    BOOL IsThreadRunning() {return m_hThread != 0;}
};

#endif // __cplusplus
#endif // __STREAMER_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\tlist.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       tlist.h
 *  Content:    Linked-list template classes.  There's some seriously
 *              magical C++ stuff in here, so be forewarned all of you C
 *              programmers.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  4/12/97     dereks  Created.
 *
 ***************************************************************************/

#ifndef __TLIST_H__
#define __TLIST_H__

#ifdef __cplusplus

template <class type> class CNode
{
public:
    CNode<type> *       m_pPrev;        // Previous node in the list
    CNode<type> *       m_pNext;        // Next node in the list
    type                m_data;         // Node data

public:
    CNode(CNode<type> *, const type&);
    virtual ~CNode(void);
};

template <class type> class CList
{
private:
    CNode<type> *       m_pHead;        // Pointer to the head of the list
    CNode<type> *       m_pTail;        // Pointer to the tail of the list
    UINT                m_uCount;       // Count of nodes in the list

public:
    CList(void);
    virtual ~CList(void);

public:
    // Node creation, removal
    virtual CNode<type> *AddNodeToList(const type&);
    virtual CNode<type> *AddNodeToListHead(const type&);
    virtual CNode<type> *InsertNodeIntoList(CNode<type> *, const type&);
    virtual void RemoveNodeFromList(CNode<type> *);
    virtual void RemoveAllNodesFromList(void);
    
    // Node manipulation by data
    virtual BOOL RemoveDataFromList(const type&);
    virtual CNode<type> *IsDataInList(const type&);
    virtual CNode<type> *GetNodeByIndex(UINT);
    
    // Basic list information
    virtual CNode<type> *GetListHead(void);
    virtual CNode<type> *GetListTail(void);
    virtual UINT GetNodeCount(void);

protected:
    virtual void AssertValid(void);
};

#endif // __cplusplus

#endif // __TLIST_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\synch.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       synch.h
 *  Content:    Synchronization objects.  The objects defined in this file
 *              allow us to synchronize threads across processes.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  1/13/97     dereks  Created
 *
 ***************************************************************************/

#ifndef __SYNCH_H__
#define __SYNCH_H__

// Interlocked helper macros
#define INTERLOCKED_EXCHANGE(a, b) \
            InterlockedExchange((LPLONG)&(a), (LONG)(b))

#define INTERLOCKED_INCREMENT(a) \
            InterlockedIncrement((LPLONG)&(a))

#define INTERLOCKED_DECREMENT(a) \
            InterlockedDecrement((LPLONG)&(a))

// Blind spinning is bad.  Even (especially) on NT, it can bring the system
// to it's knees.
#define SPIN_SLEEP() \
            Sleep(10)

#ifdef __cplusplus

// The preferred lock type
#define CPreferredLock      CMutexLock

// Lock base class
class CLock
{
public:
    inline CLock(void) { }
    inline virtual ~CLock(void) { }

public:
    // Creation
    virtual HRESULT Initialize(void) = 0;

    // Lock use
    virtual BOOL TryLock(void) = 0;
    virtual BOOL LockOrEvent(HANDLE) = 0;
    virtual void Lock(void) = 0;
    virtual void Unlock(void) = 0;
};

#ifdef DEAD_CODE
#ifdef WINNT

// Critical section lock
class CCriticalSectionLock
    : public CLock
{
protected:
    CRITICAL_SECTION        m_cs;

public:
    CCriticalSectionLock(void);
    virtual ~CCriticalSectionLock(void);

public:
    // Creation
    virtual HRESULT Initialize(void);

    // Lock use
    virtual BOOL TryLock(void);
    virtual void Lock(void);
    virtual BOOL LockOrEvent(HANDLE);
    virtual void Unlock(void);
};

inline HRESULT CCriticalSectionLock::Initialize(void)
{
    return DS_OK;
}

#endif // WINNT
#endif // DEAD_CODE

// Mutex lock
class CMutexLock
    : public CLock
{
protected:
    HANDLE                  m_hMutex;
    LPTSTR                  m_pszName;

public:
    CMutexLock(LPCTSTR pszName = NULL);
    virtual ~CMutexLock(void);

public:
    // Creation
    virtual HRESULT Initialize(void);

    // Lock use
    virtual BOOL TryLock(void);
    virtual void Lock(void);
    virtual BOOL LockOrEvent(HANDLE);
    virtual void Unlock(void);
};

// Manual lock
class CManualLock
    : public CLock
{
protected:
    BOOL                    m_fLockLock;
    DWORD                   m_dwThreadId;
    LONG                    m_cRecursion;

#ifdef RDEBUG

    HANDLE                  m_hThread;

#endif // RDEBUG

private:
    HANDLE                  m_hUnlockSignal;
    BOOL                    m_fNeedUnlockSignal;

public:
    CManualLock(void);
    virtual ~CManualLock(void);

public:
    // Creation
    virtual HRESULT Initialize(void);

    // Lock use
    virtual BOOL TryLock(void);
    virtual void Lock(void);
    virtual BOOL LockOrEvent(HANDLE);
    virtual void Unlock(void);

protected:
    void TakeLock(DWORD);
};

// Event wrapper object
class CEvent
    : public CDsBasicRuntime
{
protected:
    HANDLE              m_hEvent;

public:
    CEvent(LPCTSTR = NULL, BOOL = FALSE);
    CEvent(HANDLE, DWORD, BOOL);
    virtual ~CEvent(void);

public:
    virtual DWORD Wait(DWORD);
    virtual BOOL Set(void);
    virtual BOOL Reset(void);
    virtual HANDLE GetEventHandle(void);
};

// Thread object
class CThread
{
protected:
    static const UINT       m_cThreadEvents;            // Count of events used by the thread
    const BOOL              m_fHelperProcess;           // Create thread in helper process?
    const LPCTSTR           m_pszName;                  // Thread name
    HANDLE                  m_hThread;                  // Thread handle
    DWORD                   m_dwThreadProcessId;        // Thread owner process id
    DWORD                   m_dwThreadId;               // Thread id
    HANDLE                  m_hTerminate;               // Terminate event
    HANDLE                  m_hInitialize;              // Initialization event

public:
    CThread(BOOL, LPCTSTR = NULL);
    virtual ~CThread(void);

public:
    virtual HRESULT Initialize(void);
    virtual HRESULT Terminate(void);

    DWORD GetOwningProcess() {return m_dwThreadProcessId;}
    BOOL SetThreadPriority(int nPri) {return ::SetThreadPriority(m_hThread, nPri);}

protected:
    // Thread processes
    virtual HRESULT ThreadInit(void);
    virtual HRESULT ThreadLoop(void);
    virtual HRESULT ThreadProc(void) = 0;
    virtual HRESULT ThreadExit(void);

    // Thread synchronization
    virtual BOOL TpEnterDllMutex(void);
    virtual BOOL TpWaitObjectArray(DWORD, DWORD, const HANDLE *, LPDWORD);

private:
    static DWORD WINAPI ThreadStartRoutine(LPVOID);
    virtual HRESULT PrivateThreadProc(void);
};

// Callback event callback function
typedef void (CALLBACK *LPFNEVENTPOOLCALLBACK)(class CCallbackEvent *, LPVOID);

// Callback event
class CCallbackEvent
    : public CEvent
{
    friend class CCallbackEventPool;
    friend class CMultipleCallbackEventPool;

protected:
    CCallbackEventPool *    m_pPool;                // Owning event pool
    LPFNEVENTPOOLCALLBACK   m_pfnCallback;          // Callback function for when the event is signalled
    LPVOID                  m_pvCallbackContext;    // Context argument to pass to the callback function
    BOOL                    m_fAllocated;           // Is this event currently allocated?

public:
    CCallbackEvent(CCallbackEventPool *);
    virtual ~CCallbackEvent(void);

protected:
    virtual void Allocate(BOOL, LPFNEVENTPOOLCALLBACK, LPVOID);
    virtual void OnEventSignal(void);
};

// Callback event pool object
class CCallbackEventPool
    : public CDsBasicRuntime, private CThread
{
    friend class CCallbackEvent;

protected:
    const UINT                  m_cTotalEvents;         // The total number of events in the queue
    CObjectList<CCallbackEvent> m_lstEvents;            // The event table
    LPHANDLE                    m_pahEvents;            // The event table (part 2)
    UINT                        m_cInUseEvents;         // The number of events in use

public:
    CCallbackEventPool(BOOL);
    virtual ~CCallbackEventPool(void);

public:
    // Creation
    virtual HRESULT Initialize(void);

    // Event allocation
    virtual HRESULT AllocEvent(LPFNEVENTPOOLCALLBACK, LPVOID, CCallbackEvent **);
    virtual HRESULT FreeEvent(CCallbackEvent *);

    // Pool status
    virtual UINT GetTotalEventCount(void);
    virtual UINT GetFreeEventCount(void);

private:
    // The worker thread proc
    virtual HRESULT ThreadProc(void);
};

inline UINT CCallbackEventPool::GetTotalEventCount(void)
{
    return m_cTotalEvents;
}

inline UINT CCallbackEventPool::GetFreeEventCount(void)
{
    ASSERT(m_cTotalEvents >= m_cInUseEvents);
    return m_cTotalEvents - m_cInUseEvents;
}

// Event pool manager
class CMultipleCallbackEventPool
    : public CCallbackEventPool
{
private:
    const BOOL                      m_fHelperProcess;       // Create threads in the helper process?
    const UINT                      m_uReqPoolCount;        // List of required pools
    CObjectList<CCallbackEventPool> m_lstPools;             // List of event pools

public:
    CMultipleCallbackEventPool(BOOL, UINT);
    virtual ~CMultipleCallbackEventPool(void);

public:
    // Creation
    virtual HRESULT Initialize(void);

    // Event allocation
    virtual HRESULT AllocEvent(LPFNEVENTPOOLCALLBACK, LPVOID, CCallbackEvent **);
    virtual HRESULT FreeEvent(CCallbackEvent *);

private:
    // Pool creation
    virtual HRESULT CreatePool(CCallbackEventPool **);
    virtual HRESULT FreePool(CCallbackEventPool *);
};

// Wrapper class for objects that use a callback event
class CUsesCallbackEvent
{
public:
    CUsesCallbackEvent(void);
    virtual ~CUsesCallbackEvent(void);

protected:
    virtual HRESULT AllocCallbackEvent(CCallbackEventPool *, CCallbackEvent **);
    virtual void EventSignalCallback(CCallbackEvent *) = 0;

private:
    static void CALLBACK EventSignalCallbackStatic(CCallbackEvent *, LPVOID);
};

// Shared memory object
class CSharedMemoryBlock
    : public CDsBasicRuntime
{
private:
    static const BOOL       m_fLock;                // Should the lock be used?
    CLock *                 m_plck;                 // Lock object
    HANDLE                  m_hFileMappingObject;   // File mapping object handle

public:
    CSharedMemoryBlock(void);
    virtual ~CSharedMemoryBlock(void);

public:
    // Creation
    virtual HRESULT Initialize(DWORD, QWORD, LPCTSTR);

    // Data
    virtual HRESULT Read(LPVOID *, LPDWORD);
    virtual HRESULT Write(LPVOID, DWORD);

public:
    virtual void Lock(void);
    virtual void Unlock(void);
};

inline void CSharedMemoryBlock::Lock(void)
{
    if(m_plck)
    {
        m_plck->Lock();
    }
}

inline void CSharedMemoryBlock::Unlock(void)
{
    if(m_plck)
    {
        m_plck->Unlock();
    }
}

// DLL mutex helpers
extern CLock *              g_pDllLock;

#ifdef DEBUG

#undef DPF_FNAME
#define DPF_FNAME "EnterDllMutex"

inline void EnterDllMutex(LPCTSTR file, UINT line)
{
    const DWORD             dwThreadId  = GetCurrentThreadId();

    ASSERT(g_pDllLock);

    if(!g_pDllLock->TryLock())
    {
        DWORD dwStart, dwEnd;

        dwStart = timeGetTime();

        g_pDllLock->Lock();

        dwEnd = timeGetTime();

        DPF(DPFLVL_LOCK, "Thread 0x%8.8lX waited %lu ms for the DLL lock", dwThreadId, dwEnd - dwStart);
    }

    DPF(DPFLVL_LOCK, "DLL lock taken by 0x%8.8lX from %s, line %lu", dwThreadId, file, line);
}

#undef DPF_FNAME
#define DPF_FNAME "EnterDllMutexOrEvent"

inline BOOL EnterDllMutexOrEvent(HANDLE hEvent, LPCTSTR file, UINT line)
{
    const DWORD             dwThreadId  = GetCurrentThreadId();
    BOOL                    fLock;
    
    ASSERT(g_pDllLock);
    ASSERT(IsValidHandleValue(hEvent));

    if(!(fLock = g_pDllLock->TryLock()))
    {
        DWORD dwStart, dwEnd;

        dwStart = timeGetTime();

        fLock = g_pDllLock->LockOrEvent(hEvent);

        dwEnd = timeGetTime();

        if(fLock)
        {
            DPF(DPFLVL_LOCK, "Thread 0x%8.8lX waited %lu ms for the DLL lock", dwThreadId, dwEnd - dwStart);
        }
    }

    if(fLock)
    {
        DPF(DPFLVL_LOCK, "DLL lock taken by 0x%8.8lX from %s, line %lu", dwThreadId, file, line);
    }

    return fLock;
}

#undef DPF_FNAME
#define DPF_FNAME "LeaveDllMutex"

inline void LeaveDllMutex(LPCTSTR file, UINT line)
{
    const DWORD             dwThreadId  = GetCurrentThreadId();

    ASSERT(g_pDllLock);
    g_pDllLock->Unlock();

    DPF(DPFLVL_LOCK, "DLL lock released by 0x%8.8lX from %s, line %lu", dwThreadId, file, line);
}

#define ENTER_DLL_MUTEX() \
            ::EnterDllMutex(TEXT(__FILE__), __LINE__)

#define ENTER_DLL_MUTEX_OR_EVENT(h) \
            ::EnterDllMutexOrEvent(h, TEXT(__FILE__), __LINE__)

#define LEAVE_DLL_MUTEX() \
            ::LeaveDllMutex(TEXT(__FILE__), __LINE__)

#else // DEBUG

#define ENTER_DLL_MUTEX() \
            g_pDllLock->Lock()

#define ENTER_DLL_MUTEX_OR_EVENT(h) \
            g_pDllLock->LockOrEvent(h)

#define LEAVE_DLL_MUTEX() \
            g_pDllLock->Unlock()

#endif // DEBUG

#endif // __cplusplus

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// Generic synchronization helpers
extern HANDLE GetLocalHandleCopy(HANDLE, DWORD, BOOL);
extern HANDLE GetGlobalHandleCopy(HANDLE, DWORD, BOOL);
extern BOOL MakeHandleGlobal(LPHANDLE);
extern BOOL MapHandle(LPHANDLE, LPDWORD);
extern DWORD WaitObjectArray(DWORD, DWORD, BOOL, const HANDLE *);
extern DWORD WaitObjectList(DWORD, DWORD, BOOL, ...);
extern HANDLE CreateGlobalEvent(LPCTSTR, BOOL);
extern HANDLE CreateGlobalMutex(LPCTSTR);
extern HRESULT CreateWorkerThread(LPTHREAD_START_ROUTINE, BOOL, LPVOID, LPHANDLE, LPDWORD);
extern DWORD CloseThread(HANDLE, HANDLE, DWORD);
extern HANDLE GetCurrentProcessActual(void);
extern HANDLE GetCurrentThreadActual(void);

__inline DWORD WaitObject(DWORD dwTimeout, HANDLE hObject)
{
    return WaitObjectArray(1, dwTimeout, FALSE, &hObject);
}

__inline void __CloseHandle(HANDLE h)
{
    if(IsValidHandleValue(h))
    {
        CloseHandle(h);
    }
}

#define CLOSE_HANDLE(h) \
            __CloseHandle(h), (h) = NULL

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __SYNCH_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\synch.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       synch.cpp
 *  Content:    Synchronization objects.  The objects defined in this file
 *              allow us to synchronize threads across processes.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  7/9/97      dereks  Created
 *
 ***************************************************************************/

#include "dsoundi.h"

#ifdef SHARED
extern "C" HANDLE WINAPI ConvertToGlobalHandle(HANDLE);
#endif // SHARED

// The dll global lock
CLock *g_pDllLock;


/***************************************************************************
 *
 *  GetLocalHandleCopy
 *
 *  Description:
 *      Duplicates a handle into the current process's address space.
 *
 *  Arguments:
 *      HANDLE [in]: handle to duplicate.
 *      DWORD [in]: id of the process that owns the handle.
 *      BOOL [in]: TRUE if the source handle should be closed.
 *
 *  Returns:
 *      HANDLE: local copy of the handle.  Be sure to use CloseHandle to
 *              free this when you're done.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetLocalHandleCopy"

HANDLE GetLocalHandleCopy(HANDLE hSource, DWORD dwOwnerProcessId, BOOL fCloseSource)
{
    const HANDLE            hCurrentProcess     = GetCurrentProcess();
    HANDLE                  hSourceProcess      = NULL;
    HANDLE                  hDest               = NULL;
    DWORD                   dwOptions           = DUPLICATE_SAME_ACCESS;

    ASSERT(hSource);

    if(fCloseSource)
    {
        dwOptions |= DUPLICATE_CLOSE_SOURCE;
    }

    if(dwOwnerProcessId == GetCurrentProcessId())
    {
        hSourceProcess = hCurrentProcess;
    }
    else
    {
        hSourceProcess = OpenProcess(PROCESS_DUP_HANDLE, FALSE, dwOwnerProcessId);
        if(!IsValidHandleValue(hSourceProcess))
        {
            DPF(DPFLVL_ERROR, "OpenProcess failed with error %lu", GetLastError());
        }
    }

    if(hSourceProcess)
    {
        if(!DuplicateHandle(hSourceProcess, hSource, hCurrentProcess, &hDest, 0, FALSE, dwOptions))
        {
            DPF(DPFLVL_ERROR, "DuplicateHandle failed with error %lu", GetLastError());
            hDest = NULL;
        }
    }

    if(hCurrentProcess != hSourceProcess)
    {
        CLOSE_HANDLE(hSourceProcess);
    }

    return hDest;
}


/***************************************************************************
 *
 *  GetGlobalHandleCopy
 *
 *  Description:
 *      Duplicates a handle into the global address space.
 *
 *  Arguments:
 *      HANDLE [in]: handle to duplicate.
 *      DWORD [in]: id of the process that owns the handle.
 *      BOOL [in]: TRUE if the source handle should be closed.
 *
 *  Returns:
 *      HANDLE: global copy of the handle.  Be sure to use CloseHandle to
 *              free this when you're done.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetGlobalHandleCopy"

HANDLE GetGlobalHandleCopy(HANDLE hSource, DWORD dwOwnerPid, BOOL fCloseSource)
{
    HANDLE                  hDest;

    hDest = GetLocalHandleCopy(hSource, dwOwnerPid, fCloseSource);

    if(hDest)
    {
        if(!MakeHandleGlobal(&hDest))
        {
            CLOSE_HANDLE(hDest);
        }
    }

    return hDest;
}


/***************************************************************************
 *
 *  MakeHandleGlobal
 *
 *  Description:
 *      Converts a handle to global.
 *
 *  Arguments:
 *      LPHANDLE [in/out]: handle.
 *
 *  Returns:
 *      BOOL: TRUE on success.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "MakeHandleGlobal"

BOOL MakeHandleGlobal(LPHANDLE phSource)
{

#ifdef SHARED

    HANDLE                  hDest;
    BOOL                    fSuccess;

    hDest = ConvertToGlobalHandle(*phSource);
    fSuccess = IsValidHandleValue(hDest);

    if(fSuccess)
    {
        *phSource = hDest;
    }
    else
    {
        DPF(DPFLVL_ERROR, "ConvertToGlobalHandle failed with error %lu", GetLastError());
    }

    return fSuccess;

#else // SHARED

    return TRUE;

#endif // SHARED

}


/***************************************************************************
 *
 *  MapHandle
 *
 *  Description:
 *      Maps a handle into the current process's address space.
 *
 *  Arguments:
 *      HANDLE [in]: handle to duplicate.
 *      LPDWORD [in/out]: id of the process that owns the handle.
 *
 *  Returns:
 *      BOOL: TRUE on success.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "MapHandle"

BOOL MapHandle(LPHANDLE phSource, LPDWORD pdwOwnerPid)
{
    BOOL                    fSuccess    = TRUE;
    HANDLE                  hDest;

    hDest = GetLocalHandleCopy(*phSource, *pdwOwnerPid, TRUE);

    if(hDest)
    {
        *phSource = hDest;
        *pdwOwnerPid = GetCurrentProcessId();
    }
    else
    {
        fSuccess = FALSE;
    }

    return fSuccess;
}


/***************************************************************************
 *
 *  WaitObjectArray
 *
 *  Description:
 *      Replacement for WaitForSingleObject and WaitForMultipleObjects.
 *
 *  Arguments:
 *      DWORD [in]: count of objects.
 *      DWORD [in]: timeout in ms.
 *      BOOL [in]: TRUE to wait for all objects to be signalled, FALSE to
 *                 return when any of the objects are signalled.
 *      LPHANDLE [in]: object array.
 *
 *  Returns:
 *      DWORD: See WaitForSingleObject/WaitForMultipleObjects.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "WaitObjectArray"

DWORD WaitObjectArray(DWORD dwCount, DWORD dwTimeout, BOOL fWaitAll, const HANDLE *ahObjects)
{

#ifdef WIN95

    const DWORD             dwEnterTime     = GetTickCount();
    DWORD                   dwDifference;

#endif // WIN95

    DWORD                   dwWait;

#if defined(WIN95) || defined(DEBUG)

    DWORD                   i;

#endif // defined(WIN95) || defined(DEBUG)

#ifdef DEBUG

    // Make sure one of our handles really is invalid
    for(i = 0; i < dwCount; i++)
    {
        ASSERT(IsValidHandleValue(ahObjects[i]));
    }

#endif // DEBUG

#ifdef WIN95

    // This is a Windows 95 bug -- we may have gotten kicked for no reason.
    // If that was the case, we still have valid handles (we think), the OS
    // just goofed up.  So, validate the handles and if they are valid, just
    // return to waiting.  See MANBUGS #3340 for a better explanation.
    while(TRUE)
    {

#endif // WIN95

        // Attempt to wait
        dwWait = WaitForMultipleObjects(dwCount, ahObjects, fWaitAll, dwTimeout);

#ifdef WIN95

        if(WAIT_FAILED == dwWait && ERROR_INVALID_HANDLE == GetLastError())
        {
            // Make sure one of our handles really is invalid
            for(i = 0; i < dwCount; i++)
            {
                if(!IsValidHandle(ahObjects[i]))
                {
                    ASSERT(FALSE);
                    break;
                }
            }

            if(i < dwCount)
            {
                break;
            }
            else
            {
                DPF(DPFLVL_INFO, "Mommy!  Kernel kicked me for no reason!");
                ASSERT(FALSE);
            }

            // Make sure the timeout hasn't elapsed
            if(INFINITE != dwTimeout)
            {
                dwDifference = GetTickCount() - dwEnterTime;

                if(dwDifference >= dwTimeout)
                {
                    // Timeout has elapsed
                    break;
                }
                else
                {
                    // Timeout has not elapsed.  Decrement and go back to
                    // sleep.
                    dwTimeout -= dwDifference;
                }
            }
        }
        else
        {
            break;
        }
    }

#endif // WIN95

    return dwWait;
}


/***************************************************************************
 *
 *  WaitObjectList
 *
 *  Description:
 *      Replacement for WaitForSingleObject and WaitForMultipleObjects.
 *
 *  Arguments:
 *      DWORD [in]: count of objects.
 *      DWORD [in]: timeout in ms.
 *      BOOL [in]: TRUE to wait for all objects to be signalled, FALSE to
 *                 return when any of the objects are signalled.
 *      ... [in]: objects.
 *
 *  Returns:
 *      DWORD: See WaitForSingleObject/WaitForMultipleObjects.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "WaitObjectList"

DWORD WaitObjectList(DWORD dwCount, DWORD dwTimeout, BOOL fWaitAll, ...)
{
    HANDLE                  ahObjects[MAXIMUM_WAIT_OBJECTS];
    va_list                 va;
    DWORD                   i;

    // Note: we can only handle 64 handles at a time in this
    // function.  Use WaitObjectArray for anything bigger.
    ASSERT(dwCount <= NUMELMS(ahObjects));

    va_start(va, fWaitAll);

    for(i = 0; i < dwCount; i++)
    {
        ahObjects[i] = va_arg(va, HANDLE);
    }

    va_end(va);

    return WaitObjectArray(dwCount, dwTimeout, fWaitAll, ahObjects);
}


/***************************************************************************
 *
 *  CreateGlobalEvent
 *
 *  Description:
 *      Creates a global event.
 *
 *  Arguments:
 *      LPCTSTR [in]: event name.
 *      BOOL [in]: TRUE for a manual reset event.
 *
 *  Returns:
 *      HANDLE: event handle.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CreateGlobalEvent"

HANDLE CreateGlobalEvent(LPCTSTR pszName, BOOL fManualReset)
{
    HANDLE                  hEvent;

    hEvent = CreateEvent(NULL, fManualReset, FALSE, pszName);

    if(hEvent)
    {
        if(!MakeHandleGlobal(&hEvent))
        {
            CLOSE_HANDLE(hEvent);
        }
    }

    return hEvent;
}


/***************************************************************************
 *
 *  CreateGlobalMutex
 *
 *  Description:
 *      Creates a global mutex.
 *
 *  Arguments:
 *      LPCTSTR [in]: mutex name.
 *
 *  Returns:
 *      HANDLE: mutex handle.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CreateGlobalMutex"

HANDLE CreateGlobalMutex(LPCTSTR pszName)
{
    HANDLE                  hMutex;

    hMutex = CreateMutex(NULL, FALSE, pszName);

    if(hMutex)
    {
        if(!MakeHandleGlobal(&hMutex))
        {
            CLOSE_HANDLE(hMutex);
        }
    }

    return hMutex;
}


/***************************************************************************
 *
 *  CreateWorkerThread
 *
 *  Description:
 *      Creates a worker thread.
 *
 *  Arguments:
 *      LPTHREAD_START_ROUTINE [in]: pointer to thread function.
 *      BOOL [in]: TRUE to create the thread in the helper process's space.
 *      LPVOID [in]: context argument to be passed to thread function.
 *      LPHANDLE [out]: receives thread handle.
 *      LPDWORD [out]: receives thread id.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CreateWorkerThread"

HRESULT CreateWorkerThread(LPTHREAD_START_ROUTINE pfnThreadProc, BOOL fHelperProcess, LPVOID pvContext, LPHANDLE phThread, LPDWORD pdwThreadId)
{
    LPDWORD                 pdwLocalThreadId;
    HANDLE                  hThread;
    HRESULT                 hr;

    DPF_ENTER();

    pdwLocalThreadId = MEMALLOC(DWORD);
    hr = HRFROMP(pdwLocalThreadId);

    if(SUCCEEDED(hr))
    {

#ifdef SHARED

        if(fHelperProcess && GetCurrentProcessId() != dwHelperPid)
        {
            hThread = HelperCreateDSFocusThread(pfnThreadProc, pvContext, 0, pdwLocalThreadId);
        }
        else

#endif // SHARED

        {
            hThread = CreateThread(NULL, 0, pfnThreadProc, pvContext, 0, pdwLocalThreadId);
        }

        hr = HRFROMP(hThread);
    }

    if(SUCCEEDED(hr) && phThread)
    {
        *phThread = hThread;
    }

    if(SUCCEEDED(hr) && pdwThreadId)
    {
        *pdwThreadId = *pdwLocalThreadId;
    }

    MEMFREE(pdwLocalThreadId);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CloseThread
 *
 *  Description:
 *      Signals a thread to close.
 *
 *  Arguments:
 *      HANDLE [in]: thread handle.
 *      HANDLE [in]: thread terminate event.
 *      DWORD [in]: thread owning process id.
 *
 *  Returns:
 *      DWORD: thread exit code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CloseThread"

DWORD CloseThread(HANDLE hThread, HANDLE hTerminate, DWORD dwProcessId)
{
    DWORD                   dwExitCode      = -1;
    DWORD                   dwWait;

    DPF_ENTER();

    SetEvent(hTerminate);

    MapHandle(&hThread, &dwProcessId);

    dwWait = WaitObject(INFINITE, hThread);
    ASSERT(WAIT_OBJECT_0 == dwWait);

    GetExitCodeThread(hThread, &dwExitCode);

    CLOSE_HANDLE(hThread);

    DPF_LEAVE(dwExitCode);

    return dwExitCode;
}


/***************************************************************************
 *
 *  GetCurrentProcessActual
 *
 *  Description:
 *      Gets an actual process handle for the current process.
 *      GetCurrentProcess returns a pseudohandle.  The handle returned from
 *      this function must be closed.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HANDLE: process handle.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetCurrentProcessActual"

HANDLE GetCurrentProcessActual(void)
{
    return GetLocalHandleCopy(GetCurrentProcess(), GetCurrentProcessId(), FALSE);
}


/***************************************************************************
 *
 *  GetCurrentThreadActual
 *
 *  Description:
 *      Gets an actual thread handle for the current thread.
 *      GetCurrentThread returns a pseudohandle.  The handle returned from
 *      this function must be closed.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HANDLE: thread handle.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetCurrentThreadActual"

HANDLE GetCurrentThreadActual(void)
{
    return GetLocalHandleCopy(GetCurrentThread(), GetCurrentProcessId(), FALSE);
}


#ifdef DEAD_CODE

/***************************************************************************
 *
 *  CCriticalSectionLock
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#ifdef WINNT

#undef DPF_FNAME
#define DPF_FNAME "CCriticalSectionLock::CCriticalSectionLock"

CCriticalSectionLock::CCriticalSectionLock(void)
{
    InitializeCriticalSection(&m_cs);
}

#endif // WINNT


/***************************************************************************
 *
 *  ~CCriticalSectionLock
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#ifdef WINNT

#undef DPF_FNAME
#define DPF_FNAME "CCriticalSectionLock::~CCriticalSectionLock"

CCriticalSectionLock::~CCriticalSectionLock(void)
{
    DeleteCriticalSection(&m_cs);
}

#endif // WINNT


/***************************************************************************
 *
 *  TryLock
 *
 *  Description:
 *      Tries to take the lock.  If the lock is taken, returns failure.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      BOOL: TRUE if the lock was successfully taken.
 *
 ***************************************************************************/

#ifdef WINNT

#undef DPF_FNAME
#define DPF_FNAME "CCriticalSectionLock::TryLock"

BOOL CCriticalSectionLock::TryLock(void)
{
    return TryEnterCriticalSection(&m_cs);
}

#endif // WINNT


/***************************************************************************
 *
 *  Lock
 *
 *  Description:
 *      Takes the lock.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#ifdef WINNT

#undef DPF_FNAME
#define DPF_FNAME "CCriticalSectionLock::Lock"

void CCriticalSectionLock::Lock(void)
{
    EnterCriticalSection(&m_cs);
}

#endif // WINNT


/***************************************************************************
 *
 *  LockOrEvent
 *
 *  Description:
 *      Takes the lock if the event is not signalled.
 *
 *  Arguments:
 *      HANDLE [in]: event handle.
 *
 *  Returns:
 *      BOOL: TRUE if the lock was taken.
 *
 ***************************************************************************/

#ifdef WINNT

#undef DPF_FNAME
#define DPF_FNAME "CCriticalSectionLock::LockOrEvent"

BOOL CCriticalSectionLock::LockOrEvent(HANDLE hEvent)
{
    BOOL                    fLock;
    DWORD                   dwWait;

    while(!(fLock = TryEnterCriticalSection(&m_cs)))
    {
        dwWait = WaitObject(0, hEvent);
        ASSERT(WAIT_OBJECT_0 == dwWait || WAIT_TIMEOUT == dwWait);

        if(WAIT_OBJECT_0 == dwWait)
        {
            break;
        }
    }

    return fLock;
}

#endif // WINNT


/***************************************************************************
 *
 *  Unlock
 *
 *  Description:
 *      Releases the lock.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#ifdef WINNT

#undef DPF_FNAME
#define DPF_FNAME "CCriticalSectionLock::Unlock"

void CCriticalSectionLock::Unlock(void)
{
    LeaveCriticalSection(&m_cs);
}

#endif // WINNT
#endif // DEAD_CODE


/***************************************************************************
 *
 *  CMutexLock
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      LPCTSTR [in]: mutex name.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMutexLock::CMutexLock"

CMutexLock::CMutexLock(LPCTSTR pszName)
{
    m_hMutex = NULL;

    if(pszName)
    {
        m_pszName = MEMALLOC_A_COPY(TCHAR, lstrlen(pszName) + 1, pszName);
    }
    else
    {
        m_pszName = NULL;
    }
}


/***************************************************************************
 *
 *  ~CMutexLock
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMutexLock::~CMutexLock"

CMutexLock::~CMutexLock(void)
{
    CLOSE_HANDLE(m_hMutex);
    MEMFREE(m_pszName);
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMutexLock::Initialize"

HRESULT CMutexLock::Initialize(void)
{
    m_hMutex = CreateGlobalMutex(m_pszName);

    return IsValidHandleValue(m_hMutex) ? DS_OK : DSERR_OUTOFMEMORY;
}


/***************************************************************************
 *
 *  TryLock
 *
 *  Description:
 *      Tries to take the lock.  If the lock is taken, returns failure.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      BOOL: TRUE if the lock was successfully taken.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMutexLock::TryLock"

BOOL CMutexLock::TryLock(void)
{
    DWORD                   dwWait;

    dwWait = WaitObject(0, m_hMutex);
    ASSERT(WAIT_OBJECT_0 == dwWait || WAIT_TIMEOUT == dwWait || WAIT_ABANDONED == dwWait);

    return WAIT_OBJECT_0 == dwWait || WAIT_ABANDONED == dwWait;
}


/***************************************************************************
 *
 *  Lock
 *
 *  Description:
 *      Takes the lock.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMutexLock::Lock"

void CMutexLock::Lock(void)
{
    DWORD                   dwWait;

    dwWait = WaitObject(INFINITE, m_hMutex);
    ASSERT(WAIT_OBJECT_0 == dwWait || WAIT_ABANDONED == dwWait);
}


/***************************************************************************
 *
 *  LockOrEvent
 *
 *  Description:
 *      Takes the lock if the event is not signalled.
 *
 *  Arguments:
 *      HANDLE [in]: event handle.
 *
 *  Returns:
 *      BOOL: TRUE if the lock was taken.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMutexLock::LockOrEvent"

BOOL CMutexLock::LockOrEvent(HANDLE hEvent)
{
    const HANDLE            ahHandles[] = { m_hMutex, hEvent };
    const UINT              cHandles    = NUMELMS(ahHandles);
    DWORD                   dwWait;

    dwWait = WaitObjectArray(cHandles, INFINITE, FALSE, ahHandles);
    ASSERT(WAIT_OBJECT_0 == dwWait || WAIT_OBJECT_0 + 1 == dwWait || WAIT_ABANDONED == dwWait);

    return WAIT_OBJECT_0 == dwWait || WAIT_ABANDONED == dwWait;
}


/***************************************************************************
 *
 *  Unlock
 *
 *  Description:
 *      Releases the lock.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMutexLock::Unlock"

void CMutexLock::Unlock(void)
{
    ReleaseMutex(m_hMutex);
}


/***************************************************************************
 *
 *  CManualLock
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CManualLock::CManualLock"

CManualLock::CManualLock(void)
{
    // The manual lock object must live in shared memory.  Otherwise,
    // cross-process synchronization won't work.
    ASSERT(IN_SHARED_MEMORY(this));

    m_fLockLock = FALSE;
    m_dwThreadId = 0;
    m_cRecursion = 0;

#ifdef RDEBUG

    m_hThread = NULL;

#endif // RDEBUG

    m_hUnlockSignal = CreateGlobalEvent(NULL, TRUE);
    ASSERT(IsValidHandleValue(m_hUnlockSignal));

    m_fNeedUnlockSignal = FALSE;
}


/***************************************************************************
 *
 *  ~CManualLock
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CManualLock::~CManualLock"

CManualLock::~CManualLock(void)
{

#ifdef RDEBUG

    CLOSE_HANDLE(m_hThread);

#endif // SHARED

    CLOSE_HANDLE(m_hUnlockSignal);
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CManualLock::Initialize"

HRESULT CManualLock::Initialize(void)
{
    m_hUnlockSignal = CreateGlobalEvent(NULL, TRUE);

    return IsValidHandleValue(m_hUnlockSignal) ? DS_OK : DSERR_OUTOFMEMORY;
}


/***************************************************************************
 *
 *  TryLock
 *
 *  Description:
 *      Tries to take the lock.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      BOOL: TRUE if the lock was successfully taken.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CManualLock::TryLock"

BOOL CManualLock::TryLock(void)
{
    const DWORD             dwThreadId  = GetCurrentThreadId();
    BOOL                    fLock       = TRUE;

    // Lock the lock
    while(INTERLOCKED_EXCHANGE(m_fLockLock, TRUE))
    {
        SPIN_SLEEP();
    }

    // Who owns the lock?
    ASSERT(m_cRecursion >= 0);
    ASSERT(m_cRecursion < MAX_LONG);

    if(dwThreadId == m_dwThreadId)
    {
        // We already own the lock.  Increment the recursion count.
        m_cRecursion++;
    }
    else if(m_cRecursion < 1)
    {
        // The owning thread has no active references.
        TakeLock(dwThreadId);
    }

#ifdef RDEBUG

    else if(WAIT_TIMEOUT != WaitObject(0, m_hThread))
    {
        // The owning thread handle is either invalid or signalled
        DPF(DPFLVL_ERROR, "Thread 0x%8.8lX terminated without releasing the lock at 0x%8.8lX!", m_dwThreadId, this);
        ASSERT(FALSE);

        TakeLock(dwThreadId);
    }

#endif // RDEBUG

    else
    {
        // Someone has a valid hold on the lock
        ResetEvent(m_hUnlockSignal);
        m_fNeedUnlockSignal = TRUE;
        fLock = FALSE;
    }

    // Unlock the lock
    INTERLOCKED_EXCHANGE(m_fLockLock, FALSE);

    return fLock;
}


/***************************************************************************
 *
 *  Lock
 *
 *  Description:
 *      Takes the lock.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CManualLock::Lock"

void CManualLock::Lock(void)
{
    const HANDLE            ahHandles[] =
    {
        m_hUnlockSignal,

#ifdef RDEBUG

        m_hThread

#endif // RDEBUG

    };

    const UINT              cHandles    = NUMELMS(ahHandles);
    DWORD                   dwWait;

    // Try to take the lock
    while(!TryLock())
    {
        // Wait for the lock to be freed
        dwWait = WaitObjectArray(cHandles, INFINITE, FALSE, ahHandles);
        ASSERT(dwWait >= WAIT_OBJECT_0 && dwWait < WAIT_OBJECT_0 + cHandles);
    }
}


/***************************************************************************
 *
 *  LockOrEvent
 *
 *  Description:
 *      Takes the lock if the event is not signalled.
 *
 *  Arguments:
 *      HANDLE [in]: event handle.
 *
 *  Returns:
 *      BOOL: TRUE if the lock was taken.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CManualLock::LockOrEvent"

BOOL CManualLock::LockOrEvent(HANDLE hEvent)
{
    const HANDLE            ahHandles[] =
    {
        hEvent,
        m_hUnlockSignal,

#ifdef RDEBUG

        m_hThread

#endif // RDEBUG

    };

    const UINT              cHandles    = NUMELMS(ahHandles);
    BOOL                    fLock;
    DWORD                   dwWait;

    // Try to take the lock
    while(!(fLock = TryLock()))
    {
        // Wait for the lock to be freed or hEvent to be signalled
        dwWait = WaitObjectArray(cHandles, INFINITE, FALSE, ahHandles);
        ASSERT(dwWait >= WAIT_OBJECT_0 && dwWait < WAIT_OBJECT_0 + cHandles);

        if(WAIT_OBJECT_0 == dwWait)
        {
            break;
        }
    }

    return fLock;
}


/***************************************************************************
 *
 *  Unlock
 *
 *  Description:
 *      Releases the lock.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CManualLock::Unlock"

void CManualLock::Unlock(void)
{
    // Lock the lock
    while(INTERLOCKED_EXCHANGE(m_fLockLock, TRUE))
    {
        SPIN_SLEEP();
    }

    // Decrement the recursion count
    ASSERT(GetCurrentThreadId() == m_dwThreadId);
    ASSERT(m_cRecursion > 0);

    // Signal that the lock is free
    if(!--m_cRecursion && m_fNeedUnlockSignal)
    {
        m_fNeedUnlockSignal = FALSE;
        SetEvent(m_hUnlockSignal);
    }

    // Unlock the lock
    INTERLOCKED_EXCHANGE(m_fLockLock, FALSE);
}


/***************************************************************************
 *
 *  TakeLock
 *
 *  Description:
 *      Takes the lock.  This function is only called internally.
 *
 *  Arguments:
 *      DWORD [in]: owning thread id.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CManualLock::TakeLock"

inline void CManualLock::TakeLock(DWORD dwThreadId)
{
    // Take over the lock
    m_dwThreadId = dwThreadId;
    m_cRecursion = 1;

#ifdef RDEBUG

    CLOSE_HANDLE(m_hThread);

    m_hThread = GetCurrentThreadActual();

    MakeHandleGlobal(&m_hThread);

#endif // RDEBUG

}


/***************************************************************************
 *
 *  CCallbackEvent
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CCallbackEventPool * [in]: owning pool.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCallbackEvent::CCallbackEvent"

CCallbackEvent::CCallbackEvent(CCallbackEventPool *pPool)
    : CEvent(NULL, TRUE)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CCallbackEvent);

    // Initialize defaults
    m_pPool = pPool;
    m_pfnCallback = NULL;
    m_pvCallbackContext = NULL;
    m_fAllocated = FALSE;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CCallbackEvent
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCallbackEvent::~CCallbackEvent"

CCallbackEvent::~CCallbackEvent(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CCallbackEvent);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Allocate
 *
 *  Description:
 *      Allocates or frees the event.
 *
 *  Arguments:
 *      BOOL [in]: TRUE to allocate, FALSE to free.
 *      LPFNEVENTPOOLCALLBACK [in]: callback function pointer.
 *      LPVOID [in]: context argument to pass to callback function.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCallbackEvent::Allocate"

void CCallbackEvent::Allocate(BOOL fAlloc, LPFNEVENTPOOLCALLBACK pfnCallback, LPVOID pvCallbackContext)
{
    DPF_ENTER();

    ASSERT(fAlloc != m_fAllocated);

    m_fAllocated = fAlloc;
    m_pfnCallback = pfnCallback;
    m_pvCallbackContext = pvCallbackContext;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  OnEventSignal
 *
 *  Description:
 *      Handles pool event signals.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCallbackEvent::OnEventSignal"

void CCallbackEvent::OnEventSignal(void)
{
    DPF_ENTER();

    // Make sure this event is allocated
    if(m_fAllocated)
    {
        // Make sure some other thread hasn't already reset the event.  We
        // have a potential race condition where one thread may lock the
        // pool, set the event, reset the event and unlock the pool.  This
        // will cause the pool's worker thread to see the event as signalled,
        // then block on the lock.  By the time the pool is able to take
        // it's own lock, the event has been reset.  Callers can rely on
        // this functionality to synchronously wait on the event without
        // fear of the worker thread calling them back.
        if(WAIT_OBJECT_0 == Wait(0))
        {
            // Call the callback function.  This function is responsible
            // for resetting the event.
            m_pfnCallback(this, m_pvCallbackContext);
        }
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CCallbackEventPool
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCallbackEventPool::CCallbackEventPool"

CCallbackEventPool::CCallbackEventPool(BOOL fHelperProcess)
    : CThread(fHelperProcess, TEXT("Callback event pool")),
      m_cTotalEvents(MAXIMUM_WAIT_OBJECTS - m_cThreadEvents)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CCallbackEventPool);

    // Initialize defaults
    m_pahEvents = NULL;
    m_cInUseEvents = 0;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CCallbackEventPool
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCallbackEventPool::~CCallbackEventPool"

CCallbackEventPool::~CCallbackEventPool(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CCallbackEventPool);

    // Terminate the worker thread
    CThread::Terminate();

    // Free memory
    MEMFREE(m_pahEvents);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCallbackEventPool::Initialize"

HRESULT CCallbackEventPool::Initialize(void)
{
    HRESULT                     hr          = DS_OK;
    CCallbackEvent *            pEvent;
    CNode<CCallbackEvent *> *   pNode;
    UINT                        uIndex;

    DPF_ENTER();

    // Allocate the event table
    m_pahEvents = MEMALLOC_A(HANDLE, m_cTotalEvents);
    hr = HRFROMP(m_pahEvents);

    for(uIndex = 0; uIndex < m_cTotalEvents && SUCCEEDED(hr); uIndex++)
    {
        pEvent = NEW(CCallbackEvent(this));
        hr = HRFROMP(pEvent);

        if(SUCCEEDED(hr))
        {
            m_pahEvents[uIndex] = pEvent->GetEventHandle();
        }

        if(SUCCEEDED(hr))
        {
            pNode = m_lstEvents.AddNodeToList(pEvent);
            hr = HRFROMP(pNode);
        }

        RELEASE(pEvent);
    }

    // Create the worker thread
    if(SUCCEEDED(hr))
    {
        hr = CThread::Initialize();
    }

    // Boost its priority
    if (SUCCEEDED(hr))
        if (FAILED(SetThreadPriority(THREAD_PRIORITY_TIME_CRITICAL)))
            DPF(DPFLVL_ERROR, "Failed to boost thread priority (error %lu)!", GetLastError());

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  AllocEvent
 *
 *  Description:
 *      Allocates an event from the pool.
 *
 *  Arguments:
 *      LPFNEVENTPOOLCALLBACK [in]: callback function pointer.
 *      LPVOID [in]: context argument to pass to callback function.
 *      CCallbackEvent ** [out]: receives callback event pointer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.  If no more events are
 *               available, DSERR_OUTOFMEMORY.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCallbackEventPool::AllocEvent"

HRESULT CCallbackEventPool::AllocEvent(LPFNEVENTPOOLCALLBACK pfnCallback, LPVOID pvCallbackContext, CCallbackEvent **ppEvent)
{
    HRESULT                     hr      = DS_OK;
    CNode<CCallbackEvent *> *   pNode;

    DPF_ENTER();

    // Are there any free events?
    if(!GetFreeEventCount())
    {
        ASSERT(GetFreeEventCount());
        hr = DSERR_OUTOFMEMORY;
    }

    // Find the first free event in the pool
    if(SUCCEEDED(hr))
    {
        for(pNode = m_lstEvents.GetListHead(); pNode; pNode = pNode->m_pNext)
        {
            if(!pNode->m_data->m_fAllocated)
            {
                break;
            }
        }

        ASSERT(pNode);
    }

    // Set up the pool entry
    if(SUCCEEDED(hr))
    {
        ASSERT(WAIT_TIMEOUT == pNode->m_data->Wait(0));

        pNode->m_data->Allocate(TRUE, pfnCallback, pvCallbackContext);
        m_cInUseEvents++;
    }

    // Success
    if(SUCCEEDED(hr))
    {
        *ppEvent = pNode->m_data;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  FreeEvent
 *
 *  Description:
 *      Frees an event previously allocated from the pool.
 *
 *  Arguments:
 *      CCallbackEvent * [in]: event.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCallbackEventPool::FreeEvent"

HRESULT CCallbackEventPool::FreeEvent(CCallbackEvent *pEvent)
{
    DPF_ENTER();

    ASSERT(this == pEvent->m_pPool);
    ASSERT(pEvent->m_fAllocated);

    // Mark the event as free
    pEvent->Allocate(FALSE, NULL, NULL);
    m_cInUseEvents--;

    // Make sure the event is reset so the worker thread will ignore it
    pEvent->Reset();

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  ThreadProc
 *
 *  Description:
 *      Event pool worker thread proc.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCallbackEventPool::ThreadProc"

HRESULT CCallbackEventPool::ThreadProc(void)
{
    BOOL                        fContinue;
    DWORD                       dwWait;
    UINT                        nIndex;
    CNode<CCallbackEvent *> *   pNode;

    DPF_ENTER();

    // Wait for some event to be signalled
    fContinue = TpWaitObjectArray(INFINITE, m_cTotalEvents, m_pahEvents, &dwWait);

    if(fContinue)
    {
        nIndex = dwWait - WAIT_OBJECT_0;

        if(nIndex < m_cTotalEvents)
        {
            // One of the pool's events was signalled
            fContinue = TpEnterDllMutex();

            if(fContinue)
            {
                pNode = m_lstEvents.GetNodeByIndex(nIndex);
                pNode->m_data->OnEventSignal();

                LEAVE_DLL_MUTEX();
            }
        }
        else
        {
            // Something bad happened
            ASSERT(FALSE);
        }
    }

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  CMultipleCallbackEventPool
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      BOOL [in]: TRUE to create the thread in the helper process's
 *                 context.
 *      UINT [in]: number of pools to always keep around.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultipleCallbackEventPool::CMultipleCallbackEventPool"

CMultipleCallbackEventPool::CMultipleCallbackEventPool(BOOL fHelperProcess, UINT uReqPoolCount)
    : CCallbackEventPool(fHelperProcess), m_fHelperProcess(fHelperProcess), m_uReqPoolCount(uReqPoolCount)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CMultipleCallbackEventPool);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CMultipleCallbackEventPool
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultipleCallbackEventPool::~CMultipleCallbackEventPool"

CMultipleCallbackEventPool::~CMultipleCallbackEventPool(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CMultipleCallbackEventPool);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultipleCallbackEventPool::Initialize"

HRESULT CMultipleCallbackEventPool::Initialize(void)
{
    HRESULT                 hr  = DS_OK;
    UINT                    i;

    DPF_ENTER();

    // Create the required number of pools
    for(i = 0; i < m_uReqPoolCount && SUCCEEDED(hr); i++)
    {
        hr = CreatePool(NULL);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  AllocEvent
 *
 *  Description:
 *      Allocates an event from the pool.
 *
 *  Arguments:
 *      LPFNEVENTPOOLCALLBACK [in]: callback function pointer.
 *      LPVOID [in]: context argument to pass to callback function.
 *      CCallbackEvent ** [out]: receives pointer to the event within the
 *                               pool
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.  If no more events are
 *               available, DSERR_OUTOFMEMORY.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultipleCallbackEventPool::AllocEvent"

HRESULT CMultipleCallbackEventPool::AllocEvent(LPFNEVENTPOOLCALLBACK pfnCallback, LPVOID pvCallbackContext, CCallbackEvent **ppEvent)
{
    HRESULT                         hr      = DS_OK;
    CCallbackEventPool *            pPool   = NULL;
    CNode<CCallbackEventPool *> *   pNode;

    DPF_ENTER();

    // Find a free pool
    for(pNode = m_lstPools.GetListHead(); pNode; pNode = pNode->m_pNext)
    {
        if(pNode->m_data->GetFreeEventCount())
        {
            pPool = pNode->m_data;
            break;
        }
    }

    // If there are no free pools, create a new one
    if(!pPool)
    {
        hr = CreatePool(&pPool);
    }

    // Allocate the event
    if(SUCCEEDED(hr))
    {
        hr = pPool->AllocEvent(pfnCallback, pvCallbackContext, ppEvent);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  FreeEvent
 *
 *  Description:
 *      Frees an event previously allocated from the pool.
 *
 *  Arguments:
 *      CCallbackEvent * [in]: event.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultipleCallbackEventPool::FreeEvent"

HRESULT CMultipleCallbackEventPool::FreeEvent(CCallbackEvent *pEvent)
{
    CCallbackEventPool *    pPool;
    HRESULT                 hr;

    DPF_ENTER();

    // Free the event
    pPool = pEvent->m_pPool;
    hr = pPool->FreeEvent(pEvent);

    // The code below is removed because there's a possibility that
    // the thread we're trying to terminate in FreePool is the same
    // as the thread we're calling on.

#if 0

    // Can we free this pool?
    if(SUCCEEDED(hr))
    {
        if(pPool->GetFreeEventCount() == pPool->GetTotalEventCount())
        {
            if(m_lstPools.GetNodeCount() > m_uReqPoolCount)
            {
                hr = FreePool(pPool);
            }
        }
    }

#endif

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CreatePool
 *
 *  Description:
 *      Creates a new pool.
 *
 *  Arguments:
 *      CCallbackEventPool ** [out]: receives pool pointer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultipleCallbackEventPool::CreatePool"

HRESULT CMultipleCallbackEventPool::CreatePool(CCallbackEventPool **ppPool)
{
    CCallbackEventPool *            pPool   = NULL;
    CNode<CCallbackEventPool *> *   pNode   = NULL;
    HRESULT                         hr;

    DPF_ENTER();

    DPF(DPFLVL_INFO, "Creating callback event pool number %lu", m_lstPools.GetNodeCount());

    // Create the pool
    pPool = NEW(CCallbackEventPool(m_fHelperProcess));
    hr = HRFROMP(pPool);

    if(SUCCEEDED(hr))
    {
        hr = pPool->Initialize();
    }

    // Add the pool to the list
    if(SUCCEEDED(hr))
    {
        pNode = m_lstPools.AddNodeToList(pPool);
        hr = HRFROMP(pNode);
    }

    // Success
    if(SUCCEEDED(hr) && ppPool)
    {
        *ppPool = pPool;
    }

    // Clean up
    RELEASE(pPool);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  FreePool
 *
 *  Description:
 *      Frees a pool.
 *
 *  Arguments:
 *      CCallbackEventPool * [in]: pool pointer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CMultipleCallbackEventPool::FreePool"

HRESULT CMultipleCallbackEventPool::FreePool(CCallbackEventPool *pPool)
{
    DPF_ENTER();

    m_lstPools.RemoveDataFromList(pPool);

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  CSharedMemoryBlock
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSharedMemoryBlock::CSharedMemoryBlock"

const CSharedMemoryBlock::m_fLock = TRUE;

CSharedMemoryBlock::CSharedMemoryBlock(void)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CSharedMemoryBlock);

    // Initialize defaults
    m_plck = NULL;
    m_hFileMappingObject = NULL;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CSharedMemoryBlock
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSharedMemoryBlock::~CSharedMemoryBlock"

CSharedMemoryBlock::~CSharedMemoryBlock(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CSharedMemoryBlock);

    // Close the file mapping object
    CLOSE_HANDLE(m_hFileMappingObject);

    // Release the lock
    DELETE(m_plck);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      DWORD [in]: protection flags.
 *      QWORD [in]: maximum file size.
 *      LPCTSTR [in]: object name.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSharedMemoryBlock::Initialize"

HRESULT CSharedMemoryBlock::Initialize(DWORD flProtect, QWORD qwMaxFileSize, LPCTSTR pszName)
{
    const LPCTSTR           pszLockExt  = TEXT(" (lock)");
    LPTSTR                  pszLockName = NULL;
    HRESULT                 hr          = DS_OK;

    DPF_ENTER();

    // Create the lock object
    if(m_fLock)
    {
        if(pszName)
        {
            pszLockName = MEMALLOC_A(TCHAR, lstrlen(pszName) + lstrlen(pszLockExt) + 1);
            hr = HRFROMP(pszLockName);

            if(SUCCEEDED(hr))
            {
                lstrcpy(pszLockName, pszName);
                lstrcat(pszLockName, pszLockExt);
            }
        }

        if(SUCCEEDED(hr))
        {
            m_plck = NEW(CMutexLock(pszLockName));
            hr = HRFROMP(m_plck);
        }

        if(SUCCEEDED(hr))
        {
            hr = m_plck->Initialize();
        }

        if(FAILED(hr))
        {
            DELETE(m_plck);
        }

        MEMFREE(pszLockName);
    }

    Lock();

    // Does the mapping object already exist?
    if(SUCCEEDED(hr))
    {
        m_hFileMappingObject = OpenFileMapping(FILE_MAP_ALL_ACCESS, FALSE, pszName);
    }

    // If not, create a new one
    if(SUCCEEDED(hr) && !IsValidHandleValue(m_hFileMappingObject))
    {
        // Adjust the size of the file mapping object to allow for us to
        // write the current size.
        qwMaxFileSize += sizeof(DWORD);

        // Create the file mapping object
        m_hFileMappingObject = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, flProtect, (DWORD)((qwMaxFileSize >> 32) & 0x00000000FFFFFFFF), (DWORD)qwMaxFileSize, pszName);

        if(!IsValidHandleValue(m_hFileMappingObject))
        {
            DPF(DPFLVL_ERROR, "CreateFileMapping failed with error %lu", GetLastError());
            hr = GetLastErrorToHRESULT();
        }

        // Set the file size
        if(SUCCEEDED(hr))
        {
            hr = Write(NULL, 0);
        }
    }

    if(SUCCEEDED(hr))
    {
        if(!MakeHandleGlobal(&m_hFileMappingObject))
        {
            hr = DSERR_OUTOFMEMORY;
        }
    }

    Unlock();

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Read
 *
 *  Description:
 *      Reads the object.
 *
 *  Arguments:
 *      LPVOID * [out]: receives pointer to memory location.  The caller is
 *                      responsible for freeing this memory.
 *      LPDWORD [out]: receives size of above buffer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSharedMemoryBlock::Read"

HRESULT CSharedMemoryBlock::Read(LPVOID *ppv, LPDWORD pcb)
{
    LPVOID                  pvMap   = NULL;
    LPVOID                  pvRead  = NULL;
    HRESULT                 hr      = DS_OK;
    DWORD                   dwSize;

    DPF_ENTER();

    Lock();

    // Map the first DWORD of the file into memory.  This first DWORD
    // contains the file size.
    pvMap = MapViewOfFile(m_hFileMappingObject, FILE_MAP_READ, 0, 0, sizeof(dwSize));

    if(!pvMap)
    {
        DPF(DPFLVL_ERROR, "MapViewOfFile failed with %lu", GetLastError());
        hr = GetLastErrorToHRESULT();
    }

    if(SUCCEEDED(hr))
    {
        dwSize = *(LPDWORD)pvMap;
    }

    if(pvMap)
    {
        UnmapViewOfFile(pvMap);
    }

    // Map the rest of the file into memory
    if(SUCCEEDED(hr) && dwSize)
    {
        pvMap = MapViewOfFile(m_hFileMappingObject, FILE_MAP_READ, 0, 0, sizeof(dwSize) + dwSize);

        if(!pvMap)
        {
            DPF(DPFLVL_ERROR, "MapViewOfFile failed with %lu", GetLastError());
            hr = GetLastErrorToHRESULT();
        }

        // Allocate a buffer for the rest of the data
        if(SUCCEEDED(hr))
        {
            pvRead = MEMALLOC_A(BYTE, dwSize);
            hr = HRFROMP(pvRead);
        }

        if(SUCCEEDED(hr))
        {
            CopyMemory(pvRead, (LPDWORD)pvMap + 1, dwSize);
        }

        if(pvMap)
        {
            UnmapViewOfFile(pvMap);
        }
    }

    // Success
    if(SUCCEEDED(hr))
    {
        *ppv = pvRead;
        *pcb = dwSize;
    }

    Unlock();

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Write
 *
 *  Description:
 *      Writes the object.
 *
 *  Arguments:
 *      LPVOID [in]: pointer to new data.
 *      DWORD [in]: size of above buffer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSharedMemoryBlock::Write"

HRESULT CSharedMemoryBlock::Write(LPVOID pv, DWORD cb)
{
    LPVOID                  pvMap   = NULL;
    HRESULT                 hr      = DS_OK;

    DPF_ENTER();

    Lock();

    // Map the file into memory, adjusting the size by sizeof(DWORD)
    pvMap = MapViewOfFile(m_hFileMappingObject, FILE_MAP_WRITE, 0, 0, cb + sizeof(DWORD));

    if(!pvMap)
    {
        DPF(DPFLVL_ERROR, "MapViewOfFile failed with %lu", GetLastError());
        hr = GetLastErrorToHRESULT();
    }
    else
    {
        // Write the file size
        *(LPDWORD)pvMap = cb;

        // Write the rest of the data
        CopyMemory((LPDWORD)pvMap + 1, pv, cb);

        // Clean up
        UnmapViewOfFile(pvMap);
    }

    Unlock();

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CThread
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      BOOL [in]: TRUE to create the thread in the helper process's
 *                 context.
 *      LPCTSTR [in]: thread name.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::CThread"

const UINT CThread::m_cThreadEvents = 1;

CThread::CThread
(
    BOOL                    fHelperProcess,
    LPCTSTR                 pszName
)
    : m_fHelperProcess(fHelperProcess), m_pszName(pszName)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CThread);

    m_hThread = NULL;
    m_dwThreadProcessId = 0;
    m_dwThreadId = 0;
    m_hTerminate = NULL;
    m_hInitialize = NULL;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CThread
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::~CThread"

CThread::~CThread
(
    void
)
{
    DPF_ENTER();
    DPF_DESTRUCT(CThread);

    ASSERT(!m_hThread);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      LPVOID [in]: context argument.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::Initialize"

HRESULT
CThread::Initialize
(
    void
)
{
    HRESULT                 hr;

    DPF_ENTER();

    ASSERT(!m_hThread);

    // Create the synchronization events
    m_hTerminate = CreateGlobalEvent(NULL, TRUE);
    hr = HRFROMP(m_hTerminate);

    if(SUCCEEDED(hr))
    {
        m_hInitialize = CreateGlobalEvent(NULL, TRUE);
        hr = HRFROMP(m_hInitialize);
    }

    // Create the thread
    if(SUCCEEDED(hr))
    {
        hr = CreateWorkerThread(ThreadStartRoutine, m_fHelperProcess, this, &m_hThread, NULL);
    }

    // Wait for the initialize event to be signalled
    if(SUCCEEDED(hr))
    {
        WaitObject(INFINITE, m_hInitialize);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Terminate
 *
 *  Description:
 *      Terminates the thread.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::Terminate"

HRESULT
CThread::Terminate
(
    void
)
{
    HRESULT                 hr      = DS_OK;
    DWORD                   dwWait;

    DPF_ENTER();

    ASSERT(GetCurrentThreadId() != m_dwThreadId);

    // Make sure the thread handle is valid
    if(IsValidHandleValue(m_hThread))
    {
        MapHandle(&m_hThread, &m_dwThreadProcessId);

        dwWait = WaitObject(0, m_hThread);
        ASSERT(WAIT_TIMEOUT == dwWait || WAIT_OBJECT_0 == dwWait);

        if(WAIT_TIMEOUT != dwWait)
        {
            CLOSE_HANDLE(m_hThread);
        }
    }

    // Terminate the thread
    if(IsValidHandleValue(m_hThread))
    {
        hr = CloseThread(m_hThread, m_hTerminate, m_dwThreadProcessId);
    }

    if(SUCCEEDED(hr))
    {
        m_hThread = NULL;
        m_dwThreadId = 0;
    }

    // Free the synchronization events
    CLOSE_HANDLE(m_hTerminate);
    CLOSE_HANDLE(m_hInitialize);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  ThreadInit
 *
 *  Description:
 *      Thread initialization routine.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::ThreadInit"

HRESULT
CThread::ThreadInit
(
    void
)
{
    DPF_ENTER();

    if(m_pszName)
    {
        DPF(DPFLVL_INFO, "%s worker thread has joined the party", m_pszName);
    }

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  ThreadLoop
 *
 *  Description:
 *      Main thread loop.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::ThreadLoop"

HRESULT
CThread::ThreadLoop
(
    void
)
{
    HRESULT                 hr          = DS_OK;
    DWORD                   dwWait;

    DPF_ENTER();

    while(SUCCEEDED(hr))
    {
        dwWait = WaitObject(0, m_hTerminate);
        ASSERT(WAIT_OBJECT_0 == dwWait || WAIT_TIMEOUT == dwWait);

        if(WAIT_OBJECT_0 == dwWait)
        {
            break;
        }

        hr = ThreadProc();
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  ThreadExit
 *
 *  Description:
 *      Thread cleanup routine.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::ThreadExit"

HRESULT
CThread::ThreadExit
(
    void
)
{
    DPF_ENTER();

    if(m_pszName)
    {
        DPF(DPFLVL_INFO, "%s worker thread is Audi 5000", m_pszName);
    }

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  TpEnterDllMutex
 *
 *  Description:
 *      Attempts to take the DLL mutex.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      BOOL: TRUE if the thread should continue processing.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::TpEnterDllMutex"

BOOL
CThread::TpEnterDllMutex
(
    void
)
{
    BOOL                    fContinue   = TRUE;

    DPF_ENTER();

    // Any functions that are called from the worker thread must first
    // check for m_hTerminate before taking the DLL mutex.  This is
    // because of a long list of deadlock circumstances that we could
    // end up in.  Don't ask questions.
    if(GetCurrentThreadId() == m_dwThreadId)
    {
        fContinue = ENTER_DLL_MUTEX_OR_EVENT(m_hTerminate);
    }
    else
    {
        ENTER_DLL_MUTEX();
    }

    DPF_LEAVE(fContinue);

    return fContinue;
}


/***************************************************************************
 *
 *  TpWaitObjectArray
 *
 *  Description:
 *      Waits for objects while in the context of the thread proc.
 *
 *  Arguments:
 *      DWORD [in]: timeout.
 *      DWORD [in]: event count.
 *      LPHANDLE [in]: handle array.
 *      LPDWORD [out]: receives return from WaitObjectArray.
 *
 *  Returns:
 *      BOOL: TRUE if the thread should continue processing.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::TpWaitObjectArray"

BOOL
CThread::TpWaitObjectArray
(
    DWORD                   dwTimeout,
    DWORD                   cEvents,
    const HANDLE *          ahEvents,
    LPDWORD                 pdwWait
)
{
    BOOL                    fContinue                           = TRUE;
    HANDLE                  ahWaitEvents[MAXIMUM_WAIT_OBJECTS];
    DWORD                   dwWait;
    UINT                    i;

    DPF_ENTER();

    if(GetCurrentThreadId() == m_dwThreadId)
    {
        // We're in the context of the worker thread.  We need to make sure
        // we wait on all the events *plus* the thread terminate event.
        ahWaitEvents[0] = m_hTerminate;

        for(i = 0; i < cEvents; i++)
        {
            ahWaitEvents[i + 1] = ahEvents[i];
        }

        dwWait = WaitObjectArray(cEvents + 1, dwTimeout, FALSE, ahWaitEvents);
        ASSERT(WAIT_FAILED != dwWait);

        if(WAIT_OBJECT_0 == dwWait)
        {
            // Terminate event was signalled
            fContinue = FALSE;
        }
        else if(pdwWait)
        {
            *pdwWait = dwWait;

            // Fix up the wait value so that it doesn't include the terminate
            // event.
            if(*pdwWait >= WAIT_OBJECT_0 + 1 && *pdwWait < WAIT_OBJECT_0 + 1 + cEvents)
            {
                *pdwWait -= 1;
            }
        }
    }
    else
    {
        if (cEvents)
        {
            dwWait = WaitObjectArray(cEvents, dwTimeout, FALSE, ahEvents);

            if(pdwWait)
            {
                *pdwWait = dwWait;
            }
        }
        else
        {
            // Attempt to use 0-object wait as a timeout
            Sleep(dwTimeout);

            if (pdwWait)
            {
                *pdwWait = WAIT_TIMEOUT;
            }
        }
    }

    DPF_LEAVE(fContinue);

    return fContinue;
}


/***************************************************************************
 *
 *  ThreadStartRoutine
 *
 *  Description:
 *      Thread entry point.
 *
 *  Arguments:
 *      LPVOID [in]: thread context.
 *
 *  Returns:
 *      DWORD: thread exit code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::ThreadStartRoutine"

DWORD WINAPI
CThread::ThreadStartRoutine
(
    LPVOID                  pvContext
)
{
    CThread *               pThis   = (CThread *)pvContext;
    HRESULT                 hr;

    DPF_ENTER();

    hr = pThis->PrivateThreadProc();

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  PrivateThreadProc
 *
 *  Description:
 *      Thread entry point.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CThread::PrivateThreadProc"

HRESULT
CThread::PrivateThreadProc
(
    void
)
{
    HRESULT                 hr;

    DPF_ENTER();

    // Save the worker thread process and thread id
    m_dwThreadProcessId = GetCurrentProcessId();
    m_dwThreadId = GetCurrentThreadId();

    // Call the thread's initialization routine
    hr = ThreadInit();

    // Signal that initialization is complete
    if(SUCCEEDED(hr))
    {
        SetEvent(m_hInitialize);
    }

    // Enter the thread loop
    if(SUCCEEDED(hr))
    {
        hr = ThreadLoop();
    }

    // Call the thread cleanup routine
    if(SUCCEEDED(hr))
    {
        hr = ThreadExit();
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\unicode.c ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       unicode.c
 *  Content:    Windows unicode API wrapper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  1/7/98      dereks  Created.
 *
 ***************************************************************************/

#include "dsoundi.h"

#ifndef WIN95
#error unicode.c being built w/o WIN95 defined
#endif // WIN95


/***************************************************************************
 *
 *  _waveOutGetDevCapsW
 *
 *  Description:
 *      Wrapper for waveOutGetDevCapsW.
 *
 *  Arguments:
 *      UINT [in]: waveOut device id.
 *      LPWAVEOUTCAPSW [out]: receives device caps.
 *      UINT [in]: size of above structure.
 *
 *  Returns:  
 *      MMRESULT: MMSYSTEM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "_waveOutGetDevCapsW"

MMRESULT WINAPI _waveOutGetDevCapsW(UINT uDeviceID, LPWAVEOUTCAPSW pwoc, UINT cbwoc)
{
    WAVEOUTCAPSA            woca;
    MMRESULT                mmr;

    DPF_ENTER();

    ASSERT(cbwoc >= sizeof(*pwoc));
    
    // Call the ANSI version
    mmr = waveOutGetDevCapsA(uDeviceID, &woca, sizeof(woca));

    // Convert to Unicode
    if(MMSYSERR_NOERROR == mmr)
    {
        pwoc->wMid = woca.wMid;
        pwoc->wPid = woca.wPid;
        pwoc->vDriverVersion = woca.vDriverVersion;
        pwoc->dwFormats = woca.dwFormats;
        pwoc->wChannels = woca.wChannels;
        pwoc->wReserved1 = woca.wReserved1;
        pwoc->dwSupport = woca.dwSupport;

        AnsiToUnicode(woca.szPname, pwoc->szPname, NUMELMS(pwoc->szPname));
    }

    DPF_LEAVE(mmr);

    return mmr;
}


/***************************************************************************
 *
 *  _CreateFileW
 *
 *  Description:
 *      Wrapper for CreateFileW.
 *
 *  Arguments:
 *      LPCWSTR [in]: file or device name.
 *      DWORD [in]: desired access.
 *      DWORD [in]: share mode.
 *      LPSECURITY_ATTRIBUTES [in]: security attributes.
 *      DWORD [in]: Creation distribution.
 *      DWORD [in]: Flags and attributes.
 *      HANDLE [in]: Template file
 *
 *  Returns:  
 *      HANDLE: file or device handle, or NULL on error.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "_CreateFileW"

HANDLE WINAPI _CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDistribution, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
{
    LPSTR                   lpFileNameA;
    HANDLE                  hFile;

    DPF_ENTER();

    // Get the ANSI version of the filename
    lpFileNameA = UnicodeToAnsiAlloc(lpFileName);

    // Call the ANSI version
    if(lpFileNameA)
    {
        hFile = CreateFileA(lpFileNameA, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDistribution, dwFlagsAndAttributes, hTemplateFile);
    }
    else
    {
        SetLastError(ERROR_OUTOFMEMORY);
        hFile = NULL;
    }

    // Clean up
    MEMFREE(lpFileNameA);

    DPF_LEAVE(hFile);

    return hFile;
}


/***************************************************************************
 *
 *  _RegQueryValueExW
 *
 *  Description:
 *      Wrapper for RegQueryValueExW.
 *
 *  Arguments:
 *      HKEY [in]: parent key.
 *      LPCWSTR [in]: subkey name.
 *      LPDWORD [in]: reserved, must be NULL.
 *      LPDWORD [out]: receives value type.
 *      LPBYTE [out]: receives value data.
 *      LPDWORD [in/out]: size of above buffer.
 *
 *  Returns:  
 *      LONG: WIN32 error code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "_RegQueryValueExW"

LONG APIENTRY _RegQueryValueExW(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
{
    LONG                    lr              = ERROR_SUCCESS;
    LPBYTE                  lpDataA         = NULL;
    LPSTR                   lpValueNameA;
    DWORD                   dwRegType;
    DWORD                   cbDataA;
    LPDWORD                 lpcbDataA;

    DPF_ENTER();

    if(lpData)
    {
        ASSERT(lpcbData);
    }
    
    // Get the ANSI version of the value name
    lpValueNameA = UnicodeToAnsiAlloc(lpValueName);
    
    if(!lpValueNameA)
    {
        lr = ERROR_OUTOFMEMORY;
    }

    // Get the value type
    if(ERROR_SUCCESS == lr)
    {
        lr = RegQueryValueExA(hKey, lpValueNameA, NULL, &dwRegType, NULL, NULL);
    }

    // If the value type is REG_SZ or REG_EXPAND_SZ, we'll call the ANSI version
    // of RegQueryValueEx and convert the returned string to Unicode.  We can't
    // currently handle REG_MULTI_SZ.
    if(ERROR_SUCCESS == lr)
    {
        ASSERT(REG_MULTI_SZ != dwRegType);
            
        if(REG_SZ == dwRegType || REG_EXPAND_SZ == dwRegType)
        {
            if(lpcbData)
            {
                cbDataA = *lpcbData / sizeof(WCHAR);
            }
            else
            {
                cbDataA = 0;
            }

            if(lpData && cbDataA)
            {
                lpDataA = MEMALLOC_A(BYTE, cbDataA);
        
                if(!lpDataA)
                {
                    lr = ERROR_OUTOFMEMORY;
                }
            }
            else
            {
                lpDataA = NULL;
            }

            lpcbDataA = &cbDataA;
        }
        else
        {
            lpDataA = lpData;
            lpcbDataA = lpcbData;
        }
    }

    if(ERROR_SUCCESS == lr)
    {
        lr = RegQueryValueExA(hKey, lpValueNameA, lpReserved, lpType, lpDataA, lpcbDataA);
    }

    if(ERROR_SUCCESS == lr)
    {
        if(REG_SZ == dwRegType || REG_EXPAND_SZ == dwRegType)
        {
            if(lpData)
            {
                AnsiToUnicode(lpDataA, (LPWSTR)lpData, *lpcbData / sizeof(WCHAR));
            }

            if(lpcbData)
            {
                *lpcbData = cbDataA * sizeof(WCHAR);
            }
        }
    }

    if(lpDataA != lpData)
    {
        MEMFREE(lpDataA);
    }

    MEMFREE(lpValueNameA);

    DPF_LEAVE(lr);

    return lr;
}


/***************************************************************************
 *
 *  _GetWindowsDirectoryW
 *
 *  Description:
 *      Wrapper for GetWindowsDirectoryW.
 *
 *  Arguments:
 *      LPWSTR [out]: receives windows directory path.
 *      UINT [in]: size of above buffer, in characters.
 *
 *  Returns:  
 *      UINT: number of bytes copies, or 0 on error.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "_GetWindowsDirectoryW"

UINT WINAPI _GetWindowsDirectoryW(LPWSTR pszPath, UINT ccPath)
{
    CHAR                    szPathA[MAX_PATH];
    UINT                    ccCopied;

    DPF_ENTER();

    ccCopied = GetWindowsDirectoryA(szPathA, MAX_PATH);

    if(ccCopied)
    {
        AnsiToUnicode(szPathA, pszPath, ccPath);
    }

    DPF_LEAVE(ccCopied);

    return ccCopied;
}


/***************************************************************************
 *
 *  _FindResourceW
 *
 *  Description:
 *      Wrapper for FindResourceW.
 *
 *  Arguments:
 *      HINSTANCE [in]: resource instance handle.
 *      LPCWSTR [in]: resource identifier.
 *      LPCWSTR [in]: resource type.
 *
 *  Returns:  
 *      HRSRC: resource handle.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "_FindResourceW"

HRSRC WINAPI _FindResourceW(HINSTANCE hInst, LPCWSTR pszResource, LPCWSTR pszType)
{
    LPSTR                   pszResourceA    = NULL;
    LPSTR                   pszTypeA        = NULL;
    HRSRC                   hrsrc           = NULL;
    DWORD                   dwError         = ERROR_SUCCESS;

    DPF_ENTER();
    
    if(HIWORD(pszResource))
    {
        pszResourceA = UnicodeToAnsiAlloc(pszResource);

        if(!pszResourceA)
        {
            SetLastError(dwError = ERROR_OUTOFMEMORY);
        }
    }
    else
    {
        pszResourceA = (LPSTR)pszResource;
    }

    if(ERROR_SUCCESS == dwError)
    {
        if(HIWORD(pszType))
        {
            pszTypeA = UnicodeToAnsiAlloc(pszType);

            if(!pszTypeA)
            {
                SetLastError(dwError = ERROR_OUTOFMEMORY);
            }
        }
        else
        {
            pszTypeA = (LPSTR)pszType;
        }
    }

    if(ERROR_SUCCESS == dwError)
    {
        hrsrc = FindResourceA(hInst, pszResourceA, pszTypeA);
    }

    if(pszResourceA != (LPSTR)pszResource)
    {
        MEMFREE(pszResourceA);
    }

    if(pszTypeA != (LPSTR)pszType)
    {
        MEMFREE(pszTypeA);
    }

    DPF_LEAVE(hrsrc);

    return hrsrc;
}


/***************************************************************************
 *
 *  _mmioOpenW
 *
 *  Description:
 *      Wrapper for mmioOpen.  Note that only the file name parameter is
 *      converted.
 *
 *  Arguments:
 *      LPSTR [in]: file name.
 *      LPMMIOINFO [in]: MMIO info.
 *      DWORD [in]: open flags.
 *
 *  Returns:  
 *      HMMIO: MMIO file handle.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "_mmioOpenW"

HMMIO WINAPI _mmioOpenW(LPWSTR pszFileName, LPMMIOINFO pmmioinfo, DWORD fdwOpen)
{
    LPSTR                   pszFileNameA;
    HMMIO                   hmmio;

    DPF_ENTER();

    // Get the ANSI version of the filename
    pszFileNameA = UnicodeToAnsiAlloc(pszFileName);

    // Call the ANSI version
    if(pszFileNameA)
    {
        hmmio = mmioOpenA(pszFileNameA, pmmioinfo, fdwOpen);
    }
    else
    {
        SetLastError(ERROR_OUTOFMEMORY);
        hmmio = NULL;
    }

    // Clean up
    MEMFREE(pszFileNameA);

    DPF_LEAVE(hmmio);

    return hmmio;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\threed.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       threed.h
 *  Content:    3D helper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *     ?        dannymi Created.
 *
 ***************************************************************************/

#ifndef __THREED_H__
#define __THREED_H__

#define MAX_ROLLOFFFACTOR	10.0f
#define MAX_DOPPLERFACTOR	10.0f
#define DEFAULT_MINDISTANCE	1.0f
// !!! this is not actually infinite
#define DEFAULT_MAXDISTANCE	1000000000.0f
#define DEFAULT_CONEANGLE	360
#define DEFAULT_CONEOUTSIDEVOLUME 0

// how does overall volume change based on position?
#define GAIN_FRONT	.9f
#define GAIN_REAR	.6f
#define GAIN_IPSI	1.f
#define GAIN_CONTRA	.2f
#define GAIN_UP		.8f
#define GAIN_DOWN	.5f

// how does dry/wet mix change based on position?
#define SHADOW_FRONT	1.f
#define SHADOW_REAR	.5f
#define SHADOW_IPSI	1.f
#define SHADOW_CONTRA	.2f
#define SHADOW_UP	.8f
#define SHADOW_DOWN	.2f

// !!! Make this user-definable?
#define SHADOW_CONE	.5f	// max wet/dry mix when outside cone

typedef struct tagHRP
{
    D3DVALUE            rho;
    D3DVALUE            theta;
    D3DVALUE            phi;
} HRP, *LPHRP;

typedef struct tagSPHERICALHRP
{
    D3DVALUE            pitch;
    D3DVALUE            yaw;
    D3DVALUE            roll;
} SPHERICALHRP, *LPSPHERICALHRP;

typedef const D3DVECTOR& REFD3DVECTOR;

#endif // __THREED_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\unicode.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       unicode.h
 *  Content:    Windows Unicode API wrapper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  1/7/98      dereks  Created.
 *
 ***************************************************************************/

#ifndef __UNICODE_H__
#define __UNICODE_H__

#ifndef WIN95
#error unicode.h included w/o WIN95 defined
#endif // WIN95

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// MMSYSTEM.H
#define waveOutGetDevCapsW _waveOutGetDevCapsW
extern MMRESULT WINAPI _waveOutGetDevCapsW(UINT, LPWAVEOUTCAPSW, UINT);

#define mmioOpenW _mmioOpenW
extern HMMIO WINAPI _mmioOpenW(LPWSTR, LPMMIOINFO, DWORD);

// WINBASE.H
#define lstrcatA strcat
#define lstrcatW wcscat

#define lstrcpyA strcpy
#define lstrcpyW wcscpy

#define lstrcpynA strncpy
#define lstrcpynW wcsncpy

#define lstrlenA strlen
#define lstrlenW wcslen

#define lstrcmpA strcmp
#define lstrcmpW _wcscmp

#define lstrcmpiA _stricmp
#define lstrcmpiW _wcsicmp

#define CreateFileW _CreateFileW
extern HANDLE WINAPI _CreateFileW(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);

#define GetWindowsDirectoryW _GetWindowsDirectoryW
extern UINT WINAPI _GetWindowsDirectoryW(LPWSTR, UINT);

#define FindResourceW _FindResourceW
extern HRSRC WINAPI _FindResourceW(HINSTANCE, LPCWSTR, LPCWSTR);

// WINREG.H
#define RegQueryValueExW _RegQueryValueExW
extern LONG APIENTRY _RegQueryValueExW(HKEY, LPCWSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __UNICODE_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\tlist.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       tlist.cpp
 *  Content:    Linked-list template classes.  There's some seriously
 *              magical C++ stuff in here, so be forewarned all of you C
 *              programmers.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  4/12/97     dereks  Created.
 *
 ***************************************************************************/


/***************************************************************************
 *
 *  CNode
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CNode * [in]: previous node pointer.
 *      type& [in]: node data.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CNode::CNode"

template <class type> CNode<type>::CNode(CNode<type> *pPrev, const type& data)
{
    CNode<type> *           pNext   = NULL;

    DPF_ENTER();
    DPF_CONSTRUCT(CList);
    
    if(pPrev)
    {
        pNext = pPrev->m_pNext;
    }
    
    m_pPrev = pPrev;
    m_pNext = pNext;

    if(m_pPrev)
    {
        ASSERT(m_pPrev->m_pNext == m_pNext);
        m_pPrev->m_pNext = this;
    }

    if(pNext)
    {
        ASSERT(m_pNext->m_pPrev == m_pPrev);
        m_pNext->m_pPrev = this;
    }

    CopyMemory(&m_data, &data, sizeof(type));

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CNode
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CNode::~CNode"

template <class type> CNode<type>::~CNode(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CNode);
    
    if(m_pPrev)
    {
        ASSERT(this == m_pPrev->m_pNext);
        m_pPrev->m_pNext = m_pNext;
    }

    if(m_pNext)
    {
        ASSERT(this == m_pNext->m_pPrev);
        m_pNext->m_pPrev = m_pPrev;
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CList
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::CList"

template <class type> CList<type>::CList(void)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CList);
    
    m_pHead = NULL;
    m_pTail = NULL;
    m_uCount = 0;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CList
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::~CList"

template <class type> CList<type>::~CList(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CList);
    
    RemoveAllNodesFromList();

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  AddNodeToList
 *
 *  Description:
 *      Adds a node to the list.
 *
 *  Arguments:
 *      type& [in]: node data.
 *
 *  Returns:  
 *      CNode *: new node pointer.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::AddNodeToList"

template <class type> CNode<type> *CList<type>::AddNodeToList(const type& data)
{
    return InsertNodeIntoList(m_pTail, data);
}


/***************************************************************************
 *
 *  AddNodeToListHead
 *
 *  Description:
 *      Adds a node to the head of the list.
 *
 *  Arguments:
 *      type& [in]: node data.
 *
 *  Returns:  
 *      CNode *: new node pointer.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::AddNodeToListHead"

template <class type> CNode<type> *CList<type>::AddNodeToListHead(const type& data)
{
    CNode<type> *       pNode;

    AssertValid();

    pNode = NEW(CNode<type>(NULL, data));

    if(pNode)
    {
        if(m_uCount)
        {
            pNode->m_pNext = m_pHead;
            m_pHead->m_pPrev = pNode;
            m_pHead = pNode;
        }
        else
        {
            m_pHead = m_pTail = pNode;
        }

        m_uCount++;
    }

    return pNode;
}


/***************************************************************************
 *
 *  InsertNodeIntoList
 *
 *  Description:
 *      Inserts a new node into a specific point in the list.
 *
 *  Arguments:
 *      CNode * [in]: node to insert the new one after.
 *      type& [in]: node data.
 *
 *  Returns:  
 *      CNode *: new node pointer.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::InsertNodeIntoList"

template <class type> CNode<type> *CList<type>::InsertNodeIntoList(CNode<type> *pPrev, const type& data)
{
    CNode<type> *       pNode;

    AssertValid();

    pNode = NEW(CNode<type>(pPrev, data));

    if(pNode)
    {
        if(m_uCount)
        {
            if(m_pTail == pNode->m_pPrev)
            {
                m_pTail = pNode;
            }
        }
        else
        {
            m_pHead = m_pTail = pNode;
        }

        m_uCount++;
    }

    return pNode;
}


/***************************************************************************
 *
 *  RemoveNodeFromList
 *
 *  Description:
 *      Removes a node from the list.
 *
 *  Arguments:
 *      CNode * [in]: node pointer.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::RemoveNodeFromList"

template <class type> void CList<type>::RemoveNodeFromList(CNode<type> *pNode)
{
    AssertValid();

#ifdef DEBUG

    CNode<type> *pSearchNode;

    for(pSearchNode = m_pHead; pSearchNode; pSearchNode = pSearchNode->m_pNext)
    {
        if(pSearchNode == pNode)
        {
            break;
        }
    }

    ASSERT(pSearchNode == pNode);

#endif // DEBUG

    if(pNode == m_pHead)
    {
        m_pHead = m_pHead->m_pNext;
    }

    if(pNode == m_pTail)
    {
        m_pTail = m_pTail->m_pPrev;
    }
    
    DELETE(pNode);
    m_uCount--;
}


/***************************************************************************
 *
 *  RemoveAllNodesFromList
 *
 *  Description:
 *      Removes all nodes from the list.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::RemoveAllNodesFromList"

template <class type> void CList<type>::RemoveAllNodesFromList(void)
{
    while(m_pHead)
    {
        RemoveNodeFromList(m_pHead);
    }

    AssertValid();
}


/***************************************************************************
 *
 *  RemoveDataFromList
 *
 *  Description:
 *      Removes a node from the list.
 *
 *  Arguments:
 *      type& [in]: node data.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::RemoveDataFromList"

template <class type> BOOL CList<type>::RemoveDataFromList(const type& data)
{
    CNode<type> *       pNode;

    pNode = IsDataInList(data);

    if(pNode)
    {
        RemoveNodeFromList(pNode);
    }

    return MAKEBOOL(pNode);
}


/***************************************************************************
 *
 *  IsDataInList
 *
 *  Description:
 *      Determines if a piece of data appears in the list.
 *
 *  Arguments:
 *      type& [in]: node data.
 *
 *  Returns:  
 *      CNode *: node pointer.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::IsDataInList"

template <class type> CNode<type> *CList<type>::IsDataInList(const type& data)
{
    CNode<type> *       pNode;

    for(pNode = m_pHead; pNode; pNode = pNode->m_pNext)
    {
        if(CompareMemory(&data, &pNode->m_data, sizeof(type)))
        {
            break;
        }
    }

    return pNode;
}


/***************************************************************************
 *
 *  GetListHead
 *
 *  Description:
 *      Gets the first node in the list.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      CNode *: list head pointer.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::GetListHead"

template <class type> CNode<type> *CList<type>::GetListHead(void)
{ 
    return m_pHead;
}


/***************************************************************************
 *
 *  GetListTail
 *
 *  Description:
 *      Gets the last node in the list.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      CNode *: list tail pointer.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::GetListTail"

template <class type> CNode<type> *CList<type>::GetListTail(void)
{ 
    return m_pTail;
}


/***************************************************************************
 *
 *  GetNodeCount
 *
 *  Description:
 *      Gets the count of nodes in the list.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      UINT: count of nodes in the list.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::GetNodeCount"

template <class type> UINT CList<type>::GetNodeCount(void)
{ 
    return m_uCount; 
}


/***************************************************************************
 *
 *  GetNodeByIndex
 *
 *  Description:
 *      Gets a node by it's index in the list.
 *
 *  Arguments:
 *      UINT [in]: node index.
 *
 *  Returns:  
 *      CNode *: node pointer.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::GetNodeByIndex"

template <class type> CNode<type> *CList<type>::GetNodeByIndex(UINT uIndex)
{
    CNode<type> *           pNode;

    for(pNode = m_pHead; pNode; pNode = pNode->m_pNext)
    {
        if(0 == uIndex--)
        {
            break;
        }
    }

    return pNode;
}


/***************************************************************************
 *
 *  AssertValid
 *
 *  Description:
 *      Asserts that the object is valid.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CList::AssertValid"

template <class type> void CList<type>::AssertValid(void)
{
    ASSERT((!m_pHead && !m_pTail && !m_uCount) || (m_pHead && m_pTail && m_uCount));
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vad.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       vad.cpp
 *  Content:    Virtual audio device.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  1/13/97     dereks  Created
 *  4/20/99     duganp  Added registry-settable default S/W 3D algorithms
 *  1999-2001   duganp  Fixes and updates
 *
 ***************************************************************************/

#include "dsoundi.h"
#include <tchar.h>  // For _TUCHAR and  _tcsicmp()

// To get specific logging of the mixer API stuff, uncomment this line:
// #define DPF_MIXER DPF
#pragma warning(disable:4002)
#define DPF_MIXER()

#ifdef WINNT

// Defined in ists.cpp and used to check for Terminal Services on NT:
extern BOOL IsRedirectedTSAudio(void);

// Defined in onwow64.cpp and used to check whether we're running on WOW64:
#ifdef WIN64
#define OnWow64() FALSE
#else
extern BOOL OnWow64(void);
#endif

#endif // WINNT

// Device enumeration order
static const VADDEVICETYPE g_avdtDeviceTypes[] =
{
    VAD_DEVICETYPE_KSRENDER,
#ifndef NOVXD
    VAD_DEVICETYPE_VXDRENDER,
#endif
    VAD_DEVICETYPE_EMULATEDRENDER,
#ifndef NOKS
    VAD_DEVICETYPE_KSCAPTURE,
    VAD_DEVICETYPE_EMULATEDCAPTURE,
#endif
};

// Table of valid 3D algorithms used in CRenderDevice::Initialize below
static struct Soft3dAlgorithm
{
    LPCTSTR pszName;
    LPCGUID pGuid;
} g_3dAlgList[] =
{
    {TEXT("No virtualization"), &DS3DALG_NO_VIRTUALIZATION},
    {TEXT("ITD"), &DS3DALG_ITD},
    {TEXT("Light HRTF"), &DS3DALG_HRTF_LIGHT},
    {TEXT("Full HRTF"), &DS3DALG_HRTF_FULL}
};


/***************************************************************************
 *
 *  CVirtualAudioDeviceManager
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::CVirtualAudioDeviceManager"

CVirtualAudioDeviceManager::CVirtualAudioDeviceManager(void)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CVirtualAudioDeviceManager);

    m_vdtDrivers = 0;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CVirtualAudioDeviceManager
 *
 *  Description:
 *      Object denstructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::~CVirtualAudioDeviceManager"

CVirtualAudioDeviceManager::~CVirtualAudioDeviceManager(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CVirtualAudioDeviceManager);

    FreeStaticDriverList();

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  EnumDevices
 *
 *  Description:
 *      Creates one of each type of audio device.  Note that the objects
 *      are only created; the device is not initialized yet.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type(s).
 *      CList * [in/out]: list object.  A pointer to each device will be
 *                        added as a node in this list.  Remember to delete
 *                        each device before freeing the list.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::EnumDevices"

HRESULT CVirtualAudioDeviceManager::EnumDevices
(
    VADDEVICETYPE           vdtDeviceType,
    CObjectList<CDevice> *  plst
)
{
    HRESULT                     hr      = DS_OK;
    CDevice *                   pDevice = NULL;
    UINT                        i;

    DPF_ENTER();

    for(i = 0; i < NUMELMS(g_avdtDeviceTypes); i++)
    {
        if(vdtDeviceType & g_avdtDeviceTypes[i])
        {
            switch(g_avdtDeviceTypes[i])
            {
                case VAD_DEVICETYPE_EMULATEDRENDER:
                    pDevice = NEW(CEmRenderDevice);
                    break;

                case VAD_DEVICETYPE_EMULATEDCAPTURE:
                    pDevice = NEW(CEmCaptureDevice);
                    break;

#ifndef NOVXD
                case VAD_DEVICETYPE_VXDRENDER:
                    pDevice = NEW(CVxdRenderDevice);
                    break;
#endif // NOVXD

#ifndef NOKS
                case VAD_DEVICETYPE_KSRENDER:
                    pDevice = NEW(CKsRenderDevice);
                    break;

                case VAD_DEVICETYPE_KSCAPTURE:
                    pDevice = NEW(CKsCaptureDevice);
                    break;
#endif // NOKS
            }

            hr = HRFROMP(pDevice);
            if (SUCCEEDED(hr))
            {
                hr = HRFROMP(plst->AddNodeToList(pDevice));
                RELEASE(pDevice);
            }
            if (FAILED(hr))
            {
                break;
            }
        }
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  EnumDrivers
 *
 *  Description:
 *      Enumerates all drivers for a specific device type.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type(s).
 *      DWORD [in]: flags.
 *      CList * [in/out]: list object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::EnumDrivers"

HRESULT CVirtualAudioDeviceManager::EnumDrivers
(
    VADDEVICETYPE                       vdtDeviceType,
    DWORD                               dwFlags,
    CObjectList<CDeviceDescription> *   plst
)
{
    CNode<CStaticDriver *> *            pNode;
    HRESULT                             hr;

    DPF_ENTER();

    ASSERT(!plst->GetNodeCount());

    // Initialize the static driver list
    hr = InitStaticDriverList(vdtDeviceType);

    // Find all drivers in the list that match this device type
    if(SUCCEEDED(hr))
    {
        for(pNode = m_lstDrivers.GetListHead(); pNode && SUCCEEDED(hr); pNode = pNode->m_pNext)
        {
            if(vdtDeviceType & pNode->m_data->m_pDeviceDescription->m_vdtDeviceType)
            {
                hr = HRFROMP(plst->AddNodeToList(pNode->m_data->m_pDeviceDescription));
            }
        }
    }

    // Handle flags
    if(SUCCEEDED(hr) && (dwFlags & VAD_ENUMDRIVERS_ORDER))
    {
        SortDriverList(vdtDeviceType, plst);
    }

    if(SUCCEEDED(hr) && (dwFlags & VAD_ENUMDRIVERS_REMOVEPROHIBITEDDRIVERS))
    {
        RemoveProhibitedDrivers(vdtDeviceType, plst);
    }

    if(SUCCEEDED(hr) && (dwFlags & VAD_ENUMDRIVERS_REMOVEDUPLICATEWAVEDEVICES))
    {
        RemoveDuplicateWaveDevices(plst);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetDeviceDescription
 *
 *  Description:
 *      Retrieves the driver description based on a device guid.
 *
 *  Arguments:
 *      GUID [in]: device GUID.
 *      CDeviceDescription * [out]: receives device description.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::GetDeviceDescription"

HRESULT CVirtualAudioDeviceManager::GetDeviceDescription
(
    GUID                            guid,
    CDeviceDescription **           ppDesc
)
{
    HRESULT hr = DS_OK;
    CObjectList<CDeviceDescription> lstDrivers;
    CNode<CDeviceDescription*>* pNode;
    VADDEVICETYPE vdtDeviceType;

    DPF_ENTER();

    // If the given GUID is one of the special default device IDs,
    // map it to the corresponding "real" DirectSound device ID.
    GetDeviceIdFromDefaultId(&guid, &guid);

    // What type of device does this guid represent?
    vdtDeviceType = GetDriverDeviceType(guid);

    if(!vdtDeviceType)
    {
        hr = DSERR_NODRIVER;
    }

    // Build the driver list
    if(SUCCEEDED(hr))
    {
        hr = EnumDrivers(vdtDeviceType, 0, &lstDrivers);
    }

    // Find the driver in the list
    if(SUCCEEDED(hr))
    {
        for(pNode = lstDrivers.GetListHead(); pNode; pNode = pNode->m_pNext)
        {
            if(guid == pNode->m_data->m_guidDeviceId)
            {
                break;
            }
        }

        if(!pNode)
        {
            hr = DSERR_NODRIVER;
        }
    }

    // Success
    if(SUCCEEDED(hr) && ppDesc)
    {
        *ppDesc = ADDREF(pNode->m_data);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  FindOpenDevice
 *
 *  Description:
 *      Finds an open device based on a driver GUID.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *      LPGUID [in]: driver GUID.
 *      CDevice ** [out]: receives device pointer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::FindOpenDevice"

HRESULT CVirtualAudioDeviceManager::FindOpenDevice
(
    VADDEVICETYPE           vdtDeviceType,
    REFGUID                 guid,
    CDevice **              ppDevice
)
{
    const BOOL              fPreferred  = IS_NULL_GUID(&guid);
    HRESULT                 hr          = DS_OK;
    GUID                    guidLocal;
    CNode<CDevice *> *      pNode;

    DPF_ENTER();

    BuildValidGuid(&guid, &guidLocal);

    for(pNode = m_lstDevices.GetListHead(); pNode; pNode = pNode->m_pNext)
    {
        if(vdtDeviceType & pNode->m_data->m_vdtDeviceType)
        {
            if(fPreferred)
            {
                hr = GetPreferredDeviceId(pNode->m_data->m_vdtDeviceType, &guidLocal);
            }

            // For as-yet-unfigured-out reasons, we occassionally find ourselves
            // with a NULL m_pDeviceDescription here.  Protect against that case.
            ASSERT(pNode->m_data->m_pDeviceDescription && "Millennium bug 120336 / Mars bug 3692");
            if(FAILED(hr) || (pNode->m_data->m_pDeviceDescription && pNode->m_data->m_pDeviceDescription->m_guidDeviceId == guidLocal))
            {
                break;
            }
        }
    }

    if(SUCCEEDED(hr) && !pNode)
    {
        hr = DSERR_NODRIVER;
    }

    if(SUCCEEDED(hr) && ppDevice)
    {
        *ppDevice = ADDREF(pNode->m_data);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  OpenDevice
 *
 *  Description:
 *      Opens a device based on a driver GUID.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *      LPGUID [in]: driver GUID.
 *      CDevice ** [out]: receives device pointer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::OpenDevice"

HRESULT CVirtualAudioDeviceManager::OpenDevice
(
    VADDEVICETYPE                   vdtDeviceType,
    REFGUID                         guid,
    CDevice **                      ppDevice
)
{
    const BOOL                      fPreferred      = IS_NULL_GUID(&guid);
    DWORD                           dwFlags         = VAD_ENUMDRIVERS_ORDER;
    UINT                            uPreferredId    = WAVE_DEVICEID_NONE;
    DWORD                           dwMapperFlags   = 0;
    HRESULT                         hr              = DS_OK;
    CObjectList<CDeviceDescription> lstDrivers;
    CNode<CDeviceDescription *> *   pStart;
    CNode<CDeviceDescription *> *   pNode;

    DPF_ENTER();

    // Enumerate all drivers in the system.  If we're trying to open the
    // preferred device, remove all prohibited drivers from the list.
    // If the user asked for a specific GUID, we'll assume that they know
    // what they're doing.
    if(fPreferred)
    {
        dwFlags |= VAD_ENUMDRIVERS_REMOVEPROHIBITEDDRIVERS;
        hr = GetPreferredWaveDevice(IS_CAPTURE_VAD(vdtDeviceType), &uPreferredId, &dwMapperFlags);
    }

    if(SUCCEEDED(hr))
    {
        hr = EnumDrivers(vdtDeviceType, dwFlags, &lstDrivers);
    }

    // If we're looking for a specific device, set the device node pointer
    // to start there.  Otherwise, we can just start at the head of the list.
    if(SUCCEEDED(hr))
    {
        pStart = lstDrivers.GetListHead();

        if(!fPreferred)
            while(pStart)
            {
                if(guid == pStart->m_data->m_guidDeviceId)
                    break;
                pStart = pStart->m_pNext;
            }

        if(!pStart)
            hr = DSERR_NODRIVER;
    }

    // Start trying to open drivers.  Because the driver list is ordered
    // properly, we can just try to open each driver in the order it appears.
    if(SUCCEEDED(hr))
    {
        pNode = pStart;

        while(TRUE)
        {
            // Try to open the driver
            hr = OpenSpecificDevice(pNode->m_data, ppDevice);

            if(SUCCEEDED(hr))
                break;

            // If the app asked for a specific device, don't try any others
            if (!fPreferred)
                break;

            // Next driver, please.  If we hit the end of the list, just
            // wrap around.
            if(!(pNode = pNode->m_pNext))
                pNode = lstDrivers.GetListHead();

            if(pNode == pStart)
                break;

            // If we failed to open the driver, and the caller asked for the
            // preferred device, *and* the mapper says to use the preferred
            // device only, we're done.
            if(fPreferred && (dwMapperFlags & DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY)
                          && (pNode->m_data->m_uWaveDeviceId != uPreferredId))
                break;
        }
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  OpenSpecificDevice
 *
 *  Description:
 *      Opens a device based on a driver GUID.
 *
 *  Arguments:
 *      CDeviceDescription * [in]: driver description.
 *      CDevice ** [out]: receives device pointer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::OpenSpecificDevice"

HRESULT CVirtualAudioDeviceManager::OpenSpecificDevice
(
    CDeviceDescription *    pDesc,
    CDevice **              ppDevice
)
{
    CObjectList<CDevice>    lstDevices;
    CNode<CDevice *> *      pNode;
    CDevice *               pDevice;
    HRESULT                 hr;

    DPF_ENTER();

    DPF(DPFLVL_INFO, "Attempting to open %s", (LPCTSTR)pDesc->m_strName);

    // Create a list of all devices corresponding to this type
    hr = EnumDevices(pDesc->m_vdtDeviceType, &lstDevices);

    // We should only get back one device per type
    if(SUCCEEDED(hr))
    {
        ASSERT(1 == lstDevices.GetNodeCount());

        pNode = lstDevices.GetListHead();
        pDevice = pNode->m_data;
    }

    // Interrupt any system events that might prevent us from opening
    // the device
    if(SUCCEEDED(hr) && (pDesc->m_vdtDeviceType & VAD_DEVICETYPE_WAVEOUTOPENMASK))
    {
        InterruptSystemEvent(pDesc->m_uWaveDeviceId);
    }

    // Attempt to open the device
    if(SUCCEEDED(hr))
    {
        hr = pDevice->Initialize(pDesc);
    }

    // Clean up
    if(SUCCEEDED(hr))
    {
        *ppDevice = ADDREF(pDevice);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetDriverGuid
 *
 *  Description:
 *      Builds a driver GUID.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *      BYTE [in]: data.
 *      LPGUID [out]: receives GUID.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::GetDriverGuid"

void CVirtualAudioDeviceManager::GetDriverGuid
(
    VADDEVICETYPE           vdtDeviceType,
    BYTE                    bData,
    LPGUID                  pGuid
)
{
    DPF_ENTER();

    switch(vdtDeviceType)
    {
        case VAD_DEVICETYPE_EMULATEDRENDER:
            *pGuid = VADDRVID_EmulatedRenderBase;
            break;

        case VAD_DEVICETYPE_EMULATEDCAPTURE:
            *pGuid = VADDRVID_EmulatedCaptureBase;
            break;

        case VAD_DEVICETYPE_VXDRENDER:
            *pGuid = VADDRVID_VxdRenderBase;
            break;

        case VAD_DEVICETYPE_KSRENDER:
            *pGuid = VADDRVID_KsRenderBase;
            break;

        case VAD_DEVICETYPE_KSCAPTURE:
            *pGuid = VADDRVID_KsCaptureBase;
            break;

        default:
            ASSERT(FALSE);
            break;
    }

    switch(vdtDeviceType)
    {
        case VAD_DEVICETYPE_EMULATEDRENDER:
        case VAD_DEVICETYPE_EMULATEDCAPTURE:
        case VAD_DEVICETYPE_KSRENDER:
        case VAD_DEVICETYPE_KSCAPTURE:
            pGuid->Data4[7] = bData;
            break;

        case VAD_DEVICETYPE_VXDRENDER:
            pGuid->Data1 |= bData & 0x0F;
            break;

        default:
            ASSERT(FALSE);
            break;
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  GetDriverDataFromGuid
 *
 *  Description:
 *      Gets device-specific data from a driver GUID.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *      REFGUID [in]: driver GUID.
 *      LPBYTE [out]: receives data.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::GetDriverDataFromGuid"

void CVirtualAudioDeviceManager::GetDriverDataFromGuid
(
    VADDEVICETYPE           vdtDeviceType,
    REFGUID                 guid,
    LPBYTE                  pbData
)
{
    DPF_ENTER();

    switch(vdtDeviceType)
    {
        case VAD_DEVICETYPE_EMULATEDRENDER:
        case VAD_DEVICETYPE_EMULATEDCAPTURE:
        case VAD_DEVICETYPE_KSRENDER:
        case VAD_DEVICETYPE_KSCAPTURE:
            *pbData = guid.Data4[7];
            break;

        case VAD_DEVICETYPE_VXDRENDER:
            *pbData = (BYTE)(guid.Data1 & 0x0000000F);
            break;

        default:
            ASSERT(FALSE);
            break;
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  GetDriverDeviceType
 *
 *  Description:
 *      Gets the VAD device type for a given driver GUID.
 *
 *  Arguments:
 *      REFGUID [in]: device guid.
 *
 *  Returns:
 *      VADDEVICETYPE: device type, or 0 on error.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::GetDriverDeviceType"

VADDEVICETYPE CVirtualAudioDeviceManager::GetDriverDeviceType
(
    REFGUID                 guid
)
{
    VADDEVICETYPE           vdtDeviceType         = 0;
    GUID                    guidComp;
    BYTE                    bData;
    UINT                    i;

    DPF_ENTER();

    for(i = 0; i < NUMELMS(g_avdtDeviceTypes) && !vdtDeviceType; i++)
    {
        GetDriverDataFromGuid(g_avdtDeviceTypes[i], guid, &bData);
        GetDriverGuid(g_avdtDeviceTypes[i], bData, &guidComp);

        if(guid == guidComp)
        {
            vdtDeviceType = g_avdtDeviceTypes[i];
        }
    }

    DPF_LEAVE(vdtDeviceType);
    return vdtDeviceType;
}


/***************************************************************************
 *
 *  GetPreferredDeviceId
 *
 *  Description:
 *      Gets the device-specific driver GUID for the preferred device.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *      LPGUID [out]: receives driver GUID.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::GetPreferredDeviceId"

HRESULT CVirtualAudioDeviceManager::GetPreferredDeviceId
(
    VADDEVICETYPE                       vdtDeviceType,
    LPGUID                              pGuid,
    DEFAULT_DEVICE_TYPE                 defaultType
)
{
    CObjectList<CDeviceDescription>     lstDrivers;
    CNode<CDeviceDescription *> *       pNode;
    UINT                                uDeviceId;
    HRESULT                             hr;

    DPF_ENTER();

    // Enumerate all drivers for this device
    hr = EnumDrivers(vdtDeviceType, VAD_ENUMDRIVERS_REMOVEPROHIBITEDDRIVERS, &lstDrivers);

    // Get the preferred waveOut or waveIn device id
    if(SUCCEEDED(hr))
    {
        hr = GetPreferredWaveDevice(IS_CAPTURE_VAD(vdtDeviceType), &uDeviceId, NULL, defaultType);
    }

    // Look for the corresponding driver
    if(SUCCEEDED(hr))
    {
        for(pNode = lstDrivers.GetListHead(); pNode; pNode = pNode->m_pNext)
        {
            if(uDeviceId == pNode->m_data->m_uWaveDeviceId)
            {
                break;
            }
        }

        if(!pNode)
        {
            DPF(DPFLVL_ERROR, "Can't find driver GUID matching preferred device id");
            hr = DSERR_NODRIVER;
        }
    }

    if(SUCCEEDED(hr))
    {
        *pGuid = pNode->m_data->m_guidDeviceId;
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetDeviceIdFromDefaultId
 *
 *  Description:
 *      If the given GUID is one of the special default device IDs,
 *      maps it to the corresponding "real" DirectSound device ID.
 *
 *  Arguments:
 *      LPCGUID [in]: a default device ID (as defined in dsound.h).
 *      LPGUID [out]: receives the corresponding device ID.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::GetDeviceIdFromDefaultId"

HRESULT CVirtualAudioDeviceManager::GetDeviceIdFromDefaultId
(
    LPCGUID                             pGuidSrc,
    LPGUID                              pGuidDest
)
{
    HRESULT                             hr = DSERR_NODRIVER;
    DPF_ENTER();

    if (CompareMemoryOffset(pGuidSrc, &DSDEVID_DefaultPlayback, sizeof *pGuidSrc, sizeof pGuidSrc->Data1))
    {
        // This is a default device ID; find out which one
        switch (pGuidSrc->Data1)
        {
            case 0xdef00000: // DSDEVID_DefaultPlayback
                hr = GetPreferredDeviceId(VAD_DEVICETYPE_RENDERMASK, pGuidDest, MAIN_DEFAULT);
                break;

            case 0xdef00001: // DSDEVID_DefaultCapture
                hr = GetPreferredDeviceId(VAD_DEVICETYPE_CAPTUREMASK, pGuidDest, MAIN_DEFAULT);
                break;

            case 0xdef00002: // DSDEVID_DefaultVoicePlayback
                hr = GetPreferredDeviceId(VAD_DEVICETYPE_RENDERMASK, pGuidDest, VOICE_DEFAULT);
                break;

            case 0xdef00003: // DSDEVID_DefaultVoiceCapture
                hr = GetPreferredDeviceId(VAD_DEVICETYPE_CAPTUREMASK, pGuidDest, VOICE_DEFAULT);
                break;

            default:
                DPF(DPFLVL_WARNING, "Unknown default device GUID");
        }
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetAllowableDevices
 *
 *  Description:
 *      Fills a VADDEVICETYPE buffer with all allowable device types.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *      LPTSTR [in]: device interface.
 *
 *  Returns:
 *      VADDEVICETYPE: allowable devices.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::GetAllowableDevices"

VADDEVICETYPE CVirtualAudioDeviceManager::GetAllowableDevices
(
    VADDEVICETYPE           vdtDeviceType,
#ifdef WINNT
    LPCTSTR                 pszInterface
#else // WINNT
    DWORD                   dwDevnode
#endif // WINNT
)
{
    typedef struct
    {
        LPCTSTR             pszRegKey;
        VADDEVICETYPE       vdtDeviceType;
        LPCTSTR             pszDeviceType;
    } REGDEVGOO;

    const REGDEVGOO         rdg[] =
    {
        { REGSTR_WDM, VAD_DEVICETYPE_KSRENDER, TEXT("VAD_DEVICETYPE_KSRENDER") },
        { REGSTR_VXD, VAD_DEVICETYPE_VXDRENDER, TEXT("VAD_DEVICETYPE_VXDRENDER") },
        { REGSTR_EMULATED, VAD_DEVICETYPE_EMULATEDRENDER, TEXT("VAD_DEVICETYPE_EMULATEDRENDER") },
        { REGSTR_WDM, VAD_DEVICETYPE_KSCAPTURE, TEXT("VAD_DEVICETYPE_KSCAPTURE") },
        { REGSTR_EMULATED, VAD_DEVICETYPE_EMULATEDCAPTURE, TEXT("VAD_DEVICETYPE_EMULATEDCAPTURE") },
    };

    HKEY                    hkeyParent;
    HKEY                    hkey;
    BOOL                    fPresent;
    UINT                    i;
    HRESULT                 hr;

    DPF_ENTER();

    // If the caller is looking for specifically disabled devices,
    // remove globally disabled devices first.

#ifdef WINNT
    if(pszInterface)
#else // WINNT
    if(dwDevnode)
#endif // WINNT

    {
        vdtDeviceType = GetAllowableDevices(vdtDeviceType, NULL);
    }

#ifdef WINNT
    // If running in a Terminal Server session or in WOW64, force emulation:
    if(IsRedirectedTSAudio() || OnWow64())
    {
        vdtDeviceType &= VAD_DEVICETYPE_EMULATEDMASK;
    }
#endif // WINNT

    for(i = 0; i < NUMELMS(rdg) && vdtDeviceType; i++)
    {
        if(!(vdtDeviceType & rdg[i].vdtDeviceType))
        {
            continue;
        }

        fPresent = TRUE;

#ifdef WINNT
        hr = OpenPersistentDataKey(vdtDeviceType, pszInterface, &hkeyParent);
#else // WINNT
        hr = OpenPersistentDataKey(vdtDeviceType, dwDevnode, &hkeyParent);
#endif // WINNT

        if(SUCCEEDED(hr))
        {
            hr = RhRegOpenKey(hkeyParent, REGSTR_DEVICEPRESENCE, 0, &hkey);

            if(SUCCEEDED(hr))
            {
                RhRegGetBinaryValue(hkey, rdg[i].pszRegKey, &fPresent, sizeof fPresent);
                RhRegCloseKey(&hkey);
            }

            RhRegCloseKey(&hkeyParent);
        }

        if(!fPresent)
        {
#ifdef WINNT
            DPF(DPFLVL_INFO, "%s disabled for %s", rdg[i].pszDeviceType, pszInterface);
#else // WINNT
            DPF(DPFLVL_INFO, "%s disabled for 0x%8.8lX", rdg[i].pszDeviceType, dwDevnode);
#endif // WINNT
            vdtDeviceType &= ~rdg[i].vdtDeviceType;
        }
    }

    DPF_LEAVE(vdtDeviceType);

    return vdtDeviceType;
}


/***************************************************************************
 *
 *  GetPreferredWaveDevice
 *
 *  Description:
 *      Gets the preferred wave device.
 *
 *  Arguments:
 *      BOOL [in]: TRUE if capture.
 *      LPUINT [out]: receives preferred device id.
 *      LPDWORD [out]: receives flags.
 *      DEFAULT_DEVICE_TYPE [in]: specifies whether we want the main
 *                                default device or the voice device
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "GetPreferredWaveDevice"

HRESULT CVirtualAudioDeviceManager::GetPreferredWaveDevice
(
    BOOL fCapture,
    LPUINT puDeviceId,
    LPDWORD pdwFlags,
    DEFAULT_DEVICE_TYPE defaultType
)
{
    UINT                    uDeviceId;
    DWORD                   dwFlags;
    HRESULT                 hr = DSERR_GENERIC;
    BOOL                    fPreferredOnly;
    HRESULT                 hrTemp;

    DPF_ENTER();

    if (defaultType == VOICE_DEFAULT)
        hr = WaveMessage(WAVE_MAPPER, fCapture, DRVM_MAPPER_CONSOLEVOICECOM_GET, (DWORD_PTR)&uDeviceId, (DWORD_PTR)&dwFlags);

    if (FAILED(hr))
        hr = WaveMessage(WAVE_MAPPER, fCapture, DRVM_MAPPER_PREFERRED_GET, (DWORD_PTR)&uDeviceId, (DWORD_PTR)&dwFlags);

    if(FAILED(hr))
    {
        hrTemp = RhRegGetPreferredDevice(fCapture, NULL, 0, &uDeviceId, &fPreferredOnly);

        if(SUCCEEDED(hrTemp))
        {
            dwFlags = fPreferredOnly ? DRVM_MAPPER_PREFERRED_FLAGS_PREFERREDONLY : 0;
            hr = DS_OK;
        }
    }

    if(SUCCEEDED(hr) && puDeviceId)
    {
        *puDeviceId = uDeviceId;
    }

    if(SUCCEEDED(hr) && pdwFlags)
    {
        *pdwFlags = dwFlags;
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  InitStaticDriverList
 *
 *  Description:
 *      Initializes the static driver list.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::InitStaticDriverList"

HRESULT CVirtualAudioDeviceManager::InitStaticDriverList
(
    VADDEVICETYPE                   vdtDeviceType
)
{
    HRESULT                         hr                  = DS_OK;
    CObjectList<CDevice>            lstDevices;
    CNode<CDevice *> *              pDeviceNode;
    CObjectList<CDeviceDescription> lstDrivers;
    CNode<CDeviceDescription *> *   pDriverNode;
    CStaticDriver *                 pStaticDriver;
    CNode<CStaticDriver *> *        pStaticDriverNode;

    DPF_ENTER();

#ifndef SHARED

    // Check for any PnP events that would require us to rebuild the list
    CheckMmPnpEvents();

#endif // SHARED

    // Mask off any types that have already been enumerated
    if(vdtDeviceType &= m_vdtDrivers ^ vdtDeviceType)
    {
        // Enumerate all devices
        hr = EnumDevices(vdtDeviceType, &lstDevices);

        // Enumerate all drivers
        for(pDeviceNode = lstDevices.GetListHead(); pDeviceNode && SUCCEEDED(hr); pDeviceNode = pDeviceNode->m_pNext)
        {
            pDeviceNode->m_data->EnumDrivers(&lstDrivers);
        }

        // Add each driver to the static driver list
        for(pDriverNode = lstDrivers.GetListHead(); pDriverNode && SUCCEEDED(hr); pDriverNode = pDriverNode->m_pNext)
        {
            pStaticDriver = NEW(CStaticDriver(pDriverNode->m_data));
            hr = HRFROMP(pStaticDriver);

            if(SUCCEEDED(hr))
            {
                pStaticDriverNode = m_lstDrivers.AddNodeToList(pStaticDriver);
                hr = HRFROMP(pStaticDriverNode);
            }

            RELEASE(pStaticDriver);
        }

        // Include this device type in the list of enumerated types
        if(SUCCEEDED(hr))
        {
            m_vdtDrivers |= vdtDeviceType;
        }
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  FreeStaticDriverList
 *
 *  Description:
 *      Frees the static driver list.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::FreeStaticDriverList"

void CVirtualAudioDeviceManager::FreeStaticDriverList(void)
{
    DPF_ENTER();

    m_lstDrivers.RemoveAllNodesFromList();
    m_vdtDrivers = 0;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  GetDriverCertificationStatus
 *
 *  Description:
 *      Gets the certification status of a particular driver.
 *
 *  Arguments:
 *      CDevice * [in]: initialized device pointer.
 *      LPDWORD [out]: receives certification status.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::GetDriverCertificationStatus"

HRESULT CVirtualAudioDeviceManager::GetDriverCertificationStatus
(
    CDevice *                   pDevice,
    LPDWORD                     pdwCertification
)
{
    DWORD                       dwCertification = VERIFY_UNCHECKED;
    CNode<CStaticDriver *> *    pNode;
    HRESULT                     hr;

    DPF_ENTER();

    // Initialize the static driver list
    hr = InitStaticDriverList(pDevice->m_vdtDeviceType);

    // Let's see if we've already checked certification for this driver.
    // (It's very slow - see NT Bug 405705 and Millenium bug 97114.)
    // We'll walk the static driver list until we find a match for the
    // device interface.
    if(SUCCEEDED(hr))
    {
        for(pNode = m_lstDrivers.GetListHead(); pNode; pNode = pNode->m_pNext)
        {
#ifdef WINNT
            if(!pDevice->m_pDeviceDescription->m_strInterface.IsEmpty() && !pNode->m_data->m_pDeviceDescription->m_strInterface.IsEmpty() && !lstrcmpi(pDevice->m_pDeviceDescription->m_strInterface, pNode->m_data->m_pDeviceDescription->m_strInterface))
#else // WINNT
            if(pDevice->m_pDeviceDescription->m_dwDevnode && pDevice->m_pDeviceDescription->m_dwDevnode == pNode->m_data->m_pDeviceDescription->m_dwDevnode)
#endif // WINNT
            {
                break;
            }
        }

        ASSERT(pNode);
    }

    // Do we actually need to check certification?
    if(SUCCEEDED(hr) && pNode)
    {
        dwCertification = pNode->m_data->m_dwCertification;
    }

    // If so, go ahead and check it
    if(SUCCEEDED(hr) && VERIFY_UNCHECKED == dwCertification)
    {
        hr = pDevice->GetCertification(&dwCertification, TRUE);

        if(SUCCEEDED(hr))
        {
            switch(dwCertification)
            {
                case VERIFY_CERTIFIED:
                    RPF(DPFLVL_INFO, "Running on a certified driver");
                    break;

                case VERIFY_UNCERTIFIED:
                    RPF(DPFLVL_WARNING, "Running on an uncertified driver!");
                    break;

                default:
                    ASSERT(FALSE);
                    break;
            }
        }
        else if(DSERR_UNSUPPORTED == hr)
        {
            dwCertification = VERIFY_UNCERTIFIED;
            hr = DS_OK;
        }

        if(SUCCEEDED(hr) && pNode)
        {
            pNode->m_data->m_dwCertification = dwCertification;
        }
    }

    // Success
    if(SUCCEEDED(hr))
    {
        *pdwCertification = dwCertification;
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  OpenPersistentDataKey
 *
 *  Description:
 *      Opens the persistent data key for a specific device.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *      LPTSTR [in]: device interface.
 *      PHKEY [out]: registry key handle.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::OpenPersistentDataKey"

HRESULT CVirtualAudioDeviceManager::OpenPersistentDataKey
(
    VADDEVICETYPE           vdtDeviceType,
#ifdef WINNT
    LPCTSTR                 pszInterface,
#else // WINNT
    DWORD                   dwDevnode,
#endif // WINNT
    PHKEY                   phkey
)
{
    HKEY                    hkeyParent  = NULL;
    DWORD                   dwFlags     = REGOPENPATH_ALLOWCREATE;
    HRESULT                 hr          = DSERR_GENERIC;

    DPF_ENTER();

    ASSERT(IS_VALID_VAD(vdtDeviceType));

    // Open the device-specific key

#ifdef WINNT
    if(pszInterface)
#else // WINNT
    if(dwDevnode)
#endif // WINNT

    {
#ifdef WINNT
        hr = OpenDevicePersistentDataKey(vdtDeviceType, pszInterface, &hkeyParent);
#else // WINNT
        hr = OpenDevicePersistentDataKey(vdtDeviceType, dwDevnode, &hkeyParent);
#endif // WINNT
    }

    // If we failed to open the device key, use the default key
    if(FAILED(hr))
    {

#ifdef WINNT
        if(pszInterface)
#else // WINNT
        if(dwDevnode)
#endif // WINNT

        {
            DPF(DPFLVL_WARNING, "Opening the default persistent key");
        }

        hr = OpenDefaultPersistentDataKey(&hkeyParent);
    }

    // Open the subkey
    if(SUCCEEDED(hr))
    {
        if(IS_RENDER_VAD(vdtDeviceType))
        {
            dwFlags |= REGOPENPATH_DIRECTSOUND;
        }

        if(IS_CAPTURE_VAD(vdtDeviceType))
        {
            dwFlags |= REGOPENPATH_DIRECTSOUNDCAPTURE;
        }

        hr = RhRegOpenPath(hkeyParent, phkey, dwFlags, 0);
    }

    // Clean up
    RhRegCloseKey(&hkeyParent);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  OpenDevicePersistentDataKey
 *
 *  Description:
 *      Opens the persistent data key for a specific device.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *      LPTSTR [in]: device interface.
 *      PHKEY [out]: registry key handle.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::OpenDevicePersistentDataKey"

HRESULT CVirtualAudioDeviceManager::OpenDevicePersistentDataKey
(
    VADDEVICETYPE               vdtDeviceType,
#ifdef WINNT
    LPCTSTR                     pszInterface,
#else // WINNT
    DWORD                       dwDevnode,
#endif // WINNT
    PHKEY                       phkey
)
{
    CNode<CStaticDriver *> *    pNode;
    CPnpHelper *                pPnp;
    HRESULT                     hr;

#ifndef WINNT
    SP_DEVINFO_DATA             DeviceInfoData;
#endif // WINNT

    DPF_ENTER();

    ASSERT(IS_VALID_VAD(vdtDeviceType));

#ifdef WINNT
    ASSERT(pszInterface);
#else // WINNT
    ASSERT(dwDevnode);
#endif // WINNT

    // Initialize the static driver list
    hr = InitStaticDriverList(vdtDeviceType);

    if(SUCCEEDED(hr))
    {
        // Find the driver in the static driver list whose interface matches
        // this one
        for(pNode = m_lstDrivers.GetListHead(); pNode; pNode = pNode->m_pNext)
        {

#ifdef WINNT
            if(!pNode->m_data->m_pDeviceDescription->m_strInterface.IsEmpty() && !lstrcmpi(pszInterface, pNode->m_data->m_pDeviceDescription->m_strInterface))
#else // WINNT
            if(dwDevnode == pNode->m_data->m_pDeviceDescription->m_dwDevnode)
#endif // WINNT

            {
                break;
            }
        }

        if (pNode == NULL)
        {
            // This used to be an assert. However, PnP stress tests showed
            // that the device interface can be removed between the time
            // the static driver list is built and the time we look for
            // this device interface. So now we just return an error.
            //
            hr = E_FAIL;
        }

        if (SUCCEEDED(hr))
        {
            // If the driver has an open key, just use that one.  Otherwise, we'll
            // have to open a new key and save it in the list.
            if(pNode->m_data->m_hkeyRoot)
            {
                // Duplicate the key
                hr = RhRegDuplicateKey(pNode->m_data->m_hkeyRoot, pNode->m_data->m_dwKeyOwnerProcessId, FALSE, phkey);
            }
            else
            {
                // Create the PnP helper object
                pPnp = NEW(CPnpHelper);
                hr = HRFROMP(pPnp);

                if(SUCCEEDED(hr))
                {
#ifdef WINNT
                    hr = pPnp->Initialize(KSCATEGORY_AUDIO, DIGCF_DEVICEINTERFACE | DIGCF_PRESENT);
#else // WINNT
                    hr = pPnp->Initialize(GUID_NULL, DIGCF_PRESENT);
#endif // WINNT
                }

#ifndef WINNT
                // Get device info data
                if(SUCCEEDED(hr))
                {
                    hr = pPnp->FindDevice(dwDevnode, &DeviceInfoData);
                }
#endif // WINNT

                // Open the device registry key
                if(SUCCEEDED(hr))
                {
#ifdef WINNT
                    hr = pPnp->OpenDeviceInterfaceRegistryKey(pszInterface, KSCATEGORY_AUDIO, DIREG_DEV, TRUE, phkey);
#else // WINNT
                    hr = pPnp->OpenDeviceRegistryKey(&DeviceInfoData, DIREG_DEV, TRUE, phkey);
#endif // WINNT
                }

                // Tell the static driver about the key
                if(SUCCEEDED(hr))
                {
                    pNode->m_data->m_dwKeyOwnerProcessId = GetCurrentProcessId();
                    hr = RhRegDuplicateKey(*phkey, pNode->m_data->m_dwKeyOwnerProcessId, FALSE, &pNode->m_data->m_hkeyRoot);
                }

                // Clean up
                RELEASE(pPnp);
            }
        }
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  OpenDefaultPersistentDataKey
 *
 *  Description:
 *      Opens the default persistent data key.
 *
 *  Arguments:
 *      PHKEY [out]: registry key handle.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::OpenDefaultPersistentDataKey"

HRESULT CVirtualAudioDeviceManager::OpenDefaultPersistentDataKey
(
    PHKEY                   phkey
)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = RhRegOpenPath(HKEY_LOCAL_MACHINE, phkey, REGOPENPATH_DEFAULTPATH | REGOPENPATH_ALLOWCREATE, 0);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  RemoveProhibitedDrivers
 *
 *  Description:
 *      Removes prohibited drivers from a device list.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: types of devices that appear in the list.
 *      CList * [in/out]: driver list.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::RemoveProhibitedDrivers"

void CVirtualAudioDeviceManager::RemoveProhibitedDrivers
(
    VADDEVICETYPE                       vdtDeviceType,
    CObjectList<CDeviceDescription> *   plst
)
{
    VADDEVICETYPE                       vdtValid;
    CNode<CDeviceDescription *> *       pNode;
    CNode<CDeviceDescription *> *       pNode2;

    DPF_ENTER();

    // Mask off any types that are globally disabled
    vdtValid = GetAllowableDevices(vdtDeviceType, NULL);

    for(pNode = plst->GetListHead(); pNode; pNode = pNode->m_pNext)
        if(!(pNode->m_data->m_vdtDeviceType & vdtValid))
            pNode->m_data->m_vdtDeviceType |= VAD_DEVICETYPE_PROHIBITED;

    // Mask off any types that are specifically disabled for each device
    pNode = plst->GetListHead();

    while(pNode)
    {
        if(!(pNode->m_data->m_vdtDeviceType & VAD_DEVICETYPE_PROHIBITED))
        {

#ifdef WINNT
            if(!pNode->m_data->m_strInterface.IsEmpty())
#else // WINNT
            if(pNode->m_data->m_dwDevnode)
#endif // WINNT

            {

#ifdef WINNT
                vdtValid = GetAllowableDevices(vdtDeviceType, pNode->m_data->m_strInterface);
#else // WINNT
                vdtValid = GetAllowableDevices(vdtDeviceType, pNode->m_data->m_dwDevnode);
#endif // WINNT

                pNode2 = pNode;

                while(pNode2)
                {
#ifdef WINNT
                    if(!lstrcmpi(pNode2->m_data->m_strInterface, pNode->m_data->m_strInterface))
#else // WINNT
                    if(pNode2->m_data->m_dwDevnode == pNode->m_data->m_dwDevnode)
#endif // WINNT
                    {
                        if(IS_RENDER_VAD(pNode2->m_data->m_vdtDeviceType) == IS_RENDER_VAD(pNode->m_data->m_vdtDeviceType))
                            if(!(pNode2->m_data->m_vdtDeviceType & vdtValid))
                                pNode2->m_data->m_vdtDeviceType |= VAD_DEVICETYPE_PROHIBITED;

                    }
                    pNode2 = pNode2->m_pNext;
                }
            }
        }

        pNode = pNode->m_pNext;
    }

    // Remove the prohibited drivers from the list
    pNode = plst->GetListHead();

    while(pNode)
    {
        pNode2 = pNode->m_pNext;

        if(pNode->m_data->m_vdtDeviceType & VAD_DEVICETYPE_PROHIBITED)
        {
            pNode->m_data->m_vdtDeviceType &= ~VAD_DEVICETYPE_PROHIBITED;
            plst->RemoveNodeFromList(pNode);
        }

        pNode = pNode2;
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  RemoveDuplicateWaveDevices
 *
 *  Description:
 *      Removes duplicate wave devices from a driver list.
 *
 *  Arguments:
 *      CList * [in/out]: driver list.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::RemoveDuplicateWaveDevices"

void CVirtualAudioDeviceManager::RemoveDuplicateWaveDevices
(
    CObjectList<CDeviceDescription> *   plst
)
{
    CNode<CDeviceDescription *> *       pNode[3];

    DPF_ENTER();

    pNode[0] = plst->GetListHead();

    while(pNode[0])
    {
        pNode[1] = pNode[0]->m_pNext;

        while(pNode[1])
        {
            pNode[2] = pNode[1]->m_pNext;

            if(IS_RENDER_VAD(pNode[0]->m_data->m_vdtDeviceType) == IS_RENDER_VAD(pNode[1]->m_data->m_vdtDeviceType))
            {
                if(WAVE_DEVICEID_NONE != pNode[0]->m_data->m_uWaveDeviceId)
                {
                    if(pNode[0]->m_data->m_uWaveDeviceId == pNode[1]->m_data->m_uWaveDeviceId)
                    {
                        plst->RemoveNodeFromList(pNode[1]);
                    }
                }
            }

            pNode[1] = pNode[2];
        }

        pNode[0] = pNode[0]->m_pNext;
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  SortDriverList
 *
 *  Description:
 *      Sorts the driver list.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type(s).
 *      CList * [in/out]: list object.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::SortDriverList"

void CVirtualAudioDeviceManager::SortDriverList
(
    VADDEVICETYPE                       vdtDeviceType,
    CObjectList<CDeviceDescription> *   plst
)
{
    UINT                                uPreferredId[2] = { WAVE_DEVICEID_NONE, WAVE_DEVICEID_NONE };
    CNode<CDeviceDescription *> *       pNode;
    CNode<CDeviceDescription *> *       pCheckNode;

    DPF_ENTER();

    // Reorder the list so that the preferred device appears first, then
    // by wave device id, then by device type.
    if(IS_RENDER_VAD(vdtDeviceType))
    {
        GetPreferredWaveDevice(FALSE, &uPreferredId[0], NULL);
    }

    if(IS_CAPTURE_VAD(vdtDeviceType))
    {
        GetPreferredWaveDevice(TRUE, &uPreferredId[1], NULL);
    }

    pNode = plst->GetListHead();

    while(pNode && pNode->m_pNext)
    {
        if(SortDriverListCallback(uPreferredId, pNode->m_data, pNode->m_pNext->m_data) > 0)
        {
            pCheckNode = plst->InsertNodeIntoList(pNode->m_pNext, pNode->m_data);
            ASSERT(pCheckNode != NULL);
            plst->RemoveNodeFromList(pNode);
            pNode = plst->GetListHead();
        }
        else
        {
            pNode = pNode->m_pNext;
        }
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  SortDriverListCallback
 *
 *  Description:
 *      Sort routine for SortDriverList.
 *
 *  Arguments:
 *      const UINT * [in]: array of preferred device id's.
 *      CDeviceDescription * [in]: driver 1.
 *      CDeviceDescription * [in]: driver 2.
 *
 *  Returns:
 *      INT: 0 if the nodes are the same.  Negative if driver 1 should be
 *           first in the list, positive if driver 2 should be first.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::SortDriverListCallback"

INT CVirtualAudioDeviceManager::SortDriverListCallback
(
    const UINT *            puPreferredId,
    CDeviceDescription *    p1,
    CDeviceDescription *    p2
)
{
    INT                     n   = 0;
    UINT                    i1  = 0;
    UINT                    i2  = 0;

    DPF_ENTER();

    if(IS_CAPTURE_VAD(p1->m_vdtDeviceType) == IS_CAPTURE_VAD(p2->m_vdtDeviceType))
    {
        if(WAVE_DEVICEID_NONE != puPreferredId[IS_CAPTURE_VAD(p1->m_vdtDeviceType)])
        {
            if(p1->m_uWaveDeviceId == puPreferredId[IS_CAPTURE_VAD(p1->m_vdtDeviceType)])
            {
                if(p2->m_uWaveDeviceId != puPreferredId[IS_CAPTURE_VAD(p1->m_vdtDeviceType)])
                {
                    n = -1;
                }
            }
            else
            {
                if(p2->m_uWaveDeviceId == puPreferredId[IS_CAPTURE_VAD(p1->m_vdtDeviceType)])
                {
                    n = 1;
                }
            }
        }
    }

    if(!n)
    {
        if(IS_CAPTURE_VAD(p1->m_vdtDeviceType) == IS_CAPTURE_VAD(p2->m_vdtDeviceType))
        {
            n = p1->m_uWaveDeviceId - p2->m_uWaveDeviceId;
        }
    }

    if(!n)
    {
        for(i1 = 0; i1 < NUMELMS(g_avdtDeviceTypes); i1++)
        {
            if(g_avdtDeviceTypes[i1] == p1->m_vdtDeviceType)
            {
                break;
            }
        }

        for(i2 = 0; i2 < NUMELMS(g_avdtDeviceTypes); i2++)
        {
            if(g_avdtDeviceTypes[i2] == p2->m_vdtDeviceType)
            {
                break;
            }
        }

        n = i1 - i2;
    }

    DPF_LEAVE(n);

    return n;
}


#ifndef SHARED

/***************************************************************************
 *
 *  GetPnpMappingName, m_pszPnpMapping
 *
 *  Description:
 *      GetPnpMappingName() is an auxilliary function used to obtain the
 *      correct name on this platform for the PnP info file mapping object,
 *      and store it in m_pszPnpMapping for use by CheckMmPnpEvents below.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      LPCTSTR: Name of the file mapping object.
 *
 ***************************************************************************/

static const LPCTSTR GetPnpMappingName(void)
{
    if (GetWindowsVersion() >= WIN_XP)
        return TEXT("Global\\mmGlobalPnpInfo");
    else
        return TEXT("mmGlobalPnpInfo");
}

const LPCTSTR CVirtualAudioDeviceManager::m_pszPnpMapping = GetPnpMappingName();


/***************************************************************************
 *
 *  CheckMmPnpEvents
 *
 *  Description:
 *      Checks WINMM for any PnP events that would require us to rebuild
 *      the static driver list.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVirtualAudioDeviceManager::CheckMmPnpEvents"

void CVirtualAudioDeviceManager::CheckMmPnpEvents(void)
{
    typedef struct _MMPNPINFO
    {
        DWORD                       cbSize;
        LONG                        cPnpEvents;
    } MMPNPINFO, *PMMPNPINFO;

    static LONG                     cPnpEvents      = 0;
    HANDLE                          hFileMapping;
    PMMPNPINFO                      pMmPnpInfo;

    DPF_ENTER();

    // Check for any PnP events that would require us to rebuild the list
    hFileMapping = OpenFileMapping(FILE_MAP_READ, FALSE, m_pszPnpMapping);

    if(IsValidHandleValue(hFileMapping))
    {
        pMmPnpInfo = (PMMPNPINFO)MapViewOfFile(hFileMapping, FILE_MAP_READ, 0, 0, sizeof *pMmPnpInfo);

        if(pMmPnpInfo)
        {
            ASSERT(sizeof *pMmPnpInfo <= pMmPnpInfo->cbSize);

            if(cPnpEvents != pMmPnpInfo->cPnpEvents)
            {
                FreeStaticDriverList();
                cPnpEvents = pMmPnpInfo->cPnpEvents;
            }

            UnmapViewOfFile(pMmPnpInfo);
        }

        CLOSE_HANDLE(hFileMapping);
    }

    DPF_LEAVE_VOID();
}

#endif // SHARED


/***************************************************************************
 *
 *  CStaticDriver
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStaticDriver::CStaticDriver"

CStaticDriver::CStaticDriver(CDeviceDescription *pDeviceDescription)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CStaticDriver);

    // Initialize defaults
    m_pDeviceDescription = ADDREF(pDeviceDescription);
    m_hkeyRoot = NULL;
    m_dwCertification = VERIFY_UNCHECKED;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CStaticDriver
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CStaticDriver::~CStaticDriver"

CStaticDriver::~CStaticDriver(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CStaticDriver);

    RELEASE(m_pDeviceDescription);

    RhRegCloseKey(&m_hkeyRoot);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CDevice
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CDevice::CDevice"

CDevice::CDevice
(
    VADDEVICETYPE vdtDeviceType
)
    : m_vdtDeviceType(vdtDeviceType)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CDevice);

    ASSERT(IS_VALID_VAD(vdtDeviceType));
    ASSERT(IS_SINGLE_VAD(vdtDeviceType));

    m_pDeviceDescription = NULL;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CDevice
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CDevice::~CDevice"

CDevice::~CDevice(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CDevice);

    g_pVadMgr->m_lstDevices.RemoveDataFromList(this);

    RELEASE(m_pDeviceDescription);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object
 *
 *  Arguments:
 *      CDeviceDescription * [in]: driver description.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CDevice::Initialize"

HRESULT CDevice::Initialize(CDeviceDescription *pDesc)
{
    DPF_ENTER();

    ASSERT(m_vdtDeviceType == pDesc->m_vdtDeviceType);

    m_pDeviceDescription = ADDREF(pDesc);
    ASSERT(m_pDeviceDescription != NULL);

    // Add this object to the parent's list
    HRESULT hr = HRFROMP(g_pVadMgr->m_lstDevices.AddNodeToList(this));

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetDriverVersion
 *
 *  Description:
 *      Gets the driver version number.
 *
 *  Arguments:
 *      LPLARGE_INTEGER [out]: receives driver version.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CDevice::GetDriverVersion"

HRESULT CDevice::GetDriverVersion(LARGE_INTEGER *pliVersion)
{
    HRESULT                 hr                  = DS_OK;
    TCHAR                   szPath[MAX_PATH];
    VS_FIXEDFILEINFO        ffi;

    DPF_ENTER();

    if(m_pDeviceDescription->m_strPath.IsEmpty())
    {
        hr = DSERR_GENERIC;
    }

    // Determine the driver directory
    if(SUCCEEDED(hr))
    {
        if(IS_KS_VAD(m_vdtDeviceType))
        {
            if(!GetWindowsDirectory(szPath, NUMELMS(szPath)))
            {
                hr = DSERR_GENERIC;
            }

            if(SUCCEEDED(hr))
            {
                if(TEXT('\\') != szPath[lstrlen(szPath) - 1])
                {
                    lstrcat(szPath, TEXT("\\"));
                }

                lstrcat(szPath, TEXT("System32\\Drivers\\"));
            }
        }
        else if(IS_VXD_VAD(m_vdtDeviceType))
        {
            if(!GetSystemDirectory(szPath, NUMELMS(szPath)))
            {
                hr = DSERR_GENERIC;
            }

            if(SUCCEEDED(hr))
            {
                if(TEXT('\\') != szPath[lstrlen(szPath) - 1])
                {
                    lstrcat(szPath, TEXT("\\"));
                }
            }
        }
        else
        {
            hr = DSERR_GENERIC;
        }
    }

    // Build the full driver path
    if(SUCCEEDED(hr))
    {
        if(lstrlen(szPath) + lstrlen(m_pDeviceDescription->m_strPath) >= NUMELMS(szPath))
        {
            hr = DSERR_GENERIC;
        }
    }

    if(SUCCEEDED(hr))
    {
        lstrcat(szPath, m_pDeviceDescription->m_strPath);
    }

    // Get the driver file information
    if(SUCCEEDED(hr))
    {
        hr = GetFixedFileInformation(szPath, &ffi);
    }

    // Success
    if(SUCCEEDED(hr))
    {
        pliVersion->LowPart = ffi.dwFileVersionLS;
        pliVersion->HighPart = ffi.dwFileVersionMS;
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CRenderDevice
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderDevice::CRenderDevice"

CRenderDevice::CRenderDevice(VADDEVICETYPE vdtDeviceType)
    : CDevice(vdtDeviceType)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CRenderDevice);

    // Make sure this is a valid render device type
    ASSERT(IS_RENDER_VAD(vdtDeviceType));

    // Initialize defaults
    m_dwSupport = 0;
    m_dwAccelerationFlags = DIRECTSOUNDMIXER_ACCELERATIONF_DEFAULT;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CRenderDevice
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderDevice::~CRenderDevice"

CRenderDevice::~CRenderDevice(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CRenderDevice);

    ASSERT(!m_lstPrimaryBuffers.GetNodeCount());
    ASSERT(!m_lstSecondaryBuffers.GetNodeCount());

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object
 *
 *  Arguments:
 *      CDeviceDescription * [in]: driver description.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderDevice::Initialize"

HRESULT CRenderDevice::Initialize(CDeviceDescription *pDesc)
{
    HRESULT                 hr;
    WAVEOUTCAPS             woc;
    MMRESULT                mmr;

    DPF_ENTER();

    // Initialize the base class
    hr = CDevice::Initialize(pDesc);

    // Get waveOut device caps
    mmr = waveOutGetDevCaps(pDesc->m_uWaveDeviceId, &woc, sizeof woc);
    if (MMSYSERR_NOERROR == mmr)
    {
        m_dwSupport = woc.dwSupport;
    }

    // Get default software 3D algorithm from registry
    HKEY hkey = 0;
    TCHAR szAlgName[100];  // Long enough for any algorithm name or raw GUID
    m_guidDflt3dAlgorithm = &DS3DALG_NO_VIRTUALIZATION;  // The default algorithm
    GUID guidTmp = GUID_NULL;

    if (SUCCEEDED(RhRegOpenPath(HKEY_LOCAL_MACHINE, &hkey, 0, 1, REGSTR_GLOBAL_CONFIG)) &&
        SUCCEEDED(RhRegGetStringValue(hkey, REGSTR_DFLT_3D_ALGORITHM, szAlgName, sizeof szAlgName)))
    {
        // Strip braces from szAlgName; UuidFromString() can't handle them
        int startPos = 0;
        for (int c=0; c < sizeof szAlgName && szAlgName[c]; ++c)
            if (szAlgName[c] == '{')
                startPos = c+1;
            else if (szAlgName[c] == '}')
                szAlgName[c] = '\0';
        if (UuidFromString((_TUCHAR*)(szAlgName+startPos), &guidTmp) == RPC_S_OK)
        {
            DPF(DPFLVL_MOREINFO, "Got 3D algorithm GUID " DPF_GUID_STRING, DPF_GUID_VAL(guidTmp));
        }
        for (DWORD i=0; i < sizeof g_3dAlgList / sizeof *g_3dAlgList; ++i)
            // The algorithm can be specified either by name or by GUID:
            if (!_tcsicmp(szAlgName, g_3dAlgList[i].pszName) ||
                guidTmp == *g_3dAlgList[i].pGuid)
            {
                m_guidDflt3dAlgorithm = g_3dAlgList[i].pGuid;
                DPF(DPFLVL_MOREINFO, "Setting default S/W 3D algorithm to \"%s\"", g_3dAlgList[i].pszName);
                break;
            }
        RhRegCloseKey(&hkey);
        DPF(DPFLVL_MOREINFO, "Default S/W 3D algorithm GUID: " DPF_GUID_STRING, DPF_GUID_VAL(*m_guidDflt3dAlgorithm));
    }
    else
    {
        DPF(DPFLVL_MOREINFO, "No default S/W 3D algorithm in the registry");
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetGlobalAttenuation
 *
 *  Description:
 *      Gets the attenuation for each channel on the device.
 *
 *  Arguments:
 *      PDSVOLUMEPAN [out]: receives attenuation.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderDevice::GetGlobalAttenuation"

HRESULT CRenderDevice::GetGlobalAttenuation(PDSVOLUMEPAN pdsvp)
{
    LONG                    lLeft;
    LONG                    lRight;
    HRESULT                 hr;

    DPF_ENTER();

    hr = GetWaveOutVolume(m_pDeviceDescription->m_uWaveDeviceId, m_dwSupport, &lLeft, &lRight);

    if(SUCCEEDED(hr))
    {
        AttenuationToVolumePan(lLeft, lRight, &pdsvp->lVolume, &pdsvp->lPan);
        FillDsVolumePan(pdsvp->lVolume, pdsvp->lPan, pdsvp);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  SetGlobalAttenuation
 *
 *  Description:
 *      Sets the attenuation for each channel on the device.
 *
 *  Arguments:
 *      PDSVOLUMEPAN [in]: attenuation.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderDevice::SetGlobalAttenuation"

HRESULT CRenderDevice::SetGlobalAttenuation
(
    PDSVOLUMEPAN            pdsvp
)
{
    LONG                    lLeft;
    LONG                    lRight;
    HRESULT                 hr;

    DPF_ENTER();

    VolumePanToAttenuation(pdsvp->lVolume, pdsvp->lPan, &lLeft, &lRight);

    hr = SetWaveOutVolume(m_pDeviceDescription->m_uWaveDeviceId, m_dwSupport, lLeft, lRight);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetVolumePanCaps
 *
 *  Description:
 *      Gets volume/pan capabilities for the device.
 *
 *  Arguments:
 *      LPDWORD [in]: receives volume/pan caps flags.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderDevice::GetVolumePanCaps"

HRESULT CRenderDevice::GetVolumePanCaps
(
    LPDWORD                 pdwFlags
)
{
    DPF_ENTER();

    *pdwFlags = 0;

    if(WAVE_DEVICEID_NONE != m_pDeviceDescription->m_uWaveDeviceId)
    {
        if(m_dwSupport & WAVECAPS_VOLUME)
        {
            *pdwFlags |= DSBCAPS_CTRLVOLUME;
        }

        if(m_dwSupport & WAVECAPS_LRVOLUME)
        {
            *pdwFlags |= DSBCAPS_CTRLPAN;
        }
    }

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  CRenderWaveBuffer
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CRenderDevice * [in]: parent device.
 *      LPVOID [in]: instance identifier.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderWaveBuffer::CRenderWaveBuffer"

CRenderWaveBuffer::CRenderWaveBuffer
(
    CRenderDevice *         pDevice,
    LPVOID                  pvInstance
)
    : m_pvInstance(pvInstance)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CRenderWaveBuffer);

    // Initialize defaults
    m_pDevice = pDevice;
    m_pSysMemBuffer = NULL;

    ZeroMemory(&m_vrbd, sizeof m_vrbd);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CRenderWaveBuffer
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderWaveBuffer::~CRenderWaveBuffer"

CRenderWaveBuffer::~CRenderWaveBuffer(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CRenderWaveBuffer);

    // Free the system memory buffer
    RELEASE(m_pSysMemBuffer);

    // Free the format
    MEMFREE(m_vrbd.pwfxFormat);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      LPVADRBUFFERDESC [in]: buffer description.
 *      CRenderWaveBuffer * [in]: buffer to duplicate from.  This parameter
 *                                should be NULL to initialize a new buffer.
 *      CSysMemBuffer * [in]: system memory buffer to use.  If this parameter
 *                            is NULL, a new one will be created.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderWaveBuffer::Initialize"

HRESULT CRenderWaveBuffer::Initialize
(
    LPCVADRBUFFERDESC       pDesc,
    CRenderWaveBuffer *     pSource,
    CSysMemBuffer *         pSysMemBuffer
)
{
    HRESULT                 hr      = DS_OK;

    DPF_ENTER();

    // If we're being reinitialized with the same CSysMemBuffer,
    // don't release and addref. This can cause final release if
    // we're not careful.
    //
    BOOL fSameSysMemBuffer = (m_pSysMemBuffer && m_pSysMemBuffer == pSysMemBuffer);

    if (!fSameSysMemBuffer)
    {
        RELEASE(m_pSysMemBuffer);
    }

    MEMFREE(m_vrbd.pwfxFormat);

    // Save a copy of the buffer description
    if(!pDesc)
    {
        ASSERT(pSource);
        pDesc = &pSource->m_vrbd;
    }

    CopyMemory(&m_vrbd, pDesc, sizeof *pDesc);

    if(m_vrbd.pwfxFormat)
    {
        m_vrbd.pwfxFormat = CopyWfxAlloc(m_vrbd.pwfxFormat);
        hr = HRFROMP(m_vrbd.pwfxFormat);
    }

    // Initialize the system memory buffer.  All buffers get system memory that
    // they lock and unlock, regardless of the actual buffer implementation.
    if(SUCCEEDED(hr))
    {
        if(pSource)
        {
            pSysMemBuffer = pSource->m_pSysMemBuffer;
        }

        if(pSysMemBuffer)
        {
            ASSERT(pSysMemBuffer->GetSize() == m_vrbd.dwBufferBytes);

            if (!fSameSysMemBuffer)
            {
                m_pSysMemBuffer = ADDREF(pSysMemBuffer);
            }
        }
        else if(m_vrbd.dwBufferBytes)
        {
            m_pSysMemBuffer = NEW(CSysMemBuffer);
            hr = HRFROMP(m_pSysMemBuffer);

            if(SUCCEEDED(hr))
            {
                hr = m_pSysMemBuffer->Initialize(m_vrbd.dwBufferBytes);
            }
        }
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetCaps
 *
 *  Description:
 *      Gets capabilities for the device.
 *
 *  Arguments:
 *      LPVADRBUFFERCAPS [out]: receives caps.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderWaveBuffer::GetCaps"

HRESULT CRenderWaveBuffer::GetCaps(LPVADRBUFFERCAPS pCaps)
{
    DPF_ENTER();

    if(!(m_vrbd.dwFlags & DSBCAPS_LOCDEFER))
    {
        ASSERT(LXOR(m_vrbd.dwFlags & DSBCAPS_LOCSOFTWARE, m_vrbd.dwFlags & DSBCAPS_LOCHARDWARE));
    }

    pCaps->dwFlags = m_vrbd.dwFlags;
    pCaps->dwBufferBytes = m_pSysMemBuffer ? m_pSysMemBuffer->GetSize() : 0;

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  Lock
 *
 *  Description:
 *      Locks a region of the buffer.
 *
 *  Arguments:
 *      DWORD [in]: byte index into the buffer to lock from.
 *      DWORD [in]: size, in bytes, of the region to lock.
 *      LPVOID * [out]: receives pointer to region 1 of the lock.
 *      LPDWORD [out]: receives size of above region.
 *      LPVOID * [out]: receives pointer to region 2 of the lock.
 *      LPDWORD [out]: receives size of above region.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderWaveBuffer::Lock"

HRESULT CRenderWaveBuffer::Lock
(
    DWORD                   ibLock,
    DWORD                   cbLock,
    LPVOID *                ppv1,
    LPDWORD                 pcb1,
    LPVOID *                ppv2,
    LPDWORD                 pcb2
)
{
    HRESULT                 hr;

    DPF_ENTER();

    ASSERT(m_pSysMemBuffer);

    hr = m_pSysMemBuffer->LockRegion(this, ibLock, cbLock, ppv1, pcb1, ppv2, pcb2);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  Unlock
 *
 *  Description:
 *      Unlocks a region of the buffer.
 *
 *  Arguments:
 *      LPVOID [in]: pointer to region 1 of the lock.
 *      DWORD [in]: size of above region.
 *      LPVOID [in]: pointer to region 2 of the lock.
 *      DWORD [in]: size of above region.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderWaveBuffer::Unlock"

HRESULT CRenderWaveBuffer::Unlock
(
    LPVOID                  pv1,
    DWORD                   cb1,
    LPVOID                  pv2,
    DWORD                   cb2
)
{
    DWORD                   ibLock;
    DWORD                   cbLock;
    HRESULT                 hr;

    DPF_ENTER();

    ASSERT(m_pSysMemBuffer);

    hr = m_pSysMemBuffer->UnlockRegion(this, pv1, cb1, pv2, cb2);

    if(SUCCEEDED(hr))
    {
        ASSERT((LPBYTE)pv1 >= m_pSysMemBuffer->GetWriteBuffer());
        ASSERT((LPBYTE)pv1 + cb1 <= m_pSysMemBuffer->GetWriteBuffer() + m_pSysMemBuffer->GetSize());

        ibLock = PtrDiffToUlong((LPBYTE)pv1 - m_pSysMemBuffer->GetWriteBuffer());
        cbLock = cb1;
    }

    if(SUCCEEDED(hr) && pv2 && cb2)
    {
        ASSERT((LPBYTE)pv2 == m_pSysMemBuffer->GetWriteBuffer());
        ASSERT((LPBYTE)pv2 + cbLock + cb2 <= m_pSysMemBuffer->GetWriteBuffer() + m_pSysMemBuffer->GetSize());

        cbLock += cb2;
    }

    if(SUCCEEDED(hr))
    {
        hr = CommitToDevice(ibLock, cbLock);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  OverrideLocks
 *
 *  Description:
 *      Cancels any open locks on the buffer.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CRenderWaveBuffer::OverrideLocks"

HRESULT CRenderWaveBuffer::OverrideLocks(void)
{
    DPF_ENTER();

    ASSERT(m_pSysMemBuffer);

    m_pSysMemBuffer->OverrideLocks(this);

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  CPrimaryRenderWaveBuffer
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CRenderDevice * [in]: parent device.
 *      LPVOID [in]: instance identifier.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPrimaryRenderWaveBuffer::CPrimaryRenderWaveBuffer"

CPrimaryRenderWaveBuffer::CPrimaryRenderWaveBuffer
(
    CRenderDevice *         pDevice,
    LPVOID                  pvInstance
)
    : CRenderWaveBuffer(pDevice, pvInstance)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CPrimaryRenderWaveBuffer);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CPrimaryRenderWaveBuffer
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPrimaryRenderWaveBuffer::~CPrimaryRenderWaveBuffer"

CPrimaryRenderWaveBuffer::~CPrimaryRenderWaveBuffer(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CPrimaryRenderWaveBuffer);

    // Remove this object from the parent's list
    m_pDevice->m_lstPrimaryBuffers.RemoveDataFromList(this);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the wave buffer object.  If this function fails, the
 *      object should be immediately deleted.
 *
 *  Arguments:
 *      LPVADRBUFFERDESC [in]: buffer description.
 *      CRenderWaveBuffer * [in]: buffer to duplicate from.  This parameter
 *                                should be NULL to initialize a new buffer.
 *      CSysMemBuffer * [in]: system memory buffer to use.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CPrimaryRenderWaveBuffer::Initialize"

HRESULT CPrimaryRenderWaveBuffer::Initialize
(
    LPCVADRBUFFERDESC       pDesc,
    CRenderWaveBuffer *     pSource,
    CSysMemBuffer *         pSysMemBuffer
)
{
    DPF_ENTER();

    HRESULT hr = CRenderWaveBuffer::Initialize(pDesc, pSource, pSysMemBuffer);

    if (SUCCEEDED(hr))
    {
        // Add this object to the parent's list
        hr = HRFROMP(m_pDevice->m_lstPrimaryBuffers.AddNodeToList(this));
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}



/***************************************************************************
 *
 *  CSecondaryRenderWaveBuffer
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CRenderDevice * [in]: parent device.
 *      LPVOID [in]: instance identifier.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSecondaryRenderWaveBuffer::CSecondaryRenderWaveBuffer"

CSecondaryRenderWaveBuffer::CSecondaryRenderWaveBuffer
(
    CRenderDevice *         pDevice,
    LPVOID                  pvInstance
)
    : CRenderWaveBuffer(pDevice, pvInstance)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CSecondaryRenderWaveBuffer);

    // Initialize defaults
    m_hrSuccessCode = DS_OK;
    m_pOwningSink = NULL;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CSecondaryRenderWaveBuffer
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSecondaryRenderWaveBuffer::~CSecondaryRenderWaveBuffer"

CSecondaryRenderWaveBuffer::~CSecondaryRenderWaveBuffer(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CSecondaryRenderWaveBuffer);

    // Remove this object from the parent's list
    m_pDevice->m_lstSecondaryBuffers.RemoveDataFromList(this);
    RELEASE(m_pOwningSink);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the wave buffer object.  If this function fails, the
 *      object should be immediately deleted.
 *
 *  Arguments:
 *      LPVADRBUFFERDESC [in]: buffer description.
 *      CSecondaryRenderWaveBuffer * [in]: buffer to duplicate from, or
 *                                         NULL to initialize a new buffer.
 *      CSysMemBuffer * [in]: system memory buffer to use.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSecondaryRenderWaveBuffer::Initialize"

HRESULT CSecondaryRenderWaveBuffer::Initialize(LPCVADRBUFFERDESC pDesc, CSecondaryRenderWaveBuffer *pSource, CSysMemBuffer *pSysMemBuffer)
{
    DPF_ENTER();

    HRESULT hr = CRenderWaveBuffer::Initialize(pDesc, pSource, pSysMemBuffer);

    // Add this object to the parent's list
    if (SUCCEEDED(hr))
    {
        hr = HRFROMP(m_pDevice->m_lstSecondaryBuffers.AddNodeToList(this));
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CreatePan3dObject
 *
 *  Description:
 *      Creates a stereo pan 3D object.
 *
 *  Arguments:
 *      C3dListener * [in]: listener object.
 *      DWORD [in]: buffer flags.
 *      DWORD [in]: buffer frequency.
 *      C3dObject ** [out]: receives pointer to 3D object.  The caller is
 *                          responsible for freeing this object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSecondaryRenderWaveBuffer::CreatePan3dObject"

HRESULT CSecondaryRenderWaveBuffer::CreatePan3dObject
(
    C3dListener *           p3dListener,
    BOOL                    fMute3dAtMaxDistance,
    DWORD                   dwFrequency,
    C3dObject **            pp3dObject
)
{
    const BOOL              fDopplerEnabled         = !MAKEBOOL((m_vrbd.dwFlags & DSBCAPS_CTRLFX) && !(m_vrbd.dwFlags & DSBCAPS_SINKIN));
    CPan3dObject *          pPan3dObject;
    HRESULT                 hr;
    DPF_ENTER();

    pPan3dObject = NEW(CPan3dObject(p3dListener, fMute3dAtMaxDistance, fDopplerEnabled, dwFrequency, this));
    hr = HRFROMP(pPan3dObject);

    if(SUCCEEDED(hr))
    {
        hr = pPan3dObject->Initialize();
    }

    if(SUCCEEDED(hr))
    {
        *pp3dObject = pPan3dObject;
    }
    else
    {
        RELEASE(pPan3dObject);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  SetOwningSink
 *
 *  Description:
 *      Sets the buffer's owning CDirectSoundSink object.
 *
 *  Arguments:
 *      CDirectSoundSink* [in]: The new owning CDirectSoundSink object.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSecondaryRenderWaveBuffer::SetOwningSink"

void CSecondaryRenderWaveBuffer::SetOwningSink(CDirectSoundSink* pOwningSink)
{
    DPF_ENTER();

    CHECK_WRITE_PTR(pOwningSink);

    ASSERT(m_vrbd.dwFlags & DSBCAPS_SINKIN);
    ASSERT(m_pOwningSink == NULL);
    CHECK_WRITE_PTR(pOwningSink);

    m_pOwningSink = pOwningSink;
    m_pOwningSink->AddRef();

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  SetBufferFrequency
 *
 *  Description:
 *      Sets the buffer's sample rate.
 *
 *  Arguments:
 *      DWORD [in}: New sample rate in Hz.
 *      BOOL [in]: Whether to clamp to the driver's supported frequency
 *                 range if the call fails on a hardware buffer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSecondaryRenderWaveBuffer::SetBufferFrequency"

HRESULT CSecondaryRenderWaveBuffer::SetBufferFrequency(DWORD dwFrequency, BOOL fClamp)
{
    HRESULT hr;
    DPF_ENTER();

    if (HasSink())
    {
        hr = m_pOwningSink->SetBufferFrequency(this, dwFrequency);
    }
    else
    {
        hr = SetFrequency(dwFrequency, fClamp);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}

/***************************************************************************
 *
 *  CSysMemBuffer
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::CSysMemBuffer"

const DWORD CSysMemBuffer::m_cbExtra = 8;

CSysMemBuffer::CSysMemBuffer(void)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CSysMemBuffer);

    // Initialize defaults
    m_cbAudioBuffers = 0;
    m_pbPreFxBuffer = NULL;
    m_pbPostFxBuffer = NULL;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CSysMemBuffer
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::~CSysMemBuffer"

CSysMemBuffer::~CSysMemBuffer(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CSysMemBuffer);

    if(m_lstLocks.GetNodeCount())
    {
        RPF(DPFLVL_WARNING, "Buffer still contains active locks");
    }

    if(m_pbPreFxBuffer)
    {
        m_pbPreFxBuffer -= m_cbExtra;
        MEMFREE(m_pbPreFxBuffer);
    }

    if(m_pbPostFxBuffer)
    {
        m_pbPostFxBuffer -= m_cbExtra;
        MEMFREE(m_pbPostFxBuffer);
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.  If this function fails, the object should
 *      be immediately deleted.
 *
 *  Arguments:
 *      DWORD [in]: number of bytes to allocate.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::Initialize"

HRESULT CSysMemBuffer::Initialize(DWORD cbBuffer)
{
    DPF_ENTER();

    ASSERT(cbBuffer > 0);

    m_cbAudioBuffers = cbBuffer;

    HRESULT hr = MEMALLOC_A_HR(m_pbPostFxBuffer, BYTE, m_cbAudioBuffers + m_cbExtra);

    if (SUCCEEDED(hr))
        m_pbPostFxBuffer += m_cbExtra;

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  LockRegion
 *
 *  Description:
 *      Locks a region of the buffer memory to allow for writing.
 *
 *  Arguments:
 *      LPVOID [in]: lock ownership identifier.
 *      DWORD [in]: offset, in bytes, from the start of the buffer to where
 *                  the lock begins. This parameter is ignored if
 *                  DSBLOCK_FROMWRITECURSOR is specified in the dwFlags
 *                  parameter.
 *      DWORD [in]: size, in bytes, of the portion of the buffer to lock.
 *                  Note that the sound buffer is conceptually circular.
 *      LPVOID * [out]: address for a pointer to contain the first block of
 *                      the sound buffer to be locked.
 *      LPDWORD [out]: address for a variable to contain the number of bytes
 *                     pointed to by the lplpvAudioPtr1 parameter. If this
 *                     value is less than the dwWriteBytes parameter,
 *                     lplpvAudioPtr2 will point to a second block of sound
 *                     data.
 *      LPVOID * [out]: address for a pointer to contain the second block of
 *                      the sound buffer to be locked. If the value of this
 *                      parameter is NULL, the lplpvAudioPtr1 parameter
 *                      points to the entire locked portion of the sound
 *                      buffer.
 *      LPDWORD [out]: address of a variable to contain the number of bytes
 *                     pointed to by the lplpvAudioPtr2 parameter. If
 *                     lplpvAudioPtr2 is NULL, this value will be 0.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::LockRegion"

HRESULT CSysMemBuffer::LockRegion
(
    LPVOID                  pvIdentifier,
    DWORD                   dwPosition,
    DWORD                   dwSize,
    LPVOID *                ppvPtr1,
    LPDWORD                 pdwSize1,
    LPVOID *                ppvPtr2,
    LPDWORD                 pdwSize2
)
{
    LOCKCIRCULARBUFFER      lcb;
    HRESULT                 hr;
    UINT                    i;

    DPF_ENTER();

    // Calculate the region to lock
    lcb.pHwBuffer = NULL;
    lcb.pvBuffer = GetWriteBuffer();
    lcb.cbBuffer = m_cbAudioBuffers;
    lcb.ibRegion = dwPosition;
    lcb.cbRegion = dwSize;

    hr = LockCircularBuffer(&lcb);

    // Lock the region(s)
    for(i = 0; i < 2 && pvIdentifier && SUCCEEDED(hr); i++)
    {
        if(lcb.pvLock[i])
        {
            hr = TrackLock(pvIdentifier, lcb.pvLock[i], lcb.cbLock[i]);
        }
    }

    // Success
    if(SUCCEEDED(hr) && ppvPtr1)
    {
        *ppvPtr1 = lcb.pvLock[0];
    }

    if(SUCCEEDED(hr) && pdwSize1)
    {
        *pdwSize1 = lcb.cbLock[0];
    }

    if(SUCCEEDED(hr) && ppvPtr2)
    {
        *ppvPtr2 = lcb.pvLock[1];
    }

    if(SUCCEEDED(hr) && pdwSize2)
    {
        *pdwSize2 = lcb.cbLock[1];
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  UnlockRegion
 *
 *  Description:
 *      Unlocks a region of the buffer.
 *
 *  Arguments:
 *      LPVOID [in]: lock owner identifier.
 *      LPCVOID [in]: pointer to the first block.
 *      DWORD [in]: size of the first block.
 *      LPCVOID [in]: pointer to the second block.
 *      DWORD [in]: size of the second block.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::UnlockRegion"

HRESULT CSysMemBuffer::UnlockRegion
(
    LPVOID                  pvIdentifier,
    LPCVOID                 pvPtr1,
    DWORD                   dwSize1,
    LPCVOID                 pvPtr2,
    DWORD                   dwSize2
)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    // Unlock the region(s)
    if(pvIdentifier && pvPtr1)
    {
        hr = UntrackLock(pvIdentifier, pvPtr1);
    }

    if(SUCCEEDED(hr) && pvIdentifier && pvPtr2)
    {
        hr = UntrackLock(pvIdentifier, pvPtr2);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  TrackLock
 *
 *  Description:
 *      Tracks which regions of the buffer are locked.
 *
 *  Arguments:
 *      LPVOID [in]: instance identifier.
 *      LPVOID [in]: lock pointer.
 *      DWORD [in]: lock size.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::TrackLock"

HRESULT CSysMemBuffer::TrackLock(LPVOID pvIdentifier, LPVOID pvLock, DWORD cbLock)
{
    HRESULT                 hr      = DS_OK;
    CNode<LOCKREGION> *     pNode;
    LOCKREGION              lr;

    DPF_ENTER();

    ASSERT(pvIdentifier);
    ASSERT(pvLock);
    ASSERT(cbLock);

    lr.pvIdentifier = pvIdentifier;
    lr.pvLock = pvLock;
    lr.cbLock = cbLock;

    // COMPATCOMPAT: Previous versions of DirectSound did not track who
    // had what region of a buffer locked.  This meant that different threads
    // could lock the same portion of the buffer.  In this version, we trap
    // this and return failure.

    // Make sure the region isn't already locked
    for(pNode = m_lstLocks.GetListHead(); pNode && SUCCEEDED(hr); pNode = pNode->m_pNext)
    {
        if(DoRegionsOverlap(&lr, &pNode->m_data))
        {
            RPF(DPFLVL_ERROR, "The specified region is already locked");
            hr = DSERR_INVALIDPARAM;
        }
    }

    // Lock the region(s)
    if(SUCCEEDED(hr))
    {
        pNode = m_lstLocks.AddNodeToList(lr);
        hr = HRFROMP(pNode);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  UntrackLock
 *
 *  Description:
 *      Tracks which regions of the buffer are locked.
 *
 *  Arguments:
 *      LPVOID [in]: instance identifier.
 *      LPCVOID [in]: lock pointer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::UntrackLock"

HRESULT CSysMemBuffer::UntrackLock
(
    LPVOID                  pvIdentifier,
    LPCVOID                 pvLock
)
{
    HRESULT                 hr      = DSERR_INVALIDPARAM;
    CNode<LOCKREGION> *     pNode;
    CNode<LOCKREGION> *     pNext;

    DPF_ENTER();

    ASSERT(pvIdentifier);
    ASSERT(pvLock);

    // Find the lock in the list and remove it
    pNode = m_lstLocks.GetListHead();

    while(pNode)
    {
        pNext = pNode->m_pNext;

        if(pvIdentifier == pNode->m_data.pvIdentifier && pvLock == pNode->m_data.pvLock)
        {
            m_lstLocks.RemoveNodeFromList(pNode);
            hr = DS_OK;

            break;
        }

        pNode = pNext;
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  OverrideLocks
 *
 *  Description:
 *      Removes all locks.
 *
 *  Arguments:
 *      LPVOID [in]: lock owner identifier.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::OverrideLocks"

void CSysMemBuffer::OverrideLocks(LPVOID pvIdentifier)
{
    CNode<LOCKREGION> *     pNode;
    CNode<LOCKREGION> *     pNext;

    DPF_ENTER();

    ASSERT(pvIdentifier);

    // Find all locks owned by the given identifier and remove them
    pNode = m_lstLocks.GetListHead();

    while(pNode)
    {
        pNext = pNode->m_pNext;
        if(pvIdentifier == pNode->m_data.pvIdentifier)
            m_lstLocks.RemoveNodeFromList(pNode);
        pNode = pNext;
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  WriteSilence
 *
 *  Description:
 *      [MISSING]
 *
 *  Arguments:
 *      [MISSING]
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::WriteSilence"

void CSysMemBuffer::WriteSilence(WORD wBits, DWORD dwStartPos, DWORD dwEndPos)
{
    DPF_ENTER();

    if (dwEndPos > dwStartPos)
    {
        ::FillSilence(GetWriteBuffer() + dwStartPos, dwEndPos - dwStartPos, wBits);
    }
    else // The wraparound case
    {
        ::FillSilence(GetWriteBuffer() + dwStartPos, GetSize() - dwStartPos, wBits);
        ::FillSilence(GetWriteBuffer(), dwEndPos, wBits);
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  AllocateFxBuffer
 *
 *  Description:
 *      Allocate the mirror buffer used for effects processing.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::AllocateFxBuffer"

HRESULT CSysMemBuffer::AllocateFxBuffer(void)
{
    HRESULT hr = DS_OK;
    DPF_ENTER();

    if (m_pbPreFxBuffer == NULL)
    {
        hr = MEMALLOC_A_HR(m_pbPreFxBuffer, BYTE, m_cbAudioBuffers + m_cbExtra);

        if (SUCCEEDED(hr))
        {
            m_pbPreFxBuffer += m_cbExtra;

            // This is now our write buffer; copy current audio data into it
            CopyMemory(m_pbPreFxBuffer, m_pbPostFxBuffer, m_cbAudioBuffers);
        }
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  FreeFxBuffer
 *
 *  Description:
 *      Free the mirror buffer used for effects processing.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CSysMemBuffer::FreeFxBuffer"

void CSysMemBuffer::FreeFxBuffer(void)
{
    DPF_ENTER();

    if (m_pbPreFxBuffer != NULL)
    {
        // Preserve the audio data from m_pbPreFxBuffer before freeing it
        CopyMemory(m_pbPostFxBuffer, m_pbPreFxBuffer, m_cbAudioBuffers);

        m_pbPreFxBuffer -= m_cbExtra;
        MEMFREE(m_pbPreFxBuffer);
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  CCaptureDevice
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      VADDEVICETYPE [in]: device type.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureDevice::CCaptureDevice"

CCaptureDevice::CCaptureDevice(VADDEVICETYPE vdtDeviceType)
    : CDevice(vdtDeviceType)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CCaptureDevice);

    ASSERT(IS_CAPTURE_VAD(vdtDeviceType));

    // Initialize defaults
    m_fAcquiredVolCtrl = FALSE;
    m_dwRangeMin = 0;
    m_dwRangeSize = 0xFFFF;
    m_pmxMuxFlags = NULL;
    m_pfMicValue = NULL;
    ZeroMemory(&m_mxcdMasterVol,  sizeof m_mxcdMasterVol);
    ZeroMemory(&m_mxcdMasterMute, sizeof m_mxcdMasterMute);
    ZeroMemory(&m_mxcdMasterMux,  sizeof m_mxcdMasterMux);
    ZeroMemory(&m_mxcdMicVol,     sizeof m_mxcdMicVol);
    ZeroMemory(&m_mxcdMicMute,    sizeof m_mxcdMicMute);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CCaptureDevice
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureDevice::~CCaptureDevice"

CCaptureDevice::~CCaptureDevice(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CCaptureDevice);

    if (m_hMixer)
    {
        MMRESULT mmr = mixerClose(m_hMixer);
        ASSERT(MMSYSERR_NOERROR == mmr);
        // Note: this assert *will* fire if the app didn't release its capture object
        // and we're releasing it in FreeOrphanedObjects.  It's harmless in this case,
        // since the app is going away and its WinMM handles will be freed anyway.
    }

    MEMFREE(m_pmxMuxFlags);
    ASSERT(!m_lstBuffers.GetNodeCount());

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object
 *
 *  Arguments:
 *      CDeviceDescription * [in]: driver description.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureDevice::Initialize"

HRESULT CCaptureDevice::Initialize(CDeviceDescription *pDesc)
{
    HRESULT hr;
    DPF_ENTER();

    // Initialize the base class
    hr = CDevice::Initialize(pDesc);

    if (SUCCEEDED(hr))
    {
        AcquireVolCtrl();
        // We can ignore the result code, because if AcquireVolCtrl()
        // fails HasVolCtrl() will always return DSERR_CONTROLUNAVAIL
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  AcquireVolCtrl
 *
 *  Description:
 *      This function puts the mixer API through contortions in an effort
 *      to figure out the "mixer lines" required to control the recording
 *      level on the microphone line, if present.
 *
 *      The mixer API's view of a card's audio lines and controls depends
 *      on the capabilities of the card itself.  (Even with WDM drivers;
 *      wdmaud.sys implements the mixer API for them by mapping the WDM
 *      driver's topology to a corresponding mixer-line topology.)
 *
 *      Here are the assumptions we make about this mixer topology:
 *
 *      * There is a line of type MIXERLINE_COMPONENTTYPE_DST_WAVEIN which
 *        represents "the final source for the waveform-audio input (ADC)".
 *        We'll refer to this as the "master line".
 *
 *      * There is at least one source line connected to the master line
 *        of type MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE.  We'll use the
 *        first one found, and refer to is as the "mic line".
 *
 *      * The master line may have a MIXERCONTROL_CONTROLTYPE_MUX control
 *        which selects from the recording sources connected to it.
 *
 *      * Either of the two lines may have a MIXERCONTROL_CONTROLTYPE_MUTE
 *        control.
 *
 *      * At least one of the lines has a MIXERCONTROL_CONTROLTYPE_VOLUME
 *        control.
 *
 *      If all of these assumptions are met, we return DS_OK and save all
 *      the information required to control the recording level(s) later.
 *      As far as I know, all WDM drivers meet these requirements, and so
 *      do most "legacy" drivers - except perhaps some that fail to use
 *      MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE to identify the mic line.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureDevice::AcquireVolCtrl"

HRESULT CCaptureDevice::AcquireVolCtrl(void)
{
    DPF_ENTER();

    // Set up the master waveIn destination mixer line
    MIXERLINE mxMastLine;
    ZeroMemory(&mxMastLine, sizeof mxMastLine);
    mxMastLine.cbStruct = sizeof mxMastLine;
    mxMastLine.dwComponentType = MIXERLINE_COMPONENTTYPE_DST_WAVEIN;

    // Set up the microphone source line
    MIXERLINE mxMicLine;
    ZeroMemory(&mxMicLine, sizeof mxMicLine);

    // Set up the mixer-line control structure
    MIXERCONTROL mxCtrl;
    ZeroMemory(&mxCtrl, sizeof mxCtrl);
    mxCtrl.cbStruct = sizeof mxCtrl;

    // Set up the 1-element array of controls
    MIXERLINECONTROLS mxLineCtrls;
    ZeroMemory(&mxLineCtrls, sizeof mxLineCtrls);
    mxLineCtrls.cbStruct = sizeof mxLineCtrls;
    mxLineCtrls.cControls = 1;
    mxLineCtrls.cbmxctrl = sizeof mxCtrl;
    mxLineCtrls.pamxctrl = &mxCtrl;

    // Set up the control details structures
    m_mxcdMasterVol.cbDetails = sizeof m_mxVolume;
    m_mxcdMasterVol.paDetails = &m_mxVolume;
    m_mxcdMasterVol.cChannels = 1;
    m_mxcdMasterMute.cbDetails = sizeof m_mxMute;
    m_mxcdMasterMute.paDetails = &m_mxMute;
    m_mxcdMasterMute.cChannels = 1;
    m_mxcdMicVol.cbDetails = sizeof m_mxVolume;
    m_mxcdMicVol.paDetails = &m_mxVolume;
    m_mxcdMicVol.cChannels = 1;
    m_mxcdMicMute.cbDetails = sizeof m_mxMute;
    m_mxcdMicMute.paDetails = &m_mxMute;
    m_mxcdMicMute.cChannels = 1;

    // Open the mixer device corresponding to the waveIn device ID
    MMRESULT mmr = mixerOpen(&m_hMixer, m_pDeviceDescription->m_uWaveDeviceId, 0, 0, MIXER_OBJECTF_WAVEIN);
    if (mmr != MMSYSERR_NOERROR)
    {
        m_hMixer = NULL;
        m_fAcquiredVolCtrl = FALSE;
    }
    else  // Success
    {
        // Find the master recording destination line
        mmr = mixerGetLineInfo((HMIXEROBJ)m_hMixer, &mxMastLine, MIXER_OBJECTF_HMIXER | MIXER_GETLINEINFOF_COMPONENTTYPE);
        if (mmr == MMSYSERR_NOERROR)
        {
            DPF_MIXER(DPFLVL_INFO, "Found the master recording mixer line");
            // Look for a volume fader control on the master line
            mxLineCtrls.dwLineID = mxMastLine.dwLineID;
            mxLineCtrls.dwControlType = MIXERCONTROL_CONTROLTYPE_VOLUME;
            mmr = mixerGetLineControls((HMIXEROBJ)m_hMixer, &mxLineCtrls, MIXER_OBJECTF_HMIXER | MIXER_GETLINECONTROLSF_ONEBYTYPE);
            if (mmr == MMSYSERR_NOERROR)
            {
                // Found it - use the cbStruct field to flag success
                DPF_MIXER(DPFLVL_INFO, "Found a volume fader on the master line");
                m_mxcdMasterVol.cbStruct = sizeof m_mxcdMasterVol;
                m_mxcdMasterVol.dwControlID = mxCtrl.dwControlID;
                m_dwRangeMin = mxCtrl.Bounds.dwMinimum;
                m_dwRangeSize = mxCtrl.Bounds.dwMaximum - mxCtrl.Bounds.dwMinimum;
                mmr = mixerGetControlDetails((HMIXEROBJ)m_hMixer, &m_mxcdMasterVol, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
            }
            if (mmr != MMSYSERR_NOERROR)
                m_mxcdMasterVol.cbStruct = 0;

            // Look for a mute control on the master line
            mxLineCtrls.dwControlType = MIXERCONTROL_CONTROLTYPE_MUTE;
            mmr = mixerGetLineControls((HMIXEROBJ)m_hMixer, &mxLineCtrls, MIXER_OBJECTF_HMIXER | MIXER_GETLINECONTROLSF_ONEBYTYPE);
            if (mmr == MMSYSERR_NOERROR)
            {
                DPF_MIXER(DPFLVL_INFO, "Found a mute control on the master line");
                m_mxcdMasterMute.cbStruct = sizeof m_mxcdMasterMute;
                m_mxcdMasterMute.dwControlID = mxCtrl.dwControlID;
                mmr = mixerGetControlDetails((HMIXEROBJ)m_hMixer, &m_mxcdMasterMute, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
            }
            if (mmr != MMSYSERR_NOERROR)
                m_mxcdMasterMute.cbStruct = 0;

            // Look for the microphone source line
            mxMicLine.cbStruct = sizeof mxMicLine;
            mxMicLine.dwDestination = mxMastLine.dwDestination;
            for (UINT i=0; i < mxMastLine.cConnections; ++i)
            {
                mxMicLine.dwSource = i;
                mmr = mixerGetLineInfo((HMIXEROBJ)m_hMixer, &mxMicLine, MIXER_OBJECTF_HMIXER | MIXER_GETLINEINFOF_SOURCE);
                if (mmr != MMSYSERR_NOERROR || mxMicLine.dwComponentType == MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE)
                    break;
            }
            if (mxMicLine.dwComponentType == MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE)
            {
                DPF_MIXER(DPFLVL_INFO, "Found a microphone mixer line");
                // Look for a volume fader control on the mic line
                mxLineCtrls.dwLineID = mxMicLine.dwLineID;
                mxLineCtrls.dwControlType = MIXERCONTROL_CONTROLTYPE_VOLUME;
                mmr = mixerGetLineControls((HMIXEROBJ)m_hMixer, &mxLineCtrls, MIXER_OBJECTF_HMIXER | MIXER_GETLINECONTROLSF_ONEBYTYPE);
                if (mmr == MMSYSERR_NOERROR)
                {
                    DPF_MIXER(DPFLVL_INFO, "Found a volume fader on the mic line");
                    m_mxcdMicVol.cbStruct = sizeof m_mxcdMicVol;
                    m_mxcdMicVol.dwControlID = mxCtrl.dwControlID;
                    m_dwRangeMin = mxCtrl.Bounds.dwMinimum;
                    m_dwRangeSize = mxCtrl.Bounds.dwMaximum - mxCtrl.Bounds.dwMinimum;
                    mmr = mixerGetControlDetails((HMIXEROBJ)m_hMixer, &m_mxcdMicVol, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
                }
                if (mmr != MMSYSERR_NOERROR)
                    m_mxcdMicVol.cbStruct = 0;

                // Look for a mute control on the mic line
                mxLineCtrls.dwControlType = MIXERCONTROL_CONTROLTYPE_MUTE;
                mmr = mixerGetLineControls((HMIXEROBJ)m_hMixer, &mxLineCtrls, MIXER_OBJECTF_HMIXER | MIXER_GETLINECONTROLSF_ONEBYTYPE);
                if (mmr == MMSYSERR_NOERROR)
                {
                    DPF_MIXER(DPFLVL_INFO, "Found a mute control on the mic line");
                    m_mxcdMicMute.cbStruct = sizeof m_mxcdMicMute;
                    m_mxcdMicMute.dwControlID = mxCtrl.dwControlID;
                    mmr = mixerGetControlDetails((HMIXEROBJ)m_hMixer, &m_mxcdMicMute, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
                }
                if (mmr != MMSYSERR_NOERROR)
                    m_mxcdMicMute.cbStruct = 0;

                // Look for a MUX or MIXER control on the master line
                mxLineCtrls.dwLineID = mxMastLine.dwLineID;
                mxLineCtrls.dwControlType = MIXERCONTROL_CONTROLTYPE_MUX;
                m_fMasterMuxIsMux = TRUE;
                mmr = mixerGetLineControls((HMIXEROBJ)m_hMixer, &mxLineCtrls, MIXER_OBJECTF_HMIXER | MIXER_GETLINECONTROLSF_ONEBYTYPE);
                if (mmr != MMSYSERR_NOERROR)
                {
                    mxLineCtrls.dwControlType = MIXERCONTROL_CONTROLTYPE_MIXER;
                    m_fMasterMuxIsMux = FALSE;
                    mmr = mixerGetLineControls((HMIXEROBJ)m_hMixer, &mxLineCtrls, MIXER_OBJECTF_HMIXER | MIXER_GETLINECONTROLSF_ONEBYTYPE);
                }
                if (mmr == MMSYSERR_NOERROR)
                {
                    DPF_MIXER(DPFLVL_INFO, "Found an item list control on the master line");
                    m_mxcdMasterMux.cbStruct = sizeof m_mxcdMasterMux;
                    m_mxcdMasterMux.dwControlID = mxCtrl.dwControlID;
                    m_mxcdMasterMux.cMultipleItems = mxCtrl.cMultipleItems;

                    // We save the cChannels value, because some evil VxD drivers (read: Aureal
                    // Vortex) will set it to 0 in the call to mixerGetControlDetails() below
                    int nChannels = (mxCtrl.fdwControl & MIXERCONTROL_CONTROLF_UNIFORM) ? 1 : mxMastLine.cChannels;
                    m_mxcdMasterMux.cChannels = nChannels;

                    // Get the MUX or MIXER list items
                    m_mxcdMasterMux.cbDetails = sizeof(MIXERCONTROLDETAILS_LISTTEXT);
                    MIXERCONTROLDETAILS_LISTTEXT *pList = (PMIXERCONTROLDETAILS_LISTTEXT) MEMALLOC_A(BYTE, m_mxcdMasterMux.cbDetails * m_mxcdMasterMux.cChannels * mxCtrl.cMultipleItems);
                    if (pList != NULL)
                    {
                        m_mxcdMasterMux.paDetails = pList;
                        mmr = mixerGetControlDetails((HMIXEROBJ)m_hMixer, &m_mxcdMasterMux, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_LISTTEXT);
                        if (mmr == MMSYSERR_NOERROR)
                        {
                            DPF_MIXER(DPFLVL_INFO, "Got the list controls's LISTTEXT details");
                            // Get the MUX or MIXER list values
                            m_mxcdMasterMux.cbDetails = sizeof(MIXERCONTROLDETAILS_BOOLEAN);
                            m_mxcdMasterMux.cChannels = nChannels;
                            m_pmxMuxFlags = (PMIXERCONTROLDETAILS_BOOLEAN) MEMALLOC_A(BYTE, m_mxcdMasterMux.cbDetails * m_mxcdMasterMux.cChannels * mxCtrl.cMultipleItems);
                            if (m_pmxMuxFlags != NULL)
                            {
                                m_mxcdMasterMux.paDetails = m_pmxMuxFlags;
                                mmr = mixerGetControlDetails((HMIXEROBJ)m_hMixer, &m_mxcdMasterMux, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
                                if (mmr == MMSYSERR_NOERROR)  // Enable the item corresponding to the mic line
                                {
                                    DPF_MIXER(DPFLVL_INFO, "Got the list controls's VALUE details");
                                    for (UINT i=0; i < mxCtrl.cMultipleItems; ++i)
                                    {
                                        if (pList[i].dwParam1 == mxMicLine.dwLineID)
                                            m_pfMicValue = &m_pmxMuxFlags[i].fValue;
                                        else if (mxLineCtrls.dwControlType == MIXERCONTROL_CONTROLTYPE_MUX)
                                            m_pmxMuxFlags[i].fValue = FALSE;
                                        DPF_MIXER(DPFLVL_INFO, "Set list item %d to %d", i, pList[i].dwParam1 == mxMicLine.dwLineID);
                                    }
                                }
                            }
                        }
                        MEMFREE(pList);
                    }
                    if (!m_pmxMuxFlags || !m_pfMicValue || mmr != MMSYSERR_NOERROR)
                        m_mxcdMasterMux.cbStruct = 0;
                }
            }
        }

        // To be able to control the recording level, we minimally require
        // a volume fader on the master line or one on the microphone line:
        m_fAcquiredVolCtrl = m_mxcdMasterVol.cbStruct || m_mxcdMicVol.cbStruct;

        // Close mixer handle if we haven't found it useful
        if (!m_fAcquiredVolCtrl)
        {
            mmr = mixerClose(m_hMixer);
            ASSERT(MMSYSERR_NOERROR == mmr);
            m_hMixer = NULL;
        }
    }

    HRESULT hr = m_fAcquiredVolCtrl ? DS_OK : DSERR_CONTROLUNAVAIL;

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  SetVolume
 *
 *  Description:
 *      Sets the master recording level for this capture device.
 *
 *  Arguments:
 *      LONG [in]: new volume level, in 100ths of a dB.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureDevice::SetVolume"

HRESULT CCaptureDevice::SetVolume(LONG lVolume)
{
    MMRESULT mmr = MMSYSERR_NOTSUPPORTED;  // Default return code
    DPF_ENTER();

    // Set the master recording level control if available
    if (m_mxcdMasterVol.cbStruct)
    {
        // Convert the DSBVOLUME level to an amplification factor from 0 to 0xFFFF
        m_mxVolume.dwValue = DBToAmpFactor(lVolume);

        // Adjust range if necessary
        if (m_dwRangeMin != 0 || m_dwRangeSize != 0xFFFF)
            m_mxVolume.dwValue = DWORD(m_dwRangeMin + m_dwRangeSize*double(m_mxVolume.dwValue)/0xFFFF);

        mmr = mixerSetControlDetails(HMIXEROBJ(m_hMixer), &m_mxcdMasterVol, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
    }

    HRESULT hr = MMRESULTtoHRESULT(mmr);
    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetVolume
 *
 *  Description:
 *      Gets the master recording level for this capture device.
 *
 *  Arguments:
 *      LPLONG [out]: receives the volume level.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureDevice::GetVolume"

HRESULT CCaptureDevice::GetVolume(LPLONG plVolume)
{
    MMRESULT mmr = MMSYSERR_NOTSUPPORTED;  // Default return code
    DPF_ENTER();

    ASSERT(plVolume != NULL);

    // Get the master recording level if available
    if (m_mxcdMasterVol.cbStruct != 0)
    {
        mmr = mixerGetControlDetails(HMIXEROBJ(m_hMixer), &m_mxcdMasterVol, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
        if (mmr == MMSYSERR_NOERROR)
        {
            ASSERT(m_mxVolume.dwValue >= m_dwRangeMin && m_mxVolume.dwValue <= m_dwRangeMin + m_dwRangeSize);

            // Adjust range if necessary
            if (m_dwRangeMin != 0 || m_dwRangeSize != 0xFFFF)
                m_mxVolume.dwValue = DWORD(double(m_mxVolume.dwValue-m_dwRangeMin) / m_dwRangeSize * 0xFFFF);

            // Convert the amplification factor to a DSBVOLUME level
            *plVolume = AmpFactorToDB(m_mxVolume.dwValue);
        }
    }

    HRESULT hr = MMRESULTtoHRESULT(mmr);
    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  SetMicVolume
 *
 *  Description:
 *      Sets the microphone recording level for this capture device.
 *
 *  Arguments:
 *      LONG [in]: new volume level, in 100ths of a dB.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureDevice::SetMicVolume"

HRESULT CCaptureDevice::SetMicVolume(LONG lVolume)
{
    MMRESULT mmr = MMSYSERR_NOTSUPPORTED;  // Default return code
    DPF_ENTER();

    // Set the microphone recording level control if available
    if (m_mxcdMicVol.cbStruct)
    {
        // Convert the DSBVOLUME level to an amplification factor from 0 to 0xFFFF
        m_mxVolume.dwValue = DBToAmpFactor(lVolume);

        // Adjust range if necessary
        if (m_dwRangeMin != 0 || m_dwRangeSize != 0xFFFF)
            m_mxVolume.dwValue = DWORD(m_dwRangeMin + m_dwRangeSize*double(m_mxVolume.dwValue)/0xFFFF);

        mmr = mixerSetControlDetails(HMIXEROBJ(m_hMixer), &m_mxcdMicVol, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
    }

    HRESULT hr = MMRESULTtoHRESULT(mmr);
    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetMicVolume
 *
 *  Description:
 *      Gets the microphone recording level for this capture device.
 *
 *  Arguments:
 *      LPLONG [out]: receives the volume level.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureDevice::GetMicVolume"

HRESULT CCaptureDevice::GetMicVolume(LPLONG plVolume)
{
    MMRESULT mmr = MMSYSERR_NOTSUPPORTED;  // Default return code
    DPF_ENTER();

    ASSERT(plVolume != NULL);

    // Get the microphone recording level if available
    if (m_mxcdMicVol.cbStruct != 0)
    {
        mmr = mixerGetControlDetails(HMIXEROBJ(m_hMixer), &m_mxcdMicVol, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
        if (mmr == MMSYSERR_NOERROR)
        {
            ASSERT(m_mxVolume.dwValue >= m_dwRangeMin && m_mxVolume.dwValue <= m_dwRangeMin + m_dwRangeSize);

            // Adjust range if necessary
            if (m_dwRangeMin != 0 || m_dwRangeSize != 0xFFFF)
                m_mxVolume.dwValue = DWORD(double(m_mxVolume.dwValue-m_dwRangeMin) / m_dwRangeSize * 0xFFFF);

            // Convert the amplification factor to a DSBVOLUME level
            *plVolume = AmpFactorToDB(m_mxVolume.dwValue);
        }
    }

    HRESULT hr = MMRESULTtoHRESULT(mmr);
    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  EnableMic
 *
 *  Description:
 *      Enables/disables the microphone line on this capture device.
 *
 *  Arguments:
 *      BOOL [in]: TRUE to enable the microphone, FALSE to disable it.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureDevice::EnableMic"

HRESULT CCaptureDevice::EnableMic(BOOL fEnable)
{
    HMIXEROBJ hMixObj = HMIXEROBJ(m_hMixer);
    MMRESULT mmr = MMSYSERR_NOERROR;
    HRESULT hr;
    DPF_ENTER();

    // Check for presence of microphone controls
    if (!m_mxcdMasterMux.cbStruct && !m_mxcdMasterMute.cbStruct && !m_mxcdMicMute.cbStruct)
    {
        // We cannot do anything to enable the microphone line
        hr = DSERR_UNSUPPORTED;
    }
    else
    {
        // Select the microphone on the Mux control, if available
        if (m_mxcdMasterMux.cbStruct && !(m_fMasterMuxIsMux && !fEnable))
        {
            *m_pfMicValue = fEnable;
            mmr = mixerSetControlDetails(hMixObj, &m_mxcdMasterMux, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
        }

        // Mute/unmute the lines, if mute controls are available
        m_mxMute.fValue = !fEnable;
        if (m_mxcdMasterMute.cbStruct && mmr == MMSYSERR_NOERROR)
            mmr = mixerSetControlDetails(hMixObj, &m_mxcdMasterMute, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);
        if (m_mxcdMicMute.cbStruct && mmr == MMSYSERR_NOERROR)
            mmr = mixerSetControlDetails(hMixObj, &m_mxcdMicMute, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);

        MIXERCONTROLDETAILS_UNSIGNED mxOldVol = m_mxVolume;

        if (!fEnable)
            m_mxVolume.dwValue = 0;

        if (m_mxcdMasterVol.cbStruct && mmr == MMSYSERR_NOERROR)
            mmr = mixerSetControlDetails(hMixObj, &m_mxcdMasterVol, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);

        if (m_mxcdMicVol.cbStruct && mmr == MMSYSERR_NOERROR)
            mmr = mixerSetControlDetails(hMixObj, &m_mxcdMicVol, MIXER_OBJECTF_HMIXER | MIXER_GETCONTROLDETAILSF_VALUE);

        m_mxVolume = mxOldVol;
        hr = MMRESULTtoHRESULT(mmr);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  CCaptureWaveBuffer
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CCaptureDevice* [in]: parent device.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureWaveBuffer::CCaptureWaveBuffer"

CCaptureWaveBuffer::CCaptureWaveBuffer(CCaptureDevice *pDevice)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CCaptureWaveBuffer);

    // Initialize defaults
    m_pDevice = pDevice;
    m_pSysMemBuffer = NULL;
    m_dwFlags = 0;
    m_hEventFocus = NULL;
    m_fYieldedFocus = FALSE;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CCaptureWaveBuffer
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureWaveBuffer::~CCaptureWaveBuffer"

CCaptureWaveBuffer::~CCaptureWaveBuffer(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CCaptureWaveBuffer);

    // Remove this object from the parent's list
    m_pDevice->m_lstBuffers.RemoveDataFromList(this);

    // Free the system memory buffer
    RELEASE(m_pSysMemBuffer);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      DWORD [in] : size of buffer in bytes
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureWaveBuffer::Initialize"

HRESULT CCaptureWaveBuffer::Initialize(DWORD dwBufferBytes)
{
    DPF_ENTER();

    // Add this object to the parent's list
    HRESULT hr = HRFROMP(m_pDevice->m_lstBuffers.AddNodeToList(this));

    // Allocate the system memory buffer
    if(SUCCEEDED(hr))
    {
        m_pSysMemBuffer = NEW(CSysMemBuffer);
        hr = HRFROMP(m_pSysMemBuffer);
    }

    if(SUCCEEDED(hr))
    {
        hr = m_pSysMemBuffer->Initialize(dwBufferBytes);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  Lock
 *
 *  Description:
 *      Locks a region of the buffer memory to allow for reading.
 *
 *  Arguments:
 *      DWORD [in]: offset, in bytes, from the start of the buffer to where
 *                  the lock begins.
 *      DWORD [in]: size, in bytes, of the portion of the buffer to lock.
 *                  Note that the sound buffer is conceptually circular.
 *      LPVOID * [out]: address for a pointer to contain the first block of
 *                      the sound buffer to be locked.
 *      LPDWORD [out]: address for a variable to contain the number of bytes
 *                     pointed to by the above pointer.
 *      LPVOID * [out]: address for a pointer to contain the second block of
 *                      the sound buffer to be locked.
 *      LPDWORD [out]: address for a variable to contain the number of bytes
 *                     pointed to by the above pointer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureWaveBuffer::Lock"

HRESULT CCaptureWaveBuffer::Lock(DWORD ibLock, DWORD cbLock,
                                 LPVOID *ppv1, LPDWORD pcb1,
                                 LPVOID *ppv2, LPDWORD pcb2)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = m_pSysMemBuffer->LockRegion(this, ibLock, cbLock, ppv1, pcb1, ppv2, pcb2);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  Unlock
 *
 *  Description:
 *      Unlocks a region of the buffer.
 *
 *  Arguments:
 *      LPCVOID [in]: pointer to the first block.
 *      DWORD [in]: size of the first block.
 *      LPCVOID [in]: pointer to the second block.
 *      DWORD [in]: size of the second block.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CCaptureWaveBuffer::Unlock"

HRESULT CCaptureWaveBuffer::Unlock(LPCVOID pv1, DWORD cb1,
                                   LPCVOID pv2, DWORD cb2)
{
    DPF_ENTER();

    HRESULT hr = m_pSysMemBuffer->UnlockRegion(this, pv1, cb1, pv2, cb2);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vector.h ===
/***************************************************************************
 *
 *  Copyright (C) 1997-1998 Microsoft Corporation.  All Rights Reserved.
 *
 ***************************************************************************/

#ifndef __VECTOR_H__
#define __VECTOR_H__

#define PI 3.141592653589793238f
#define PI_TIMES_TWO 6.28318530718f
#define PI_OVER_TWO 1.570796326795f
#define THREE_PI_OVER_TWO 4.712388980385f
#define NEG_PI_OVER_TWO -1.570796326795f
#define C180_OVER_PI 57.29577951308f
#define PI_OVER_360 0.008726646259972f
#define TWO_OVER_PI 0.6366197723676f
#define SPEEDOFSOUND 359660.f	// mm/sec

#define SET_VECTOR(v, a, b, c)	(v).x = a, (v).y = b, (v).z = c
#define SET_EMPTY_VECTOR(v)     SET_VECTOR(v, 0.0f, 0.0f, 0.0f)
#define COPY_VECTOR(va, vb)     (va).x = (vb).x, (va).y = (vb).y, (va).z = (vb).z

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

extern void CheckVector(D3DVECTOR* lpv);
extern FLOAT MagnitudeVector(D3DVECTOR* lpv);
extern BOOL IsEmptyVector(D3DVECTOR* lpv);
extern BOOL IsEqualVector(D3DVECTOR* lpv1, D3DVECTOR* lpv2);
extern BOOL NormalizeVector(D3DVECTOR* lpv);
extern FLOAT DotProduct(D3DVECTOR* lpv1, D3DVECTOR* lpv2);
extern BOOL CrossProduct(D3DVECTOR* lpvX, D3DVECTOR* lpv1, D3DVECTOR* lpv2);
extern BOOL MakeOrthogonal(D3DVECTOR* lpvFront, D3DVECTOR* lpvTop);
extern BOOL AddVector(D3DVECTOR* lpvResult, D3DVECTOR* lpvA, D3DVECTOR* lpvB);
extern BOOL SubtractVector(D3DVECTOR* lpvResult, D3DVECTOR* lpvA, D3DVECTOR* lpvB);
extern BOOL CartesianToSpherical(FLOAT* pR, FLOAT* pTHETA, FLOAT* pPHI, D3DVECTOR* lpv);
extern BOOL CartesianToAzimuthElevation(FLOAT* pR, FLOAT* pAZIMUTH, FLOAT* pELEVATION, D3DVECTOR* lpv);
extern void GetRotations(FLOAT* pX, FLOAT* pY, FLOAT* pZ, D3DVECTOR* lpvHeadTop, D3DVECTOR* lpvHeadFront);
extern BOOL GetHeadRelativeVector(D3DVECTOR* lpvHRP, D3DVECTOR* lpvObjectPos, D3DVECTOR* lpvHeadPos, FLOAT x, FLOAT y, FLOAT z);
extern BOOL GetTimeDelay(FLOAT* pdelay, D3DVECTOR* lpvPosition, FLOAT scale);
extern BOOL GetRelativeVelocity(FLOAT* lpVelRel, D3DVECTOR* lpvObjPos, D3DVECTOR* lpvObjVel, D3DVECTOR* lpvHeadPos, D3DVECTOR* lpvHeadVel);
extern BOOL GetDopplerShift(FLOAT* lpFreqDoppler, FLOAT FreqOrig, FLOAT VelRel);

// from our special c-runtime code
extern double _stdcall pow2(double);
extern double _stdcall fylog2x(double, double);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __VECTOR_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vector.c ===
//--------------------------------------------------------------------------;
//
//  File: vector.c
//
//  Copyright (c) 1995-1997 Microsoft Corporation.  All Rights Reserved.
//
//  Abstract:
//
//	All the vector goop
//
//  History:
//	02/07/96    DannyMi started it off
//	02/13/96    DannyMi it actually works
//
//--------------------------------------------------------------------------;

#include <math.h>
#include "dsoundi.h"

#undef DPF
#define DPF

// table lookup for sin to 1 degree accuracy
//
static FLOAT QSIN1[91] = {
0.000000f, 0.017452f, 0.034899f, 0.052336f, 0.069756f, 0.087156f, 0.104528f,
0.121869f, 0.139173f, 0.156434f, 0.173648f, 0.190809f, 0.207912f, 0.224951f,
0.241922f, 0.258819f, 0.275637f, 0.292372f, 0.309017f, 0.325568f, 0.342020f,
0.358368f, 0.374607f, 0.390731f, 0.406737f, 0.422618f, 0.438371f, 0.453990f,
0.469472f, 0.484810f, 0.500000f, 0.515038f, 0.529919f, 0.544639f, 0.559193f,
0.573576f, 0.587785f, 0.601815f, 0.615661f, 0.629320f, 0.642788f, 0.656059f,
0.669131f, 0.681998f, 0.694658f, 0.707107f, 0.719340f, 0.731354f, 0.743145f,
0.754710f, 0.766044f, 0.777146f, 0.788011f, 0.798636f, 0.809017f, 0.819152f,
0.829038f, 0.838671f, 0.848048f, 0.857167f, 0.866025f, 0.874620f, 0.882948f,
0.891007f, 0.898794f, 0.906308f, 0.913545f, 0.920505f, 0.927184f, 0.933580f,
0.939693f, 0.945519f, 0.951057f, 0.956305f, 0.961262f, 0.965926f, 0.970296f,
0.974370f, 0.978148f, 0.981627f, 0.984808f, 0.987688f, 0.990268f, 0.992546f,
0.994522f, 0.996195f, 0.997564f, 0.998630f, 0.999391f, 0.999848f, 1.f };

// table lookup for inverse sin from 0 to .9 in .01 steps
//
static FLOAT QASIN1[91] = {
0.000000f, 0.010000f, 0.020001f, 0.030005f, 0.040011f, 0.050021f, 0.060036f,
0.070057f, 0.080086f, 0.090122f, 0.100167f, 0.110223f, 0.120290f, 0.130369f,
0.140461f, 0.150568f, 0.160691f, 0.170830f, 0.180986f, 0.191162f, 0.201358f,
0.211575f, 0.221814f, 0.232078f, 0.242366f, 0.252680f, 0.263022f, 0.273393f,
0.283794f, 0.294227f, 0.304693f, 0.315193f, 0.325729f, 0.336304f, 0.346917f,
0.357571f, 0.368268f, 0.379009f, 0.389796f, 0.400632f, 0.411517f, 0.422454f,
0.433445f, 0.444493f, 0.455599f, 0.466765f, 0.477995f, 0.489291f, 0.500655f,
0.512090f, 0.523599f, 0.535185f, 0.546851f, 0.558601f, 0.570437f, 0.582364f,
0.594386f, 0.606506f, 0.618729f, 0.631059f, 0.643501f, 0.656061f, 0.668743f,
0.681553f, 0.694498f, 0.707584f, 0.720819f, 0.734209f, 0.747763f, 0.761489f,
0.775397f, 0.789498f, 0.803802f, 0.818322f, 0.833070f, 0.848062f, 0.863313f,
0.878841f, 0.894666f, 0.910809f, 0.927295f, 0.944152f, 0.961411f, 0.979108f,
0.997283f, 1.015985f, 1.035270f, 1.055202f, 1.075862f, 1.097345f, 1.119770f };

// table lookup for inverse sin from .9 to 1 in .001 steps
//
static FLOAT QASIN2[101] = {
1.119770f, 1.122069f, 1.124380f, 1.126702f, 1.129035f, 1.131380f, 1.133736f,
1.136105f, 1.138485f, 1.140878f, 1.143284f, 1.145702f, 1.148134f, 1.150578f,
1.153036f, 1.155508f, 1.157994f, 1.160493f, 1.163008f, 1.165537f, 1.168080f,
1.170640f, 1.173215f, 1.175805f, 1.178412f, 1.181036f, 1.183676f, 1.186333f,
1.189008f, 1.191701f, 1.194413f, 1.197143f, 1.199892f, 1.202661f, 1.205450f,
1.208259f, 1.211089f, 1.213941f, 1.216815f, 1.219711f, 1.222630f, 1.225573f,
1.228541f, 1.231533f, 1.234551f, 1.237595f, 1.240666f, 1.243765f, 1.246892f,
1.250049f, 1.253236f, 1.256454f, 1.259705f, 1.262988f, 1.266306f, 1.269660f,
1.273050f, 1.276478f, 1.279945f, 1.283452f, 1.287002f, 1.290596f, 1.294235f,
1.297921f, 1.301657f, 1.305443f, 1.309284f, 1.313180f, 1.317135f, 1.321151f,
1.325231f, 1.329379f, 1.333597f, 1.337891f, 1.342264f, 1.346721f, 1.351267f,
1.355907f, 1.360648f, 1.365497f, 1.370461f, 1.375550f, 1.380774f, 1.386143f,
1.391672f, 1.397374f, 1.403268f, 1.409376f, 1.415722f, 1.422336f, 1.429257f,
1.436531f, 1.444221f, 1.452406f, 1.461197f, 1.470755f, 1.481324f, 1.493317f,
1.507540f, 1.526071f, 1.570796f };

#if 0
// table lookup for inverse cos from 0 to .1 in .001 steps (not used)
//
static FLOAT QACOS1[101] = {
1.570796, 1.569796, 1.568796, 1.567796, 1.566796, 1.565796, 1.564796, 1.563796,
1.562796, 1.561796, 1.560796, 1.559796, 1.558796, 1.557796, 1.556796, 1.555796,
1.554796, 1.553796, 1.552795, 1.551795, 1.550795, 1.549795, 1.548795, 1.547794,
1.546794, 1.545794, 1.544793, 1.543793, 1.542793, 1.541792, 1.540792, 1.539791,
1.538791, 1.537790, 1.536790, 1.535789, 1.534789, 1.533788, 1.532787, 1.531786,
1.530786, 1.529785, 1.528784, 1.527783, 1.526782, 1.525781, 1.524780, 1.523779,
1.522778, 1.521777, 1.520775, 1.519774, 1.518773, 1.517771, 1.516770, 1.515769,
1.514767, 1.513765, 1.512764, 1.511762, 1.510760, 1.509758, 1.508757, 1.507755,
1.506753, 1.505750, 1.504748, 1.503746, 1.502744, 1.501741, 1.500739, 1.499737,
1.498734, 1.497731, 1.496729, 1.495726, 1.494723, 1.493720, 1.492717, 1.491714,
1.490711, 1.489707, 1.488704, 1.487701, 1.486697, 1.485694, 1.484690, 1.483686,
1.482682, 1.481678, 1.480674, 1.479670, 1.478666, 1.477662, 1.476657, 1.475653,
1.474648, 1.473644, 1.472639, 1.471634, 1.470629 };

// table lookup for inverse cos from .1 to 1 in .01 steps (not used)
//
static FLOAT QACOS2[91] = {
1.470629, 1.460573, 1.450506, 1.440427, 1.430335, 1.420228, 1.410106, 1.399967,
1.389810, 1.379634, 1.369438, 1.359221, 1.348982, 1.338719, 1.328430, 1.318116,
1.307774, 1.297403, 1.287002, 1.276569, 1.266104, 1.255603, 1.245067, 1.234493,
1.223879, 1.213225, 1.202528, 1.191787, 1.181000, 1.170165, 1.159279, 1.148342,
1.137351, 1.126304, 1.115198, 1.104031, 1.092801, 1.081506, 1.070142, 1.058707,
1.047198, 1.035612, 1.023945, 1.012196, 1.000359, 0.988432, 0.976411, 0.964290,
0.952068, 0.939737, 0.927295, 0.914736, 0.902054, 0.889243, 0.876298, 0.863212,
0.849978, 0.836588, 0.823034, 0.809307, 0.795399, 0.781298, 0.766994, 0.752474,
0.737726, 0.722734, 0.707483, 0.691955, 0.676131, 0.659987, 0.643501, 0.626644,
0.609385, 0.591689, 0.573513, 0.554811, 0.535527, 0.515594, 0.494934, 0.473451,
0.451027, 0.427512, 0.402716, 0.376383, 0.348166, 0.317560, 0.283794, 0.245566,
0.200335, 0.141539, 0 };
#endif


// Table lookup for sin to one degree accuracy.
//
FLOAT _inline QSIN(FLOAT a)
{
    while (a < 0)
	a += PI_TIMES_TWO;
    while (a > PI_TIMES_TWO)
	a -= PI_TIMES_TWO;

    if (a > THREE_PI_OVER_TWO)
        return -1 * QSIN1[(int)((PI_OVER_TWO - (a - THREE_PI_OVER_TWO)) *
								C180_OVER_PI)];
    else if (a > PI)
        return -1 * QSIN1[(int)((a - PI) * C180_OVER_PI)];
    else if (a > PI_OVER_TWO)
        return QSIN1[(int)((PI_OVER_TWO - (a - PI_OVER_TWO)) * C180_OVER_PI)];
    else
        return QSIN1[(int)(a * C180_OVER_PI)];
}


// Table lookup for cos to one degree accuracy.
//
FLOAT _inline QCOS(FLOAT a)
{
    while (a < 0)
	a += PI_TIMES_TWO;
    while (a > PI_TIMES_TWO)
	a -= PI_TIMES_TWO;

    if (a > THREE_PI_OVER_TWO)
        return QSIN1[90 -
		(int)((PI_OVER_TWO - (a - THREE_PI_OVER_TWO)) * C180_OVER_PI)];
    else if (a > PI)
        return -1 * QSIN1[90 - (int)((a - PI) * C180_OVER_PI)];
    else if (a > PI_OVER_TWO)
        return -1 * QSIN1[90 - (int)((PI_OVER_TWO - (a - PI_OVER_TWO)) *
								C180_OVER_PI)];
    else
        return QSIN1[90 - (int)(a * C180_OVER_PI)];
}


// Table lookup for inverse sin to one degree accuracy.
// This is trickier than sin because to do it with one table requires 6,600
// entries.  So we use one table for 0-.9, and another table for .9-1
//
FLOAT _inline QASIN(FLOAT a)
{
    FLOAT r;
    BOOL fNeg = a < 0;

    if (fNeg)
	a *= -1.f;
 
    if (a > 1.f)
	// well, at least we won't crash
	return PI_OVER_TWO;

    if (a < .9f)
	r = QASIN1[(int)((a + .005) * 100)];
    else
	r = QASIN2[(int)((a - .9 + .0005) * 1000)];

    return fNeg ? r * -1.f : r;
}


#if 0
// Table lookup for inverse cos to one degree accuracy.
// This is trickier than cos because to do it with one table requires 6,600
// entries.  So we use one table for 0-.1, and another table for .1-1
//
FLOAT _inline QACOS(FLOAT a)
{
    FLOAT r;
    BOOL fNeg = a < 0;

    if (fNeg)
	a *= -1.;
 
    if (a > 1)
	// well, at least we won't crash
	return 0;

    if (a < .1)
	r = QACOS1[(int)((a + .0005) * 1000)];
    else
	r = QACOS2[(int)((a - .1 + .005) * 100)];

    return fNeg ? (PI - r) : r;
}
#endif


BOOL IsEmptyVector(D3DVECTOR* lpv)
{
    return (lpv == NULL) || (lpv->x == 0 && lpv->y == 0 && lpv->z == 0);
}


BOOL IsEqualVector(D3DVECTOR* lpv1, D3DVECTOR* lpv2)
{
    if (lpv1 == NULL || lpv2 == NULL)
	return FALSE;

    return lpv1->x == lpv2->x && lpv1->y == lpv2->y &&
							lpv1->z == lpv2->z;
}

void CheckVector(D3DVECTOR* lpv) 
{
    double                      dMagnitude;
    double                      dTemp;
    double                      x;
    double                      y;
    double                      z;

    DPF_ENTER();

    x = lpv->x; 
    y = lpv->y; 
    z = lpv->z; 
   
    dTemp = x*x + y*y + z*z;
                 
    dMagnitude = sqrt(dTemp);

    if (dMagnitude > FLT_MAX) 
    {
        dTemp = 0.99*FLT_MAX / dMagnitude;
        lpv->x *= (FLOAT)dTemp;
        lpv->y *= (FLOAT)dTemp;
        lpv->z *= (FLOAT)dTemp;
    }

    DPF_LEAVE_VOID();
}

FLOAT MagnitudeVector(D3DVECTOR* lpv)
{
    double                      dMagnitude;
    double                      dTemp;
    double                      x;
    double                      y;
    double                      z;

    if (lpv == NULL)
	return 0.f;

    // !!! costly

    x = lpv->x; 
    y = lpv->y; 
    z = lpv->z; 
   
    dTemp = x*x + y*y + z*z;
                 
    dMagnitude = sqrt(dTemp);

    return (FLOAT)dMagnitude;
}


BOOL NormalizeVector(D3DVECTOR* lpv)
{
    FLOAT l;

    if (lpv == NULL)
	return FALSE;

    l = MagnitudeVector(lpv);
    if (l == 0)
	return FALSE;
    else {
        l = 1 / l;	// divide is slow
	lpv->x *= l;
	lpv->y *= l;
	lpv->z *= l;
    }
	
    return TRUE;
}


FLOAT DotProduct(D3DVECTOR* lpv1, D3DVECTOR* lpv2)
{
    if (lpv1 == NULL || lpv2 == NULL)
	return 0.f;

    return lpv1->x*lpv2->x + lpv1->y*lpv2->y + lpv1->z*lpv2->z;
}


BOOL CrossProduct(D3DVECTOR* lpvX, D3DVECTOR* lpv1, D3DVECTOR* lpv2)
{
    if (lpvX == NULL || lpv1 == NULL || lpv2 == NULL)
	return FALSE;

    lpvX->x = lpv1->y * lpv2->z - lpv1->z * lpv2->y;
    lpvX->y = lpv1->z * lpv2->x - lpv1->x * lpv2->z;
    lpvX->z = lpv1->x * lpv2->y - lpv1->y * lpv2->x;

    return !(lpvX->x == 0 && lpvX->y == 0 && lpvX->z == 0);
}


// This function will make Top orthogonal to Front, by taking an orthogonal
// vector to both, and taking an orthogonal vector to that new vector and
// front.  Then top will be normalized
//
BOOL MakeOrthogonal(D3DVECTOR* lpvFront, D3DVECTOR* lpvTop)
{
    D3DVECTOR vN;

    // !!! What if they are already orthogonal

    if (CrossProduct(&vN, lpvFront, lpvTop) == FALSE)
	return FALSE;

    // don't do this backwards, or top will end up flipped
    if (CrossProduct(lpvTop, &vN, lpvFront) == FALSE)
	return FALSE;

    // Stop co-efficients from going bezerk.  We need r eventually, anyway,
    // so we'll do it now and assume top is always normalized
    NormalizeVector(lpvTop);

    return TRUE;
}


// computes A + B
//
BOOL AddVector(D3DVECTOR* lpvResult, D3DVECTOR* lpvA, D3DVECTOR* lpvB)
{
    if (lpvResult == NULL || lpvA == NULL || lpvB == NULL)
	return FALSE;

    lpvResult->x = lpvA->x + lpvB->x;
    lpvResult->y = lpvA->y + lpvB->y;
    lpvResult->z = lpvA->z + lpvB->z;

    return TRUE;
}


// computes A - B
//
BOOL SubtractVector(D3DVECTOR* lpvResult, D3DVECTOR* lpvA, D3DVECTOR* lpvB)
{
    if (lpvResult == NULL || lpvA == NULL || lpvB == NULL)
	return FALSE;

    lpvResult->x = lpvA->x - lpvB->x;
    lpvResult->y = lpvA->y - lpvB->y;
    lpvResult->z = lpvA->z - lpvB->z;

    return TRUE;
}


// translate a vector to spherical co-ordinates:
// r = sqrt(x^2 + y^2 + z^2)
// theta = atan(y/x) (0 <= theta < 2*pi)
// phi = asin(z/r) (-pi/2 <= phi <= pi/2)
//
BOOL CartesianToSpherical
(
    FLOAT *pR, 
    FLOAT *pTHETA, 
    FLOAT *pPHI, 
    D3DVECTOR* lpv
)
{
    if (lpv == NULL)
	return FALSE;

    if (lpv->x == 0 && lpv->y == 0 && lpv->z == 0) {
	*pR = 0.f; *pTHETA = 0.f; *pPHI = 0.f;
	return TRUE;
    }

    // !!! costly
    *pR = MagnitudeVector(lpv);

    // FLOATing point quirk?
    if (*pR == 0) {
	*pR = 0.f; *pTHETA = 0.f; *pPHI = 0.f;
	return TRUE;
    }

    *pPHI = QASIN(lpv->z / *pR);

    if (lpv->x == 0) {
	*pTHETA = (lpv->y >= 0) ? PI_OVER_TWO : NEG_PI_OVER_TWO;
    } else {
	// !!! costly
        *pTHETA = (FLOAT)atan2(lpv->y, lpv->x);
    }
    if (*pTHETA < 0)
	*pTHETA += PI_TIMES_TWO;

    DPF(3, "Cartesian: %d.%d, %d.%d, %d.%d   becomes",
	(int)lpv->x, (int)((lpv->x * 100) - (int)lpv->x * 100),
	(int)lpv->y, (int)((lpv->y * 100) - (int)lpv->y * 100),
	(int)lpv->z, (int)((lpv->z * 100) - (int)lpv->z * 100));
    DPF(3, "Spherical:  r=%d.%d  theta=%d.%d  phi=%d.%d",
	(int)*pR, (int)((*pR * 100) - (int)*pR * 100),
	(int)*pTHETA, (int)((*pTHETA * 100) - (int)*pTHETA * 100),
	(int)*pPHI, (int)((*pPHI * 100) - (int)*pPHI * 100));

    return TRUE;
}

// translate a vector to spherical co-ordinates:
// r = sqrt(x^2 + y^2 + z^2)
// theta = atan(x/z) (0 <= theta < 2*pi)
// phi = asin(y/r) (-pi/2 <= phi <= pi/2)
//
BOOL CartesianToAzimuthElevation
(
    FLOAT *pR, 
    FLOAT *pAZIMUTH, 
    FLOAT *pELEVATION, 
    D3DVECTOR* lpv
)
{
    if (lpv == NULL)
	return FALSE;

    if (lpv->x == 0 && lpv->y == 0 && lpv->z == 0) {
	*pR = 0.f; *pAZIMUTH = 0.f; *pELEVATION = 0.f;
	return TRUE;
    }

    // !!! costly
    *pR = MagnitudeVector(lpv);

    // FLOATing point quirk?
    if (*pR == 0) {
	*pR = 0.f; *pAZIMUTH = 0.f; *pELEVATION = 0.f;
	return TRUE;
    }

    *pELEVATION = QASIN(lpv->y / *pR);

    if (lpv->z != 0) {
	// !!! costly
        *pAZIMUTH = (FLOAT)atan2(lpv->x, lpv->z);
    } else {
        if(lpv->x > 0.0f)
        {
            *pAZIMUTH = PI_OVER_TWO;
        }
        else if(lpv->x < 0.0f)
        {
            *pAZIMUTH = NEG_PI_OVER_TWO;
        }
        else
        {
            *pAZIMUTH = 0.0f;
        }

    }

//   if (*pAZIMUTH < 0)
//	*pAZIMUTH += PI_TIMES_TWO;

    DPF(3, "Cartesian: %d.%d, %d.%d, %d.%d   becomes",
	(int)lpv->x, (int)((lpv->x * 100) - (int)lpv->x * 100),
	(int)lpv->y, (int)((lpv->y * 100) - (int)lpv->y * 100),
	(int)lpv->z, (int)((lpv->z * 100) - (int)lpv->z * 100));
    DPF(3, "Spherical:  r=%d.%d  theta=%d.%d  phi=%d.%d",
	(int)*pR, (int)((*pR * 100) - (int)*pR * 100),
	(int)*pAZIMUTH, (int)((*pAZIMUTH * 100) - (int)*pAZIMUTH * 100),
	(int)*pELEVATION, (int)((*pELEVATION * 100) - (int)*pELEVATION * 100));

    return TRUE;
}


// rotate cartesian vector around z-axis by rot radians
//
void ZRotate(D3DVECTOR* lpvOut, D3DVECTOR* lpvIn, FLOAT rot)
{
    FLOAT sin_rot, cos_rot;

    sin_rot = QSIN(rot);
    cos_rot = QCOS(rot);

    lpvOut->x = lpvIn->x * cos_rot - lpvIn->y * sin_rot;
    lpvOut->y = lpvIn->x * sin_rot + lpvIn->y * cos_rot;
    lpvOut->z = lpvIn->z;

    DPF(3, "ZRotate %d.%d, %d.%d, %d.%d  by  %d.%d rad",
	(int)lpvIn->x, (int)((lpvIn->x * 100) - (int)lpvIn->x * 100),
	(int)lpvIn->y, (int)((lpvIn->y * 100) - (int)lpvIn->y * 100),
	(int)lpvIn->z, (int)((lpvIn->z * 100) - (int)lpvIn->z * 100),
	(int)rot, (int)((rot * 100) - (int)rot * 100));
    DPF(4, "becomes %d.%d, %d.%d, %d.%d",
	(int)lpvOut->x, (int)((lpvOut->x * 100) - (int)lpvOut->x * 100),
	(int)lpvOut->y, (int)((lpvOut->y * 100) - (int)lpvOut->y * 100),
	(int)lpvOut->z, (int)((lpvOut->z * 100) - (int)lpvOut->z * 100));
}


// rotate cartesian vector around x-axis by rot radians
//
void XRotate(D3DVECTOR* lpvOut, D3DVECTOR* lpvIn, FLOAT rot)
{
    FLOAT sin_rot, cos_rot;

    sin_rot = QSIN(rot);
    cos_rot = QCOS(rot);

    lpvOut->x = lpvIn->x;
    lpvOut->y = lpvIn->y * cos_rot - lpvIn->z * sin_rot;
    lpvOut->z = lpvIn->y * sin_rot + lpvIn->z * cos_rot;

    DPF(3, "XRotate %d.%d, %d.%d, %d.%d  by  %d.%d rad",
	(int)lpvIn->x, (int)((lpvIn->x * 100) - (int)lpvIn->x * 100),
	(int)lpvIn->y, (int)((lpvIn->y * 100) - (int)lpvIn->y * 100),
	(int)lpvIn->z, (int)((lpvIn->z * 100) - (int)lpvIn->z * 100),
	(int)rot, (int)((rot * 100) - (int)rot * 100));
    DPF(4, "becomes %d.%d, %d.%d, %d.%d",
	(int)lpvOut->x, (int)((lpvOut->x * 100) - (int)lpvOut->x * 100),
	(int)lpvOut->y, (int)((lpvOut->y * 100) - (int)lpvOut->y * 100),
	(int)lpvOut->z, (int)((lpvOut->z * 100) - (int)lpvOut->z * 100));
}


// rotate cartesian vector around y-axis by rot radians
//
void YRotate(D3DVECTOR* lpvOut, D3DVECTOR* lpvIn, FLOAT rot)
{
    FLOAT sin_rot, cos_rot;

    sin_rot = QSIN(rot);
    cos_rot = QCOS(rot);

    lpvOut->x = lpvIn->x * cos_rot + lpvIn->z * sin_rot;
    lpvOut->y = lpvIn->y;
    lpvOut->z = lpvIn->z * cos_rot - lpvIn->x * sin_rot;

    DPF(3, "YRotate %d.%d, %d.%d, %d.%d  by  %d.%d rad",
	(int)lpvIn->x, (int)((lpvIn->x * 100) - (int)lpvIn->x * 100),
	(int)lpvIn->y, (int)((lpvIn->y * 100) - (int)lpvIn->y * 100),
	(int)lpvIn->z, (int)((lpvIn->z * 100) - (int)lpvIn->z * 100),
	(int)rot, (int)((rot * 100) - (int)rot * 100));
    DPF(4, "becomes %d.%d, %d.%d, %d.%d",
	(int)lpvOut->x, (int)((lpvOut->x * 100) - (int)lpvOut->x * 100),
	(int)lpvOut->y, (int)((lpvOut->y * 100) - (int)lpvOut->y * 100),
	(int)lpvOut->z, (int)((lpvOut->z * 100) - (int)lpvOut->z * 100));
}


// given the head's front and top orientation vectors, calculate the angles
// of rotation that represents around the x, y and z axes.
// This is all relative to an orientation where you are looking along the
// + z-axis, the x-axis goes + to your right, and your head is going up
// the + y-axis (left-handed co-ordinate system)
// 
// We do this by basically undoing the orientation we are given, and turning
// it back into the identity orientation.  We start with figuring out the 
// z-rot that will stand the top vector upright (theta=PI/2).  This is done
// by taking the current top theta and subtracting PI/2, because a positive
// z-rotation is defined as increasing the value of theta, (eg. if the top's
// theta is currently PI, that represents a positive PI/2 z-rotation)
// That number represents how we rotate the identity orientation to get
// our given orientation, so we use the opposite rotation to undo that
// roatation and end up with new front and top vectors with the top vector
// standing upright (theta=PI/2)
// We don't have to rotate the TOP vector by the opposite rotation (only the
// front vector) because a z-rotation doesn't change the phi value of a vector,
// and that's the only thing we need to know next about the top vector, so
// why waste time rotating it?
// So, next, we want to fix the phi value of the top vector to point it
// straight up into the sky (not just with theta=PI/2).  This is an x-rotation.
// Since we know the top's theta is already PI/2 (from the last rotation),
// this tells us that the y-value of the top vector is positive, which means
// that phi values of the top vector get bigger as you apply a positive
// x-rotation.  So the x-rotation value is just the phi of the original top
// vector (still the same value since doing a z-rot didn't affect the phi).
// (eg. if phi =-PI/2, that means the identity top vector had a -PI/2
// x-rot applied to it to become like the given orientation.
// So now we rotate the top and front vectors by the opposite of this
// rotation to undo them and end up with top and front vectors where the top
// vector points straight up like the identity top vector, and only the
// front is not where it belongs. Only, again, we don't actually rotate 
// the top vector by the opposite, only the front vector, because we don't
// care about it anymore, we know it's going to end up pointing straight up
// (we designed it this way).  So the only thing left is to get the front
// vector pointing forward like it's supposed to, which requires a y-rot.
// The tricky part is that if x<0, increasing phi of the front vector is
// a positive y-rot, and if x>=0, increasing phi of the front vector is a
// negative y-rot
// Now, in general, if I apply an x-rot, a y-rot, and z-rot in that order
// to my listener's orientation, I need to apply the opposite z-rot,
// opposite y-rot, and opposite x-rot on the object in space to get the
// head relative position (do everything backwards).
// Well, since we did a z-rot, x-rot, and y-rot in that order to undo
// the orientation to make it the identity vector, that's the same as
// doing y, x, then z to the idenity vector to get the new orientation.
// So what I'm trying to say is, when it comes time to move the object
// in space, we'll do it by doing opposite-z, opposite-x, then opposite-y
// (in that order).
//
void GetRotations(FLOAT *pX, FLOAT *pY, FLOAT *pZ, D3DVECTOR* lpvFront, D3DVECTOR* lpvTop)
{
    FLOAT r, theta, phi;
    D3DVECTOR vFront1, vFront2;

    CartesianToSpherical(&r, &theta, &phi, lpvTop);

    // First, find what z-rotation would move the top vector from the identity
    // value of PI/2 to whatever it is now.
    // Bigger theta means positive z-rotation
    *pZ = theta - PI_OVER_TWO;

    // Now put the orientation vectors through the opposite rotation to
    // undo it and basically stand the top vector back up.  Don't bother
    // to "undo" the top vector, since we only care about the new phi, and
    // phi won't change by z-rotating it
    ZRotate(&vFront1, lpvFront, *pZ * -1);

    // Now find what x-rotation would move the top vector from sticking
    // straight up (phi=0) to whatever it was given
    // Bigger phi is in the direction of positive rotation for y>0 (which it is,
    // as constructed by our last rotation)
    *pX = phi;

    // Now put the orientation vectors through the opposite x-rotation to
    // undo it and basically stand the top vector straight up.  Don't bother
    // to "undo" the top vector, since we don't care about it anymore.  The
    // only thing left to do after this is fix the front vector.
    XRotate(&vFront2, &vFront1, *pX * -1);

    // Now find out what y-rot our front vector has been put through.
    // our identity orientation is front phi = pi/2 (left handed co-ord system)
    // I'm counting on top being normalized
    // phi is in the direction of negative rotation if x is positive, and
    // positive rotation if x is negative.
    if (vFront2.x >= 0)
        *pY = PI_OVER_TWO - QASIN(vFront2.z);
    else
        *pY = QASIN(vFront2.z) - PI_OVER_TWO;
}


// Given an object's position in 3D cartesian coordinates, and the listener's
// position, and rotation angles showing the orientation of the listener's
// head, calculate the vector describing the object's position relative to
// the listener.
// We are assuming that the head was rotating first in y, then x, then z,
// so to move the object, we will put it through the opposite z, then x,
// then y rotations.
// !!! Pass in sin and cos of each angle so it isn't recomputed each time? 
// (This is called with the same angles every time a position changes until
// the orientation changes)
//
BOOL GetHeadRelativeVector
(
    D3DVECTOR* lpvHRP, 
    D3DVECTOR* lpvObjectPos, 
    D3DVECTOR* lpvHeadPos, 
    FLOAT x, 
    FLOAT y, 
    FLOAT z
)
{
    D3DVECTOR vObj1, vObj2;

    if (lpvHRP == NULL || lpvObjectPos == NULL || lpvHeadPos == NULL)
	return FALSE;

    // get the head relative position assuming a listener looking forward
    // and standing right side up
    SubtractVector(lpvHRP, lpvObjectPos, lpvHeadPos);

    // The object occupies the same point as the listener.  We're done!
    if (lpvHRP->x == 0 && lpvHRP->y == 0 && lpvHRP->z == 0)
	return TRUE;

    // Head was rotated first in y, then x, then z.  So put the object through
    // the opposite rotations in the opposite order.
    ZRotate(&vObj1, lpvHRP, z * -1);
    XRotate(&vObj2, &vObj1, x * -1);
    YRotate(lpvHRP, &vObj2, y * -1);

    return TRUE;
}


// How much later, in seconds, will the sound reach the right ear than the left?
// Negative means it will reach the right ear first.
// Assumes the object position is head relative.
// 'scale' is how many metres per unit of the vector
//
BOOL GetTimeDelay(FLOAT *pdelay, D3DVECTOR* lpvPosition, FLOAT scale)
{
    FLOAT rL, rR;
    double x, y, z;
    double dTemp;
    double dTemp2;
    FLOAT fMagnitude;

    if (lpvPosition == NULL)
	return FALSE;

    fMagnitude = MagnitudeVector( lpvPosition );

    dTemp = (double)fMagnitude;
    dTemp *= (double)scale; 
    dTemp *= 1000.0;

    if ( dTemp < FLT_MAX ) 
    {
        dTemp2 = scale * 1000.0;
        // scale everything in millimetres
        x = (double)lpvPosition->x * dTemp2;
        y = (double)lpvPosition->y * dTemp2;
        z = (double)lpvPosition->z * dTemp2;
    }
    else
    {
        dTemp2 = FLT_MAX / dTemp;
        // scale everything in millimetres
        x = (double)lpvPosition->x * dTemp2;
        y = (double)lpvPosition->y * dTemp2;
        z = (double)lpvPosition->z * dTemp2;
    }

    // assume the listener's head is 12cm in diameter, with the left ear at 
    // x = -60mm and the right ear at x = 60mm
    // !!! costly
    rL = (FLOAT)sqrt((x + 60) * (x + 60) + y * y + z * z);
    rR = (FLOAT)sqrt((x - 60) * (x - 60) + y * y + z * z);
    *pdelay = (rR - rL) * (1 / SPEEDOFSOUND);
    
    DPF(3, "The time delay between ears is %dms", (int)(*pdelay * 1000));

    return TRUE;
}


// Get the relative velocity of two objects (positive meaning your moving
// towards each other).
// Basically, you want the component of the difference of the velocity
// vectors on the difference of the position vectors,
// or   |v| cos(theta)   which is just   (p . v) / |p|
// Positive means that the object is moving away from you
//
BOOL GetRelativeVelocity(
    FLOAT *lpVelRel, 
    D3DVECTOR* lpvObjPos, 
    D3DVECTOR* lpvObjVel, 
    D3DVECTOR* lpvHeadPos, 
    D3DVECTOR* lpvHeadVel)
{
    D3DVECTOR vPos, vVel;

    if (lpVelRel == NULL)
	return FALSE;

    SubtractVector(&vPos, lpvObjPos, lpvHeadPos);
    SubtractVector(&vVel, lpvObjVel, lpvHeadVel);
    if (IsEmptyVector(&vPos))
        *lpVelRel = 0.f;
    else
        *lpVelRel = DotProduct(&vPos, &vVel) / MagnitudeVector(&vPos);

    return TRUE;
}


// Get the Doppler shift.  We need the original frequency, and the relative
// velocity between you and the object (positive meaning that the object is
// moving away from you) and we'll give you the perceived frequency
// How, you ask?   f(perceived) = f(original) * v(sound) / (v(sound) + v(rel))
// The velocity vector should be in milliseconds per second.
BOOL GetDopplerShift(FLOAT *lpFreqDoppler, FLOAT FreqOrig, FLOAT VelRel)
{
    if (lpFreqDoppler == NULL)
	return FALSE;

    // !!! Don't ever let the frequency shift be by more than a factor of 2?
    if (VelRel > SPEEDOFSOUND / 2.f)
	VelRel = SPEEDOFSOUND / 2.f;
    if (VelRel < SPEEDOFSOUND / -2.f)
	VelRel = SPEEDOFSOUND / -2.f;

    *lpFreqDoppler = FreqOrig * SPEEDOFSOUND / (SPEEDOFSOUND + VelRel);

    DPF(3, "Doppler change %dHz by %dmm/sec to %dHz", (int)FreqOrig,
				(int)VelRel, (int)*lpFreqDoppler);

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\verify.cpp ===
//--------------------------------------------------------------------------;
//
//  File: Verify.cpp
//
//  Copyright (c) 1997 Microsoft Corporation.  All Rights Reserved.
//
//  Abstract: Functions to verify driver certification.
//
//
//  Contents:
//      dl_WinVerifyTrust()
//      dl_CryptCATAdminReleaseContext()
//      dl_CryptCATAdminReleaseCatalogContext()
//      dl_CryptCATCatalogInfoFromContext()
//      dl_CryptCATAdminEnumCatalogFromHash()
//      dl_CryptCATAdminAcquireContext()
//      dl_CryptCATAdminCalcHashFromFileHandle()
//      dl_SetupScanFileQueue()
//      dl_SetupDiOpenDeviceInfo()
//      dl_SetupDiSetSelectedDriver()
//      dl_SetupDiGetDeviceRegistryProperty()
//      dl_SetupDiGetDeviceInstallParams()
//      dl_SetupDiSetDeviceInstallParams()
//      dl_SetupDiGetDeviceInstanceId()
//      dl_SetupDiGetClassDevs()
//      dl_SetupDiCallClassInstaller()
//      dl_SetupCloseFileQueue()
//      dl_SetupOpenFileQueue()
//      dl_SetupDiBuildDriverInfoList()
//      dl_SetupDiOpenDevRegKey()
//      dl_SetupDiEnumDeviceInfo()
//      dl_SetupDiCreateDeviceInfoList()
//      dl_SetupDiDestroyDeviceInfoList()
//      CertifyDynaLoad()
//      CertifyDynaFree()
//      TrustCheckDriverFileNoCatalog()
//      TrustCheckDriverFile()
//      enumFile()
//      GetDriverCertificationStatus()
//
//  History:
//      10/29/97    Fwong       Created.
//      02/19/98    Fwong       Added 'AlsoInstall' support.
//
//--------------------------------------------------------------------------;

#define  USE_SP_DRVINFO_DATA_V1 1
#include "dsoundi.h"
#include <wincrypt.h>
#include <wintrust.h>
#include <setupapi.h>
#include <mscat.h>
#include <regstr.h>
#include <softpub.h>
#include "verify.h"

//==========================================================================;
//
//                               Types...
//
//==========================================================================;

#define FILELISTSIZE    4096

typedef struct INFFILELIST_tag
{
    UINT    uCount;     //  Number of files.
    UINT    uMaxLen;    //  Length of longest string (in characters).
    UINT    uOffset;    //  Offset into szFile field to write next string.
    UINT    cTotal;     //  Size (in characters) of all the strings.
    UINT    cSize;      //  Size (in characters) of the szFile buffer.
    LPTSTR  pszFile;    //  List of zero terminated strings.
} INFFILELIST;
typedef INFFILELIST *PINFFILELIST;

typedef LONG (WINAPI * PFN00)(HWND ,GUID*, LPVOID);
typedef BOOL (WINAPI * PFN01)(HCATADMIN ,DWORD);
#ifdef WIN95
typedef BOOL (WINAPI * PFN02)(HCATADMIN, CATALOG_INFO*, DWORD);
typedef BOOL (WINAPI * PFN03)(CATALOG_INFO*, CATALOG_INFO*, DWORD);
typedef CATALOG_INFO* (WINAPI * PFN04)(HCATADMIN, BYTE*, DWORD, DWORD, CATALOG_INFO **);
#else  // WIN95
typedef BOOL (WINAPI * PFN02)(HCATADMIN, HCATINFO, DWORD);
typedef BOOL (WINAPI * PFN03)(HCATINFO, CATALOG_INFO*, DWORD);
typedef HCATINFO (WINAPI * PFN04)(HCATADMIN, BYTE*, DWORD, DWORD, HCATINFO*);
#endif // WIN95
typedef BOOL (WINAPI * PFN05)(HCATADMIN*, const GUID*, DWORD);
typedef BOOL (WINAPI * PFN06)(HANDLE, DWORD*, BYTE*, DWORD);
typedef BOOL (WINAPI * PFN07)(HSPFILEQ, DWORD, HWND, PSP_FILE_CALLBACK, PVOID, PDWORD);
typedef BOOL (WINAPI * PFN08)(HDEVINFO, PCTSTR, HWND, DWORD, PSP_DEVINFO_DATA);
typedef BOOL (WINAPI * PFN09)(HDEVINFO, PSP_DEVINFO_DATA, PSP_DRVINFO_DATA);
typedef BOOL (WINAPI * PFN10)(HDEVINFO, PSP_DEVINFO_DATA, DWORD, PDWORD, PBYTE, DWORD, PDWORD);
typedef BOOL (WINAPI * PFN11)(HDEVINFO, PSP_DEVINFO_DATA, PSP_DEVINSTALL_PARAMS);
typedef BOOL (WINAPI * PFN12)(HDEVINFO, PSP_DEVINFO_DATA, PSP_DEVINSTALL_PARAMS);
typedef BOOL (WINAPI * PFN13)(HDEVINFO, PSP_DEVINFO_DATA, PTSTR, DWORD, PDWORD);
typedef HDEVINFO (WINAPI * PFN14)(LPGUID, PCTSTR, HWND, DWORD);
typedef HINF (WINAPI * PFN15)(PCTSTR, PCTSTR, DWORD, PUINT);
typedef BOOL (WINAPI * PFN16)(HINF, HINF, HSPFILEQ, PCTSTR, PCTSTR, UINT);
typedef BOOL (WINAPI * PFN17)(DI_FUNCTION, HDEVINFO, PSP_DEVINFO_DATA);
typedef BOOL (WINAPI * PFN18)(HSPFILEQ);
typedef HSPFILEQ (WINAPI * PFN19)(VOID);
typedef BOOL (WINAPI * PFN20)(HDEVINFO, PSP_DEVINFO_DATA, DWORD);
typedef HKEY (WINAPI * PFN21)(HDEVINFO, PSP_DEVINFO_DATA, DWORD, DWORD, DWORD, REGSAM);
typedef BOOL (WINAPI * PFN22)(HDEVINFO, DWORD, PSP_DEVINFO_DATA);
typedef HDEVINFO (WINAPI * PFN23)(LPGUID, HWND);
typedef BOOL (WINAPI * PFN24)(HDEVINFO);
typedef VOID (WINAPI * PFN25)(HINF);
//  Added for NT 5.0
typedef BOOL (WINAPI * PFN26)(HDEVINFO, PSP_DEVINFO_DATA, GUID*, DWORD, PSP_DEVICE_INTERFACE_DATA);
typedef BOOL (WINAPI * PFN27)(HDEVINFO, PSP_DEVICE_INTERFACE_DATA, PSP_DEVICE_INTERFACE_DETAIL_DATA, DWORD, PDWORD, PSP_DEVINFO_DATA);
typedef BOOL (WINAPI * PFN28)(PCCERT_CONTEXT);

typedef struct CERTIFYDYNALOADINFO_tag
{
    HMODULE     hWinTrust;
    HMODULE     hMSCat;
    HMODULE     hSetupAPI;
    HMODULE     hCrypt32;
    PFN00       pfnWinVerifyTrust;
    PFN01       pfnCryptCATAdminReleaseContext;
    PFN02       pfnCryptCATAdminReleaseCatalogContext;
    PFN03       pfnCryptCATCatalogInfoFromContext;
    PFN04       pfnCryptCATAdminEnumCatalogFromHash;
    PFN05       pfnCryptCATAdminAcquireContext;
    PFN06       pfnCryptCATAdminCalcHashFromFileHandle;
    PFN07       pfnSetupScanFileQueue;
    PFN08       pfnSetupDiOpenDeviceInfo;
    PFN09       pfnSetupDiSetSelectedDriver;
    PFN10       pfnSetupDiGetDeviceRegistryProperty;
    PFN11       pfnSetupDiGetDeviceInstallParams;
    PFN12       pfnSetupDiSetDeviceInstallParams;
    PFN13       pfnSetupDiGetDeviceInstanceId;
    PFN14       pfnSetupDiGetClassDevs;
    PFN15       pfnSetupOpenInfFile;
    PFN16       pfnSetupInstallFilesFromInfSection;
    PFN17       pfnSetupDiCallClassInstaller;
    PFN18       pfnSetupCloseFileQueue;
    PFN19       pfnSetupOpenFileQueue;
    PFN20       pfnSetupDiBuildDriverInfoList;
    PFN21       pfnSetupDiOpenDevRegKey;
    PFN22       pfnSetupDiEnumDeviceInfo;
    PFN23       pfnSetupDiCreateDeviceInfoList;
    PFN24       pfnSetupDiDestroyDeviceInfoList;
    PFN25       pfnSetupCloseInfFile;
    PFN26       pfnSetupDiEnumDeviceInterfaces;
    PFN27       pfnSetupDiGetDeviceInterfaceDetail;
    PFN28       pfnCertFreeCertificateContext;
} CERTIFYDYNALOADINFO;

//==========================================================================;
//
//                              Globals...
//
//==========================================================================;

static CERTIFYDYNALOADINFO cdli;

//==========================================================================;
//
//                       Dyna-Loaded functions...
//
//==========================================================================;

//--------------------------------------------------------------------------;
//
//  LONG dl_WinVerifyTrust
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HWND hWnd: Same as API.
//
//      GUID *pgActionID: Same as API.
//
//      LPVOID pWVTData: Same as API.
//
//  Return (LONG): Same as API.
//
//  History:
//      12/08/97    Fwong   Doing dynalinks.
//
//--------------------------------------------------------------------------;

LONG dl_WinVerifyTrust
(
    HWND    hWnd,
    GUID    *pgActionID,
    LPVOID  pWVTData
)
{
    if(NULL == cdli.pfnWinVerifyTrust)
    {
        return ERROR_INVALID_PARAMETER;
    }

    return (cdli.pfnWinVerifyTrust)(hWnd, pgActionID, pWVTData);

} // dl_WinVerifyTrust()


//--------------------------------------------------------------------------;
//
//  BOOL dl_CryptCATAdminReleaseContext
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HCATADMIN hCatAdmin: Same as API.
//
//      DWORD dwFlags: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_CryptCATAdminReleaseContext
(
    HCATADMIN   hCatAdmin,
    DWORD       dwFlags
)
{
    if(NULL == cdli.pfnCryptCATAdminReleaseContext)
    {
        return FALSE;
    }

    return (cdli.pfnCryptCATAdminReleaseContext)(hCatAdmin, dwFlags);

} // dl_CryptCATAdminReleaseContext()

#ifdef WIN95

//--------------------------------------------------------------------------;
//
//  BOOL dl_CryptCATAdminReleaseCatalogContext
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HCATADMIN hCatAdmin: Same as API.
//
//      CATALOG_INFO *pCatContext: Same as API.
//
//      DWORD dwFlags: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_CryptCATAdminReleaseCatalogContext
(
    HCATADMIN       hCatAdmin,
    CATALOG_INFO *pCatContext,
    DWORD           dwFlags
)
{
    if(NULL == cdli.pfnCryptCATAdminReleaseCatalogContext)
    {
        return FALSE;
    }

    return (cdli.pfnCryptCATAdminReleaseCatalogContext)(hCatAdmin, pCatContext, dwFlags);

} // dl_CryptCATAdminReleaseCatalogContext()


//--------------------------------------------------------------------------;
//
//  BOOL dl_CryptCATCatalogInfoFromContext
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      CATALOG_INFO *pCatContext: Same as API.
//
//      CATALOG_INFO *psCatInfo: Same as API.
//
//      DWORD dwFlags: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_CryptCATCatalogInfoFromContext
(
    CATALOG_INFO *pCatContext,
    CATALOG_INFO    *psCatInfo,
    DWORD           dwFlags
)
{
    if(NULL == cdli.pfnCryptCATCatalogInfoFromContext)
    {
        return FALSE;
    }

    return (cdli.pfnCryptCATCatalogInfoFromContext)(
        pCatContext,
        psCatInfo,
        dwFlags);

} // dl_CryptCATCatalogInfoFromContext()


//--------------------------------------------------------------------------;
//
//  CATALOG_INFO* dl_CryptCATAdminEnumCatalogFromHash
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HCATADMIN hCatAdmin: Same as API.
//
//      BYTE *pbHash: Same as API.
//
//      DWORD cbHash: Same as API.
//
//      DWORD dwFlags: Same as API.
//
//      CATALOG_INFO **ppPrevContext: Same as API.
//
//  Return (CATALOG_INFO): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

CATALOG_INFO * dl_CryptCATAdminEnumCatalogFromHash
(
    HCATADMIN       hCatAdmin,
    BYTE            *pbHash,
    DWORD           cbHash,
    DWORD           dwFlags,
    CATALOG_INFO **ppPrevContext
)
{
    if(NULL == cdli.pfnCryptCATAdminEnumCatalogFromHash)
    {
        return NULL;
    }

    return (cdli.pfnCryptCATAdminEnumCatalogFromHash)(
        hCatAdmin,
        pbHash,
        cbHash,
        dwFlags,
        ppPrevContext);

} // dl_CryptCATAdminEnumCatalogFromHash()

#else // WIN95

//--------------------------------------------------------------------------;
//
//  BOOL dl_CryptCATAdminReleaseCatalogContext
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HCATADMIN hCatAdmin: Same as API.
//
//      HCATINFO hCatInfo: Same as API.
//
//      DWORD dwFlags: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_CryptCATAdminReleaseCatalogContext
(
    HCATADMIN       hCatAdmin,
    HCATINFO        hCatInfo,
    DWORD           dwFlags
)
{
    if(NULL == cdli.pfnCryptCATAdminReleaseCatalogContext)
    {
        return FALSE;
    }

    return (cdli.pfnCryptCATAdminReleaseCatalogContext)(hCatAdmin, hCatInfo, dwFlags);

} // dl_CryptCATAdminReleaseCatalogContext()


//--------------------------------------------------------------------------;
//
//  BOOL dl_CryptCATCatalogInfoFromContext
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HCATINFO hCatInfo: Same as API.
//
//      CATALOG_INFO *psCatInfo: Same as API.
//
//      DWORD dwFlags: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_CryptCATCatalogInfoFromContext
(
    HCATINFO        hCatInfo,
    CATALOG_INFO    *psCatInfo,
    DWORD           dwFlags
)
{
    if(NULL == cdli.pfnCryptCATCatalogInfoFromContext)
    {
        return FALSE;
    }

    return (cdli.pfnCryptCATCatalogInfoFromContext)(
        hCatInfo,
        psCatInfo,
        dwFlags);

} // dl_CryptCATCatalogInfoFromContext()


//--------------------------------------------------------------------------;
//
//  HCATINFO dl_CryptCATAdminEnumCatalogFromHash
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HCATADMIN hCatAdmin: Same as API.
//
//      BYTE *pbHash: Same as API.
//
//      DWORD cbHash: Same as API.
//
//      DWORD dwFlags: Same as API.
//
//      HCATINFO *phCatInfo: Same as API.
//
//  Return (HCATINFO): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

HCATINFO dl_CryptCATAdminEnumCatalogFromHash
(
    HCATADMIN       hCatAdmin,
    BYTE            *pbHash,
    DWORD           cbHash,
    DWORD           dwFlags,
    HCATINFO        *phCatInfo
)
{
    if(NULL == cdli.pfnCryptCATAdminEnumCatalogFromHash)
    {
        return NULL;
    }

    return (cdli.pfnCryptCATAdminEnumCatalogFromHash)(
        hCatAdmin,
        pbHash,
        cbHash,
        dwFlags,
        phCatInfo);

} // dl_CryptCATAdminEnumCatalogFromHash()

#endif  //  WIN95
                         
//--------------------------------------------------------------------------;
//
//  BOOL dl_CryptCATAdminAcquireContext
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HCATADMIN *phCatAdmin: Same as API.
//
//      const GUID *pgSubsystem: Same as API.
//
//      DWORD dwFlags: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_CryptCATAdminAcquireContext
(
    HCATADMIN   *phCatAdmin,
    const GUID  *pgSubsystem,
    DWORD       dwFlags
)
{
    if(NULL == cdli.pfnCryptCATAdminAcquireContext)
    {
        return FALSE;
    }

    return (cdli.pfnCryptCATAdminAcquireContext)(
        phCatAdmin,
        pgSubsystem,
        dwFlags);

} // dl_CryptCATAdminAcquireContext()


//--------------------------------------------------------------------------;
//
//  BOOL dl_CryptCATAdminCalcHashFromFileHandle
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HANDLE hFile: Same as API.
//
//      DWORD *pcbHash: Same as API.
//
//      BYTE *pbHash: Same as API.
//
//      DWORD dwFlags: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_CryptCATAdminCalcHashFromFileHandle
(
    HANDLE  hFile,
    DWORD   *pcbHash,
    BYTE    *pbHash,
    DWORD   dwFlags
)
{
    if(NULL == cdli.pfnCryptCATAdminCalcHashFromFileHandle)
    {
        return FALSE;
    }

    return (cdli.pfnCryptCATAdminCalcHashFromFileHandle)(
        hFile,
        pcbHash,
        pbHash,
        dwFlags);

} // dl_CryptCATAdminCalcHashFromFileHandle()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupScanFileQueue
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HSPFILEQ FileQueue: Same as API.
//
//      DWORD Flags: Same as API.
//
//      HWND Window: Same as API.
//
//      PSP_FILE_CALLBACK CallbackRoutine: Same as API.
//
//      PVOID CallbackContext: Same as API.
//
//      PDWORD Result: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupScanFileQueue
(
    HSPFILEQ            FileQueue,
    DWORD               Flags,
    HWND                Window,
    PSP_FILE_CALLBACK   CallbackRoutine,
    PVOID               CallbackContext,
    PDWORD              Result
)
{
    if(NULL == cdli.pfnSetupScanFileQueue)
    {
        return FALSE;
    }

    return (cdli.pfnSetupScanFileQueue)(
        FileQueue,
        Flags,
        Window,
        CallbackRoutine,
        CallbackContext,
        Result);

} // dl_SetupScanFileQueue()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiOpenDeviceInfo
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      LPTSTR DeviceInstanceId: Same as API.
//
//      HWND hWndParent: Same as API.
//
//      DWORD OpenFlags: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/22/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiOpenDeviceInfo
(
    HDEVINFO            DeviceInfoSet,
    LPTSTR              DeviceInstanceId,
    HWND                hWndParent,
    DWORD               OpenFlags,
    PSP_DEVINFO_DATA    DeviceInfoData
)
{
    if(NULL == cdli.pfnSetupDiOpenDeviceInfo)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiOpenDeviceInfo)(
        DeviceInfoSet,
        DeviceInstanceId,
        hWndParent,
        OpenFlags,
        DeviceInfoData);

} // dl_SetupDiOpenDeviceInfo()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiSetSelectedDriver
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//      PSP_DRVINFO_DATA DriverInfoData: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/22/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiSetSelectedDriver
(
    HDEVINFO            DeviceInfoSet,
    PSP_DEVINFO_DATA    DeviceInfoData,
    PSP_DRVINFO_DATA    DriverInfoData
)
{
    if(NULL == cdli.pfnSetupDiSetSelectedDriver)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiSetSelectedDriver)(
        DeviceInfoSet,
        DeviceInfoData,
        DriverInfoData);

} // dl_SetupDiSetSelectedDriver()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiGetDeviceRegistryProperty
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//      DWORD Property: Same as API.
//
//      PDWORD PropertyRegDataType: Same as API.
//
//      PBYTE PropertyBuffer: Same as API.
//
//      DWORD PropertyBufferSize: Same as API.
//
//      PDWORD RequiredSize: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/22/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiGetDeviceRegistryProperty
(
    HDEVINFO            DeviceInfoSet,
    PSP_DEVINFO_DATA    DeviceInfoData,
    DWORD               Property,
    PDWORD              PropertyRegDataType,
    PBYTE               PropertyBuffer,
    DWORD               PropertyBufferSize,
    PDWORD              RequiredSize
)
{
    if(NULL == cdli.pfnSetupDiGetDeviceRegistryProperty)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiGetDeviceRegistryProperty)(
        DeviceInfoSet,
        DeviceInfoData,
        Property,
        PropertyRegDataType,
        PropertyBuffer,
        PropertyBufferSize,
        RequiredSize);

} // dl_SetupDiGetDeviceRegistryProperty()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiGetDeviceInstallParams
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//      PSP_DEVINSTALL_PARAMS DeviceInstallParams: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/22/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiGetDeviceInstallParams
(
    HDEVINFO                DeviceInfoSet,
    PSP_DEVINFO_DATA        DeviceInfoData,
    PSP_DEVINSTALL_PARAMS   DeviceInstallParams
)
{
    if(NULL == cdli.pfnSetupDiGetDeviceInstallParams)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiGetDeviceInstallParams)(
        DeviceInfoSet,
        DeviceInfoData,
        DeviceInstallParams);

} // dl_SetupDiGetDeviceInstallParams()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiSetDeviceInstallParams
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//      PSP_DEVINSTALL_PARAMS DeviceInstallParams: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/22/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiSetDeviceInstallParams
(
    HDEVINFO                DeviceInfoSet,
    PSP_DEVINFO_DATA        DeviceInfoData,
    PSP_DEVINSTALL_PARAMS   DeviceInstallParams
)
{
    if(NULL == cdli.pfnSetupDiSetDeviceInstallParams)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiSetDeviceInstallParams)(
        DeviceInfoSet,
        DeviceInfoData,
        DeviceInstallParams);

} // dl_SetupDiSetDeviceInstallParams()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiGetDeviceInstanceId
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//      PSTR DeviceInstanceId: Same as API.
//
//      DWORD DeviceInstanceIdSize: Same as API.
//
//      PDWORD RequiredSize: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/22/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiGetDeviceInstanceId
(
    HDEVINFO            DeviceInfoSet,
    PSP_DEVINFO_DATA    DeviceInfoData,
    PTSTR               DeviceInstanceId,
    DWORD               DeviceInstanceIdSize,
    PDWORD              RequiredSize
)
{
    if(NULL == cdli.pfnSetupDiGetDeviceInstanceId)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiGetDeviceInstanceId)(
        DeviceInfoSet,
        DeviceInfoData,
        DeviceInstanceId,
        DeviceInstanceIdSize,
        RequiredSize);

} // dl_SetupDiGetDeviceInstanceId()


//--------------------------------------------------------------------------;
//
//  HDEVINFO dl_SetupDiGetClassDevs
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      LPGUID ClassGuid: Same as API.
//
//      LPTSTR Enumerator: Same as API.
//
//      HWND hwndParent: Same as API.
//
//      DWORD Flags: Same as API.
//
//  Return (HDEVINFO): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

HDEVINFO dl_SetupDiGetClassDevs
(
    LPGUID  ClassGuid,
    LPTSTR Enumerator,
    HWND    hwndParent,
    DWORD   Flags
)
{
    if(NULL == cdli.pfnSetupDiGetClassDevs)
    {
        return INVALID_HANDLE_VALUE;
    }

    return (cdli.pfnSetupDiGetClassDevs)(
        ClassGuid,
        Enumerator,
        hwndParent,
        Flags);

} // dl_SetupDiGetClassDevs()


//--------------------------------------------------------------------------;
//
//  HINF dl_SetupOpenInfFile
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      PCSTR pszFileName:  Same as API.
//
//      PCSTR pszInfClass:  Same as API.
//
//      DWORD InfStyle:  Same as API.
//
//      PUINT ErrorLine:  Same as API.
//
//  Return (HINF):  Same as API.
//
//  History:
//      02/19/98    Fwong       Adding check for 'AlsoInstall'
//
//--------------------------------------------------------------------------;

HINF dl_SetupOpenInfFile
(
    PCTSTR  pszFileName,
    PCTSTR  pszInfClass,
    DWORD   InfStyle,
    PUINT   ErrorLine
)
{
    if(NULL == cdli.pfnSetupOpenInfFile)
    {
        return INVALID_HANDLE_VALUE;
    }

    return (cdli.pfnSetupOpenInfFile)(
        pszFileName,
        pszInfClass,
        InfStyle,
        ErrorLine);
} // dl_SetupOpenInfFile()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupInstallFilesFromInfSection
//
//  Description:
//      Dynalink version of the API.
//
//  Arguments:
//      HINF InfHandle:  Same as API.
//
//      HINF LayoutInfHandle:  Same as API.
//
//      HSPFILEQ FileQueue:  Same as API.
//
//      PCSTR SectionName:  Same as API.
//
//      PCSTR SourceRootPath:  Same as API.
//
//      UINT CopyFlags:  Same as API.
//
//  Return (BOOL):  Same as API.
//
//  History:
//      02/19/98    Fwong       Adding check for 'AlsoInstall'
//
//--------------------------------------------------------------------------;

BOOL dl_SetupInstallFilesFromInfSection
(
    HINF        InfHandle,
    HINF        LayoutInfHandle,
    HSPFILEQ    FileQueue,
    PCTSTR      SectionName,
    PCTSTR      SourceRootPath,
    UINT        CopyFlags
)
{
    if(NULL == cdli.pfnSetupInstallFilesFromInfSection)
    {
        return FALSE;
    }

    return (cdli.pfnSetupInstallFilesFromInfSection)(
        InfHandle,
        LayoutInfHandle,
        FileQueue,
        SectionName,
        SourceRootPath,
        CopyFlags);

} // dl_SetupInstallFilesFromInfSection()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiCallClassInstaller
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      DI_FUNCTION InstallFunction: Same as API.
//
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/22/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiCallClassInstaller
(
    DI_FUNCTION         InstallFunction,
    HDEVINFO            DeviceInfoSet,
    PSP_DEVINFO_DATA    DeviceInfoData
)
{
    if(NULL == cdli.pfnSetupDiCallClassInstaller)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiCallClassInstaller)(
        InstallFunction,
        DeviceInfoSet,
        DeviceInfoData);

} // dl_SetupDiCallClassInstaller()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupCloseFileQueue
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HSPFILEQ QueueHandle: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupCloseFileQueue
(
    HSPFILEQ    QueueHandle
)
{
    if(NULL == cdli.pfnSetupCloseFileQueue)
    {
        return FALSE;
    }

    return (BOOL)(cdli.pfnSetupCloseFileQueue)((HSPFILEQ)QueueHandle);
} // dl_SetupCloseFileQueue()


//--------------------------------------------------------------------------;
//
//  HSPFILEQ dl_SetupOpenFileQueue
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      None.
//
//  Return (HSPFILEQ): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

HSPFILEQ dl_SetupOpenFileQueue
(
    VOID
)
{
    if(NULL == cdli.pfnSetupOpenFileQueue)
    {
        return INVALID_HANDLE_VALUE;
    }

    return (cdli.pfnSetupOpenFileQueue)();

} // dl_SetupOpenFileQueue()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiBuildDriverInfoList
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//      DWORD DriverType: Same as API.
//
//  Return (BOOL):
//
//  History:
//      12/22/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiBuildDriverInfoList
(
    HDEVINFO            DeviceInfoSet,
    PSP_DEVINFO_DATA    DeviceInfoData,
    DWORD               DriverType
)
{
    if(NULL == cdli.pfnSetupDiBuildDriverInfoList)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiBuildDriverInfoList)(
        DeviceInfoSet,
        DeviceInfoData,
        DriverType);

} // dl_SetupDiBuildDriverInfoList()


//--------------------------------------------------------------------------;
//
//  HKEY dl_SetupDiOpenDevRegKey
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//      DWORD Scope: Same as API.
//
//      DWORD HwProfile: Same as API.
//
//      DWORD KeyType: Same as API.
//
//      REGSAM samDesired: Same as API.
//
//  Return (HKEY): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

HKEY dl_SetupDiOpenDevRegKey
(
    HDEVINFO         DeviceInfoSet,
    PSP_DEVINFO_DATA DeviceInfoData,
    DWORD            Scope,
    DWORD            HwProfile,
    DWORD            KeyType,
    REGSAM           samDesired
)
{
    if(NULL == cdli.pfnSetupDiOpenDevRegKey)
    {
        return (HKEY)INVALID_HANDLE_VALUE;
    }

    return (cdli.pfnSetupDiOpenDevRegKey)(
        DeviceInfoSet,
        DeviceInfoData,
        Scope,
        HwProfile,
        KeyType,
        samDesired);

} // dl_SetupDiOpenDevRegKey()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiEnumDeviceInfo
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      DWORD MemberIndex: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/08/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiEnumDeviceInfo
(
    HDEVINFO            DeviceInfoSet,
    DWORD               MemberIndex,
    PSP_DEVINFO_DATA    DeviceInfoData
)
{
    if(NULL == cdli.pfnSetupDiEnumDeviceInfo)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiEnumDeviceInfo)(
        DeviceInfoSet,
        MemberIndex,
        DeviceInfoData);

} // dl_SetupDiEnumDeviceInfo()


//--------------------------------------------------------------------------;
//
//  HDEVINFO dl_SetupDiCreateDeviceInfoList
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      LPGUID ClassGuid: Same as API.
//
//      HWND hWndParent: Same as API.
//
//  Return (HDEVINFO): Same as API.
//
//  History:
//      12/22/97    Fwong
//
//--------------------------------------------------------------------------;

HDEVINFO dl_SetupDiCreateDeviceInfoList
(
    LPGUID  ClassGuid,
    HWND    hWndParent
)
{
    if(NULL == cdli.pfnSetupDiCreateDeviceInfoList)
    {
        return INVALID_HANDLE_VALUE;
    }

    return (cdli.pfnSetupDiCreateDeviceInfoList)(ClassGuid, hWndParent);

} // dl_SetupDiCreateDeviceInfoList()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiDestroyDeviceInfoList
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      IN HDEVINFO DeviceInfoSet: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/22/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiDestroyDeviceInfoList
(
    IN HDEVINFO DeviceInfoSet
)
{
    if(NULL == cdli.pfnSetupDiDestroyDeviceInfoList)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiDestroyDeviceInfoList)(DeviceInfoSet);
} // dl_SetupDiDestroyDeviceInfoList()


//--------------------------------------------------------------------------;
//
//  VOID dl_SetupCloseInfFile
//
//  Description:
//      Dynalink version of API.
//
//  Arguments:
//      HINF InfHandle:  Same as API.
//
//  Return (VOID): none.
//
//  History:
//      02/19/98    Fwong       Adding check for 'AlsoInstall'
//
//--------------------------------------------------------------------------;

VOID dl_SetupCloseInfFile
(
    HINF    InfHandle
)
{
    if(NULL == cdli.pfnSetupCloseInfFile)
    {
        return;
    }

    (cdli.pfnSetupCloseInfFile)(InfHandle);

} // dl_SetupCloseInfFile()


//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiEnumDeviceInterfaces
//
//  Description:
//      Dynalink version of the API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//      CONST GUID *InterfaceClassGuid: Same as API.
//
//      DWORD MemberIndex: Same as API.
//
//      PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      12/06/98    Fwong       Adding support for NT 5.
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiEnumDeviceInterfaces
(
    HDEVINFO                    DeviceInfoSet,
    PSP_DEVINFO_DATA            DeviceInfoData,
    GUID                       *InterfaceClassGuid,
    DWORD                       MemberIndex,
    PSP_DEVICE_INTERFACE_DATA   DeviceInterfaceData
)
{
    if(NULL == cdli.pfnSetupDiEnumDeviceInterfaces)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiEnumDeviceInterfaces)(
        DeviceInfoSet,
        DeviceInfoData,
        InterfaceClassGuid,
        MemberIndex,
        DeviceInterfaceData);

} // dl_SetupDiEnumDeviceInterfaces()

//--------------------------------------------------------------------------;
//
//  BOOL dl_SetupDiGetDeviceInterfaceDetail
//
//  Description:
//      Dynalink version of the API.
//
//  Arguments:
//      HDEVINFO DeviceInfoSet: Same as API.
//
//      PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData: Same as API.
//
//      PSP_DEVICE_INTERFACE_DETAIL_DATA DeviceInterfaceDetailData:
//          Same as API.
//
//      DWORD DeviceInterfaceDetailDataSize: Same as API.
//
//      PDWORD RequiredSize: Same as API.
//
//      PSP_DEVINFO_DATA DeviceInfoData: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      09/14/99    Fwong       Actually this was done much earlier.
//
//--------------------------------------------------------------------------;

BOOL dl_SetupDiGetDeviceInterfaceDetail
(
    HDEVINFO                            DeviceInfoSet,
    PSP_DEVICE_INTERFACE_DATA           DeviceInterfaceData,
    PSP_DEVICE_INTERFACE_DETAIL_DATA    DeviceInterfaceDetailData,
    DWORD                               DeviceInterfaceDetailDataSize,
    PDWORD                              RequiredSize,
    PSP_DEVINFO_DATA                    DeviceInfoData
)
{
    if(NULL == cdli.pfnSetupDiGetDeviceInterfaceDetail)
    {
        return FALSE;
    }

    return (cdli.pfnSetupDiGetDeviceInterfaceDetail)(
        DeviceInfoSet,
        DeviceInterfaceData,
        DeviceInterfaceDetailData,
        DeviceInterfaceDetailDataSize,
        RequiredSize,
        DeviceInfoData);

} // dl_SetupDiGetDeviceInterfaceDetail()

//--------------------------------------------------------------------------;
//
//  BOOL dl_CertFreeCertificateContext
//
//  Description:
//      Dynalink version of the API.
//
//  Arguments:
//      PCCERT_CONTEXT pCertContext: Same as API.
//
//  Return (BOOL): Same as API.
//
//  History:
//      09/14/99    Fwong       Adding API to fix memory leak.
//
//--------------------------------------------------------------------------;

BOOL dl_CertFreeCertificateContext
(
    PCCERT_CONTEXT  pCertContext
)
{
    if (NULL == cdli.pfnCertFreeCertificateContext)
    {
        return FALSE;
    }

    return (cdli.pfnCertFreeCertificateContext)(pCertContext);

} // dl_CertFreeCertificateContext()


//--------------------------------------------------------------------------;
//
//  BOOL CertifyDynaLoad
//
//  Description:
//      Dynalink the API's needed for certification.
//
//  Arguments:
//      None.
//
//  Return (BOOL): TRUE if successful, FALSE otherwise.
//
//  History:
//      12/08/97    Fwong       Dynalinking 
//      09/15/99    Fwong       Updated to fix memory leak
//
//--------------------------------------------------------------------------;

BOOL CertifyDynaLoad
(
    void
)
{
    TCHAR   szSystemDir[MAX_PATH];
    LPTSTR  pszWrite;

    if(0 == GetSystemDirectory(szSystemDir, MAX_PATH))
    {
        //  Couldn't get the Window system dir?!
        return FALSE;
    }

    lstrcat(szSystemDir, TEXT("\\"));
    pszWrite = &(szSystemDir[lstrlen(szSystemDir)]);

    //
    //  Doing WinTrust API's...
    //

    lstrcpy(pszWrite, TEXT("WINTRUST.DLL"));

    cdli.hWinTrust = LoadLibrary(szSystemDir);

    if(NULL == cdli.hWinTrust)
    {
        //  Couldn't load wintrust.dll
        return FALSE;
    }

    cdli.pfnWinVerifyTrust = (PFN00)GetProcAddress(
        cdli.hWinTrust,
        "WinVerifyTrust");

    if(NULL == cdli.pfnWinVerifyTrust)
    {
        //  Couldn't get proc address.
        FreeLibrary(cdli.hWinTrust);
        return FALSE;
    }

    //
    //  Doing MSCAT32 API's..
    //

    lstrcpy(pszWrite, TEXT("MSCAT32.DLL"));

    cdli.hMSCat = LoadLibrary(szSystemDir);

    if(NULL == cdli.hMSCat)
    {
        //  Couldn't load mscat32.dll

        FreeLibrary(cdli.hWinTrust);
        return FALSE;
    }

    cdli.pfnCryptCATAdminReleaseContext = (PFN01)GetProcAddress(
        cdli.hMSCat,
        "CryptCATAdminReleaseContext");

    cdli.pfnCryptCATAdminReleaseCatalogContext = (PFN02)GetProcAddress(
        cdli.hMSCat,
        "CryptCATAdminReleaseCatalogContext");

    cdli.pfnCryptCATCatalogInfoFromContext = (PFN03)GetProcAddress(
        cdli.hMSCat,
        "CryptCATCatalogInfoFromContext");

    cdli.pfnCryptCATAdminEnumCatalogFromHash = (PFN04)GetProcAddress(
        cdli.hMSCat,
        "CryptCATAdminEnumCatalogFromHash");

    cdli.pfnCryptCATAdminAcquireContext = (PFN05)GetProcAddress(
        cdli.hMSCat,
        "CryptCATAdminAcquireContext");

    cdli.pfnCryptCATAdminCalcHashFromFileHandle = (PFN06)GetProcAddress(
        cdli.hMSCat,
        "CryptCATAdminCalcHashFromFileHandle");

    if ((NULL == cdli.pfnCryptCATAdminReleaseContext) ||
        (NULL == cdli.pfnCryptCATAdminReleaseCatalogContext) ||
        (NULL == cdli.pfnCryptCATCatalogInfoFromContext) ||
        (NULL == cdli.pfnCryptCATAdminEnumCatalogFromHash) ||
        (NULL == cdli.pfnCryptCATAdminCalcHashFromFileHandle) ||
        (NULL == cdli.pfnCryptCATAdminAcquireContext))
    {
        //  Couldn't get proc address.

        FreeLibrary(cdli.hMSCat);
        FreeLibrary(cdli.hWinTrust);
        return FALSE;
    }

    //
    //  Doing SetupAPI API's..
    //

    lstrcpy(pszWrite, TEXT("SETUPAPI.DLL"));

    cdli.hSetupAPI = LoadLibrary(szSystemDir);

    if(NULL == cdli.hSetupAPI)
    {
        //  Couldn't load SetupAPI.dll

        FreeLibrary(cdli.hMSCat);
        FreeLibrary(cdli.hWinTrust);
        return FALSE;
    }

#ifndef UNICODE

    //
    //  Dynaloading the ANSI API's...
    //

    cdli.pfnSetupScanFileQueue = (PFN07)GetProcAddress(
        cdli.hSetupAPI,
        "SetupScanFileQueueA");

    cdli.pfnSetupDiOpenDeviceInfo = (PFN08)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiOpenDeviceInfoA");

    cdli.pfnSetupDiSetSelectedDriver = (PFN09)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiSetSelectedDriverA");

    cdli.pfnSetupDiGetDeviceRegistryProperty = (PFN10)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiGetDeviceRegistryPropertyA");

    cdli.pfnSetupDiGetDeviceInstallParams = (PFN11)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiGetDeviceInstallParamsA");

    cdli.pfnSetupDiSetDeviceInstallParams = (PFN12)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiSetDeviceInstallParamsA");

    cdli.pfnSetupDiGetDeviceInstanceId = (PFN13)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiGetDeviceInstanceIdA");

    cdli.pfnSetupDiGetClassDevs = (PFN14)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiGetClassDevsA");

    cdli.pfnSetupOpenInfFile = (PFN15)GetProcAddress(
        cdli.hSetupAPI,
        "SetupOpenInfFileA");

    cdli.pfnSetupInstallFilesFromInfSection = (PFN16)GetProcAddress(
        cdli.hSetupAPI,
        "SetupInstallFilesFromInfSectionA");

    cdli.pfnSetupDiGetDeviceInterfaceDetail = (PFN27)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiGetDeviceInterfaceDetailA");

#else // UNICODE

    //
    //  Dynaloading the UNICODE API's...
    //

    cdli.pfnSetupScanFileQueue = (PFN07)GetProcAddress(
        cdli.hSetupAPI,
        "SetupScanFileQueueW");

    cdli.pfnSetupDiOpenDeviceInfo = (PFN08)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiOpenDeviceInfoW");

    cdli.pfnSetupDiSetSelectedDriver = (PFN09)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiSetSelectedDriverW");

    cdli.pfnSetupDiGetDeviceRegistryProperty = (PFN10)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiGetDeviceRegistryPropertyW");

    cdli.pfnSetupDiGetDeviceInstallParams = (PFN11)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiGetDeviceInstallParamsW");

    cdli.pfnSetupDiSetDeviceInstallParams = (PFN12)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiSetDeviceInstallParamsW");

    cdli.pfnSetupDiGetDeviceInstanceId = (PFN13)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiGetDeviceInstanceIdW");

    cdli.pfnSetupDiGetClassDevs = (PFN14)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiGetClassDevsW");

    cdli.pfnSetupOpenInfFile = (PFN15)GetProcAddress(
        cdli.hSetupAPI,
        "SetupOpenInfFileW");

    cdli.pfnSetupInstallFilesFromInfSection = (PFN16)GetProcAddress(
        cdli.hSetupAPI,
        "SetupInstallFilesFromInfSectionW");

    cdli.pfnSetupDiGetDeviceInterfaceDetail = (PFN27)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiGetDeviceInterfaceDetailW");

#endif // UNICODE

    cdli.pfnSetupDiCallClassInstaller = (PFN17)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiCallClassInstaller");

    cdli.pfnSetupCloseFileQueue = (PFN18)GetProcAddress(
        cdli.hSetupAPI,
        "SetupCloseFileQueue");

    cdli.pfnSetupOpenFileQueue = (PFN19)GetProcAddress(
        cdli.hSetupAPI,
        "SetupOpenFileQueue");

    cdli.pfnSetupDiBuildDriverInfoList = (PFN20)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiBuildDriverInfoList");

    cdli.pfnSetupDiOpenDevRegKey = (PFN21)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiOpenDevRegKey");

    cdli.pfnSetupDiEnumDeviceInfo = (PFN22)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiEnumDeviceInfo");

    cdli.pfnSetupDiCreateDeviceInfoList = (PFN23)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiCreateDeviceInfoList");

    cdli.pfnSetupDiDestroyDeviceInfoList = (PFN24)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiDestroyDeviceInfoList");

    cdli.pfnSetupCloseInfFile = (PFN25)GetProcAddress(
        cdli.hSetupAPI,
        "SetupCloseInfFile");

    cdli.pfnSetupDiEnumDeviceInterfaces = (PFN26)GetProcAddress(
        cdli.hSetupAPI,
        "SetupDiEnumDeviceInterfaces");

    if ((NULL == cdli.pfnSetupScanFileQueue) ||
        (NULL == cdli.pfnSetupDiOpenDeviceInfo) ||
        (NULL == cdli.pfnSetupDiSetSelectedDriver) ||
        (NULL == cdli.pfnSetupDiGetDeviceRegistryProperty) ||
        (NULL == cdli.pfnSetupDiGetDeviceInstallParams) ||
        (NULL == cdli.pfnSetupDiSetDeviceInstallParams) ||
        (NULL == cdli.pfnSetupDiGetDeviceInstanceId) ||
        (NULL == cdli.pfnSetupDiGetClassDevs) ||
        (NULL == cdli.pfnSetupOpenInfFile) ||
        (NULL == cdli.pfnSetupInstallFilesFromInfSection) ||
        (NULL == cdli.pfnSetupDiCallClassInstaller) ||
        (NULL == cdli.pfnSetupCloseFileQueue) ||
        (NULL == cdli.pfnSetupOpenFileQueue) ||
        (NULL == cdli.pfnSetupDiBuildDriverInfoList) ||
        (NULL == cdli.pfnSetupDiOpenDevRegKey) ||
        (NULL == cdli.pfnSetupDiEnumDeviceInfo) ||
        (NULL == cdli.pfnSetupDiCreateDeviceInfoList) ||
        (NULL == cdli.pfnSetupDiDestroyDeviceInfoList) ||
        (NULL == cdli.pfnSetupCloseInfFile) ||
        (NULL == cdli.pfnSetupDiEnumDeviceInterfaces) ||
        (NULL == cdli.pfnSetupDiGetDeviceInterfaceDetail))
    {
        //  Couldn't get proc address.

        FreeLibrary(cdli.hSetupAPI);
        FreeLibrary(cdli.hMSCat);
        FreeLibrary(cdli.hWinTrust);
        return FALSE;
    }

    //
    //  Doing Crypt32 API's...
    //

    lstrcpy(pszWrite, TEXT("CRYPT32.DLL"));

    cdli.hCrypt32 = LoadLibrary(szSystemDir);

    if(NULL == cdli.hCrypt32)
    {
        //  Couldn't load crypt32.dll

        return FALSE;
    }

    cdli.pfnCertFreeCertificateContext = (PFN28)GetProcAddress(
        cdli.hCrypt32,
        "CertFreeCertificateContext");

    if(NULL == cdli.pfnCertFreeCertificateContext)
    {
        //  Couldn't get proc address.

        FreeLibrary(cdli.hCrypt32);
        FreeLibrary(cdli.hSetupAPI);
        FreeLibrary(cdli.hMSCat);
        FreeLibrary(cdli.hWinTrust);
        return FALSE;
    }

    return TRUE;
} // CertifyDynaLoad()


//--------------------------------------------------------------------------;
//
//  void CertifyDynaFree
//
//  Description:
//      Frees all the dynalinked API's
//
//  Arguments:
//      None.
//
//  Return (void):
//
//  History:
//      12/08/97    Fwong       Dynalinking.
//      09/15/99    Fwong       Updated to fix memory leak
//
//--------------------------------------------------------------------------;

void CertifyDynaFree
(
    void
)
{
    if(NULL != cdli.hWinTrust)
    {
        FreeLibrary(cdli.hWinTrust);
    }

    if(NULL != cdli.hMSCat)
    {
        FreeLibrary(cdli.hMSCat);
    }

    if(NULL != cdli.hSetupAPI)
    {
        FreeLibrary(cdli.hSetupAPI);
    }

    if(NULL != cdli.hCrypt32)
    {
        FreeLibrary(cdli.hCrypt32);
    }

    ZeroMemory(&cdli, sizeof(CERTIFYDYNALOADINFO));
} // CertifyDynaFree()


//--------------------------------------------------------------------------;
//
//  BOOL TrustCheckDriverFileNoCatalog
//
//  Description:
//      Checks the driver file in question without the catalog file.
//      This is less reliable than the check with the catalog file.
//
//  Arguments:
//      WCHAR *pwszDrvFile: Driver file.
//
//  Return (BOOL):
//
//  History:
//      11/13/97    Fwong
//
//--------------------------------------------------------------------------;

BOOL WINAPI TrustCheckDriverFileNoCatalog
(
    WCHAR   *pwszDrvFile
)
{
    GUID                    gDriverSigning = DRIVER_ACTION_VERIFY;
    DRIVER_VER_INFO         dvi;
    WINTRUST_DATA           wtd;
    WINTRUST_FILE_INFO      wtfi;
    HRESULT                 hr;
    OSVERSIONINFO           OSVer;

    ZeroMemory(&wtd, sizeof(WINTRUST_DATA));
    wtd.cbStruct            = sizeof(WINTRUST_DATA);
    wtd.dwUIChoice          = WTD_UI_NONE;
    wtd.fdwRevocationChecks = WTD_REVOKE_NONE;
    wtd.dwUnionChoice       = WTD_CHOICE_FILE;
    wtd.pFile               = &wtfi;
    wtd.pPolicyCallbackData = (LPVOID)&dvi;

    ZeroMemory(&wtfi, sizeof(WINTRUST_FILE_INFO));
    wtfi.cbStruct      = sizeof(WINTRUST_FILE_INFO);
    wtfi.pcwszFilePath = pwszDrvFile;

    ZeroMemory(&dvi, sizeof(DRIVER_VER_INFO));
    dvi.cbStruct = sizeof(DRIVER_VER_INFO);
    
    ZeroMemory(&OSVer, sizeof(OSVERSIONINFO));
    OSVer.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
    
    if (GetVersionEx(&OSVer))
    {
        dvi.dwPlatform = OSVer.dwPlatformId;
        dvi.dwVersion  = OSVer.dwMajorVersion;
        
        dvi.sOSVersionLow.dwMajor  = OSVer.dwMajorVersion;
        dvi.sOSVersionLow.dwMinor  = OSVer.dwMinorVersion;
        dvi.sOSVersionHigh.dwMajor = OSVer.dwMajorVersion;
        dvi.sOSVersionHigh.dwMinor = OSVer.dwMinorVersion;
    }

    hr = dl_WinVerifyTrust(NULL, &gDriverSigning, &wtd);
    
    if (NULL != dvi.pcSignerCertContext)
    {
        dl_CertFreeCertificateContext(dvi.pcSignerCertContext);
        dvi.pcSignerCertContext = NULL;
    }

    return SUCCEEDED(hr);
} // TrustCheckDriverFileNoCatalog()


//--------------------------------------------------------------------------;
//
//  BOOL TrustCheckDriverFile
//
//  Description:
//      Checks whether the particular file name is certified.
//
//  Arguments:
//      WCHAR *pwszDrvFile:
//
//  Return (BOOL):  TRUE if driver file is certified, FALSE otherwise.
//
//  History:
//      10/17/97    PBerkman        Created.
//      11/12/97    Fwong           API removed; re-structured.
//
//--------------------------------------------------------------------------;

BOOL WINAPI TrustCheckDriverFile
(
    WCHAR   *pwszDrvFile
)
{
    GUID                    gDriverSigning = DRIVER_ACTION_VERIFY;
    HCATADMIN               hCatAdmin;
    HANDLE                  hFile;
    HRESULT                 hr;
    CATALOG_INFO            CatalogInfo;
    DWORD                   cbHash;
    BYTE                    *pHash;
#ifdef WIN95
    CATALOG_INFO         *hCatInfo, *hCatInfoPrev;
#else  // WIN95
    HCATINFO                hCatInfo, hCatInfoPrev;
#endif // WIN95
    WCHAR                   *pwszBaseName;
    WINTRUST_DATA           sWTD;
    WINTRUST_CATALOG_INFO   sWTCI;
    DRIVER_VER_INFO         VerInfo;
    OSVERSIONINFO           OSVer;

    if (!(pwszDrvFile))
    {
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    pwszBaseName = pwszDrvFile + lstrlenW(pwszDrvFile) - 1;

    while(pwszBaseName > pwszDrvFile && L'\\' != *pwszBaseName)
    {
        pwszBaseName--;
    }

    if(pwszBaseName > pwszDrvFile)
    {
        pwszBaseName++;
    }

    if (!(pwszBaseName))
    {
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    hr = E_NOTIMPL;

    if (!(dl_CryptCATAdminAcquireContext(&hCatAdmin, &gDriverSigning, 0)))
    {
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    hFile = CreateFileW(
        pwszDrvFile,
        GENERIC_READ,
        FILE_SHARE_READ,
        NULL,
        OPEN_EXISTING,
        0,
        NULL);

    if(INVALID_HANDLE_VALUE == hFile)
    {
        dl_CryptCATAdminReleaseContext(hCatAdmin, 0);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    cbHash = 100;
    pHash  = MEMALLOC_A(BYTE, cbHash);

    if(NULL == pHash)
    {
        dl_CryptCATAdminReleaseContext(hCatAdmin, 0);
        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
        return FALSE;
    }

    if (!(dl_CryptCATAdminCalcHashFromFileHandle(hFile, &cbHash, pHash, 0)))
    {
        if (ERROR_NOT_ENOUGH_MEMORY != GetLastError())
        {
            MEMFREE(pHash);
            CloseHandle(hFile);
            dl_CryptCATAdminReleaseContext(hCatAdmin, 0);
            SetLastError(ERROR_INVALID_PARAMETER);
            return FALSE;
        }

        //  The hash buffer not large enough?!

        MEMFREE(pHash);

        //  cbHash set to new value by CryptCATAdminCalcHashFromFileHandle

        pHash = MEMALLOC_A(BYTE, cbHash);

        if (NULL == pHash)
        {
            CloseHandle(hFile);
            dl_CryptCATAdminReleaseContext(hCatAdmin, 0);
            SetLastError(ERROR_INVALID_PARAMETER);
            return FALSE;
        }

        if (!(dl_CryptCATAdminCalcHashFromFileHandle(hFile, &cbHash, pHash, 0)))
        {
            //  No excuse now...

            MEMFREE(pHash);
            CloseHandle(hFile);
            dl_CryptCATAdminReleaseContext(hCatAdmin, 0);
            SetLastError(ERROR_INVALID_PARAMETER);
            return FALSE;
        }
    }

    CatalogInfo.cbStruct = sizeof(CATALOG_INFO);

    for (hCatInfoPrev = NULL;;hCatInfo = hCatInfoPrev)
    {
        hCatInfo = dl_CryptCATAdminEnumCatalogFromHash(
                hCatAdmin,
                pHash,
                cbHash,
                0,
                &hCatInfoPrev);

        if (NULL == hCatInfo)
        {
            CloseHandle(hFile);
            MEMFREE(pHash);
            dl_CryptCATAdminReleaseContext(hCatAdmin, 0);

            //  We can't seem to get a catalog context, so let's try to check
            //  the driver w/out a catalog file.

            if(TrustCheckDriverFileNoCatalog(pwszDrvFile))
            {
                return TRUE;
            }

            SetLastError(ERROR_INVALID_PARAMETER);
            return FALSE;
        }

        CatalogInfo.wszCatalogFile[0] = 0;

        if (!(dl_CryptCATCatalogInfoFromContext(hCatInfo, &CatalogInfo, 0)))
        {
            CloseHandle(hFile);
            MEMFREE(pHash);
            dl_CryptCATAdminReleaseCatalogContext(hCatAdmin, hCatInfo, 0);
            dl_CryptCATAdminReleaseContext(hCatAdmin, 0);
            SetLastError(ERROR_INVALID_PARAMETER);
            return FALSE;
        }

        ZeroMemory(&sWTD, sizeof(WINTRUST_DATA));
        sWTD.cbStruct            = sizeof(WINTRUST_DATA);
        sWTD.dwUIChoice          = WTD_UI_NONE;
        sWTD.fdwRevocationChecks = WTD_REVOKE_NONE;
        sWTD.dwUnionChoice       = WTD_CHOICE_CATALOG;
        sWTD.dwStateAction       = WTD_STATEACTION_AUTO_CACHE;
        sWTD.pPolicyCallbackData = (LPVOID)&VerInfo;
        sWTD.pCatalog            = &sWTCI;

        ZeroMemory(&VerInfo, sizeof(DRIVER_VER_INFO));
        VerInfo.cbStruct = sizeof(DRIVER_VER_INFO);

        ZeroMemory(&sWTCI, sizeof(WINTRUST_CATALOG_INFO));
        sWTCI.cbStruct              = sizeof(WINTRUST_CATALOG_INFO);
        sWTCI.pcwszCatalogFilePath  = CatalogInfo.wszCatalogFile;
        sWTCI.pcwszMemberTag        = pwszBaseName;
        sWTCI.pcwszMemberFilePath   = pwszDrvFile;
        sWTCI.hMemberFile           = hFile;

#ifndef WIN95
        sWTCI.pbCalculatedFileHash  = pHash;
        sWTCI.cbCalculatedFileHash  = cbHash;
#endif

        ZeroMemory(&OSVer, sizeof(OSVERSIONINFO));
        OSVer.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
        
        if (GetVersionEx(&OSVer))
        {
            VerInfo.dwPlatform = OSVer.dwPlatformId;
            VerInfo.dwVersion  = OSVer.dwMajorVersion;
            
            VerInfo.sOSVersionLow.dwMajor  = OSVer.dwMajorVersion;
            VerInfo.sOSVersionLow.dwMinor  = OSVer.dwMinorVersion;
            VerInfo.sOSVersionHigh.dwMajor = OSVer.dwMajorVersion;
            VerInfo.sOSVersionHigh.dwMinor = OSVer.dwMinorVersion;
        }

        hr = dl_WinVerifyTrust(NULL, &gDriverSigning, &sWTD);

        if (NULL != VerInfo.pcSignerCertContext)
        {
            dl_CertFreeCertificateContext(VerInfo.pcSignerCertContext);
            VerInfo.pcSignerCertContext = NULL;
        }

        if (hr == ERROR_SUCCESS)
        {
            CloseHandle(hFile);
            MEMFREE(pHash);
            dl_CryptCATAdminReleaseCatalogContext(hCatAdmin, hCatInfo, 0);
            dl_CryptCATAdminReleaseContext(hCatAdmin, 0);
            return TRUE;
        }

        if (NULL == hCatInfoPrev)
        {
            CloseHandle(hFile);
            MEMFREE(pHash);
            dl_CryptCATAdminReleaseCatalogContext(hCatAdmin, hCatInfo, 0);
            dl_CryptCATAdminReleaseContext(hCatAdmin, 0);
            SetLastError(ERROR_INVALID_PARAMETER);
            return FALSE;
        }
    }

    CloseHandle(hFile);
    MEMFREE(pHash);
    dl_CryptCATAdminReleaseContext(hCatAdmin, 0);
    return FALSE;
} // TrustCheckDriverFile()


//--------------------------------------------------------------------------;
//
//  UINT enumFile
//
//  Description:
//      Enum function for SetupScanFileQueue.
//
//  Arguments:
//      PVOID pContext: Defined when calling SetupScanFileQueue.
//
//      UINT uNotification: Type of notification.
//
//      UINT uParam1: Notification dependent.
//
//      UINT uParam2: Notification dependent.
//
//  Return (UINT): Returns NO_ERROR to continue enumerating.
//
//  History:
//      10/29/97    Fwong       Support function for SetupScanFileQueue
//
//--------------------------------------------------------------------------;

UINT CALLBACK enumFile
(
    PVOID    pContext,
    UINT     uNotification,
    UINT_PTR uParam1,
    UINT_PTR uParam2
)
{
    PINFFILELIST    pInfFileList = (PINFFILELIST)pContext;
    PTCHAR          pszFile = (PTCHAR)uParam1;
    UINT            uLen;

    switch (uNotification)
    {
        case SPFILENOTIFY_QUEUESCAN:
            //  Note: Adding +1 for zero terminator.

            uLen = lstrlen(pszFile) + 1;
            
            pInfFileList->uCount++;
            pInfFileList->cTotal += uLen;
            pInfFileList->uMaxLen = max(uLen, pInfFileList->uMaxLen);

            if(pInfFileList->cSize < (pInfFileList->uOffset + uLen + 1))
            {
                //  We are basically marking the buffer as "full"...

                pInfFileList->uOffset = pInfFileList->cSize;
                break;
            }

            lstrcpy(
                (LPTSTR)&(pInfFileList->pszFile[pInfFileList->uOffset]),
                pszFile);

            pInfFileList->uOffset += uLen;
            pInfFileList->pszFile[pInfFileList->uOffset] = 0;
            break;

        default:
            break;
    }

    return NO_ERROR;
} // enumFile()


//--------------------------------------------------------------------------;
//
//  void GetFullInfPath
//
//  Description:
//      Gets the full path to an .inf file.  This will be either:
//          [WINDOWS]\INF or [WINDOWS]\INF\OTHER.
//
//  WARNING!!!:  This will write over the current contents of the buffer.
//
//  Arguments:
//      LPTSTR pszInf: Pointer to the base inf file AND destination for
//                     full path.
//
//  Return (void):
//
//  History:
//      10/29/97    Fwong       Ported from AndyRaf.
//
//--------------------------------------------------------------------------;

void GetFullInfPath
(
    LPTSTR  pszInf
)
{
    HANDLE      hFile;
    TCHAR       szFullPath[MAX_PATH];
    TCHAR       szWinPath[MAX_PATH];

    if (!pszInf) return;
    if (!GetWindowsDirectory(szWinPath, NUMELMS(szWinPath))) return;

    //  Assuming the [WINDOWS]\INF directory...

    lstrcpy(szFullPath, szWinPath);
    lstrcat(szFullPath, TEXT("\\INF\\"));
    lstrcat(szFullPath, pszInf);

    //  Checking if it exists...

    hFile = CreateFile(
                szFullPath,
                0,
                FILE_SHARE_READ,
                NULL,
                OPEN_EXISTING,
                0,
                NULL);

    if (INVALID_HANDLE_VALUE == hFile)
    {
        lstrcpy(szFullPath, szWinPath);
        lstrcat(szFullPath, TEXT("\\INF\\OTHER\\"));
        lstrcat(szFullPath, pszInf);

        hFile = CreateFile(
                    szFullPath,
                    0,
                    FILE_SHARE_READ,
                    NULL,
                    OPEN_EXISTING,
                    0,
                    NULL);

        if(INVALID_HANDLE_VALUE == hFile)
        {
            return;
        }

        CloseHandle(hFile);
    }
    else
    {
        CloseHandle(hFile);
    }

    lstrcpy(pszInf, szFullPath);
} // GetFullInfPath()


//--------------------------------------------------------------------------;
//
//  BOOL CertifyFilesFromQueue
//
//  Description:
//      Given a handle to a file queue, verify all the files in the queue
//      are certified.
//
//  Arguments:
//      HSPFILEQ hFileQ: Handle to queue.
//
//  Return (BOOL): TRUE if all certified, FALSE otherwise
//
//  History:
//      02/19/98    Fwong       Adding check for 'AlsoInstall'
//
//--------------------------------------------------------------------------;

BOOL CertifyFilesFromQueue
(
    HSPFILEQ    hFileQ
)
{
    INFFILELIST InfFileList;
    ULONG       ii;
    BOOL        fSuccess;
    LPTSTR      pszFile;
    
    ii = FILELISTSIZE * sizeof(TCHAR);

    InfFileList.uCount  = 0;
    InfFileList.uMaxLen = 0;
    InfFileList.uOffset = 0;
    InfFileList.cTotal  = 0;
    InfFileList.cSize   = ii / sizeof(TCHAR);
    InfFileList.pszFile = MEMALLOC_A(TCHAR, ii);

    if(NULL == InfFileList.pszFile)
    {
        return FALSE;
    }

    //  Creates the file list.

    fSuccess = dl_SetupScanFileQueue(
                hFileQ,
                SPQ_SCAN_USE_CALLBACK,
                NULL,
                enumFile,
                &(InfFileList),
                &ii);

    if(0 == InfFileList.uCount)
    {
        //  In the case that this is simply a registry add and NO FILES,
        //  we succeed.

        MEMFREE(InfFileList.pszFile);
        return TRUE;
    }

    if(InfFileList.uOffset == InfFileList.cSize)
    {
        //  Not enough memory.

        ii = sizeof(TCHAR) * (InfFileList.cTotal + 1);

        MEMFREE(InfFileList.pszFile);
        InfFileList.pszFile = MEMALLOC_A(TCHAR, ii);

        if(NULL == InfFileList.pszFile)
        {
            SetLastError(ERROR_NOT_ENOUGH_MEMORY);
            return FALSE;
        }

        InfFileList.uCount  = 0;
        InfFileList.uMaxLen = 0;
        InfFileList.uOffset = 0;
        InfFileList.cSize   = InfFileList.cTotal + 1;
        InfFileList.cTotal  = 0;

        fSuccess = dl_SetupScanFileQueue(
                    hFileQ,
                    SPQ_SCAN_USE_CALLBACK,
                    NULL,
                    enumFile,
                    &(InfFileList),
                    &ii);
    }

    if(!fSuccess)
    {
        MEMFREE(InfFileList.pszFile);
        return FALSE;
    }

    //  Walks the file list.
    //  Zero terminated strings with double termination at the end.

#ifndef UNICODE

    {
        WCHAR   *pszWide;
        UINT    uLen;

        pszWide = MEMALLOC_A(WCHAR, sizeof(WCHAR) * InfFileList.uMaxLen + 1);

        if(NULL == pszWide)
        {
            MEMFREE(InfFileList.pszFile);
            SetLastError(ERROR_NOT_ENOUGH_MEMORY);
            return FALSE;
        }

        pszFile = InfFileList.pszFile;
        for(ii = InfFileList.uCount; ii; ii--)
        {
            uLen = lstrlen(pszFile);

            CharLowerBuff(pszFile, uLen);
            AnsiToUnicode(pszFile, pszWide, uLen + 1);
            fSuccess = TrustCheckDriverFile(pszWide);

            if(!fSuccess)
            {
                //  if any driver file fails, the driver is not certified.

                MEMFREE(pszWide);
                MEMFREE(InfFileList.pszFile);
                SetLastError(ERROR_BAD_DEVICE);
                return FALSE;
            }

            pszFile = &(pszFile[lstrlen(pszFile) + 1]);
        }

        MEMFREE(pszWide);
    }

#else  // UNICODE
    
    pszFile = InfFileList.pszFile;

    for(ii = InfFileList.uCount; ii; ii--)
    {
        CharLowerBuff(pszFile, lstrlen(pszFile));
        fSuccess = TrustCheckDriverFile(pszFile);
         
        if(!fSuccess)
        {
            //  if any driver file fails, the driver is not certified.

            MEMFREE(InfFileList.pszFile);
            SetLastError(ERROR_BAD_DEVICE);
            return FALSE;
        }

        pszFile = &(pszFile[lstrlen(pszFile) + 1]);
    }

#endif // UNICODE

    MEMFREE(InfFileList.pszFile);
    return TRUE;
} // CertifyFilesFromQueue()


//--------------------------------------------------------------------------;
//
//  BOOL CertifyInfSection
//
//  Description:
//      Certifies all files in a section in an .inf file are certified.
//
//  Arguments:
//      LPTSTR pszInf: Full pathed name to .inf file.
//
//      LPTSTR pszSection: Name of section.
//
//  Return (BOOL): TRUE if certified, FALSE otherwise.
//
//  History:
//      02/19/98    Fwong       Adding check for 'AlsoInstall'
//
//--------------------------------------------------------------------------;

BOOL CertifyInfSection
(
    LPTSTR  pszInf,
    LPTSTR  pszSection
)
{
    HINF        hInf;
    HSPFILEQ    hFileQ;
    BOOL        fSuccess;

    hInf = dl_SetupOpenInfFile(pszInf, NULL, INF_STYLE_WIN4, NULL);

    if(INVALID_HANDLE_VALUE == hInf)
    {
        return FALSE;
    }

    hFileQ = dl_SetupOpenFileQueue();

    if(INVALID_HANDLE_VALUE == hFileQ)
    {
        dl_SetupCloseInfFile(hInf);
        return FALSE;
    }

    //  Creates the file queue

    fSuccess = dl_SetupInstallFilesFromInfSection(
                hInf,
                NULL,
                hFileQ,
                pszSection,
                NULL,
                0);

    if(!fSuccess)
    {
        dl_SetupCloseFileQueue(hFileQ);
        dl_SetupCloseInfFile(hInf);
        return FALSE;
    }

    //  Checks the file queue.

    fSuccess = CertifyFilesFromQueue(hFileQ);

    dl_SetupCloseFileQueue(hFileQ);
    dl_SetupCloseInfFile(hInf);
    return fSuccess;
} // CertifyInfSection()


//--------------------------------------------------------------------------;
//
//  BOOL GetDriverCertificationAlsoInstall
//
//  Description:
//      Checking the 'AlsoInstall' section.
//
//  Arguments:
//      LPTSTR pszInf: Full-path name of the .inf for the device
//
//      LPTSTR pszSection: Name of the section for the device
//
//  Return (BOOL): TRUE if certified, FALSE otherwise
//
//  History:
//      02/19/98    Fwong       Adding check for 'AlsoInstall'
//
//--------------------------------------------------------------------------;

BOOL GetDriverCertificationAlsoInstall
(
    LPTSTR  pszInf,
    LPTSTR  pszSection
)
{
    TCHAR   szAlso[MAX_PATH];
    LPTSTR  pszStart, pszEnd;
    TCHAR   szNewInf[MAX_PATH];
    TCHAR   szNewSection[MAX_PATH];
    UINT    ii;

    ii = GetPrivateProfileString(
            pszSection,
            TEXT("AlsoInstall"),
            TEXT(""),
            szAlso,
            sizeof(szAlso)/sizeof(szAlso[0]),
            pszInf);

    if(0 == ii)
    {
        //  No 'AlsoInstall' entry.  Bolt!

        return TRUE;
    }

    // Read the line after AlsoInstall= in the driver's install section
    // e.g. AlsoInstall = Section1(Inf1.inf), Section2, Section3(Inf3.inf)

    pszEnd = &(szAlso[0]);

    for(;0 != *pszEnd;)
    {
        //  Parsing each entry.

        pszStart = pszEnd;

        //  Looking for separator/terminator.

        for(;(0 != *pszEnd) && (',' != *pszEnd); pszEnd++);

        //  If separator, we terminate THAT entry.

        if(',' == *pszEnd)
        {
            *pszEnd++ = 0;
        }

        //  Nuking leading spaces and copying.

        for(;' ' == *pszStart; pszStart++);
        lstrcpy(szNewSection, pszStart);

        //  Looking for .inf name if it exists.

        pszStart = &szNewSection[0];
        szNewInf[0] = 0;
        for(;(0 != *pszStart) && ('(' != *pszStart); pszStart++);

        if('(' == *pszStart)
        {
            //  inf entry exists.

            //  Terminating the section name.

            *pszStart++ = 0;

            //  Nuking the leading spaces and copying.
            for(;' ' == *pszStart; pszStart++);
            lstrcpy(szNewInf, pszStart);

            //  Nuking the trailing ')'.
            pszStart  = &(szNewInf[lstrlen(szNewInf) - 1]);
            for(;')' != *pszStart; pszStart--);
            *pszStart-- = 0;

            //  Nuking trailing spaces between end of .inf and ')'
            for(;' ' == *pszStart;)
            {
                *pszStart-- = 0;
            }

            //  Force to full pathed name.
            GetFullInfPath(szNewInf);
        }
        else
        {
            //  No .inf entry, use current .inf.

            lstrcpy(szNewInf, pszInf);
        }

        //  Nuking trailing spaces from section name.
        pszStart = &(szNewSection[lstrlen(szNewSection) - 1]);
        for(;' ' == *pszStart;)
        {
            *pszStart-- = 0;
        }

        //  Check files in .inf section.

        if(FALSE == CertifyInfSection(szNewInf, szNewSection))
        {
            return FALSE;
        }
    }

    return TRUE;
} // GetDriverCertificationAlsoInstall()


//--------------------------------------------------------------------------;
//
//  BOOL GetDriverCertificationStatus
//
//  Description:
//      Gets the certification status of the given driver (DevNode).
//
//  Arguments:
//      DWORD DevNode: DevNode for the driver.
//
//  Return (BOOL): TRUE if certified, otherwise FALSE and the error can be
//                 retrieved with a call to GetLastError().
//
//  History:
//      10/29/97    Fwong       Adding support.
//      12/22/97    Fwong       Modifying to check "Needs" section.
//      02/19/98    Fwong       Modifying to check "AlsoInstall" section.
//      07/06/00    AlanLu      Prefix Bug -- check memory allocation.
//
//--------------------------------------------------------------------------;

BOOL GetDriverCertificationStatus
(
    PCTSTR   pszDeviceInterface
)
{
    HDEVINFO                            hDevInfo;
    SP_DEVINFO_DATA                     DevInfoData;
    SP_DRVINFO_DATA                     DrvInfoData;
    SP_DEVICE_INTERFACE_DATA            did;
    SP_DEVINSTALL_PARAMS                InstParams;
    HKEY                                hKeyDev;
    HSPFILEQ                            hFileQ;
    DWORD                               ii, dw, dwType, cbSize;
    BOOL                                fSuccess;
    GUID                                guidClass = KSCATEGORY_AUDIO;
    PSP_DEVICE_INTERFACE_DETAIL_DATA    pdidd;
    TCHAR                               szSection[MAX_PATH];
    TCHAR                               szDevInst[MAX_PATH];

    cbSize = 300 * sizeof(TCHAR) + sizeof(SP_DEVICE_INTERFACE_DETAIL_DATA);
    pdidd  = MEMALLOC_A(SP_DEVICE_INTERFACE_DETAIL_DATA, cbSize);

    if (pdidd == NULL)
    {
        SetLastError(ERROR_NOT_ENOUGH_MEMORY);
        return FALSE;
    }

    pdidd->cbSize = sizeof(SP_DEVICE_INTERFACE_DETAIL_DATA);

    ZeroMemory(&cdli, sizeof(CERTIFYDYNALOADINFO));
    if(!CertifyDynaLoad())
    {
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    hDevInfo = dl_SetupDiGetClassDevs(
                &guidClass,
                NULL,
                NULL,
                DIGCF_DEVICEINTERFACE | DIGCF_PRESENT);

    if (INVALID_HANDLE_VALUE == hDevInfo)
    {
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    ZeroMemory(&did, sizeof(did));
    did.cbSize = sizeof(did);

    ZeroMemory(&DevInfoData, sizeof(SP_DEVINFO_DATA));
    DevInfoData.cbSize    = sizeof(SP_DEVINFO_DATA);
    DevInfoData.ClassGuid = KSCATEGORY_AUDIO;

    //  Enumerating all devices until match is found.

    for (ii = 0; ; ii++)
    {
        fSuccess = dl_SetupDiEnumDeviceInterfaces(
            hDevInfo,
            NULL,
            &guidClass,
            ii,
            &did);

        if (!fSuccess)
        {
            break;
        }

        fSuccess = dl_SetupDiGetDeviceInterfaceDetail(
            hDevInfo,
            &did,
            pdidd,
            cbSize,
            &dw,
            &DevInfoData);

        if (!fSuccess)
        {
            break;
        }

        if (0 == lstrcmpi(pdidd->DevicePath, pszDeviceInterface))
        {
            //  Just being paranoid and making sure the case of the
            //  string matches

            fSuccess = TRUE;
            break;
        }
    }

    if (!fSuccess)
    {
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    //  Need device instance ID to open device info.

    if(!dl_SetupDiGetDeviceInstanceId(
        hDevInfo,
        &DevInfoData,
        szDevInst,
        (sizeof(szDevInst)/sizeof(szDevInst[0])),
        NULL))
    {
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    dl_SetupDiDestroyDeviceInfoList(hDevInfo);

    //  Creating a device info list and open up device info element for
    //  a device within that set.

    hDevInfo = dl_SetupDiCreateDeviceInfoList(NULL, NULL);

    if(INVALID_HANDLE_VALUE == hDevInfo)
    {
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    ZeroMemory(&DevInfoData, sizeof(SP_DEVINFO_DATA));
    DevInfoData.cbSize     = sizeof(SP_DEVINFO_DATA);

    if(!dl_SetupDiOpenDeviceInfo(
        hDevInfo,
        szDevInst,
        NULL,
        0,
        &DevInfoData))
    {
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }
    
    ZeroMemory(&InstParams, sizeof(SP_DEVINSTALL_PARAMS));
    InstParams.cbSize = sizeof(SP_DEVINSTALL_PARAMS);

    //  Getting current settings, we'll be modifying some fields.

    if(!dl_SetupDiGetDeviceInstallParams(hDevInfo, &DevInfoData, &InstParams))
    {
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    hKeyDev = dl_SetupDiOpenDevRegKey(
        hDevInfo,
        &DevInfoData,
        DICS_FLAG_GLOBAL,
        0,
        DIREG_DRV,
        KEY_ALL_ACCESS);

    if(INVALID_HANDLE_VALUE == hKeyDev)
    {
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    //  Getting INF path and setting bit that says that we'll be using a
    //  single inf (vs directory).

    cbSize = sizeof(InstParams.DriverPath);
    ii = RegQueryValueEx(
        hKeyDev,
        REGSTR_VAL_INFPATH,
        NULL,
        &dwType,
        (LPBYTE)InstParams.DriverPath,
        &cbSize);

    if(ERROR_SUCCESS != ii)
    {
        RegCloseKey(hKeyDev);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    GetFullInfPath(InstParams.DriverPath);

    cbSize = sizeof(szSection);
    ii = RegQueryValueEx(
        hKeyDev,
        REGSTR_VAL_INFSECTION,
        NULL,
        &dwType,
        (LPBYTE)szSection,
        &cbSize);

    if(ERROR_SUCCESS != ii)
    {
        RegCloseKey(hKeyDev);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    //  Checking the 'AlsoInstall' section

    if(FALSE == GetDriverCertificationAlsoInstall(
        InstParams.DriverPath,
        szSection))
    {
        //  Failed the check through 'AlsoInstall' section.

        RegCloseKey(hKeyDev);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        return FALSE;
    }

    InstParams.Flags |= DI_ENUMSINGLEINF;

    if(!dl_SetupDiSetDeviceInstallParams(hDevInfo, &DevInfoData, &InstParams))
    {
        RegCloseKey(hKeyDev);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    //  Building class driver info list.

    if(!dl_SetupDiBuildDriverInfoList(hDevInfo, &DevInfoData, SPDIT_CLASSDRIVER))
    {
        RegCloseKey(hKeyDev);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    //  Filling out DrvInfoData structure.

    ZeroMemory(&DrvInfoData, sizeof(DrvInfoData));

    cbSize = sizeof(DrvInfoData.ProviderName);
    ii = RegQueryValueEx(
        hKeyDev,
        REGSTR_VAL_PROVIDER_NAME,
        NULL,
        &dwType,
        (LPBYTE)DrvInfoData.ProviderName,
        &cbSize);

    if(ERROR_SUCCESS != ii)
    {
        DrvInfoData.ProviderName[0] = (TCHAR)(0);
    }

    if(!dl_SetupDiGetDeviceRegistryProperty(
        hDevInfo,
        &DevInfoData,
        SPDRP_MFG,
        NULL,
        (PBYTE)DrvInfoData.MfgName,
        sizeof(DrvInfoData.MfgName),
        NULL))
    {
        RegCloseKey(hKeyDev);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    if(!dl_SetupDiGetDeviceRegistryProperty(
        hDevInfo,
        &DevInfoData,
        SPDRP_DEVICEDESC,
        NULL,
        (PBYTE)DrvInfoData.Description,
        sizeof(DrvInfoData.Description),
        NULL))
    {
        RegCloseKey(hKeyDev);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    DrvInfoData.cbSize     = sizeof(SP_DRVINFO_DATA);
    DrvInfoData.DriverType = SPDIT_CLASSDRIVER;
    DrvInfoData.Reserved   = 0;

    // Search for the driver and select it if found

    if(!dl_SetupDiSetSelectedDriver(hDevInfo, &DevInfoData, &DrvInfoData))
    {
        RegCloseKey(hKeyDev);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    RegCloseKey(hKeyDev);

    //  Setting up file queue.

    hFileQ = dl_SetupOpenFileQueue();

    if(INVALID_HANDLE_VALUE == hFileQ)
    {
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    ZeroMemory(&InstParams, sizeof(SP_DEVINSTALL_PARAMS));
    InstParams.cbSize = sizeof(SP_DEVINSTALL_PARAMS);

    //  Setting up a user-supplied queue and setting the bit to signify

    if(!dl_SetupDiGetDeviceInstallParams(hDevInfo, &DevInfoData, &InstParams))
    {
        dl_SetupCloseFileQueue(hFileQ);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        SetLastError(ERROR_INVALID_PARAMETER);
        MEMFREE(pdidd);
        return FALSE;
    }

    //  Adding options...

    InstParams.Flags     |= DI_NOVCP;
    InstParams.FileQueue  = hFileQ;

    if(!dl_SetupDiSetDeviceInstallParams(hDevInfo, &DevInfoData, &InstParams))
    {
        dl_SetupCloseFileQueue(hFileQ);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    //  This fills up the queue.

    if(!dl_SetupDiCallClassInstaller(
            DIF_INSTALLDEVICEFILES,
            hDevInfo,
            &DevInfoData))
    {
        dl_SetupCloseFileQueue(hFileQ);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
     }
 
     //
     //  Removing options.  If we don't do this before closing the file queue
     //  and destroying the device info list, we get memory leaks in setupapi.
     //
 
     InstParams.Flags     &= (~DI_NOVCP);
     InstParams.FileQueue  = NULL;
 
     if(!dl_SetupDiSetDeviceInstallParams(hDevInfo, &DevInfoData, &InstParams))
     {
        dl_SetupCloseFileQueue(hFileQ);
        dl_SetupDiDestroyDeviceInfoList(hDevInfo);
        CertifyDynaFree();
        MEMFREE(pdidd);
        SetLastError(ERROR_INVALID_PARAMETER);
        return FALSE;
    }

    //  Checks the files in the queue

    fSuccess = CertifyFilesFromQueue(hFileQ);

    dl_SetupCloseFileQueue(hFileQ);
    dl_SetupDiDestroyDeviceInfoList(hDevInfo);
    CertifyDynaFree();
    MEMFREE(pdidd);

    return fSuccess;
} // GetDriverCertificationStatus()
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vad.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       vad.h
 *  Content:    Virtual Audio Device base classes
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  1/1/97      dereks  Created
 * 4/20/99      duganp  Added registry-settable default S/W 3D algorithms
 * 8/24/99      duganp  Support for FX processing
 *
 ***************************************************************************/

#ifndef __VAD_H__
#define __VAD_H__


// Device types
typedef DWORD VADDEVICETYPE, *LPVADDEVICETYPE;

#define VAD_DEVICETYPE_EMULATEDRENDER   0x00000001
#define VAD_DEVICETYPE_VXDRENDER        0x00000002
#define VAD_DEVICETYPE_KSRENDER         0x00000004
#define VAD_DEVICETYPE_EMULATEDCAPTURE  0x00000008
#define VAD_DEVICETYPE_KSCAPTURE        0x00000010

#define VAD_DEVICETYPE_VALIDMASK        0x0000001F
#define VAD_DEVICETYPE_EMULATEDMASK     0x00000009
#define VAD_DEVICETYPE_VXDMASK          0x00000002
#define VAD_DEVICETYPE_KSMASK           0x00000014
#define VAD_DEVICETYPE_RENDERMASK       0x00000007
#define VAD_DEVICETYPE_CAPTUREMASK      0x00000018

#define VAD_DEVICETYPE_WAVEOUTOPENMASK  0x00000003

// Special type used by RemoveProhibitedDrivers()
#define VAD_DEVICETYPE_PROHIBITED       0x80000000

// Buffer states
#define VAD_BUFFERSTATE_STOPPED         0x00000000  // The buffer is stopped
#define VAD_BUFFERSTATE_STARTED         0x00000001  // The buffer is running
#define VAD_BUFFERSTATE_LOOPING         0x00000002  // The buffer is looping (but not necessarily started)
#define VAD_BUFFERSTATE_WHENIDLE        0x00000004  // The buffer is flagged as "play when idle" or "stop when idle"
#define VAD_BUFFERSTATE_INFOCUS         0x00000008  // The buffer has focus
#define VAD_BUFFERSTATE_OUTOFFOCUS      0x00000010  // The buffer does not have focus
#define VAD_BUFFERSTATE_LOSTCONSOLE     0x00000020  // Another TS session has acquired the console
#define VAD_BUFFERSTATE_SUSPEND         0x80000000  // The buffer is suspended, or resumed

#define VAD_FOCUSFLAGS      (VAD_BUFFERSTATE_OUTOFFOCUS | VAD_BUFFERSTATE_INFOCUS | VAD_BUFFERSTATE_LOSTCONSOLE)
#define VAD_SETSTATE_MASK   (VAD_FOCUSFLAGS | VAD_BUFFERSTATE_STARTED | VAD_BUFFERSTATE_LOOPING)

// Helper macros

#define IS_VALID_VAD(vdt) \
            MAKEBOOL(((VADDEVICETYPE)(vdt)) & VAD_DEVICETYPE_VALIDMASK)

#define IS_EMULATED_VAD(vdt) \
            MAKEBOOL(((VADDEVICETYPE)(vdt)) & VAD_DEVICETYPE_EMULATEDMASK)

#define IS_VXD_VAD(vdt) \
            MAKEBOOL(((VADDEVICETYPE)(vdt)) & VAD_DEVICETYPE_VXDMASK)

#define IS_KS_VAD(vdt) \
            MAKEBOOL(((VADDEVICETYPE)(vdt)) & VAD_DEVICETYPE_KSMASK)

#define IS_RENDER_VAD(vdt) \
            MAKEBOOL(((VADDEVICETYPE)(vdt)) & VAD_DEVICETYPE_RENDERMASK)

#define IS_CAPTURE_VAD(vdt) \
            MAKEBOOL(((VADDEVICETYPE)(vdt)) & VAD_DEVICETYPE_CAPTUREMASK)

__inline BOOL IS_SINGLE_VAD(VADDEVICETYPE vdt)
{
    UINT                    i;

    for(i = 0; i < sizeof(VADDEVICETYPE) * 8; i++)
    {
        if(vdt & (1 << i))
        {
            if(vdt != (VADDEVICETYPE)(1 << i))
            {
                return FALSE;
            }
        }
    }

    return TRUE;
}


#ifdef __cplusplus

// Device class GUIDs
DEFINE_GUID(VADDRVID_EmulatedRenderBase, 0xc2ad1800, 0xb243, 0x11ce, 0xa8, 0xa4, 0x00, 0xaa, 0x00, 0x6c, 0x45, 0x00);
DEFINE_GUID(VADDRVID_EmulatedCaptureBase, 0xbdf35a00, 0xb9ac, 0x11d0, 0xa6, 0x19, 0x00, 0xaa, 0x00, 0xa7, 0xc0, 0x00);
DEFINE_GUID(VADDRVID_VxdRenderBase, 0x3d0b92c0, 0xabfc, 0x11ce, 0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c);
DEFINE_GUID(VADDRVID_KsRenderBase, 0xbd6dd71a, 0x3deb, 0x11d1, 0xb1, 0x71, 0x0, 0xc0, 0x4f, 0xc2, 0x00, 0x00);
DEFINE_GUID(VADDRVID_KsCaptureBase, 0xbd6dd71b, 0x3deb, 0x11d1, 0xb1, 0x71, 0x0, 0xc0, 0x4f, 0xc2, 0x00, 0x00);

// Memory buffer lock region
typedef struct tagLOCKREGION
{
    LPCVOID             pvIdentifier;           // Lock owner identifier
    LPCVOID             pvLock;                 // Byte index of lock
    DWORD               cbLock;                 // Size of locked region
} LOCKREGION, *LPLOCKREGION;

// EnumDrivers flags
#define VAD_ENUMDRIVERS_ORDER                       0x00000001
#define VAD_ENUMDRIVERS_REMOVEPROHIBITEDDRIVERS     0x00000002
#define VAD_ENUMDRIVERS_REMOVEDUPLICATEWAVEDEVICES  0x00000004

// Flags for different types of default devices (new in DX7.1)
enum DEFAULT_DEVICE_TYPE
{
    MAIN_DEFAULT,
    VOICE_DEFAULT
};

// Render buffer description
typedef struct tagVADRBUFFERDESC
{
    DWORD               dwFlags;
    DWORD               dwBufferBytes;
    LPWAVEFORMATEX      pwfxFormat;
    GUID                guid3dAlgorithm;
} VADRBUFFERDESC, *LPVADRBUFFERDESC;

typedef const VADRBUFFERDESC *LPCVADRBUFFERDESC;

// Render buffer capabilities
typedef struct tagVADRBUFFERCAPS
{
    DWORD               dwFlags;
    DWORD               dwBufferBytes;
} VADRBUFFERCAPS, *LPVADRBUFFERCAPS;

typedef const VADRBUFFERCAPS *LPCVADRBUFFERCAPS;

// Forward declarations
class CDeviceDescription;
class CStaticDriver;
class CDevice;
class CRenderDevice;
class CPrimaryRenderWaveBuffer;
class CSecondaryRenderWaveBuffer;
class CRenderWaveStream;
class CCaptureDevice;
class CCaptureWaveBuffer;
class CPropertySet;
class CSysMemBuffer;
class CHwMemBuffer;
class C3dListener;
class C3dObject;
class CCaptureEffectChain;
class CDirectSoundSink;


// Virtual audio device manager
class CVirtualAudioDeviceManager : public CDsBasicRuntime
{
    friend class CDevice;

private:
    CList<CDevice *>            m_lstDevices;    // Open device list
    CObjectList<CStaticDriver>  m_lstDrivers;    // Static driver list
    VADDEVICETYPE               m_vdtDrivers;    // Types in the static driver list

#ifndef SHARED
    static const LPCTSTR        m_pszPnpMapping; // Name of PnP info file mapping object
#endif

public:
    CVirtualAudioDeviceManager(void);
    ~CVirtualAudioDeviceManager(void);

    // Device/driver management
    HRESULT EnumDevices(VADDEVICETYPE, CObjectList<CDevice> *);
    HRESULT EnumDrivers(VADDEVICETYPE, DWORD, CObjectList<CDeviceDescription> *);
    HRESULT GetDeviceDescription(GUID, CDeviceDescription **);
    HRESULT FindOpenDevice(VADDEVICETYPE, REFGUID, CDevice **);
    HRESULT OpenDevice(VADDEVICETYPE, REFGUID, CDevice **);
    static void GetDriverGuid(VADDEVICETYPE, BYTE, LPGUID);
    static void GetDriverDataFromGuid(VADDEVICETYPE, REFGUID, LPBYTE);
    static VADDEVICETYPE GetDriverDeviceType(REFGUID);
    HRESULT GetPreferredDeviceId(VADDEVICETYPE, LPGUID, DEFAULT_DEVICE_TYPE =MAIN_DEFAULT);
    HRESULT GetDeviceIdFromDefaultId(LPCGUID, LPGUID);
#ifdef WINNT
    VADDEVICETYPE GetAllowableDevices(VADDEVICETYPE, LPCTSTR);
#else // WINNT
    VADDEVICETYPE GetAllowableDevices(VADDEVICETYPE, DWORD);
#endif // WINNT
    HRESULT GetPreferredWaveDevice(BOOL, LPUINT, LPDWORD, DEFAULT_DEVICE_TYPE =MAIN_DEFAULT);

    // Static driver list
    HRESULT InitStaticDriverList(VADDEVICETYPE);
    void FreeStaticDriverList(void);
    HRESULT GetDriverCertificationStatus(CDevice *, LPDWORD);

#ifdef WINNT
    HRESULT OpenPersistentDataKey(VADDEVICETYPE, LPCTSTR, PHKEY);
#else // WINNT
    HRESULT OpenPersistentDataKey(VADDEVICETYPE, DWORD, PHKEY);
#endif // WINNT

private:
    void RemoveProhibitedDrivers(VADDEVICETYPE, CObjectList<CDeviceDescription> *);
    void RemoveDuplicateWaveDevices(CObjectList<CDeviceDescription> *);
    void SortDriverList(VADDEVICETYPE, CObjectList<CDeviceDescription> *);

#ifdef WINNT
    HRESULT OpenDevicePersistentDataKey(VADDEVICETYPE, LPCTSTR, PHKEY);
#else // WINNT
    HRESULT OpenDevicePersistentDataKey(VADDEVICETYPE, DWORD, PHKEY);
#endif // WINNT
    HRESULT OpenDefaultPersistentDataKey(PHKEY);
    INT SortDriverListCallback(const UINT *, CDeviceDescription *, CDeviceDescription *);
    HRESULT OpenSpecificDevice(CDeviceDescription *, CDevice **);

#ifndef SHARED
    void CheckMmPnpEvents(void);
#endif // SHARED

};


// The static driver object
class CStaticDriver : public CDsBasicRuntime
{
    friend class CVirtualAudioDeviceManager;

protected:
    CDeviceDescription *    m_pDeviceDescription;   // Device description
    HKEY                    m_hkeyRoot;             // Root device registry key
    DWORD                   m_dwKeyOwnerProcessId;  // Process that opened the device registry key
    DWORD                   m_dwCertification;      // Certification status

public:
    CStaticDriver(CDeviceDescription *);
    virtual ~CStaticDriver(void);
};


// Base class for all audio devices
class CDevice : public CDsBasicRuntime
{
public:
    const VADDEVICETYPE     m_vdtDeviceType;        // Device type
    CDeviceDescription *    m_pDeviceDescription;   // Device description

#if 0
    BOOL                    m_fIncludeNs;           // Flag which includes NS in stack
    GUID                    m_guidNsInstance;       // Instance GUID of NS implementation
    DWORD                   m_dwNsFlags;            // NS creation flags
    BOOL                    m_fIncludeAgc;          // Flag which includes AGC in stack;
    GUID                    m_guidAgcInstance;      // Instance GUID of AGC implementation
    DWORD                   m_dwAgcFlags;           // AGC creation flags
#endif

public:
    CDevice(VADDEVICETYPE);
    virtual ~CDevice(void);

public:
    // Driver enumeration
    virtual HRESULT EnumDrivers(CObjectList<CDeviceDescription> *) = 0;

    // Initialization
    virtual HRESULT Initialize(CDeviceDescription *);

    // Device capabilities
    virtual HRESULT GetCertification(LPDWORD, BOOL) = 0;

    // Driver properties
    virtual HRESULT GetDriverVersion(LARGE_INTEGER *);

};


// Base class for all audio rendering devices
class CRenderDevice : public CDevice
{
    friend class CPrimaryRenderWaveBuffer;
    friend class CSecondaryRenderWaveBuffer;

public:
    CList<CPrimaryRenderWaveBuffer *>   m_lstPrimaryBuffers;            // Primary buffers owned by this device
    CList<CSecondaryRenderWaveBuffer *> m_lstSecondaryBuffers;          // Secondary buffers owned by this device
    DWORD                               m_dwSupport;                    // Device suport for volume/pan
    DWORD                               m_dwAccelerationFlags;          // Device acceleration flags

private:
    LPCGUID                             m_guidDflt3dAlgorithm;          // Default S/W 3D algorithm to use if we                                                                   // have to fall back to software playback

public:
    CRenderDevice(VADDEVICETYPE);
    virtual ~CRenderDevice(void);

public:
    // Creation
    virtual HRESULT Initialize(CDeviceDescription *);

    // Device capabilities
    virtual HRESULT GetCaps(LPDSCAPS) = 0;
    virtual HRESULT GetVolumePanCaps(LPDWORD);

    // Device properties
    virtual HRESULT GetGlobalFormat(LPWAVEFORMATEX, LPDWORD) = 0;
    virtual HRESULT SetGlobalFormat(LPCWAVEFORMATEX) = 0;
    virtual HRESULT GetGlobalAttenuation(PDSVOLUMEPAN);
    virtual HRESULT SetGlobalAttenuation(PDSVOLUMEPAN);
    virtual HRESULT SetSrcQuality(DIRECTSOUNDMIXER_SRCQUALITY) = 0;
    virtual HRESULT GetAccelerationFlags(LPDWORD pdwFlags) {*pdwFlags = m_dwAccelerationFlags; return DS_OK;}
    virtual HRESULT SetAccelerationFlags(DWORD dwFlags) {m_dwAccelerationFlags = dwFlags; return DS_OK;}
    virtual HRESULT SetSpeakerConfig(DWORD) {return DS_OK;}
    LPCGUID GetDefault3dAlgorithm() {return m_guidDflt3dAlgorithm;}

    // Buffer management
    virtual HRESULT CreatePrimaryBuffer(DWORD, LPVOID, CPrimaryRenderWaveBuffer **) = 0;
    virtual HRESULT CreateSecondaryBuffer(LPCVADRBUFFERDESC, LPVOID, CSecondaryRenderWaveBuffer **) = 0;

    // AEC
    virtual HRESULT IncludeAEC(BOOL fEnable, REFGUID, DWORD) {return fEnable ? DSERR_UNSUPPORTED : DS_OK;}
};


// Base class for all wave rendering buffers
class CRenderWaveBuffer : public CDsBasicRuntime
{
public:
    const LPVOID    m_pvInstance;       // Instance identifier
    CRenderDevice * m_pDevice;          // Parent device
    CSysMemBuffer * m_pSysMemBuffer;    // System memory buffer for audio data
    VADRBUFFERDESC  m_vrbd;             // Buffer description

public:
    CRenderWaveBuffer(CRenderDevice *, LPVOID);
    virtual ~CRenderWaveBuffer(void);

public:
    // Initialization
    virtual HRESULT Initialize(LPCVADRBUFFERDESC, CRenderWaveBuffer * = NULL, CSysMemBuffer * = NULL);

    // Buffer capabilities
    virtual HRESULT GetCaps(LPVADRBUFFERCAPS);

    // Buffer data
    virtual HRESULT Lock(DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD);
    virtual HRESULT Unlock(LPVOID, DWORD, LPVOID, DWORD);
    virtual HRESULT OverrideLocks(void);
    virtual HRESULT CommitToDevice(DWORD, DWORD) = 0;

    // Owned objects
    virtual HRESULT CreatePropertySet(CPropertySet **) = 0;
};


// Base class for primary wave rendering buffers
class CPrimaryRenderWaveBuffer : public CRenderWaveBuffer
{
public:
    CPrimaryRenderWaveBuffer(CRenderDevice *, LPVOID);
    virtual ~CPrimaryRenderWaveBuffer(void);

public:
    // Initialization
    virtual HRESULT Initialize(LPCVADRBUFFERDESC, CRenderWaveBuffer *, CSysMemBuffer * =NULL);

    // Access rights
    virtual HRESULT RequestWriteAccess(BOOL) = 0;

    // Buffer control
    virtual HRESULT GetState(LPDWORD) = 0;
    virtual HRESULT SetState(DWORD) = 0;
    virtual HRESULT GetCursorPosition(LPDWORD, LPDWORD) = 0;

    // Owned objects
    virtual HRESULT Create3dListener(C3dListener **) = 0;
};


// Base class for secondary wave rendering buffers
class CSecondaryRenderWaveBuffer : public CRenderWaveBuffer
{
public:
    CSecondaryRenderWaveBuffer(CRenderDevice *, LPVOID);
    virtual ~CSecondaryRenderWaveBuffer(void);

public:
    // Initialization
    virtual HRESULT Initialize(LPCVADRBUFFERDESC, CSecondaryRenderWaveBuffer *, CSysMemBuffer * =NULL);

    // Resource allocation
    virtual HRESULT AcquireResources(DWORD) {return DS_OK;}
    virtual HRESULT StealResources(CSecondaryRenderWaveBuffer *) {return DSERR_UNSUPPORTED;}
    virtual HRESULT FreeResources(void) {return DS_OK;}

    // Buffer creation
    virtual HRESULT Duplicate(CSecondaryRenderWaveBuffer **) = 0;

    // Buffer control
    virtual HRESULT GetState(LPDWORD) = 0;
    virtual HRESULT SetState(DWORD) = 0;
    virtual HRESULT GetCursorPosition(LPDWORD, LPDWORD) = 0;
    virtual HRESULT SetCursorPosition(DWORD) = 0;

    // Buffer properties
    virtual HRESULT SetAttenuation(PDSVOLUMEPAN) = 0;
#ifdef FUTURE_MULTIPAN_SUPPORT
    virtual HRESULT SetChannelAttenuations(LONG, DWORD, const DWORD*, const LONG*) =0; // {BREAK(); return DSERR_GENERIC;}
#endif
    virtual HRESULT SetFrequency(DWORD, BOOL fClamp =FALSE) = 0;
    virtual HRESULT SetMute(BOOL) = 0;

    // Buffer position notifications
    virtual HRESULT SetNotificationPositions(DWORD, LPCDSBPOSITIONNOTIFY) = 0;

    // Owned objects
    virtual HRESULT Create3dObject(C3dListener *, C3dObject **) = 0;

    // For modifying the final success code returned to the app
    HRESULT SpecialSuccessCode(void) {return m_hrSuccessCode;}
    HRESULT m_hrSuccessCode;
    // This is usually DS_OK, but gets set to DS_NO_VIRTUALIZATION if we replace
    // an unsupported 3D algorithm with the No Virtualization (Pan3D) algorithm

protected:
    // Owned objects
    virtual HRESULT CreatePan3dObject(C3dListener *, BOOL, DWORD, C3dObject **);

public:
    // Stuff to support Doppler on sink buffers;
    void SetOwningSink(CDirectSoundSink *);
    HRESULT SetBufferFrequency(DWORD, BOOL fClamp =FALSE);

protected:
    // Owning sink object
    CDirectSoundSink * m_pOwningSink;
    BOOL HasSink(void) {return m_pOwningSink != NULL;};
};


// Base class for all audio capturing devices
class CCaptureDevice : public CDevice
{
public:
    CList<CCaptureWaveBuffer *> m_lstBuffers;       // Buffers owned by this device

public:
    CCaptureDevice(VADDEVICETYPE);
    virtual ~CCaptureDevice();

    // Initialization
    virtual HRESULT Initialize(CDeviceDescription *);

    // Device caps
    virtual HRESULT GetCaps(LPDSCCAPS) = 0;

    // Device recording level control
    HRESULT GetVolume(LPLONG);
    HRESULT SetVolume(LONG);
    HRESULT GetMicVolume(LPLONG);
    HRESULT SetMicVolume(LONG);
    HRESULT EnableMic(BOOL);
    HRESULT HasVolCtrl() {return m_fAcquiredVolCtrl ? DS_OK : DSERR_CONTROLUNAVAIL;}

    // Buffer management
    virtual HRESULT CreateBuffer(DWORD, DWORD, LPCWAVEFORMATEX, CCaptureEffectChain *, LPVOID, CCaptureWaveBuffer **) = 0;
    virtual void AddBufferToList(CCaptureWaveBuffer *pBuffer) {m_lstBuffers.AddNodeToList(pBuffer);}
    virtual void RemoveBufferFromList(CCaptureWaveBuffer *pBuffer) {m_lstBuffers.RemoveDataFromList(pBuffer);}

private:
    // For recording level control
    HRESULT AcquireVolCtrl(void);

    HMIXER m_hMixer;
    BOOL m_fAcquiredVolCtrl;
    BOOL m_fMasterMuxIsMux;
    MIXERCONTROLDETAILS m_mxcdMasterVol;
    MIXERCONTROLDETAILS m_mxcdMasterMute;
    MIXERCONTROLDETAILS m_mxcdMasterMux;
    MIXERCONTROLDETAILS m_mxcdMicVol;
    MIXERCONTROLDETAILS m_mxcdMicMute;
    MIXERCONTROLDETAILS_UNSIGNED m_mxVolume;
    MIXERCONTROLDETAILS_BOOLEAN m_mxMute;
    MIXERCONTROLDETAILS_BOOLEAN* m_pmxMuxFlags;
    LONG* m_pfMicValue;
    DWORD m_dwRangeMin;
    DWORD m_dwRangeSize;
};


// Base class for wave capturing buffers
class CCaptureWaveBuffer : public CDsBasicRuntime
{
    friend class CDirectSoundCaptureBuffer;
    friend class CDirectSoundAdministrator;

protected:
    CCaptureDevice *    m_pDevice;          // Parent device
    CSysMemBuffer *     m_pSysMemBuffer;    // System memory buffer
    DWORD               m_dwFlags;          // Current buffer flags
    HANDLE              m_hEventFocus;      // Event for focus change notifications
    DWORD               m_fYieldedFocus;     // Has YieldFocus() been called?

public:
    CCaptureWaveBuffer(CCaptureDevice *);
    virtual ~CCaptureWaveBuffer();

public:
    // Initialization
    virtual HRESULT Initialize(DWORD);

    // Buffer capabilities
    virtual HRESULT GetCaps(LPDSCBCAPS) = 0;

    // Buffer data
    virtual HRESULT Lock(DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD);
    virtual HRESULT Unlock(LPCVOID, DWORD, LPCVOID, DWORD);

    // Buffer control
    virtual HRESULT GetState(LPDWORD) = 0;
    virtual HRESULT SetState(DWORD) = 0;
    virtual HRESULT GetCursorPosition(LPDWORD, LPDWORD) = 0;
    virtual HRESULT SetNotificationPositions(DWORD, LPCDSBPOSITIONNOTIFY) = 0;

    // Added for DirectX 8.0 effects support
    HRESULT GetEffectInterface(REFGUID, DWORD, REFGUID, LPVOID *);
};


// Utility system memory buffer object
class CSysMemBuffer : public CDsBasicRuntime
{
private:
    static const DWORD  m_cbExtra;          // Extra amount of memory to allocate
    CList<LOCKREGION>   m_lstLocks;         // List of locks on the memory buffer
    DWORD               m_cbAudioBuffers;   // Size of the audio data buffer(s)
    LPBYTE              m_pbPreFxBuffer;    // Audio data prior to FX processing
    LPBYTE              m_pbPostFxBuffer;   // Audio data after FX processing

public:
    CSysMemBuffer(void);
    ~CSysMemBuffer(void);

public:
    // Initialization
    HRESULT Initialize(DWORD);

    // Buffer data
    HRESULT LockRegion(LPVOID, DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD);
    HRESULT UnlockRegion(LPVOID, LPCVOID, DWORD, LPCVOID, DWORD);
    void OverrideLocks(LPVOID);
    void WriteSilence(WORD, DWORD, DWORD);

    // Effects buffer control
    HRESULT AllocateFxBuffer(void);
    void FreeFxBuffer(void);

    // Buffer properties
    DWORD GetSize(void)          {return m_cbAudioBuffers;}
    UINT GetLockCount()          {return m_lstLocks.GetNodeCount();}

    // We replaced "GetBuffer" with these two methods which obtain either the
    // buffer for locking/writing, or the buffer which actually gets played;
    // these are one and the same, unless the buffer has an effects chain.
    LPBYTE GetWriteBuffer(void)  {return m_pbPreFxBuffer ? m_pbPreFxBuffer : m_pbPostFxBuffer;}
    LPBYTE GetPlayBuffer(void)   {return m_pbPostFxBuffer;}

    // These methods are used by the effects processing code to obtain the
    // buffers it needs, while checking that the FX buffer is there.
    LPBYTE GetPreFxBuffer(void)  {ASSERT(m_pbPreFxBuffer); return m_pbPreFxBuffer;}
    LPBYTE GetPostFxBuffer(void) {ASSERT(m_pbPreFxBuffer); return m_pbPostFxBuffer;}

private:
    HRESULT TrackLock(LPVOID, LPVOID, DWORD);
    HRESULT UntrackLock(LPVOID, LPCVOID);
    BOOL DoRegionsOverlap(LPLOCKREGION, LPLOCKREGION);
};

inline BOOL CSysMemBuffer::DoRegionsOverlap(LPLOCKREGION plr1, LPLOCKREGION plr2)
{
    return CircularBufferRegionsIntersect(m_cbAudioBuffers,
            PtrDiffToInt((LPBYTE)plr1->pvLock - GetWriteBuffer()), plr1->cbLock,
            PtrDiffToInt((LPBYTE)plr2->pvLock - GetWriteBuffer()), plr2->cbLock);
}

extern CVirtualAudioDeviceManager *g_pVadMgr;

#endif // __cplusplus

#endif // __VAD_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\verify.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       verify.h
 *  Content:    File certification verification.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  11/19/97    dereks  Created.
 *
 ***************************************************************************/

#ifndef __VERIFY_H__
#define __VERIFY_H__

#define VERIFY_UNCHECKED        0x00000000
#define VERIFY_UNCERTIFIED      0x00000001
#define VERIFY_CERTIFIED        0x00000002

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

extern BOOL GetDriverCertificationStatus(PCTSTR);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __VERIFY_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vmanpset.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       vmanpset.h
 *  Content:    Voice Manager property sets.
//@@BEGIN_MSINTERNAL
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  10/15/98    dereks  Created.
//@@END_MSINTERNAL
 *
 ***************************************************************************/

#ifndef __VMANPSET_H__
#define __VMANPSET_H__

#ifdef	__cplusplus
extern "C" {
#endif // __cplusplus

typedef enum 
{
    DSPROPERTY_VMANAGER_MODE = 0,
    DSPROPERTY_VMANAGER_PRIORITY,
    DSPROPERTY_VMANAGER_STATE
} DSPROPERTY_VMANAGER;

typedef enum 
{
    DSPROPERTY_VMANAGER_MODE_DEFAULT = 0,
    DSPROPERTY_VMANAGER_MODE_AUTO,
    DSPROPERTY_VMANAGER_MODE_REPORT,
    DSPROPERTY_VMANAGER_MODE_USER
} VmMode;
//@@BEGIN_MSINTERNAL
#define DSPROPERTY_VMANAGER_MODE_FIRST DSPROPERTY_VMANAGER_MODE_DEFAULT
#define DSPROPERTY_VMANAGER_MODE_LAST DSPROPERTY_VMANAGER_MODE_USER
//@@END_MSINTERNAL

typedef enum 
{
    DSPROPERTY_VMANAGER_STATE_PLAYING3DHW = 0,
    DSPROPERTY_VMANAGER_STATE_SILENT,
    DSPROPERTY_VMANAGER_STATE_BUMPED,
    DSPROPERTY_VMANAGER_STATE_PLAYFAILED
} VmState;

// Voice Manager property set identifier {62A69BAE-DF9D-11d1-99A6-00C04FC99D46}
DEFINE_GUID(DSPROPSETID_VoiceManager, 0x62a69bae, 0xdf9d, 0x11d1, 0x99, 0xa6, 0x0, 0xc0, 0x4f, 0xc9, 0x9d, 0x46);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __VMANPSET_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vmaxhead.h ===
/***************************************************************************
 *
 *  Copyright (C) 1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       vmaxintheader.h
 *  Content:    
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  4/22/98    jstokes  Created
 *
 ***************************************************************************/

#if !defined(VMAXINTHEADER_HEADER)
#define VMAXINTHEADER_HEADER
#pragma once

// ---------------------------------------------------------------------------
// Enumerations

// Output channel tags
enum EChannel {
	tagLeft,
	tagRight,
	echannelCount
};

// Filter tags, used as alias for EChannel tags
enum EFilter {
	tagDelta,
	tagSigma,
	efilterCount
};

// Parameters
enum EParameter {
	tagAzimuth,
	tagElevation,
	tagDistance,
	eparameterCount
};

// Properties
enum EProperty {
	tagValue,
	tagMinimum,
	tagMaximum,
	tagResolution,
	epropertyCount
};

// Localization modes
enum ELocalizationMode {
	tagNoLocalization,
	tagStereo,
	tagVMAx,
	tagOldDS3DHEL,
	elocalizationmodeCount
};

// Loudspeaker configurations
enum ESpeakerConfig {
	tagSpeakers10Degrees,
	tagSpeakers20Degrees,
	tagHeadphones,
	espeakerconfigCount
};

// Sample rates
enum ESampleRate {
	tag8000Hz,
	tag11025Hz,
	tag16000Hz,
	tag22050Hz,
	tag32000Hz,
	tag44100Hz,
	tag48000Hz,
	esamplerateCount
};

// Filter methods
enum EFilterMethod {
	tagCanonical,
	tagJackson,
	efiltermethodCount
};

// DirectSound cooperative levels
enum ECoopLevel {
	tagNormal,
	tagPriority,
	tagExclusive,
	ecooplevelCount
};

// DirectSound speaker configurations
enum EDSSpeakerConfig {
	tagDSHeadphones,
	tagDSSpeakers5Degrees,
	tagDSSpeakers10Degrees,
	tagDSSpeakers20Degrees,
	edsspeakerconfigCount
};

#endif

// End of VMAXINTHEADER.H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vmaxcoef.inl ===
/***************************************************************************
 *
 *  Copyright (C) 1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       vmaxintcoeffs.h
 *  Content:    
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  4/22/98    jstokes  Created
 *
 ***************************************************************************/

#if !defined(VMAXINTCOEFFS_INLINE)
#define VMAXINTCOEFFS_INLINE
#pragma once

// ---------------------------------------------------------------------------
// Make sure inlines are out-of-line in debug version

#if !defined(_DEBUG)
#define INLINE _inline
#else
#define INLINE
#endif

// ---------------------------------------------------------------------------
// Global helper functions

// Convert number of biquads to corresponding number of biquad coefficients
INLINE UINT NumBiquadsToNumBiquadCoeffs(const UINT CuiNumBiquads)
{
	return CuiNumBiquads * ebiquadcoefftypeCount;
}

// Convert number of biquad coefficients to corresponding number of biquads
INLINE UINT NumBiquadCoeffsToNumBiquads(const UINT CuiNumBiquadCoeffs)
{
	return CuiNumBiquadCoeffs / ebiquadcoefftypeCount;
}

// Convert number of canonical coefficients to number of A or B coefficients in canonical filter (filter half)
INLINE UINT NumCanonicalCoeffsToHalf(const UINT CuiNumCanonicalCoeffs)
{
	return (CuiNumCanonicalCoeffs + 1) / ecanonicalcoefftypeCount;
}

#ifndef BUILD_LUT
// Convert floating-point biquad coefficient to SHORT biquad coefficient (by scaling)
INLINE SHORT FloatBiquadCoeffToShortBiquadCoeff(const float CfBiquadCoeff)
{
	return (SHORT)(MAX_SHORT * CfBiquadCoeff);
}
#endif // BUILD_LUT

#endif

// End of VMAXINTCOEFFS.INL
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vmaxcoef.h ===
/***************************************************************************
 *
 *  Copyright (C) 1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       vmaxintcoeffs.h
 *  Content:    
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  4/22/98    jstokes  Created
 *
 ***************************************************************************/


#if !defined(VMAXINTCOEFFS_HEADER)
#define VMAXINTCOEFFS_HEADER
#pragma once

// ---------------------------------------------------------------------------
// Enumerations

// Canonical coefficient types
enum ECanonicalCoeffType {
	tagCanonicalB,
	tagCanonicalA,
	ecanonicalcoefftypeCount
};

// Biquad coefficients
enum EBiquadCoeffType {
	tagBiquadB2,
	tagBiquadB1,
	tagBiquadB0,
	tagBiquadA2,
	tagBiquadA1,
	ebiquadcoefftypeCount
};

// ---------------------------------------------------------------------------
// Defines

#define NumBiquadsToNumCanonicalCoeffs(expr) (4 * expr + 1)
#define NumBiquadsToNumCanonicalCoeffsHalf(expr) (2 * expr + 1)

#ifdef NOKS
// Coefficient formats
typedef enum {
	FLOAT_COEFF,
	SHORT_COEFF,
	KSDS3D_COEFF_COUNT
} KSDS3D_HRTF_COEFF_FORMAT;

// HRTF filter quality levels
typedef enum {
	FULL_FILTER,
	LIGHT_FILTER,
	KSDS3D_FILTER_QUALITY_COUNT
} KSDS3D_HRTF_FILTER_QUALITY;

// Filter methods
typedef enum {
	DIRECT_FORM,
	CASCADE_FORM,
	KSDS3D_FILTER_METHOD_COUNT
} KSDS3D_HRTF_FILTER_METHOD;

typedef struct {
    KSDS3D_HRTF_FILTER_METHOD    FilterMethod;
    KSDS3D_HRTF_COEFF_FORMAT     CoeffFormat;
} KSDS3D_HRTF_FILTER_FORMAT_MSG, *PKSDS3D_HRTF_FILTER_FORMAT_MSG;

#endif

#ifdef __cplusplus

// ---------------------------------------------------------------------------
// Constants

// Azimuth
#define CuiMaxAzimuthBins       36
#define Cd3dvalAzimuthRange     180.0f
#define Cd3dvalMinAzimuth       -Cd3dvalAzimuthRange
#define Cd3dvalMaxAzimuth       Cd3dvalAzimuthRange

// Elevation
#define CuiNumElevationBins     13
#define Cd3dvalMinElevationData -40.0f
#define Cd3dvalMaxElevationData 80.0f
#define Cd3dvalElevationResolution ((Cd3dvalMaxElevationData - Cd3dvalMinElevationData) / (CuiNumElevationBins - 1))
#define Cd3dvalElevationRange   90.0f
#define Cd3dvalMinElevation     -Cd3dvalElevationRange
#define Cd3dvalMaxElevation     Cd3dvalElevationRange

// Total number of biquad coefficients
// MIGHT CHANGE IF COEFFICIENTS CHANGE
#define CuiTotalBiquadCoeffs    302890  

// Maximum number of biquads in fixed-point filter
// MIGHT CHANGE IF COEFFICIENTS CHANGE
#define CbyMaxBiquads 4

// Maximum magnitude of a biquad coefficient
#define CfMaxBiquadCoeffMagnitude   1.0f

// Maximum magnitude of a canonical coefficient
#define CfMaxCanonicalCoeffMagnitude    50.0f

// ---------------------------------------------------------------------------
// External data

// Floating-point biquad coefficients
extern const FLOAT CafBiquadCoeffs[CuiTotalBiquadCoeffs];

// Floating-point biquad coefficient offset offsets
extern const DWORD CaadwBiquadCoeffOffsetOffset[KSDS3D_FILTER_QUALITY_COUNT][espeakerconfigCount];

// Floating-point biquad coefficient offsets
extern const WORD CaaaaawBiquadCoeffOffset[KSDS3D_FILTER_QUALITY_COUNT][espeakerconfigCount][esamplerateCount][CuiNumElevationBins][CuiMaxAzimuthBins];

// Number of floating-point biquad coefficients
extern const BYTE CaaaaaabyNumBiquadCoeffs[KSDS3D_FILTER_QUALITY_COUNT][espeakerconfigCount][esamplerateCount][efilterCount][CuiNumElevationBins][CuiMaxAzimuthBins];

// Overlap buffer lengths
extern const size_t CaastFilterOverlapLength[KSDS3D_FILTER_QUALITY_COUNT][esamplerateCount];
extern const size_t CaastFilterMuteLength[KSDS3D_FILTER_QUALITY_COUNT][esamplerateCount];
extern const size_t CastOutputOverlapLength[esamplerateCount];

// Number of azimuth bins
extern const UINT CauiNumAzimuthBins[CuiNumElevationBins];

#endif // __cplusplus

// ---------------------------------------------------------------------------
// Global helper functions

UINT NumBiquadsToNumBiquadCoeffs(const UINT CuiNumBiquads);
UINT NumBiquadCoeffsToNumBiquads(const UINT CuiNumBiquadCoeffs);
UINT NumBiquadCoeffsToNumCanonicalCoeffs(const UINT CuiNumBiquadCoeffs);
UINT NumCanonicalCoeffsToHalf(const UINT CuiNumCanonicalCoeffs);
SHORT FloatBiquadCoeffToShortBiquadCoeff(const FLOAT CfBiquadCoeff);

// ---------------------------------------------------------------------------
// Include inline definitions inline in release version

#if !defined(_DEBUG)
#include "vmaxcoef.inl"
#endif

#endif

// End of VMAXCOEF.H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vxdvad.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       vxdvad.h
 *  Content:    VxD Virtual Audio Device class
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  1/23/97     dereks  Created
 *
 ***************************************************************************/

#ifndef __VXDVAD_H__
#define __VXDVAD_H__

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

#define VIDMEMONLY
//#include "ddheap.h"
#include "dmemmgr.h"

#ifdef __cplusplus
}
#endif // __cplusplus

#ifdef __cplusplus

typedef struct tagDYNALOAD_DDRAW
{
    DYNALOAD Header;

    LPVMEMHEAP (WINAPI *VidMemInit)        (DWORD, FLATPTR, FLATPTR, DWORD, DWORD);
    void       (WINAPI *VidMemFini)        (LPVMEMHEAP);
    DWORD      (WINAPI *VidMemAmountFree)  (LPVMEMHEAP);
    DWORD      (WINAPI *VidMemLargestFree) (LPVMEMHEAP);
    FLATPTR    (WINAPI *VidMemAlloc)       (LPVMEMHEAP, DWORD, DWORD);
    void       (WINAPI *VidMemFree)        (LPVMEMHEAP, FLATPTR);
} DYNALOAD_DDRAW, *LPDYNALOAD_DDRAW;

// Forward declaration
class CVxdMemBuffer;

// The Vxd Audio Device class
class CVxdRenderDevice : public CMxRenderDevice, private CUsesEnumStandardFormats
{
    friend class CVxdPrimaryRenderWaveBuffer;
    friend class CVxdSecondaryRenderWaveBuffer;
    friend class CHybridSecondaryRenderWaveBuffer;

private:
    DYNALOAD_DDRAW                  m_dlDDraw;

protected:
    CVxdPropertySet *               m_pPropertySet;                 // Property set object
    CVxdPrimaryRenderWaveBuffer *   m_pWritePrimaryBuffer;          // Primary buffer with write access
    DSDRIVERDESC                    m_dsdd;                         // Vxd driver description
    HANDLE                          m_hHal;                         // Driver handle
    HANDLE                          m_hHwBuffer;                    // Primary buffer handle
    LPBYTE                          m_pbHwBuffer;                   // Primary buffer memory
    DWORD                           m_cbHwBuffer;                   // Size of above buffer
    LPVMEMHEAP                      m_pDriverHeap;                  // Driver memory heap
    HWAVEOUT                        m_hwo;                          // waveOut device handle
    LARGE_INTEGER                   m_liDriverVersion;              // Driver version number

public:
    CVxdRenderDevice(void);
    virtual ~CVxdRenderDevice(void);

    // Driver enumeration
    virtual HRESULT EnumDrivers(CObjectList<CDeviceDescription> *);

    // Creation
    virtual HRESULT Initialize(CDeviceDescription *);

    // Device capabilities
    virtual HRESULT GetCaps(LPDSCAPS);
    virtual HRESULT GetCertification(LPDWORD, BOOL);

    // Buffer management
    virtual HRESULT CreatePrimaryBuffer(DWORD, LPVOID, CPrimaryRenderWaveBuffer **);
    virtual HRESULT CreateSecondaryBuffer(LPCVADRBUFFERDESC, LPVOID, CSecondaryRenderWaveBuffer **);
    virtual HRESULT CreateVxdSecondaryBuffer(LPCVADRBUFFERDESC, LPVOID, CSysMemBuffer *, CVxdSecondaryRenderWaveBuffer **);

protected:
    virtual HRESULT LockMixerDestination(DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD);
    virtual HRESULT UnlockMixerDestination(LPVOID, DWORD, LPVOID, DWORD);

private:
    HRESULT AcquireDDraw(void);
    void ReleaseDDraw(void);
    BOOL EnumStandardFormatsCallback(LPCWAVEFORMATEX);
    BOOL CanMixInRing0(void);
};

// VxD property set object
class CVxdPropertySet : public CPropertySet
{
private:
    LPVOID                  m_pDsDriverPropertySet; // Driver property set object
    LPVOID                  m_pvInstance;           // Instance identifier

public:
    CVxdPropertySet(LPVOID);
    virtual ~CVxdPropertySet(void);

    // Initialization
    virtual HRESULT Initialize(HANDLE);

    // Property support
    virtual HRESULT QuerySupport(REFGUID, ULONG, PULONG);
    virtual HRESULT QuerySetSupport(REFGUID);

    // Property data
    virtual HRESULT GetProperty(REFGUID, ULONG, LPVOID, ULONG, LPVOID, PULONG);
    virtual HRESULT SetProperty(REFGUID, ULONG, LPVOID, ULONG, LPVOID, ULONG);
    virtual HRESULT GetDsProperty(REFGUID, ULONG, LPVOID, ULONG);
    virtual HRESULT SetDsProperty(REFGUID, ULONG, LPVOID, ULONG);
};

inline HRESULT CVxdPropertySet::GetDsProperty(REFGUID guid, ULONG ulId, LPVOID pvData, ULONG cbData)
{
    return GetProperty(guid, ulId, NULL, 0, pvData, &cbData);
}

inline HRESULT CVxdPropertySet::SetDsProperty(REFGUID guid, ULONG ulId, LPVOID pvData, ULONG cbData)
{
    return SetProperty(guid, ulId, NULL, 0, pvData, cbData);
}

// VxD 3D listener
class CVxd3dListener : public C3dListener
{
    friend class CVxd3dListener;

protected:
    CVxdPropertySet *           m_pPropertySet;         // Property set object
    BOOL                        m_fAllocated;           // Is the hardware listener allocated?

public:
    CVxd3dListener(CVxdPropertySet *);
    virtual ~CVxd3dListener(void);

    // Initialization
    virtual HRESULT Initialize(void);

    // Commiting deferred data
    virtual HRESULT CommitDeferred(void);

    // Listener/world properties
    virtual HRESULT SetDistanceFactor(FLOAT, BOOL);
    virtual HRESULT SetDopplerFactor(FLOAT, BOOL);
    virtual HRESULT SetRolloffFactor(FLOAT, BOOL);
    virtual HRESULT SetOrientation(REFD3DVECTOR, REFD3DVECTOR, BOOL);
    virtual HRESULT SetPosition(REFD3DVECTOR, BOOL);
    virtual HRESULT SetVelocity(REFD3DVECTOR, BOOL);
    virtual HRESULT SetAllParameters(LPCDS3DLISTENER, BOOL);

    // Speaker configuration
    virtual HRESULT SetSpeakerConfig(DWORD);

    // Listener location
    virtual DWORD GetListenerLocation(void);
};

inline DWORD CVxd3dListener::GetListenerLocation(void)
{
    return C3dListener::GetListenerLocation() | DSBCAPS_LOCHARDWARE;
}

// VxD 3D object
class CVxd3dObject : public C3dObject
{
protected:
    CVxdPropertySet *           m_pPropertySet;         // Property set object

public:
    CVxd3dObject(CVxd3dListener *, CVxdPropertySet *, BOOL);
    virtual ~CVxd3dObject(void);

    // Initialization
    virtual HRESULT Initialize(void);

    // Commiting deferred data
    virtual HRESULT CommitDeferred(void);

    // Object properties
    virtual HRESULT SetConeAngles(DWORD, DWORD, BOOL);
    virtual HRESULT SetConeOrientation(REFD3DVECTOR, BOOL);
    virtual HRESULT SetConeOutsideVolume(LONG, BOOL);
    virtual HRESULT SetMaxDistance(FLOAT, BOOL);
    virtual HRESULT SetMinDistance(FLOAT, BOOL);
    virtual HRESULT SetMode(DWORD, BOOL);
    virtual HRESULT SetPosition(REFD3DVECTOR, BOOL);
    virtual HRESULT SetVelocity(REFD3DVECTOR, BOOL);
    virtual HRESULT SetAllParameters(LPCDS3DBUFFER, BOOL);

    // Buffer recalc
    virtual HRESULT Recalc(DWORD, DWORD);

    // Object location
    virtual DWORD GetObjectLocation(void);
};

inline DWORD CVxd3dObject::GetObjectLocation(void)
{
    return DSBCAPS_LOCHARDWARE;
}

// VxD primary buffer
class CVxdPrimaryRenderWaveBuffer : public CPrimaryRenderWaveBuffer
{
private:
    CVxdRenderDevice *  m_pVxdDevice;           // Parent device

public:
    CVxdPrimaryRenderWaveBuffer(CVxdRenderDevice *, LPVOID);
    virtual ~CVxdPrimaryRenderWaveBuffer(void);

    // Initialization
    virtual HRESULT Initialize(DWORD);

    // Access rights
    virtual HRESULT RequestWriteAccess(BOOL);

    // Buffer data
    virtual HRESULT Lock(DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD);
    virtual HRESULT Unlock(LPVOID, DWORD, LPVOID, DWORD);
    virtual HRESULT CommitToDevice(DWORD, DWORD);

    // Buffer control
    virtual HRESULT GetState(LPDWORD);
    virtual HRESULT SetState(DWORD);
    virtual HRESULT GetCursorPosition(LPDWORD, LPDWORD);

    // Owned objects
    virtual HRESULT CreatePropertySet(CPropertySet **);
    virtual HRESULT Create3dListener(C3dListener **);
};

// VxD/Emulated wrapper secondary buffer
class CHybridSecondaryRenderWaveBuffer : public CSecondaryRenderWaveBuffer
{
private:
    CVxdRenderDevice *              m_pVxdDevice;       // Parent device
    CSecondaryRenderWaveBuffer *    m_pBuffer;          // The real buffer
    LONG                            m_lVolume;          // Buffer volume
    LONG                            m_lPan;             // Buffer pan
    BOOL                            m_fMute;            // Buffer mute state
    DWORD                           m_dwPositionCache;  // Position cache

public:
    CHybridSecondaryRenderWaveBuffer(CVxdRenderDevice *, LPVOID);
    virtual ~CHybridSecondaryRenderWaveBuffer(void);

    // Initialization
    virtual HRESULT Initialize(LPCVADRBUFFERDESC, CHybridSecondaryRenderWaveBuffer *);

    // Resource allocation
    virtual HRESULT AcquireResources(DWORD);
    virtual HRESULT DuplicateResources(CHybridSecondaryRenderWaveBuffer *);
    virtual HRESULT StealResources(CSecondaryRenderWaveBuffer *);
    virtual HRESULT FreeResources(void);

    // Buffer creation
    virtual HRESULT Duplicate(CSecondaryRenderWaveBuffer **);

    // Buffer data
    virtual HRESULT Lock(DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD);
    virtual HRESULT Unlock(LPVOID, DWORD, LPVOID, DWORD);
    virtual HRESULT CommitToDevice(DWORD, DWORD);

    // Buffer control
    virtual HRESULT GetState(LPDWORD);
    virtual HRESULT SetState(DWORD);
    virtual HRESULT GetCursorPosition(LPDWORD, LPDWORD);
    virtual HRESULT SetCursorPosition(DWORD);

    // Buffer properties
    virtual HRESULT SetAttenuation(PDSVOLUMEPAN);
#ifdef FUTURE_MULTIPAN_SUPPORT
    virtual HRESULT SetChannelAttenuations(LONG, DWORD, const DWORD*,  const LONG*);
#endif // FUTURE_MULTIPAN_SUPPORT
    virtual HRESULT SetFrequency(DWORD, BOOL fClamp =FALSE);
    virtual HRESULT SetMute(BOOL);

    // Buffer position notifications
    virtual HRESULT SetNotificationPositions(DWORD, LPCDSBPOSITIONNOTIFY);

    // Owned objects
    virtual HRESULT CreatePropertySet(CPropertySet **);
    virtual HRESULT Create3dObject(C3dListener *, C3dObject **);

private:
    virtual HRESULT AcquireHardwareResources(void);
    virtual HRESULT AcquireSoftwareResources(void);
    virtual HRESULT HandleResourceAcquisition(void);
    virtual BOOL HasAcquiredResources(void);
};

inline HRESULT CHybridSecondaryRenderWaveBuffer::StealResources(CSecondaryRenderWaveBuffer *)
{
    return DSERR_UNSUPPORTED;
}

inline BOOL CHybridSecondaryRenderWaveBuffer::HasAcquiredResources(void)
{
    return MAKEBOOL(m_pBuffer);
}

// VxD secondary buffer
class CVxdSecondaryRenderWaveBuffer : public CSecondaryRenderWaveBuffer
{
private:
    CVxdRenderDevice *  m_pVxdDevice;           // Parent device
    CVxdPropertySet *   m_pPropertySet;         // Property set object
    CVxdMemBuffer *     m_pHwMemBuffer;         // Hardware memory buffer
    HANDLE              m_hHwBuffer;            // Hardware buffer handle
    LPBYTE              m_pbHwBuffer;           // Hardware buffer memory
    DWORD               m_cbHwBuffer;           // Size of above buffer
    DWORD               m_dwState;              // Current buffer state
    DSVOLUMEPAN         m_dsvp;                 // Current attenuation levels
    BOOL                m_fMute;                // Current buffer mute state

public:
    CVxdSecondaryRenderWaveBuffer(CVxdRenderDevice *, LPVOID);
    virtual ~CVxdSecondaryRenderWaveBuffer(void);

    // Initialization
    virtual HRESULT Initialize(LPCVADRBUFFERDESC, CVxdSecondaryRenderWaveBuffer *, CSysMemBuffer *);

    // Buffer creation
    virtual HRESULT Duplicate(CSecondaryRenderWaveBuffer **);

    // Buffer data
    virtual HRESULT Lock(DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD);
    virtual HRESULT Unlock(LPVOID, DWORD, LPVOID, DWORD);
    virtual HRESULT CommitToDevice(DWORD, DWORD);

    // Buffer control
    virtual HRESULT GetState(LPDWORD);
    virtual HRESULT SetState(DWORD);
    virtual HRESULT GetCursorPosition(LPDWORD, LPDWORD);
    virtual HRESULT SetCursorPosition(DWORD);

    // Buffer properties
    virtual HRESULT SetAttenuation(PDSVOLUMEPAN);
#ifdef FUTURE_MULTIPAN_SUPPORT
    virtual HRESULT SetChannelAttenuations(LONG, DWORD, const DWORD*,  const LONG*);
#endif // FUTURE_MULTIPAN_SUPPORT
    virtual HRESULT SetFrequency(DWORD, BOOL fClamp =FALSE);
    virtual HRESULT SetMute(BOOL);

    // Buffer position notifications
    virtual HRESULT SetNotificationPositions(DWORD, LPCDSBPOSITIONNOTIFY);

    // Owned objects
    virtual HRESULT CreatePropertySet(CPropertySet **);
    virtual HRESULT Create3dObject(C3dListener *, C3dObject **);
};

// Utility hardware memory buffer object
class CVxdMemBuffer : public CDsBasicRuntime
{
private:
    LPVMEMHEAP          m_pHeap;                // Hardware memory heap
    DWORD               m_dwAllocExtra;         // Number of extra bytes to allocate
    DWORD               m_dwBuffer;             // Hardware memory buffer address
    DWORD               m_cbBuffer;             // Hardware memory buffer size
    LPDYNALOAD_DDRAW    m_pDlDDraw;             // Pointer to DDRAW function table

public:
    CVxdMemBuffer(LPVMEMHEAP, DWORD, LPDYNALOAD_DDRAW);
    virtual ~CVxdMemBuffer(void);

    // Initialization
    virtual HRESULT Initialize(DWORD);

    // Buffer properties
    virtual LPVMEMHEAP GetHeap(void);
    virtual DWORD GetAllocExtra(void);
    virtual DWORD GetAddress(void);
    virtual DWORD GetSize(void);
};

inline CVxdMemBuffer::CVxdMemBuffer(LPVMEMHEAP pHeap, DWORD dwAllocExtra, LPDYNALOAD_DDRAW pDlDDraw)
{
    m_pHeap = pHeap;
    m_dwAllocExtra = dwAllocExtra;
    m_dwBuffer = 0;
    m_cbBuffer = 0;
    m_pDlDDraw = pDlDDraw;
}

inline CVxdMemBuffer::~CVxdMemBuffer(void)
{
    if(m_dwBuffer)
    {
        // Just in case any CVxdMemBuffers outlive their creator:
        ASSERT(m_pDlDDraw->VidMemFree != NULL);
        m_pDlDDraw->VidMemFree(m_pHeap, m_dwBuffer);
    }
}

inline HRESULT CVxdMemBuffer::Initialize(DWORD cbBuffer)
{
    HRESULT                 hr  = DS_OK;

    m_cbBuffer = cbBuffer;

    if(m_pHeap)
    {
        m_dwBuffer = m_pDlDDraw->VidMemAlloc(m_pHeap, cbBuffer + m_dwAllocExtra, 1);
        hr = HRFROMP(m_dwBuffer);
    }

    return hr;
}

inline LPVMEMHEAP CVxdMemBuffer::GetHeap(void)
{
    return m_pHeap;
}

inline DWORD CVxdMemBuffer::GetAllocExtra(void)
{
    return m_dwAllocExtra;
}

inline DWORD CVxdMemBuffer::GetAddress(void)
{
    return m_dwBuffer;
}

inline DWORD CVxdMemBuffer::GetSize(void)
{
    return m_cbBuffer;
}

#endif // __cplusplus

#endif // __VXDVAD_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\winmain.cpp ===
/* Figure out why we need this */
void __stdcall wWinMain(int,int,int,int)
{
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vxdvad.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       vxdvad.cpp
 *  Content:    VxD Virtual Audio Device class
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  1/23/97     dereks  Created
 *  1999-2001   duganp  Fixes and updates
 *
 ***************************************************************************/

#ifdef NOVXD
#error vxdvad.cpp being built with NOVXD defined.
#endif

#include "dsoundi.h"
#include "dsvxd.h"

// Property set helper macros
#define GetDsPropertyQuick(set, id, data) \
            GetDsProperty(set, id, (LPVOID)(data), sizeof(*(data)))

#define SetDsPropertyQuick(set, id, data) \
            SetDsProperty(set, id, (LPVOID)(data), sizeof(*(data)))


/***************************************************************************
 *
 *  CVxdRenderDevice
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *     (void)
 *
 *  Returns:
 *     (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::CVxdRenderDevice"

CVxdRenderDevice::CVxdRenderDevice(void)
    : CMxRenderDevice(VAD_DEVICETYPE_VXDRENDER)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CVxdRenderDevice);

    // Initialize defaults
    m_pPropertySet = NULL;
    m_pWritePrimaryBuffer = NULL;
    m_hHal = NULL;
    m_hHwBuffer = NULL;
    m_pbHwBuffer = NULL;
    m_cbHwBuffer = DEF_PRIMARY_SIZE;
    m_pDriverHeap = NULL;
    m_hwo = NULL;
    m_liDriverVersion.QuadPart = 0;

    // DDRAW.DLL dynaload function table
    ZeroMemory(&m_dlDDraw, sizeof m_dlDDraw);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CVxdRenderDevice
 *
 *  Description:
 *      Object destructor
 *
 *  Arguments:
 *     (void)
 *
 *  Returns:
 *     (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::~CVxdRenderDevice"

CVxdRenderDevice::~CVxdRenderDevice(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CVxdRenderDevice);

    // Free the mixer
    FreeMixer();

    // Free the property set object
    if(m_pPropertySet)
    {
        ABSOLUTE_RELEASE(m_pPropertySet);
    }

    // Free the hardware primary buffer
    if(m_hHwBuffer)
    {
        VxdBufferRelease(m_hHwBuffer);
    }

    // Free the driver heap
    if(m_pDriverHeap && m_dsdd.dwHeapType & DSDHEAP_CREATEHEAP)
    {
        m_dlDDraw.VidMemFini(m_pDriverHeap);
    }

    // Close the driver
    if(m_hHal)
    {
        VxdDrvClose(m_hHal);
    }

    // Close the waveOut device
    if(m_hwo)
    {
        CloseWaveOut(&m_hwo);
    }

    // Free the DDRAW.DLL library
    ReleaseDDraw();

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  EnumDrivers
 *
 *  Description:
 *      Creates a list of driver GUIDs that can be used to initialize this
 *      device.
 *
 *  Arguments:
 *      CList* [in/out]: CList object that will be filled with DSDRVENUMDESC
 *                       structures.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::EnumDrivers"

HRESULT CVxdRenderDevice::EnumDrivers(CObjectList<CDeviceDescription> *plstDrivers)
{
    CDeviceDescription *    pDesc           = NULL;
    LPGUID                  pguidLast       = NULL;
    HRESULT                 hr, hrTemp;
    GUID                    guidLast;
    GUID                    guidThis;
    DSDRIVERDESC            dsdd;

    DPF_ENTER();

    // Make sure ddraw.dll is loaded
    hr = AcquireDDraw();

    // Make sure dsound.vxd is loaded
    if(SUCCEEDED(hr) && !g_hDsVxd)
    {
        DPF(DPFLVL_ERROR, "DSOUND.VXD not loaded");
        hr = DSERR_NODRIVER;
    }

    // Enumerate all VxD drivers
    while(SUCCEEDED(hr))
    {
        // Get the next driver description.  If we failed to get the
        // driver desc, it's probably just because there's no more drivers.
        hrTemp = VxdDrvGetNextDriverDesc(pguidLast, &guidThis, &dsdd);

        if(FAILED(hrTemp))
        {
            break;
        }

        // Create the device description object and add it to the
        // list
        pDesc = NEW(CDeviceDescription(m_vdtDeviceType, guidThis));
        hr = HRFROMP(pDesc);

        if(SUCCEEDED(hr))
        {
            pDesc->m_strName = dsdd.szDesc;
            pDesc->m_strPath = dsdd.szDrvname;
            pDesc->m_dwDevnode = dsdd.dnDevNode;

            GetWaveDeviceIdFromDevnode(dsdd.dnDevNode, FALSE, &pDesc->m_uWaveDeviceId);

            hr = HRFROMP(plstDrivers->AddNodeToList(pDesc));
        }

        RELEASE(pDesc);

        // Go on to the next device
        if(SUCCEEDED(hr))
        {
            guidLast = guidThis;
            pguidLast = &guidLast;
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the device.  If this function fails, the object should
 *      be immediately deleted.
 *
 *  Arguments:
 *      LPCDSDRVENUMDESC [in]: driver description.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::Initialize"

HRESULT CVxdRenderDevice::Initialize(CDeviceDescription *pDesc)
{
    LPWAVEFORMATEX          pwfxFormat  = NULL;
    HRESULT                 hr, hrTemp;

    DPF_ENTER();

    // Initialize the base class
    hr = CMxRenderDevice::Initialize(pDesc);

    // Make sure dsound.vxd is loaded
    if(SUCCEEDED(hr) && !g_hDsVxd)
    {
        DPF(DPFLVL_ERROR, "DSOUND.VXD not loaded");
        hr = DSERR_NODRIVER;
    }

    // Make sure ddraw.dll is loaded
    if(SUCCEEDED(hr))
    {
        hr = AcquireDDraw();
    }

    // Save the driver description
    if(SUCCEEDED(hr))
    {
        hr = VxdDrvGetDesc(pDesc->m_guidDeviceId, &m_dsdd);

        if(SUCCEEDED(hr))
        {
            DPF(DPFLVL_MOREINFO, "dwFlags = 0x%8.8lX", m_dsdd.dwFlags);
            DPF(DPFLVL_MOREINFO, "szDesc = %s", m_dsdd.szDesc);
            DPF(DPFLVL_MOREINFO, "szDrvname = %s", m_dsdd.szDrvname);
            DPF(DPFLVL_MOREINFO, "dnDevNode = 0x%8.8lX", m_dsdd.dnDevNode);
            DPF(DPFLVL_MOREINFO, "wVxdId = %u", m_dsdd.wVxdId);
            DPF(DPFLVL_MOREINFO, "wReserved = %u", m_dsdd.wReserved);
            DPF(DPFLVL_MOREINFO, "ulDeviceNum = %lu", m_dsdd.ulDeviceNum);
            DPF(DPFLVL_MOREINFO, "dwHeapType = %lu", m_dsdd.dwHeapType);
            DPF(DPFLVL_MOREINFO, "pvDirectDrawHeap = 0x%p", m_dsdd.pvDirectDrawHeap);
            DPF(DPFLVL_MOREINFO, "dwMemStartAddress = 0x%8.8lX", m_dsdd.dwMemStartAddress);
            DPF(DPFLVL_MOREINFO, "dwMemEndAddress = 0x%8.8lX", m_dsdd.dwMemEndAddress);
            DPF(DPFLVL_MOREINFO, "dwMemAllocExtra = %lu", m_dsdd.dwMemAllocExtra);
            DPF(DPFLVL_MOREINFO, "pvReserved1 = 0x%p", m_dsdd.pvReserved1);
            DPF(DPFLVL_MOREINFO, "pvReserved2 = 0x%p", m_dsdd.pvReserved2);
        }
        else
        {
            DPF(DPFLVL_ERROR, "Unable to get driver description");
        }
    }

    if(SUCCEEDED(hr) && (m_dsdd.dwFlags & DSDDESC_DOMMSYSTEMSETFORMAT))
    {
        ASSERT(m_dsdd.dwFlags & DSDDESC_DOMMSYSTEMOPEN);
        m_dsdd.dwFlags |= DSDDESC_DOMMSYSTEMOPEN;
    }

    // Get the driver version number
    if(SUCCEEDED(hr))
    {
        GetDriverVersion(&m_liDriverVersion);
    }

    // Get the default format
    if(SUCCEEDED(hr))
    {
        pwfxFormat = AllocDefWfx();
        hr = HRFROMP(pwfxFormat);
    }

    // Spin through standard formats, looking for one that works.  Within
    // OpenDriverCallback, we'll open the the waveOut device, open the driver,
    // initialize on-card memory and create the primary buffer.  OpenDriverCallback
    // expects m_dsded.guid to be initialized before calling, so set that
    // up while we're at it.
    if(SUCCEEDED(hr))
    {
        if(!EnumStandardFormats(pwfxFormat, pwfxFormat))
        {
            // If no formats work at all, the device is probably allocated
            hr = DSERR_ALLOCATED;
        }
    }

    // Create the primary buffer property set object.  Note that this property
    // set object does not have any instance data associated with it, and so
    // can only be used for global properties (i.e. speaker config).
    if(SUCCEEDED(hr) && !(m_dwAccelerationFlags & DIRECTSOUNDMIXER_ACCELERATIONF_NOHWPROPSETS))
    {
        m_pPropertySet = NEW(CVxdPropertySet(NULL));
        hr = HRFROMP(m_pPropertySet);
    }

    if(SUCCEEDED(hr) && m_pPropertySet)
    {
        hrTemp = m_pPropertySet->Initialize(m_hHwBuffer);

        // We only need to keep the property set around if the driver supports
        // DSPROPSETID_DirectSoundSpeakerConfig.  Each primary buffer object
        // will create it's own property set object.
        if(SUCCEEDED(hrTemp))
        {
            hrTemp = m_pPropertySet->QuerySetSupport(DSPROPSETID_DirectSoundSpeakerConfig);
        }

        // If we failed, that's ok.  We just won't support hardware property
        // sets on the device.
        if(FAILED(hrTemp))
        {
            RELEASE(m_pPropertySet);
        }
    }

    // Clean up
    MEMFREE(pwfxFormat);

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  AcquireDDraw
 *
 *  Description:
 *      Initializes the DDRAW function table if necessary.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::AcquireDDraw"

HRESULT CVxdRenderDevice::AcquireDDraw(void)
{
    const LPCSTR apszFunctions[] =
    {
        "VidMemInit",
        "VidMemFini",
        "VidMemAmountFree",
        "VidMemLargestFree",
        "VidMemAlloc",
        "VidMemFree"
    };

    HRESULT hr = DS_OK;
    DPF_ENTER();

    if (m_dlDDraw.Header.dwSize == 0)
    {
        m_dlDDraw.Header.dwSize = sizeof m_dlDDraw;
        if (!InitDynaLoadTable(TEXT("ddraw.dll"), apszFunctions, NUMELMS(apszFunctions), &m_dlDDraw.Header))
        {
            RPF(DPFLVL_ERROR, "Failed to load DDRAW.DLL");
            hr = DSERR_GENERIC;
        }
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  ReleaseDDraw
 *
 *  Description:
 *      Releases the DDRAW.DLL library if necessary.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::ReleaseDDraw"

void CVxdRenderDevice::ReleaseDDraw(void)
{
    DPF_ENTER();

    if (m_dlDDraw.Header.dwSize != 0)
    {
        FreeDynaLoadTable(&m_dlDDraw.Header);
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  GetCaps
 *
 *  Description:
 *      Fills a DSCAPS structure with the capabilities of the device.
 *
 *  Arguments:
 *      LPDSCAPS [out]: receives caps.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::GetCaps"

HRESULT CVxdRenderDevice::GetCaps(LPDSCAPS pCaps)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    ASSERT(sizeof(*pCaps) == pCaps->dwSize);

    // Get driver caps
    ZeroMemoryOffset(pCaps, pCaps->dwSize, sizeof(pCaps->dwSize));

    hr = VxdDrvGetCaps(m_hHal, (PDSDRIVERCAPS)((LPBYTE)pCaps + sizeof(pCaps->dwSize)));

    if(FAILED(hr))
    {
        DPF(DPFLVL_ERROR, "VxdDrvGetCaps failed with %s", HRESULTtoSTRING(hr));
    }

    // Mask off invalid flags
    if(SUCCEEDED(hr))
    {
        pCaps->dwFlags &= DSCAPS_VALIDDRIVERFLAGS;
    }

    // Fill in memory values
    if(SUCCEEDED(hr) && m_pDriverHeap)
    {
        pCaps->dwFreeHwMemBytes = m_dlDDraw.VidMemAmountFree(m_pDriverHeap);
        pCaps->dwMaxContigFreeHwMemBytes = m_dlDDraw.VidMemLargestFree(m_pDriverHeap);
    }

    // Handle acceleration flags
    if(SUCCEEDED(hr) && (m_dwAccelerationFlags & DIRECTSOUNDMIXER_ACCELERATIONF_NOHWBUFFERS))
    {
        pCaps->dwMaxHwMixingAllBuffers = 0;
        pCaps->dwMaxHwMixingStaticBuffers = 0;
        pCaps->dwMaxHwMixingStreamingBuffers = 0;
        pCaps->dwFreeHwMixingAllBuffers = 0;
        pCaps->dwFreeHwMixingStaticBuffers = 0;
        pCaps->dwFreeHwMixingStreamingBuffers = 0;
    }

    if(SUCCEEDED(hr) && ((m_dwAccelerationFlags & DIRECTSOUNDMIXER_ACCELERATIONF_NOHWBUFFERS) || (m_dwAccelerationFlags & DIRECTSOUNDMIXER_ACCELERATIONF_NOHW3D)))
    {
        pCaps->dwMaxHw3DAllBuffers = 0;
        pCaps->dwMaxHw3DStaticBuffers = 0;
        pCaps->dwMaxHw3DStreamingBuffers = 0;
        pCaps->dwFreeHw3DAllBuffers = 0;
        pCaps->dwFreeHw3DStaticBuffers = 0;
        pCaps->dwFreeHw3DStreamingBuffers = 0;
    }

    // Fill in the driver version
    if(SUCCEEDED(hr))
    {
        pCaps->dwReserved1 = m_liDriverVersion.LowPart;
        pCaps->dwReserved2 = m_liDriverVersion.HighPart;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetCertification
 *
 *  Description:
 *      Returns the certification status of the driver.
 *
 *  Arguments:
 *      LPDWORD [out]: receives certification status.
 *      BOOL [in]: whether we're called by GetCaps, ignored for vxd's
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::GetCertification"

HRESULT CVxdRenderDevice::GetCertification(LPDWORD pdwCertification, BOOL)
{
    DWORD                   dwSum;
    LPSTR                   psz;

    DPF_ENTER();

    // Figure out if we're running on a certified driver.  Sum of driver
    // filename chars + DSCAPS_FILENAMECOOKIE mod DSCAPS_FILENAMEMODVALUE
    // must equal dsDrvDesc.wReserved.
    for(psz = m_dsdd.szDrvname, dwSum = DSCAPS_FILENAMECOOKIE; *psz; psz++)
    {
        dwSum += *psz;
    }

    *pdwCertification = (dwSum % DSCAPS_FILENAMEMODVALUE == m_dsdd.wReserved) ? VERIFY_CERTIFIED : VERIFY_UNCERTIFIED;

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  CreatePrimaryBuffer
 *
 *  Description:
 *      Creates a primary buffer object.
 *
 *  Arguments:
 *      DWORD [in]: buffer flags.
 *      LPVOID [in]: buffer instace identifier.
 *      CPrimaryRenderWaveBuffer ** [out]: receives pointer to primary buffer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::CreatePrimaryBuffer"

HRESULT CVxdRenderDevice::CreatePrimaryBuffer(DWORD dwFlags, LPVOID pvInstance, CPrimaryRenderWaveBuffer **ppBuffer)
{
    CVxdPrimaryRenderWaveBuffer *   pBuffer = NULL;
    HRESULT                         hr      = DS_OK;

    DPF_ENTER();

    pBuffer = NEW(CVxdPrimaryRenderWaveBuffer(this, pvInstance));
    hr = HRFROMP(pBuffer);

    if(SUCCEEDED(hr))
    {
        hr = pBuffer->Initialize(dwFlags);
    }

    if(SUCCEEDED(hr))
    {
        *ppBuffer = pBuffer;
    }
    else
    {
        RELEASE(pBuffer);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CreateSecondaryBuffer
 *
 *  Description:
 *      Creates a secondary wave buffer.
 *
 *  Arguments:
 *      LPVADRBUFFERDESC [in]: buffer description.
 *      LPVOID [in]: instance identifier.
 *      CSecondaryRenderWaveBuffer ** [out]: receives pointer to new wave
 *                                           buffer.  Use Release to free
 *                                           this object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::CreateSecondaryBuffer"

HRESULT CVxdRenderDevice::CreateSecondaryBuffer(LPCVADRBUFFERDESC pDesc, LPVOID pvInstance, CSecondaryRenderWaveBuffer **ppBuffer)
{
    CHybridSecondaryRenderWaveBuffer *  pBuffer = NULL;
    HRESULT                             hr;

    DPF_ENTER();

    pBuffer = NEW(CHybridSecondaryRenderWaveBuffer(this, pvInstance));
    hr = HRFROMP(pBuffer);

    if(SUCCEEDED(hr))
    {
        hr = pBuffer->Initialize(pDesc, NULL);
    }

    if(SUCCEEDED(hr))
    {
        *ppBuffer = pBuffer;
    }
    else
    {
        RELEASE(pBuffer);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CreateVxdSecondaryBuffer
 *
 *  Description:
 *      Creates a secondary wave buffer.
 *
 *  Arguments:
 *      LPVADRBUFFERDESC [in]: buffer description.
 *      LPVOID [in]: instance identifier.
 *      CSecondaryRenderWaveBuffer ** [out]: receives pointer to new wave
 *                                           buffer.  Use Release to free
 *                                           this object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::CreateVxdSecondaryBuffer"

HRESULT CVxdRenderDevice::CreateVxdSecondaryBuffer(LPCVADRBUFFERDESC pDesc, LPVOID pvInstance, CSysMemBuffer *pSysMemBuffer, CVxdSecondaryRenderWaveBuffer **ppBuffer)
{
    CVxdSecondaryRenderWaveBuffer * pBuffer = NULL;
    HRESULT                         hr;

    DPF_ENTER();

    pBuffer = NEW(CVxdSecondaryRenderWaveBuffer(this, pvInstance));
    hr = HRFROMP(pBuffer);

    if(SUCCEEDED(hr))
    {
        hr = pBuffer->Initialize(pDesc, NULL, pSysMemBuffer);
    }

    if(SUCCEEDED(hr))
    {
        *ppBuffer = pBuffer;
    }
    else
    {
        RELEASE(pBuffer);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  LockMixerDestination
 *
 *  Description:
 *      Locks the mixer destination for writes.
 *
 *  Arguments:
 *      DWORD [in]: starting position.
 *      DWORD [in]: amount to lock.
 *      LPVOID * [out]: receives first lock pointer.
 *      LPDWORD [out]: receives first lock size.
 *      LPVOID * [out]: receives second lock pointer.
 *      LPDWORD [out]: receives second lock size.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::LockMixerDestination"

HRESULT CVxdRenderDevice::LockMixerDestination(DWORD ibLock, DWORD cbLock, LPVOID *ppv1, LPDWORD pcb1, LPVOID *ppv2, LPDWORD pcb2)
{
    LOCKCIRCULARBUFFER      lcb;
    HRESULT                 hr;

    DPF_ENTER();

    lcb.pHwBuffer = m_hHwBuffer;
    lcb.pvBuffer = m_pbHwBuffer;
    lcb.cbBuffer = m_cbHwBuffer;
    lcb.fPrimary = TRUE;
    lcb.fdwDriverDesc = m_dsdd.dwFlags;
    lcb.ibRegion = ibLock;
    lcb.cbRegion = min(cbLock, m_cbHwBuffer);

    hr = LockCircularBuffer(&lcb);

    if(SUCCEEDED(hr) && ppv1)
    {
        *ppv1 = lcb.pvLock[0];
    }

    if(SUCCEEDED(hr) && pcb1)
    {
        *pcb1 = lcb.cbLock[0];
    }

    if(SUCCEEDED(hr) && ppv2)
    {
        *ppv2 = lcb.pvLock[1];
    }

    if(SUCCEEDED(hr) && pcb2)
    {
        *pcb2 = lcb.cbLock[1];
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  UnlockMixerDestination
 *
 *  Description:
 *      Unlocks the mixer destination for writes.
 *
 *  Arguments:
 *      LPVOID [in]: first lock pointer.
 *      DWORD [in]: first lock size.
 *      LPVOID [in]: second lock pointer.
 *      DWORD [in]: second lock size.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::UnlockMixerDestination"

HRESULT CVxdRenderDevice::UnlockMixerDestination(LPVOID pv1, DWORD cb1, LPVOID pv2, DWORD cb2)
{
    LOCKCIRCULARBUFFER      lcb;
    HRESULT                 hr;

    DPF_ENTER();

    lcb.pHwBuffer = m_hHwBuffer;
    lcb.pvBuffer = m_pbHwBuffer;
    lcb.cbBuffer = m_cbHwBuffer;
    lcb.fPrimary = TRUE;
    lcb.fdwDriverDesc = m_dsdd.dwFlags;

    lcb.pvLock[0] = pv1;
    lcb.cbLock[0] = cb1;

    lcb.pvLock[1] = pv2;
    lcb.cbLock[1] = cb2;

    hr = UnlockCircularBuffer(&lcb);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  EnumStandardFormatsCallback
 *
 *  Description:
 *      Callback function for EnumStandardFormats used when calling
 *      CVxdRenderDevice::Initialize.
 *
 *  Arguments:
 *      LPWAVEFORMATEX [in]: format.
 *
 *  Returns:
 *      BOOL: TRUE to continue enumerating.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::EnumStandardFormatsCallback"

BOOL CVxdRenderDevice::EnumStandardFormatsCallback(LPCWAVEFORMATEX pwfx)
{
    CMixDest *              pMixDest    = NULL;
    CNaGrDest *             pNaGrDest   = NULL;
    CThDest *               pThDest     = NULL;
    HRESULT                 hr          = DS_OK;
    NAGRDESTDATA            ngdd;

    DPF_ENTER();

    // Open the waveOut device
    if(m_dsdd.dwFlags & DSDDESC_DOMMSYSTEMOPEN)
    {
        hr = OpenWaveOut(&m_hwo, m_pDeviceDescription->m_uWaveDeviceId, pwfx);
    }

    // Open the driver
    if(SUCCEEDED(hr))
    {
        hr = VxdDrvOpen(m_pDeviceDescription->m_guidDeviceId, &m_hHal);

        if(FAILED(hr))
        {
            DPF(DPFLVL_ERROR, "Unable to open driver");
        }
    }

    // Handle on-card memory management
    if(SUCCEEDED(hr))
    {
        if(m_dsdd.dwHeapType & DSDHEAP_USEDIRECTDRAWHEAP)
        {
            m_pDriverHeap = (LPVMEMHEAP)m_dsdd.pvDirectDrawHeap;
        }
        else if(m_dsdd.dwHeapType & DSDHEAP_CREATEHEAP)
        {
            m_pDriverHeap = m_dlDDraw.VidMemInit(VMEMHEAP_LINEAR, m_dsdd.dwMemStartAddress, m_dsdd.dwMemEndAddress, 0, 0);

            if(!m_pDriverHeap)
            {
                DPF(DPFLVL_ERROR, "Unable to initialize device memory heap");
                hr = DSERR_OUTOFMEMORY;
            }
        }
    }

    // Create the primary hardware buffer.  The buffer size is initialized to
    // DEF_PRIMARY_SIZE, giving the driver a hint as to how big we'd like
    // the buffer to be.
    if(SUCCEEDED(hr))
    {
        m_cbHwBuffer = DEF_PRIMARY_SIZE;
        m_pbHwBuffer = NULL;
        m_hHwBuffer = NULL;

        hr = VxdDrvCreateSoundBuffer(m_hHal, (LPWAVEFORMATEX)pwfx, DSBCAPS_PRIMARYBUFFER, 0, &m_cbHwBuffer, &m_pbHwBuffer, &m_hHwBuffer);

        if(SUCCEEDED(hr))
        {
            ASSERT(m_cbHwBuffer && m_pbHwBuffer && m_hHwBuffer);
        }
        else
        {
            DPF(DPFLVL_ERROR, "Unable to create hardware primary buffer (%s)", HRESULTtoSTRING(hr));
        }
    }

    // Create the mixer destination
    if(SUCCEEDED(hr))
    {
        ngdd.pBuffer = m_pbHwBuffer;
        ngdd.cbBuffer = m_cbHwBuffer;
        ngdd.hBuffer = m_hHwBuffer;
        ngdd.phwo = &m_hwo;
        ngdd.uDeviceId = m_pDeviceDescription->m_uWaveDeviceId;
        ngdd.fdwDriverDesc = m_dsdd.dwFlags;

        hr = DSERR_GENERIC;

        if(!(m_dwAccelerationFlags & DIRECTSOUNDMIXER_ACCELERATIONF_NORING0MIX) && CanMixInRing0())
        {
            pThDest = NEW(CThDest(&ngdd));
            hr = HRFROMP(pThDest);

            if(SUCCEEDED(hr))
            {
                hr = pThDest->New();
            }

            if(SUCCEEDED(hr))
            {
                DPF(DPFLVL_INFO, "Mixing in ring 0");
                pMixDest = pThDest;
            }
            else
            {
                pThDest->Terminate();
                DELETE(pThDest);
            }
        }

        if(FAILED(hr))
        {
            pNaGrDest = NEW(CNaGrDest(&ngdd));
            hr = HRFROMP(pNaGrDest);

            if(SUCCEEDED(hr))
            {
                DPF(DPFLVL_INFO, "Mixing in ring 3");
                pMixDest = pNaGrDest;
            }
            else
            {
                pNaGrDest->Terminate();
                DELETE(pNaGrDest);
            }
        }

        if(FAILED(hr))
        {
            DPF(DPFLVL_ERROR, "Unable to create mixer destination object");
        }
    }

    // Create the mixer
    if(SUCCEEDED(hr))
    {
        hr = CreateMixer(pMixDest, pwfx);
    }

    // Clean up
    if(FAILED(hr))
    {
        // Free the hardware primary buffer
        if(m_hHwBuffer)
        {
            VxdBufferRelease(m_hHwBuffer);
            m_hHwBuffer = NULL;
        }

        // Free the driver heap
        if(m_pDriverHeap)
        {
            if(m_dsdd.dwHeapType & DSDHEAP_CREATEHEAP)
            {
                m_dlDDraw.VidMemFini(m_pDriverHeap);
            }

            m_pDriverHeap = NULL;
        }

        // Close the driver
        if(m_hHal)
        {
            VxdDrvClose(m_hHal);
            m_hHal = NULL;
        }

        // Close the waveOut device
        if(m_hwo)
        {
            CloseWaveOut(&m_hwo);
        }
    }

    DPF_LEAVE(FAILED(hr));

    return FAILED(hr);
}


/***************************************************************************
 *
 *  CanMixInRing0
 *
 *  Description:
 *      Determines if the device should mix in ring 0 or ring 3.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      BOOL: TRUE to mix in ring 0.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdRenderDevice::CanMixInRing0"

BOOL CVxdRenderDevice::CanMixInRing0(void)
{
    BOOL                    fRing0              = FALSE;
    DWORD                   dwPageFileVersion   = 0;
    DWORD                   dwMaxSize           = 0;
    DWORD                   dwPagerType         = 0;
    LONG                    lVmcpdMajorVersion  = 0;
    LONG                    lVmcpdMinorVersion  = 0;
    LONG                    lLevel              = 0;

    DPF_ENTER();

    // We have to mix in ring 3 if any of the following are true:
    //  - Paging through DOS
    //  - A floating point coprocessor is not installed
    //  - VMCPD < version 4.02
    VxdGetPagefileVersion(&dwPageFileVersion, &dwMaxSize, &dwPagerType);
    VxdGetVmcpdVersion(&lVmcpdMajorVersion, &lVmcpdMinorVersion, &lLevel);

    if(0 == dwPageFileVersion || dwPagerType < 2)
    {
        DPF(DPFLVL_INFO, "Paging through DOS");
    }
    else if(lVmcpdMajorVersion < 4 || (4 == lVmcpdMajorVersion && lVmcpdMinorVersion < 2))
    {
        DPF(DPFLVL_INFO, "VMCPD version is %ld.%2.2ld - too low to mix in ring 0", lVmcpdMajorVersion, lVmcpdMinorVersion);
    }
    else if(lLevel < 3)
    {
        DPF(DPFLVL_INFO, "VMCPD coprocessor level is %ld - too low to mix in ring 0", lLevel);
    }
    else
    {
        fRing0 = TRUE;
    }

    DPF_LEAVE(fRing0);

    return fRing0;
}


/***************************************************************************
 *
 *  CVxdPrimaryRenderWaveBuffer
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CVxdRenderDevice * [in]: pointer to the parent object.
 *      LPVOID [in]: buffer instace identifier.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::CVxdPrimaryRenderWaveBuffer"

CVxdPrimaryRenderWaveBuffer::CVxdPrimaryRenderWaveBuffer(CVxdRenderDevice *pVxdDevice, LPVOID pvInstance)
    : CPrimaryRenderWaveBuffer(pVxdDevice, pvInstance)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CVxdPrimaryRenderWaveBuffer);

    // Initialize defaults
    m_pVxdDevice = pVxdDevice;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CVxdPrimaryRenderWaveBuffer
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::~CVxdPrimaryRenderWaveBuffer"

CVxdPrimaryRenderWaveBuffer::~CVxdPrimaryRenderWaveBuffer(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CVxdPrimaryRenderWaveBuffer);
    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      DWORD [in]: flags.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::Initialize"

HRESULT CVxdPrimaryRenderWaveBuffer::Initialize(DWORD dwFlags)
{
    HRESULT                 hr      = DS_OK;
    VADRBUFFERDESC          vrbd;

    DPF_ENTER();

    // Check for unsupported flags
    if(dwFlags & DSBCAPS_LOCSOFTWARE)
    {
        RPF(DPFLVL_ERROR, "Specified LOCSOFTWARE on a hardware primary buffer");
        hr = DSERR_INVALIDCALL;
    }

    // Initialize the base class
    if(SUCCEEDED(hr))
    {
        ZeroMemory(&vrbd, sizeof(vrbd));

        vrbd.dwFlags = dwFlags | DSBCAPS_LOCHARDWARE;
        vrbd.dwBufferBytes = m_pVxdDevice->m_cbHwBuffer;
        vrbd.pwfxFormat = m_pVxdDevice->m_pwfxFormat;

        hr = CPrimaryRenderWaveBuffer::Initialize(&vrbd, NULL);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  RequestWriteAccess
 *
 *  Description:
 *      Requests write access to the primary buffer.
 *
 *  Arguments:
 *      BOOL [in]: TRUE to request primary access, FALSE to relenquish it.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::RequestWriteAccess"

HRESULT CVxdPrimaryRenderWaveBuffer::RequestWriteAccess(BOOL fRequest)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(fRequest)
    {
        if(this != m_pVxdDevice->m_pWritePrimaryBuffer)
        {
            // Make sure no-one else has primary access
            if(m_pVxdDevice->m_pWritePrimaryBuffer)
            {
                RPF(DPFLVL_ERROR, "WRITEPRIMARY access already granted");
                hr = DSERR_OTHERAPPHASPRIO;
            }

            // Assign ownership
            if(SUCCEEDED(hr))
            {
                DPF(DPFLVL_INFO, "WRITEPRIMARY access granted to 0x%p", this);
                m_pVxdDevice->m_pWritePrimaryBuffer = this;
            }
        }
    }
    else
    {
        if(this == m_pVxdDevice->m_pWritePrimaryBuffer)
        {
            // Release ownership
            DPF(DPFLVL_INFO, "WRITEPRIMARY access released by 0x%p", this);
            m_pVxdDevice->m_pWritePrimaryBuffer = NULL;
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Lock
 *
 *  Description:
 *      Locks a region of the buffer.
 *
 *  Arguments:
 *      DWORD [in]: byte index into the buffer to lock from.
 *      DWORD [in]: size, in bytes, of the region to lock.
 *      LPVOID * [out]: receives pointer to region 1 of the lock.
 *      LPDWORD [out]: receives size of above region.
 *      LPVOID * [out]: receives pointer to region 2 of the lock.
 *      LPDWORD [out]: receives size of above region.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::Lock"

HRESULT CVxdPrimaryRenderWaveBuffer::Lock(DWORD ibLock, DWORD cbLock, LPVOID *ppv1, LPDWORD pcb1, LPVOID *ppv2, LPDWORD pcb2)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = m_pVxdDevice->LockMixerDestination(ibLock, cbLock, ppv1, pcb1, ppv2, pcb2);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Unlock
 *
 *  Description:
 *      Unlocks a region of the buffer.
 *
 *  Arguments:
 *      LPVOID [in]: pointer to region 1 of the lock.
 *      DWORD [in]: size of above region.
 *      LPVOID [in]: pointer to region 2 of the lock.
 *      DWORD [in]: size of above region.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::Unlock"

HRESULT CVxdPrimaryRenderWaveBuffer::Unlock(LPVOID pv1, DWORD cb1, LPVOID pv2, DWORD cb2)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = m_pVxdDevice->UnlockMixerDestination(pv1, cb1, pv2, cb2);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CommitToDevice
 *
 *  Description:
 *      Commits changed buffer wave data to the device.
 *
 *  Arguments:
 *      DWORD [in]: byte index into the system memory buffer of the changed
 *                  data.
 *      DWORD [in]: size, in bytes, of the changed data.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::CommitToDevice"

HRESULT CVxdPrimaryRenderWaveBuffer::CommitToDevice(DWORD ibCommit, DWORD cbCommit)
{
    LPVOID                  pvLock[2];
    DWORD                   cbLock[2];
    LPBYTE                  pbBuffer;
    HRESULT                 hr;

    DPF_ENTER();

    pbBuffer = m_pSysMemBuffer->GetPlayBuffer();

    hr = Lock(ibCommit, cbCommit, &pvLock[0], &cbLock[0], &pvLock[1], &cbLock[1]);

    if(SUCCEEDED(hr) && pvLock[0] && cbLock[0])
    {
        CopyMemory(pvLock[0], pbBuffer + ibCommit, cbLock[0]);
    }

    if(SUCCEEDED(hr) && pvLock[1] && cbLock[1])
    {
        CopyMemory(pvLock[1], pbBuffer, cbLock[1]);
    }

    if(SUCCEEDED(hr))
    {
        hr = Unlock(pvLock[0], cbLock[0], pvLock[1], cbLock[1]);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetState
 *
 *  Description:
 *      Gets buffer state.
 *
 *  Arguments:
 *      LPDWORD [out]: receives buffer state.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::GetState"

HRESULT CVxdPrimaryRenderWaveBuffer::GetState(LPDWORD pdwState)
{
    DPF_ENTER();

    *pdwState = m_pVxdDevice->m_dwMixerState;

    DPF_LEAVE_HRESULT(DS_OK);

    return DS_OK;
}


/***************************************************************************
 *
 *  SetState
 *
 *  Description:
 *      Sets buffer state.
 *
 *  Arguments:
 *      DWORD [in]: buffer state.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::SetState"

HRESULT CVxdPrimaryRenderWaveBuffer::SetState(DWORD dwState)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = m_pVxdDevice->SetMixerState(dwState);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetCursorPosition
 *
 *  Description:
 *      Gets the current play/write positions for the given buffer.
 *
 *  Arguments:
 *      LPDWORD [out]: receives play cursor position.
 *      LPDWORD [out]: receives write cursor position.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::GetCursorPosition"

HRESULT CVxdPrimaryRenderWaveBuffer::GetCursorPosition(LPDWORD pdwPlay, LPDWORD pdwWrite)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = VxdBufferGetPosition(m_pVxdDevice->m_hHwBuffer, pdwPlay, pdwWrite);

    if(FAILED(hr))
    {
        DPF(DPFLVL_ERROR, "VxdBufferGetPosition failed with %s", HRESULTtoSTRING(hr));
    }
    else if (m_pVxdDevice->m_dwMixerState & VAD_BUFFERSTATE_STARTED)
    {
        *pdwWrite = PadHardwareWriteCursor(*pdwWrite, m_pVxdDevice->m_cbHwBuffer, m_pVxdDevice->m_pwfxFormat);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CreatePropertySet
 *
 *  Description:
 *      Creates the property set object.
 *
 *  Arguments:
 *      CPropertySet ** [out]: receives pointer to the property set object.
 *                             The caller is responsible for freeing this
 *                             object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::CreatePropertySet"

HRESULT CVxdPrimaryRenderWaveBuffer::CreatePropertySet(CPropertySet **ppPropertySet)
{
    CVxdPropertySet *       pPropertySet    = NULL;
    HRESULT                 hr              = DS_OK;

    DPF_ENTER();

    if(m_pVxdDevice->m_dwAccelerationFlags & DIRECTSOUNDMIXER_ACCELERATIONF_NOHWPROPSETS)
    {
        RPF(DPFLVL_ERROR, "Tried to create a property set object with hardware property sets disabled");
        hr = DSERR_UNSUPPORTED;
    }

    if(SUCCEEDED(hr))
    {
        pPropertySet = NEW(CVxdPropertySet(m_pvInstance));
        hr = HRFROMP(pPropertySet);
    }

    if(SUCCEEDED(hr))
    {
        hr = pPropertySet->Initialize(m_pVxdDevice->m_hHwBuffer);
    }

    if(SUCCEEDED(hr))
    {
        *ppPropertySet = pPropertySet;
    }
    else
    {
        RELEASE(pPropertySet);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Create3dListener
 *
 *  Description:
 *      Creates the 3D listener.
 *
 *  Arguments:
 *      C3dListener ** [out]: receives pointer to the 3D listener object.
 *                            The caller is responsible for freeing this
 *                            object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPrimaryRenderWaveBuffer::Create3dListener"

HRESULT CVxdPrimaryRenderWaveBuffer::Create3dListener(C3dListener **pp3dListener)
{
    CVxd3dListener *        pVxd3dListener  = NULL;
    C3dListener *           p3dListener     = NULL;
    CVxdPropertySet *       pPropertySet    = NULL;
    HRESULT                 hr;

    DPF_ENTER();

    ASSERT(m_vrbd.dwFlags & DSBCAPS_CTRL3D);

    pPropertySet = NEW(CVxdPropertySet(m_pvInstance));
    hr = HRFROMP(pPropertySet);

    if(SUCCEEDED(hr))
    {
        hr = pPropertySet->Initialize(m_pVxdDevice->m_hHwBuffer);
    }

    if(FAILED(hr))
    {
        RELEASE(pPropertySet);
    }
    else
    {
        hr = pPropertySet->QuerySetSupport(DSPROPSETID_DirectSound3DListener);
    }

    if(SUCCEEDED(hr))
    {
        pVxd3dListener = NEW(CVxd3dListener(pPropertySet));
        hr = HRFROMP(pVxd3dListener);

        if(SUCCEEDED(hr))
        {
            hr = pVxd3dListener->Initialize();
        }

        if(SUCCEEDED(hr))
        {
            DPF(DPFLVL_INFO, "3D listener lives in HARDWARE");
            p3dListener = pVxd3dListener;
        }
        else
        {
            RELEASE(pVxd3dListener);
        }
    }
    else
    {
        p3dListener = NEW(C3dListener);
        hr = HRFROMP(p3dListener);

        if(SUCCEEDED(hr))
        {
            DPF(DPFLVL_INFO, "3D listener lives in SOFTWARE");
        }
        else
        {
            RELEASE(p3dListener);
        }
    }

    if(SUCCEEDED(hr))
    {
        ASSERT(p3dListener);
        *pp3dListener = p3dListener;
    }

    RELEASE(pPropertySet);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CHybridSecondaryRenderWaveBuffer
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CVxdRenderDevice * [in]: pointer to the parent device.
 *      LPVOID [in]: buffer instace identifier.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::CHybridSecondaryRenderWaveBuffer"

CHybridSecondaryRenderWaveBuffer::CHybridSecondaryRenderWaveBuffer(CVxdRenderDevice *pVxdDevice, LPVOID pvInstance)
    : CSecondaryRenderWaveBuffer(pVxdDevice, pvInstance)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CHybridSecondaryRenderWaveBuffer);

    // Initialize defaults
    m_pVxdDevice = pVxdDevice;
    m_pBuffer = NULL;
    m_lVolume = DSBVOLUME_MAX;
    m_lPan = DSBPAN_CENTER;
    m_fMute = FALSE;
    m_dwPositionCache = 0;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CHybridSecondaryRenderWaveBuffer
 *
 *  Description:
 *      Object destructor
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::~CHybridSecondaryRenderWaveBuffer"

CHybridSecondaryRenderWaveBuffer::~CHybridSecondaryRenderWaveBuffer(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CHybridSecondaryRenderWaveBuffer);

    // Free resources
    RELEASE(m_pBuffer);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the wave buffer object.  If this function fails, the
 *      object should be immediately deleted.
 *
 *  Arguments:
 *      LPVADRBUFFERDESC [in]: buffer description.
 *      CSecondaryRenderWaveBuffer * [in]: pointer to the buffer to duplicate
 *                                         from, or NULL to initialize as a
 *                                         new buffer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::Initialize"

HRESULT CHybridSecondaryRenderWaveBuffer::Initialize(LPCVADRBUFFERDESC pDesc, CHybridSecondaryRenderWaveBuffer *pSource)
{
    DWORD                   dwLocationFlags;
    HRESULT                 hr;

    DPF_ENTER();

    ASSERT(LXOR(pDesc, pSource));

    // Initialize the base class
    hr = CSecondaryRenderWaveBuffer::Initialize(pDesc, pSource);

    // Mask off the location flags since they're not used here (only in AcquireResources)
    dwLocationFlags = m_vrbd.dwFlags & DSBCAPS_LOCMASK;
    m_vrbd.dwFlags &= ~DSBCAPS_LOCMASK;

    // Set up the default buffer properties
    if(SUCCEEDED(hr) && pSource)
    {
        m_lVolume = pSource->m_lVolume;
        m_lPan = pSource->m_lPan;
        m_fMute = pSource->m_fMute;
    }

    // Acquire resources
    if(SUCCEEDED(hr) && !(m_vrbd.dwFlags & DSBCAPS_LOCDEFER))
    {
        if(pSource)
        {
            hr = DuplicateResources(pSource);
        }
        else
        {
            hr = AcquireResources(dwLocationFlags);
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  AcquireResources
 *
 *  Description:
 *      Acquires hardware resources for the buffer.
 *
 *  Arguments:
 *      DWORD [in]: location flags.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::AcquireResources"

HRESULT CHybridSecondaryRenderWaveBuffer::AcquireResources(DWORD dwLocationFlags)
{
    HRESULT                 hr  = DSERR_INVALIDCALL;

    DPF_ENTER();

    ASSERT(!HasAcquiredResources());

    // Try to acquire hardware resources
    if(!(dwLocationFlags & DSBCAPS_LOCSOFTWARE))
    {
        hr = AcquireHardwareResources();
    }

    // Try to acquire software resources
    if(FAILED(hr) && !(dwLocationFlags & DSBCAPS_LOCHARDWARE))
    {
        hr = AcquireSoftwareResources();
    }

    // Handle the resource acquisition
    if(SUCCEEDED(hr))
    {
        hr = HandleResourceAcquisition();
    }

    // Clean up
    if(FAILED(hr))
    {
        DPF(DPFLVL_ERROR, "Failed to acquire resources");
        FreeResources();
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  DuplicateResources
 *
 *  Description:
 *      Acquires hardware resources for the buffer.
 *
 *  Arguments:
 *      CHybridSecondaryRenderWaveBuffer * [in]: source buffer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::DuplicateResources"

HRESULT CHybridSecondaryRenderWaveBuffer::DuplicateResources(CHybridSecondaryRenderWaveBuffer *pSource)
{
    HRESULT                 hr;

    DPF_ENTER();

    ASSERT(!HasAcquiredResources());
    ASSERT(pSource->HasAcquiredResources());

    // Duplicate resources
    hr = pSource->m_pBuffer->Duplicate(&m_pBuffer);

    // Handle the resource acquisition
    if(SUCCEEDED(hr))
    {
        hr = HandleResourceAcquisition();
    }

    // Clean up
    if(FAILED(hr))
    {
        DPF(DPFLVL_ERROR, "Failed to duplicate resources");
        FreeResources();
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  AcquireHardwareResources
 *
 *  Description:
 *      Acquires hardware resources for the buffer.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::AcquireHardwareResources"

HRESULT CHybridSecondaryRenderWaveBuffer::AcquireHardwareResources(void)
{
    CVxdSecondaryRenderWaveBuffer * pVxdBuffer;
    VADRBUFFERDESC                  vrbd;
    HRESULT                         hr;

    DPF_ENTER();

    ASSERT(!HasAcquiredResources());

    CopyMemory(&vrbd, &m_vrbd, sizeof(m_vrbd));

    vrbd.guid3dAlgorithm = GUID_NULL;

    hr = m_pVxdDevice->CreateVxdSecondaryBuffer(&vrbd, m_pvInstance, m_pSysMemBuffer, &pVxdBuffer);

    // If we failed to create a 3D hardware buffer, and the app specified DS3DALG_NO_VIRTUALIZATION,
    // try to create a 2D hardware buffer with the No Virtualization (Pan 3D) control.
    if(FAILED(hr) && (m_vrbd.dwFlags & DSBCAPS_CTRL3D) && (DS3DALG_NO_VIRTUALIZATION == m_vrbd.guid3dAlgorithm))
    {
        vrbd.dwFlags &= ~DSBCAPS_CTRL3D;
        vrbd.dwFlags |= DSBCAPS_CTRLNOVIRT;
        hr = m_pVxdDevice->CreateVxdSecondaryBuffer(&vrbd, m_pvInstance, m_pSysMemBuffer, &pVxdBuffer);
    }

    if(SUCCEEDED(hr))
    {
        m_pBuffer = pVxdBuffer;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  AcquireSoftwareResources
 *
 *  Description:
 *      Acquires software resources for the buffer.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::AcquireSoftwareResources"

HRESULT CHybridSecondaryRenderWaveBuffer::AcquireSoftwareResources(void)
{
    CEmSecondaryRenderWaveBuffer *  pEmBuffer;
    VADRBUFFERDESC                  vrbd;
    HRESULT                         hr;

    DPF_ENTER();

    ASSERT(!HasAcquiredResources());

    // Always add DSBCAPS_GETCURRENTPOSITION2 because emulated secondary buffers
    // over VxD drivers should always return the proper position values- i.e.,
    // GetPosition1 applies only to emulation over wave APIs.
    CopyMemory(&vrbd, &m_vrbd, sizeof(m_vrbd));

    vrbd.dwFlags |= DSBCAPS_GETCURRENTPOSITION2;

    hr = m_pVxdDevice->CreateEmulatedSecondaryBuffer(&vrbd, m_pvInstance, m_pSysMemBuffer, &pEmBuffer);

    if(SUCCEEDED(hr))
    {
        m_pBuffer = pEmBuffer;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  HandleResourceAcquisition
 *
 *  Description:
 *      Handles the acquistion of hardware resources.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::HandleResourceAcquisition"

HRESULT CHybridSecondaryRenderWaveBuffer::HandleResourceAcquisition(void)
{
    BOOL                    fFound;
    DSVOLUMEPAN             dsvp;
    HRESULT                 hr;

    DPF_ENTER();

    ASSERT(HasAcquiredResources());

    // Remove the real buffer from the parent's list
    fFound = m_pDevice->m_lstSecondaryBuffers.RemoveDataFromList(m_pBuffer);
    ASSERT(fFound);

    // Save the buffer location
    m_vrbd.dwFlags |= m_pBuffer->m_vrbd.dwFlags & DSBCAPS_LOCMASK;

    // Set attenuation levels
    FillDsVolumePan(m_lVolume, m_lPan, &dsvp);

    hr = SetAttenuation(&dsvp);

    // Set mute.  We have to set mute after setting volume because
    // SetMute may change the current buffer volume.
    if(SUCCEEDED(hr))
    {
        hr = SetMute(m_fMute);
    }

    // Set frequency
    if(SUCCEEDED(hr) && (m_vrbd.dwFlags & DSBCAPS_CTRLFREQUENCY))
    {
        hr = SetFrequency(m_vrbd.pwfxFormat->nSamplesPerSec);
    }

    // Set the buffer position
    if(SUCCEEDED(hr))
    {
        hr = SetCursorPosition(m_dwPositionCache);
    }

    // Success
    if(SUCCEEDED(hr))
    {
        DPF(DPFLVL_MOREINFO, "Buffer at 0x%p has acquired resources", this);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  FreeResources
 *
 *  Description:
 *      Frees the all hardware resources.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::FreeResources"

HRESULT
CHybridSecondaryRenderWaveBuffer::FreeResources
(
    void
)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    // Save the cursor position
    if(HasAcquiredResources())
    {
        hr = m_pBuffer->GetCursorPosition(&m_dwPositionCache, NULL);
    }

    // Release the real buffer
    if(SUCCEEDED(hr))
    {
        RELEASE(m_pBuffer);
    }

    // Remove the location flag
    if(SUCCEEDED(hr))
    {
        m_vrbd.dwFlags &= ~DSBCAPS_LOCMASK;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Duplicate
 *
 *  Description:
 *      Duplicates the buffer.
 *
 *  Arguments:
 *      CSecondaryRenderWaveBuffer ** [out]: receives duplicate buffer.  Use
 *                                           Release to free this object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::Duplicate"

HRESULT CHybridSecondaryRenderWaveBuffer::Duplicate(CSecondaryRenderWaveBuffer **ppBuffer)
{
    CHybridSecondaryRenderWaveBuffer *  pBuffer = NULL;
    HRESULT                             hr      = DS_OK;

    DPF_ENTER();

    pBuffer = NEW(CHybridSecondaryRenderWaveBuffer(m_pVxdDevice, m_pvInstance));
    hr = HRFROMP(pBuffer);

    if(SUCCEEDED(hr))
    {
        hr = pBuffer->Initialize(NULL, this);
    }

    if(SUCCEEDED(hr))
    {
        *ppBuffer = pBuffer;
    }
    else
    {
        ABSOLUTE_RELEASE(pBuffer);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Lock
 *
 *  Description:
 *      Locks a region of the buffer.
 *
 *  Arguments:
 *      DWORD [in]: byte index into the buffer to lock from.
 *      DWORD [in]: size, in bytes, of the region to lock.
 *      LPVOID * [out]: receives pointer to region 1 of the lock.
 *      LPDWORD [out]: receives size of above region.
 *      LPVOID * [out]: receives pointer to region 2 of the lock.
 *      LPDWORD [out]: receives size of above region.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::Lock"

HRESULT CHybridSecondaryRenderWaveBuffer::Lock(DWORD ibLock, DWORD cbLock, LPVOID *ppv1, LPDWORD pcb1, LPVOID *ppv2, LPDWORD pcb2)
{
    HRESULT                 hr;

    DPF_ENTER();

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->Lock(ibLock, cbLock, ppv1, pcb1, ppv2, pcb2);
    }
    else
    {
        hr = CRenderWaveBuffer::Lock(ibLock, cbLock, ppv1, pcb1, ppv2, pcb2);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Unlock
 *
 *  Description:
 *      Unlocks a region of the buffer.
 *
 *  Arguments:
 *      LPVOID [in]: pointer to region 1 of the lock.
 *      DWORD [in]: size of above region.
 *      LPVOID [in]: pointer to region 2 of the lock.
 *      DWORD [in]: size of above region.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::Unlock"

HRESULT CHybridSecondaryRenderWaveBuffer::Unlock(LPVOID pv1, DWORD cb1, LPVOID pv2, DWORD cb2)
{
    HRESULT                 hr;

    DPF_ENTER();

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->Unlock(pv1, cb1, pv2, cb2);
    }
    else
    {
        hr = CRenderWaveBuffer::Unlock(pv1, cb1, pv2, cb2);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CommitToDevice
 *
 *  Description:
 *      Commits changed buffer wave data to the device.
 *
 *  Arguments:
 *      DWORD [in]: byte index into the system memory buffer of the changed
 *                  data.
 *      DWORD [in]: size, in bytes, of the changed data.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::CommitToDevice"

HRESULT CHybridSecondaryRenderWaveBuffer::CommitToDevice(DWORD ibCommit, DWORD cbCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->CommitToDevice(ibCommit, cbCommit);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetState
 *
 *  Description:
 *      Gets buffer state.
 *
 *  Arguments:
 *      LPDWORD [out]: receives buffer state.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::GetState"

HRESULT CHybridSecondaryRenderWaveBuffer::GetState(LPDWORD pdwState)
{
    HRESULT                     hr  = DS_OK;

    DPF_ENTER();

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->GetState(pdwState);
    }
    else
    {
        *pdwState = VAD_BUFFERSTATE_STOPPED;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetState
 *
 *  Description:
 *      Sets buffer state.
 *
 *  Arguments:
 *      DWORD [in]: buffer state.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::SetState"

HRESULT CHybridSecondaryRenderWaveBuffer::SetState(DWORD dwState)
{
    HRESULT hr = DSERR_INVALIDCALL;
    DPF_ENTER();

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->SetState(dwState);
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetCursorPosition
 *
 *  Description:
 *      Retrieves the current play and write cursor positions.
 *
 *  Arguments:
 *      LPDWORD [out]: receives the play position.
 *      LPDWORD [out]: receives the write position.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::GetCursorPosition"

HRESULT CHybridSecondaryRenderWaveBuffer::GetCursorPosition(LPDWORD pdwPlay, LPDWORD pdwWrite)
{
    HRESULT                     hr  = DS_OK;

    DPF_ENTER();

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->GetCursorPosition(pdwPlay, pdwWrite);
    }
    else
    {
        if(pdwPlay)
        {
            *pdwPlay = m_dwPositionCache;
        }

        if(pdwWrite)
        {
            *pdwWrite = m_dwPositionCache;
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetCursorPosition
 *
 *  Description:
 *      Sets the current play cursor position.
 *
 *  Arguments:
 *      DWORD [in]: play position.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::SetCursorPosition"

HRESULT CHybridSecondaryRenderWaveBuffer::SetCursorPosition(DWORD dwPlay)
{
    HRESULT                     hr  = DS_OK;

    DPF_ENTER();

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->SetCursorPosition(dwPlay);
    }
    else
    {
        m_dwPositionCache = dwPlay;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetFrequency
 *
 *  Description:
 *      Sets the buffer frequency.
 *
 *  Arguments:
 *      DWORD [in]: new frequency.
 *      BOOL [in]: whether to clamp to the driver's supported frequency
 *                 range if the call fails.  Ignored in this class.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::SetFrequency"

HRESULT CHybridSecondaryRenderWaveBuffer::SetFrequency(DWORD dwFrequency, BOOL)
{
    HRESULT                     hr  = DS_OK;

    DPF_ENTER();

    ASSERT(m_vrbd.dwFlags & DSBCAPS_CTRLFREQUENCY);

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->SetFrequency(dwFrequency);
    }

    if(SUCCEEDED(hr))
    {
        m_vrbd.pwfxFormat->nSamplesPerSec = dwFrequency;
        m_vrbd.pwfxFormat->nAvgBytesPerSec = dwFrequency * m_vrbd.pwfxFormat->nBlockAlign;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetAttenuation
 *
 *  Description:
 *      Sets the attenuation for each channel.
 *
 *  Arguments:
 *      PDSVOLUMEPAN [in]: attenuation.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::SetAttenuation"

HRESULT CHybridSecondaryRenderWaveBuffer::SetAttenuation(PDSVOLUMEPAN pdsvp)
{
    HRESULT                     hr  = DS_OK;

    DPF_ENTER();

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->SetAttenuation(pdsvp);
    }

    if(SUCCEEDED(hr))
    {
        m_lVolume = pdsvp->lVolume;
        m_lPan = pdsvp->lPan;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


#ifdef FUTURE_MULTIPAN_SUPPORT
/***************************************************************************
 *
 *  SetChannelAttenuations
 *
 *  Description:
 *      Sets the multichannel attenuation for a given buffer.
 *
 *  Arguments:
 *      TBD.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::SetChannelAttenuations"

HRESULT CHybridSecondaryRenderWaveBuffer::SetChannelAttenuations(LONG lVolume, DWORD dwChannelCount, const DWORD* pdwChannels, const LONG* plChannelVolumes)
{
    HRESULT                     hr   = DS_OK;
    LONG                        lPan;

    DPF_ENTER();

    if (dwChannelCount == 0)
    {
        // SetChannelVolume() has not been called yet; use center panning
        ASSERT(!pdwChannels && !plChannelVolumes);  // Sanity checking
        lPan = 0;
    }
    else
    {
        // Calculate a global LR pan value based on the channel volumes
        lPan = MultiChannelToStereoPan(dwChannelCount, pdwChannels, plChannelVolumes);
    }

    if (HasAcquiredResources())
    {
        DSVOLUMEPAN dsvp;
        FillDsVolumePan(lVolume, lPan, &dsvp);
        hr = m_pBuffer->SetAttenuation(&dsvp);
    }

    if (SUCCEEDED(hr))
    {
        m_lVolume = lVolume;
        m_lPan = lPan;
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}
#endif // FUTURE_MULTIPAN_SUPPORT


/***************************************************************************
 *
 *  SetMute
 *
 *  Description:
 *      Mutes or unmutes the buffer.
 *
 *  Arguments:
 *      BOOL [in]: TRUE to mute the buffer, FALSE to restore it.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::SetMute"

HRESULT CHybridSecondaryRenderWaveBuffer::SetMute(BOOL fMute)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->SetMute(fMute);
    }

    if(SUCCEEDED(hr))
    {
        m_fMute = fMute;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetNotificationPositions
 *
 *  Description:
 *      Sets buffer notification positions.
 *
 *  Arguments:
 *      DWORD [in]: DSBPOSITIONNOTIFY structure count.
 *      LPDSBPOSITIONNOTIFY [in]: offsets and events.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::SetNotificationPositions"

HRESULT CHybridSecondaryRenderWaveBuffer::SetNotificationPositions(DWORD dwCount, LPCDSBPOSITIONNOTIFY paNotes)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    // Only software buffers support notification positions, so we can
    // go ahead and acquire them now.
    if(!HasAcquiredResources())
    {
        hr = AcquireResources(DSBCAPS_LOCSOFTWARE);
    }

    if(SUCCEEDED(hr))
    {
        hr = m_pBuffer->SetNotificationPositions(dwCount, paNotes);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CreatePropertySet
 *
 *  Description:
 *      Creates the property set object.
 *
 *  Arguments:
 *      CPropertySet ** [out]: receives pointer to the property set object.
 *                             The caller is responsible for freeing this
 *                             object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::CreatePropertySet"

HRESULT CHybridSecondaryRenderWaveBuffer::CreatePropertySet(CPropertySet **ppPropertySet)
{
    HRESULT                 hr  = DSERR_INVALIDCALL;

    DPF_ENTER();

    ASSERT(HasAcquiredResources());

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->CreatePropertySet(ppPropertySet);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Create3dObject
 *
 *  Description:
 *      Creates the 3D object.
 *
 *  Arguments:
 *      C3dListener * [in]: listener object.
 *      C3dObject ** [out]: receives pointer to 3D object.  The caller is
 *                          responsible for freeing this object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CHybridSecondaryRenderWaveBuffer::Create3dObject"

HRESULT CHybridSecondaryRenderWaveBuffer::Create3dObject(C3dListener *p3dListener, C3dObject **pp3dObject)
{
    HRESULT                 hr  = DSERR_INVALIDCALL;

    DPF_ENTER();

    ASSERT(HasAcquiredResources());

    if(HasAcquiredResources())
    {
        hr = m_pBuffer->Create3dObject(p3dListener, pp3dObject);

        // Create3dObject() may have set m_pBuffer's SuccessCode to DS_NO_VIRTUALIZATION
        // if it had to replace the 3D alg with Pan3D.  Make sure we pick up the change:
        m_hrSuccessCode = m_pBuffer->m_hrSuccessCode;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CVxdSecondaryRenderWaveBuffer
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CVxdRenderDevice * [in]: pointer to the parent device.
 *      LPVOID [in]: buffer instace identifier.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::CVxdSecondaryRenderWaveBuffer"

CVxdSecondaryRenderWaveBuffer::CVxdSecondaryRenderWaveBuffer(CVxdRenderDevice *pVxdDevice, LPVOID pvInstance)
    : CSecondaryRenderWaveBuffer(pVxdDevice, pvInstance)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CVxdSecondaryRenderWaveBuffer);

    // Initialize defaults
    m_pVxdDevice = pVxdDevice;
    m_pPropertySet = NULL;
    m_pHwMemBuffer = NULL;
    m_pbHwBuffer = NULL;
    m_hHwBuffer = NULL;
    m_dwState = VAD_BUFFERSTATE_STOPPED;
    m_fMute = FALSE;

    FillDsVolumePan(DSBVOLUME_MAX, DSBPAN_CENTER, &m_dsvp);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CVxdSecondaryRenderWaveBuffer
 *
 *  Description:
 *      Object destructor
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::~CVxdSecondaryRenderWaveBuffer"

CVxdSecondaryRenderWaveBuffer::~CVxdSecondaryRenderWaveBuffer(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CVxdSecondaryRenderWaveBuffer);

    // Free the property set
    RELEASE(m_pPropertySet);

    // Free the HW buffer
    if(m_hHwBuffer)
    {
        VxdBufferRelease(m_hHwBuffer);
    }

    // Free hardware memory
    RELEASE(m_pHwMemBuffer);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the wave buffer object.  If this function fails, the
 *      object should be immediately deleted.
 *
 *  Arguments:
 *      LPVADRBUFFERDESC [in]: buffer description.
 *      CVxdSecondaryRenderWaveBuffer * [in]: pointer to the buffer to duplicate
 *                                      from, or NULL to initialize as a
 *                                      new buffer.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::Initialize"

HRESULT CVxdSecondaryRenderWaveBuffer::Initialize(LPCVADRBUFFERDESC pDesc, CVxdSecondaryRenderWaveBuffer *pSource, CSysMemBuffer *pSysMemBuffer)
{
    DSCAPS                  dsc;
    DWORD                   dwFree;
    HRESULT                 hr;

    DPF_ENTER();

    // Get device caps
    InitStruct(&dsc, sizeof(dsc));

    hr = m_pVxdDevice->GetCaps(&dsc);

    // Validate the buffer description
    if(SUCCEEDED(hr) && !pSource)
    {
        if(pDesc->dwFlags & DSBCAPS_CTRLPOSITIONNOTIFY)
        {
            RPF(DPFLVL_WARNING, "VxD hardware buffers don't support CTRLPOSITIONNOTIFY");
            hr = DSERR_CONTROLUNAVAIL;
        }

        if(SUCCEEDED(hr) && (m_pVxdDevice->m_dwAccelerationFlags & DIRECTSOUNDMIXER_ACCELERATIONF_NOHWBUFFERS))
        {
            hr = DSERR_INVALIDCALL;
        }

        if(SUCCEEDED(hr) && (pDesc->dwFlags & DSBCAPS_CTRL3D) && (m_pVxdDevice->m_dwAccelerationFlags & DIRECTSOUNDMIXER_ACCELERATIONF_NOHW3D))
        {
            hr = DSERR_INVALIDCALL;
        }

        if(SUCCEEDED(hr) && (pDesc->pwfxFormat->nSamplesPerSec < dsc.dwMinSecondarySampleRate || pDesc->pwfxFormat->nSamplesPerSec > dsc.dwMaxSecondarySampleRate))
        {
            RPF(DPFLVL_ERROR, "Specified invalid frequency (%lu) for this device (%lu to %lu)", pDesc->pwfxFormat->nSamplesPerSec, dsc.dwMinSecondarySampleRate, dsc.dwMaxSecondarySampleRate);
            hr = DSERR_INVALIDPARAM;
        }
    }

    // Initialize the base class
    if(SUCCEEDED(hr))
    {
        hr = CSecondaryRenderWaveBuffer::Initialize(pDesc, pSource, pSysMemBuffer);
    }

    // Add LOCHARDWARE and CTRLVOLUME to the flags.  CTRLVOLUME is required
    // to mute the buffer.
    if(SUCCEEDED(hr))
    {
        m_vrbd.dwFlags |= DSBCAPS_LOCHARDWARE | DSBCAPS_CTRLVOLUME;
    }

    // If the caller wants a static buffer, we'll mix into any HW buffer
    // we can get, otherwise it must be a streaming buffer.
    if(SUCCEEDED(hr))
    {
        if(m_vrbd.dwFlags & DSBCAPS_STATIC)
        {
            if(m_vrbd.dwFlags & DSBCAPS_CTRL3D)
            {
                dwFree = dsc.dwFreeHw3DAllBuffers;
            }
            else
            {
                dwFree = dsc.dwFreeHwMixingAllBuffers;
            }
        }
        else
        {
            if(m_vrbd.dwFlags & DSBCAPS_CTRL3D)
            {
                dwFree = dsc.dwFreeHw3DStreamingBuffers;
            }
            else
            {
                dwFree = dsc.dwFreeHwMixingStreamingBuffers;
            }
        }

        if(!dwFree)
        {
            RPF(DPFLVL_ERROR, "Driver reports no free hardware buffers");
            hr = DSERR_INVALIDCALL;
        }
    }

    // Save buffer properties
    if(SUCCEEDED(hr))
    {
        if(pSource)
        {
            m_pbHwBuffer = pSource->m_pbHwBuffer;
            m_cbHwBuffer = pSource->m_cbHwBuffer;
        }
        else
        {
            m_cbHwBuffer = m_vrbd.dwBufferBytes;

            if(m_pVxdDevice->m_dsdd.dwFlags & DSDDESC_USESYSTEMMEMORY)
            {
                m_pbHwBuffer = m_pSysMemBuffer->GetPlayBuffer();
            }
            else
            {
                m_pbHwBuffer = NULL;
            }
        }
    }

    // Initialize the HW memory buffer
    if(SUCCEEDED(hr))
    {
        if(pSource)
        {
            m_pHwMemBuffer = ADDREF(pSource->m_pHwMemBuffer);
        }
        else
        {
            m_pHwMemBuffer = NEW(CVxdMemBuffer(m_pVxdDevice->m_pDriverHeap, m_pVxdDevice->m_dsdd.dwMemAllocExtra, &m_pVxdDevice->m_dlDDraw));
            hr = HRFROMP(m_pHwMemBuffer);

            if(SUCCEEDED(hr))
            {
                hr = m_pHwMemBuffer->Initialize(m_cbHwBuffer);
            }
        }
    }

    // Create the HW buffer
    if(SUCCEEDED(hr))
    {
        if(pSource)
        {
            hr = VxdDrvDuplicateSoundBuffer(m_pVxdDevice->m_hHal, pSource->m_hHwBuffer, &m_hHwBuffer);

            if(FAILED(hr))
            {
                DPF(DPFLVL_ERROR, "VxdDrvDuplicateSoundBuffer failed with %s", HRESULTtoSTRING(hr));
            }
        }
        else
        {
            hr = VxdDrvCreateSoundBuffer(m_pVxdDevice->m_hHal, m_vrbd.pwfxFormat, m_vrbd.dwFlags & DSBCAPS_DRIVERFLAGSMASK, m_pHwMemBuffer->GetAddress(), &m_cbHwBuffer, &m_pbHwBuffer, &m_hHwBuffer);

            if(FAILED(hr))
            {
                DPF(DPFLVL_ERROR, "VxdDrvCreateSoundBuffer failed with %s", HRESULTtoSTRING(hr));
            }
        }
    }

    // Create the property set we're going to use for 3D
    if(SUCCEEDED(hr) && (m_vrbd.dwFlags & DSBCAPS_CTRL3D))
    {
        m_pPropertySet = NEW(CVxdPropertySet(m_pvInstance));
        hr = HRFROMP(m_pPropertySet);

        if(SUCCEEDED(hr))
        {
            hr = m_pPropertySet->Initialize(m_hHwBuffer);
        }

        if(FAILED(hr))
        {
            RELEASE(m_pPropertySet);
        }
        else
        {
            hr = m_pPropertySet->QuerySetSupport(DSPROPSETID_DirectSound3DBuffer);

            if(FAILED(hr))
            {
                DPF(DPFLVL_ERROR, "Driver does not support DSPROPSETID_DirectSound3DBuffer");
            }
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Duplicate
 *
 *  Description:
 *      Duplicates the buffer.
 *
 *  Arguments:
 *      CSecondaryRenderWaveBuffer ** [out]: receives duplicate buffer.  Use
 *                                           Release to free this object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::Duplicate"

HRESULT CVxdSecondaryRenderWaveBuffer::Duplicate(CSecondaryRenderWaveBuffer **ppBuffer)
{
    CVxdSecondaryRenderWaveBuffer * pBuffer = NULL;
    HRESULT                         hr      = DS_OK;

    DPF_ENTER();

    pBuffer = NEW(CVxdSecondaryRenderWaveBuffer(m_pVxdDevice, m_pvInstance));
    hr = HRFROMP(pBuffer);

    if(SUCCEEDED(hr))
    {
        hr = pBuffer->Initialize(NULL, this, NULL);
    }

    if(SUCCEEDED(hr))
    {
        *ppBuffer = pBuffer;
    }
    else
    {
        ABSOLUTE_RELEASE(pBuffer);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Lock
 *
 *  Description:
 *      Locks a region of the buffer.
 *
 *  Arguments:
 *      DWORD [in]: byte index into the buffer to lock from.
 *      DWORD [in]: size, in bytes, of the region to lock.
 *      LPVOID * [out]: receives pointer to region 1 of the lock.
 *      LPDWORD [out]: receives size of above region.
 *      LPVOID * [out]: receives pointer to region 2 of the lock.
 *      LPDWORD [out]: receives size of above region.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::Lock"

HRESULT CVxdSecondaryRenderWaveBuffer::Lock(DWORD ibLock, DWORD cbLock, LPVOID *ppv1, LPDWORD pcb1, LPVOID *ppv2, LPDWORD pcb2)
{
    LOCKCIRCULARBUFFER      lcb;
    HRESULT                 hr;

    DPF_ENTER();

    // Note hack: we've overridden Lock and Unlock because some pesky apps
    // lock the buffer, write to it and start playing, without ever unlocking
    // it.  This means that our system memory buffer may never see any of the
    // application's data (unless the driver specifies USESYSTEMMEMORY).

    // This hack falls by the wayside for our new DX8 buffer types - i.e.,
    // MIXIN buffers, sink buffers and buffers with effects.

    lcb.pHwBuffer = m_hHwBuffer;
    lcb.pvBuffer = m_pbHwBuffer;
    lcb.cbBuffer = m_cbHwBuffer;
    lcb.fPrimary = FALSE;
    lcb.fdwDriverDesc = m_pVxdDevice->m_dsdd.dwFlags;
    lcb.ibRegion = ibLock;
    lcb.cbRegion = cbLock;

    hr = LockCircularBuffer(&lcb);

    if(SUCCEEDED(hr) && ppv1)
    {
        *ppv1 = lcb.pvLock[0];
    }

    if(SUCCEEDED(hr) && pcb1)
    {
        *pcb1 = lcb.cbLock[0];
    }

    if(SUCCEEDED(hr) && ppv2)
    {
        *ppv2 = lcb.pvLock[1];
    }

    if(SUCCEEDED(hr) && pcb2)
    {
        *pcb2 = lcb.cbLock[1];
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Unlock
 *
 *  Description:
 *      Unlocks a region of the buffer.
 *
 *  Arguments:
 *      LPVOID [in]: pointer to region 1 of the lock.
 *      DWORD [in]: size of above region.
 *      LPVOID [in]: pointer to region 2 of the lock.
 *      DWORD [in]: size of above region.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::Unlock"

HRESULT CVxdSecondaryRenderWaveBuffer::Unlock(LPVOID pv1, DWORD cb1, LPVOID pv2, DWORD cb2)
{
    LOCKCIRCULARBUFFER      lcb;
    HRESULT                 hr;

    DPF_ENTER();

    lcb.pHwBuffer = m_hHwBuffer;
    lcb.pvBuffer = m_pbHwBuffer;
    lcb.cbBuffer = m_cbHwBuffer;
    lcb.fPrimary = FALSE;
    lcb.fdwDriverDesc = m_pVxdDevice->m_dsdd.dwFlags;

    lcb.pvLock[0] = pv1;
    lcb.cbLock[0] = cb1;

    lcb.pvLock[1] = pv2;
    lcb.cbLock[1] = cb2;

    hr = UnlockCircularBuffer(&lcb);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CommitToDevice
 *
 *  Description:
 *      Commits changed buffer wave data to the device.
 *
 *  Arguments:
 *      DWORD [in]: byte index into the system memory buffer of the changed
 *                  data.
 *      DWORD [in]: size, in bytes, of the changed data.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::CommitToDevice"

HRESULT CVxdSecondaryRenderWaveBuffer::CommitToDevice(DWORD ibCommit, DWORD cbCommit)
{
    LPVOID                  pvLock[2];
    DWORD                   cbLock[2];
    HRESULT                 hr;

    DPF_ENTER();

    hr = Lock(ibCommit, cbCommit, &pvLock[0], &cbLock[0], &pvLock[1], &cbLock[1]);

    if(SUCCEEDED(hr) && pvLock[0] && cbLock[0])
    {
        CopyMemory(pvLock[0], m_pSysMemBuffer->GetPlayBuffer() + ibCommit, cbLock[0]);
    }

    if(SUCCEEDED(hr) && pvLock[1] && cbLock[1])
    {
        CopyMemory(pvLock[1], m_pSysMemBuffer->GetPlayBuffer(), cbLock[1]);
    }

    if(SUCCEEDED(hr))
    {
        hr = Unlock(pvLock[0], cbLock[0], pvLock[1], cbLock[1]);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetState
 *
 *  Description:
 *      Gets buffer state.
 *
 *  Arguments:
 *      LPDWORD [out]: receives buffer state.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::GetState"

HRESULT CVxdSecondaryRenderWaveBuffer::GetState(LPDWORD pdwState)
{
    HRESULT                     hr  = DS_OK;

    DPF_ENTER();

    // If the play cursor position is reported past the end of the
    // buffer, the buffer is stopped.  GetCursorPosition will
    // update the state flag for us.
    if(m_dwState & VAD_BUFFERSTATE_STARTED)
    {
        hr = GetCursorPosition(NULL, NULL);
    }

    if(SUCCEEDED(hr) && pdwState)
    {
        *pdwState = m_dwState;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetState
 *
 *  Description:
 *      Sets buffer state.
 *
 *  Arguments:
 *      DWORD [in]: buffer state.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::SetState"

HRESULT CVxdSecondaryRenderWaveBuffer::SetState(DWORD dwState)
{
    HRESULT hr = DS_OK;

    static const DWORD dwValidMask = VAD_BUFFERSTATE_STARTED | VAD_BUFFERSTATE_LOOPING | VAD_BUFFERSTATE_SUSPEND;
    DPF_ENTER();

    ASSERT(IS_VALID_FLAGS(dwState, dwValidMask));

    // We're ignoring any suspend calls.  This is currently only called from
    // CMxRenderDevice::SetGlobalFormat and only applies to emulated buffers.

    if (!(dwState & VAD_BUFFERSTATE_SUSPEND))
    {
        if (dwState & VAD_BUFFERSTATE_STARTED)
        {
            hr = VxdBufferPlay(m_hHwBuffer, 0, 0, (dwState & VAD_BUFFERSTATE_LOOPING) ? DSBPLAY_LOOPING : 0);
            if (FAILED(hr))
                DPF(DPFLVL_ERROR, "VxdBufferPlay failed with %s", HRESULTtoSTRING(hr));
        }
        else
        {
            hr = VxdBufferStop(m_hHwBuffer);
            if (FAILED(hr))
                DPF(DPFLVL_ERROR, "VxdBufferStop failed with %s", HRESULTtoSTRING(hr));
        }

        if (SUCCEEDED(hr))
            m_dwState = dwState;
    }

    DPF_LEAVE_HRESULT(hr);
    return hr;
}


/***************************************************************************
 *
 *  GetCursorPosition
 *
 *  Description:
 *      Retrieves the current play and write cursor positions.
 *
 *  Arguments:
 *      LPDWORD [out]: receives the play position.
 *      LPDWORD [out]: receives the write position.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::GetCursorPosition"

HRESULT CVxdSecondaryRenderWaveBuffer::GetCursorPosition(LPDWORD pdwPlay, LPDWORD pdwWrite)
{
    DWORD                   dwPlay;
    DWORD                   dwWrite;
    HRESULT                 hr;

    DPF_ENTER();

    // COMPATCOMPAT: Previous versions of DirectSound would report the
    // position as being past the end of the buffer.

    // Get the buffer position
    hr = VxdBufferGetPosition(m_hHwBuffer, &dwPlay, &dwWrite);

    if(FAILED(hr))
    {
        DPF(DPFLVL_ERROR, "VxdBufferGetPosition failed with %s", HRESULTtoSTRING(hr));
    }

    // If the play cursor position is past the end of the buffer, it's
    // actually stopped.
    if(SUCCEEDED(hr) && dwPlay >= m_cbHwBuffer)
    {
        hr = SetState(VAD_BUFFERSTATE_STOPPED);

        if(SUCCEEDED(hr))
        {
            hr = SetCursorPosition(0);
        }

        if(SUCCEEDED(hr))
        {
            hr = VxdBufferGetPosition(m_hHwBuffer, &dwPlay, &dwWrite);

            if(FAILED(hr))
            {
                DPF(DPFLVL_ERROR, "VxdBufferGetPosition failed with %s", HRESULTtoSTRING(hr));
            }
        }
    }

    if(SUCCEEDED(hr))
    {
        if (pdwPlay)
        {
            *pdwPlay = dwPlay;
        }

        if(pdwWrite)
        {
            if (m_dwState & VAD_BUFFERSTATE_STARTED)
            {
                *pdwWrite = PadHardwareWriteCursor(dwWrite, m_cbHwBuffer, m_vrbd.pwfxFormat);
            }
            else
            {
                *pdwWrite = dwWrite;
            }
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetCursorPosition
 *
 *  Description:
 *      Sets the current play cursor position.
 *
 *  Arguments:
 *      DWORD [in]: play position.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::SetCursorPosition"

HRESULT CVxdSecondaryRenderWaveBuffer::SetCursorPosition(DWORD dwPlay)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = VxdBufferSetPosition(m_hHwBuffer, dwPlay);

    if(FAILED(hr))
    {
        DPF(DPFLVL_ERROR, "VxdBufferSetPosition failed with %s", HRESULTtoSTRING(hr));
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetFrequency
 *
 *  Description:
 *      Sets the buffer frequency.
 *
 *  Arguments:
 *      DWORD [in]: new frequency.
 *      BOOL [in]: whether to clamp to the driver's supported frequency
 *                 range if the call fails.  Ignored in this class.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::SetFrequency"

HRESULT CVxdSecondaryRenderWaveBuffer::SetFrequency(DWORD dwFrequency, BOOL)
{
    DSCAPS                  dsc;
    HRESULT                 hr;

    DPF_ENTER();

    ASSERT(m_vrbd.dwFlags & DSBCAPS_CTRLFREQUENCY);

    // Get device caps
    InitStruct(&dsc, sizeof(dsc));

    hr = m_pVxdDevice->GetCaps(&dsc);

    // Validate the frequency
    if(SUCCEEDED(hr) && (dwFrequency < dsc.dwMinSecondarySampleRate || dwFrequency > dsc.dwMaxSecondarySampleRate))
    {
        RPF(DPFLVL_ERROR, "Specified invalid frequency (%lu) for this device (%lu to %lu)", dwFrequency, dsc.dwMinSecondarySampleRate, dsc.dwMaxSecondarySampleRate);
        hr = DSERR_INVALIDPARAM;
    }

    // Set buffer frequency
    if(SUCCEEDED(hr))
    {
        hr = VxdBufferSetFrequency(m_hHwBuffer, dwFrequency);

        if(FAILED(hr))
        {
            DPF(DPFLVL_ERROR, "VxdBufferSetFrequency failed with %s", HRESULTtoSTRING(hr));
        }
    }

    if(SUCCEEDED(hr))
    {
        m_vrbd.pwfxFormat->nSamplesPerSec = dwFrequency;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetAttenuation
 *
 *  Description:
 *      Sets the attenuation for each channel.
 *
 *  Arguments:
 *      PDSVOLUMEPAN [in]: attenuation.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::SetAttenuation"

HRESULT CVxdSecondaryRenderWaveBuffer::SetAttenuation(PDSVOLUMEPAN pdsvp)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    hr = VxdBufferSetVolumePan(m_hHwBuffer, pdsvp);

    if(SUCCEEDED(hr))
    {
        CopyMemory(&m_dsvp, pdsvp, sizeof(*pdsvp));
    }
    else
    {
        DPF(DPFLVL_ERROR, "VxdBufferSetVolumePan failed with %s", HRESULTtoSTRING(hr));
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


#ifdef FUTURE_MULTIPAN_SUPPORT
/***************************************************************************
 *
 *  SetChannelAttenuations
 *
 *  Description:
 *      Sets the multichannel attenuation for a given buffer.
 *
 *  Arguments:
 *      TBD.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::SetChannelAttenuations"

HRESULT CVxdSecondaryRenderWaveBuffer::SetChannelAttenuations(LONG lVolume, DWORD dwChannelCount, const DWORD* pdwChannels, const LONG* plChannelVolumes)
{
    HRESULT                     hr   = DS_OK;
    LONG                        lPan;

    DPF_ENTER();

    hr = E_NOTIMPL;

    DPF_LEAVE_HRESULT(hr);
    return hr;
}
#endif // FUTURE_MULTIPAN_SUPPORT


/***************************************************************************
 *
 *  SetMute
 *
 *  Description:
 *      Mutes or unmutes the buffer.
 *
 *  Arguments:
 *      BOOL [in]: TRUE to mute the buffer, FALSE to restore it.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::SetMute"

HRESULT CVxdSecondaryRenderWaveBuffer::SetMute(BOOL fMute)
{
    HRESULT                 hr          = DS_OK;
    DSVOLUMEPAN             dsvpTemp;
    DSVOLUMEPAN             dsvpMute;

    DPF_ENTER();

    if(m_fMute != fMute)
    {
        if(fMute)
        {
            CopyMemory(&dsvpTemp, &m_dsvp, sizeof(m_dsvp));

            FillDsVolumePan(DSBVOLUME_MIN, DSBPAN_CENTER, &dsvpMute);

            hr = SetAttenuation(&dsvpMute);

            CopyMemory(&m_dsvp, &dsvpTemp, sizeof(m_dsvp));
        }
        else
        {
            hr = SetAttenuation(&m_dsvp);
        }

        if(SUCCEEDED(hr))
        {
            m_fMute = fMute;
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetNotificationPositions
 *
 *  Description:
 *      Sets buffer notification positions.
 *
 *  Arguments:
 *      DWORD [in]: DSBPOSITIONNOTIFY structure count.
 *      LPDSBPOSITIONNOTIFY [in]: offsets and events.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::SetNotificationPositions"

HRESULT CVxdSecondaryRenderWaveBuffer::SetNotificationPositions(DWORD dwCount, LPCDSBPOSITIONNOTIFY paNotes)
{
    ASSERT(FALSE);
    return DSERR_UNSUPPORTED;
}


/***************************************************************************
 *
 *  CreatePropertySet
 *
 *  Description:
 *      Creates the property set object.
 *
 *  Arguments:
 *      CPropertySet ** [out]: receives pointer to the property set object.
 *                             The caller is responsible for freeing this
 *                             object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::CreatePropertySet"

HRESULT CVxdSecondaryRenderWaveBuffer::CreatePropertySet(CPropertySet **ppPropertySet)
{
    CVxdPropertySet *       pPropertySet    = NULL;
    HRESULT                 hr              = DS_OK;

    DPF_ENTER();

    if(m_pVxdDevice->m_dwAccelerationFlags & DIRECTSOUNDMIXER_ACCELERATIONF_NOHWPROPSETS)
    {
        RPF(DPFLVL_ERROR, "Tried to create a property set object with hardware property sets disabled");
        hr = DSERR_UNSUPPORTED;
    }

    if(SUCCEEDED(hr))
    {
        pPropertySet = NEW(CVxdPropertySet(m_pvInstance));
        hr = HRFROMP(pPropertySet);
    }

    if(SUCCEEDED(hr))
    {
        hr = pPropertySet->Initialize(m_hHwBuffer);
    }

    if(SUCCEEDED(hr))
    {
        *ppPropertySet = pPropertySet;
    }
    else
    {
        RELEASE(pPropertySet);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Create3dObject
 *
 *  Description:
 *      Creates the 3D object.
 *
 *  Arguments:
 *      C3dListener * [in]: listener object.
 *      C3dObject ** [out]: receives pointer to 3D object.  The caller is
 *                          responsible for freeing this object.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdSecondaryRenderWaveBuffer::Create3dObject"

HRESULT CVxdSecondaryRenderWaveBuffer::Create3dObject(C3dListener *p3dListener, C3dObject **pp3dObject)
{
    const BOOL              fDopplerEnabled = !MAKEBOOL((m_vrbd.dwFlags & DSBCAPS_CTRLFX) && !(m_vrbd.dwFlags & DSBCAPS_SINKIN));
    CVxd3dObject *          pVxd3dObject    = NULL;
    HRESULT                 hr              = DS_OK;

    DPF_ENTER();

    if(m_vrbd.dwFlags & DSBCAPS_CTRL3D)
    {
        ASSERT(p3dListener->GetListenerLocation() & DSBCAPS_LOCHARDWARE);

        if(SUCCEEDED(hr))
        {
            pVxd3dObject = NEW(CVxd3dObject((CVxd3dListener *)p3dListener, m_pPropertySet, fDopplerEnabled));
            hr = HRFROMP(pVxd3dObject);
        }

        if(SUCCEEDED(hr))
        {
            hr = pVxd3dObject->Initialize();
        }

        if(SUCCEEDED(hr))
        {
            *pp3dObject = pVxd3dObject;
        }
        else
        {
            RELEASE(pVxd3dObject);
        }
    }
    else
    {
        hr = CreatePan3dObject(p3dListener, MAKEBOOL(m_vrbd.dwFlags & DSBCAPS_MUTE3DATMAXDISTANCE), m_vrbd.pwfxFormat->nSamplesPerSec, pp3dObject);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CVxdPropertySet
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      LPVOID [in]: instance identifier.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPropertySet::CVxdPropertySet"

CVxdPropertySet::CVxdPropertySet(LPVOID pvInstance)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CVxdPropertySet);

    // Initialize defaults
    m_pDsDriverPropertySet = NULL;
    m_pvInstance = pvInstance;

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CVxdPropertySet
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPropertySet::~CVxdPropertySet"

CVxdPropertySet::~CVxdPropertySet(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CVxdPropertySet);

    // Free the property set
    if(m_pDsDriverPropertySet)
    {
        VxdIUnknown_Release(m_pDsDriverPropertySet);
    }

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      HANDLE [in]: buffer handle.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPropertySet::Initialize"

HRESULT CVxdPropertySet::Initialize(HANDLE hHwBuffer)
{
    HRESULT                 hr;

    DPF_ENTER();

    // hHwBuffer is supposed to be a kernel memory address.
    // Let's check that (this is to track down bug 40519):
    ASSERT(DWORD(hHwBuffer) >= 0xc0000000);

    // Query for an IDsDriverPropertySet interface to the driver
    hr = VxdIUnknown_QueryInterface(hHwBuffer, IID_IDsDriverPropertySet, &m_pDsDriverPropertySet);

    if(SUCCEEDED(hr))
    {
        ASSERT(m_pDsDriverPropertySet);
        DPF(DPFLVL_INFO, "Driver supports property sets");
    }
    else
    {
        DPF(DPFLVL_INFO, "Driver doesn't support property sets (%s)", HRESULTtoSTRING(hr));
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  QuerySupport
 *
 *  Description:
 *      Queries for property set support.
 *
 *  Arguments:
 *      REFGUID [in]: property set to query for.
 *      ULONG [in]: property id.
 *      PULONG [out]: receives support flags.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPropertySet::QuerySupport"

HRESULT CVxdPropertySet::QuerySupport(REFGUID guidPropertySetId, ULONG ulPropertyId, PULONG pulSupport)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = VxdIDsDriverPropertySet_QuerySupport(m_pDsDriverPropertySet, guidPropertySetId, ulPropertyId, pulSupport);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  GetProperty
 *
 *  Description:
 *      Gets a property.
 *
 *  Arguments:
 *      REFGUID [in]: property set id.
 *      ULONG [in]: property id.
 *      LPVOID [in]: property parameters.
 *      LPVOID [in]: property data.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPropertySet::GetProperty"

HRESULT CVxdPropertySet::GetProperty(REFGUID guidPropertySet, ULONG ulPropertyId, LPVOID pvPropertyParams, ULONG cbPropertyParams, LPVOID pvPropertyData, PULONG pcbPropertyData)
{
    DSPROPERTY              Property;
    HRESULT                 hr;

    DPF_ENTER();

    Property.Set = guidPropertySet;
    Property.Id = ulPropertyId;
    Property.Flags = 0;
    Property.InstanceId = (ULONG)m_pvInstance;

    hr = VxdIDsDriverPropertySet_GetProperty(m_pDsDriverPropertySet, &Property, pvPropertyParams, cbPropertyParams, pvPropertyData, *pcbPropertyData, pcbPropertyData);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetProperty
 *
 *  Description:
 *      Sets a property.
 *
 *  Arguments:
 *      REFGUID [in]: property set id.
 *      ULONG [in]: property id.
 *      LPVOID [in]: property parameters.
 *      LPVOID [in]: property data.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPropertySet::SetProperty"

HRESULT CVxdPropertySet::SetProperty(REFGUID guidPropertySet, ULONG ulPropertyId, LPVOID pvPropertyParams, ULONG cbPropertyParams, LPVOID pvPropertyData, ULONG cbPropertyData)
{
    DSPROPERTY              Property;
    HRESULT                 hr;

    DPF_ENTER();

    Property.Set = guidPropertySet;
    Property.Id = ulPropertyId;
    Property.Flags = 0;
    Property.InstanceId = (ULONG)m_pvInstance;

    hr = VxdIDsDriverPropertySet_SetProperty(m_pDsDriverPropertySet, &Property, pvPropertyParams, cbPropertyParams, pvPropertyData, cbPropertyData);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  QuerySetSupport
 *
 *  Description:
 *      Queries for support of an entire DirectSound property set.
 *
 *  Arguments:
 *      REFGUID [in]: property set to query for.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxdPropertySet::QuerySetSupport"

HRESULT CVxdPropertySet::QuerySetSupport(REFGUID guidPropertySetId)
{
    const DWORD             dwMask      = KSPROPERTY_SUPPORT_SET;
    HRESULT                 hr          = DS_OK;
    ULONG                   ulFirst;
    ULONG                   ulLast;
    ULONG                   ulSupport;

#ifdef DEBUG

    LPSTR                   pszSet;

#endif // DEBUG

    DPF_ENTER();

    if(DSPROPSETID_DirectSound3DListener == guidPropertySetId)
    {
        ulFirst = DSPROPERTY_DIRECTSOUND3DLISTENER_FIRST;
        ulLast = DSPROPERTY_DIRECTSOUND3DLISTENER_LAST;

#ifdef DEBUG

        pszSet = "DSPROPSETID_DirectSound3DListener";

#endif // DEBUG

    }
    else if(DSPROPSETID_DirectSound3DBuffer == guidPropertySetId)
    {
        ulFirst = DSPROPERTY_DIRECTSOUND3DBUFFER_FIRST;
        ulLast = DSPROPERTY_DIRECTSOUND3DBUFFER_LAST;

#ifdef DEBUG

        pszSet = "DSPROPSETID_DirectSound3DBuffer";

#endif // DEBUG

    }
    else if(DSPROPSETID_DirectSoundSpeakerConfig == guidPropertySetId)
    {
        ulFirst = DSPROPERTY_DIRECTSOUNDSPEAKERCONFIG_FIRST;
        ulLast = DSPROPERTY_DIRECTSOUNDSPEAKERCONFIG_LAST;

#ifdef DEBUG

        pszSet = "DSPROPSETID_DirectSoundSpeakerConfig";

#endif // DEBUG

    }
    else
    {
        ASSERT(FALSE);
        hr = DSERR_UNSUPPORTED;
    }

    while(ulFirst <= ulLast && SUCCEEDED(hr))
    {
        hr = QuerySupport(guidPropertySetId, ulFirst, &ulSupport);

        if(FAILED(hr))
        {
            DPF(DPFLVL_INFO, "QuerySupport for %s [%lu] returned %s", pszSet, ulFirst, HRESULTtoSTRING(hr));
        }
        else if((ulSupport & dwMask) != dwMask)
        {
            DPF(DPFLVL_INFO, "Support for %s [%lu] == 0x%8.8lX", pszSet, ulFirst, ulSupport);
            hr = DSERR_UNSUPPORTED;
        }
        else
        {
            ulFirst++;
        }
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CVxd3dListener
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CVxdPropertySet * [in]: property set object.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::CVxd3dListener"

CVxd3dListener::CVxd3dListener(CVxdPropertySet *pPropertySet)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CVxd3dListener);

    // Initialize defaults
    m_fAllocated = FALSE;

    // Save a pointer to the property set
    m_pPropertySet = ADDREF(pPropertySet);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CVxd3dListener
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::~CVxd3dListener"

CVxd3dListener::~CVxd3dListener(void)
{
    BOOL                    fAlloc  = FALSE;
    HRESULT                 hr;

    DPF_ENTER();
    DPF_DESTRUCT(CVxd3dListener);

    // Ask the driver to free it's listener
    if(m_fAllocated)
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION, &fAlloc);
        ASSERT(SUCCEEDED(hr));
    }

    // Free the property set object
    RELEASE(m_pPropertySet);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::Initialize"

HRESULT CVxd3dListener::Initialize(void)
{
    BOOL                    fAlloc  = TRUE;
    HRESULT                 hr;

    DPF_ENTER();

    // Ask the driver to allocate it's listener
    hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION, &fAlloc);

    if(SUCCEEDED(hr))
    {
        m_fAllocated = TRUE;
    }

    // Set all default properties on the HW 3D listener
    if(SUCCEEDED(hr))
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_ALL, &m_lpCurrent);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CommitDeferred
 *
 *  Description:
 *      Commits deferred data to the device.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::CommitDeferred"

HRESULT CVxd3dListener::CommitDeferred(void)
{
    HRESULT                 hr      = DS_OK;
    BOOL                    fBatch;

    DPF_ENTER();

    // Place the driver into batch mode so that we can update the entire
    // world in one shot.
    fBatch = TRUE;
    hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_BATCH, &fBatch);

    // Apply all changes to the software world and listener and all objects
    if(SUCCEEDED(hr))
    {
        hr = C3dListener::CommitDeferred();
    }

    // Apply all changes to the hardware world and listener
    if(SUCCEEDED(hr))
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_ALL, &m_lpCurrent);
    }

    // Release the driver from batch mode
    if(SUCCEEDED(hr))
    {
        fBatch = FALSE;
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_BATCH, &fBatch);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetDistanceFactor
 *
 *  Description:
 *      Sets distance factor for the world.
 *
 *  Arguments:
 *      FLOAT [in]: distance factor.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::SetDistanceFactor"

HRESULT CVxd3dListener::SetDistanceFactor(FLOAT flDistanceFactor, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    hr = C3dListener::SetDistanceFactor(flDistanceFactor, fCommit);

    if(SUCCEEDED(hr) && fCommit)
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_DISTANCEFACTOR, &flDistanceFactor);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetDopplerFactor
 *
 *  Description:
 *      Sets Doppler factor for the world.
 *
 *  Arguments:
 *      FLOAT [in]: Doppler factor.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::SetDopplerFactor"

HRESULT CVxd3dListener::SetDopplerFactor(FLOAT flDopplerFactor, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    hr = C3dListener::SetDopplerFactor(flDopplerFactor, fCommit);

    if(SUCCEEDED(hr) && fCommit)
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_DOPPLERFACTOR, &flDopplerFactor);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetRolloffFactor
 *
 *  Description:
 *      Sets rolloff factor for the world.
 *
 *  Arguments:
 *      FLOAT [in]: rolloff factor.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::SetRolloffFactor"

HRESULT CVxd3dListener::SetRolloffFactor(FLOAT flRolloffFactor, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    hr = C3dListener::SetRolloffFactor(flRolloffFactor, fCommit);

    if(SUCCEEDED(hr) && fCommit)
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_ROLLOFFFACTOR, &flRolloffFactor);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetOrienation
 *
 *  Description:
 *      Sets listener orientation.
 *
 *  Arguments:
 *      REFD3DVECTOR[in]: orientation.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::SetOrienation"

HRESULT CVxd3dListener::SetOrientation(REFD3DVECTOR vOrientFront, REFD3DVECTOR vOrientTop, BOOL fCommit)
{
    HRESULT                 hr;

    struct
    {
        D3DVECTOR          vOrientFront;
        D3DVECTOR          vOrientTop;
    } param;

    DPF_ENTER();

    hr = C3dListener::SetOrientation(vOrientFront, vOrientTop, fCommit);

    if(SUCCEEDED(hr) && fCommit)
    {
        param.vOrientFront = vOrientFront;
        param.vOrientTop = vOrientTop;

        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_ORIENTATION, &param);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetPosition
 *
 *  Description:
 *      Sets listener position.
 *
 *  Arguments:
 *      REFD3DVECTOR[in]: position.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::SetPosition"

HRESULT CVxd3dListener::SetPosition(REFD3DVECTOR vPosition, BOOL fCommit)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = C3dListener::SetPosition(vPosition, fCommit);

    if(SUCCEEDED(hr) && fCommit)
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_POSITION, &vPosition);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetVelocity
 *
 *  Description:
 *      Sets listener velocity.
 *
 *  Arguments:
 *      REFD3DVECTOR[in]: velocity.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::SetVelocity"

HRESULT CVxd3dListener::SetVelocity(REFD3DVECTOR vVelocity, BOOL fCommit)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = C3dListener::SetVelocity(vVelocity, fCommit);

    if(SUCCEEDED(hr) && fCommit)
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_VELOCITY, &vVelocity);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetAllParameters
 *
 *  Description:
 *      Sets all listener properties.
 *
 *  Arguments:
 *      LPDS3DLISTENER [in]: listener properites.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::SetAllParameters"

HRESULT CVxd3dListener::SetAllParameters(LPCDS3DLISTENER pParams, BOOL fCommit)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = C3dListener::SetAllParameters(pParams, fCommit);

    if(SUCCEEDED(hr) && fCommit)
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DListener, DSPROPERTY_DIRECTSOUND3DLISTENER_ALL, pParams);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetSpeakerConfig
 *
 *  Description:
 *      Sets device speaker configuration.
 *
 *  Arguments:
 *      DWORD [in]: speaker configuration.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dListener::SetSpeakerConfig"

HRESULT CVxd3dListener::SetSpeakerConfig(DWORD dwSpeakerConfig)
{
    HRESULT                 hr;

    DPF_ENTER();

    hr = C3dListener::SetSpeakerConfig(dwSpeakerConfig);

    if(SUCCEEDED(hr))
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSoundSpeakerConfig, DSPROPERTY_DIRECTSOUNDSPEAKERCONFIG_SPEAKERCONFIG, &dwSpeakerConfig);
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CVxd3dObject
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      CVxd3dListener * [in]: pointer to the owning listener.
 *      CVxdPropertySet * [in]: property set object.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::CVxd3dObject"

CVxd3dObject::CVxd3dObject(CVxd3dListener *pListener, CVxdPropertySet *pPropertySet, BOOL fDopplerEnabled)
    : C3dObject(pListener, GUID_NULL, FALSE, fDopplerEnabled)
{
    DPF_ENTER();
    DPF_CONSTRUCT(CVxd3dObject);

    ASSERT(pListener->GetListenerLocation() & DSBCAPS_LOCHARDWARE);

    // Save a pointer to the property set
    m_pPropertySet = ADDREF(pPropertySet);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  ~CVxd3dObject
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::~CVxd3dObject"

CVxd3dObject::~CVxd3dObject(void)
{
    DPF_ENTER();
    DPF_DESTRUCT(CVxd3dObject);

    RELEASE(m_pPropertySet);

    DPF_LEAVE_VOID();
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Initializes the object.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::Initialize"

HRESULT CVxd3dObject::Initialize(void)
{
    HRESULT                 hr;

    DPF_ENTER();

    // Set all default properties on the HW 3D listener
    hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_ALL, &m_opCurrent);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  CommitDeferred
 *
 *  Description:
 *      Commits deferred data to the device.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::CommitDeferred"

HRESULT CVxd3dObject::CommitDeferred(void)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    // Update current data
    if(m_dwDeferred & DS3DPARAM_OBJECT_CONEANGLES)
    {
        m_opCurrent.dwInsideConeAngle = m_opDeferred.dwInsideConeAngle;
        m_opCurrent.dwOutsideConeAngle = m_opDeferred.dwOutsideConeAngle;
    }

    if(m_dwDeferred & DS3DPARAM_OBJECT_CONEORIENTATION)
    {
        m_opCurrent.vConeOrientation = m_opDeferred.vConeOrientation;
    }

    if(m_dwDeferred & DS3DPARAM_OBJECT_CONEOUTSIDEVOLUME)
    {
        m_opCurrent.lConeOutsideVolume = m_opDeferred.lConeOutsideVolume;
    }

    if(m_dwDeferred & DS3DPARAM_OBJECT_MAXDISTANCE)
    {
        m_opCurrent.flMaxDistance = m_opDeferred.flMaxDistance;
    }

    if(m_dwDeferred & DS3DPARAM_OBJECT_MINDISTANCE)
    {
        m_opCurrent.flMinDistance = m_opDeferred.flMinDistance;
    }

    if(m_dwDeferred & DS3DPARAM_OBJECT_MODE)
    {
        m_opCurrent.dwMode = m_opDeferred.dwMode;
    }

    if(m_dwDeferred & DS3DPARAM_OBJECT_POSITION)
    {
        m_opCurrent.vPosition = m_opDeferred.vPosition;
    }

    if(m_dwDeferred & DS3DPARAM_OBJECT_VELOCITY)
    {
        m_opCurrent.vVelocity = m_opDeferred.vVelocity;
    }

    m_dwDeferred = 0;

    // Commit to the device
    hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_ALL, &m_opCurrent);

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetConeAngles
 *
 *  Description:
 *      Sets sound cone angles.
 *
 *  Arguments:
 *      DWORD [in]: inside cone angle.
 *      DWORD [in]: outside cone angle.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::SetConeAngles"

HRESULT CVxd3dObject::SetConeAngles(DWORD dwInsideConeAngle, DWORD dwOutsideConeAngle, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    struct
    {
        DWORD               dwInsideConeAngle;
        DWORD               dwOutisdeConeAngle;
    } param;

    DPF_ENTER();

    if(fCommit)
    {
        m_opCurrent.dwInsideConeAngle = dwInsideConeAngle;
        m_opCurrent.dwOutsideConeAngle = dwOutsideConeAngle;

        param.dwInsideConeAngle = dwInsideConeAngle;
        param.dwOutisdeConeAngle = dwOutsideConeAngle;

        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_CONEANGLES, &param);
    }
    else
    {
        m_opDeferred.dwInsideConeAngle = dwInsideConeAngle;
        m_opDeferred.dwOutsideConeAngle = dwOutsideConeAngle;
        m_dwDeferred |= DS3DPARAM_OBJECT_CONEANGLES;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetConeOrientation
 *
 *  Description:
 *      Sets sound cone orientation.
 *
 *  Arguments:
 *      REFD3DVECTOR[in]: orientation.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::SetConeOrientation"

HRESULT CVxd3dObject::SetConeOrientation(REFD3DVECTOR vConeOrientation, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(fCommit)
    {
        m_opCurrent.vConeOrientation = vConeOrientation;
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_CONEORIENTATION, &vConeOrientation);
    }
    else
    {
        m_opDeferred.vConeOrientation = vConeOrientation;
        m_dwDeferred |= DS3DPARAM_OBJECT_CONEORIENTATION;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetConeOutsideVolume
 *
 *  Description:
 *      Sets volume outside the sound cone.
 *
 *  Arguments:
 *      LONG [in]: volume.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::SetConeOutsideVolume"

HRESULT CVxd3dObject::SetConeOutsideVolume(LONG lConeOutsideVolume, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(fCommit)
    {
        m_opCurrent.lConeOutsideVolume = lConeOutsideVolume;
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_CONEOUTSIDEVOLUME, &lConeOutsideVolume);
    }
    else
    {
        m_opDeferred.lConeOutsideVolume = lConeOutsideVolume;
        m_dwDeferred |= DS3DPARAM_OBJECT_CONEOUTSIDEVOLUME;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetMaxDistance
 *
 *  Description:
 *      Sets the maximum object distance from the listener.
 *
 *  Arguments:
 *      FLOAT [in]: max distance.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::SetMaxDistance"

HRESULT CVxd3dObject::SetMaxDistance(FLOAT flMaxDistance, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(fCommit)
    {
        m_opCurrent.flMaxDistance = flMaxDistance;
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_MAXDISTANCE, &flMaxDistance);
    }
    else
    {
        m_opDeferred.flMaxDistance = flMaxDistance;
        m_dwDeferred |= DS3DPARAM_OBJECT_MAXDISTANCE;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetMinDistance
 *
 *  Description:
 *      Sets the minimum object distance from the listener.
 *
 *  Arguments:
 *      FLOAT [in]: min distance.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::SetMinDistance"

HRESULT CVxd3dObject::SetMinDistance(FLOAT flMinDistance, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(fCommit)
    {
        m_opCurrent.flMinDistance = flMinDistance;
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_MINDISTANCE, &flMinDistance);
    }
    else
    {
        m_opDeferred.flMinDistance = flMinDistance;
        m_dwDeferred |= DS3DPARAM_OBJECT_MINDISTANCE;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetMode
 *
 *  Description:
 *      Sets the object mode.
 *
 *  Arguments:
 *      DWORD [in]: mode.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::SetMode"

HRESULT CVxd3dObject::SetMode(DWORD dwMode, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(fCommit)
    {
        m_opCurrent.dwMode = dwMode;
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_MODE, &dwMode);
    }
    else
    {
        m_opDeferred.dwMode = dwMode;
        m_dwDeferred |= DS3DPARAM_OBJECT_MODE;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetPosition
 *
 *  Description:
 *      Sets the object position.
 *
 *  Arguments:
 *      REFD3DVECTOR[in]: position.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::SetPosition"

HRESULT CVxd3dObject::SetPosition(REFD3DVECTOR vPosition, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(fCommit)
    {
        m_opCurrent.vPosition = vPosition;
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_POSITION, &vPosition);
    }
    else
    {
        m_opDeferred.vPosition = vPosition;
        m_dwDeferred |= DS3DPARAM_OBJECT_POSITION;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetVelocity
 *
 *  Description:
 *      Sets the object velocity.
 *
 *  Arguments:
 *      REFD3DVECTOR[in]: velocity.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::SetVelocity"

HRESULT CVxd3dObject::SetVelocity(REFD3DVECTOR vVelocity, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(fCommit)
    {
        m_opCurrent.vVelocity = vVelocity;
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_VELOCITY, &vVelocity);
    }
    else
    {
        m_opDeferred.vVelocity = vVelocity;
        m_dwDeferred |= DS3DPARAM_OBJECT_VELOCITY;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  SetAllParameters
 *
 *  Description:
 *      Sets all object parameters.
 *
 *  Arguments:
 *      LPDS3DBUFFER [in]: parameters.
 *      BOOL [in]: TRUE to commit immediately.
 *
 *  Returns:
 *      (void)
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::SetAllParameters"

HRESULT CVxd3dObject::SetAllParameters(LPCDS3DBUFFER pParams, BOOL fCommit)
{
    HRESULT                 hr  = DS_OK;

    DPF_ENTER();

    if(fCommit)
    {
        hr = m_pPropertySet->SetDsPropertyQuick(DSPROPSETID_DirectSound3DBuffer, DSPROPERTY_DIRECTSOUND3DBUFFER_ALL, pParams);

        if(SUCCEEDED(hr))
        {
            if(&m_opCurrent != pParams)
            {
                CopyMemoryOffset(&m_opCurrent, pParams, sizeof(DS3DBUFFER), sizeof(pParams->dwSize));
            }
        }
        else
        {
            DPF(DPFLVL_ERROR, "Can't set all parameters on the HW 3D buffer");
        }
    }
    else
    {
        CopyMemoryOffset(&m_opDeferred, pParams, sizeof(DS3DBUFFER), sizeof(pParams->dwSize));
        m_dwDeferred |= DS3DPARAM_OBJECT_MASK;
    }

    DPF_LEAVE_HRESULT(hr);

    return hr;
}


/***************************************************************************
 *
 *  Recalc
 *
 *  Description:
 *      Recalculates and applies the object's data based on changed object
 *      or listener valiues.
 *
 *  Arguments:
 *      DWORD [in]: changed listener settings.
 *      DWORD [in]: changed object settings.
 *
 *  Returns:
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

#undef DPF_FNAME
#define DPF_FNAME "CVxd3dObject::Recalc"

HRESULT CVxd3dObject::Recalc(DWORD dwListener, DWORD dwObject)
{
    return DS_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\directx\dsound\dsound\vmaxcoef.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1998,1999 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       iirlut.cpp
 *  Content:    DirectSound3D IIR algorithm look up table
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  4/22/98    jstokes  Created
 *
 ***************************************************************************/

// Project-specific INCLUDEs
#ifdef BUILD_LUT
#include <windows.h>
#include "vmaxhead.h"
#include "vmaxcoef.h"
#else // BUILD_LUT
#include "dsoundi.h"
#endif // BUILD_LUT

// ---------------------------------------------------------------------------
// Filter coefficient related data

#ifdef BUILD_LUT

// Floating-point biquad coefficients
const FLOAT CafBiquadCoeffs[CuiTotalBiquadCoeffs] = {

   // Full coefficients
   // 10 degrees loudspeakers
   // 8000 Hz sample rate
   // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:20:14 1999
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 7.033059e-003f, 3.547149e-002f, 4.472750e-002f, 9.305729e-002f, 4.314029e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.824444e-003f, 1.118520e-002f, 6.510579e-002f, 3.252194e-002f, -6.382936e-002f, 2.666226e-001f, 6.970667e-001f, 4.856033e-001f, 2.596509e-001f, 7.202149e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 5.820908e-003f, 3.840486e-002f, 7.415779e-002f, 5.310991e-003f, 1.147753e-002f, 3.073765e-001f, 1.000000e+000f, 8.559507e-001f, 1.899800e-001f, 5.678776e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.465204e-002f, 1.374251e-002f, 5.088350e-002f, 1.024467e-002f, 1.394964e-001f, 3.250787e-001f, 8.800784e-001f, 5.965023e-001f, 3.007994e-001f, 7.751293e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.848538e-002f, 6.729015e-002f, 5.975375e-002f, 2.172278e-002f, -2.084349e-001f, 3.699775e-002f, -1.984259e-001f, 1.000000e+000f, 3.445969e-002f, 2.565907e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.572139e-002f, -3.189473e-002f, 5.343531e-002f, 6.485011e-003f, -1.136545e-001f, 3.760196e-001f, 1.000000e+000f, 6.660102e-001f, 2.953130e-001f, 7.685209e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.797535e-002f, -8.087036e-003f, 8.830147e-002f, 1.698215e-001f, -4.669473e-001f, 3.777683e-001f, -1.000000e+000f, 7.348264e-001f, 2.107836e-001f, -6.440453e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.627956e-002f, -7.488462e-002f, 6.016677e-002f, 9.577620e-002f, -4.322072e-001f, 3.100358e-001f, 8.117924e-001f, 5.875676e-001f, 2.272701e-001f, 6.741730e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 4.272929e-002f, -8.554181e-002f, 6.224793e-002f, 1.456985e-001f, -4.974141e-001f, 2.866599e-001f, 7.227638e-001f, 5.624591e-001f, 1.847165e-001f, 6.078044e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 7.918755e-003f, -4.512186e-002f, 6.543167e-002f, 2.000294e-001f, -6.298149e-001f, 7.113792e-001f, -9.409146e-001f, 1.000000e+000f, 3.592044e-001f, -5.301053e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.959614e-002f, 4.080099e-002f, 5.822701e-002f, 5.560546e-002f, 3.334830e-001f, 5.146019e-001f, -9.872358e-001f, 6.286215e-001f, 1.981836e-001f, -5.661912e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.743184e-003f, -3.738509e-002f, 1.369139e-001f, 2.254333e-001f, -1.077856e-001f, 2.312804e-001f, -1.658852e-001f, 3.654160e-001f, 2.321748e-001f, -5.735199e-001f, 4.111869e-001f, -1.000000e+000f, 6.103357e-001f, 3.889902e-001f, -8.790241e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.407513e-002f, 2.712179e-002f, 5.901908e-002f, 1.125600e-002f, 1.500400e-001f, 4.556938e-001f, -9.017149e-001f, 5.877661e-001f, 1.777785e-001f, -5.247098e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.799138e-003f, -2.659824e-002f, 1.048596e-001f, 2.024624e-001f, -5.506403e-001f, 2.689169e-001f, -2.513784e-001f, 4.361606e-001f, 2.223985e-001f, -2.741862e-001f, 4.300012e-001f, -1.000000e+000f, 5.834849e-001f, 4.050306e-001f, -8.975078e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.585265e-002f, 3.721492e-002f, 6.060532e-002f, 4.930051e-002f, 3.138510e-001f, 4.114084e-001f, -8.817114e-001f, 5.880411e-001f, 2.168072e-001f, -6.178699e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.384839e-002f, -2.256204e-003f, 9.232234e-002f, 1.046682e-001f, -4.516710e-001f, 4.539787e-001f, -1.000000e+000f, 5.764224e-001f, 3.772078e-001f, -8.517448e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.267771e-002f, 3.478138e-002f, 7.344272e-002f, 2.412218e-002f, 2.160935e-001f, 2.863602e-001f, -6.787753e-001f, 4.829120e-001f, 1.695972e-001f, -5.771275e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.391774e-002f, -1.568200e-003f, 9.258580e-002f, 1.008140e-001f, -4.490300e-001f, 4.570589e-001f, -1.000000e+000f, 5.746471e-001f, 3.804903e-001f, -8.534309e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.078622e-002f, 5.243314e-002f, 7.208683e-002f, 8.897956e-002f, 4.063419e-001f, 2.634892e-001f, -6.650993e-001f, 4.728545e-001f, 2.182801e-001f, -6.584747e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.394445e-002f, -1.547087e-003f, 9.264066e-002f, 1.006950e-001f, -4.487650e-001f, 4.572904e-001f, -1.000000e+000f, 5.742979e-001f, 3.810619e-001f, -8.541067e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 6.593996e-003f, 4.243479e-002f, 6.929474e-002f, 6.719155e-002f, 3.664700e-001f, 2.750862e-001f, -7.231584e-001f, 4.992352e-001f, 2.681434e-001f, -7.280812e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, 5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 7.033059e-003f, 3.547149e-002f, 4.472750e-002f, 9.305729e-002f, 4.314029e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.824444e-003f, 1.118520e-002f, 6.510579e-002f, 3.252194e-002f, -6.382936e-002f, 2.666226e-001f, 6.970667e-001f, 4.856033e-001f, 2.596509e-001f, 7.202149e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 7.204550e-003f, 3.753077e-002f, 6.272500e-002f, 2.085924e-002f, 2.258299e-002f, 1.369326e-001f, 6.333882e-001f, 1.000000e+000f, 1.489357e-001f, 4.450238e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.701823e-002f, 2.577802e-002f, 5.335527e-002f, 1.570329e-002f, 6.120583e-002f, 2.022581e-001f, 6.586539e-001f, 5.473007e-001f, 2.455078e-001f, 6.997719e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.848538e-002f, 6.729015e-002f, 5.975375e-002f, 2.172278e-002f, -2.084349e-001f, 3.699775e-002f, -1.984259e-001f, 1.000000e+000f, 3.445969e-002f, 2.565907e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.572139e-002f, -3.189473e-002f, 5.343531e-002f, 6.485011e-003f, -1.136545e-001f, 3.760196e-001f, 1.000000e+000f, 6.660102e-001f, 2.953130e-001f, 7.685209e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.797535e-002f, -8.087036e-003f, 8.830147e-002f, 1.698215e-001f, -4.669473e-001f, 3.777683e-001f, -1.000000e+000f, 7.348264e-001f, 2.107836e-001f, -6.440453e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.627956e-002f, -7.488462e-002f, 6.016677e-002f, 9.577620e-002f, -4.322072e-001f, 3.100358e-001f, 8.117924e-001f, 5.875676e-001f, 2.272701e-001f, 6.741730e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.285403e-002f, -5.813363e-002f, 6.574708e-002f, 2.237711e-001f, -6.689859e-001f, 3.581891e-001f, -8.080756e-001f, 1.000000e+000f, 2.776064e-001f, -5.429282e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.008195e-002f, 5.330260e-002f, 5.834297e-002f, 1.030802e-001f, 4.523569e-001f, 4.767180e-001f, -9.401531e-001f, 6.209889e-001f, 1.960363e-001f, -5.724528e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 7.918755e-003f, -4.512186e-002f, 6.543167e-002f, 2.000294e-001f, -6.298149e-001f, 7.113792e-001f, -9.409146e-001f, 1.000000e+000f, 3.592044e-001f, -5.301053e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.959614e-002f, 4.080099e-002f, 5.822701e-002f, 5.560546e-002f, 3.334830e-001f, 5.146019e-001f, -9.872358e-001f, 6.286215e-001f, 1.981836e-001f, -5.661912e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.743184e-003f, -3.738509e-002f, 1.369139e-001f, 2.254333e-001f, -1.077856e-001f, 2.312804e-001f, -1.658852e-001f, 3.654160e-001f, 2.321748e-001f, -5.735199e-001f, 4.111869e-001f, -1.000000e+000f, 6.103357e-001f, 3.889902e-001f, -8.790241e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.407513e-002f, 2.712179e-002f, 5.901908e-002f, 1.125600e-002f, 1.500400e-001f, 4.556938e-001f, -9.017149e-001f, 5.877661e-001f, 1.777785e-001f, -5.247098e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.799138e-003f, -2.659824e-002f, 1.048596e-001f, 2.024624e-001f, -5.506403e-001f, 2.689169e-001f, -2.513784e-001f, 4.361606e-001f, 2.223985e-001f, -2.741862e-001f, 4.300012e-001f, -1.000000e+000f, 5.834849e-001f, 4.050306e-001f, -8.975078e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.585265e-002f, 3.721492e-002f, 6.060532e-002f, 4.930051e-002f, 3.138510e-001f, 4.114084e-001f, -8.817114e-001f, 5.880411e-001f, 2.168072e-001f, -6.178699e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.261089e-002f, -6.442387e-003f, 9.225757e-002f, 1.227467e-001f, -4.744484e-001f, 4.546656e-001f, -1.000000e+000f, 5.783446e-001f, 3.757639e-001f, -8.483694e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.241019e-002f, 3.596587e-002f, 7.308498e-002f, 2.761156e-002f, 2.304412e-001f, 2.920229e-001f, -6.853735e-001f, 4.852650e-001f, 1.788331e-001f, -5.865592e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.391774e-002f, -1.568200e-003f, 9.258580e-002f, 1.008140e-001f, -4.490300e-001f, 4.570589e-001f, -1.000000e+000f, 5.746471e-001f, 3.804903e-001f, -8.534309e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.078622e-002f, 5.243314e-002f, 7.208683e-002f, 8.897956e-002f, 4.063419e-001f, 2.634892e-001f, -6.650993e-001f, 4.728545e-001f, 2.182801e-001f, -6.584747e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 8.687823e-003f, 4.904546e-002f, 7.135173e-002f, 7.622677e-002f, 3.902643e-001f, 2.620834e-001f, -6.680719e-001f, 4.773115e-001f, 2.163425e-001f, -6.576404e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394359e-002f, -1.547066e-003f, 9.264045e-002f, 1.006928e-001f, -4.487600e-001f, 4.572832e-001f, -1.000000e+000f, 5.742992e-001f, 3.810593e-001f, -8.541096e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 9.820156e-003f, 5.278473e-002f, 7.260054e-002f, 8.516353e-002f, 4.073492e-001f, 3.037205e-001f, -7.610630e-001f, 4.808768e-001f, 3.232804e-001f, -8.036575e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, 5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 7.033059e-003f, 3.547149e-002f, 4.472750e-002f, 9.305729e-002f, 4.314029e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.824444e-003f, 1.118520e-002f, 6.510579e-002f, 3.252194e-002f, -6.382936e-002f, 2.666226e-001f, 6.970667e-001f, 4.856033e-001f, 2.596509e-001f, 7.202149e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 7.204550e-003f, 3.753077e-002f, 6.272500e-002f, 2.085924e-002f, 2.258299e-002f, 1.369326e-001f, 6.333882e-001f, 1.000000e+000f, 1.489357e-001f, 4.450238e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.701823e-002f, 2.577802e-002f, 5.335527e-002f, 1.570329e-002f, 6.120583e-002f, 2.022581e-001f, 6.586539e-001f, 5.473007e-001f, 2.455078e-001f, 6.997719e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 5.820908e-003f, 3.840486e-002f, 7.415779e-002f, 5.310991e-003f, 1.147753e-002f, 3.073765e-001f, 1.000000e+000f, 8.559507e-001f, 1.899800e-001f, 5.678776e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.465204e-002f, 1.374251e-002f, 5.088350e-002f, 1.024467e-002f, 1.394964e-001f, 3.250787e-001f, 8.800784e-001f, 5.965023e-001f, 3.007994e-001f, 7.751293e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.848538e-002f, 6.729015e-002f, 5.975375e-002f, 2.172278e-002f, -2.084349e-001f, 3.699775e-002f, -1.984259e-001f, 1.000000e+000f, 3.445969e-002f, 2.565907e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.572139e-002f, -3.189473e-002f, 5.343531e-002f, 6.485011e-003f, -1.136545e-001f, 3.760196e-001f, 1.000000e+000f, 6.660102e-001f, 2.953130e-001f, 7.685209e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.797535e-002f, -8.087036e-003f, 8.830147e-002f, 1.698215e-001f, -4.669473e-001f, 3.777683e-001f, -1.000000e+000f, 7.348264e-001f, 2.107836e-001f, -6.440453e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.627956e-002f, -7.488462e-002f, 6.016677e-002f, 9.577620e-002f, -4.322072e-001f, 3.100358e-001f, 8.117924e-001f, 5.875676e-001f, 2.272701e-001f, 6.741730e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 4.272929e-002f, -8.554181e-002f, 6.224793e-002f, 1.456985e-001f, -4.974141e-001f, 2.866599e-001f, 7.227638e-001f, 5.624591e-001f, 1.847165e-001f, 6.078044e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.285403e-002f, -5.813363e-002f, 6.574708e-002f, 2.237711e-001f, -6.689859e-001f, 3.581891e-001f, -8.080756e-001f, 1.000000e+000f, 2.776064e-001f, -5.429282e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.008195e-002f, 5.330260e-002f, 5.834297e-002f, 1.030802e-001f, 4.523569e-001f, 4.767180e-001f, -9.401531e-001f, 6.209889e-001f, 1.960363e-001f, -5.724528e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 7.918755e-003f, -4.512186e-002f, 6.543167e-002f, 2.000294e-001f, -6.298149e-001f, 7.113792e-001f, -9.409146e-001f, 1.000000e+000f, 3.592044e-001f, -5.301053e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.959614e-002f, 4.080099e-002f, 5.822701e-002f, 5.560546e-002f, 3.334830e-001f, 5.146019e-001f, -9.872358e-001f, 6.286215e-001f, 1.981836e-001f, -5.661912e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.920621e-003f, 7.442289e-003f, 7.541970e-002f, 2.133214e-001f, -5.324085e-001f, 4.214500e-001f, -3.449661e-001f, 6.586161e-001f, 2.361171e-001f, -3.072142e-002f, 4.150337e-001f, -1.000000e+000f, 6.440963e-001f, 3.348852e-001f, -8.056512e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.391120e-002f, 2.829468e-002f, 5.900460e-002f, 1.812836e-002f, 1.904120e-001f, 5.011931e-001f, -9.376352e-001f, 5.886801e-001f, 2.150414e-001f, -5.585173e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.743184e-003f, -3.738509e-002f, 1.369139e-001f, 2.254333e-001f, -1.077856e-001f, 2.312804e-001f, -1.658852e-001f, 3.654160e-001f, 2.321748e-001f, -5.735199e-001f, 4.111869e-001f, -1.000000e+000f, 6.103357e-001f, 3.889902e-001f, -8.790241e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.407513e-002f, 2.712179e-002f, 5.901908e-002f, 1.125600e-002f, 1.500400e-001f, 4.556938e-001f, -9.017149e-001f, 5.877661e-001f, 1.777785e-001f, -5.247098e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.799138e-003f, -2.659824e-002f, 1.048596e-001f, 2.024624e-001f, -5.506403e-001f, 2.689169e-001f, -2.513784e-001f, 4.361606e-001f, 2.223985e-001f, -2.741862e-001f, 4.300012e-001f, -1.000000e+000f, 5.834849e-001f, 4.050306e-001f, -8.975078e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.585265e-002f, 3.721492e-002f, 6.060532e-002f, 4.930051e-002f, 3.138510e-001f, 4.114084e-001f, -8.817114e-001f, 5.880411e-001f, 2.168072e-001f, -6.178699e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.261089e-002f, -6.442387e-003f, 9.225757e-002f, 1.227467e-001f, -4.744484e-001f, 4.546656e-001f, -1.000000e+000f, 5.783446e-001f, 3.757639e-001f, -8.483694e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.241019e-002f, 3.596587e-002f, 7.308498e-002f, 2.761156e-002f, 2.304412e-001f, 2.920229e-001f, -6.853735e-001f, 4.852650e-001f, 1.788331e-001f, -5.865592e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.384839e-002f, -2.256204e-003f, 9.232234e-002f, 1.046682e-001f, -4.516710e-001f, 4.539787e-001f, -1.000000e+000f, 5.764224e-001f, 3.772078e-001f, -8.517448e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.267771e-002f, 3.478138e-002f, 7.344272e-002f, 2.412218e-002f, 2.160935e-001f, 2.863602e-001f, -6.787753e-001f, 4.829120e-001f, 1.695972e-001f, -5.771275e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.391774e-002f, -1.568200e-003f, 9.258580e-002f, 1.008140e-001f, -4.490300e-001f, 4.570589e-001f, -1.000000e+000f, 5.746471e-001f, 3.804903e-001f, -8.534309e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.078622e-002f, 5.243314e-002f, 7.208683e-002f, 8.897956e-002f, 4.063419e-001f, 2.634892e-001f, -6.650993e-001f, 4.728545e-001f, 2.182801e-001f, -6.584747e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 8.687823e-003f, 4.904546e-002f, 7.135173e-002f, 7.622677e-002f, 3.902643e-001f, 2.620834e-001f, -6.680719e-001f, 4.773115e-001f, 2.163425e-001f, -6.576404e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394445e-002f, -1.547087e-003f, 9.264066e-002f, 1.006950e-001f, -4.487650e-001f, 4.572904e-001f, -1.000000e+000f, 5.742979e-001f, 3.810619e-001f, -8.541067e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 6.593996e-003f, 4.243479e-002f, 6.929474e-002f, 6.719155e-002f, 3.664700e-001f, 2.750862e-001f, -7.231584e-001f, 4.992352e-001f, 2.681434e-001f, -7.280812e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394359e-002f, -1.547066e-003f, 9.264045e-002f, 1.006928e-001f, -4.487600e-001f, 4.572832e-001f, -1.000000e+000f, 5.742992e-001f, 3.810593e-001f, -8.541096e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.820156e-003f, 5.278473e-002f, 7.260054e-002f, 8.516353e-002f, 4.073492e-001f, 3.037205e-001f, -7.610630e-001f, 4.808768e-001f, 3.232804e-001f, -8.036575e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, 4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 7.033059e-003f, 3.547149e-002f, 4.472750e-002f, 9.305729e-002f, 4.314029e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.824444e-003f, 1.118520e-002f, 6.510579e-002f, 3.252194e-002f, -6.382936e-002f, 2.666226e-001f, 6.970667e-001f, 4.856033e-001f, 2.596509e-001f, 7.202149e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 7.204550e-003f, 3.753077e-002f, 6.272500e-002f, 2.085924e-002f, 2.258299e-002f, 1.369326e-001f, 6.333882e-001f, 1.000000e+000f, 1.489357e-001f, 4.450238e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.701823e-002f, 2.577802e-002f, 5.335527e-002f, 1.570329e-002f, 6.120583e-002f, 2.022581e-001f, 6.586539e-001f, 5.473007e-001f, 2.455078e-001f, 6.997719e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 5.820908e-003f, 3.840486e-002f, 7.415779e-002f, 5.310991e-003f, 1.147753e-002f, 3.073765e-001f, 1.000000e+000f, 8.559507e-001f, 1.899800e-001f, 5.678776e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.465204e-002f, 1.374251e-002f, 5.088350e-002f, 1.024467e-002f, 1.394964e-001f, 3.250787e-001f, 8.800784e-001f, 5.965023e-001f, 3.007994e-001f, 7.751293e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.848538e-002f, 6.729015e-002f, 5.975375e-002f, 2.172278e-002f, -2.084349e-001f, 3.699775e-002f, -1.984259e-001f, 1.000000e+000f, 3.445969e-002f, 2.565907e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.572139e-002f, -3.189473e-002f, 5.343531e-002f, 6.485011e-003f, -1.136545e-001f, 3.760196e-001f, 1.000000e+000f, 6.660102e-001f, 2.953130e-001f, 7.685209e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.797535e-002f, -8.087036e-003f, 8.830147e-002f, 1.698215e-001f, -4.669473e-001f, 3.777683e-001f, -1.000000e+000f, 7.348264e-001f, 2.107836e-001f, -6.440453e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.627956e-002f, -7.488462e-002f, 6.016677e-002f, 9.577620e-002f, -4.322072e-001f, 3.100358e-001f, 8.117924e-001f, 5.875676e-001f, 2.272701e-001f, 6.741730e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 4.272929e-002f, -8.554181e-002f, 6.224793e-002f, 1.456985e-001f, -4.974141e-001f, 2.866599e-001f, 7.227638e-001f, 5.624591e-001f, 1.847165e-001f, 6.078044e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.285403e-002f, -5.813363e-002f, 6.574708e-002f, 2.237711e-001f, -6.689859e-001f, 3.581891e-001f, -8.080756e-001f, 1.000000e+000f, 2.776064e-001f, -5.429282e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.008195e-002f, 5.330260e-002f, 5.834297e-002f, 1.030802e-001f, 4.523569e-001f, 4.767180e-001f, -9.401531e-001f, 6.209889e-001f, 1.960363e-001f, -5.724528e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 7.918755e-003f, -4.512186e-002f, 6.543167e-002f, 2.000294e-001f, -6.298149e-001f, 7.113792e-001f, -9.409146e-001f, 1.000000e+000f, 3.592044e-001f, -5.301053e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.959614e-002f, 4.080099e-002f, 5.822701e-002f, 5.560546e-002f, 3.334830e-001f, 5.146019e-001f, -9.872358e-001f, 6.286215e-001f, 1.981836e-001f, -5.661912e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.920621e-003f, 7.442289e-003f, 7.541970e-002f, 2.133214e-001f, -5.324085e-001f, 4.214500e-001f, -3.449661e-001f, 6.586161e-001f, 2.361171e-001f, -3.072142e-002f, 4.150337e-001f, -1.000000e+000f, 6.440963e-001f, 3.348852e-001f, -8.056512e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.391120e-002f, 2.829468e-002f, 5.900460e-002f, 1.812836e-002f, 1.904120e-001f, 5.011931e-001f, -9.376352e-001f, 5.886801e-001f, 2.150414e-001f, -5.585173e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.743184e-003f, -3.738509e-002f, 1.369139e-001f, 2.254333e-001f, -1.077856e-001f, 2.312804e-001f, -1.658852e-001f, 3.654160e-001f, 2.321748e-001f, -5.735199e-001f, 4.111869e-001f, -1.000000e+000f, 6.103357e-001f, 3.889902e-001f, -8.790241e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.407513e-002f, 2.712179e-002f, 5.901908e-002f, 1.125600e-002f, 1.500400e-001f, 4.556938e-001f, -9.017149e-001f, 5.877661e-001f, 1.777785e-001f, -5.247098e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.799138e-003f, -2.659824e-002f, 1.048596e-001f, 2.024624e-001f, -5.506403e-001f, 2.689169e-001f, -2.513784e-001f, 4.361606e-001f, 2.223985e-001f, -2.741862e-001f, 4.300012e-001f, -1.000000e+000f, 5.834849e-001f, 4.050306e-001f, -8.975078e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.585265e-002f, 3.721492e-002f, 6.060532e-002f, 4.930051e-002f, 3.138510e-001f, 4.114084e-001f, -8.817114e-001f, 5.880411e-001f, 2.168072e-001f, -6.178699e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.261089e-002f, -6.442387e-003f, 9.225757e-002f, 1.227467e-001f, -4.744484e-001f, 4.546656e-001f, -1.000000e+000f, 5.783446e-001f, 3.757639e-001f, -8.483694e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.241019e-002f, 3.596587e-002f, 7.308498e-002f, 2.761156e-002f, 2.304412e-001f, 2.920229e-001f, -6.853735e-001f, 4.852650e-001f, 1.788331e-001f, -5.865592e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.384839e-002f, -2.256204e-003f, 9.232234e-002f, 1.046682e-001f, -4.516710e-001f, 4.539787e-001f, -1.000000e+000f, 5.764224e-001f, 3.772078e-001f, -8.517448e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.267771e-002f, 3.478138e-002f, 7.344272e-002f, 2.412218e-002f, 2.160935e-001f, 2.863602e-001f, -6.787753e-001f, 4.829120e-001f, 1.695972e-001f, -5.771275e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.391774e-002f, -1.568200e-003f, 9.258580e-002f, 1.008140e-001f, -4.490300e-001f, 4.570589e-001f, -1.000000e+000f, 5.746471e-001f, 3.804903e-001f, -8.534309e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.078622e-002f, 5.243314e-002f, 7.208683e-002f, 8.897956e-002f, 4.063419e-001f, 2.634892e-001f, -6.650993e-001f, 4.728545e-001f, 2.182801e-001f, -6.584747e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 8.687823e-003f, 4.904546e-002f, 7.135173e-002f, 7.622677e-002f, 3.902643e-001f, 2.620834e-001f, -6.680719e-001f, 4.773115e-001f, 2.163425e-001f, -6.576404e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394445e-002f, -1.547087e-003f, 9.264066e-002f, 1.006950e-001f, -4.487650e-001f, 4.572904e-001f, -1.000000e+000f, 5.742979e-001f, 3.810619e-001f, -8.541067e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 6.593996e-003f, 4.243479e-002f, 6.929474e-002f, 6.719155e-002f, 3.664700e-001f, 2.750862e-001f, -7.231584e-001f, 4.992352e-001f, 2.681434e-001f, -7.280812e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394359e-002f, -1.547066e-003f, 9.264045e-002f, 1.006928e-001f, -4.487600e-001f, 4.572832e-001f, -1.000000e+000f, 5.742992e-001f, 3.810593e-001f, -8.541096e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.820156e-003f, 5.278473e-002f, 7.260054e-002f, 8.516353e-002f, 4.073492e-001f, 3.037205e-001f, -7.610630e-001f, 4.808768e-001f, 3.232804e-001f, -8.036575e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, 2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  7.033059e-003f, 3.547149e-002f, 4.472750e-002f, 9.305729e-002f, 4.314029e-001f, 1.824444e-003f, 1.118520e-002f, 6.510579e-002f, 3.252194e-002f, -6.382936e-002f, 2.666226e-001f, 6.970667e-001f, 4.856033e-001f, 2.596509e-001f, 7.202149e-001f,
  0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  7.204550e-003f, 3.753077e-002f, 6.272500e-002f, 2.085924e-002f, 2.258299e-002f, 1.369326e-001f, 6.333882e-001f, 1.000000e+000f, 1.489357e-001f, 4.450238e-001f, 1.701823e-002f, 2.577802e-002f, 5.335527e-002f, 1.570329e-002f, 6.120583e-002f, 2.022581e-001f, 6.586539e-001f, 5.473007e-001f, 2.455078e-001f, 6.997719e-001f,
  5.820908e-003f, 3.840486e-002f, 7.415779e-002f, 5.310991e-003f, 1.147753e-002f, 3.073765e-001f, 1.000000e+000f, 8.559507e-001f, 1.899800e-001f, 5.678776e-001f, 2.465204e-002f, 1.374251e-002f, 5.088350e-002f, 1.024467e-002f, 1.394964e-001f, 3.250787e-001f, 8.800784e-001f, 5.965023e-001f, 3.007994e-001f, 7.751293e-001f,
  4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  2.848538e-002f, 6.729015e-002f, 5.975375e-002f, 2.172278e-002f, -2.084349e-001f, 3.699775e-002f, -1.984259e-001f, 1.000000e+000f, 3.445969e-002f, 2.565907e-001f, 2.572139e-002f, -3.189473e-002f, 5.343531e-002f, 6.485011e-003f, -1.136545e-001f, 3.760196e-001f, 1.000000e+000f, 6.660102e-001f, 2.953130e-001f, 7.685209e-001f,
  3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  1.797535e-002f, -8.087036e-003f, 8.830147e-002f, 1.698215e-001f, -4.669473e-001f, 3.777683e-001f, -1.000000e+000f, 7.348264e-001f, 2.107836e-001f, -6.440453e-001f, 3.627956e-002f, -7.488462e-002f, 6.016677e-002f, 9.577620e-002f, -4.322072e-001f, 3.100358e-001f, 8.117924e-001f, 5.875676e-001f, 2.272701e-001f, 6.741730e-001f,
  2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 4.272929e-002f, -8.554181e-002f, 6.224793e-002f, 1.456985e-001f, -4.974141e-001f, 2.866599e-001f, 7.227638e-001f, 5.624591e-001f, 1.847165e-001f, 6.078044e-001f,
  2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  1.285403e-002f, -5.813363e-002f, 6.574708e-002f, 2.237711e-001f, -6.689859e-001f, 3.581891e-001f, -8.080756e-001f, 1.000000e+000f, 2.776064e-001f, -5.429282e-001f, 2.008195e-002f, 5.330260e-002f, 5.834297e-002f, 1.030802e-001f, 4.523569e-001f, 4.767180e-001f, -9.401531e-001f, 6.209889e-001f, 1.960363e-001f, -5.724528e-001f,
  1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  7.918755e-003f, -4.512186e-002f, 6.543167e-002f, 2.000294e-001f, -6.298149e-001f, 7.113792e-001f, -9.409146e-001f, 1.000000e+000f, 3.592044e-001f, -5.301053e-001f, 1.959614e-002f, 4.080099e-002f, 5.822701e-002f, 5.560546e-002f, 3.334830e-001f, 5.146019e-001f, -9.872358e-001f, 6.286215e-001f, 1.981836e-001f, -5.661912e-001f,
  6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  1.920621e-003f, 7.442289e-003f, 7.541970e-002f, 2.133214e-001f, -5.324085e-001f, 4.214500e-001f, -3.449661e-001f, 6.586161e-001f, 2.361171e-001f, -3.072142e-002f, 4.150337e-001f, -1.000000e+000f, 6.440963e-001f, 3.348852e-001f, -8.056512e-001f, 2.391120e-002f, 2.829468e-002f, 5.900460e-002f, 1.812836e-002f, 1.904120e-001f, 5.011931e-001f, -9.376352e-001f, 5.886801e-001f, 2.150414e-001f, -5.585173e-001f,
  2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  2.743184e-003f, -3.738509e-002f, 1.369139e-001f, 2.254333e-001f, -1.077856e-001f, 2.312804e-001f, -1.658852e-001f, 3.654160e-001f, 2.321748e-001f, -5.735199e-001f, 4.111869e-001f, -1.000000e+000f, 6.103357e-001f, 3.889902e-001f, -8.790241e-001f, 2.407513e-002f, 2.712179e-002f, 5.901908e-002f, 1.125600e-002f, 1.500400e-001f, 4.556938e-001f, -9.017149e-001f, 5.877661e-001f, 1.777785e-001f, -5.247098e-001f,
  1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  1.799138e-003f, -2.659824e-002f, 1.048596e-001f, 2.024624e-001f, -5.506403e-001f, 2.689169e-001f, -2.513784e-001f, 4.361606e-001f, 2.223985e-001f, -2.741862e-001f, 4.300012e-001f, -1.000000e+000f, 5.834849e-001f, 4.050306e-001f, -8.975078e-001f, 1.585265e-002f, 3.721492e-002f, 6.060532e-002f, 4.930051e-002f, 3.138510e-001f, 4.114084e-001f, -8.817114e-001f, 5.880411e-001f, 2.168072e-001f, -6.178699e-001f,
  3.261089e-002f, -6.442387e-003f, 9.225757e-002f, 1.227467e-001f, -4.744484e-001f, 4.546656e-001f, -1.000000e+000f, 5.783446e-001f, 3.757639e-001f, -8.483694e-001f, 1.241019e-002f, 3.596587e-002f, 7.308498e-002f, 2.761156e-002f, 2.304412e-001f, 2.920229e-001f, -6.853735e-001f, 4.852650e-001f, 1.788331e-001f, -5.865592e-001f,
  3.384839e-002f, -2.256204e-003f, 9.232234e-002f, 1.046682e-001f, -4.516710e-001f, 4.539787e-001f, -1.000000e+000f, 5.764224e-001f, 3.772078e-001f, -8.517448e-001f, 1.267771e-002f, 3.478138e-002f, 7.344272e-002f, 2.412218e-002f, 2.160935e-001f, 2.863602e-001f, -6.787753e-001f, 4.829120e-001f, 1.695972e-001f, -5.771275e-001f,
  3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  3.391774e-002f, -1.568200e-003f, 9.258580e-002f, 1.008140e-001f, -4.490300e-001f, 4.570589e-001f, -1.000000e+000f, 5.746471e-001f, 3.804903e-001f, -8.534309e-001f, 1.078622e-002f, 5.243314e-002f, 7.208683e-002f, 8.897956e-002f, 4.063419e-001f, 2.634892e-001f, -6.650993e-001f, 4.728545e-001f, 2.182801e-001f, -6.584747e-001f,
  3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 8.687823e-003f, 4.904546e-002f, 7.135173e-002f, 7.622677e-002f, 3.902643e-001f, 2.620834e-001f, -6.680719e-001f, 4.773115e-001f, 2.163425e-001f, -6.576404e-001f,
  3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  3.394445e-002f, -1.547087e-003f, 9.264066e-002f, 1.006950e-001f, -4.487650e-001f, 4.572904e-001f, -1.000000e+000f, 5.742979e-001f, 3.810619e-001f, -8.541067e-001f, 6.593996e-003f, 4.243479e-002f, 6.929474e-002f, 6.719155e-002f, 3.664700e-001f, 2.750862e-001f, -7.231584e-001f, 4.992352e-001f, 2.681434e-001f, -7.280812e-001f,
  3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  3.394359e-002f, -1.547066e-003f, 9.264045e-002f, 1.006928e-001f, -4.487600e-001f, 4.572832e-001f, -1.000000e+000f, 5.742992e-001f, 3.810593e-001f, -8.541096e-001f, 9.820156e-003f, 5.278473e-002f, 7.260054e-002f, 8.516353e-002f, 4.073492e-001f, 3.037205e-001f, -7.610630e-001f, 4.808768e-001f, 3.232804e-001f, -8.036575e-001f,
  3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 7.033059e-003f, 3.547149e-002f, 4.472750e-002f, 9.305729e-002f, 4.314029e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.824444e-003f, 1.118520e-002f, 6.510579e-002f, 3.252194e-002f, -6.382936e-002f, 2.666226e-001f, 6.970667e-001f, 4.856033e-001f, 2.596509e-001f, 7.202149e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 7.204550e-003f, 3.753077e-002f, 6.272500e-002f, 2.085924e-002f, 2.258299e-002f, 1.369326e-001f, 6.333882e-001f, 1.000000e+000f, 1.489357e-001f, 4.450238e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.701823e-002f, 2.577802e-002f, 5.335527e-002f, 1.570329e-002f, 6.120583e-002f, 2.022581e-001f, 6.586539e-001f, 5.473007e-001f, 2.455078e-001f, 6.997719e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 5.820908e-003f, 3.840486e-002f, 7.415779e-002f, 5.310991e-003f, 1.147753e-002f, 3.073765e-001f, 1.000000e+000f, 8.559507e-001f, 1.899800e-001f, 5.678776e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.465204e-002f, 1.374251e-002f, 5.088350e-002f, 1.024467e-002f, 1.394964e-001f, 3.250787e-001f, 8.800784e-001f, 5.965023e-001f, 3.007994e-001f, 7.751293e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.848538e-002f, 6.729015e-002f, 5.975375e-002f, 2.172278e-002f, -2.084349e-001f, 3.699775e-002f, -1.984259e-001f, 1.000000e+000f, 3.445969e-002f, 2.565907e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.572139e-002f, -3.189473e-002f, 5.343531e-002f, 6.485011e-003f, -1.136545e-001f, 3.760196e-001f, 1.000000e+000f, 6.660102e-001f, 2.953130e-001f, 7.685209e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.797535e-002f, -8.087036e-003f, 8.830147e-002f, 1.698215e-001f, -4.669473e-001f, 3.777683e-001f, -1.000000e+000f, 7.348264e-001f, 2.107836e-001f, -6.440453e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.627956e-002f, -7.488462e-002f, 6.016677e-002f, 9.577620e-002f, -4.322072e-001f, 3.100358e-001f, 8.117924e-001f, 5.875676e-001f, 2.272701e-001f, 6.741730e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 4.272929e-002f, -8.554181e-002f, 6.224793e-002f, 1.456985e-001f, -4.974141e-001f, 2.866599e-001f, 7.227638e-001f, 5.624591e-001f, 1.847165e-001f, 6.078044e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.285403e-002f, -5.813363e-002f, 6.574708e-002f, 2.237711e-001f, -6.689859e-001f, 3.581891e-001f, -8.080756e-001f, 1.000000e+000f, 2.776064e-001f, -5.429282e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.008195e-002f, 5.330260e-002f, 5.834297e-002f, 1.030802e-001f, 4.523569e-001f, 4.767180e-001f, -9.401531e-001f, 6.209889e-001f, 1.960363e-001f, -5.724528e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 7.918755e-003f, -4.512186e-002f, 6.543167e-002f, 2.000294e-001f, -6.298149e-001f, 7.113792e-001f, -9.409146e-001f, 1.000000e+000f, 3.592044e-001f, -5.301053e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.959614e-002f, 4.080099e-002f, 5.822701e-002f, 5.560546e-002f, 3.334830e-001f, 5.146019e-001f, -9.872358e-001f, 6.286215e-001f, 1.981836e-001f, -5.661912e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.920621e-003f, 7.442289e-003f, 7.541970e-002f, 2.133214e-001f, -5.324085e-001f, 4.214500e-001f, -3.449661e-001f, 6.586161e-001f, 2.361171e-001f, -3.072142e-002f, 4.150337e-001f, -1.000000e+000f, 6.440963e-001f, 3.348852e-001f, -8.056512e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.391120e-002f, 2.829468e-002f, 5.900460e-002f, 1.812836e-002f, 1.904120e-001f, 5.011931e-001f, -9.376352e-001f, 5.886801e-001f, 2.150414e-001f, -5.585173e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.743184e-003f, -3.738509e-002f, 1.369139e-001f, 2.254333e-001f, -1.077856e-001f, 2.312804e-001f, -1.658852e-001f, 3.654160e-001f, 2.321748e-001f, -5.735199e-001f, 4.111869e-001f, -1.000000e+000f, 6.103357e-001f, 3.889902e-001f, -8.790241e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.407513e-002f, 2.712179e-002f, 5.901908e-002f, 1.125600e-002f, 1.500400e-001f, 4.556938e-001f, -9.017149e-001f, 5.877661e-001f, 1.777785e-001f, -5.247098e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.799138e-003f, -2.659824e-002f, 1.048596e-001f, 2.024624e-001f, -5.506403e-001f, 2.689169e-001f, -2.513784e-001f, 4.361606e-001f, 2.223985e-001f, -2.741862e-001f, 4.300012e-001f, -1.000000e+000f, 5.834849e-001f, 4.050306e-001f, -8.975078e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.585265e-002f, 3.721492e-002f, 6.060532e-002f, 4.930051e-002f, 3.138510e-001f, 4.114084e-001f, -8.817114e-001f, 5.880411e-001f, 2.168072e-001f, -6.178699e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.261089e-002f, -6.442387e-003f, 9.225757e-002f, 1.227467e-001f, -4.744484e-001f, 4.546656e-001f, -1.000000e+000f, 5.783446e-001f, 3.757639e-001f, -8.483694e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.241019e-002f, 3.596587e-002f, 7.308498e-002f, 2.761156e-002f, 2.304412e-001f, 2.920229e-001f, -6.853735e-001f, 4.852650e-001f, 1.788331e-001f, -5.865592e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.384839e-002f, -2.256204e-003f, 9.232234e-002f, 1.046682e-001f, -4.516710e-001f, 4.539787e-001f, -1.000000e+000f, 5.764224e-001f, 3.772078e-001f, -8.517448e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.267771e-002f, 3.478138e-002f, 7.344272e-002f, 2.412218e-002f, 2.160935e-001f, 2.863602e-001f, -6.787753e-001f, 4.829120e-001f, 1.695972e-001f, -5.771275e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.391774e-002f, -1.568200e-003f, 9.258580e-002f, 1.008140e-001f, -4.490300e-001f, 4.570589e-001f, -1.000000e+000f, 5.746471e-001f, 3.804903e-001f, -8.534309e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 1.078622e-002f, 5.243314e-002f, 7.208683e-002f, 8.897956e-002f, 4.063419e-001f, 2.634892e-001f, -6.650993e-001f, 4.728545e-001f, 2.182801e-001f, -6.584747e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 8.687823e-003f, 4.904546e-002f, 7.135173e-002f, 7.622677e-002f, 3.902643e-001f, 2.620834e-001f, -6.680719e-001f, 4.773115e-001f, 2.163425e-001f, -6.576404e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394445e-002f, -1.547087e-003f, 9.264066e-002f, 1.006950e-001f, -4.487650e-001f, 4.572904e-001f, -1.000000e+000f, 5.742979e-001f, 3.810619e-001f, -8.541067e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 6.593996e-003f, 4.243479e-002f, 6.929474e-002f, 6.719155e-002f, 3.664700e-001f, 2.750862e-001f, -7.231584e-001f, 4.992352e-001f, 2.681434e-001f, -7.280812e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394359e-002f, -1.547066e-003f, 9.264045e-002f, 1.006928e-001f, -4.487600e-001f, 4.572832e-001f, -1.000000e+000f, 5.742992e-001f, 3.810593e-001f, -8.541096e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.820156e-003f, 5.278473e-002f, 7.260054e-002f, 8.516353e-002f, 4.073492e-001f, 3.037205e-001f, -7.610630e-001f, 4.808768e-001f, 3.232804e-001f, -8.036575e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, -2.423068e-002f, 4.213948e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 7.033059e-003f, 3.547149e-002f, 4.472750e-002f, 9.305729e-002f, 4.314029e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.824444e-003f, 1.118520e-002f, 6.510579e-002f, 3.252194e-002f, -6.382936e-002f, 2.666226e-001f, 6.970667e-001f, 4.856033e-001f, 2.596509e-001f, 7.202149e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 7.204550e-003f, 3.753077e-002f, 6.272500e-002f, 2.085924e-002f, 2.258299e-002f, 1.369326e-001f, 6.333882e-001f, 1.000000e+000f, 1.489357e-001f, 4.450238e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.701823e-002f, 2.577802e-002f, 5.335527e-002f, 1.570329e-002f, 6.120583e-002f, 2.022581e-001f, 6.586539e-001f, 5.473007e-001f, 2.455078e-001f, 6.997719e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 5.820908e-003f, 3.840486e-002f, 7.415779e-002f, 5.310991e-003f, 1.147753e-002f, 3.073765e-001f, 1.000000e+000f, 8.559507e-001f, 1.899800e-001f, 5.678776e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.465204e-002f, 1.374251e-002f, 5.088350e-002f, 1.024467e-002f, 1.394964e-001f, 3.250787e-001f, 8.800784e-001f, 5.965023e-001f, 3.007994e-001f, 7.751293e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.848538e-002f, 6.729015e-002f, 5.975375e-002f, 2.172278e-002f, -2.084349e-001f, 3.699775e-002f, -1.984259e-001f, 1.000000e+000f, 3.445969e-002f, 2.565907e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.572139e-002f, -3.189473e-002f, 5.343531e-002f, 6.485011e-003f, -1.136545e-001f, 3.760196e-001f, 1.000000e+000f, 6.660102e-001f, 2.953130e-001f, 7.685209e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.797535e-002f, -8.087036e-003f, 8.830147e-002f, 1.698215e-001f, -4.669473e-001f, 3.777683e-001f, -1.000000e+000f, 7.348264e-001f, 2.107836e-001f, -6.440453e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.627956e-002f, -7.488462e-002f, 6.016677e-002f, 9.577620e-002f, -4.322072e-001f, 3.100358e-001f, 8.117924e-001f, 5.875676e-001f, 2.272701e-001f, 6.741730e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 4.272929e-002f, -8.554181e-002f, 6.224793e-002f, 1.456985e-001f, -4.974141e-001f, 2.866599e-001f, 7.227638e-001f, 5.624591e-001f, 1.847165e-001f, 6.078044e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.285403e-002f, -5.813363e-002f, 6.574708e-002f, 2.237711e-001f, -6.689859e-001f, 3.581891e-001f, -8.080756e-001f, 1.000000e+000f, 2.776064e-001f, -5.429282e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.008195e-002f, 5.330260e-002f, 5.834297e-002f, 1.030802e-001f, 4.523569e-001f, 4.767180e-001f, -9.401531e-001f, 6.209889e-001f, 1.960363e-001f, -5.724528e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 7.918755e-003f, -4.512186e-002f, 6.543167e-002f, 2.000294e-001f, -6.298149e-001f, 7.113792e-001f, -9.409146e-001f, 1.000000e+000f, 3.592044e-001f, -5.301053e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.959614e-002f, 4.080099e-002f, 5.822701e-002f, 5.560546e-002f, 3.334830e-001f, 5.146019e-001f, -9.872358e-001f, 6.286215e-001f, 1.981836e-001f, -5.661912e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.920621e-003f, 7.442289e-003f, 7.541970e-002f, 2.133214e-001f, -5.324085e-001f, 4.214500e-001f, -3.449661e-001f, 6.586161e-001f, 2.361171e-001f, -3.072142e-002f, 4.150337e-001f, -1.000000e+000f, 6.440963e-001f, 3.348852e-001f, -8.056512e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.391120e-002f, 2.829468e-002f, 5.900460e-002f, 1.812836e-002f, 1.904120e-001f, 5.011931e-001f, -9.376352e-001f, 5.886801e-001f, 2.150414e-001f, -5.585173e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.743184e-003f, -3.738509e-002f, 1.369139e-001f, 2.254333e-001f, -1.077856e-001f, 2.312804e-001f, -1.658852e-001f, 3.654160e-001f, 2.321748e-001f, -5.735199e-001f, 4.111869e-001f, -1.000000e+000f, 6.103357e-001f, 3.889902e-001f, -8.790241e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.407513e-002f, 2.712179e-002f, 5.901908e-002f, 1.125600e-002f, 1.500400e-001f, 4.556938e-001f, -9.017149e-001f, 5.877661e-001f, 1.777785e-001f, -5.247098e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.799138e-003f, -2.659824e-002f, 1.048596e-001f, 2.024624e-001f, -5.506403e-001f, 2.689169e-001f, -2.513784e-001f, 4.361606e-001f, 2.223985e-001f, -2.741862e-001f, 4.300012e-001f, -1.000000e+000f, 5.834849e-001f, 4.050306e-001f, -8.975078e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.585265e-002f, 3.721492e-002f, 6.060532e-002f, 4.930051e-002f, 3.138510e-001f, 4.114084e-001f, -8.817114e-001f, 5.880411e-001f, 2.168072e-001f, -6.178699e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.261089e-002f, -6.442387e-003f, 9.225757e-002f, 1.227467e-001f, -4.744484e-001f, 4.546656e-001f, -1.000000e+000f, 5.783446e-001f, 3.757639e-001f, -8.483694e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.241019e-002f, 3.596587e-002f, 7.308498e-002f, 2.761156e-002f, 2.304412e-001f, 2.920229e-001f, -6.853735e-001f, 4.852650e-001f, 1.788331e-001f, -5.865592e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.384839e-002f, -2.256204e-003f, 9.232234e-002f, 1.046682e-001f, -4.516710e-001f, 4.539787e-001f, -1.000000e+000f, 5.764224e-001f, 3.772078e-001f, -8.517448e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.267771e-002f, 3.478138e-002f, 7.344272e-002f, 2.412218e-002f, 2.160935e-001f, 2.863602e-001f, -6.787753e-001f, 4.829120e-001f, 1.695972e-001f, -5.771275e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.391774e-002f, -1.568200e-003f, 9.258580e-002f, 1.008140e-001f, -4.490300e-001f, 4.570589e-001f, -1.000000e+000f, 5.746471e-001f, 3.804903e-001f, -8.534309e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 1.078622e-002f, 5.243314e-002f, 7.208683e-002f, 8.897956e-002f, 4.063419e-001f, 2.634892e-001f, -6.650993e-001f, 4.728545e-001f, 2.182801e-001f, -6.584747e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 8.687823e-003f, 4.904546e-002f, 7.135173e-002f, 7.622677e-002f, 3.902643e-001f, 2.620834e-001f, -6.680719e-001f, 4.773115e-001f, 2.163425e-001f, -6.576404e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394445e-002f, -1.547087e-003f, 9.264066e-002f, 1.006950e-001f, -4.487650e-001f, 4.572904e-001f, -1.000000e+000f, 5.742979e-001f, 3.810619e-001f, -8.541067e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 6.593996e-003f, 4.243479e-002f, 6.929474e-002f, 6.719155e-002f, 3.664700e-001f, 2.750862e-001f, -7.231584e-001f, 4.992352e-001f, 2.681434e-001f, -7.280812e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394359e-002f, -1.547066e-003f, 9.264045e-002f, 1.006928e-001f, -4.487600e-001f, 4.572832e-001f, -1.000000e+000f, 5.742992e-001f, 3.810593e-001f, -8.541096e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.820156e-003f, 5.278473e-002f, 7.260054e-002f, 8.516353e-002f, 4.073492e-001f, 3.037205e-001f, -7.610630e-001f, 4.808768e-001f, 3.232804e-001f, -8.036575e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, -4.084272e-002f, 3.563214e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 7.033059e-003f, 3.547149e-002f, 4.472750e-002f, 9.305729e-002f, 4.314029e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.824444e-003f, 1.118520e-002f, 6.510579e-002f, 3.252194e-002f, -6.382936e-002f, 2.666226e-001f, 6.970667e-001f, 4.856033e-001f, 2.596509e-001f, 7.202149e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 7.204550e-003f, 3.753077e-002f, 6.272500e-002f, 2.085924e-002f, 2.258299e-002f, 1.369326e-001f, 6.333882e-001f, 1.000000e+000f, 1.489357e-001f, 4.450238e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.701823e-002f, 2.577802e-002f, 5.335527e-002f, 1.570329e-002f, 6.120583e-002f, 2.022581e-001f, 6.586539e-001f, 5.473007e-001f, 2.455078e-001f, 6.997719e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.848538e-002f, 6.729015e-002f, 5.975375e-002f, 2.172278e-002f, -2.084349e-001f, 3.699775e-002f, -1.984259e-001f, 1.000000e+000f, 3.445969e-002f, 2.565907e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.572139e-002f, -3.189473e-002f, 5.343531e-002f, 6.485011e-003f, -1.136545e-001f, 3.760196e-001f, 1.000000e+000f, 6.660102e-001f, 2.953130e-001f, 7.685209e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.797535e-002f, -8.087036e-003f, 8.830147e-002f, 1.698215e-001f, -4.669473e-001f, 3.777683e-001f, -1.000000e+000f, 7.348264e-001f, 2.107836e-001f, -6.440453e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.627956e-002f, -7.488462e-002f, 6.016677e-002f, 9.577620e-002f, -4.322072e-001f, 3.100358e-001f, 8.117924e-001f, 5.875676e-001f, 2.272701e-001f, 6.741730e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.285403e-002f, -5.813363e-002f, 6.574708e-002f, 2.237711e-001f, -6.689859e-001f, 3.581891e-001f, -8.080756e-001f, 1.000000e+000f, 2.776064e-001f, -5.429282e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.008195e-002f, 5.330260e-002f, 5.834297e-002f, 1.030802e-001f, 4.523569e-001f, 4.767180e-001f, -9.401531e-001f, 6.209889e-001f, 1.960363e-001f, -5.724528e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 7.918755e-003f, -4.512186e-002f, 6.543167e-002f, 2.000294e-001f, -6.298149e-001f, 7.113792e-001f, -9.409146e-001f, 1.000000e+000f, 3.592044e-001f, -5.301053e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.959614e-002f, 4.080099e-002f, 5.822701e-002f, 5.560546e-002f, 3.334830e-001f, 5.146019e-001f, -9.872358e-001f, 6.286215e-001f, 1.981836e-001f, -5.661912e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.743184e-003f, -3.738509e-002f, 1.369139e-001f, 2.254333e-001f, -1.077856e-001f, 2.312804e-001f, -1.658852e-001f, 3.654160e-001f, 2.321748e-001f, -5.735199e-001f, 4.111869e-001f, -1.000000e+000f, 6.103357e-001f, 3.889902e-001f, -8.790241e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.407513e-002f, 2.712179e-002f, 5.901908e-002f, 1.125600e-002f, 1.500400e-001f, 4.556938e-001f, -9.017149e-001f, 5.877661e-001f, 1.777785e-001f, -5.247098e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.799138e-003f, -2.659824e-002f, 1.048596e-001f, 2.024624e-001f, -5.506403e-001f, 2.689169e-001f, -2.513784e-001f, 4.361606e-001f, 2.223985e-001f, -2.741862e-001f, 4.300012e-001f, -1.000000e+000f, 5.834849e-001f, 4.050306e-001f, -8.975078e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.585265e-002f, 3.721492e-002f, 6.060532e-002f, 4.930051e-002f, 3.138510e-001f, 4.114084e-001f, -8.817114e-001f, 5.880411e-001f, 2.168072e-001f, -6.178699e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.261089e-002f, -6.442387e-003f, 9.225757e-002f, 1.227467e-001f, -4.744484e-001f, 4.546656e-001f, -1.000000e+000f, 5.783446e-001f, 3.757639e-001f, -8.483694e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.241019e-002f, 3.596587e-002f, 7.308498e-002f, 2.761156e-002f, 2.304412e-001f, 2.920229e-001f, -6.853735e-001f, 4.852650e-001f, 1.788331e-001f, -5.865592e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.391774e-002f, -1.568200e-003f, 9.258580e-002f, 1.008140e-001f, -4.490300e-001f, 4.570589e-001f, -1.000000e+000f, 5.746471e-001f, 3.804903e-001f, -8.534309e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 1.078622e-002f, 5.243314e-002f, 7.208683e-002f, 8.897956e-002f, 4.063419e-001f, 2.634892e-001f, -6.650993e-001f, 4.728545e-001f, 2.182801e-001f, -6.584747e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 8.687823e-003f, 4.904546e-002f, 7.135173e-002f, 7.622677e-002f, 3.902643e-001f, 2.620834e-001f, -6.680719e-001f, 4.773115e-001f, 2.163425e-001f, -6.576404e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.394359e-002f, -1.547066e-003f, 9.264045e-002f, 1.006928e-001f, -4.487600e-001f, 4.572832e-001f, -1.000000e+000f, 5.742992e-001f, 3.810593e-001f, -8.541096e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 9.820156e-003f, 5.278473e-002f, 7.260054e-002f, 8.516353e-002f, 4.073492e-001f, 3.037205e-001f, -7.610630e-001f, 4.808768e-001f, 3.232804e-001f, -8.036575e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, -4.688822e-002f, 3.280589e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 7.033059e-003f, 3.547149e-002f, 4.472750e-002f, 9.305729e-002f, 4.314029e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.824444e-003f, 1.118520e-002f, 6.510579e-002f, 3.252194e-002f, -6.382936e-002f, 2.666226e-001f, 6.970667e-001f, 4.856033e-001f, 2.596509e-001f, 7.202149e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 5.820908e-003f, 3.840486e-002f, 7.415779e-002f, 5.310991e-003f, 1.147753e-002f, 3.073765e-001f, 1.000000e+000f, 8.559507e-001f, 1.899800e-001f, 5.678776e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.465204e-002f, 1.374251e-002f, 5.088350e-002f, 1.024467e-002f, 1.394964e-001f, 3.250787e-001f, 8.800784e-001f, 5.965023e-001f, 3.007994e-001f, 7.751293e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.848538e-002f, 6.729015e-002f, 5.975375e-002f, 2.172278e-002f, -2.084349e-001f, 3.699775e-002f, -1.984259e-001f, 1.000000e+000f, 3.445969e-002f, 2.565907e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.572139e-002f, -3.189473e-002f, 5.343531e-002f, 6.485011e-003f, -1.136545e-001f, 3.760196e-001f, 1.000000e+000f, 6.660102e-001f, 2.953130e-001f, 7.685209e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.797535e-002f, -8.087036e-003f, 8.830147e-002f, 1.698215e-001f, -4.669473e-001f, 3.777683e-001f, -1.000000e+000f, 7.348264e-001f, 2.107836e-001f, -6.440453e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.627956e-002f, -7.488462e-002f, 6.016677e-002f, 9.577620e-002f, -4.322072e-001f, 3.100358e-001f, 8.117924e-001f, 5.875676e-001f, 2.272701e-001f, 6.741730e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 4.272929e-002f, -8.554181e-002f, 6.224793e-002f, 1.456985e-001f, -4.974141e-001f, 2.866599e-001f, 7.227638e-001f, 5.624591e-001f, 1.847165e-001f, 6.078044e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 7.918755e-003f, -4.512186e-002f, 6.543167e-002f, 2.000294e-001f, -6.298149e-001f, 7.113792e-001f, -9.409146e-001f, 1.000000e+000f, 3.592044e-001f, -5.301053e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.959614e-002f, 4.080099e-002f, 5.822701e-002f, 5.560546e-002f, 3.334830e-001f, 5.146019e-001f, -9.872358e-001f, 6.286215e-001f, 1.981836e-001f, -5.661912e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.743184e-003f, -3.738509e-002f, 1.369139e-001f, 2.254333e-001f, -1.077856e-001f, 2.312804e-001f, -1.658852e-001f, 3.654160e-001f, 2.321748e-001f, -5.735199e-001f, 4.111869e-001f, -1.000000e+000f, 6.103357e-001f, 3.889902e-001f, -8.790241e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.407513e-002f, 2.712179e-002f, 5.901908e-002f, 1.125600e-002f, 1.500400e-001f, 4.556938e-001f, -9.017149e-001f, 5.877661e-001f, 1.777785e-001f, -5.247098e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.799138e-003f, -2.659824e-002f, 1.048596e-001f, 2.024624e-001f, -5.506403e-001f, 2.689169e-001f, -2.513784e-001f, 4.361606e-001f, 2.223985e-001f, -2.741862e-001f, 4.300012e-001f, -1.000000e+000f, 5.834849e-001f, 4.050306e-001f, -8.975078e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.585265e-002f, 3.721492e-002f, 6.060532e-002f, 4.930051e-002f, 3.138510e-001f, 4.114084e-001f, -8.817114e-001f, 5.880411e-001f, 2.168072e-001f, -6.178699e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.384839e-002f, -2.256204e-003f, 9.232234e-002f, 1.046682e-001f, -4.516710e-001f, 4.539787e-001f, -1.000000e+000f, 5.764224e-001f, 3.772078e-001f, -8.517448e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.267771e-002f, 3.478138e-002f, 7.344272e-002f, 2.412218e-002f, 2.160935e-001f, 2.863602e-001f, -6.787753e-001f, 4.829120e-001f, 1.695972e-001f, -5.771275e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.391774e-002f, -1.568200e-003f, 9.258580e-002f, 1.008140e-001f, -4.490300e-001f, 4.570589e-001f, -1.000000e+000f, 5.746471e-001f, 3.804903e-001f, -8.534309e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 1.078622e-002f, 5.243314e-002f, 7.208683e-002f, 8.897956e-002f, 4.063419e-001f, 2.634892e-001f, -6.650993e-001f, 4.728545e-001f, 2.182801e-001f, -6.584747e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394445e-002f, -1.547087e-003f, 9.264066e-002f, 1.006950e-001f, -4.487650e-001f, 4.572904e-001f, -1.000000e+000f, 5.742979e-001f, 3.810619e-001f, -8.541067e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 6.593996e-003f, 4.243479e-002f, 6.929474e-002f, 6.719155e-002f, 3.664700e-001f, 2.750862e-001f, -7.231584e-001f, 4.992352e-001f, 2.681434e-001f, -7.280812e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -5.168964e-002f, 3.022833e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 7.033059e-003f, 3.547149e-002f, 4.472750e-002f, 9.305729e-002f, 4.314029e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 1.824444e-003f, 1.118520e-002f, 6.510579e-002f, 3.252194e-002f, -6.382936e-002f, 2.666226e-001f, 6.970667e-001f, 4.856033e-001f, 2.596509e-001f, 7.202149e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 7.204550e-003f, 3.753077e-002f, 6.272500e-002f, 2.085924e-002f, 2.258299e-002f, 1.369326e-001f, 6.333882e-001f, 1.000000e+000f, 1.489357e-001f, 4.450238e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 1.701823e-002f, 2.577802e-002f, 5.335527e-002f, 1.570329e-002f, 6.120583e-002f, 2.022581e-001f, 6.586539e-001f, 5.473007e-001f, 2.455078e-001f, 6.997719e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 4.272929e-002f, -8.554181e-002f, 6.224793e-002f, 1.456985e-001f, -4.974141e-001f, 2.866599e-001f, 7.227638e-001f, 5.624591e-001f, 1.847165e-001f, 6.078044e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 1.920621e-003f, 7.442289e-003f, 7.541970e-002f, 2.133214e-001f, -5.324085e-001f, 4.214500e-001f, -3.449661e-001f, 6.586161e-001f, 2.361171e-001f, -3.072142e-002f, 4.150337e-001f, -1.000000e+000f, 6.440963e-001f, 3.348852e-001f, -8.056512e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 2.391120e-002f, 2.829468e-002f, 5.900460e-002f, 1.812836e-002f, 1.904120e-001f, 5.011931e-001f, -9.376352e-001f, 5.886801e-001f, 2.150414e-001f, -5.585173e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 2.743184e-003f, -3.738509e-002f, 1.369139e-001f, 2.254333e-001f, -1.077856e-001f, 2.312804e-001f, -1.658852e-001f, 3.654160e-001f, 2.321748e-001f, -5.735199e-001f, 4.111869e-001f, -1.000000e+000f, 6.103357e-001f, 3.889902e-001f, -8.790241e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 2.407513e-002f, 2.712179e-002f, 5.901908e-002f, 1.125600e-002f, 1.500400e-001f, 4.556938e-001f, -9.017149e-001f, 5.877661e-001f, 1.777785e-001f, -5.247098e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.261089e-002f, -6.442387e-003f, 9.225757e-002f, 1.227467e-001f, -4.744484e-001f, 4.546656e-001f, -1.000000e+000f, 5.783446e-001f, 3.757639e-001f, -8.483694e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 1.241019e-002f, 3.596587e-002f, 7.308498e-002f, 2.761156e-002f, 2.304412e-001f, 2.920229e-001f, -6.853735e-001f, 4.852650e-001f, 1.788331e-001f, -5.865592e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.391774e-002f, -1.568200e-003f, 9.258580e-002f, 1.008140e-001f, -4.490300e-001f, 4.570589e-001f, -1.000000e+000f, 5.746471e-001f, 3.804903e-001f, -8.534309e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 1.078622e-002f, 5.243314e-002f, 7.208683e-002f, 8.897956e-002f, 4.063419e-001f, 2.634892e-001f, -6.650993e-001f, 4.728545e-001f, 2.182801e-001f, -6.584747e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, -5.367716e-002f, 2.902528e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 7.204550e-003f, 3.753077e-002f, 6.272500e-002f, 2.085924e-002f, 2.258299e-002f, 1.369326e-001f, 6.333882e-001f, 1.000000e+000f, 1.489357e-001f, 4.450238e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 1.701823e-002f, 2.577802e-002f, 5.335527e-002f, 1.570329e-002f, 6.120583e-002f, 2.022581e-001f, 6.586539e-001f, 5.473007e-001f, 2.455078e-001f, 6.997719e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 1.797535e-002f, -8.087036e-003f, 8.830147e-002f, 1.698215e-001f, -4.669473e-001f, 3.777683e-001f, -1.000000e+000f, 7.348264e-001f, 2.107836e-001f, -6.440453e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 3.627956e-002f, -7.488462e-002f, 6.016677e-002f, 9.577620e-002f, -4.322072e-001f, 3.100358e-001f, 8.117924e-001f, 5.875676e-001f, 2.272701e-001f, 6.741730e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 1.441142e-002f, -6.127223e-002f, 6.532125e-002f, 2.319323e-001f, -6.805107e-001f, 5.554229e-001f, -8.570266e-001f, 1.000000e+000f, 3.251300e-001f, -5.552388e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 2.224189e-002f, 3.836427e-002f, 6.120491e-002f, 3.497854e-002f, 2.644940e-001f, 4.779125e-001f, -9.039614e-001f, 5.900902e-001f, 1.857396e-001f, -5.240415e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 6.108764e-003f, -4.012098e-002f, 6.588208e-002f, 1.816182e-001f, -6.026848e-001f, 7.540248e-001f, -9.283815e-001f, 1.000000e+000f, 3.652637e-001f, -5.019964e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 2.556737e-002f, 2.739946e-002f, 5.811730e-002f, 1.194471e-002f, 1.545600e-001f, 4.998615e-001f, -9.467593e-001f, 5.998429e-001f, 1.778823e-001f, -5.145041e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 1.672385e-003f, -2.577147e-002f, 1.024934e-001f, 2.084391e-001f, -5.584248e-001f, 2.668524e-001f, -2.500406e-001f, 4.426082e-001f, 2.196281e-001f, -2.664181e-001f, 4.304476e-001f, -1.000000e+000f, 5.830971e-001f, 4.060663e-001f, -8.985601e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 2.025315e-002f, 2.899980e-002f, 6.504747e-002f, 1.465866e-002f, 1.711439e-001f, 3.901584e-001f, -8.112080e-001f, 5.464496e-001f, 1.768406e-001f, -5.422420e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 3.261089e-002f, -6.442387e-003f, 9.225757e-002f, 1.227467e-001f, -4.744484e-001f, 4.546656e-001f, -1.000000e+000f, 5.783446e-001f, 3.757639e-001f, -8.483694e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 1.241019e-002f, 3.596587e-002f, 7.308498e-002f, 2.761156e-002f, 2.304412e-001f, 2.920229e-001f, -6.853735e-001f, 4.852650e-001f, 1.788331e-001f, -5.865592e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 8.687823e-003f, 4.904546e-002f, 7.135173e-002f, 7.622677e-002f, 3.902643e-001f, 2.620834e-001f, -6.680719e-001f, 4.773115e-001f, 2.163425e-001f, -6.576404e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 3.394180e-002f, -1.549463e-003f, 9.263709e-002f, 1.007031e-001f, -4.487830e-001f, 4.572758e-001f, -1.000000e+000f, 5.743155e-001f, 3.810331e-001f, -8.540750e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 6.915994e-003f, 4.248331e-002f, 6.940323e-002f, 6.624727e-002f, 3.632342e-001f, 2.692689e-001f, -7.160512e-001f, 4.935139e-001f, 2.659903e-001f, -7.293692e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -1.250000e-001f, 0.000000e+000f, -1.250000e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, -5.541508e-002f, 2.787569e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 3.035332e-002f, 3.377781e-002f, 8.800641e-002f, 5.642549e-002f, -2.130108e-001f, 3.712937e-001f, -1.000000e+000f, 7.142567e-001f, 2.372379e-001f, -6.822863e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 3.123753e-002f, -7.343129e-002f, 6.549352e-002f, 1.129760e-001f, -4.731774e-001f, 1.760149e-001f, 6.190089e-001f, 5.449165e-001f, 2.173013e-001f, 6.576050e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 2.319563e-002f, -3.784339e-002f, 8.495040e-002f, 2.312544e-001f, -4.978187e-001f, 3.333883e-001f, -1.000000e+000f, 7.581188e-001f, 2.806780e-001f, -7.478961e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 2.124315e-002f, 5.838008e-002f, 5.759203e-002f, 1.273015e-001f, 5.045820e-001f, 4.625758e-001f, -9.096537e-001f, 6.198521e-001f, 1.930777e-001f, -5.604250e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 7.918755e-003f, -4.512186e-002f, 6.543167e-002f, 2.000294e-001f, -6.298149e-001f, 7.113792e-001f, -9.409146e-001f, 1.000000e+000f, 3.592044e-001f, -5.301053e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 1.959614e-002f, 4.080099e-002f, 5.822701e-002f, 5.560546e-002f, 3.334830e-001f, 5.146019e-001f, -9.872358e-001f, 6.286215e-001f, 1.981836e-001f, -5.661912e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 1.799138e-003f, -2.659824e-002f, 1.048596e-001f, 2.024624e-001f, -5.506403e-001f, 2.689169e-001f, -2.513784e-001f, 4.361606e-001f, 2.223985e-001f, -2.741862e-001f, 4.300012e-001f, -1.000000e+000f, 5.834849e-001f, 4.050306e-001f, -8.975078e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 1.585265e-002f, 3.721492e-002f, 6.060532e-002f, 4.930051e-002f, 3.138510e-001f, 4.114084e-001f, -8.817114e-001f, 5.880411e-001f, 2.168072e-001f, -6.178699e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 3.394619e-002f, -1.555928e-003f, 9.263990e-002f, 1.007071e-001f, -4.487918e-001f, 4.572839e-001f, -1.000000e+000f, 5.743116e-001f, 3.810366e-001f, -8.540748e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 8.451207e-003f, 4.813071e-002f, 7.121815e-002f, 7.410326e-002f, 3.848735e-001f, 2.526844e-001f, -6.590857e-001f, 4.798771e-001f, 2.133900e-001f, -6.530521e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 3.394369e-002f, -1.548125e-003f, 9.264042e-002f, 1.006955e-001f, -4.487660e-001f, 4.572855e-001f, -1.000000e+000f, 5.742994e-001f, 3.810601e-001f, -8.541079e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 9.370940e-003f, 5.115843e-002f, 7.148539e-002f, 8.581686e-002f, 4.076311e-001f, 2.991222e-001f, -7.581690e-001f, 4.852227e-001f, 3.154586e-001f, -7.942092e-001f,
  0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, -5.692128e-002f, 2.677695e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.360736e-002f, 7.563931e-002f, 1.051142e-001f, 1.202157e-001f, 4.903380e-001f,
  0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 4.979922e-003f, 2.709579e-002f, 6.381765e-002f, 2.503114e-002f, 5.032901e-002f, 8.857763e-002f, 4.578878e-001f, 8.708080e-001f, 1.028556e-001f, 3.658057e-001f, 0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.063388e-002f, 4.799067e-002f, 5.931596e-002f, 2.199627e-002f, 1.856468e-001f, 2.739851e-001f, 7.604635e-001f, 5.336267e-001f, 3.071273e-001f, 7.837387e-001f,
  0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 4.828380e-003f, 3.150650e-002f, 6.024042e-002f, 4.095559e-003f, -6.772745e-002f, 1.513257e-001f, 7.243493e-001f, 1.000000e+000f, 9.043324e-002f, 3.108224e-001f, 0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.336922e-002f, -1.302050e-002f, 5.136196e-002f, 4.805031e-004f, -2.602263e-002f, 2.828664e-001f, 8.559910e-001f, 6.477418e-001f, 2.600597e-001f, 7.210646e-001f,
  0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.177529e-003f, 1.947874e-003f, 8.835273e-002f, 1.866593e-001f, -5.166270e-001f, 3.827330e-001f, -3.338600e-001f, 5.746830e-001f, 2.261517e-001f, -1.094542e-001f, 4.094717e-001f, -1.000000e+000f, 6.385713e-001f, 3.241405e-001f, -7.969816e-001f, 0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 2.755834e-002f, 2.155687e-002f, 5.311110e-002f, 9.880000e-007f, 1.403049e-003f, 5.276969e-001f, -1.000000e+000f, 6.358511e-001f, 1.230308e-001f, -4.077279e-001f,
  0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.389956e-002f, -1.627402e-003f, 9.256157e-002f, 1.010314e-001f, -4.494897e-001f, 4.570639e-001f, -1.000000e+000f, 5.747436e-001f, 3.802932e-001f, -8.531288e-001f, 0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 1.575805e-002f, 6.014258e-002f, 7.376594e-002f, 8.329403e-002f, 4.070103e-001f, 2.826442e-001f, -6.771044e-001f, 4.722211e-001f, 2.013890e-001f, -6.285848e-001f,
  0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 3.394346e-002f, -1.547067e-003f, 9.264100e-002f, 1.006928e-001f, -4.487600e-001f, 4.572836e-001f, -1.000000e+000f, 5.742957e-001f, 3.810610e-001f, -8.541140e-001f, 0.000000e+000f, 5.000000e-001f, -2.800000e-001f, 0.000000e+000f, -2.800000e-001f, 0.000000e+000f, -5.821254e-002f, 2.572661e-001f, 0.000000e+000f, 0.000000e+000f, 9.050200e-003f, 5.132970e-002f, 7.282009e-002f, 7.982849e-002f, 3.965864e-001f, 3.012843e-001f, -7.586091e-001f, 4.810423e-001f, 3.209223e-001f, -8.010953e-001f,
  // Total number of coefficients: 10325
  // Maximum number of elevation coefficients: 20


   // Full coefficients
   // 10 degrees loudspeakers
   // 11025 Hz sample rate
    // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:22:45 1999
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 1.088920e-002f, 3.257397e-002f, 7.539447e-002f, 8.327770e-002f, 2.771331e-001f, 3.190006e-001f, 5.071194e-002f, 3.277952e-001f, 4.871990e-001f, 7.710815e-002f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 4.119011e-002f, 4.864806e-002f, 8.264737e-002f, 8.683986e-002f, 4.167490e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.152141e-003f, -2.016434e-002f, 6.751443e-002f, 3.502193e-002f, -2.471592e-001f, 2.887522e-001f, 7.262941e-001f, 7.391987e-001f, 5.197701e-002f, 1.848262e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 4.973095e-002f, -2.842384e-002f, 8.736816e-002f, 1.333247e-002f, 1.632940e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 5.356007e-004f, -8.293192e-003f, 5.372412e-002f, 5.242808e-002f, -3.201296e-001f, 4.936875e-001f, 2.446224e-001f, 1.000000e+000f, 1.182366e-001f, 3.515229e-003f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.544852e-002f, -6.157411e-002f, 5.719389e-002f, 8.041734e-002f, -2.986144e-001f, 1.380408e-001f, 5.199588e-001f, 8.577088e-001f, 9.663771e-002f, 4.242861e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.129583e-003f, -1.894998e-003f, 5.566404e-002f, 1.327871e-001f, -5.109782e-001f, 5.901174e-001f, -7.963359e-002f, 1.000000e+000f, 3.057941e-001f, 7.071229e-002f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 4.214650e-002f, -8.917073e-002f, 6.077981e-002f, 1.151194e-001f, -4.798320e-001f, 3.880158e-001f, 4.494643e-001f, 8.243229e-001f, 1.390638e-001f, 3.805927e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.448701e-003f, -2.335376e-002f, 5.754518e-002f, 1.636423e-001f, -5.720182e-001f, 7.959709e-001f, -7.591077e-001f, 1.000000e+000f, 3.448684e-001f, -3.429434e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.956026e-002f, 3.320145e-002f, 7.763715e-002f, 1.108094e-001f, 3.214690e-001f, 4.735032e-001f, -1.000000e+000f, 6.440725e-001f, 1.381077e-001f, -5.255620e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.521775e-002f, -3.970872e-002f, 5.465088e-002f, 1.338550e-001f, -5.173032e-001f, 4.486119e-001f, 8.740160e-001f, 1.000000e+000f, 1.899369e-001f, 2.105272e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 9.202862e-003f, -3.091956e-002f, 5.747104e-002f, 4.817656e-002f, 3.078156e-001f, 1.965672e-001f, -2.629499e-001f, 7.662117e-001f, 2.593347e-001f, -4.663945e-001f, 4.888645e-001f, -1.000000e+000f, 5.826109e-001f, 3.138189e-001f, -7.711113e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.818686e-002f, -7.999667e-002f, 5.923233e-002f, 2.931077e-001f, -7.656198e-001f, 4.764845e-001f, -1.000000e+000f, 9.592690e-001f, 3.294633e-001f, -7.120239e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.436077e-003f, 2.388293e-002f, 6.155761e-002f, 1.098253e-001f, 4.635176e-001f, 3.117192e-001f, -6.561230e-001f, 3.933593e-001f, 2.149712e-001f, -6.462294e-001f, 5.959145e-001f, -5.673318e-001f, 1.000000e+000f, 2.499012e-001f, -3.921306e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.834325e-002f, -7.981686e-002f, 5.903163e-002f, 2.904234e-001f, -7.621302e-001f, 4.738309e-001f, -1.000000e+000f, 9.624784e-001f, 3.308448e-001f, -7.144665e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 5.050445e-002f, -2.108677e-002f, 1.136901e-001f, 1.171333e-001f, -6.479235e-002f, 6.015240e-002f, 2.536285e-001f, 3.346343e-001f, 1.203687e-001f, 4.792155e-001f, 4.524831e-001f, -1.000000e+000f, 6.153266e-001f, 2.231955e-001f, -6.617193e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.922992e-002f, -5.405953e-002f, 8.747503e-002f, 2.327243e-001f, -6.816912e-001f, 4.354574e-001f, -1.000000e+000f, 5.902035e-001f, 2.941522e-001f, -7.585234e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 1.349082e-002f, 5.757277e-002f, 7.588874e-002f, 8.551635e-002f, 4.135570e-001f, 1.683184e-001f, -6.758089e-002f, 4.420497e-001f, 1.325450e-001f, -4.540265e-002f, 4.322256e-001f, -1.000000e+000f, 6.356091e-001f, 2.281116e-001f, -6.733482e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.911116e-002f, -5.417033e-002f, 8.755425e-002f, 2.301106e-001f, -6.778116e-001f, 4.362757e-001f, -1.000000e+000f, 5.893940e-001f, 2.991844e-001f, -7.644694e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 5.015479e-003f, 3.694586e-002f, 6.805285e-002f, 6.436298e-002f, 3.584676e-001f, 3.743922e-001f, -9.025051e-001f, 5.782850e-001f, 2.712279e-001f, -7.361687e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 3.949257e-002f, -5.388819e-002f, 8.795296e-002f, 2.182352e-001f, -6.606453e-001f, 4.381148e-001f, -1.000000e+000f, 5.871410e-001f, 3.121938e-001f, -7.807120e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 1.839352e-003f, 2.214857e-002f, 6.669575e-002f, 3.721347e-002f, 2.728130e-001f, 3.644852e-001f, -9.187637e-001f, 5.929256e-001f, 3.003063e-001f, -7.748804e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, 1.898635e-003f, 2.445238e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 1.088920e-002f, 3.257397e-002f, 7.539447e-002f, 8.327770e-002f, 2.771331e-001f, 3.190006e-001f, 5.071194e-002f, 3.277952e-001f, 4.871990e-001f, 7.710815e-002f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 4.119011e-002f, 4.864806e-002f, 8.264737e-002f, 8.683986e-002f, 4.167490e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.007773e-002f, 7.128226e-002f, 6.327182e-002f, 5.475204e-002f, 3.266492e-001f, 6.060883e-002f, -4.444388e-001f, 8.187939e-001f, 6.423066e-002f, -3.391262e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 4.250977e-002f, 2.623913e-003f, 8.008298e-002f, 2.609744e-002f, 2.284620e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 5.356007e-004f, -8.293192e-003f, 5.372412e-002f, 5.242808e-002f, -3.201296e-001f, 4.936875e-001f, 2.446224e-001f, 1.000000e+000f, 1.182366e-001f, 3.515229e-003f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.544852e-002f, -6.157411e-002f, 5.719389e-002f, 8.041734e-002f, -2.986144e-001f, 1.380408e-001f, 5.199588e-001f, 8.577088e-001f, 9.663771e-002f, 4.242861e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 1.996080e-002f, 9.078806e-003f, 5.644430e-002f, 4.345087e-002f, -2.851012e-001f, 1.502508e-001f, 7.073246e-001f, 1.000000e+000f, 1.199589e-001f, 3.804561e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.857411e-003f, 3.005994e-002f, 5.914092e-002f, 1.194960e-001f, 4.884471e-001f, 4.534456e-001f, -1.000000e+000f, 8.049981e-001f, 1.224734e-001f, -4.930066e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.129583e-003f, -1.894998e-003f, 5.566404e-002f, 1.327871e-001f, -5.109782e-001f, 5.901174e-001f, -7.963359e-002f, 1.000000e+000f, 3.057941e-001f, 7.071229e-002f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 4.214650e-002f, -8.917073e-002f, 6.077981e-002f, 1.151194e-001f, -4.798320e-001f, 3.880158e-001f, 4.494643e-001f, 8.243229e-001f, 1.390638e-001f, 3.805927e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 1.364582e-002f, -5.989737e-002f, 1.103333e-001f, 2.122359e-001f, -6.370563e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.771115e-002f, 1.271988e-002f, 8.448046e-002f, 2.744942e-002f, 2.336668e-001f, 4.884577e-001f, -1.000000e+000f, 5.970290e-001f, 2.278874e-001f, -6.444707e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.521775e-002f, -3.970872e-002f, 5.465088e-002f, 1.338550e-001f, -5.173032e-001f, 4.486119e-001f, 8.740160e-001f, 1.000000e+000f, 1.899369e-001f, 2.105272e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 9.202862e-003f, -3.091956e-002f, 5.747104e-002f, 4.817656e-002f, 3.078156e-001f, 1.965672e-001f, -2.629499e-001f, 7.662117e-001f, 2.593347e-001f, -4.663945e-001f, 4.888645e-001f, -1.000000e+000f, 5.826109e-001f, 3.138189e-001f, -7.711113e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.818686e-002f, -7.999667e-002f, 5.923233e-002f, 2.931077e-001f, -7.656198e-001f, 4.764845e-001f, -1.000000e+000f, 9.592690e-001f, 3.294633e-001f, -7.120239e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.436077e-003f, 2.388293e-002f, 6.155761e-002f, 1.098253e-001f, 4.635176e-001f, 3.117192e-001f, -6.561230e-001f, 3.933593e-001f, 2.149712e-001f, -6.462294e-001f, 5.959145e-001f, -5.673318e-001f, 1.000000e+000f, 2.499012e-001f, -3.921306e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.834325e-002f, -7.981686e-002f, 5.903163e-002f, 2.904234e-001f, -7.621302e-001f, 4.738309e-001f, -1.000000e+000f, 9.624784e-001f, 3.308448e-001f, -7.144665e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 5.050445e-002f, -2.108677e-002f, 1.136901e-001f, 1.171333e-001f, -6.479235e-002f, 6.015240e-002f, 2.536285e-001f, 3.346343e-001f, 1.203687e-001f, 4.792155e-001f, 4.524831e-001f, -1.000000e+000f, 6.153266e-001f, 2.231955e-001f, -6.617193e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.935605e-002f, -5.412704e-002f, 8.741472e-002f, 2.360937e-001f, -6.850645e-001f, 4.348191e-001f, -1.000000e+000f, 5.907613e-001f, 2.900272e-001f, -7.545142e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 1.790057e-002f, 6.058366e-002f, 7.686971e-002f, 1.022198e-001f, 4.155276e-001f, 1.653619e-001f, -6.132433e-002f, 4.354149e-001f, 1.308223e-001f, -3.127767e-002f, 4.319893e-001f, -1.000000e+000f, 6.373668e-001f, 2.240596e-001f, -6.674520e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.911116e-002f, -5.417033e-002f, 8.755425e-002f, 2.301106e-001f, -6.778116e-001f, 4.362757e-001f, -1.000000e+000f, 5.893940e-001f, 2.991844e-001f, -7.644694e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 5.015479e-003f, 3.694586e-002f, 6.805285e-002f, 6.436298e-002f, 3.584676e-001f, 3.743922e-001f, -9.025051e-001f, 5.782850e-001f, 2.712279e-001f, -7.361687e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.920678e-002f, -5.419651e-002f, 8.764655e-002f, 2.287294e-001f, -6.756040e-001f, 4.364044e-001f, -1.000000e+000f, 5.891486e-001f, 3.005288e-001f, -7.664340e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.873073e-003f, 3.246082e-002f, 6.803167e-002f, 5.426536e-002f, 3.294377e-001f, 3.730043e-001f, -9.016627e-001f, 5.784206e-001f, 2.720704e-001f, -7.376558e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 4.279873e-002f, -5.267588e-002f, 9.306871e-002f, 1.677056e-001f, -5.790643e-001f, 4.635387e-001f, -1.000000e+000f, 5.547213e-001f, 4.008419e-001f, -8.839892e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.907825e-003f, 2.778597e-002f, 7.017239e-002f, 4.013879e-002f, 2.819640e-001f, 4.028691e-001f, -9.454229e-001f, 5.564423e-001f, 3.697011e-001f, -8.598109e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.447823e-002f, 2.909687e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.088920e-002f, 3.257397e-002f, 7.539447e-002f, 8.327770e-002f, 2.771331e-001f, 3.190006e-001f, 5.071194e-002f, 3.277952e-001f, 4.871990e-001f, 7.710815e-002f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.119011e-002f, 4.864806e-002f, 8.264737e-002f, 8.683986e-002f, 4.167490e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.007773e-002f, 7.128226e-002f, 6.327182e-002f, 5.475204e-002f, 3.266492e-001f, 6.060883e-002f, -4.444388e-001f, 8.187939e-001f, 6.423066e-002f, -3.391262e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.250977e-002f, 2.623913e-003f, 8.008298e-002f, 2.609744e-002f, 2.284620e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.152141e-003f, -2.016434e-002f, 6.751443e-002f, 3.502193e-002f, -2.471592e-001f, 2.887522e-001f, 7.262941e-001f, 7.391987e-001f, 5.197701e-002f, 1.848262e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.973095e-002f, -2.842384e-002f, 8.736816e-002f, 1.333247e-002f, 1.632940e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 5.356007e-004f, -8.293192e-003f, 5.372412e-002f, 5.242808e-002f, -3.201296e-001f, 4.936875e-001f, 2.446224e-001f, 1.000000e+000f, 1.182366e-001f, 3.515229e-003f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.544852e-002f, -6.157411e-002f, 5.719389e-002f, 8.041734e-002f, -2.986144e-001f, 1.380408e-001f, 5.199588e-001f, 8.577088e-001f, 9.663771e-002f, 4.242861e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.996080e-002f, 9.078806e-003f, 5.644430e-002f, 4.345087e-002f, -2.851012e-001f, 1.502508e-001f, 7.073246e-001f, 1.000000e+000f, 1.199589e-001f, 3.804561e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.857411e-003f, 3.005994e-002f, 5.914092e-002f, 1.194960e-001f, 4.884471e-001f, 4.534456e-001f, -1.000000e+000f, 8.049981e-001f, 1.224734e-001f, -4.930066e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.129583e-003f, -1.894998e-003f, 5.566404e-002f, 1.327871e-001f, -5.109782e-001f, 5.901174e-001f, -7.963359e-002f, 1.000000e+000f, 3.057941e-001f, 7.071229e-002f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.214650e-002f, -8.917073e-002f, 6.077981e-002f, 1.151194e-001f, -4.798320e-001f, 3.880158e-001f, 4.494643e-001f, 8.243229e-001f, 1.390638e-001f, 3.805927e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.448701e-003f, -2.335376e-002f, 5.754518e-002f, 1.636423e-001f, -5.720182e-001f, 7.959709e-001f, -7.591077e-001f, 1.000000e+000f, 3.448684e-001f, -3.429434e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.956026e-002f, 3.320145e-002f, 7.763715e-002f, 1.108094e-001f, 3.214690e-001f, 4.735032e-001f, -1.000000e+000f, 6.440725e-001f, 1.381077e-001f, -5.255620e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.364582e-002f, -5.989737e-002f, 1.103333e-001f, 2.122359e-001f, -6.370563e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.771115e-002f, 1.271988e-002f, 8.448046e-002f, 2.744942e-002f, 2.336668e-001f, 4.884577e-001f, -1.000000e+000f, 5.970290e-001f, 2.278874e-001f, -6.444707e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.521775e-002f, -3.970872e-002f, 5.465088e-002f, 1.338550e-001f, -5.173032e-001f, 4.486119e-001f, 8.740160e-001f, 1.000000e+000f, 1.899369e-001f, 2.105272e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 9.202862e-003f, -3.091956e-002f, 5.747104e-002f, 4.817656e-002f, 3.078156e-001f, 1.965672e-001f, -2.629499e-001f, 7.662117e-001f, 2.593347e-001f, -4.663945e-001f, 4.888645e-001f, -1.000000e+000f, 5.826109e-001f, 3.138189e-001f, -7.711113e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.244177e-002f, -6.244478e-002f, 7.976357e-002f, 2.315109e-001f, -6.802922e-001f, 6.424348e-001f, -1.000000e+000f, 7.446239e-001f, 4.056131e-001f, -6.761831e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 6.663065e-003f, 4.035807e-002f, 7.402862e-002f, 1.303873e-001f, 4.921691e-001f, 2.852829e-001f, -5.716086e-001f, 3.325290e-001f, 1.524751e-001f, -5.369441e-001f, 5.291369e-001f, -4.925372e-001f, 1.000000e+000f, 1.819462e-001f, -4.135626e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.818686e-002f, -7.999667e-002f, 5.923233e-002f, 2.931077e-001f, -7.656198e-001f, 4.764845e-001f, -1.000000e+000f, 9.592690e-001f, 3.294633e-001f, -7.120239e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.436077e-003f, 2.388293e-002f, 6.155761e-002f, 1.098253e-001f, 4.635176e-001f, 3.117192e-001f, -6.561230e-001f, 3.933593e-001f, 2.149712e-001f, -6.462294e-001f, 5.959145e-001f, -5.673318e-001f, 1.000000e+000f, 2.499012e-001f, -3.921306e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.834325e-002f, -7.981686e-002f, 5.903163e-002f, 2.904234e-001f, -7.621302e-001f, 4.738309e-001f, -1.000000e+000f, 9.624784e-001f, 3.308448e-001f, -7.144665e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 5.050445e-002f, -2.108677e-002f, 1.136901e-001f, 1.171333e-001f, -6.479235e-002f, 6.015240e-002f, 2.536285e-001f, 3.346343e-001f, 1.203687e-001f, 4.792155e-001f, 4.524831e-001f, -1.000000e+000f, 6.153266e-001f, 2.231955e-001f, -6.617193e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.935605e-002f, -5.412704e-002f, 8.741472e-002f, 2.360937e-001f, -6.850645e-001f, 4.348191e-001f, -1.000000e+000f, 5.907613e-001f, 2.900272e-001f, -7.545142e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.790057e-002f, 6.058366e-002f, 7.686971e-002f, 1.022198e-001f, 4.155276e-001f, 1.653619e-001f, -6.132433e-002f, 4.354149e-001f, 1.308223e-001f, -3.127767e-002f, 4.319893e-001f, -1.000000e+000f, 6.373668e-001f, 2.240596e-001f, -6.674520e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.922992e-002f, -5.405953e-002f, 8.747503e-002f, 2.327243e-001f, -6.816912e-001f, 4.354574e-001f, -1.000000e+000f, 5.902035e-001f, 2.941522e-001f, -7.585234e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.349082e-002f, 5.757277e-002f, 7.588874e-002f, 8.551635e-002f, 4.135570e-001f, 1.683184e-001f, -6.758089e-002f, 4.420497e-001f, 1.325450e-001f, -4.540265e-002f, 4.322256e-001f, -1.000000e+000f, 6.356091e-001f, 2.281116e-001f, -6.733482e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.911116e-002f, -5.417033e-002f, 8.755425e-002f, 2.301106e-001f, -6.778116e-001f, 4.362757e-001f, -1.000000e+000f, 5.893940e-001f, 2.991844e-001f, -7.644694e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 5.015479e-003f, 3.694586e-002f, 6.805285e-002f, 6.436298e-002f, 3.584676e-001f, 3.743922e-001f, -9.025051e-001f, 5.782850e-001f, 2.712279e-001f, -7.361687e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.920678e-002f, -5.419651e-002f, 8.764655e-002f, 2.287294e-001f, -6.756040e-001f, 4.364044e-001f, -1.000000e+000f, 5.891486e-001f, 3.005288e-001f, -7.664340e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.873073e-003f, 3.246082e-002f, 6.803167e-002f, 5.426536e-002f, 3.294377e-001f, 3.730043e-001f, -9.016627e-001f, 5.784206e-001f, 2.720704e-001f, -7.376558e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 3.949257e-002f, -5.388819e-002f, 8.795296e-002f, 2.182352e-001f, -6.606453e-001f, 4.381148e-001f, -1.000000e+000f, 5.871410e-001f, 3.121938e-001f, -7.807120e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 1.839352e-003f, 2.214857e-002f, 6.669575e-002f, 3.721347e-002f, 2.728130e-001f, 3.644852e-001f, -9.187637e-001f, 5.929256e-001f, 3.003063e-001f, -7.748804e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.279873e-002f, -5.267588e-002f, 9.306871e-002f, 1.677056e-001f, -5.790643e-001f, 4.635387e-001f, -1.000000e+000f, 5.547213e-001f, 4.008419e-001f, -8.839892e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.907825e-003f, 2.778597e-002f, 7.017239e-002f, 4.013879e-002f, 2.819640e-001f, 4.028691e-001f, -9.454229e-001f, 5.564423e-001f, 3.697011e-001f, -8.598109e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -3.715375e-002f, 3.473812e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.088920e-002f, 3.257397e-002f, 7.539447e-002f, 8.327770e-002f, 2.771331e-001f, 3.190006e-001f, 5.071194e-002f, 3.277952e-001f, 4.871990e-001f, 7.710815e-002f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.119011e-002f, 4.864806e-002f, 8.264737e-002f, 8.683986e-002f, 4.167490e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.007773e-002f, 7.128226e-002f, 6.327182e-002f, 5.475204e-002f, 3.266492e-001f, 6.060883e-002f, -4.444388e-001f, 8.187939e-001f, 6.423066e-002f, -3.391262e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.250977e-002f, 2.623913e-003f, 8.008298e-002f, 2.609744e-002f, 2.284620e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.152141e-003f, -2.016434e-002f, 6.751443e-002f, 3.502193e-002f, -2.471592e-001f, 2.887522e-001f, 7.262941e-001f, 7.391987e-001f, 5.197701e-002f, 1.848262e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.973095e-002f, -2.842384e-002f, 8.736816e-002f, 1.333247e-002f, 1.632940e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 5.356007e-004f, -8.293192e-003f, 5.372412e-002f, 5.242808e-002f, -3.201296e-001f, 4.936875e-001f, 2.446224e-001f, 1.000000e+000f, 1.182366e-001f, 3.515229e-003f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.544852e-002f, -6.157411e-002f, 5.719389e-002f, 8.041734e-002f, -2.986144e-001f, 1.380408e-001f, 5.199588e-001f, 8.577088e-001f, 9.663771e-002f, 4.242861e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.996080e-002f, 9.078806e-003f, 5.644430e-002f, 4.345087e-002f, -2.851012e-001f, 1.502508e-001f, 7.073246e-001f, 1.000000e+000f, 1.199589e-001f, 3.804561e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.857411e-003f, 3.005994e-002f, 5.914092e-002f, 1.194960e-001f, 4.884471e-001f, 4.534456e-001f, -1.000000e+000f, 8.049981e-001f, 1.224734e-001f, -4.930066e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.129583e-003f, -1.894998e-003f, 5.566404e-002f, 1.327871e-001f, -5.109782e-001f, 5.901174e-001f, -7.963359e-002f, 1.000000e+000f, 3.057941e-001f, 7.071229e-002f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.214650e-002f, -8.917073e-002f, 6.077981e-002f, 1.151194e-001f, -4.798320e-001f, 3.880158e-001f, 4.494643e-001f, 8.243229e-001f, 1.390638e-001f, 3.805927e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.448701e-003f, -2.335376e-002f, 5.754518e-002f, 1.636423e-001f, -5.720182e-001f, 7.959709e-001f, -7.591077e-001f, 1.000000e+000f, 3.448684e-001f, -3.429434e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.956026e-002f, 3.320145e-002f, 7.763715e-002f, 1.108094e-001f, 3.214690e-001f, 4.735032e-001f, -1.000000e+000f, 6.440725e-001f, 1.381077e-001f, -5.255620e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.364582e-002f, -5.989737e-002f, 1.103333e-001f, 2.122359e-001f, -6.370563e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.771115e-002f, 1.271988e-002f, 8.448046e-002f, 2.744942e-002f, 2.336668e-001f, 4.884577e-001f, -1.000000e+000f, 5.970290e-001f, 2.278874e-001f, -6.444707e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.521775e-002f, -3.970872e-002f, 5.465088e-002f, 1.338550e-001f, -5.173032e-001f, 4.486119e-001f, 8.740160e-001f, 1.000000e+000f, 1.899369e-001f, 2.105272e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 9.202862e-003f, -3.091956e-002f, 5.747104e-002f, 4.817656e-002f, 3.078156e-001f, 1.965672e-001f, -2.629499e-001f, 7.662117e-001f, 2.593347e-001f, -4.663945e-001f, 4.888645e-001f, -1.000000e+000f, 5.826109e-001f, 3.138189e-001f, -7.711113e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.244177e-002f, -6.244478e-002f, 7.976357e-002f, 2.315109e-001f, -6.802922e-001f, 6.424348e-001f, -1.000000e+000f, 7.446239e-001f, 4.056131e-001f, -6.761831e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 6.663065e-003f, 4.035807e-002f, 7.402862e-002f, 1.303873e-001f, 4.921691e-001f, 2.852829e-001f, -5.716086e-001f, 3.325290e-001f, 1.524751e-001f, -5.369441e-001f, 5.291369e-001f, -4.925372e-001f, 1.000000e+000f, 1.819462e-001f, -4.135626e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.818686e-002f, -7.999667e-002f, 5.923233e-002f, 2.931077e-001f, -7.656198e-001f, 4.764845e-001f, -1.000000e+000f, 9.592690e-001f, 3.294633e-001f, -7.120239e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.436077e-003f, 2.388293e-002f, 6.155761e-002f, 1.098253e-001f, 4.635176e-001f, 3.117192e-001f, -6.561230e-001f, 3.933593e-001f, 2.149712e-001f, -6.462294e-001f, 5.959145e-001f, -5.673318e-001f, 1.000000e+000f, 2.499012e-001f, -3.921306e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.834325e-002f, -7.981686e-002f, 5.903163e-002f, 2.904234e-001f, -7.621302e-001f, 4.738309e-001f, -1.000000e+000f, 9.624784e-001f, 3.308448e-001f, -7.144665e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 5.050445e-002f, -2.108677e-002f, 1.136901e-001f, 1.171333e-001f, -6.479235e-002f, 6.015240e-002f, 2.536285e-001f, 3.346343e-001f, 1.203687e-001f, 4.792155e-001f, 4.524831e-001f, -1.000000e+000f, 6.153266e-001f, 2.231955e-001f, -6.617193e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.935605e-002f, -5.412704e-002f, 8.741472e-002f, 2.360937e-001f, -6.850645e-001f, 4.348191e-001f, -1.000000e+000f, 5.907613e-001f, 2.900272e-001f, -7.545142e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.790057e-002f, 6.058366e-002f, 7.686971e-002f, 1.022198e-001f, 4.155276e-001f, 1.653619e-001f, -6.132433e-002f, 4.354149e-001f, 1.308223e-001f, -3.127767e-002f, 4.319893e-001f, -1.000000e+000f, 6.373668e-001f, 2.240596e-001f, -6.674520e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.922992e-002f, -5.405953e-002f, 8.747503e-002f, 2.327243e-001f, -6.816912e-001f, 4.354574e-001f, -1.000000e+000f, 5.902035e-001f, 2.941522e-001f, -7.585234e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.349082e-002f, 5.757277e-002f, 7.588874e-002f, 8.551635e-002f, 4.135570e-001f, 1.683184e-001f, -6.758089e-002f, 4.420497e-001f, 1.325450e-001f, -4.540265e-002f, 4.322256e-001f, -1.000000e+000f, 6.356091e-001f, 2.281116e-001f, -6.733482e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.911116e-002f, -5.417033e-002f, 8.755425e-002f, 2.301106e-001f, -6.778116e-001f, 4.362757e-001f, -1.000000e+000f, 5.893940e-001f, 2.991844e-001f, -7.644694e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 5.015479e-003f, 3.694586e-002f, 6.805285e-002f, 6.436298e-002f, 3.584676e-001f, 3.743922e-001f, -9.025051e-001f, 5.782850e-001f, 2.712279e-001f, -7.361687e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.920678e-002f, -5.419651e-002f, 8.764655e-002f, 2.287294e-001f, -6.756040e-001f, 4.364044e-001f, -1.000000e+000f, 5.891486e-001f, 3.005288e-001f, -7.664340e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.873073e-003f, 3.246082e-002f, 6.803167e-002f, 5.426536e-002f, 3.294377e-001f, 3.730043e-001f, -9.016627e-001f, 5.784206e-001f, 2.720704e-001f, -7.376558e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 3.949257e-002f, -5.388819e-002f, 8.795296e-002f, 2.182352e-001f, -6.606453e-001f, 4.381148e-001f, -1.000000e+000f, 5.871410e-001f, 3.121938e-001f, -7.807120e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 1.839352e-003f, 2.214857e-002f, 6.669575e-002f, 3.721347e-002f, 2.728130e-001f, 3.644852e-001f, -9.187637e-001f, 5.929256e-001f, 3.003063e-001f, -7.748804e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.279873e-002f, -5.267588e-002f, 9.306871e-002f, 1.677056e-001f, -5.790643e-001f, 4.635387e-001f, -1.000000e+000f, 5.547213e-001f, 4.008419e-001f, -8.839892e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.907825e-003f, 2.778597e-002f, 7.017239e-002f, 4.013879e-002f, 2.819640e-001f, 4.028691e-001f, -9.454229e-001f, 5.564423e-001f, 3.697011e-001f, -8.598109e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -6.800995e-002f, 4.160909e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  1.088920e-002f, 3.257397e-002f, 7.539447e-002f, 8.327770e-002f, 2.771331e-001f, 3.190006e-001f, 5.071194e-002f, 3.277952e-001f, 4.871990e-001f, 7.710815e-002f, 4.119011e-002f, 4.864806e-002f, 8.264737e-002f, 8.683986e-002f, 4.167490e-001f,
  0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  2.007773e-002f, 7.128226e-002f, 6.327182e-002f, 5.475204e-002f, 3.266492e-001f, 6.060883e-002f, -4.444388e-001f, 8.187939e-001f, 6.423066e-002f, -3.391262e-001f, 4.250977e-002f, 2.623913e-003f, 8.008298e-002f, 2.609744e-002f, 2.284620e-001f,
  3.152141e-003f, -2.016434e-002f, 6.751443e-002f, 3.502193e-002f, -2.471592e-001f, 2.887522e-001f, 7.262941e-001f, 7.391987e-001f, 5.197701e-002f, 1.848262e-001f, 4.973095e-002f, -2.842384e-002f, 8.736816e-002f, 1.333247e-002f, 1.632940e-001f,
  2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  5.356007e-004f, -8.293192e-003f, 5.372412e-002f, 5.242808e-002f, -3.201296e-001f, 4.936875e-001f, 2.446224e-001f, 1.000000e+000f, 1.182366e-001f, 3.515229e-003f, 3.544852e-002f, -6.157411e-002f, 5.719389e-002f, 8.041734e-002f, -2.986144e-001f, 1.380408e-001f, 5.199588e-001f, 8.577088e-001f, 9.663771e-002f, 4.242861e-001f,
  1.996080e-002f, 9.078806e-003f, 5.644430e-002f, 4.345087e-002f, -2.851012e-001f, 1.502508e-001f, 7.073246e-001f, 1.000000e+000f, 1.199589e-001f, 3.804561e-001f, 3.857411e-003f, 3.005994e-002f, 5.914092e-002f, 1.194960e-001f, 4.884471e-001f, 4.534456e-001f, -1.000000e+000f, 8.049981e-001f, 1.224734e-001f, -4.930066e-001f,
  2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  2.129583e-003f, -1.894998e-003f, 5.566404e-002f, 1.327871e-001f, -5.109782e-001f, 5.901174e-001f, -7.963359e-002f, 1.000000e+000f, 3.057941e-001f, 7.071229e-002f, 4.214650e-002f, -8.917073e-002f, 6.077981e-002f, 1.151194e-001f, -4.798320e-001f, 3.880158e-001f, 4.494643e-001f, 8.243229e-001f, 1.390638e-001f, 3.805927e-001f,
  2.448701e-003f, -2.335376e-002f, 5.754518e-002f, 1.636423e-001f, -5.720182e-001f, 7.959709e-001f, -7.591077e-001f, 1.000000e+000f, 3.448684e-001f, -3.429434e-001f, 3.956026e-002f, 3.320145e-002f, 7.763715e-002f, 1.108094e-001f, 3.214690e-001f, 4.735032e-001f, -1.000000e+000f, 6.440725e-001f, 1.381077e-001f, -5.255620e-001f,
  1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  1.364582e-002f, -5.989737e-002f, 1.103333e-001f, 2.122359e-001f, -6.370563e-001f, 2.771115e-002f, 1.271988e-002f, 8.448046e-002f, 2.744942e-002f, 2.336668e-001f, 4.884577e-001f, -1.000000e+000f, 5.970290e-001f, 2.278874e-001f, -6.444707e-001f,
  2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  2.521775e-002f, -3.970872e-002f, 5.465088e-002f, 1.338550e-001f, -5.173032e-001f, 4.486119e-001f, 8.740160e-001f, 1.000000e+000f, 1.899369e-001f, 2.105272e-001f, 9.202862e-003f, -3.091956e-002f, 5.747104e-002f, 4.817656e-002f, 3.078156e-001f, 1.965672e-001f, -2.629499e-001f, 7.662117e-001f, 2.593347e-001f, -4.663945e-001f, 4.888645e-001f, -1.000000e+000f, 5.826109e-001f, 3.138189e-001f, -7.711113e-001f,
  1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  1.244177e-002f, -6.244478e-002f, 7.976357e-002f, 2.315109e-001f, -6.802922e-001f, 6.424348e-001f, -1.000000e+000f, 7.446239e-001f, 4.056131e-001f, -6.761831e-001f, 6.663065e-003f, 4.035807e-002f, 7.402862e-002f, 1.303873e-001f, 4.921691e-001f, 2.852829e-001f, -5.716086e-001f, 3.325290e-001f, 1.524751e-001f, -5.369441e-001f, 5.291369e-001f, -4.925372e-001f, 1.000000e+000f, 1.819462e-001f, -4.135626e-001f,
  1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  2.818686e-002f, -7.999667e-002f, 5.923233e-002f, 2.931077e-001f, -7.656198e-001f, 4.764845e-001f, -1.000000e+000f, 9.592690e-001f, 3.294633e-001f, -7.120239e-001f, 2.436077e-003f, 2.388293e-002f, 6.155761e-002f, 1.098253e-001f, 4.635176e-001f, 3.117192e-001f, -6.561230e-001f, 3.933593e-001f, 2.149712e-001f, -6.462294e-001f, 5.959145e-001f, -5.673318e-001f, 1.000000e+000f, 2.499012e-001f, -3.921306e-001f,
  2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  2.834325e-002f, -7.981686e-002f, 5.903163e-002f, 2.904234e-001f, -7.621302e-001f, 4.738309e-001f, -1.000000e+000f, 9.624784e-001f, 3.308448e-001f, -7.144665e-001f, 5.050445e-002f, -2.108677e-002f, 1.136901e-001f, 1.171333e-001f, -6.479235e-002f, 6.015240e-002f, 2.536285e-001f, 3.346343e-001f, 1.203687e-001f, 4.792155e-001f, 4.524831e-001f, -1.000000e+000f, 6.153266e-001f, 2.231955e-001f, -6.617193e-001f,
  3.935605e-002f, -5.412704e-002f, 8.741472e-002f, 2.360937e-001f, -6.850645e-001f, 4.348191e-001f, -1.000000e+000f, 5.907613e-001f, 2.900272e-001f, -7.545142e-001f, 1.790057e-002f, 6.058366e-002f, 7.686971e-002f, 1.022198e-001f, 4.155276e-001f, 1.653619e-001f, -6.132433e-002f, 4.354149e-001f, 1.308223e-001f, -3.127767e-002f, 4.319893e-001f, -1.000000e+000f, 6.373668e-001f, 2.240596e-001f, -6.674520e-001f,
  3.922992e-002f, -5.405953e-002f, 8.747503e-002f, 2.327243e-001f, -6.816912e-001f, 4.354574e-001f, -1.000000e+000f, 5.902035e-001f, 2.941522e-001f, -7.585234e-001f, 1.349082e-002f, 5.757277e-002f, 7.588874e-002f, 8.551635e-002f, 4.135570e-001f, 1.683184e-001f, -6.758089e-002f, 4.420497e-001f, 1.325450e-001f, -4.540265e-002f, 4.322256e-001f, -1.000000e+000f, 6.356091e-001f, 2.281116e-001f, -6.733482e-001f,
  3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  3.911116e-002f, -5.417033e-002f, 8.755425e-002f, 2.301106e-001f, -6.778116e-001f, 4.362757e-001f, -1.000000e+000f, 5.893940e-001f, 2.991844e-001f, -7.644694e-001f, 5.015479e-003f, 3.694586e-002f, 6.805285e-002f, 6.436298e-002f, 3.584676e-001f, 3.743922e-001f, -9.025051e-001f, 5.782850e-001f, 2.712279e-001f, -7.361687e-001f,
  3.920678e-002f, -5.419651e-002f, 8.764655e-002f, 2.287294e-001f, -6.756040e-001f, 4.364044e-001f, -1.000000e+000f, 5.891486e-001f, 3.005288e-001f, -7.664340e-001f, 3.873073e-003f, 3.246082e-002f, 6.803167e-002f, 5.426536e-002f, 3.294377e-001f, 3.730043e-001f, -9.016627e-001f, 5.784206e-001f, 2.720704e-001f, -7.376558e-001f,
  3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  3.949257e-002f, -5.388819e-002f, 8.795296e-002f, 2.182352e-001f, -6.606453e-001f, 4.381148e-001f, -1.000000e+000f, 5.871410e-001f, 3.121938e-001f, -7.807120e-001f, 1.839352e-003f, 2.214857e-002f, 6.669575e-002f, 3.721347e-002f, 2.728130e-001f, 3.644852e-001f, -9.187637e-001f, 5.929256e-001f, 3.003063e-001f, -7.748804e-001f,
  4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  4.279873e-002f, -5.267588e-002f, 9.306871e-002f, 1.677056e-001f, -5.790643e-001f, 4.635387e-001f, -1.000000e+000f, 5.547213e-001f, 4.008419e-001f, -8.839892e-001f, 2.907825e-003f, 2.778597e-002f, 7.017239e-002f, 4.013879e-002f, 2.819640e-001f, 4.028691e-001f, -9.454229e-001f, 5.564423e-001f, 3.697011e-001f, -8.598109e-001f,
  4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.088920e-002f, 3.257397e-002f, 7.539447e-002f, 8.327770e-002f, 2.771331e-001f, 3.190006e-001f, 5.071194e-002f, 3.277952e-001f, 4.871990e-001f, 7.710815e-002f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.119011e-002f, 4.864806e-002f, 8.264737e-002f, 8.683986e-002f, 4.167490e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.007773e-002f, 7.128226e-002f, 6.327182e-002f, 5.475204e-002f, 3.266492e-001f, 6.060883e-002f, -4.444388e-001f, 8.187939e-001f, 6.423066e-002f, -3.391262e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.250977e-002f, 2.623913e-003f, 8.008298e-002f, 2.609744e-002f, 2.284620e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.152141e-003f, -2.016434e-002f, 6.751443e-002f, 3.502193e-002f, -2.471592e-001f, 2.887522e-001f, 7.262941e-001f, 7.391987e-001f, 5.197701e-002f, 1.848262e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.973095e-002f, -2.842384e-002f, 8.736816e-002f, 1.333247e-002f, 1.632940e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 5.356007e-004f, -8.293192e-003f, 5.372412e-002f, 5.242808e-002f, -3.201296e-001f, 4.936875e-001f, 2.446224e-001f, 1.000000e+000f, 1.182366e-001f, 3.515229e-003f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.544852e-002f, -6.157411e-002f, 5.719389e-002f, 8.041734e-002f, -2.986144e-001f, 1.380408e-001f, 5.199588e-001f, 8.577088e-001f, 9.663771e-002f, 4.242861e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.996080e-002f, 9.078806e-003f, 5.644430e-002f, 4.345087e-002f, -2.851012e-001f, 1.502508e-001f, 7.073246e-001f, 1.000000e+000f, 1.199589e-001f, 3.804561e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.857411e-003f, 3.005994e-002f, 5.914092e-002f, 1.194960e-001f, 4.884471e-001f, 4.534456e-001f, -1.000000e+000f, 8.049981e-001f, 1.224734e-001f, -4.930066e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.129583e-003f, -1.894998e-003f, 5.566404e-002f, 1.327871e-001f, -5.109782e-001f, 5.901174e-001f, -7.963359e-002f, 1.000000e+000f, 3.057941e-001f, 7.071229e-002f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.214650e-002f, -8.917073e-002f, 6.077981e-002f, 1.151194e-001f, -4.798320e-001f, 3.880158e-001f, 4.494643e-001f, 8.243229e-001f, 1.390638e-001f, 3.805927e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.448701e-003f, -2.335376e-002f, 5.754518e-002f, 1.636423e-001f, -5.720182e-001f, 7.959709e-001f, -7.591077e-001f, 1.000000e+000f, 3.448684e-001f, -3.429434e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.956026e-002f, 3.320145e-002f, 7.763715e-002f, 1.108094e-001f, 3.214690e-001f, 4.735032e-001f, -1.000000e+000f, 6.440725e-001f, 1.381077e-001f, -5.255620e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.364582e-002f, -5.989737e-002f, 1.103333e-001f, 2.122359e-001f, -6.370563e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.771115e-002f, 1.271988e-002f, 8.448046e-002f, 2.744942e-002f, 2.336668e-001f, 4.884577e-001f, -1.000000e+000f, 5.970290e-001f, 2.278874e-001f, -6.444707e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.521775e-002f, -3.970872e-002f, 5.465088e-002f, 1.338550e-001f, -5.173032e-001f, 4.486119e-001f, 8.740160e-001f, 1.000000e+000f, 1.899369e-001f, 2.105272e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 9.202862e-003f, -3.091956e-002f, 5.747104e-002f, 4.817656e-002f, 3.078156e-001f, 1.965672e-001f, -2.629499e-001f, 7.662117e-001f, 2.593347e-001f, -4.663945e-001f, 4.888645e-001f, -1.000000e+000f, 5.826109e-001f, 3.138189e-001f, -7.711113e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.244177e-002f, -6.244478e-002f, 7.976357e-002f, 2.315109e-001f, -6.802922e-001f, 6.424348e-001f, -1.000000e+000f, 7.446239e-001f, 4.056131e-001f, -6.761831e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 6.663065e-003f, 4.035807e-002f, 7.402862e-002f, 1.303873e-001f, 4.921691e-001f, 2.852829e-001f, -5.716086e-001f, 3.325290e-001f, 1.524751e-001f, -5.369441e-001f, 5.291369e-001f, -4.925372e-001f, 1.000000e+000f, 1.819462e-001f, -4.135626e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.818686e-002f, -7.999667e-002f, 5.923233e-002f, 2.931077e-001f, -7.656198e-001f, 4.764845e-001f, -1.000000e+000f, 9.592690e-001f, 3.294633e-001f, -7.120239e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.436077e-003f, 2.388293e-002f, 6.155761e-002f, 1.098253e-001f, 4.635176e-001f, 3.117192e-001f, -6.561230e-001f, 3.933593e-001f, 2.149712e-001f, -6.462294e-001f, 5.959145e-001f, -5.673318e-001f, 1.000000e+000f, 2.499012e-001f, -3.921306e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.834325e-002f, -7.981686e-002f, 5.903163e-002f, 2.904234e-001f, -7.621302e-001f, 4.738309e-001f, -1.000000e+000f, 9.624784e-001f, 3.308448e-001f, -7.144665e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 5.050445e-002f, -2.108677e-002f, 1.136901e-001f, 1.171333e-001f, -6.479235e-002f, 6.015240e-002f, 2.536285e-001f, 3.346343e-001f, 1.203687e-001f, 4.792155e-001f, 4.524831e-001f, -1.000000e+000f, 6.153266e-001f, 2.231955e-001f, -6.617193e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.935605e-002f, -5.412704e-002f, 8.741472e-002f, 2.360937e-001f, -6.850645e-001f, 4.348191e-001f, -1.000000e+000f, 5.907613e-001f, 2.900272e-001f, -7.545142e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.790057e-002f, 6.058366e-002f, 7.686971e-002f, 1.022198e-001f, 4.155276e-001f, 1.653619e-001f, -6.132433e-002f, 4.354149e-001f, 1.308223e-001f, -3.127767e-002f, 4.319893e-001f, -1.000000e+000f, 6.373668e-001f, 2.240596e-001f, -6.674520e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.922992e-002f, -5.405953e-002f, 8.747503e-002f, 2.327243e-001f, -6.816912e-001f, 4.354574e-001f, -1.000000e+000f, 5.902035e-001f, 2.941522e-001f, -7.585234e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.349082e-002f, 5.757277e-002f, 7.588874e-002f, 8.551635e-002f, 4.135570e-001f, 1.683184e-001f, -6.758089e-002f, 4.420497e-001f, 1.325450e-001f, -4.540265e-002f, 4.322256e-001f, -1.000000e+000f, 6.356091e-001f, 2.281116e-001f, -6.733482e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.911116e-002f, -5.417033e-002f, 8.755425e-002f, 2.301106e-001f, -6.778116e-001f, 4.362757e-001f, -1.000000e+000f, 5.893940e-001f, 2.991844e-001f, -7.644694e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 5.015479e-003f, 3.694586e-002f, 6.805285e-002f, 6.436298e-002f, 3.584676e-001f, 3.743922e-001f, -9.025051e-001f, 5.782850e-001f, 2.712279e-001f, -7.361687e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.920678e-002f, -5.419651e-002f, 8.764655e-002f, 2.287294e-001f, -6.756040e-001f, 4.364044e-001f, -1.000000e+000f, 5.891486e-001f, 3.005288e-001f, -7.664340e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.873073e-003f, 3.246082e-002f, 6.803167e-002f, 5.426536e-002f, 3.294377e-001f, 3.730043e-001f, -9.016627e-001f, 5.784206e-001f, 2.720704e-001f, -7.376558e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 3.949257e-002f, -5.388819e-002f, 8.795296e-002f, 2.182352e-001f, -6.606453e-001f, 4.381148e-001f, -1.000000e+000f, 5.871410e-001f, 3.121938e-001f, -7.807120e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 1.839352e-003f, 2.214857e-002f, 6.669575e-002f, 3.721347e-002f, 2.728130e-001f, 3.644852e-001f, -9.187637e-001f, 5.929256e-001f, 3.003063e-001f, -7.748804e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.279873e-002f, -5.267588e-002f, 9.306871e-002f, 1.677056e-001f, -5.790643e-001f, 4.635387e-001f, -1.000000e+000f, 5.547213e-001f, 4.008419e-001f, -8.839892e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.907825e-003f, 2.778597e-002f, 7.017239e-002f, 4.013879e-002f, 2.819640e-001f, 4.028691e-001f, -9.454229e-001f, 5.564423e-001f, 3.697011e-001f, -8.598109e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.164713e-001f, 4.266987e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.088920e-002f, 3.257397e-002f, 7.539447e-002f, 8.327770e-002f, 2.771331e-001f, 3.190006e-001f, 5.071194e-002f, 3.277952e-001f, 4.871990e-001f, 7.710815e-002f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.119011e-002f, 4.864806e-002f, 8.264737e-002f, 8.683986e-002f, 4.167490e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.007773e-002f, 7.128226e-002f, 6.327182e-002f, 5.475204e-002f, 3.266492e-001f, 6.060883e-002f, -4.444388e-001f, 8.187939e-001f, 6.423066e-002f, -3.391262e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.250977e-002f, 2.623913e-003f, 8.008298e-002f, 2.609744e-002f, 2.284620e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.152141e-003f, -2.016434e-002f, 6.751443e-002f, 3.502193e-002f, -2.471592e-001f, 2.887522e-001f, 7.262941e-001f, 7.391987e-001f, 5.197701e-002f, 1.848262e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.973095e-002f, -2.842384e-002f, 8.736816e-002f, 1.333247e-002f, 1.632940e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 5.356007e-004f, -8.293192e-003f, 5.372412e-002f, 5.242808e-002f, -3.201296e-001f, 4.936875e-001f, 2.446224e-001f, 1.000000e+000f, 1.182366e-001f, 3.515229e-003f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.544852e-002f, -6.157411e-002f, 5.719389e-002f, 8.041734e-002f, -2.986144e-001f, 1.380408e-001f, 5.199588e-001f, 8.577088e-001f, 9.663771e-002f, 4.242861e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.996080e-002f, 9.078806e-003f, 5.644430e-002f, 4.345087e-002f, -2.851012e-001f, 1.502508e-001f, 7.073246e-001f, 1.000000e+000f, 1.199589e-001f, 3.804561e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.857411e-003f, 3.005994e-002f, 5.914092e-002f, 1.194960e-001f, 4.884471e-001f, 4.534456e-001f, -1.000000e+000f, 8.049981e-001f, 1.224734e-001f, -4.930066e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.129583e-003f, -1.894998e-003f, 5.566404e-002f, 1.327871e-001f, -5.109782e-001f, 5.901174e-001f, -7.963359e-002f, 1.000000e+000f, 3.057941e-001f, 7.071229e-002f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.214650e-002f, -8.917073e-002f, 6.077981e-002f, 1.151194e-001f, -4.798320e-001f, 3.880158e-001f, 4.494643e-001f, 8.243229e-001f, 1.390638e-001f, 3.805927e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.448701e-003f, -2.335376e-002f, 5.754518e-002f, 1.636423e-001f, -5.720182e-001f, 7.959709e-001f, -7.591077e-001f, 1.000000e+000f, 3.448684e-001f, -3.429434e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.956026e-002f, 3.320145e-002f, 7.763715e-002f, 1.108094e-001f, 3.214690e-001f, 4.735032e-001f, -1.000000e+000f, 6.440725e-001f, 1.381077e-001f, -5.255620e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.364582e-002f, -5.989737e-002f, 1.103333e-001f, 2.122359e-001f, -6.370563e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.771115e-002f, 1.271988e-002f, 8.448046e-002f, 2.744942e-002f, 2.336668e-001f, 4.884577e-001f, -1.000000e+000f, 5.970290e-001f, 2.278874e-001f, -6.444707e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.521775e-002f, -3.970872e-002f, 5.465088e-002f, 1.338550e-001f, -5.173032e-001f, 4.486119e-001f, 8.740160e-001f, 1.000000e+000f, 1.899369e-001f, 2.105272e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 9.202862e-003f, -3.091956e-002f, 5.747104e-002f, 4.817656e-002f, 3.078156e-001f, 1.965672e-001f, -2.629499e-001f, 7.662117e-001f, 2.593347e-001f, -4.663945e-001f, 4.888645e-001f, -1.000000e+000f, 5.826109e-001f, 3.138189e-001f, -7.711113e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.244177e-002f, -6.244478e-002f, 7.976357e-002f, 2.315109e-001f, -6.802922e-001f, 6.424348e-001f, -1.000000e+000f, 7.446239e-001f, 4.056131e-001f, -6.761831e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 6.663065e-003f, 4.035807e-002f, 7.402862e-002f, 1.303873e-001f, 4.921691e-001f, 2.852829e-001f, -5.716086e-001f, 3.325290e-001f, 1.524751e-001f, -5.369441e-001f, 5.291369e-001f, -4.925372e-001f, 1.000000e+000f, 1.819462e-001f, -4.135626e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.818686e-002f, -7.999667e-002f, 5.923233e-002f, 2.931077e-001f, -7.656198e-001f, 4.764845e-001f, -1.000000e+000f, 9.592690e-001f, 3.294633e-001f, -7.120239e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.436077e-003f, 2.388293e-002f, 6.155761e-002f, 1.098253e-001f, 4.635176e-001f, 3.117192e-001f, -6.561230e-001f, 3.933593e-001f, 2.149712e-001f, -6.462294e-001f, 5.959145e-001f, -5.673318e-001f, 1.000000e+000f, 2.499012e-001f, -3.921306e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.834325e-002f, -7.981686e-002f, 5.903163e-002f, 2.904234e-001f, -7.621302e-001f, 4.738309e-001f, -1.000000e+000f, 9.624784e-001f, 3.308448e-001f, -7.144665e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 5.050445e-002f, -2.108677e-002f, 1.136901e-001f, 1.171333e-001f, -6.479235e-002f, 6.015240e-002f, 2.536285e-001f, 3.346343e-001f, 1.203687e-001f, 4.792155e-001f, 4.524831e-001f, -1.000000e+000f, 6.153266e-001f, 2.231955e-001f, -6.617193e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.935605e-002f, -5.412704e-002f, 8.741472e-002f, 2.360937e-001f, -6.850645e-001f, 4.348191e-001f, -1.000000e+000f, 5.907613e-001f, 2.900272e-001f, -7.545142e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.790057e-002f, 6.058366e-002f, 7.686971e-002f, 1.022198e-001f, 4.155276e-001f, 1.653619e-001f, -6.132433e-002f, 4.354149e-001f, 1.308223e-001f, -3.127767e-002f, 4.319893e-001f, -1.000000e+000f, 6.373668e-001f, 2.240596e-001f, -6.674520e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.922992e-002f, -5.405953e-002f, 8.747503e-002f, 2.327243e-001f, -6.816912e-001f, 4.354574e-001f, -1.000000e+000f, 5.902035e-001f, 2.941522e-001f, -7.585234e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.349082e-002f, 5.757277e-002f, 7.588874e-002f, 8.551635e-002f, 4.135570e-001f, 1.683184e-001f, -6.758089e-002f, 4.420497e-001f, 1.325450e-001f, -4.540265e-002f, 4.322256e-001f, -1.000000e+000f, 6.356091e-001f, 2.281116e-001f, -6.733482e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.911116e-002f, -5.417033e-002f, 8.755425e-002f, 2.301106e-001f, -6.778116e-001f, 4.362757e-001f, -1.000000e+000f, 5.893940e-001f, 2.991844e-001f, -7.644694e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 5.015479e-003f, 3.694586e-002f, 6.805285e-002f, 6.436298e-002f, 3.584676e-001f, 3.743922e-001f, -9.025051e-001f, 5.782850e-001f, 2.712279e-001f, -7.361687e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.920678e-002f, -5.419651e-002f, 8.764655e-002f, 2.287294e-001f, -6.756040e-001f, 4.364044e-001f, -1.000000e+000f, 5.891486e-001f, 3.005288e-001f, -7.664340e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.873073e-003f, 3.246082e-002f, 6.803167e-002f, 5.426536e-002f, 3.294377e-001f, 3.730043e-001f, -9.016627e-001f, 5.784206e-001f, 2.720704e-001f, -7.376558e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 3.949257e-002f, -5.388819e-002f, 8.795296e-002f, 2.182352e-001f, -6.606453e-001f, 4.381148e-001f, -1.000000e+000f, 5.871410e-001f, 3.121938e-001f, -7.807120e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 1.839352e-003f, 2.214857e-002f, 6.669575e-002f, 3.721347e-002f, 2.728130e-001f, 3.644852e-001f, -9.187637e-001f, 5.929256e-001f, 3.003063e-001f, -7.748804e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.279873e-002f, -5.267588e-002f, 9.306871e-002f, 1.677056e-001f, -5.790643e-001f, 4.635387e-001f, -1.000000e+000f, 5.547213e-001f, 4.008419e-001f, -8.839892e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.907825e-003f, 2.778597e-002f, 7.017239e-002f, 4.013879e-002f, 2.819640e-001f, 4.028691e-001f, -9.454229e-001f, 5.564423e-001f, 3.697011e-001f, -8.598109e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.188392e-001f, 3.652616e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 1.088920e-002f, 3.257397e-002f, 7.539447e-002f, 8.327770e-002f, 2.771331e-001f, 3.190006e-001f, 5.071194e-002f, 3.277952e-001f, 4.871990e-001f, 7.710815e-002f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 4.119011e-002f, 4.864806e-002f, 8.264737e-002f, 8.683986e-002f, 4.167490e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.007773e-002f, 7.128226e-002f, 6.327182e-002f, 5.475204e-002f, 3.266492e-001f, 6.060883e-002f, -4.444388e-001f, 8.187939e-001f, 6.423066e-002f, -3.391262e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 4.250977e-002f, 2.623913e-003f, 8.008298e-002f, 2.609744e-002f, 2.284620e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 5.356007e-004f, -8.293192e-003f, 5.372412e-002f, 5.242808e-002f, -3.201296e-001f, 4.936875e-001f, 2.446224e-001f, 1.000000e+000f, 1.182366e-001f, 3.515229e-003f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.544852e-002f, -6.157411e-002f, 5.719389e-002f, 8.041734e-002f, -2.986144e-001f, 1.380408e-001f, 5.199588e-001f, 8.577088e-001f, 9.663771e-002f, 4.242861e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 1.996080e-002f, 9.078806e-003f, 5.644430e-002f, 4.345087e-002f, -2.851012e-001f, 1.502508e-001f, 7.073246e-001f, 1.000000e+000f, 1.199589e-001f, 3.804561e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.857411e-003f, 3.005994e-002f, 5.914092e-002f, 1.194960e-001f, 4.884471e-001f, 4.534456e-001f, -1.000000e+000f, 8.049981e-001f, 1.224734e-001f, -4.930066e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.129583e-003f, -1.894998e-003f, 5.566404e-002f, 1.327871e-001f, -5.109782e-001f, 5.901174e-001f, -7.963359e-002f, 1.000000e+000f, 3.057941e-001f, 7.071229e-002f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 4.214650e-002f, -8.917073e-002f, 6.077981e-002f, 1.151194e-001f, -4.798320e-001f, 3.880158e-001f, 4.494643e-001f, 8.243229e-001f, 1.390638e-001f, 3.805927e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 1.364582e-002f, -5.989737e-002f, 1.103333e-001f, 2.122359e-001f, -6.370563e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.771115e-002f, 1.271988e-002f, 8.448046e-002f, 2.744942e-002f, 2.336668e-001f, 4.884577e-001f, -1.000000e+000f, 5.970290e-001f, 2.278874e-001f, -6.444707e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.521775e-002f, -3.970872e-002f, 5.465088e-002f, 1.338550e-001f, -5.173032e-001f, 4.486119e-001f, 8.740160e-001f, 1.000000e+000f, 1.899369e-001f, 2.105272e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 9.202862e-003f, -3.091956e-002f, 5.747104e-002f, 4.817656e-002f, 3.078156e-001f, 1.965672e-001f, -2.629499e-001f, 7.662117e-001f, 2.593347e-001f, -4.663945e-001f, 4.888645e-001f, -1.000000e+000f, 5.826109e-001f, 3.138189e-001f, -7.711113e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.818686e-002f, -7.999667e-002f, 5.923233e-002f, 2.931077e-001f, -7.656198e-001f, 4.764845e-001f, -1.000000e+000f, 9.592690e-001f, 3.294633e-001f, -7.120239e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.436077e-003f, 2.388293e-002f, 6.155761e-002f, 1.098253e-001f, 4.635176e-001f, 3.117192e-001f, -6.561230e-001f, 3.933593e-001f, 2.149712e-001f, -6.462294e-001f, 5.959145e-001f, -5.673318e-001f, 1.000000e+000f, 2.499012e-001f, -3.921306e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.834325e-002f, -7.981686e-002f, 5.903163e-002f, 2.904234e-001f, -7.621302e-001f, 4.738309e-001f, -1.000000e+000f, 9.624784e-001f, 3.308448e-001f, -7.144665e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 5.050445e-002f, -2.108677e-002f, 1.136901e-001f, 1.171333e-001f, -6.479235e-002f, 6.015240e-002f, 2.536285e-001f, 3.346343e-001f, 1.203687e-001f, 4.792155e-001f, 4.524831e-001f, -1.000000e+000f, 6.153266e-001f, 2.231955e-001f, -6.617193e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.935605e-002f, -5.412704e-002f, 8.741472e-002f, 2.360937e-001f, -6.850645e-001f, 4.348191e-001f, -1.000000e+000f, 5.907613e-001f, 2.900272e-001f, -7.545142e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 1.790057e-002f, 6.058366e-002f, 7.686971e-002f, 1.022198e-001f, 4.155276e-001f, 1.653619e-001f, -6.132433e-002f, 4.354149e-001f, 1.308223e-001f, -3.127767e-002f, 4.319893e-001f, -1.000000e+000f, 6.373668e-001f, 2.240596e-001f, -6.674520e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.911116e-002f, -5.417033e-002f, 8.755425e-002f, 2.301106e-001f, -6.778116e-001f, 4.362757e-001f, -1.000000e+000f, 5.893940e-001f, 2.991844e-001f, -7.644694e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 5.015479e-003f, 3.694586e-002f, 6.805285e-002f, 6.436298e-002f, 3.584676e-001f, 3.743922e-001f, -9.025051e-001f, 5.782850e-001f, 2.712279e-001f, -7.361687e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.920678e-002f, -5.419651e-002f, 8.764655e-002f, 2.287294e-001f, -6.756040e-001f, 4.364044e-001f, -1.000000e+000f, 5.891486e-001f, 3.005288e-001f, -7.664340e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.873073e-003f, 3.246082e-002f, 6.803167e-002f, 5.426536e-002f, 3.294377e-001f, 3.730043e-001f, -9.016627e-001f, 5.784206e-001f, 2.720704e-001f, -7.376558e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 4.279873e-002f, -5.267588e-002f, 9.306871e-002f, 1.677056e-001f, -5.790643e-001f, 4.635387e-001f, -1.000000e+000f, 5.547213e-001f, 4.008419e-001f, -8.839892e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.907825e-003f, 2.778597e-002f, 7.017239e-002f, 4.013879e-002f, 2.819640e-001f, 4.028691e-001f, -9.454229e-001f, 5.564423e-001f, 3.697011e-001f, -8.598109e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.186982e-001f, 3.383224e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 1.088920e-002f, 3.257397e-002f, 7.539447e-002f, 8.327770e-002f, 2.771331e-001f, 3.190006e-001f, 5.071194e-002f, 3.277952e-001f, 4.871990e-001f, 7.710815e-002f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 4.119011e-002f, 4.864806e-002f, 8.264737e-002f, 8.683986e-002f, 4.167490e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.152141e-003f, -2.016434e-002f, 6.751443e-002f, 3.502193e-002f, -2.471592e-001f, 2.887522e-001f, 7.262941e-001f, 7.391987e-001f, 5.197701e-002f, 1.848262e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 4.973095e-002f, -2.842384e-002f, 8.736816e-002f, 1.333247e-002f, 1.632940e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 5.356007e-004f, -8.293192e-003f, 5.372412e-002f, 5.242808e-002f, -3.201296e-001f, 4.936875e-001f, 2.446224e-001f, 1.000000e+000f, 1.182366e-001f, 3.515229e-003f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.544852e-002f, -6.157411e-002f, 5.719389e-002f, 8.041734e-002f, -2.986144e-001f, 1.380408e-001f, 5.199588e-001f, 8.577088e-001f, 9.663771e-002f, 4.242861e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.129583e-003f, -1.894998e-003f, 5.566404e-002f, 1.327871e-001f, -5.109782e-001f, 5.901174e-001f, -7.963359e-002f, 1.000000e+000f, 3.057941e-001f, 7.071229e-002f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 4.214650e-002f, -8.917073e-002f, 6.077981e-002f, 1.151194e-001f, -4.798320e-001f, 3.880158e-001f, 4.494643e-001f, 8.243229e-001f, 1.390638e-001f, 3.805927e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.448701e-003f, -2.335376e-002f, 5.754518e-002f, 1.636423e-001f, -5.720182e-001f, 7.959709e-001f, -7.591077e-001f, 1.000000e+000f, 3.448684e-001f, -3.429434e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.956026e-002f, 3.320145e-002f, 7.763715e-002f, 1.108094e-001f, 3.214690e-001f, 4.735032e-001f, -1.000000e+000f, 6.440725e-001f, 1.381077e-001f, -5.255620e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.521775e-002f, -3.970872e-002f, 5.465088e-002f, 1.338550e-001f, -5.173032e-001f, 4.486119e-001f, 8.740160e-001f, 1.000000e+000f, 1.899369e-001f, 2.105272e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 9.202862e-003f, -3.091956e-002f, 5.747104e-002f, 4.817656e-002f, 3.078156e-001f, 1.965672e-001f, -2.629499e-001f, 7.662117e-001f, 2.593347e-001f, -4.663945e-001f, 4.888645e-001f, -1.000000e+000f, 5.826109e-001f, 3.138189e-001f, -7.711113e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.818686e-002f, -7.999667e-002f, 5.923233e-002f, 2.931077e-001f, -7.656198e-001f, 4.764845e-001f, -1.000000e+000f, 9.592690e-001f, 3.294633e-001f, -7.120239e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.436077e-003f, 2.388293e-002f, 6.155761e-002f, 1.098253e-001f, 4.635176e-001f, 3.117192e-001f, -6.561230e-001f, 3.933593e-001f, 2.149712e-001f, -6.462294e-001f, 5.959145e-001f, -5.673318e-001f, 1.000000e+000f, 2.499012e-001f, -3.921306e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.834325e-002f, -7.981686e-002f, 5.903163e-002f, 2.904234e-001f, -7.621302e-001f, 4.738309e-001f, -1.000000e+000f, 9.624784e-001f, 3.308448e-001f, -7.144665e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 5.050445e-002f, -2.108677e-002f, 1.136901e-001f, 1.171333e-001f, -6.479235e-002f, 6.015240e-002f, 2.536285e-001f, 3.346343e-001f, 1.203687e-001f, 4.792155e-001f, 4.524831e-001f, -1.000000e+000f, 6.153266e-001f, 2.231955e-001f, -6.617193e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.922992e-002f, -5.405953e-002f, 8.747503e-002f, 2.327243e-001f, -6.816912e-001f, 4.354574e-001f, -1.000000e+000f, 5.902035e-001f, 2.941522e-001f, -7.585234e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 1.349082e-002f, 5.757277e-002f, 7.588874e-002f, 8.551635e-002f, 4.135570e-001f, 1.683184e-001f, -6.758089e-002f, 4.420497e-001f, 1.325450e-001f, -4.540265e-002f, 4.322256e-001f, -1.000000e+000f, 6.356091e-001f, 2.281116e-001f, -6.733482e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.911116e-002f, -5.417033e-002f, 8.755425e-002f, 2.301106e-001f, -6.778116e-001f, 4.362757e-001f, -1.000000e+000f, 5.893940e-001f, 2.991844e-001f, -7.644694e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 5.015479e-003f, 3.694586e-002f, 6.805285e-002f, 6.436298e-002f, 3.584676e-001f, 3.743922e-001f, -9.025051e-001f, 5.782850e-001f, 2.712279e-001f, -7.361687e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 3.949257e-002f, -5.388819e-002f, 8.795296e-002f, 2.182352e-001f, -6.606453e-001f, 4.381148e-001f, -1.000000e+000f, 5.871410e-001f, 3.121938e-001f, -7.807120e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 1.839352e-003f, 2.214857e-002f, 6.669575e-002f, 3.721347e-002f, 2.728130e-001f, 3.644852e-001f, -9.187637e-001f, 5.929256e-001f, 3.003063e-001f, -7.748804e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -1.178575e-001f, 3.135978e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 1.088920e-002f, 3.257397e-002f, 7.539447e-002f, 8.327770e-002f, 2.771331e-001f, 3.190006e-001f, 5.071194e-002f, 3.277952e-001f, 4.871990e-001f, 7.710815e-002f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 4.119011e-002f, 4.864806e-002f, 8.264737e-002f, 8.683986e-002f, 4.167490e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.007773e-002f, 7.128226e-002f, 6.327182e-002f, 5.475204e-002f, 3.266492e-001f, 6.060883e-002f, -4.444388e-001f, 8.187939e-001f, 6.423066e-002f, -3.391262e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 4.250977e-002f, 2.623913e-003f, 8.008298e-002f, 2.609744e-002f, 2.284620e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 1.996080e-002f, 9.078806e-003f, 5.644430e-002f, 4.345087e-002f, -2.851012e-001f, 1.502508e-001f, 7.073246e-001f, 1.000000e+000f, 1.199589e-001f, 3.804561e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.857411e-003f, 3.005994e-002f, 5.914092e-002f, 1.194960e-001f, 4.884471e-001f, 4.534456e-001f, -1.000000e+000f, 8.049981e-001f, 1.224734e-001f, -4.930066e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.448701e-003f, -2.335376e-002f, 5.754518e-002f, 1.636423e-001f, -5.720182e-001f, 7.959709e-001f, -7.591077e-001f, 1.000000e+000f, 3.448684e-001f, -3.429434e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.956026e-002f, 3.320145e-002f, 7.763715e-002f, 1.108094e-001f, 3.214690e-001f, 4.735032e-001f, -1.000000e+000f, 6.440725e-001f, 1.381077e-001f, -5.255620e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 1.244177e-002f, -6.244478e-002f, 7.976357e-002f, 2.315109e-001f, -6.802922e-001f, 6.424348e-001f, -1.000000e+000f, 7.446239e-001f, 4.056131e-001f, -6.761831e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 6.663065e-003f, 4.035807e-002f, 7.402862e-002f, 1.303873e-001f, 4.921691e-001f, 2.852829e-001f, -5.716086e-001f, 3.325290e-001f, 1.524751e-001f, -5.369441e-001f, 5.291369e-001f, -4.925372e-001f, 1.000000e+000f, 1.819462e-001f, -4.135626e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.818686e-002f, -7.999667e-002f, 5.923233e-002f, 2.931077e-001f, -7.656198e-001f, 4.764845e-001f, -1.000000e+000f, 9.592690e-001f, 3.294633e-001f, -7.120239e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.436077e-003f, 2.388293e-002f, 6.155761e-002f, 1.098253e-001f, 4.635176e-001f, 3.117192e-001f, -6.561230e-001f, 3.933593e-001f, 2.149712e-001f, -6.462294e-001f, 5.959145e-001f, -5.673318e-001f, 1.000000e+000f, 2.499012e-001f, -3.921306e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.935605e-002f, -5.412704e-002f, 8.741472e-002f, 2.360937e-001f, -6.850645e-001f, 4.348191e-001f, -1.000000e+000f, 5.907613e-001f, 2.900272e-001f, -7.545142e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 1.790057e-002f, 6.058366e-002f, 7.686971e-002f, 1.022198e-001f, 4.155276e-001f, 1.653619e-001f, -6.132433e-002f, 4.354149e-001f, 1.308223e-001f, -3.127767e-002f, 4.319893e-001f, -1.000000e+000f, 6.373668e-001f, 2.240596e-001f, -6.674520e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.911116e-002f, -5.417033e-002f, 8.755425e-002f, 2.301106e-001f, -6.778116e-001f, 4.362757e-001f, -1.000000e+000f, 5.893940e-001f, 2.991844e-001f, -7.644694e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 5.015479e-003f, 3.694586e-002f, 6.805285e-002f, 6.436298e-002f, 3.584676e-001f, 3.743922e-001f, -9.025051e-001f, 5.782850e-001f, 2.712279e-001f, -7.361687e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.172116e-001f, 3.020024e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.007773e-002f, 7.128226e-002f, 6.327182e-002f, 5.475204e-002f, 3.266492e-001f, 6.060883e-002f, -4.444388e-001f, 8.187939e-001f, 6.423066e-002f, -3.391262e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 4.250977e-002f, 2.623913e-003f, 8.008298e-002f, 2.609744e-002f, 2.284620e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 1.996080e-002f, 9.078806e-003f, 5.644430e-002f, 4.345087e-002f, -2.851012e-001f, 1.502508e-001f, 7.073246e-001f, 1.000000e+000f, 1.199589e-001f, 3.804561e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 3.857411e-003f, 3.005994e-002f, 5.914092e-002f, 1.194960e-001f, 4.884471e-001f, 4.534456e-001f, -1.000000e+000f, 8.049981e-001f, 1.224734e-001f, -4.930066e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.129583e-003f, -1.894998e-003f, 5.566404e-002f, 1.327871e-001f, -5.109782e-001f, 5.901174e-001f, -7.963359e-002f, 1.000000e+000f, 3.057941e-001f, 7.071229e-002f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 4.214650e-002f, -8.917073e-002f, 6.077981e-002f, 1.151194e-001f, -4.798320e-001f, 3.880158e-001f, 4.494643e-001f, 8.243229e-001f, 1.390638e-001f, 3.805927e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.491738e-002f, -3.973597e-002f, 5.456316e-002f, 1.405809e-001f, -5.267778e-001f, 4.341532e-001f, 8.410024e-001f, 1.000000e+000f, 1.929882e-001f, 2.018310e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 1.571942e-003f, -1.644475e-002f, 6.348161e-002f, 5.781394e-002f, 3.400326e-001f, 2.489737e-001f, -3.171747e-001f, 6.680022e-001f, 2.652199e-001f, -4.689297e-001f, 4.890130e-001f, -1.000000e+000f, 5.957987e-001f, 2.676807e-001f, -7.119188e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 1.584382e-002f, -1.470251e-002f, 5.479298e-002f, 1.965626e-001f, -6.197945e-001f, 3.558588e-001f, -4.879949e-001f, 1.000000e+000f, 3.272462e-001f, -1.506265e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 8.092460e-003f, -3.270163e-002f, 6.266443e-002f, 4.159911e-002f, 2.884392e-001f, 2.738038e-001f, -3.906357e-001f, 6.806674e-001f, 3.135599e-001f, -5.315462e-001f, 4.887266e-001f, -1.000000e+000f, 5.781216e-001f, 3.305154e-001f, -7.937990e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.823051e-002f, -8.006825e-002f, 5.928124e-002f, 2.929706e-001f, -7.654443e-001f, 4.755821e-001f, -1.000000e+000f, 9.584258e-001f, 3.299433e-001f, -7.127971e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 3.281286e-003f, 2.701757e-002f, 5.654050e-002f, 1.034666e-001f, 4.548990e-001f, 3.168281e-001f, -6.853489e-001f, 4.184239e-001f, 2.409492e-001f, -6.796510e-001f, 5.883672e-001f, -5.609745e-001f, 1.000000e+000f, 2.516455e-001f, -3.393285e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 3.935605e-002f, -5.412704e-002f, 8.741472e-002f, 2.360937e-001f, -6.850645e-001f, 4.348191e-001f, -1.000000e+000f, 5.907613e-001f, 2.900272e-001f, -7.545142e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 1.790057e-002f, 6.058366e-002f, 7.686971e-002f, 1.022198e-001f, 4.155276e-001f, 1.653619e-001f, -6.132433e-002f, 4.354149e-001f, 1.308223e-001f, -3.127767e-002f, 4.319893e-001f, -1.000000e+000f, 6.373668e-001f, 2.240596e-001f, -6.674520e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 3.920678e-002f, -5.419651e-002f, 8.764655e-002f, 2.287294e-001f, -6.756040e-001f, 4.364044e-001f, -1.000000e+000f, 5.891486e-001f, 3.005288e-001f, -7.664340e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 3.873073e-003f, 3.246082e-002f, 6.803167e-002f, 5.426536e-002f, 3.294377e-001f, 3.730043e-001f, -9.016627e-001f, 5.784206e-001f, 2.720704e-001f, -7.376558e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 3.956871e-002f, -5.405410e-002f, 8.801505e-002f, 2.184546e-001f, -6.609116e-001f, 4.380626e-001f, -1.000000e+000f, 5.872450e-001f, 3.119963e-001f, -7.804315e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.693219e-003f, 2.617165e-002f, 6.505864e-002f, 4.858374e-002f, 3.115796e-001f, 3.890998e-001f, -9.606689e-001f, 6.038958e-001f, 3.179768e-001f, -7.974199e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -1.500000e-001f, 0.000000e+000f, -1.500000e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.164332e-001f, 2.908869e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 2.532429e-003f, 1.100857e-002f, 5.529649e-002f, 1.148810e-001f, -4.503823e-001f, 4.303386e-001f, 2.326293e-001f, 1.000000e+000f, 2.395275e-001f, 2.946902e-001f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 3.365590e-003f, 3.011927e-002f, 7.025044e-002f, 1.504733e-001f, 5.219468e-001f, 4.132862e-001f, -1.000000e+000f, 7.102409e-001f, 2.167677e-001f, -6.540257e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 1.683125e-002f, -4.823456e-002f, 7.766156e-002f, 2.070712e-001f, -6.435334e-001f, 4.205635e-001f, -1.000000e+000f, 7.245733e-001f, 3.311515e-001f, -7.009104e-001f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 2.882672e-002f, 1.673035e-002f, 8.196783e-002f, 3.150075e-002f, 2.508716e-001f, 4.845694e-001f, -1.000000e+000f, 6.125799e-001f, 2.030553e-001f, -6.086905e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 2.521775e-002f, -3.970872e-002f, 5.465088e-002f, 1.338550e-001f, -5.173032e-001f, 4.486119e-001f, 8.740160e-001f, 1.000000e+000f, 1.899369e-001f, 2.105272e-001f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 9.202862e-003f, -3.091956e-002f, 5.747104e-002f, 4.817656e-002f, 3.078156e-001f, 1.965672e-001f, -2.629499e-001f, 7.662117e-001f, 2.593347e-001f, -4.663945e-001f, 4.888645e-001f, -1.000000e+000f, 5.826109e-001f, 3.138189e-001f, -7.711113e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 2.834325e-002f, -7.981686e-002f, 5.903163e-002f, 2.904234e-001f, -7.621302e-001f, 4.738309e-001f, -1.000000e+000f, 9.624784e-001f, 3.308448e-001f, -7.144665e-001f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 5.050445e-002f, -2.108677e-002f, 1.136901e-001f, 1.171333e-001f, -6.479235e-002f, 6.015240e-002f, 2.536285e-001f, 3.346343e-001f, 1.203687e-001f, 4.792155e-001f, 4.524831e-001f, -1.000000e+000f, 6.153266e-001f, 2.231955e-001f, -6.617193e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 3.927106e-002f, -5.333575e-002f, 8.772651e-002f, 2.184129e-001f, -6.607970e-001f, 4.376231e-001f, -1.000000e+000f, 5.875467e-001f, 3.106123e-001f, -7.792144e-001f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 3.726315e-003f, 3.160935e-002f, 6.772102e-002f, 5.322312e-002f, 3.261494e-001f, 3.652018e-001f, -8.959162e-001f, 5.818200e-001f, 2.710460e-001f, -7.359992e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 4.256150e-002f, -5.309431e-002f, 9.291421e-002f, 1.700046e-001f, -5.830942e-001f, 4.632029e-001f, -1.000000e+000f, 5.556814e-001f, 3.988433e-001f, -8.812315e-001f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 2.355426e-003f, 2.541605e-002f, 6.903659e-002f, 3.861170e-002f, 2.765512e-001f, 4.077379e-001f, -9.576099e-001f, 5.649598e-001f, 3.688580e-001f, -8.584627e-001f,
  0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.155343e-001f, 2.802292e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 3.372324e-003f, 4.230228e-002f, 1.349354e-001f, 9.557892e-002f, 4.338984e-001f,
  0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 5.966763e-003f, 4.090681e-002f, 7.418988e-002f, 2.338722e-002f, 1.666745e-001f, 5.911711e-001f, -2.683386e-001f, 7.279034e-001f, 4.044485e-001f, -1.839113e-001f, 0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 4.119085e-002f, 4.864444e-002f, 8.264605e-002f, 8.683320e-002f, 4.167330e-001f,
  0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 2.192747e-002f, 3.314890e-002f, 5.089781e-002f, 2.086210e-002f, -2.012560e-001f, 9.105306e-002f, -1.872651e-001f, 1.000000e+000f, 8.357426e-002f, 3.271724e-002f, 0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 2.836916e-002f, -4.163006e-002f, 5.243396e-002f, 1.662686e-002f, -1.812376e-001f, 1.533247e-001f, 7.531196e-001f, 9.270391e-001f, 2.021869e-001f, 5.877720e-001f,
  0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 1.164506e-002f, -6.036230e-002f, 7.937152e-002f, 2.267318e-001f, -6.733484e-001f, 6.463595e-001f, -1.000000e+000f, 7.460308e-001f, 4.047813e-001f, -6.713483e-001f, 0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 6.639734e-003f, 4.120495e-002f, 6.640480e-002f, 1.707891e-001f, 5.579531e-001f, 3.035511e-001f, -6.168889e-001f, 3.605808e-001f, 1.804257e-001f, -6.005941e-001f, 6.534524e-001f, -5.996834e-001f, 1.000000e+000f, 2.735300e-001f, -4.317503e-001f,
  0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 3.921580e-002f, -5.458886e-002f, 8.783975e-002f, 2.306740e-001f, -6.787808e-001f, 4.362332e-001f, -1.000000e+000f, 5.893557e-001f, 2.984662e-001f, -7.636187e-001f, 0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 1.401373e-002f, 5.034126e-002f, 6.815967e-002f, 1.350783e-001f, 4.643539e-001f, 4.508766e-001f, -1.000000e+000f, 6.020088e-001f, 3.150616e-001f, -7.768351e-001f,
  0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 4.284654e-002f, -5.258102e-002f, 9.303734e-002f, 1.673508e-001f, -5.785338e-001f, 4.634823e-001f, -1.000000e+000f, 5.547339e-001f, 4.008231e-001f, -8.840223e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.145265e-001f, 2.700085e-001f, 0.000000e+000f, -1.094468e-001f, 2.220312e-003f, 2.494521e-002f, 7.177958e-002f, 3.309676e-002f, 2.534871e-001f, 3.926765e-001f, -9.222518e-001f, 5.431760e-001f, 3.694698e-001f, -8.595218e-001f,
  // Total number of coefficients: 10390
  // Maximum number of elevation coefficients: 20



   // Full coefficients
   // 10 degrees loudspeakers
   // 16000 Hz sample rate
    // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:28:16 1999
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.789203e-003f, 1.546738e-002f, 5.935646e-002f, 3.459265e-002f, 2.628312e-001f, 1.564931e-001f, -7.701739e-002f, 4.720565e-001f, 1.779377e-001f, -7.437930e-002f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 2.541319e-002f, 8.988804e-002f, 8.079987e-002f, 1.428670e-001f, 4.844841e-001f, 4.201266e-001f, -2.106542e-001f, 6.833703e-001f, 1.623645e-001f, 2.386773e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 4.822763e-003f, -1.326109e-002f, 5.422131e-002f, 3.853727e-002f, -2.775743e-001f, 4.315691e-001f, 1.906800e-001f, 8.080869e-001f, 1.312523e-001f, -2.915665e-002f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.344301e-002f, -7.997782e-002f, 7.907871e-002f, 8.541637e-003f, 9.960781e-002f, 3.670626e-001f, 1.000000e+000f, 7.189871e-001f, 1.244521e-001f, 4.755610e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 8.109493e-003f, 4.394897e-003f, 4.812018e-002f, 5.762571e-002f, -3.394870e-001f, 6.017322e-001f, -4.733226e-001f, 1.000000e+000f, 1.747351e-001f, -1.048615e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 4.769457e-002f, -9.641924e-002f, 6.682177e-002f, 1.699952e-001f, -5.323364e-001f, 5.108231e-002f, 4.311687e-001f, 9.106379e-001f, 2.076631e-001f, 4.016092e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.049199e-003f, -1.665115e-002f, 4.387588e-002f, 2.059523e-001f, -6.392838e-001f, 7.271041e-001f, -8.937897e-001f, 1.000000e+000f, 3.537170e-001f, -3.759615e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 6.167052e-003f, 3.823670e-002f, 7.379391e-002f, 1.952944e-001f, 3.629733e-001f, 3.333617e-001f, -7.072794e-001f, 4.183593e-001f, 2.488743e-001f, -6.910059e-001f, 6.585826e-001f, -3.134024e-001f, 1.000000e+000f, 2.608507e-001f, -6.320531e-002f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 8.087909e-003f, -4.531316e-002f, 6.398582e-002f, 2.338883e-001f, -6.838251e-001f, 6.454515e-001f, -1.000000e+000f, 7.595433e-001f, 3.830444e-001f, -6.211068e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 1.171471e-002f, 7.896051e-002f, 1.344408e-001f, 1.796282e-001f, 3.503814e-001f, 2.694731e-001f, -1.747014e-001f, 3.952606e-001f, 2.221938e-001f, -9.974643e-002f, 4.705082e-001f, -1.000000e+000f, 5.797298e-001f, 2.452304e-001f, -6.946097e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 2.667199e-002f, -2.318107e-002f, 6.304339e-002f, 2.153130e-001f, -6.558754e-001f, 5.210953e-001f, -1.000000e+000f, 7.807488e-001f, 3.130873e-001f, -4.496848e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.023672e-002f, -4.548508e-002f, 5.686701e-002f, 8.457110e-002f, -4.035510e-001f, 4.875381e-001f, -1.000000e+000f, 5.497322e-001f, 1.758725e-001f, -5.898953e-001f, 1.175400e-001f, 6.853884e-001f, 1.000000e+000f, 1.943138e-001f, 3.687316e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 4.863123e-002f, -1.108947e-001f, 8.483867e-002f, 3.395580e-001f, -8.229428e-001f, 4.208149e-001f, -1.000000e+000f, 6.182891e-001f, 3.805103e-001f, -8.272781e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 4.224717e-003f, 4.119778e-002f, 1.091393e-001f, 2.418142e-001f, 3.922533e-001f, 3.496416e-001f, -5.409262e-001f, 4.904184e-001f, 2.838894e-001f, -5.634082e-001f, 4.795406e-001f, -1.000000e+000f, 5.550680e-001f, 2.931130e-001f, -7.544399e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 4.856769e-002f, -1.100086e-001f, 8.268340e-002f, 3.422325e-001f, -8.266568e-001f, 4.095874e-001f, -1.000000e+000f, 6.314618e-001f, 3.777708e-001f, -8.217574e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.365205e-002f, -1.001940e-001f, 9.308769e-002f, 2.435566e-001f, -6.954549e-001f, 4.729013e-001f, -1.000000e+000f, 5.355778e-001f, 4.292289e-001f, -9.211620e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 2.163201e-003f, 2.704874e-002f, 9.374599e-002f, 8.613035e-002f, 3.563524e-001f, 3.196494e-001f, -4.810047e-001f, 4.903620e-001f, 3.037026e-001f, -4.873133e-001f, 4.516860e-001f, -1.000000e+000f, 5.767510e-001f, 3.293189e-001f, -8.063741e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.378708e-002f, -1.002906e-001f, 9.311874e-002f, 2.434457e-001f, -6.949522e-001f, 4.732055e-001f, -1.000000e+000f, 5.351543e-001f, 4.303415e-001f, -9.224370e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.689194e-003f, 3.402992e-002f, 8.180463e-002f, 7.888193e-002f, 3.807911e-001f, 2.973585e-001f, -4.551251e-001f, 4.946681e-001f, 2.967789e-001f, -4.503729e-001f, 4.436302e-001f, -1.000000e+000f, 5.806836e-001f, 3.431887e-001f, -8.258677e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.378124e-002f, -1.003106e-001f, 9.312284e-002f, 2.435880e-001f, -6.950806e-001f, 4.732226e-001f, -1.000000e+000f, 5.351213e-001f, 4.304268e-001f, -9.225432e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 2.172752e-003f, -1.495178e-002f, 7.923475e-002f, 9.107776e-003f, 7.608867e-002f, 4.442370e-001f, -1.000000e+000f, 5.688183e-001f, 3.929606e-001f, -8.842228e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -4.835058e-002f, 2.331537e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.789203e-003f, 1.546738e-002f, 5.935646e-002f, 3.459265e-002f, 2.628312e-001f, 1.564931e-001f, -7.701739e-002f, 4.720565e-001f, 1.779377e-001f, -7.437930e-002f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 2.541319e-002f, 8.988804e-002f, 8.079987e-002f, 1.428670e-001f, 4.844841e-001f, 4.201266e-001f, -2.106542e-001f, 6.833703e-001f, 1.623645e-001f, 2.386773e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 2.717854e-002f, 4.402757e-002f, 4.597927e-002f, 1.213962e-002f, 1.558170e-001f, 2.757486e-001f, -8.683942e-001f, 8.881950e-001f, 1.604470e-001f, -5.073609e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 4.567265e-002f, -5.575740e-002f, 7.251150e-002f, 2.598562e-002f, 1.044443e-001f, 3.222510e-001f, 1.000000e+000f, 7.761806e-001f, 1.667196e-001f, 5.610236e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 8.109493e-003f, 4.394897e-003f, 4.812018e-002f, 5.762571e-002f, -3.394870e-001f, 6.017322e-001f, -4.733226e-001f, 1.000000e+000f, 1.747351e-001f, -1.048615e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 4.769457e-002f, -9.641924e-002f, 6.682177e-002f, 1.699952e-001f, -5.323364e-001f, 5.108231e-002f, 4.311687e-001f, 9.106379e-001f, 2.076631e-001f, 4.016092e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 2.536582e-002f, -2.997739e-002f, 5.182545e-002f, 7.825799e-002f, -3.944224e-001f, 4.935787e-001f, 1.000000e+000f, 8.863761e-001f, 1.462193e-001f, 3.499382e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 4.738592e-002f, -1.058407e-001f, 7.119735e-002f, 1.797067e-001f, -5.995089e-001f, 3.391774e-002f, 3.382781e-001f, 8.434673e-001f, 2.405009e-001f, 4.227632e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.049199e-003f, -1.665115e-002f, 4.387588e-002f, 2.059523e-001f, -6.392838e-001f, 7.271041e-001f, -8.937897e-001f, 1.000000e+000f, 3.537170e-001f, -3.759615e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 6.167052e-003f, 3.823670e-002f, 7.379391e-002f, 1.952944e-001f, 3.629733e-001f, 3.333617e-001f, -7.072794e-001f, 4.183593e-001f, 2.488743e-001f, -6.910059e-001f, 6.585826e-001f, -3.134024e-001f, 1.000000e+000f, 2.608507e-001f, -6.320531e-002f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 4.450585e-002f, 4.008419e-002f, 8.274264e-002f, 2.325279e-001f, 2.212684e-001f, 1.816036e-001f, -5.370482e-001f, 5.876603e-001f, 2.540291e-001f, -7.063439e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 7.509740e-002f, -8.884797e-002f, 1.426722e-001f, 9.866570e-002f, -1.837932e-001f, 4.912615e-002f, 2.736278e-001f, 3.880290e-001f, 1.919676e-001f, 3.833767e-001f, 4.796348e-001f, -1.000000e+000f, 5.593396e-001f, 2.580723e-001f, -7.113873e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 2.667199e-002f, -2.318107e-002f, 6.304339e-002f, 2.153130e-001f, -6.558754e-001f, 5.210953e-001f, -1.000000e+000f, 7.807488e-001f, 3.130873e-001f, -4.496848e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.023672e-002f, -4.548508e-002f, 5.686701e-002f, 8.457110e-002f, -4.035510e-001f, 4.875381e-001f, -1.000000e+000f, 5.497322e-001f, 1.758725e-001f, -5.898953e-001f, 1.175400e-001f, 6.853884e-001f, 1.000000e+000f, 1.943138e-001f, 3.687316e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 4.863123e-002f, -1.108947e-001f, 8.483867e-002f, 3.395580e-001f, -8.229428e-001f, 4.208149e-001f, -1.000000e+000f, 6.182891e-001f, 3.805103e-001f, -8.272781e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 4.224717e-003f, 4.119778e-002f, 1.091393e-001f, 2.418142e-001f, 3.922533e-001f, 3.496416e-001f, -5.409262e-001f, 4.904184e-001f, 2.838894e-001f, -5.634082e-001f, 4.795406e-001f, -1.000000e+000f, 5.550680e-001f, 2.931130e-001f, -7.544399e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 4.856769e-002f, -1.100086e-001f, 8.268340e-002f, 3.422325e-001f, -8.266568e-001f, 4.095874e-001f, -1.000000e+000f, 6.314618e-001f, 3.777708e-001f, -8.217574e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.361546e-002f, -9.969547e-002f, 9.309433e-002f, 2.402215e-001f, -6.922462e-001f, 4.732585e-001f, -1.000000e+000f, 5.354124e-001f, 4.293725e-001f, -9.210170e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.066667e-003f, 2.976254e-002f, 9.560355e-002f, 9.846724e-002f, 3.659859e-001f, 3.314623e-001f, -4.588150e-001f, 4.869792e-001f, 3.180877e-001f, -4.591687e-001f, 4.581911e-001f, -1.000000e+000f, 5.699256e-001f, 3.461769e-001f, -8.232519e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.378708e-002f, -1.002906e-001f, 9.311874e-002f, 2.434457e-001f, -6.949522e-001f, 4.732055e-001f, -1.000000e+000f, 5.351543e-001f, 4.303415e-001f, -9.224370e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.689194e-003f, 3.402992e-002f, 8.180463e-002f, 7.888193e-002f, 3.807911e-001f, 2.973585e-001f, -4.551251e-001f, 4.946681e-001f, 2.967789e-001f, -4.503729e-001f, 4.436302e-001f, -1.000000e+000f, 5.806836e-001f, 3.431887e-001f, -8.258677e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.378821e-002f, -1.002959e-001f, 9.311554e-002f, 2.435141e-001f, -6.950163e-001f, 4.732051e-001f, -1.000000e+000f, 5.351539e-001f, 4.303470e-001f, -9.224455e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.861084e-004f, 9.921124e-003f, 7.960893e-002f, 3.226435e-002f, 2.377374e-001f, 2.249527e-001f, -4.171233e-001f, 5.000445e-001f, 2.272769e-001f, -4.148438e-001f, 4.422770e-001f, -1.000000e+000f, 5.801915e-001f, 3.519613e-001f, -8.368205e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.378837e-002f, -1.003408e-001f, 9.312979e-002f, 2.437284e-001f, -6.951954e-001f, 4.732272e-001f, -1.000000e+000f, 5.351049e-001f, 4.304825e-001f, -9.226168e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 1.905315e-003f, -6.028417e-003f, 7.816171e-002f, 5.877340e-003f, 1.069720e-001f, 4.459624e-001f, -1.000000e+000f, 5.615719e-001f, 4.030116e-001f, -8.977196e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -7.352019e-002f, 2.808727e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.789203e-003f, 1.546738e-002f, 5.935646e-002f, 3.459265e-002f, 2.628312e-001f, 1.564931e-001f, -7.701739e-002f, 4.720565e-001f, 1.779377e-001f, -7.437930e-002f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.541319e-002f, 8.988804e-002f, 8.079987e-002f, 1.428670e-001f, 4.844841e-001f, 4.201266e-001f, -2.106542e-001f, 6.833703e-001f, 1.623645e-001f, 2.386773e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.717854e-002f, 4.402757e-002f, 4.597927e-002f, 1.213962e-002f, 1.558170e-001f, 2.757486e-001f, -8.683942e-001f, 8.881950e-001f, 1.604470e-001f, -5.073609e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 4.567265e-002f, -5.575740e-002f, 7.251150e-002f, 2.598562e-002f, 1.044443e-001f, 3.222510e-001f, 1.000000e+000f, 7.761806e-001f, 1.667196e-001f, 5.610236e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 4.822763e-003f, -1.326109e-002f, 5.422131e-002f, 3.853727e-002f, -2.775743e-001f, 4.315691e-001f, 1.906800e-001f, 8.080869e-001f, 1.312523e-001f, -2.915665e-002f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.344301e-002f, -7.997782e-002f, 7.907871e-002f, 8.541637e-003f, 9.960781e-002f, 3.670626e-001f, 1.000000e+000f, 7.189871e-001f, 1.244521e-001f, 4.755610e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 8.109493e-003f, 4.394897e-003f, 4.812018e-002f, 5.762571e-002f, -3.394870e-001f, 6.017322e-001f, -4.733226e-001f, 1.000000e+000f, 1.747351e-001f, -1.048615e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 4.769457e-002f, -9.641924e-002f, 6.682177e-002f, 1.699952e-001f, -5.323364e-001f, 5.108231e-002f, 4.311687e-001f, 9.106379e-001f, 2.076631e-001f, 4.016092e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.536582e-002f, -2.997739e-002f, 5.182545e-002f, 7.825799e-002f, -3.944224e-001f, 4.935787e-001f, 1.000000e+000f, 8.863761e-001f, 1.462193e-001f, 3.499382e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 4.738592e-002f, -1.058407e-001f, 7.119735e-002f, 1.797067e-001f, -5.995089e-001f, 3.391774e-002f, 3.382781e-001f, 8.434673e-001f, 2.405009e-001f, 4.227632e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.049199e-003f, -1.665115e-002f, 4.387588e-002f, 2.059523e-001f, -6.392838e-001f, 7.271041e-001f, -8.937897e-001f, 1.000000e+000f, 3.537170e-001f, -3.759615e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 6.167052e-003f, 3.823670e-002f, 7.379391e-002f, 1.952944e-001f, 3.629733e-001f, 3.333617e-001f, -7.072794e-001f, 4.183593e-001f, 2.488743e-001f, -6.910059e-001f, 6.585826e-001f, -3.134024e-001f, 1.000000e+000f, 2.608507e-001f, -6.320531e-002f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 8.087909e-003f, -4.531316e-002f, 6.398582e-002f, 2.338883e-001f, -6.838251e-001f, 6.454515e-001f, -1.000000e+000f, 7.595433e-001f, 3.830444e-001f, -6.211068e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 1.171471e-002f, 7.896051e-002f, 1.344408e-001f, 1.796282e-001f, 3.503814e-001f, 2.694731e-001f, -1.747014e-001f, 3.952606e-001f, 2.221938e-001f, -9.974643e-002f, 4.705082e-001f, -1.000000e+000f, 5.797298e-001f, 2.452304e-001f, -6.946097e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 4.450585e-002f, 4.008419e-002f, 8.274264e-002f, 2.325279e-001f, 2.212684e-001f, 1.816036e-001f, -5.370482e-001f, 5.876603e-001f, 2.540291e-001f, -7.063439e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 7.509740e-002f, -8.884797e-002f, 1.426722e-001f, 9.866570e-002f, -1.837932e-001f, 4.912615e-002f, 2.736278e-001f, 3.880290e-001f, 1.919676e-001f, 3.833767e-001f, 4.796348e-001f, -1.000000e+000f, 5.593396e-001f, 2.580723e-001f, -7.113873e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.667199e-002f, -2.318107e-002f, 6.304339e-002f, 2.153130e-001f, -6.558754e-001f, 5.210953e-001f, -1.000000e+000f, 7.807488e-001f, 3.130873e-001f, -4.496848e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.023672e-002f, -4.548508e-002f, 5.686701e-002f, 8.457110e-002f, -4.035510e-001f, 4.875381e-001f, -1.000000e+000f, 5.497322e-001f, 1.758725e-001f, -5.898953e-001f, 1.175400e-001f, 6.853884e-001f, 1.000000e+000f, 1.943138e-001f, 3.687316e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.516133e-002f, -9.321969e-002f, 8.656552e-002f, 3.004109e-001f, -7.744701e-001f, 5.487076e-001f, -1.000000e+000f, 6.081643e-001f, 4.328193e-001f, -8.186486e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.013463e-002f, -8.139416e-002f, 8.038805e-002f, 1.661629e-001f, -5.764611e-001f, 5.081267e-002f, 3.723167e-001f, 6.907266e-001f, 2.258888e-001f, 3.879672e-001f, 4.917666e-001f, -1.000000e+000f, 5.453885e-001f, 2.342674e-001f, -6.119937e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 4.863123e-002f, -1.108947e-001f, 8.483867e-002f, 3.395580e-001f, -8.229428e-001f, 4.208149e-001f, -1.000000e+000f, 6.182891e-001f, 3.805103e-001f, -8.272781e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 4.224717e-003f, 4.119778e-002f, 1.091393e-001f, 2.418142e-001f, 3.922533e-001f, 3.496416e-001f, -5.409262e-001f, 4.904184e-001f, 2.838894e-001f, -5.634082e-001f, 4.795406e-001f, -1.000000e+000f, 5.550680e-001f, 2.931130e-001f, -7.544399e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 4.856769e-002f, -1.100086e-001f, 8.268340e-002f, 3.422325e-001f, -8.266568e-001f, 4.095874e-001f, -1.000000e+000f, 6.314618e-001f, 3.777708e-001f, -8.217574e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.361546e-002f, -9.969547e-002f, 9.309433e-002f, 2.402215e-001f, -6.922462e-001f, 4.732585e-001f, -1.000000e+000f, 5.354124e-001f, 4.293725e-001f, -9.210170e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.066667e-003f, 2.976254e-002f, 9.560355e-002f, 9.846724e-002f, 3.659859e-001f, 3.314623e-001f, -4.588150e-001f, 4.869792e-001f, 3.180877e-001f, -4.591687e-001f, 4.581911e-001f, -1.000000e+000f, 5.699256e-001f, 3.461769e-001f, -8.232519e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.365205e-002f, -1.001940e-001f, 9.308769e-002f, 2.435566e-001f, -6.954549e-001f, 4.729013e-001f, -1.000000e+000f, 5.355778e-001f, 4.292289e-001f, -9.211620e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.163201e-003f, 2.704874e-002f, 9.374599e-002f, 8.613035e-002f, 3.563524e-001f, 3.196494e-001f, -4.810047e-001f, 4.903620e-001f, 3.037026e-001f, -4.873133e-001f, 4.516860e-001f, -1.000000e+000f, 5.767510e-001f, 3.293189e-001f, -8.063741e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.378708e-002f, -1.002906e-001f, 9.311874e-002f, 2.434457e-001f, -6.949522e-001f, 4.732055e-001f, -1.000000e+000f, 5.351543e-001f, 4.303415e-001f, -9.224370e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.689194e-003f, 3.402992e-002f, 8.180463e-002f, 7.888193e-002f, 3.807911e-001f, 2.973585e-001f, -4.551251e-001f, 4.946681e-001f, 2.967789e-001f, -4.503729e-001f, 4.436302e-001f, -1.000000e+000f, 5.806836e-001f, 3.431887e-001f, -8.258677e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.378821e-002f, -1.002959e-001f, 9.311554e-002f, 2.435141e-001f, -6.950163e-001f, 4.732051e-001f, -1.000000e+000f, 5.351539e-001f, 4.303470e-001f, -9.224455e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.861084e-004f, 9.921124e-003f, 7.960893e-002f, 3.226435e-002f, 2.377374e-001f, 2.249527e-001f, -4.171233e-001f, 5.000445e-001f, 2.272769e-001f, -4.148438e-001f, 4.422770e-001f, -1.000000e+000f, 5.801915e-001f, 3.519613e-001f, -8.368205e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.378124e-002f, -1.003106e-001f, 9.312284e-002f, 2.435880e-001f, -6.950806e-001f, 4.732226e-001f, -1.000000e+000f, 5.351213e-001f, 4.304268e-001f, -9.225432e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 2.172752e-003f, -1.495178e-002f, 7.923475e-002f, 9.107776e-003f, 7.608867e-002f, 4.442370e-001f, -1.000000e+000f, 5.688183e-001f, 3.929606e-001f, -8.842228e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.378837e-002f, -1.003408e-001f, 9.312979e-002f, 2.437284e-001f, -6.951954e-001f, 4.732272e-001f, -1.000000e+000f, 5.351049e-001f, 4.304825e-001f, -9.226168e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 1.905315e-003f, -6.028417e-003f, 7.816171e-002f, 5.877340e-003f, 1.069720e-001f, 4.459624e-001f, -1.000000e+000f, 5.615719e-001f, 4.030116e-001f, -8.977196e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.067504e-001f, 3.394038e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.789203e-003f, 1.546738e-002f, 5.935646e-002f, 3.459265e-002f, 2.628312e-001f, 1.564931e-001f, -7.701739e-002f, 4.720565e-001f, 1.779377e-001f, -7.437930e-002f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.541319e-002f, 8.988804e-002f, 8.079987e-002f, 1.428670e-001f, 4.844841e-001f, 4.201266e-001f, -2.106542e-001f, 6.833703e-001f, 1.623645e-001f, 2.386773e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.717854e-002f, 4.402757e-002f, 4.597927e-002f, 1.213962e-002f, 1.558170e-001f, 2.757486e-001f, -8.683942e-001f, 8.881950e-001f, 1.604470e-001f, -5.073609e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 4.567265e-002f, -5.575740e-002f, 7.251150e-002f, 2.598562e-002f, 1.044443e-001f, 3.222510e-001f, 1.000000e+000f, 7.761806e-001f, 1.667196e-001f, 5.610236e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 4.822763e-003f, -1.326109e-002f, 5.422131e-002f, 3.853727e-002f, -2.775743e-001f, 4.315691e-001f, 1.906800e-001f, 8.080869e-001f, 1.312523e-001f, -2.915665e-002f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.344301e-002f, -7.997782e-002f, 7.907871e-002f, 8.541637e-003f, 9.960781e-002f, 3.670626e-001f, 1.000000e+000f, 7.189871e-001f, 1.244521e-001f, 4.755610e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 8.109493e-003f, 4.394897e-003f, 4.812018e-002f, 5.762571e-002f, -3.394870e-001f, 6.017322e-001f, -4.733226e-001f, 1.000000e+000f, 1.747351e-001f, -1.048615e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 4.769457e-002f, -9.641924e-002f, 6.682177e-002f, 1.699952e-001f, -5.323364e-001f, 5.108231e-002f, 4.311687e-001f, 9.106379e-001f, 2.076631e-001f, 4.016092e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.536582e-002f, -2.997739e-002f, 5.182545e-002f, 7.825799e-002f, -3.944224e-001f, 4.935787e-001f, 1.000000e+000f, 8.863761e-001f, 1.462193e-001f, 3.499382e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 4.738592e-002f, -1.058407e-001f, 7.119735e-002f, 1.797067e-001f, -5.995089e-001f, 3.391774e-002f, 3.382781e-001f, 8.434673e-001f, 2.405009e-001f, 4.227632e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.049199e-003f, -1.665115e-002f, 4.387588e-002f, 2.059523e-001f, -6.392838e-001f, 7.271041e-001f, -8.937897e-001f, 1.000000e+000f, 3.537170e-001f, -3.759615e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 6.167052e-003f, 3.823670e-002f, 7.379391e-002f, 1.952944e-001f, 3.629733e-001f, 3.333617e-001f, -7.072794e-001f, 4.183593e-001f, 2.488743e-001f, -6.910059e-001f, 6.585826e-001f, -3.134024e-001f, 1.000000e+000f, 2.608507e-001f, -6.320531e-002f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 8.087909e-003f, -4.531316e-002f, 6.398582e-002f, 2.338883e-001f, -6.838251e-001f, 6.454515e-001f, -1.000000e+000f, 7.595433e-001f, 3.830444e-001f, -6.211068e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 1.171471e-002f, 7.896051e-002f, 1.344408e-001f, 1.796282e-001f, 3.503814e-001f, 2.694731e-001f, -1.747014e-001f, 3.952606e-001f, 2.221938e-001f, -9.974643e-002f, 4.705082e-001f, -1.000000e+000f, 5.797298e-001f, 2.452304e-001f, -6.946097e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 4.450585e-002f, 4.008419e-002f, 8.274264e-002f, 2.325279e-001f, 2.212684e-001f, 1.816036e-001f, -5.370482e-001f, 5.876603e-001f, 2.540291e-001f, -7.063439e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 7.509740e-002f, -8.884797e-002f, 1.426722e-001f, 9.866570e-002f, -1.837932e-001f, 4.912615e-002f, 2.736278e-001f, 3.880290e-001f, 1.919676e-001f, 3.833767e-001f, 4.796348e-001f, -1.000000e+000f, 5.593396e-001f, 2.580723e-001f, -7.113873e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.667199e-002f, -2.318107e-002f, 6.304339e-002f, 2.153130e-001f, -6.558754e-001f, 5.210953e-001f, -1.000000e+000f, 7.807488e-001f, 3.130873e-001f, -4.496848e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.023672e-002f, -4.548508e-002f, 5.686701e-002f, 8.457110e-002f, -4.035510e-001f, 4.875381e-001f, -1.000000e+000f, 5.497322e-001f, 1.758725e-001f, -5.898953e-001f, 1.175400e-001f, 6.853884e-001f, 1.000000e+000f, 1.943138e-001f, 3.687316e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.516133e-002f, -9.321969e-002f, 8.656552e-002f, 3.004109e-001f, -7.744701e-001f, 5.487076e-001f, -1.000000e+000f, 6.081643e-001f, 4.328193e-001f, -8.186486e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.013463e-002f, -8.139416e-002f, 8.038805e-002f, 1.661629e-001f, -5.764611e-001f, 5.081267e-002f, 3.723167e-001f, 6.907266e-001f, 2.258888e-001f, 3.879672e-001f, 4.917666e-001f, -1.000000e+000f, 5.453885e-001f, 2.342674e-001f, -6.119937e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 4.863123e-002f, -1.108947e-001f, 8.483867e-002f, 3.395580e-001f, -8.229428e-001f, 4.208149e-001f, -1.000000e+000f, 6.182891e-001f, 3.805103e-001f, -8.272781e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 4.224717e-003f, 4.119778e-002f, 1.091393e-001f, 2.418142e-001f, 3.922533e-001f, 3.496416e-001f, -5.409262e-001f, 4.904184e-001f, 2.838894e-001f, -5.634082e-001f, 4.795406e-001f, -1.000000e+000f, 5.550680e-001f, 2.931130e-001f, -7.544399e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 4.856769e-002f, -1.100086e-001f, 8.268340e-002f, 3.422325e-001f, -8.266568e-001f, 4.095874e-001f, -1.000000e+000f, 6.314618e-001f, 3.777708e-001f, -8.217574e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.361546e-002f, -9.969547e-002f, 9.309433e-002f, 2.402215e-001f, -6.922462e-001f, 4.732585e-001f, -1.000000e+000f, 5.354124e-001f, 4.293725e-001f, -9.210170e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.066667e-003f, 2.976254e-002f, 9.560355e-002f, 9.846724e-002f, 3.659859e-001f, 3.314623e-001f, -4.588150e-001f, 4.869792e-001f, 3.180877e-001f, -4.591687e-001f, 4.581911e-001f, -1.000000e+000f, 5.699256e-001f, 3.461769e-001f, -8.232519e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.365205e-002f, -1.001940e-001f, 9.308769e-002f, 2.435566e-001f, -6.954549e-001f, 4.729013e-001f, -1.000000e+000f, 5.355778e-001f, 4.292289e-001f, -9.211620e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.163201e-003f, 2.704874e-002f, 9.374599e-002f, 8.613035e-002f, 3.563524e-001f, 3.196494e-001f, -4.810047e-001f, 4.903620e-001f, 3.037026e-001f, -4.873133e-001f, 4.516860e-001f, -1.000000e+000f, 5.767510e-001f, 3.293189e-001f, -8.063741e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.378708e-002f, -1.002906e-001f, 9.311874e-002f, 2.434457e-001f, -6.949522e-001f, 4.732055e-001f, -1.000000e+000f, 5.351543e-001f, 4.303415e-001f, -9.224370e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.689194e-003f, 3.402992e-002f, 8.180463e-002f, 7.888193e-002f, 3.807911e-001f, 2.973585e-001f, -4.551251e-001f, 4.946681e-001f, 2.967789e-001f, -4.503729e-001f, 4.436302e-001f, -1.000000e+000f, 5.806836e-001f, 3.431887e-001f, -8.258677e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.378821e-002f, -1.002959e-001f, 9.311554e-002f, 2.435141e-001f, -6.950163e-001f, 4.732051e-001f, -1.000000e+000f, 5.351539e-001f, 4.303470e-001f, -9.224455e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.861084e-004f, 9.921124e-003f, 7.960893e-002f, 3.226435e-002f, 2.377374e-001f, 2.249527e-001f, -4.171233e-001f, 5.000445e-001f, 2.272769e-001f, -4.148438e-001f, 4.422770e-001f, -1.000000e+000f, 5.801915e-001f, 3.519613e-001f, -8.368205e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.378124e-002f, -1.003106e-001f, 9.312284e-002f, 2.435880e-001f, -6.950806e-001f, 4.732226e-001f, -1.000000e+000f, 5.351213e-001f, 4.304268e-001f, -9.225432e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 2.172752e-003f, -1.495178e-002f, 7.923475e-002f, 9.107776e-003f, 7.608867e-002f, 4.442370e-001f, -1.000000e+000f, 5.688183e-001f, 3.929606e-001f, -8.842228e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.378837e-002f, -1.003408e-001f, 9.312979e-002f, 2.437284e-001f, -6.951954e-001f, 4.732272e-001f, -1.000000e+000f, 5.351049e-001f, 4.304825e-001f, -9.226168e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 1.905315e-003f, -6.028417e-003f, 7.816171e-002f, 5.877340e-003f, 1.069720e-001f, 4.459624e-001f, -1.000000e+000f, 5.615719e-001f, 4.030116e-001f, -8.977196e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.503168e-001f, 4.113581e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  3.789203e-003f, 1.546738e-002f, 5.935646e-002f, 3.459265e-002f, 2.628312e-001f, 1.564931e-001f, -7.701739e-002f, 4.720565e-001f, 1.779377e-001f, -7.437930e-002f, 2.541319e-002f, 8.988804e-002f, 8.079987e-002f, 1.428670e-001f, 4.844841e-001f, 4.201266e-001f, -2.106542e-001f, 6.833703e-001f, 1.623645e-001f, 2.386773e-001f,
  0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  2.717854e-002f, 4.402757e-002f, 4.597927e-002f, 1.213962e-002f, 1.558170e-001f, 2.757486e-001f, -8.683942e-001f, 8.881950e-001f, 1.604470e-001f, -5.073609e-001f, 4.567265e-002f, -5.575740e-002f, 7.251150e-002f, 2.598562e-002f, 1.044443e-001f, 3.222510e-001f, 1.000000e+000f, 7.761806e-001f, 1.667196e-001f, 5.610236e-001f,
  4.822763e-003f, -1.326109e-002f, 5.422131e-002f, 3.853727e-002f, -2.775743e-001f, 4.315691e-001f, 1.906800e-001f, 8.080869e-001f, 1.312523e-001f, -2.915665e-002f, 5.344301e-002f, -7.997782e-002f, 7.907871e-002f, 8.541637e-003f, 9.960781e-002f, 3.670626e-001f, 1.000000e+000f, 7.189871e-001f, 1.244521e-001f, 4.755610e-001f,
  5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  8.109493e-003f, 4.394897e-003f, 4.812018e-002f, 5.762571e-002f, -3.394870e-001f, 6.017322e-001f, -4.733226e-001f, 1.000000e+000f, 1.747351e-001f, -1.048615e-001f, 4.769457e-002f, -9.641924e-002f, 6.682177e-002f, 1.699952e-001f, -5.323364e-001f, 5.108231e-002f, 4.311687e-001f, 9.106379e-001f, 2.076631e-001f, 4.016092e-001f,
  2.536582e-002f, -2.997739e-002f, 5.182545e-002f, 7.825799e-002f, -3.944224e-001f, 4.935787e-001f, 1.000000e+000f, 8.863761e-001f, 1.462193e-001f, 3.499382e-001f, 4.738592e-002f, -1.058407e-001f, 7.119735e-002f, 1.797067e-001f, -5.995089e-001f, 3.391774e-002f, 3.382781e-001f, 8.434673e-001f, 2.405009e-001f, 4.227632e-001f,
  2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  3.049199e-003f, -1.665115e-002f, 4.387588e-002f, 2.059523e-001f, -6.392838e-001f, 7.271041e-001f, -8.937897e-001f, 1.000000e+000f, 3.537170e-001f, -3.759615e-001f, 6.167052e-003f, 3.823670e-002f, 7.379391e-002f, 1.952944e-001f, 3.629733e-001f, 3.333617e-001f, -7.072794e-001f, 4.183593e-001f, 2.488743e-001f, -6.910059e-001f, 6.585826e-001f, -3.134024e-001f, 1.000000e+000f, 2.608507e-001f, -6.320531e-002f,
  8.087909e-003f, -4.531316e-002f, 6.398582e-002f, 2.338883e-001f, -6.838251e-001f, 6.454515e-001f, -1.000000e+000f, 7.595433e-001f, 3.830444e-001f, -6.211068e-001f, 1.171471e-002f, 7.896051e-002f, 1.344408e-001f, 1.796282e-001f, 3.503814e-001f, 2.694731e-001f, -1.747014e-001f, 3.952606e-001f, 2.221938e-001f, -9.974643e-002f, 4.705082e-001f, -1.000000e+000f, 5.797298e-001f, 2.452304e-001f, -6.946097e-001f,
  3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  4.450585e-002f, 4.008419e-002f, 8.274264e-002f, 2.325279e-001f, 2.212684e-001f, 1.816036e-001f, -5.370482e-001f, 5.876603e-001f, 2.540291e-001f, -7.063439e-001f, 7.509740e-002f, -8.884797e-002f, 1.426722e-001f, 9.866570e-002f, -1.837932e-001f, 4.912615e-002f, 2.736278e-001f, 3.880290e-001f, 1.919676e-001f, 3.833767e-001f, 4.796348e-001f, -1.000000e+000f, 5.593396e-001f, 2.580723e-001f, -7.113873e-001f,
  2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  2.667199e-002f, -2.318107e-002f, 6.304339e-002f, 2.153130e-001f, -6.558754e-001f, 5.210953e-001f, -1.000000e+000f, 7.807488e-001f, 3.130873e-001f, -4.496848e-001f, 3.023672e-002f, -4.548508e-002f, 5.686701e-002f, 8.457110e-002f, -4.035510e-001f, 4.875381e-001f, -1.000000e+000f, 5.497322e-001f, 1.758725e-001f, -5.898953e-001f, 1.175400e-001f, 6.853884e-001f, 1.000000e+000f, 1.943138e-001f, 3.687316e-001f,
  2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  2.516133e-002f, -9.321969e-002f, 8.656552e-002f, 3.004109e-001f, -7.744701e-001f, 5.487076e-001f, -1.000000e+000f, 6.081643e-001f, 4.328193e-001f, -8.186486e-001f, 5.013463e-002f, -8.139416e-002f, 8.038805e-002f, 1.661629e-001f, -5.764611e-001f, 5.081267e-002f, 3.723167e-001f, 6.907266e-001f, 2.258888e-001f, 3.879672e-001f, 4.917666e-001f, -1.000000e+000f, 5.453885e-001f, 2.342674e-001f, -6.119937e-001f,
  2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  4.863123e-002f, -1.108947e-001f, 8.483867e-002f, 3.395580e-001f, -8.229428e-001f, 4.208149e-001f, -1.000000e+000f, 6.182891e-001f, 3.805103e-001f, -8.272781e-001f, 4.224717e-003f, 4.119778e-002f, 1.091393e-001f, 2.418142e-001f, 3.922533e-001f, 3.496416e-001f, -5.409262e-001f, 4.904184e-001f, 2.838894e-001f, -5.634082e-001f, 4.795406e-001f, -1.000000e+000f, 5.550680e-001f, 2.931130e-001f, -7.544399e-001f,
  4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  4.856769e-002f, -1.100086e-001f, 8.268340e-002f, 3.422325e-001f, -8.266568e-001f, 4.095874e-001f, -1.000000e+000f, 6.314618e-001f, 3.777708e-001f, -8.217574e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  5.361546e-002f, -9.969547e-002f, 9.309433e-002f, 2.402215e-001f, -6.922462e-001f, 4.732585e-001f, -1.000000e+000f, 5.354124e-001f, 4.293725e-001f, -9.210170e-001f, 5.066667e-003f, 2.976254e-002f, 9.560355e-002f, 9.846724e-002f, 3.659859e-001f, 3.314623e-001f, -4.588150e-001f, 4.869792e-001f, 3.180877e-001f, -4.591687e-001f, 4.581911e-001f, -1.000000e+000f, 5.699256e-001f, 3.461769e-001f, -8.232519e-001f,
  5.365205e-002f, -1.001940e-001f, 9.308769e-002f, 2.435566e-001f, -6.954549e-001f, 4.729013e-001f, -1.000000e+000f, 5.355778e-001f, 4.292289e-001f, -9.211620e-001f, 2.163201e-003f, 2.704874e-002f, 9.374599e-002f, 8.613035e-002f, 3.563524e-001f, 3.196494e-001f, -4.810047e-001f, 4.903620e-001f, 3.037026e-001f, -4.873133e-001f, 4.516860e-001f, -1.000000e+000f, 5.767510e-001f, 3.293189e-001f, -8.063741e-001f,
  5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  5.378708e-002f, -1.002906e-001f, 9.311874e-002f, 2.434457e-001f, -6.949522e-001f, 4.732055e-001f, -1.000000e+000f, 5.351543e-001f, 4.303415e-001f, -9.224370e-001f, 3.689194e-003f, 3.402992e-002f, 8.180463e-002f, 7.888193e-002f, 3.807911e-001f, 2.973585e-001f, -4.551251e-001f, 4.946681e-001f, 2.967789e-001f, -4.503729e-001f, 4.436302e-001f, -1.000000e+000f, 5.806836e-001f, 3.431887e-001f, -8.258677e-001f,
  5.378821e-002f, -1.002959e-001f, 9.311554e-002f, 2.435141e-001f, -6.950163e-001f, 4.732051e-001f, -1.000000e+000f, 5.351539e-001f, 4.303470e-001f, -9.224455e-001f, 3.861084e-004f, 9.921124e-003f, 7.960893e-002f, 3.226435e-002f, 2.377374e-001f, 2.249527e-001f, -4.171233e-001f, 5.000445e-001f, 2.272769e-001f, -4.148438e-001f, 4.422770e-001f, -1.000000e+000f, 5.801915e-001f, 3.519613e-001f, -8.368205e-001f,
  5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  5.378124e-002f, -1.003106e-001f, 9.312284e-002f, 2.435880e-001f, -6.950806e-001f, 4.732226e-001f, -1.000000e+000f, 5.351213e-001f, 4.304268e-001f, -9.225432e-001f, 2.172752e-003f, -1.495178e-002f, 7.923475e-002f, 9.107776e-003f, 7.608867e-002f, 4.442370e-001f, -1.000000e+000f, 5.688183e-001f, 3.929606e-001f, -8.842228e-001f,
  5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  5.378837e-002f, -1.003408e-001f, 9.312979e-002f, 2.437284e-001f, -6.951954e-001f, 4.732272e-001f, -1.000000e+000f, 5.351049e-001f, 4.304825e-001f, -9.226168e-001f, 1.905315e-003f, -6.028417e-003f, 7.816171e-002f, 5.877340e-003f, 1.069720e-001f, 4.459624e-001f, -1.000000e+000f, 5.615719e-001f, 4.030116e-001f, -8.977196e-001f,
  5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.789203e-003f, 1.546738e-002f, 5.935646e-002f, 3.459265e-002f, 2.628312e-001f, 1.564931e-001f, -7.701739e-002f, 4.720565e-001f, 1.779377e-001f, -7.437930e-002f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.541319e-002f, 8.988804e-002f, 8.079987e-002f, 1.428670e-001f, 4.844841e-001f, 4.201266e-001f, -2.106542e-001f, 6.833703e-001f, 1.623645e-001f, 2.386773e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.717854e-002f, 4.402757e-002f, 4.597927e-002f, 1.213962e-002f, 1.558170e-001f, 2.757486e-001f, -8.683942e-001f, 8.881950e-001f, 1.604470e-001f, -5.073609e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 4.567265e-002f, -5.575740e-002f, 7.251150e-002f, 2.598562e-002f, 1.044443e-001f, 3.222510e-001f, 1.000000e+000f, 7.761806e-001f, 1.667196e-001f, 5.610236e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 4.822763e-003f, -1.326109e-002f, 5.422131e-002f, 3.853727e-002f, -2.775743e-001f, 4.315691e-001f, 1.906800e-001f, 8.080869e-001f, 1.312523e-001f, -2.915665e-002f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.344301e-002f, -7.997782e-002f, 7.907871e-002f, 8.541637e-003f, 9.960781e-002f, 3.670626e-001f, 1.000000e+000f, 7.189871e-001f, 1.244521e-001f, 4.755610e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 8.109493e-003f, 4.394897e-003f, 4.812018e-002f, 5.762571e-002f, -3.394870e-001f, 6.017322e-001f, -4.733226e-001f, 1.000000e+000f, 1.747351e-001f, -1.048615e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 4.769457e-002f, -9.641924e-002f, 6.682177e-002f, 1.699952e-001f, -5.323364e-001f, 5.108231e-002f, 4.311687e-001f, 9.106379e-001f, 2.076631e-001f, 4.016092e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.536582e-002f, -2.997739e-002f, 5.182545e-002f, 7.825799e-002f, -3.944224e-001f, 4.935787e-001f, 1.000000e+000f, 8.863761e-001f, 1.462193e-001f, 3.499382e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 4.738592e-002f, -1.058407e-001f, 7.119735e-002f, 1.797067e-001f, -5.995089e-001f, 3.391774e-002f, 3.382781e-001f, 8.434673e-001f, 2.405009e-001f, 4.227632e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.049199e-003f, -1.665115e-002f, 4.387588e-002f, 2.059523e-001f, -6.392838e-001f, 7.271041e-001f, -8.937897e-001f, 1.000000e+000f, 3.537170e-001f, -3.759615e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 6.167052e-003f, 3.823670e-002f, 7.379391e-002f, 1.952944e-001f, 3.629733e-001f, 3.333617e-001f, -7.072794e-001f, 4.183593e-001f, 2.488743e-001f, -6.910059e-001f, 6.585826e-001f, -3.134024e-001f, 1.000000e+000f, 2.608507e-001f, -6.320531e-002f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 8.087909e-003f, -4.531316e-002f, 6.398582e-002f, 2.338883e-001f, -6.838251e-001f, 6.454515e-001f, -1.000000e+000f, 7.595433e-001f, 3.830444e-001f, -6.211068e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 1.171471e-002f, 7.896051e-002f, 1.344408e-001f, 1.796282e-001f, 3.503814e-001f, 2.694731e-001f, -1.747014e-001f, 3.952606e-001f, 2.221938e-001f, -9.974643e-002f, 4.705082e-001f, -1.000000e+000f, 5.797298e-001f, 2.452304e-001f, -6.946097e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 4.450585e-002f, 4.008419e-002f, 8.274264e-002f, 2.325279e-001f, 2.212684e-001f, 1.816036e-001f, -5.370482e-001f, 5.876603e-001f, 2.540291e-001f, -7.063439e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 7.509740e-002f, -8.884797e-002f, 1.426722e-001f, 9.866570e-002f, -1.837932e-001f, 4.912615e-002f, 2.736278e-001f, 3.880290e-001f, 1.919676e-001f, 3.833767e-001f, 4.796348e-001f, -1.000000e+000f, 5.593396e-001f, 2.580723e-001f, -7.113873e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.667199e-002f, -2.318107e-002f, 6.304339e-002f, 2.153130e-001f, -6.558754e-001f, 5.210953e-001f, -1.000000e+000f, 7.807488e-001f, 3.130873e-001f, -4.496848e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.023672e-002f, -4.548508e-002f, 5.686701e-002f, 8.457110e-002f, -4.035510e-001f, 4.875381e-001f, -1.000000e+000f, 5.497322e-001f, 1.758725e-001f, -5.898953e-001f, 1.175400e-001f, 6.853884e-001f, 1.000000e+000f, 1.943138e-001f, 3.687316e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.516133e-002f, -9.321969e-002f, 8.656552e-002f, 3.004109e-001f, -7.744701e-001f, 5.487076e-001f, -1.000000e+000f, 6.081643e-001f, 4.328193e-001f, -8.186486e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.013463e-002f, -8.139416e-002f, 8.038805e-002f, 1.661629e-001f, -5.764611e-001f, 5.081267e-002f, 3.723167e-001f, 6.907266e-001f, 2.258888e-001f, 3.879672e-001f, 4.917666e-001f, -1.000000e+000f, 5.453885e-001f, 2.342674e-001f, -6.119937e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 4.863123e-002f, -1.108947e-001f, 8.483867e-002f, 3.395580e-001f, -8.229428e-001f, 4.208149e-001f, -1.000000e+000f, 6.182891e-001f, 3.805103e-001f, -8.272781e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 4.224717e-003f, 4.119778e-002f, 1.091393e-001f, 2.418142e-001f, 3.922533e-001f, 3.496416e-001f, -5.409262e-001f, 4.904184e-001f, 2.838894e-001f, -5.634082e-001f, 4.795406e-001f, -1.000000e+000f, 5.550680e-001f, 2.931130e-001f, -7.544399e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 4.856769e-002f, -1.100086e-001f, 8.268340e-002f, 3.422325e-001f, -8.266568e-001f, 4.095874e-001f, -1.000000e+000f, 6.314618e-001f, 3.777708e-001f, -8.217574e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.361546e-002f, -9.969547e-002f, 9.309433e-002f, 2.402215e-001f, -6.922462e-001f, 4.732585e-001f, -1.000000e+000f, 5.354124e-001f, 4.293725e-001f, -9.210170e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.066667e-003f, 2.976254e-002f, 9.560355e-002f, 9.846724e-002f, 3.659859e-001f, 3.314623e-001f, -4.588150e-001f, 4.869792e-001f, 3.180877e-001f, -4.591687e-001f, 4.581911e-001f, -1.000000e+000f, 5.699256e-001f, 3.461769e-001f, -8.232519e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.365205e-002f, -1.001940e-001f, 9.308769e-002f, 2.435566e-001f, -6.954549e-001f, 4.729013e-001f, -1.000000e+000f, 5.355778e-001f, 4.292289e-001f, -9.211620e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.163201e-003f, 2.704874e-002f, 9.374599e-002f, 8.613035e-002f, 3.563524e-001f, 3.196494e-001f, -4.810047e-001f, 4.903620e-001f, 3.037026e-001f, -4.873133e-001f, 4.516860e-001f, -1.000000e+000f, 5.767510e-001f, 3.293189e-001f, -8.063741e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.378708e-002f, -1.002906e-001f, 9.311874e-002f, 2.434457e-001f, -6.949522e-001f, 4.732055e-001f, -1.000000e+000f, 5.351543e-001f, 4.303415e-001f, -9.224370e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.689194e-003f, 3.402992e-002f, 8.180463e-002f, 7.888193e-002f, 3.807911e-001f, 2.973585e-001f, -4.551251e-001f, 4.946681e-001f, 2.967789e-001f, -4.503729e-001f, 4.436302e-001f, -1.000000e+000f, 5.806836e-001f, 3.431887e-001f, -8.258677e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.378821e-002f, -1.002959e-001f, 9.311554e-002f, 2.435141e-001f, -6.950163e-001f, 4.732051e-001f, -1.000000e+000f, 5.351539e-001f, 4.303470e-001f, -9.224455e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.861084e-004f, 9.921124e-003f, 7.960893e-002f, 3.226435e-002f, 2.377374e-001f, 2.249527e-001f, -4.171233e-001f, 5.000445e-001f, 2.272769e-001f, -4.148438e-001f, 4.422770e-001f, -1.000000e+000f, 5.801915e-001f, 3.519613e-001f, -8.368205e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.378124e-002f, -1.003106e-001f, 9.312284e-002f, 2.435880e-001f, -6.950806e-001f, 4.732226e-001f, -1.000000e+000f, 5.351213e-001f, 4.304268e-001f, -9.225432e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 2.172752e-003f, -1.495178e-002f, 7.923475e-002f, 9.107776e-003f, 7.608867e-002f, 4.442370e-001f, -1.000000e+000f, 5.688183e-001f, 3.929606e-001f, -8.842228e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.378837e-002f, -1.003408e-001f, 9.312979e-002f, 2.437284e-001f, -6.951954e-001f, 4.732272e-001f, -1.000000e+000f, 5.351049e-001f, 4.304825e-001f, -9.226168e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 1.905315e-003f, -6.028417e-003f, 7.816171e-002f, 5.877340e-003f, 1.069720e-001f, 4.459624e-001f, -1.000000e+000f, 5.615719e-001f, 4.030116e-001f, -8.977196e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.987781e-001f, 4.314315e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.789203e-003f, 1.546738e-002f, 5.935646e-002f, 3.459265e-002f, 2.628312e-001f, 1.564931e-001f, -7.701739e-002f, 4.720565e-001f, 1.779377e-001f, -7.437930e-002f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.541319e-002f, 8.988804e-002f, 8.079987e-002f, 1.428670e-001f, 4.844841e-001f, 4.201266e-001f, -2.106542e-001f, 6.833703e-001f, 1.623645e-001f, 2.386773e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.717854e-002f, 4.402757e-002f, 4.597927e-002f, 1.213962e-002f, 1.558170e-001f, 2.757486e-001f, -8.683942e-001f, 8.881950e-001f, 1.604470e-001f, -5.073609e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 4.567265e-002f, -5.575740e-002f, 7.251150e-002f, 2.598562e-002f, 1.044443e-001f, 3.222510e-001f, 1.000000e+000f, 7.761806e-001f, 1.667196e-001f, 5.610236e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 4.822763e-003f, -1.326109e-002f, 5.422131e-002f, 3.853727e-002f, -2.775743e-001f, 4.315691e-001f, 1.906800e-001f, 8.080869e-001f, 1.312523e-001f, -2.915665e-002f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.344301e-002f, -7.997782e-002f, 7.907871e-002f, 8.541637e-003f, 9.960781e-002f, 3.670626e-001f, 1.000000e+000f, 7.189871e-001f, 1.244521e-001f, 4.755610e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 8.109493e-003f, 4.394897e-003f, 4.812018e-002f, 5.762571e-002f, -3.394870e-001f, 6.017322e-001f, -4.733226e-001f, 1.000000e+000f, 1.747351e-001f, -1.048615e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 4.769457e-002f, -9.641924e-002f, 6.682177e-002f, 1.699952e-001f, -5.323364e-001f, 5.108231e-002f, 4.311687e-001f, 9.106379e-001f, 2.076631e-001f, 4.016092e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.536582e-002f, -2.997739e-002f, 5.182545e-002f, 7.825799e-002f, -3.944224e-001f, 4.935787e-001f, 1.000000e+000f, 8.863761e-001f, 1.462193e-001f, 3.499382e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 4.738592e-002f, -1.058407e-001f, 7.119735e-002f, 1.797067e-001f, -5.995089e-001f, 3.391774e-002f, 3.382781e-001f, 8.434673e-001f, 2.405009e-001f, 4.227632e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.049199e-003f, -1.665115e-002f, 4.387588e-002f, 2.059523e-001f, -6.392838e-001f, 7.271041e-001f, -8.937897e-001f, 1.000000e+000f, 3.537170e-001f, -3.759615e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 6.167052e-003f, 3.823670e-002f, 7.379391e-002f, 1.952944e-001f, 3.629733e-001f, 3.333617e-001f, -7.072794e-001f, 4.183593e-001f, 2.488743e-001f, -6.910059e-001f, 6.585826e-001f, -3.134024e-001f, 1.000000e+000f, 2.608507e-001f, -6.320531e-002f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 8.087909e-003f, -4.531316e-002f, 6.398582e-002f, 2.338883e-001f, -6.838251e-001f, 6.454515e-001f, -1.000000e+000f, 7.595433e-001f, 3.830444e-001f, -6.211068e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 1.171471e-002f, 7.896051e-002f, 1.344408e-001f, 1.796282e-001f, 3.503814e-001f, 2.694731e-001f, -1.747014e-001f, 3.952606e-001f, 2.221938e-001f, -9.974643e-002f, 4.705082e-001f, -1.000000e+000f, 5.797298e-001f, 2.452304e-001f, -6.946097e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 4.450585e-002f, 4.008419e-002f, 8.274264e-002f, 2.325279e-001f, 2.212684e-001f, 1.816036e-001f, -5.370482e-001f, 5.876603e-001f, 2.540291e-001f, -7.063439e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 7.509740e-002f, -8.884797e-002f, 1.426722e-001f, 9.866570e-002f, -1.837932e-001f, 4.912615e-002f, 2.736278e-001f, 3.880290e-001f, 1.919676e-001f, 3.833767e-001f, 4.796348e-001f, -1.000000e+000f, 5.593396e-001f, 2.580723e-001f, -7.113873e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.667199e-002f, -2.318107e-002f, 6.304339e-002f, 2.153130e-001f, -6.558754e-001f, 5.210953e-001f, -1.000000e+000f, 7.807488e-001f, 3.130873e-001f, -4.496848e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.023672e-002f, -4.548508e-002f, 5.686701e-002f, 8.457110e-002f, -4.035510e-001f, 4.875381e-001f, -1.000000e+000f, 5.497322e-001f, 1.758725e-001f, -5.898953e-001f, 1.175400e-001f, 6.853884e-001f, 1.000000e+000f, 1.943138e-001f, 3.687316e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.516133e-002f, -9.321969e-002f, 8.656552e-002f, 3.004109e-001f, -7.744701e-001f, 5.487076e-001f, -1.000000e+000f, 6.081643e-001f, 4.328193e-001f, -8.186486e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.013463e-002f, -8.139416e-002f, 8.038805e-002f, 1.661629e-001f, -5.764611e-001f, 5.081267e-002f, 3.723167e-001f, 6.907266e-001f, 2.258888e-001f, 3.879672e-001f, 4.917666e-001f, -1.000000e+000f, 5.453885e-001f, 2.342674e-001f, -6.119937e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 4.863123e-002f, -1.108947e-001f, 8.483867e-002f, 3.395580e-001f, -8.229428e-001f, 4.208149e-001f, -1.000000e+000f, 6.182891e-001f, 3.805103e-001f, -8.272781e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 4.224717e-003f, 4.119778e-002f, 1.091393e-001f, 2.418142e-001f, 3.922533e-001f, 3.496416e-001f, -5.409262e-001f, 4.904184e-001f, 2.838894e-001f, -5.634082e-001f, 4.795406e-001f, -1.000000e+000f, 5.550680e-001f, 2.931130e-001f, -7.544399e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 4.856769e-002f, -1.100086e-001f, 8.268340e-002f, 3.422325e-001f, -8.266568e-001f, 4.095874e-001f, -1.000000e+000f, 6.314618e-001f, 3.777708e-001f, -8.217574e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.361546e-002f, -9.969547e-002f, 9.309433e-002f, 2.402215e-001f, -6.922462e-001f, 4.732585e-001f, -1.000000e+000f, 5.354124e-001f, 4.293725e-001f, -9.210170e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.066667e-003f, 2.976254e-002f, 9.560355e-002f, 9.846724e-002f, 3.659859e-001f, 3.314623e-001f, -4.588150e-001f, 4.869792e-001f, 3.180877e-001f, -4.591687e-001f, 4.581911e-001f, -1.000000e+000f, 5.699256e-001f, 3.461769e-001f, -8.232519e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.365205e-002f, -1.001940e-001f, 9.308769e-002f, 2.435566e-001f, -6.954549e-001f, 4.729013e-001f, -1.000000e+000f, 5.355778e-001f, 4.292289e-001f, -9.211620e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.163201e-003f, 2.704874e-002f, 9.374599e-002f, 8.613035e-002f, 3.563524e-001f, 3.196494e-001f, -4.810047e-001f, 4.903620e-001f, 3.037026e-001f, -4.873133e-001f, 4.516860e-001f, -1.000000e+000f, 5.767510e-001f, 3.293189e-001f, -8.063741e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.378708e-002f, -1.002906e-001f, 9.311874e-002f, 2.434457e-001f, -6.949522e-001f, 4.732055e-001f, -1.000000e+000f, 5.351543e-001f, 4.303415e-001f, -9.224370e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.689194e-003f, 3.402992e-002f, 8.180463e-002f, 7.888193e-002f, 3.807911e-001f, 2.973585e-001f, -4.551251e-001f, 4.946681e-001f, 2.967789e-001f, -4.503729e-001f, 4.436302e-001f, -1.000000e+000f, 5.806836e-001f, 3.431887e-001f, -8.258677e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.378821e-002f, -1.002959e-001f, 9.311554e-002f, 2.435141e-001f, -6.950163e-001f, 4.732051e-001f, -1.000000e+000f, 5.351539e-001f, 4.303470e-001f, -9.224455e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.861084e-004f, 9.921124e-003f, 7.960893e-002f, 3.226435e-002f, 2.377374e-001f, 2.249527e-001f, -4.171233e-001f, 5.000445e-001f, 2.272769e-001f, -4.148438e-001f, 4.422770e-001f, -1.000000e+000f, 5.801915e-001f, 3.519613e-001f, -8.368205e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.378124e-002f, -1.003106e-001f, 9.312284e-002f, 2.435880e-001f, -6.950806e-001f, 4.732226e-001f, -1.000000e+000f, 5.351213e-001f, 4.304268e-001f, -9.225432e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 2.172752e-003f, -1.495178e-002f, 7.923475e-002f, 9.107776e-003f, 7.608867e-002f, 4.442370e-001f, -1.000000e+000f, 5.688183e-001f, 3.929606e-001f, -8.842228e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.378837e-002f, -1.003408e-001f, 9.312979e-002f, 2.437284e-001f, -6.951954e-001f, 4.732272e-001f, -1.000000e+000f, 5.351049e-001f, 4.304825e-001f, -9.226168e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 1.905315e-003f, -6.028417e-003f, 7.816171e-002f, 5.877340e-003f, 1.069720e-001f, 4.459624e-001f, -1.000000e+000f, 5.615719e-001f, 4.030116e-001f, -8.977196e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.884359e-001f, 3.732390e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.789203e-003f, 1.546738e-002f, 5.935646e-002f, 3.459265e-002f, 2.628312e-001f, 1.564931e-001f, -7.701739e-002f, 4.720565e-001f, 1.779377e-001f, -7.437930e-002f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 2.541319e-002f, 8.988804e-002f, 8.079987e-002f, 1.428670e-001f, 4.844841e-001f, 4.201266e-001f, -2.106542e-001f, 6.833703e-001f, 1.623645e-001f, 2.386773e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 2.717854e-002f, 4.402757e-002f, 4.597927e-002f, 1.213962e-002f, 1.558170e-001f, 2.757486e-001f, -8.683942e-001f, 8.881950e-001f, 1.604470e-001f, -5.073609e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 4.567265e-002f, -5.575740e-002f, 7.251150e-002f, 2.598562e-002f, 1.044443e-001f, 3.222510e-001f, 1.000000e+000f, 7.761806e-001f, 1.667196e-001f, 5.610236e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 8.109493e-003f, 4.394897e-003f, 4.812018e-002f, 5.762571e-002f, -3.394870e-001f, 6.017322e-001f, -4.733226e-001f, 1.000000e+000f, 1.747351e-001f, -1.048615e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 4.769457e-002f, -9.641924e-002f, 6.682177e-002f, 1.699952e-001f, -5.323364e-001f, 5.108231e-002f, 4.311687e-001f, 9.106379e-001f, 2.076631e-001f, 4.016092e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 2.536582e-002f, -2.997739e-002f, 5.182545e-002f, 7.825799e-002f, -3.944224e-001f, 4.935787e-001f, 1.000000e+000f, 8.863761e-001f, 1.462193e-001f, 3.499382e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 4.738592e-002f, -1.058407e-001f, 7.119735e-002f, 1.797067e-001f, -5.995089e-001f, 3.391774e-002f, 3.382781e-001f, 8.434673e-001f, 2.405009e-001f, 4.227632e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.049199e-003f, -1.665115e-002f, 4.387588e-002f, 2.059523e-001f, -6.392838e-001f, 7.271041e-001f, -8.937897e-001f, 1.000000e+000f, 3.537170e-001f, -3.759615e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 6.167052e-003f, 3.823670e-002f, 7.379391e-002f, 1.952944e-001f, 3.629733e-001f, 3.333617e-001f, -7.072794e-001f, 4.183593e-001f, 2.488743e-001f, -6.910059e-001f, 6.585826e-001f, -3.134024e-001f, 1.000000e+000f, 2.608507e-001f, -6.320531e-002f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 4.450585e-002f, 4.008419e-002f, 8.274264e-002f, 2.325279e-001f, 2.212684e-001f, 1.816036e-001f, -5.370482e-001f, 5.876603e-001f, 2.540291e-001f, -7.063439e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 7.509740e-002f, -8.884797e-002f, 1.426722e-001f, 9.866570e-002f, -1.837932e-001f, 4.912615e-002f, 2.736278e-001f, 3.880290e-001f, 1.919676e-001f, 3.833767e-001f, 4.796348e-001f, -1.000000e+000f, 5.593396e-001f, 2.580723e-001f, -7.113873e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 2.667199e-002f, -2.318107e-002f, 6.304339e-002f, 2.153130e-001f, -6.558754e-001f, 5.210953e-001f, -1.000000e+000f, 7.807488e-001f, 3.130873e-001f, -4.496848e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.023672e-002f, -4.548508e-002f, 5.686701e-002f, 8.457110e-002f, -4.035510e-001f, 4.875381e-001f, -1.000000e+000f, 5.497322e-001f, 1.758725e-001f, -5.898953e-001f, 1.175400e-001f, 6.853884e-001f, 1.000000e+000f, 1.943138e-001f, 3.687316e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 4.863123e-002f, -1.108947e-001f, 8.483867e-002f, 3.395580e-001f, -8.229428e-001f, 4.208149e-001f, -1.000000e+000f, 6.182891e-001f, 3.805103e-001f, -8.272781e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 4.224717e-003f, 4.119778e-002f, 1.091393e-001f, 2.418142e-001f, 3.922533e-001f, 3.496416e-001f, -5.409262e-001f, 4.904184e-001f, 2.838894e-001f, -5.634082e-001f, 4.795406e-001f, -1.000000e+000f, 5.550680e-001f, 2.931130e-001f, -7.544399e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 4.856769e-002f, -1.100086e-001f, 8.268340e-002f, 3.422325e-001f, -8.266568e-001f, 4.095874e-001f, -1.000000e+000f, 6.314618e-001f, 3.777708e-001f, -8.217574e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.361546e-002f, -9.969547e-002f, 9.309433e-002f, 2.402215e-001f, -6.922462e-001f, 4.732585e-001f, -1.000000e+000f, 5.354124e-001f, 4.293725e-001f, -9.210170e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.066667e-003f, 2.976254e-002f, 9.560355e-002f, 9.846724e-002f, 3.659859e-001f, 3.314623e-001f, -4.588150e-001f, 4.869792e-001f, 3.180877e-001f, -4.591687e-001f, 4.581911e-001f, -1.000000e+000f, 5.699256e-001f, 3.461769e-001f, -8.232519e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.378708e-002f, -1.002906e-001f, 9.311874e-002f, 2.434457e-001f, -6.949522e-001f, 4.732055e-001f, -1.000000e+000f, 5.351543e-001f, 4.303415e-001f, -9.224370e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.689194e-003f, 3.402992e-002f, 8.180463e-002f, 7.888193e-002f, 3.807911e-001f, 2.973585e-001f, -4.551251e-001f, 4.946681e-001f, 2.967789e-001f, -4.503729e-001f, 4.436302e-001f, -1.000000e+000f, 5.806836e-001f, 3.431887e-001f, -8.258677e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.378821e-002f, -1.002959e-001f, 9.311554e-002f, 2.435141e-001f, -6.950163e-001f, 4.732051e-001f, -1.000000e+000f, 5.351539e-001f, 4.303470e-001f, -9.224455e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.861084e-004f, 9.921124e-003f, 7.960893e-002f, 3.226435e-002f, 2.377374e-001f, 2.249527e-001f, -4.171233e-001f, 5.000445e-001f, 2.272769e-001f, -4.148438e-001f, 4.422770e-001f, -1.000000e+000f, 5.801915e-001f, 3.519613e-001f, -8.368205e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.378837e-002f, -1.003408e-001f, 9.312979e-002f, 2.437284e-001f, -6.951954e-001f, 4.732272e-001f, -1.000000e+000f, 5.351049e-001f, 4.304825e-001f, -9.226168e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 1.905315e-003f, -6.028417e-003f, 7.816171e-002f, 5.877340e-003f, 1.069720e-001f, 4.459624e-001f, -1.000000e+000f, 5.615719e-001f, 4.030116e-001f, -8.977196e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.827747e-001f, 3.474806e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.789203e-003f, 1.546738e-002f, 5.935646e-002f, 3.459265e-002f, 2.628312e-001f, 1.564931e-001f, -7.701739e-002f, 4.720565e-001f, 1.779377e-001f, -7.437930e-002f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 2.541319e-002f, 8.988804e-002f, 8.079987e-002f, 1.428670e-001f, 4.844841e-001f, 4.201266e-001f, -2.106542e-001f, 6.833703e-001f, 1.623645e-001f, 2.386773e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 4.822763e-003f, -1.326109e-002f, 5.422131e-002f, 3.853727e-002f, -2.775743e-001f, 4.315691e-001f, 1.906800e-001f, 8.080869e-001f, 1.312523e-001f, -2.915665e-002f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.344301e-002f, -7.997782e-002f, 7.907871e-002f, 8.541637e-003f, 9.960781e-002f, 3.670626e-001f, 1.000000e+000f, 7.189871e-001f, 1.244521e-001f, 4.755610e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 8.109493e-003f, 4.394897e-003f, 4.812018e-002f, 5.762571e-002f, -3.394870e-001f, 6.017322e-001f, -4.733226e-001f, 1.000000e+000f, 1.747351e-001f, -1.048615e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 4.769457e-002f, -9.641924e-002f, 6.682177e-002f, 1.699952e-001f, -5.323364e-001f, 5.108231e-002f, 4.311687e-001f, 9.106379e-001f, 2.076631e-001f, 4.016092e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.049199e-003f, -1.665115e-002f, 4.387588e-002f, 2.059523e-001f, -6.392838e-001f, 7.271041e-001f, -8.937897e-001f, 1.000000e+000f, 3.537170e-001f, -3.759615e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 6.167052e-003f, 3.823670e-002f, 7.379391e-002f, 1.952944e-001f, 3.629733e-001f, 3.333617e-001f, -7.072794e-001f, 4.183593e-001f, 2.488743e-001f, -6.910059e-001f, 6.585826e-001f, -3.134024e-001f, 1.000000e+000f, 2.608507e-001f, -6.320531e-002f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 8.087909e-003f, -4.531316e-002f, 6.398582e-002f, 2.338883e-001f, -6.838251e-001f, 6.454515e-001f, -1.000000e+000f, 7.595433e-001f, 3.830444e-001f, -6.211068e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 1.171471e-002f, 7.896051e-002f, 1.344408e-001f, 1.796282e-001f, 3.503814e-001f, 2.694731e-001f, -1.747014e-001f, 3.952606e-001f, 2.221938e-001f, -9.974643e-002f, 4.705082e-001f, -1.000000e+000f, 5.797298e-001f, 2.452304e-001f, -6.946097e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 2.667199e-002f, -2.318107e-002f, 6.304339e-002f, 2.153130e-001f, -6.558754e-001f, 5.210953e-001f, -1.000000e+000f, 7.807488e-001f, 3.130873e-001f, -4.496848e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.023672e-002f, -4.548508e-002f, 5.686701e-002f, 8.457110e-002f, -4.035510e-001f, 4.875381e-001f, -1.000000e+000f, 5.497322e-001f, 1.758725e-001f, -5.898953e-001f, 1.175400e-001f, 6.853884e-001f, 1.000000e+000f, 1.943138e-001f, 3.687316e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 4.863123e-002f, -1.108947e-001f, 8.483867e-002f, 3.395580e-001f, -8.229428e-001f, 4.208149e-001f, -1.000000e+000f, 6.182891e-001f, 3.805103e-001f, -8.272781e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 4.224717e-003f, 4.119778e-002f, 1.091393e-001f, 2.418142e-001f, 3.922533e-001f, 3.496416e-001f, -5.409262e-001f, 4.904184e-001f, 2.838894e-001f, -5.634082e-001f, 4.795406e-001f, -1.000000e+000f, 5.550680e-001f, 2.931130e-001f, -7.544399e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 4.856769e-002f, -1.100086e-001f, 8.268340e-002f, 3.422325e-001f, -8.266568e-001f, 4.095874e-001f, -1.000000e+000f, 6.314618e-001f, 3.777708e-001f, -8.217574e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.365205e-002f, -1.001940e-001f, 9.308769e-002f, 2.435566e-001f, -6.954549e-001f, 4.729013e-001f, -1.000000e+000f, 5.355778e-001f, 4.292289e-001f, -9.211620e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 2.163201e-003f, 2.704874e-002f, 9.374599e-002f, 8.613035e-002f, 3.563524e-001f, 3.196494e-001f, -4.810047e-001f, 4.903620e-001f, 3.037026e-001f, -4.873133e-001f, 4.516860e-001f, -1.000000e+000f, 5.767510e-001f, 3.293189e-001f, -8.063741e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.378708e-002f, -1.002906e-001f, 9.311874e-002f, 2.434457e-001f, -6.949522e-001f, 4.732055e-001f, -1.000000e+000f, 5.351543e-001f, 4.303415e-001f, -9.224370e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.689194e-003f, 3.402992e-002f, 8.180463e-002f, 7.888193e-002f, 3.807911e-001f, 2.973585e-001f, -4.551251e-001f, 4.946681e-001f, 2.967789e-001f, -4.503729e-001f, 4.436302e-001f, -1.000000e+000f, 5.806836e-001f, 3.431887e-001f, -8.258677e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.378124e-002f, -1.003106e-001f, 9.312284e-002f, 2.435880e-001f, -6.950806e-001f, 4.732226e-001f, -1.000000e+000f, 5.351213e-001f, 4.304268e-001f, -9.225432e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 2.172752e-003f, -1.495178e-002f, 7.923475e-002f, 9.107776e-003f, 7.608867e-002f, 4.442370e-001f, -1.000000e+000f, 5.688183e-001f, 3.929606e-001f, -8.842228e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -1.768995e-001f, 3.236938e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 3.789203e-003f, 1.546738e-002f, 5.935646e-002f, 3.459265e-002f, 2.628312e-001f, 1.564931e-001f, -7.701739e-002f, 4.720565e-001f, 1.779377e-001f, -7.437930e-002f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 2.541319e-002f, 8.988804e-002f, 8.079987e-002f, 1.428670e-001f, 4.844841e-001f, 4.201266e-001f, -2.106542e-001f, 6.833703e-001f, 1.623645e-001f, 2.386773e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 2.717854e-002f, 4.402757e-002f, 4.597927e-002f, 1.213962e-002f, 1.558170e-001f, 2.757486e-001f, -8.683942e-001f, 8.881950e-001f, 1.604470e-001f, -5.073609e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 4.567265e-002f, -5.575740e-002f, 7.251150e-002f, 2.598562e-002f, 1.044443e-001f, 3.222510e-001f, 1.000000e+000f, 7.761806e-001f, 1.667196e-001f, 5.610236e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 2.536582e-002f, -2.997739e-002f, 5.182545e-002f, 7.825799e-002f, -3.944224e-001f, 4.935787e-001f, 1.000000e+000f, 8.863761e-001f, 1.462193e-001f, 3.499382e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 4.738592e-002f, -1.058407e-001f, 7.119735e-002f, 1.797067e-001f, -5.995089e-001f, 3.391774e-002f, 3.382781e-001f, 8.434673e-001f, 2.405009e-001f, 4.227632e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 8.087909e-003f, -4.531316e-002f, 6.398582e-002f, 2.338883e-001f, -6.838251e-001f, 6.454515e-001f, -1.000000e+000f, 7.595433e-001f, 3.830444e-001f, -6.211068e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 1.171471e-002f, 7.896051e-002f, 1.344408e-001f, 1.796282e-001f, 3.503814e-001f, 2.694731e-001f, -1.747014e-001f, 3.952606e-001f, 2.221938e-001f, -9.974643e-002f, 4.705082e-001f, -1.000000e+000f, 5.797298e-001f, 2.452304e-001f, -6.946097e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 2.516133e-002f, -9.321969e-002f, 8.656552e-002f, 3.004109e-001f, -7.744701e-001f, 5.487076e-001f, -1.000000e+000f, 6.081643e-001f, 4.328193e-001f, -8.186486e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.013463e-002f, -8.139416e-002f, 8.038805e-002f, 1.661629e-001f, -5.764611e-001f, 5.081267e-002f, 3.723167e-001f, 6.907266e-001f, 2.258888e-001f, 3.879672e-001f, 4.917666e-001f, -1.000000e+000f, 5.453885e-001f, 2.342674e-001f, -6.119937e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 4.863123e-002f, -1.108947e-001f, 8.483867e-002f, 3.395580e-001f, -8.229428e-001f, 4.208149e-001f, -1.000000e+000f, 6.182891e-001f, 3.805103e-001f, -8.272781e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 4.224717e-003f, 4.119778e-002f, 1.091393e-001f, 2.418142e-001f, 3.922533e-001f, 3.496416e-001f, -5.409262e-001f, 4.904184e-001f, 2.838894e-001f, -5.634082e-001f, 4.795406e-001f, -1.000000e+000f, 5.550680e-001f, 2.931130e-001f, -7.544399e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.361546e-002f, -9.969547e-002f, 9.309433e-002f, 2.402215e-001f, -6.922462e-001f, 4.732585e-001f, -1.000000e+000f, 5.354124e-001f, 4.293725e-001f, -9.210170e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.066667e-003f, 2.976254e-002f, 9.560355e-002f, 9.846724e-002f, 3.659859e-001f, 3.314623e-001f, -4.588150e-001f, 4.869792e-001f, 3.180877e-001f, -4.591687e-001f, 4.581911e-001f, -1.000000e+000f, 5.699256e-001f, 3.461769e-001f, -8.232519e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.378708e-002f, -1.002906e-001f, 9.311874e-002f, 2.434457e-001f, -6.949522e-001f, 4.732055e-001f, -1.000000e+000f, 5.351543e-001f, 4.303415e-001f, -9.224370e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 3.689194e-003f, 3.402992e-002f, 8.180463e-002f, 7.888193e-002f, 3.807911e-001f, 2.973585e-001f, -4.551251e-001f, 4.946681e-001f, 2.967789e-001f, -4.503729e-001f, 4.436302e-001f, -1.000000e+000f, 5.806836e-001f, 3.431887e-001f, -8.258677e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.739038e-001f, 3.124866e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 2.717854e-002f, 4.402757e-002f, 4.597927e-002f, 1.213962e-002f, 1.558170e-001f, 2.757486e-001f, -8.683942e-001f, 8.881950e-001f, 1.604470e-001f, -5.073609e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 4.567265e-002f, -5.575740e-002f, 7.251150e-002f, 2.598562e-002f, 1.044443e-001f, 3.222510e-001f, 1.000000e+000f, 7.761806e-001f, 1.667196e-001f, 5.610236e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 2.536582e-002f, -2.997739e-002f, 5.182545e-002f, 7.825799e-002f, -3.944224e-001f, 4.935787e-001f, 1.000000e+000f, 8.863761e-001f, 1.462193e-001f, 3.499382e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 4.738592e-002f, -1.058407e-001f, 7.119735e-002f, 1.797067e-001f, -5.995089e-001f, 3.391774e-002f, 3.382781e-001f, 8.434673e-001f, 2.405009e-001f, 4.227632e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 3.049199e-003f, -1.665115e-002f, 4.387588e-002f, 2.059523e-001f, -6.392838e-001f, 7.271041e-001f, -8.937897e-001f, 1.000000e+000f, 3.537170e-001f, -3.759615e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 6.167052e-003f, 3.823670e-002f, 7.379391e-002f, 1.952944e-001f, 3.629733e-001f, 3.333617e-001f, -7.072794e-001f, 4.183593e-001f, 2.488743e-001f, -6.910059e-001f, 6.585826e-001f, -3.134024e-001f, 1.000000e+000f, 2.608507e-001f, -6.320531e-002f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 2.932512e-002f, -5.861828e-002f, 4.968246e-002f, 2.022645e-001f, -6.358966e-001f, 5.628526e-001f, 6.010456e-002f, 1.000000e+000f, 2.399686e-001f, -1.789011e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.951174e-002f, -8.898181e-002f, 1.065856e-001f, 6.246416e-002f, -3.526014e-001f, 8.959155e-002f, 4.121302e-001f, 5.247249e-001f, 2.042314e-001f, 4.012363e-001f, 4.890493e-001f, -1.000000e+000f, 5.530240e-001f, 2.227534e-001f, -6.355742e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 2.683227e-002f, -5.421353e-002f, 4.698158e-002f, 2.374301e-001f, -6.889658e-001f, 4.284841e-001f, -5.635335e-001f, 1.000000e+000f, 3.526009e-001f, -4.789817e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 3.635192e-002f, -5.635135e-002f, 5.593447e-002f, 1.566914e-001f, -5.576879e-001f, 4.914979e-001f, -1.000000e+000f, 5.465434e-001f, 2.111070e-001f, -5.795714e-001f, 1.381483e-001f, 6.349012e-001f, 1.000000e+000f, 2.246269e-001f, 3.953805e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 4.846259e-002f, -1.102320e-001f, 8.293503e-002f, 3.421076e-001f, -8.264576e-001f, 4.108902e-001f, -1.000000e+000f, 6.300641e-001f, 3.787929e-001f, -8.233731e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.361546e-002f, -9.969547e-002f, 9.309433e-002f, 2.402215e-001f, -6.922462e-001f, 4.732585e-001f, -1.000000e+000f, 5.354124e-001f, 4.293725e-001f, -9.210170e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.066667e-003f, 2.976254e-002f, 9.560355e-002f, 9.846724e-002f, 3.659859e-001f, 3.314623e-001f, -4.588150e-001f, 4.869792e-001f, 3.180877e-001f, -4.591687e-001f, 4.581911e-001f, -1.000000e+000f, 5.699256e-001f, 3.461769e-001f, -8.232519e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.378821e-002f, -1.002959e-001f, 9.311554e-002f, 2.435141e-001f, -6.950163e-001f, 4.732051e-001f, -1.000000e+000f, 5.351539e-001f, 4.303470e-001f, -9.224455e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 3.861084e-004f, 9.921124e-003f, 7.960893e-002f, 3.226435e-002f, 2.377374e-001f, 2.249527e-001f, -4.171233e-001f, 5.000445e-001f, 2.272769e-001f, -4.148438e-001f, 4.422770e-001f, -1.000000e+000f, 5.801915e-001f, 3.519613e-001f, -8.368205e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.377965e-002f, -1.003084e-001f, 9.312032e-002f, 2.435901e-001f, -6.951080e-001f, 4.732066e-001f, -1.000000e+000f, 5.351499e-001f, 4.303545e-001f, -9.224551e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 8.635580e-005f, 2.062970e-003f, 8.044569e-002f, 2.166800e-002f, 2.081110e-001f, 2.474426e-001f, -4.028770e-001f, 4.986067e-001f, 2.476151e-001f, -4.013112e-001f, 4.375269e-001f, -1.000000e+000f, 5.750688e-001f, 3.826769e-001f, -8.744811e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -1.750000e-001f, 0.000000e+000f, -1.750000e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.708800e-001f, 3.017106e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 2.426321e-002f, -3.542202e-002f, 5.036228e-002f, 1.226982e-001f, -4.898470e-001f, 5.947217e-001f, 3.060739e-001f, 1.000000e+000f, 2.877476e-001f, 4.340160e-002f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 2.231857e-003f, 1.092500e-002f, 9.689857e-002f, 2.358602e-001f, 3.516565e-001f, 4.251301e-001f, -1.000000e+000f, 6.397221e-001f, 2.640290e-001f, -7.257324e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 3.067698e-002f, -8.489093e-002f, 7.220422e-002f, 3.378009e-001f, -8.195476e-001f, 3.872175e-001f, -1.000000e+000f, 6.729754e-001f, 3.598675e-001f, -7.869888e-001f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 7.338222e-002f, -7.887567e-002f, 1.399409e-001f, 9.454335e-002f, -1.404506e-001f, 4.332330e-002f, 2.577564e-001f, 3.892236e-001f, 1.930534e-001f, 3.583871e-001f, 4.792496e-001f, -1.000000e+000f, 5.654022e-001f, 2.609504e-001f, -7.094680e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 2.667199e-002f, -2.318107e-002f, 6.304339e-002f, 2.153130e-001f, -6.558754e-001f, 5.210953e-001f, -1.000000e+000f, 7.807488e-001f, 3.130873e-001f, -4.496848e-001f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 3.023672e-002f, -4.548508e-002f, 5.686701e-002f, 8.457110e-002f, -4.035510e-001f, 4.875381e-001f, -1.000000e+000f, 5.497322e-001f, 1.758725e-001f, -5.898953e-001f, 1.175400e-001f, 6.853884e-001f, 1.000000e+000f, 1.943138e-001f, 3.687316e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 4.856769e-002f, -1.100086e-001f, 8.268340e-002f, 3.422325e-001f, -8.266568e-001f, 4.095874e-001f, -1.000000e+000f, 6.314618e-001f, 3.777708e-001f, -8.217574e-001f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 5.219763e-003f, 4.201625e-002f, 1.076163e-001f, 2.189373e-001f, 4.220194e-001f, 3.440760e-001f, -5.429922e-001f, 4.897000e-001f, 3.016213e-001f, -5.587874e-001f, 4.714481e-001f, -1.000000e+000f, 5.631252e-001f, 3.115541e-001f, -7.773861e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 5.377957e-002f, -1.003080e-001f, 9.312092e-002f, 2.435866e-001f, -6.951027e-001f, 4.732057e-001f, -1.000000e+000f, 5.351512e-001f, 4.303535e-001f, -9.224540e-001f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 1.808811e-004f, 7.189204e-003f, 7.911311e-002f, 2.389101e-002f, 2.183320e-001f, 2.444887e-001f, -4.258916e-001f, 4.995630e-001f, 2.456605e-001f, -4.242828e-001f, 4.389541e-001f, -1.000000e+000f, 5.841686e-001f, 3.438576e-001f, -8.282987e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 5.378874e-002f, -1.003228e-001f, 9.312675e-002f, 2.436076e-001f, -6.950998e-001f, 4.732226e-001f, -1.000000e+000f, 5.351224e-001f, 4.304259e-001f, -9.225416e-001f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 4.680866e-003f, -1.578320e-002f, 7.765386e-002f, 1.030732e-002f, 4.643145e-002f, 4.441021e-001f, -1.000000e+000f, 5.648605e-001f, 3.971882e-001f, -8.909579e-001f,
  0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.678351e-001f, 2.913471e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 8.768426e-004f, 2.413792e-002f, 1.661185e-001f, 2.109641e-001f, 3.784957e-001f,
  0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 8.169837e-003f, 4.294083e-002f, 6.310651e-002f, 7.975592e-003f, 1.176875e-001f, 5.406003e-001f, 1.000000e+000f, 7.026411e-001f, 3.825833e-001f, 7.092575e-001f, 0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 3.386436e-002f, 1.032383e-001f, 7.869764e-002f, 1.628470e-001f, 5.672148e-001f, 4.264948e-001f, -2.104960e-001f, 7.027284e-001f, 1.745288e-001f, 2.596225e-001f,
  0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 5.335875e-003f, -1.155707e-002f, 4.629605e-002f, 5.497165e-002f, -3.315590e-001f, 5.780074e-001f, -1.881375e-001f, 1.000000e+000f, 1.628949e-001f, -1.495512e-001f, 0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 3.920574e-002f, -7.615516e-002f, 6.105990e-002f, 9.183612e-002f, -4.137600e-001f, 3.648662e-002f, 2.113243e-001f, 9.505622e-001f, 2.209649e-001f, 2.462680e-001f,
  0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 2.439781e-002f, -9.107757e-002f, 8.637313e-002f, 2.938094e-001f, -7.660401e-001f, 5.506295e-001f, -1.000000e+000f, 6.075588e-001f, 4.335947e-001f, -8.173461e-001f, 0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 1.791177e-003f, 2.340156e-002f, 8.546364e-002f, 2.399319e-001f, 3.631071e-001f, 3.608487e-001f, -7.402637e-001f, 4.054971e-001f, 2.652024e-001f, -7.240744e-001f, 6.298330e-001f, -1.000000e+000f, 8.541843e-001f, 3.297792e-001f, -6.473802e-001f,
  0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 5.372391e-002f, -1.002310e-001f, 9.306447e-002f, 2.435790e-001f, -6.953467e-001f, 4.730169e-001f, -1.000000e+000f, 5.354193e-001f, 4.296524e-001f, -9.216440e-001f, 0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 3.469340e-003f, 1.898651e-002f, 8.950698e-002f, 6.708052e-002f, 3.112536e-001f, 3.563597e-001f, -4.002076e-001f, 4.954660e-001f, 3.477880e-001f, -4.042451e-001f, 4.578857e-001f, -1.000000e+000f, 5.668329e-001f, 3.574072e-001f, -8.382639e-001f,
  0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 5.379281e-002f, -1.003405e-001f, 9.312621e-002f, 2.437284e-001f, -6.951929e-001f, 4.732258e-001f, -1.000000e+000f, 5.351067e-001f, 4.304825e-001f, -9.226166e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.647757e-001f, 2.813786e-001f, 0.000000e+000f, -2.071068e-001f, 3.789068e-003f, -2.355011e-002f, 7.816639e-002f, 8.794566e-004f, -3.098898e-002f, 4.590238e-001f, -1.000000e+000f, 5.452595e-001f, 4.283964e-001f, -9.253039e-001f,
  // Total number of coefficients: 11065
  // Maximum number of elevation coefficients: 20

 
   // Full coefficients
   // 10 degrees loudspeakers
   // 22050 Hz sample rate
     // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:34:27 1999
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 7.299231e-003f, 1.322969e-002f, 7.951712e-002f, 8.628813e-002f, 1.143682e-001f, 4.712446e-002f, 2.462852e-001f, 4.383482e-001f, 1.391429e-001f, 5.273991e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.107624e-002f, 7.237753e-002f, 6.213809e-002f, 5.512362e-002f, 3.317500e-001f, 5.848558e-001f, -7.604897e-001f, 8.577882e-001f, 2.537241e-001f, -5.902246e-002f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.456078e-002f, -2.046903e-002f, 4.209776e-002f, 7.918608e-002f, -3.976338e-001f, 2.278602e-001f, -6.562348e-001f, 1.000000e+000f, 1.992023e-001f, -3.505137e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 9.436260e-003f, 5.344339e-002f, 7.567078e-002f, 1.025212e-002f, -1.431914e-001f, 5.455627e-001f, -1.000000e+000f, 7.337533e-001f, 1.588338e-001f, -1.508957e-002f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 9.691752e-003f, -4.075860e-002f, 4.949910e-002f, 1.779908e-001f, -5.938508e-001f, 6.346079e-001f, -1.000000e+000f, 9.239845e-001f, 2.503998e-001f, -5.295633e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 8.920424e-003f, 3.927576e-002f, 4.421797e-002f, 3.112687e-002f, -1.453376e-001f, 4.799531e-001f, -1.000000e+000f, 6.195980e-001f, 8.692824e-002f, -3.968380e-001f, 4.447970e-001f, -6.181277e-001f, 1.000000e+000f, 1.820983e-001f, -5.237302e-002f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 7.224555e-003f, -3.692310e-002f, 5.009665e-002f, 2.832847e-001f, -7.489848e-001f, 6.132882e-001f, -1.000000e+000f, 7.454976e-001f, 4.008527e-001f, -6.309755e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.276708e-002f, 5.355973e-002f, 6.145675e-002f, 5.089868e-002f, 1.376021e-001f, 3.921130e-001f, -8.363154e-001f, 4.729935e-001f, 2.414235e-001f, -6.942694e-001f, 6.556432e-001f, -8.937498e-001f, 1.000000e+000f, 2.554845e-001f, -2.257429e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.549977e-002f, -6.479643e-002f, 6.854196e-002f, 2.873366e-001f, -7.580410e-001f, 5.571082e-001f, -1.000000e+000f, 6.272390e-001f, 4.118888e-001f, -7.653252e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.909963e-002f, 8.855366e-002f, 1.032582e-001f, 3.767554e-003f, 4.120983e-002f, 3.475121e-001f, -5.014307e-001f, 5.025588e-001f, 2.287335e-001f, -2.028589e-001f, 4.754021e-001f, -1.000000e+000f, 5.531043e-001f, 2.483673e-001f, -7.046253e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 3.821219e-002f, -6.235666e-002f, 7.121515e-002f, 2.748488e-001f, -7.406583e-001f, 4.872455e-001f, -1.000000e+000f, 6.562890e-001f, 3.572567e-001f, -6.446543e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 3.213795e-003f, 2.863675e-002f, 6.379273e-002f, 7.682730e-002f, -3.919090e-001f, 5.253384e-001f, -1.000000e+000f, 8.722765e-001f, 2.084952e-001f, -1.576328e-002f, 4.890235e-001f, -1.000000e+000f, 5.302775e-001f, 3.064975e-001f, -7.723951e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 5.464954e-002f, -1.288390e-001f, 7.681612e-002f, 3.903471e-001f, -8.831010e-001f, 4.463128e-001f, -1.000000e+000f, 6.417296e-001f, 4.079330e-001f, -8.760264e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.486498e-003f, 2.304182e-002f, 8.974718e-002f, 2.543100e-001f, 3.052880e-002f, 3.707981e-001f, -7.700922e-001f, 4.137504e-001f, 2.727827e-001f, -7.379222e-001f, 5.286495e-001f, -1.000000e+000f, 7.404409e-001f, 2.741598e-001f, -6.761582e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 5.470198e-002f, -1.292466e-001f, 7.717780e-002f, 3.892390e-001f, -8.819472e-001f, 4.479539e-001f, -1.000000e+000f, 6.414728e-001f, 4.064539e-001f, -8.741890e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.003699e-002f, -1.210170e-001f, 1.087624e-001f, 4.191092e-002f, -2.890621e-001f, 7.214138e-002f, 3.723702e-001f, 4.805189e-001f, 1.220402e-001f, 1.349969e-001f, 4.694792e-001f, -1.000000e+000f, 5.477968e-001f, 3.133612e-001f, -7.895311e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.241038e-002f, -1.293580e-001f, 9.380310e-002f, 3.016291e-001f, -7.762476e-001f, 4.760917e-001f, -1.000000e+000f, 5.290056e-001f, 4.366526e-001f, -9.313585e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.076388e-002f, -5.574482e-002f, 7.668592e-002f, 1.069416e-003f, 2.448689e-002f, 2.346316e-001f, 8.031998e-001f, 6.874476e-001f, 6.793703e-002f, 3.684931e-001f, 4.682345e-001f, -1.000000e+000f, 5.455380e-001f, 3.866581e-001f, -8.746204e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.316133e-002f, -1.298537e-001f, 9.432279e-002f, 2.956720e-001f, -7.685559e-001f, 4.777237e-001f, -1.000000e+000f, 5.270024e-001f, 4.422965e-001f, -9.375676e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.864339e-002f, -5.905748e-002f, 9.321385e-002f, 1.085218e-002f, -1.133083e-001f, 2.033767e-001f, 6.343972e-001f, 5.090702e-001f, 2.026463e-001f, 6.091521e-001f, 4.525044e-001f, -1.000000e+000f, 5.623503e-001f, 3.581821e-001f, -8.462282e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.329948e-002f, -1.303921e-001f, 9.438994e-002f, 2.987645e-001f, -7.713093e-001f, 4.790076e-001f, -1.000000e+000f, 5.255169e-001f, 4.460798e-001f, -9.416576e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 1.231192e-002f, -4.938000e-002f, 8.487310e-002f, 3.780810e-002f, -1.107288e-001f, 1.343978e-001f, 5.181679e-001f, 5.157406e-001f, 1.272985e-001f, 4.844114e-001f, 4.498770e-001f, -1.000000e+000f, 5.587201e-001f, 4.015415e-001f, -8.956014e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -8.248175e-002f, 2.254307e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 7.299231e-003f, 1.322969e-002f, 7.951712e-002f, 8.628813e-002f, 1.143682e-001f, 4.712446e-002f, 2.462852e-001f, 4.383482e-001f, 1.391429e-001f, 5.273991e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.107624e-002f, 7.237753e-002f, 6.213809e-002f, 5.512362e-002f, 3.317500e-001f, 5.848558e-001f, -7.604897e-001f, 8.577882e-001f, 2.537241e-001f, -5.902246e-002f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.872413e-002f, 7.675693e-003f, 4.989361e-002f, 3.063496e-003f, -7.827442e-002f, 2.934098e-001f, 1.000000e+000f, 8.520639e-001f, 1.911932e-001f, 6.091349e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.916134e-002f, 7.174061e-002f, 6.714972e-002f, 3.470970e-003f, 8.330199e-002f, 5.907849e-001f, -1.000000e+000f, 8.306850e-001f, 1.192604e-001f, 5.211774e-002f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 9.691752e-003f, -4.075860e-002f, 4.949910e-002f, 1.779908e-001f, -5.938508e-001f, 6.346079e-001f, -1.000000e+000f, 9.239845e-001f, 2.503998e-001f, -5.295633e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 8.920424e-003f, 3.927576e-002f, 4.421797e-002f, 3.112687e-002f, -1.453376e-001f, 4.799531e-001f, -1.000000e+000f, 6.195980e-001f, 8.692824e-002f, -3.968380e-001f, 4.447970e-001f, -6.181277e-001f, 1.000000e+000f, 1.820983e-001f, -5.237302e-002f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.771267e-002f, -4.838417e-002f, 4.606491e-002f, 1.269954e-001f, -5.039493e-001f, 5.827353e-001f, 3.987887e-001f, 1.000000e+000f, 1.436550e-001f, 2.297361e-002f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.038863e-002f, 6.838832e-002f, 1.370442e-001f, 8.975534e-002f, -4.440737e-002f, 7.704020e-002f, -1.992882e-001f, 3.457393e-001f, 2.162287e-001f, 4.396796e-002f, 4.634384e-001f, -1.000000e+000f, 5.881193e-001f, 3.086457e-001f, -7.722259e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 7.224555e-003f, -3.692310e-002f, 5.009665e-002f, 2.832847e-001f, -7.489848e-001f, 6.132882e-001f, -1.000000e+000f, 7.454976e-001f, 4.008527e-001f, -6.309755e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.276708e-002f, 5.355973e-002f, 6.145675e-002f, 5.089868e-002f, 1.376021e-001f, 3.921130e-001f, -8.363154e-001f, 4.729935e-001f, 2.414235e-001f, -6.942694e-001f, 6.556432e-001f, -8.937498e-001f, 1.000000e+000f, 2.554845e-001f, -2.257429e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.465894e-002f, -1.322274e-002f, 6.036019e-002f, 3.318532e-002f, -1.997380e-001f, 4.051536e-001f, -1.000000e+000f, 7.689802e-001f, 2.636600e-001f, -7.259510e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.521021e-002f, 7.781033e-002f, 9.953987e-002f, 1.694249e-003f, -4.840224e-002f, 2.999157e-001f, -5.327490e-001f, 5.396933e-001f, 1.948297e-001f, -7.886089e-002f, 4.853404e-001f, -1.000000e+000f, 5.350663e-001f, 3.386258e-001f, -8.129204e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 3.821219e-002f, -6.235666e-002f, 7.121515e-002f, 2.748488e-001f, -7.406583e-001f, 4.872455e-001f, -1.000000e+000f, 6.562890e-001f, 3.572567e-001f, -6.446543e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 3.213795e-003f, 2.863675e-002f, 6.379273e-002f, 7.682730e-002f, -3.919090e-001f, 5.253384e-001f, -1.000000e+000f, 8.722765e-001f, 2.084952e-001f, -1.576328e-002f, 4.890235e-001f, -1.000000e+000f, 5.302775e-001f, 3.064975e-001f, -7.723951e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 5.464954e-002f, -1.288390e-001f, 7.681612e-002f, 3.903471e-001f, -8.831010e-001f, 4.463128e-001f, -1.000000e+000f, 6.417296e-001f, 4.079330e-001f, -8.760264e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.486498e-003f, 2.304182e-002f, 8.974718e-002f, 2.543100e-001f, 3.052880e-002f, 3.707981e-001f, -7.700922e-001f, 4.137504e-001f, 2.727827e-001f, -7.379222e-001f, 5.286495e-001f, -1.000000e+000f, 7.404409e-001f, 2.741598e-001f, -6.761582e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 5.470198e-002f, -1.292466e-001f, 7.717780e-002f, 3.892390e-001f, -8.819472e-001f, 4.479539e-001f, -1.000000e+000f, 6.414728e-001f, 4.064539e-001f, -8.741890e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.003699e-002f, -1.210170e-001f, 1.087624e-001f, 4.191092e-002f, -2.890621e-001f, 7.214138e-002f, 3.723702e-001f, 4.805189e-001f, 1.220402e-001f, 1.349969e-001f, 4.694792e-001f, -1.000000e+000f, 5.477968e-001f, 3.133612e-001f, -7.895311e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.283362e-002f, -1.302251e-001f, 9.460316e-002f, 2.982144e-001f, -7.722833e-001f, 4.754297e-001f, -1.000000e+000f, 5.294694e-001f, 4.359147e-001f, -9.308779e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.156845e-002f, -5.613107e-002f, 7.610326e-002f, 1.715359e-004f, 1.798705e-002f, 2.315238e-001f, 7.999486e-001f, 6.910557e-001f, 6.448682e-002f, 3.591102e-001f, 4.670697e-001f, -1.000000e+000f, 5.468197e-001f, 3.802539e-001f, -8.679855e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.316133e-002f, -1.298537e-001f, 9.432279e-002f, 2.956720e-001f, -7.685559e-001f, 4.777237e-001f, -1.000000e+000f, 5.270024e-001f, 4.422965e-001f, -9.375676e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.864339e-002f, -5.905748e-002f, 9.321385e-002f, 1.085218e-002f, -1.133083e-001f, 2.033767e-001f, 6.343972e-001f, 5.090702e-001f, 2.026463e-001f, 6.091521e-001f, 4.525044e-001f, -1.000000e+000f, 5.623503e-001f, 3.581821e-001f, -8.462282e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.316471e-002f, -1.298584e-001f, 9.431700e-002f, 2.956805e-001f, -7.685542e-001f, 4.777359e-001f, -1.000000e+000f, 5.269882e-001f, 4.423482e-001f, -9.376243e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.843076e-002f, -6.341570e-002f, 8.900210e-002f, 1.820251e-002f, -1.747003e-001f, 2.013314e-001f, 6.264716e-001f, 5.135433e-001f, 1.948328e-001f, 5.951583e-001f, 4.520913e-001f, -1.000000e+000f, 5.621690e-001f, 3.618699e-001f, -8.506980e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.329319e-002f, -1.304097e-001f, 9.443313e-002f, 2.986091e-001f, -7.710147e-001f, 4.792510e-001f, -1.000000e+000f, 5.252348e-001f, 4.468253e-001f, -9.424588e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.794434e-004f, 9.948182e-003f, 9.231419e-002f, 7.664200e-002f, 2.152436e-001f, 4.797819e-001f, -1.000000e+000f, 5.210894e-001f, 4.663249e-001f, -9.656705e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -1.136237e-001f, 2.740151e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 7.299231e-003f, 1.322969e-002f, 7.951712e-002f, 8.628813e-002f, 1.143682e-001f, 4.712446e-002f, 2.462852e-001f, 4.383482e-001f, 1.391429e-001f, 5.273991e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.107624e-002f, 7.237753e-002f, 6.213809e-002f, 5.512362e-002f, 3.317500e-001f, 5.848558e-001f, -7.604897e-001f, 8.577882e-001f, 2.537241e-001f, -5.902246e-002f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.872413e-002f, 7.675693e-003f, 4.989361e-002f, 3.063496e-003f, -7.827442e-002f, 2.934098e-001f, 1.000000e+000f, 8.520639e-001f, 1.911932e-001f, 6.091349e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.916134e-002f, 7.174061e-002f, 6.714972e-002f, 3.470970e-003f, 8.330199e-002f, 5.907849e-001f, -1.000000e+000f, 8.306850e-001f, 1.192604e-001f, 5.211774e-002f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.456078e-002f, -2.046903e-002f, 4.209776e-002f, 7.918608e-002f, -3.976338e-001f, 2.278602e-001f, -6.562348e-001f, 1.000000e+000f, 1.992023e-001f, -3.505137e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 9.436260e-003f, 5.344339e-002f, 7.567078e-002f, 1.025212e-002f, -1.431914e-001f, 5.455627e-001f, -1.000000e+000f, 7.337533e-001f, 1.588338e-001f, -1.508957e-002f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 9.691752e-003f, -4.075860e-002f, 4.949910e-002f, 1.779908e-001f, -5.938508e-001f, 6.346079e-001f, -1.000000e+000f, 9.239845e-001f, 2.503998e-001f, -5.295633e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 8.920424e-003f, 3.927576e-002f, 4.421797e-002f, 3.112687e-002f, -1.453376e-001f, 4.799531e-001f, -1.000000e+000f, 6.195980e-001f, 8.692824e-002f, -3.968380e-001f, 4.447970e-001f, -6.181277e-001f, 1.000000e+000f, 1.820983e-001f, -5.237302e-002f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.771267e-002f, -4.838417e-002f, 4.606491e-002f, 1.269954e-001f, -5.039493e-001f, 5.827353e-001f, 3.987887e-001f, 1.000000e+000f, 1.436550e-001f, 2.297361e-002f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.038863e-002f, 6.838832e-002f, 1.370442e-001f, 8.975534e-002f, -4.440737e-002f, 7.704020e-002f, -1.992882e-001f, 3.457393e-001f, 2.162287e-001f, 4.396796e-002f, 4.634384e-001f, -1.000000e+000f, 5.881193e-001f, 3.086457e-001f, -7.722259e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 7.224555e-003f, -3.692310e-002f, 5.009665e-002f, 2.832847e-001f, -7.489848e-001f, 6.132882e-001f, -1.000000e+000f, 7.454976e-001f, 4.008527e-001f, -6.309755e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.276708e-002f, 5.355973e-002f, 6.145675e-002f, 5.089868e-002f, 1.376021e-001f, 3.921130e-001f, -8.363154e-001f, 4.729935e-001f, 2.414235e-001f, -6.942694e-001f, 6.556432e-001f, -8.937498e-001f, 1.000000e+000f, 2.554845e-001f, -2.257429e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.549977e-002f, -6.479643e-002f, 6.854196e-002f, 2.873366e-001f, -7.580410e-001f, 5.571082e-001f, -1.000000e+000f, 6.272390e-001f, 4.118888e-001f, -7.653252e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.909963e-002f, 8.855366e-002f, 1.032582e-001f, 3.767554e-003f, 4.120983e-002f, 3.475121e-001f, -5.014307e-001f, 5.025588e-001f, 2.287335e-001f, -2.028589e-001f, 4.754021e-001f, -1.000000e+000f, 5.531043e-001f, 2.483673e-001f, -7.046253e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.465894e-002f, -1.322274e-002f, 6.036019e-002f, 3.318532e-002f, -1.997380e-001f, 4.051536e-001f, -1.000000e+000f, 7.689802e-001f, 2.636600e-001f, -7.259510e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.521021e-002f, 7.781033e-002f, 9.953987e-002f, 1.694249e-003f, -4.840224e-002f, 2.999157e-001f, -5.327490e-001f, 5.396933e-001f, 1.948297e-001f, -7.886089e-002f, 4.853404e-001f, -1.000000e+000f, 5.350663e-001f, 3.386258e-001f, -8.129204e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 3.821219e-002f, -6.235666e-002f, 7.121515e-002f, 2.748488e-001f, -7.406583e-001f, 4.872455e-001f, -1.000000e+000f, 6.562890e-001f, 3.572567e-001f, -6.446543e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 3.213795e-003f, 2.863675e-002f, 6.379273e-002f, 7.682730e-002f, -3.919090e-001f, 5.253384e-001f, -1.000000e+000f, 8.722765e-001f, 2.084952e-001f, -1.576328e-002f, 4.890235e-001f, -1.000000e+000f, 5.302775e-001f, 3.064975e-001f, -7.723951e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 3.448649e-002f, -1.089045e-001f, 8.648007e-002f, 3.400956e-001f, -8.247035e-001f, 5.197385e-001f, -1.000000e+000f, 5.587891e-001f, 4.505093e-001f, -8.877523e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.742238e-003f, 2.222291e-002f, 7.086593e-002f, 1.905753e-001f, -6.172709e-001f, 5.214478e-001f, -1.000000e+000f, 7.569044e-001f, 2.426146e-001f, 1.761898e-002f, 4.912925e-001f, -1.000000e+000f, 5.280372e-001f, 2.972884e-001f, -7.419663e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 5.464954e-002f, -1.288390e-001f, 7.681612e-002f, 3.903471e-001f, -8.831010e-001f, 4.463128e-001f, -1.000000e+000f, 6.417296e-001f, 4.079330e-001f, -8.760264e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.486498e-003f, 2.304182e-002f, 8.974718e-002f, 2.543100e-001f, 3.052880e-002f, 3.707981e-001f, -7.700922e-001f, 4.137504e-001f, 2.727827e-001f, -7.379222e-001f, 5.286495e-001f, -1.000000e+000f, 7.404409e-001f, 2.741598e-001f, -6.761582e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 5.470198e-002f, -1.292466e-001f, 7.717780e-002f, 3.892390e-001f, -8.819472e-001f, 4.479539e-001f, -1.000000e+000f, 6.414728e-001f, 4.064539e-001f, -8.741890e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.003699e-002f, -1.210170e-001f, 1.087624e-001f, 4.191092e-002f, -2.890621e-001f, 7.214138e-002f, 3.723702e-001f, 4.805189e-001f, 1.220402e-001f, 1.349969e-001f, 4.694792e-001f, -1.000000e+000f, 5.477968e-001f, 3.133612e-001f, -7.895311e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.283362e-002f, -1.302251e-001f, 9.460316e-002f, 2.982144e-001f, -7.722833e-001f, 4.754297e-001f, -1.000000e+000f, 5.294694e-001f, 4.359147e-001f, -9.308779e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.156845e-002f, -5.613107e-002f, 7.610326e-002f, 1.715359e-004f, 1.798705e-002f, 2.315238e-001f, 7.999486e-001f, 6.910557e-001f, 6.448682e-002f, 3.591102e-001f, 4.670697e-001f, -1.000000e+000f, 5.468197e-001f, 3.802539e-001f, -8.679855e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.241038e-002f, -1.293580e-001f, 9.380310e-002f, 3.016291e-001f, -7.762476e-001f, 4.760917e-001f, -1.000000e+000f, 5.290056e-001f, 4.366526e-001f, -9.313585e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.076388e-002f, -5.574482e-002f, 7.668592e-002f, 1.069416e-003f, 2.448689e-002f, 2.346316e-001f, 8.031998e-001f, 6.874476e-001f, 6.793703e-002f, 3.684931e-001f, 4.682345e-001f, -1.000000e+000f, 5.455380e-001f, 3.866581e-001f, -8.746204e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.316133e-002f, -1.298537e-001f, 9.432279e-002f, 2.956720e-001f, -7.685559e-001f, 4.777237e-001f, -1.000000e+000f, 5.270024e-001f, 4.422965e-001f, -9.375676e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.864339e-002f, -5.905748e-002f, 9.321385e-002f, 1.085218e-002f, -1.133083e-001f, 2.033767e-001f, 6.343972e-001f, 5.090702e-001f, 2.026463e-001f, 6.091521e-001f, 4.525044e-001f, -1.000000e+000f, 5.623503e-001f, 3.581821e-001f, -8.462282e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.316471e-002f, -1.298584e-001f, 9.431700e-002f, 2.956805e-001f, -7.685542e-001f, 4.777359e-001f, -1.000000e+000f, 5.269882e-001f, 4.423482e-001f, -9.376243e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.843076e-002f, -6.341570e-002f, 8.900210e-002f, 1.820251e-002f, -1.747003e-001f, 2.013314e-001f, 6.264716e-001f, 5.135433e-001f, 1.948328e-001f, 5.951583e-001f, 4.520913e-001f, -1.000000e+000f, 5.621690e-001f, 3.618699e-001f, -8.506980e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.329948e-002f, -1.303921e-001f, 9.438994e-002f, 2.987645e-001f, -7.713093e-001f, 4.790076e-001f, -1.000000e+000f, 5.255169e-001f, 4.460798e-001f, -9.416576e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 1.231192e-002f, -4.938000e-002f, 8.487310e-002f, 3.780810e-002f, -1.107288e-001f, 1.343978e-001f, 5.181679e-001f, 5.157406e-001f, 1.272985e-001f, 4.844114e-001f, 4.498770e-001f, -1.000000e+000f, 5.587201e-001f, 4.015415e-001f, -8.956014e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.329319e-002f, -1.304097e-001f, 9.443313e-002f, 2.986091e-001f, -7.710147e-001f, 4.792510e-001f, -1.000000e+000f, 5.252348e-001f, 4.468253e-001f, -9.424588e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.794434e-004f, 9.948182e-003f, 9.231419e-002f, 7.664200e-002f, 2.152436e-001f, 4.797819e-001f, -1.000000e+000f, 5.210894e-001f, 4.663249e-001f, -9.656705e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -1.540231e-001f, 3.339852e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 7.299231e-003f, 1.322969e-002f, 7.951712e-002f, 8.628813e-002f, 1.143682e-001f, 4.712446e-002f, 2.462852e-001f, 4.383482e-001f, 1.391429e-001f, 5.273991e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.107624e-002f, 7.237753e-002f, 6.213809e-002f, 5.512362e-002f, 3.317500e-001f, 5.848558e-001f, -7.604897e-001f, 8.577882e-001f, 2.537241e-001f, -5.902246e-002f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.872413e-002f, 7.675693e-003f, 4.989361e-002f, 3.063496e-003f, -7.827442e-002f, 2.934098e-001f, 1.000000e+000f, 8.520639e-001f, 1.911932e-001f, 6.091349e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.916134e-002f, 7.174061e-002f, 6.714972e-002f, 3.470970e-003f, 8.330199e-002f, 5.907849e-001f, -1.000000e+000f, 8.306850e-001f, 1.192604e-001f, 5.211774e-002f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.456078e-002f, -2.046903e-002f, 4.209776e-002f, 7.918608e-002f, -3.976338e-001f, 2.278602e-001f, -6.562348e-001f, 1.000000e+000f, 1.992023e-001f, -3.505137e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 9.436260e-003f, 5.344339e-002f, 7.567078e-002f, 1.025212e-002f, -1.431914e-001f, 5.455627e-001f, -1.000000e+000f, 7.337533e-001f, 1.588338e-001f, -1.508957e-002f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 9.691752e-003f, -4.075860e-002f, 4.949910e-002f, 1.779908e-001f, -5.938508e-001f, 6.346079e-001f, -1.000000e+000f, 9.239845e-001f, 2.503998e-001f, -5.295633e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 8.920424e-003f, 3.927576e-002f, 4.421797e-002f, 3.112687e-002f, -1.453376e-001f, 4.799531e-001f, -1.000000e+000f, 6.195980e-001f, 8.692824e-002f, -3.968380e-001f, 4.447970e-001f, -6.181277e-001f, 1.000000e+000f, 1.820983e-001f, -5.237302e-002f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.771267e-002f, -4.838417e-002f, 4.606491e-002f, 1.269954e-001f, -5.039493e-001f, 5.827353e-001f, 3.987887e-001f, 1.000000e+000f, 1.436550e-001f, 2.297361e-002f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.038863e-002f, 6.838832e-002f, 1.370442e-001f, 8.975534e-002f, -4.440737e-002f, 7.704020e-002f, -1.992882e-001f, 3.457393e-001f, 2.162287e-001f, 4.396796e-002f, 4.634384e-001f, -1.000000e+000f, 5.881193e-001f, 3.086457e-001f, -7.722259e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 7.224555e-003f, -3.692310e-002f, 5.009665e-002f, 2.832847e-001f, -7.489848e-001f, 6.132882e-001f, -1.000000e+000f, 7.454976e-001f, 4.008527e-001f, -6.309755e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.276708e-002f, 5.355973e-002f, 6.145675e-002f, 5.089868e-002f, 1.376021e-001f, 3.921130e-001f, -8.363154e-001f, 4.729935e-001f, 2.414235e-001f, -6.942694e-001f, 6.556432e-001f, -8.937498e-001f, 1.000000e+000f, 2.554845e-001f, -2.257429e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.549977e-002f, -6.479643e-002f, 6.854196e-002f, 2.873366e-001f, -7.580410e-001f, 5.571082e-001f, -1.000000e+000f, 6.272390e-001f, 4.118888e-001f, -7.653252e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.909963e-002f, 8.855366e-002f, 1.032582e-001f, 3.767554e-003f, 4.120983e-002f, 3.475121e-001f, -5.014307e-001f, 5.025588e-001f, 2.287335e-001f, -2.028589e-001f, 4.754021e-001f, -1.000000e+000f, 5.531043e-001f, 2.483673e-001f, -7.046253e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.465894e-002f, -1.322274e-002f, 6.036019e-002f, 3.318532e-002f, -1.997380e-001f, 4.051536e-001f, -1.000000e+000f, 7.689802e-001f, 2.636600e-001f, -7.259510e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.521021e-002f, 7.781033e-002f, 9.953987e-002f, 1.694249e-003f, -4.840224e-002f, 2.999157e-001f, -5.327490e-001f, 5.396933e-001f, 1.948297e-001f, -7.886089e-002f, 4.853404e-001f, -1.000000e+000f, 5.350663e-001f, 3.386258e-001f, -8.129204e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 3.821219e-002f, -6.235666e-002f, 7.121515e-002f, 2.748488e-001f, -7.406583e-001f, 4.872455e-001f, -1.000000e+000f, 6.562890e-001f, 3.572567e-001f, -6.446543e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 3.213795e-003f, 2.863675e-002f, 6.379273e-002f, 7.682730e-002f, -3.919090e-001f, 5.253384e-001f, -1.000000e+000f, 8.722765e-001f, 2.084952e-001f, -1.576328e-002f, 4.890235e-001f, -1.000000e+000f, 5.302775e-001f, 3.064975e-001f, -7.723951e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 3.448649e-002f, -1.089045e-001f, 8.648007e-002f, 3.400956e-001f, -8.247035e-001f, 5.197385e-001f, -1.000000e+000f, 5.587891e-001f, 4.505093e-001f, -8.877523e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.742238e-003f, 2.222291e-002f, 7.086593e-002f, 1.905753e-001f, -6.172709e-001f, 5.214478e-001f, -1.000000e+000f, 7.569044e-001f, 2.426146e-001f, 1.761898e-002f, 4.912925e-001f, -1.000000e+000f, 5.280372e-001f, 2.972884e-001f, -7.419663e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 5.464954e-002f, -1.288390e-001f, 7.681612e-002f, 3.903471e-001f, -8.831010e-001f, 4.463128e-001f, -1.000000e+000f, 6.417296e-001f, 4.079330e-001f, -8.760264e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.486498e-003f, 2.304182e-002f, 8.974718e-002f, 2.543100e-001f, 3.052880e-002f, 3.707981e-001f, -7.700922e-001f, 4.137504e-001f, 2.727827e-001f, -7.379222e-001f, 5.286495e-001f, -1.000000e+000f, 7.404409e-001f, 2.741598e-001f, -6.761582e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 5.470198e-002f, -1.292466e-001f, 7.717780e-002f, 3.892390e-001f, -8.819472e-001f, 4.479539e-001f, -1.000000e+000f, 6.414728e-001f, 4.064539e-001f, -8.741890e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.003699e-002f, -1.210170e-001f, 1.087624e-001f, 4.191092e-002f, -2.890621e-001f, 7.214138e-002f, 3.723702e-001f, 4.805189e-001f, 1.220402e-001f, 1.349969e-001f, 4.694792e-001f, -1.000000e+000f, 5.477968e-001f, 3.133612e-001f, -7.895311e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.283362e-002f, -1.302251e-001f, 9.460316e-002f, 2.982144e-001f, -7.722833e-001f, 4.754297e-001f, -1.000000e+000f, 5.294694e-001f, 4.359147e-001f, -9.308779e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.156845e-002f, -5.613107e-002f, 7.610326e-002f, 1.715359e-004f, 1.798705e-002f, 2.315238e-001f, 7.999486e-001f, 6.910557e-001f, 6.448682e-002f, 3.591102e-001f, 4.670697e-001f, -1.000000e+000f, 5.468197e-001f, 3.802539e-001f, -8.679855e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.241038e-002f, -1.293580e-001f, 9.380310e-002f, 3.016291e-001f, -7.762476e-001f, 4.760917e-001f, -1.000000e+000f, 5.290056e-001f, 4.366526e-001f, -9.313585e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.076388e-002f, -5.574482e-002f, 7.668592e-002f, 1.069416e-003f, 2.448689e-002f, 2.346316e-001f, 8.031998e-001f, 6.874476e-001f, 6.793703e-002f, 3.684931e-001f, 4.682345e-001f, -1.000000e+000f, 5.455380e-001f, 3.866581e-001f, -8.746204e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.316133e-002f, -1.298537e-001f, 9.432279e-002f, 2.956720e-001f, -7.685559e-001f, 4.777237e-001f, -1.000000e+000f, 5.270024e-001f, 4.422965e-001f, -9.375676e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.864339e-002f, -5.905748e-002f, 9.321385e-002f, 1.085218e-002f, -1.133083e-001f, 2.033767e-001f, 6.343972e-001f, 5.090702e-001f, 2.026463e-001f, 6.091521e-001f, 4.525044e-001f, -1.000000e+000f, 5.623503e-001f, 3.581821e-001f, -8.462282e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.316471e-002f, -1.298584e-001f, 9.431700e-002f, 2.956805e-001f, -7.685542e-001f, 4.777359e-001f, -1.000000e+000f, 5.269882e-001f, 4.423482e-001f, -9.376243e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.843076e-002f, -6.341570e-002f, 8.900210e-002f, 1.820251e-002f, -1.747003e-001f, 2.013314e-001f, 6.264716e-001f, 5.135433e-001f, 1.948328e-001f, 5.951583e-001f, 4.520913e-001f, -1.000000e+000f, 5.621690e-001f, 3.618699e-001f, -8.506980e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.329948e-002f, -1.303921e-001f, 9.438994e-002f, 2.987645e-001f, -7.713093e-001f, 4.790076e-001f, -1.000000e+000f, 5.255169e-001f, 4.460798e-001f, -9.416576e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 1.231192e-002f, -4.938000e-002f, 8.487310e-002f, 3.780810e-002f, -1.107288e-001f, 1.343978e-001f, 5.181679e-001f, 5.157406e-001f, 1.272985e-001f, 4.844114e-001f, 4.498770e-001f, -1.000000e+000f, 5.587201e-001f, 4.015415e-001f, -8.956014e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.329319e-002f, -1.304097e-001f, 9.443313e-002f, 2.986091e-001f, -7.710147e-001f, 4.792510e-001f, -1.000000e+000f, 5.252348e-001f, 4.468253e-001f, -9.424588e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.794434e-004f, 9.948182e-003f, 9.231419e-002f, 7.664200e-002f, 2.152436e-001f, 4.797819e-001f, -1.000000e+000f, 5.210894e-001f, 4.663249e-001f, -9.656705e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.062227e-001f, 4.081435e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  7.299231e-003f, 1.322969e-002f, 7.951712e-002f, 8.628813e-002f, 1.143682e-001f, 4.712446e-002f, 2.462852e-001f, 4.383482e-001f, 1.391429e-001f, 5.273991e-001f, 2.107624e-002f, 7.237753e-002f, 6.213809e-002f, 5.512362e-002f, 3.317500e-001f, 5.848558e-001f, -7.604897e-001f, 8.577882e-001f, 2.537241e-001f, -5.902246e-002f,
  0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  2.872413e-002f, 7.675693e-003f, 4.989361e-002f, 3.063496e-003f, -7.827442e-002f, 2.934098e-001f, 1.000000e+000f, 8.520639e-001f, 1.911932e-001f, 6.091349e-001f, 1.916134e-002f, 7.174061e-002f, 6.714972e-002f, 3.470970e-003f, 8.330199e-002f, 5.907849e-001f, -1.000000e+000f, 8.306850e-001f, 1.192604e-001f, 5.211774e-002f,
  2.456078e-002f, -2.046903e-002f, 4.209776e-002f, 7.918608e-002f, -3.976338e-001f, 2.278602e-001f, -6.562348e-001f, 1.000000e+000f, 1.992023e-001f, -3.505137e-001f, 9.436260e-003f, 5.344339e-002f, 7.567078e-002f, 1.025212e-002f, -1.431914e-001f, 5.455627e-001f, -1.000000e+000f, 7.337533e-001f, 1.588338e-001f, -1.508957e-002f,
  8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  9.691752e-003f, -4.075860e-002f, 4.949910e-002f, 1.779908e-001f, -5.938508e-001f, 6.346079e-001f, -1.000000e+000f, 9.239845e-001f, 2.503998e-001f, -5.295633e-001f, 8.920424e-003f, 3.927576e-002f, 4.421797e-002f, 3.112687e-002f, -1.453376e-001f, 4.799531e-001f, -1.000000e+000f, 6.195980e-001f, 8.692824e-002f, -3.968380e-001f, 4.447970e-001f, -6.181277e-001f, 1.000000e+000f, 1.820983e-001f, -5.237302e-002f,
  2.771267e-002f, -4.838417e-002f, 4.606491e-002f, 1.269954e-001f, -5.039493e-001f, 5.827353e-001f, 3.987887e-001f, 1.000000e+000f, 1.436550e-001f, 2.297361e-002f, 1.038863e-002f, 6.838832e-002f, 1.370442e-001f, 8.975534e-002f, -4.440737e-002f, 7.704020e-002f, -1.992882e-001f, 3.457393e-001f, 2.162287e-001f, 4.396796e-002f, 4.634384e-001f, -1.000000e+000f, 5.881193e-001f, 3.086457e-001f, -7.722259e-001f,
  2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  7.224555e-003f, -3.692310e-002f, 5.009665e-002f, 2.832847e-001f, -7.489848e-001f, 6.132882e-001f, -1.000000e+000f, 7.454976e-001f, 4.008527e-001f, -6.309755e-001f, 1.276708e-002f, 5.355973e-002f, 6.145675e-002f, 5.089868e-002f, 1.376021e-001f, 3.921130e-001f, -8.363154e-001f, 4.729935e-001f, 2.414235e-001f, -6.942694e-001f, 6.556432e-001f, -8.937498e-001f, 1.000000e+000f, 2.554845e-001f, -2.257429e-001f,
  1.549977e-002f, -6.479643e-002f, 6.854196e-002f, 2.873366e-001f, -7.580410e-001f, 5.571082e-001f, -1.000000e+000f, 6.272390e-001f, 4.118888e-001f, -7.653252e-001f, 1.909963e-002f, 8.855366e-002f, 1.032582e-001f, 3.767554e-003f, 4.120983e-002f, 3.475121e-001f, -5.014307e-001f, 5.025588e-001f, 2.287335e-001f, -2.028589e-001f, 4.754021e-001f, -1.000000e+000f, 5.531043e-001f, 2.483673e-001f, -7.046253e-001f,
  3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  1.465894e-002f, -1.322274e-002f, 6.036019e-002f, 3.318532e-002f, -1.997380e-001f, 4.051536e-001f, -1.000000e+000f, 7.689802e-001f, 2.636600e-001f, -7.259510e-001f, 1.521021e-002f, 7.781033e-002f, 9.953987e-002f, 1.694249e-003f, -4.840224e-002f, 2.999157e-001f, -5.327490e-001f, 5.396933e-001f, 1.948297e-001f, -7.886089e-002f, 4.853404e-001f, -1.000000e+000f, 5.350663e-001f, 3.386258e-001f, -8.129204e-001f,
  3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  3.821219e-002f, -6.235666e-002f, 7.121515e-002f, 2.748488e-001f, -7.406583e-001f, 4.872455e-001f, -1.000000e+000f, 6.562890e-001f, 3.572567e-001f, -6.446543e-001f, 3.213795e-003f, 2.863675e-002f, 6.379273e-002f, 7.682730e-002f, -3.919090e-001f, 5.253384e-001f, -1.000000e+000f, 8.722765e-001f, 2.084952e-001f, -1.576328e-002f, 4.890235e-001f, -1.000000e+000f, 5.302775e-001f, 3.064975e-001f, -7.723951e-001f,
  3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  3.448649e-002f, -1.089045e-001f, 8.648007e-002f, 3.400956e-001f, -8.247035e-001f, 5.197385e-001f, -1.000000e+000f, 5.587891e-001f, 4.505093e-001f, -8.877523e-001f, 1.742238e-003f, 2.222291e-002f, 7.086593e-002f, 1.905753e-001f, -6.172709e-001f, 5.214478e-001f, -1.000000e+000f, 7.569044e-001f, 2.426146e-001f, 1.761898e-002f, 4.912925e-001f, -1.000000e+000f, 5.280372e-001f, 2.972884e-001f, -7.419663e-001f,
  3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  5.464954e-002f, -1.288390e-001f, 7.681612e-002f, 3.903471e-001f, -8.831010e-001f, 4.463128e-001f, -1.000000e+000f, 6.417296e-001f, 4.079330e-001f, -8.760264e-001f, 1.486498e-003f, 2.304182e-002f, 8.974718e-002f, 2.543100e-001f, 3.052880e-002f, 3.707981e-001f, -7.700922e-001f, 4.137504e-001f, 2.727827e-001f, -7.379222e-001f, 5.286495e-001f, -1.000000e+000f, 7.404409e-001f, 2.741598e-001f, -6.761582e-001f,
  5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  5.470198e-002f, -1.292466e-001f, 7.717780e-002f, 3.892390e-001f, -8.819472e-001f, 4.479539e-001f, -1.000000e+000f, 6.414728e-001f, 4.064539e-001f, -8.741890e-001f, 6.003699e-002f, -1.210170e-001f, 1.087624e-001f, 4.191092e-002f, -2.890621e-001f, 7.214138e-002f, 3.723702e-001f, 4.805189e-001f, 1.220402e-001f, 1.349969e-001f, 4.694792e-001f, -1.000000e+000f, 5.477968e-001f, 3.133612e-001f, -7.895311e-001f,
  6.283362e-002f, -1.302251e-001f, 9.460316e-002f, 2.982144e-001f, -7.722833e-001f, 4.754297e-001f, -1.000000e+000f, 5.294694e-001f, 4.359147e-001f, -9.308779e-001f, 2.156845e-002f, -5.613107e-002f, 7.610326e-002f, 1.715359e-004f, 1.798705e-002f, 2.315238e-001f, 7.999486e-001f, 6.910557e-001f, 6.448682e-002f, 3.591102e-001f, 4.670697e-001f, -1.000000e+000f, 5.468197e-001f, 3.802539e-001f, -8.679855e-001f,
  6.241038e-002f, -1.293580e-001f, 9.380310e-002f, 3.016291e-001f, -7.762476e-001f, 4.760917e-001f, -1.000000e+000f, 5.290056e-001f, 4.366526e-001f, -9.313585e-001f, 2.076388e-002f, -5.574482e-002f, 7.668592e-002f, 1.069416e-003f, 2.448689e-002f, 2.346316e-001f, 8.031998e-001f, 6.874476e-001f, 6.793703e-002f, 3.684931e-001f, 4.682345e-001f, -1.000000e+000f, 5.455380e-001f, 3.866581e-001f, -8.746204e-001f,
  6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  6.316133e-002f, -1.298537e-001f, 9.432279e-002f, 2.956720e-001f, -7.685559e-001f, 4.777237e-001f, -1.000000e+000f, 5.270024e-001f, 4.422965e-001f, -9.375676e-001f, 1.864339e-002f, -5.905748e-002f, 9.321385e-002f, 1.085218e-002f, -1.133083e-001f, 2.033767e-001f, 6.343972e-001f, 5.090702e-001f, 2.026463e-001f, 6.091521e-001f, 4.525044e-001f, -1.000000e+000f, 5.623503e-001f, 3.581821e-001f, -8.462282e-001f,
  6.316471e-002f, -1.298584e-001f, 9.431700e-002f, 2.956805e-001f, -7.685542e-001f, 4.777359e-001f, -1.000000e+000f, 5.269882e-001f, 4.423482e-001f, -9.376243e-001f, 1.843076e-002f, -6.341570e-002f, 8.900210e-002f, 1.820251e-002f, -1.747003e-001f, 2.013314e-001f, 6.264716e-001f, 5.135433e-001f, 1.948328e-001f, 5.951583e-001f, 4.520913e-001f, -1.000000e+000f, 5.621690e-001f, 3.618699e-001f, -8.506980e-001f,
  6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  6.329948e-002f, -1.303921e-001f, 9.438994e-002f, 2.987645e-001f, -7.713093e-001f, 4.790076e-001f, -1.000000e+000f, 5.255169e-001f, 4.460798e-001f, -9.416576e-001f, 1.231192e-002f, -4.938000e-002f, 8.487310e-002f, 3.780810e-002f, -1.107288e-001f, 1.343978e-001f, 5.181679e-001f, 5.157406e-001f, 1.272985e-001f, 4.844114e-001f, 4.498770e-001f, -1.000000e+000f, 5.587201e-001f, 4.015415e-001f, -8.956014e-001f,
  6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  6.329319e-002f, -1.304097e-001f, 9.443313e-002f, 2.986091e-001f, -7.710147e-001f, 4.792510e-001f, -1.000000e+000f, 5.252348e-001f, 4.468253e-001f, -9.424588e-001f, 2.794434e-004f, 9.948182e-003f, 9.231419e-002f, 7.664200e-002f, 2.152436e-001f, 4.797819e-001f, -1.000000e+000f, 5.210894e-001f, 4.663249e-001f, -9.656705e-001f,
  6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 7.299231e-003f, 1.322969e-002f, 7.951712e-002f, 8.628813e-002f, 1.143682e-001f, 4.712446e-002f, 2.462852e-001f, 4.383482e-001f, 1.391429e-001f, 5.273991e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.107624e-002f, 7.237753e-002f, 6.213809e-002f, 5.512362e-002f, 3.317500e-001f, 5.848558e-001f, -7.604897e-001f, 8.577882e-001f, 2.537241e-001f, -5.902246e-002f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.872413e-002f, 7.675693e-003f, 4.989361e-002f, 3.063496e-003f, -7.827442e-002f, 2.934098e-001f, 1.000000e+000f, 8.520639e-001f, 1.911932e-001f, 6.091349e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.916134e-002f, 7.174061e-002f, 6.714972e-002f, 3.470970e-003f, 8.330199e-002f, 5.907849e-001f, -1.000000e+000f, 8.306850e-001f, 1.192604e-001f, 5.211774e-002f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.456078e-002f, -2.046903e-002f, 4.209776e-002f, 7.918608e-002f, -3.976338e-001f, 2.278602e-001f, -6.562348e-001f, 1.000000e+000f, 1.992023e-001f, -3.505137e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 9.436260e-003f, 5.344339e-002f, 7.567078e-002f, 1.025212e-002f, -1.431914e-001f, 5.455627e-001f, -1.000000e+000f, 7.337533e-001f, 1.588338e-001f, -1.508957e-002f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 9.691752e-003f, -4.075860e-002f, 4.949910e-002f, 1.779908e-001f, -5.938508e-001f, 6.346079e-001f, -1.000000e+000f, 9.239845e-001f, 2.503998e-001f, -5.295633e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 8.920424e-003f, 3.927576e-002f, 4.421797e-002f, 3.112687e-002f, -1.453376e-001f, 4.799531e-001f, -1.000000e+000f, 6.195980e-001f, 8.692824e-002f, -3.968380e-001f, 4.447970e-001f, -6.181277e-001f, 1.000000e+000f, 1.820983e-001f, -5.237302e-002f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.771267e-002f, -4.838417e-002f, 4.606491e-002f, 1.269954e-001f, -5.039493e-001f, 5.827353e-001f, 3.987887e-001f, 1.000000e+000f, 1.436550e-001f, 2.297361e-002f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.038863e-002f, 6.838832e-002f, 1.370442e-001f, 8.975534e-002f, -4.440737e-002f, 7.704020e-002f, -1.992882e-001f, 3.457393e-001f, 2.162287e-001f, 4.396796e-002f, 4.634384e-001f, -1.000000e+000f, 5.881193e-001f, 3.086457e-001f, -7.722259e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 7.224555e-003f, -3.692310e-002f, 5.009665e-002f, 2.832847e-001f, -7.489848e-001f, 6.132882e-001f, -1.000000e+000f, 7.454976e-001f, 4.008527e-001f, -6.309755e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.276708e-002f, 5.355973e-002f, 6.145675e-002f, 5.089868e-002f, 1.376021e-001f, 3.921130e-001f, -8.363154e-001f, 4.729935e-001f, 2.414235e-001f, -6.942694e-001f, 6.556432e-001f, -8.937498e-001f, 1.000000e+000f, 2.554845e-001f, -2.257429e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.549977e-002f, -6.479643e-002f, 6.854196e-002f, 2.873366e-001f, -7.580410e-001f, 5.571082e-001f, -1.000000e+000f, 6.272390e-001f, 4.118888e-001f, -7.653252e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.909963e-002f, 8.855366e-002f, 1.032582e-001f, 3.767554e-003f, 4.120983e-002f, 3.475121e-001f, -5.014307e-001f, 5.025588e-001f, 2.287335e-001f, -2.028589e-001f, 4.754021e-001f, -1.000000e+000f, 5.531043e-001f, 2.483673e-001f, -7.046253e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.465894e-002f, -1.322274e-002f, 6.036019e-002f, 3.318532e-002f, -1.997380e-001f, 4.051536e-001f, -1.000000e+000f, 7.689802e-001f, 2.636600e-001f, -7.259510e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.521021e-002f, 7.781033e-002f, 9.953987e-002f, 1.694249e-003f, -4.840224e-002f, 2.999157e-001f, -5.327490e-001f, 5.396933e-001f, 1.948297e-001f, -7.886089e-002f, 4.853404e-001f, -1.000000e+000f, 5.350663e-001f, 3.386258e-001f, -8.129204e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 3.821219e-002f, -6.235666e-002f, 7.121515e-002f, 2.748488e-001f, -7.406583e-001f, 4.872455e-001f, -1.000000e+000f, 6.562890e-001f, 3.572567e-001f, -6.446543e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 3.213795e-003f, 2.863675e-002f, 6.379273e-002f, 7.682730e-002f, -3.919090e-001f, 5.253384e-001f, -1.000000e+000f, 8.722765e-001f, 2.084952e-001f, -1.576328e-002f, 4.890235e-001f, -1.000000e+000f, 5.302775e-001f, 3.064975e-001f, -7.723951e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 3.448649e-002f, -1.089045e-001f, 8.648007e-002f, 3.400956e-001f, -8.247035e-001f, 5.197385e-001f, -1.000000e+000f, 5.587891e-001f, 4.505093e-001f, -8.877523e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.742238e-003f, 2.222291e-002f, 7.086593e-002f, 1.905753e-001f, -6.172709e-001f, 5.214478e-001f, -1.000000e+000f, 7.569044e-001f, 2.426146e-001f, 1.761898e-002f, 4.912925e-001f, -1.000000e+000f, 5.280372e-001f, 2.972884e-001f, -7.419663e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 5.464954e-002f, -1.288390e-001f, 7.681612e-002f, 3.903471e-001f, -8.831010e-001f, 4.463128e-001f, -1.000000e+000f, 6.417296e-001f, 4.079330e-001f, -8.760264e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.486498e-003f, 2.304182e-002f, 8.974718e-002f, 2.543100e-001f, 3.052880e-002f, 3.707981e-001f, -7.700922e-001f, 4.137504e-001f, 2.727827e-001f, -7.379222e-001f, 5.286495e-001f, -1.000000e+000f, 7.404409e-001f, 2.741598e-001f, -6.761582e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 5.470198e-002f, -1.292466e-001f, 7.717780e-002f, 3.892390e-001f, -8.819472e-001f, 4.479539e-001f, -1.000000e+000f, 6.414728e-001f, 4.064539e-001f, -8.741890e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.003699e-002f, -1.210170e-001f, 1.087624e-001f, 4.191092e-002f, -2.890621e-001f, 7.214138e-002f, 3.723702e-001f, 4.805189e-001f, 1.220402e-001f, 1.349969e-001f, 4.694792e-001f, -1.000000e+000f, 5.477968e-001f, 3.133612e-001f, -7.895311e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.283362e-002f, -1.302251e-001f, 9.460316e-002f, 2.982144e-001f, -7.722833e-001f, 4.754297e-001f, -1.000000e+000f, 5.294694e-001f, 4.359147e-001f, -9.308779e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.156845e-002f, -5.613107e-002f, 7.610326e-002f, 1.715359e-004f, 1.798705e-002f, 2.315238e-001f, 7.999486e-001f, 6.910557e-001f, 6.448682e-002f, 3.591102e-001f, 4.670697e-001f, -1.000000e+000f, 5.468197e-001f, 3.802539e-001f, -8.679855e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.241038e-002f, -1.293580e-001f, 9.380310e-002f, 3.016291e-001f, -7.762476e-001f, 4.760917e-001f, -1.000000e+000f, 5.290056e-001f, 4.366526e-001f, -9.313585e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.076388e-002f, -5.574482e-002f, 7.668592e-002f, 1.069416e-003f, 2.448689e-002f, 2.346316e-001f, 8.031998e-001f, 6.874476e-001f, 6.793703e-002f, 3.684931e-001f, 4.682345e-001f, -1.000000e+000f, 5.455380e-001f, 3.866581e-001f, -8.746204e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.316133e-002f, -1.298537e-001f, 9.432279e-002f, 2.956720e-001f, -7.685559e-001f, 4.777237e-001f, -1.000000e+000f, 5.270024e-001f, 4.422965e-001f, -9.375676e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.864339e-002f, -5.905748e-002f, 9.321385e-002f, 1.085218e-002f, -1.133083e-001f, 2.033767e-001f, 6.343972e-001f, 5.090702e-001f, 2.026463e-001f, 6.091521e-001f, 4.525044e-001f, -1.000000e+000f, 5.623503e-001f, 3.581821e-001f, -8.462282e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.316471e-002f, -1.298584e-001f, 9.431700e-002f, 2.956805e-001f, -7.685542e-001f, 4.777359e-001f, -1.000000e+000f, 5.269882e-001f, 4.423482e-001f, -9.376243e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.843076e-002f, -6.341570e-002f, 8.900210e-002f, 1.820251e-002f, -1.747003e-001f, 2.013314e-001f, 6.264716e-001f, 5.135433e-001f, 1.948328e-001f, 5.951583e-001f, 4.520913e-001f, -1.000000e+000f, 5.621690e-001f, 3.618699e-001f, -8.506980e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.329948e-002f, -1.303921e-001f, 9.438994e-002f, 2.987645e-001f, -7.713093e-001f, 4.790076e-001f, -1.000000e+000f, 5.255169e-001f, 4.460798e-001f, -9.416576e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 1.231192e-002f, -4.938000e-002f, 8.487310e-002f, 3.780810e-002f, -1.107288e-001f, 1.343978e-001f, 5.181679e-001f, 5.157406e-001f, 1.272985e-001f, 4.844114e-001f, 4.498770e-001f, -1.000000e+000f, 5.587201e-001f, 4.015415e-001f, -8.956014e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.329319e-002f, -1.304097e-001f, 9.443313e-002f, 2.986091e-001f, -7.710147e-001f, 4.792510e-001f, -1.000000e+000f, 5.252348e-001f, 4.468253e-001f, -9.424588e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.794434e-004f, 9.948182e-003f, 9.231419e-002f, 7.664200e-002f, 2.152436e-001f, 4.797819e-001f, -1.000000e+000f, 5.210894e-001f, 4.663249e-001f, -9.656705e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.546840e-001f, 4.346461e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 7.299231e-003f, 1.322969e-002f, 7.951712e-002f, 8.628813e-002f, 1.143682e-001f, 4.712446e-002f, 2.462852e-001f, 4.383482e-001f, 1.391429e-001f, 5.273991e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.107624e-002f, 7.237753e-002f, 6.213809e-002f, 5.512362e-002f, 3.317500e-001f, 5.848558e-001f, -7.604897e-001f, 8.577882e-001f, 2.537241e-001f, -5.902246e-002f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.872413e-002f, 7.675693e-003f, 4.989361e-002f, 3.063496e-003f, -7.827442e-002f, 2.934098e-001f, 1.000000e+000f, 8.520639e-001f, 1.911932e-001f, 6.091349e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.916134e-002f, 7.174061e-002f, 6.714972e-002f, 3.470970e-003f, 8.330199e-002f, 5.907849e-001f, -1.000000e+000f, 8.306850e-001f, 1.192604e-001f, 5.211774e-002f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.456078e-002f, -2.046903e-002f, 4.209776e-002f, 7.918608e-002f, -3.976338e-001f, 2.278602e-001f, -6.562348e-001f, 1.000000e+000f, 1.992023e-001f, -3.505137e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 9.436260e-003f, 5.344339e-002f, 7.567078e-002f, 1.025212e-002f, -1.431914e-001f, 5.455627e-001f, -1.000000e+000f, 7.337533e-001f, 1.588338e-001f, -1.508957e-002f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 9.691752e-003f, -4.075860e-002f, 4.949910e-002f, 1.779908e-001f, -5.938508e-001f, 6.346079e-001f, -1.000000e+000f, 9.239845e-001f, 2.503998e-001f, -5.295633e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 8.920424e-003f, 3.927576e-002f, 4.421797e-002f, 3.112687e-002f, -1.453376e-001f, 4.799531e-001f, -1.000000e+000f, 6.195980e-001f, 8.692824e-002f, -3.968380e-001f, 4.447970e-001f, -6.181277e-001f, 1.000000e+000f, 1.820983e-001f, -5.237302e-002f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.771267e-002f, -4.838417e-002f, 4.606491e-002f, 1.269954e-001f, -5.039493e-001f, 5.827353e-001f, 3.987887e-001f, 1.000000e+000f, 1.436550e-001f, 2.297361e-002f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.038863e-002f, 6.838832e-002f, 1.370442e-001f, 8.975534e-002f, -4.440737e-002f, 7.704020e-002f, -1.992882e-001f, 3.457393e-001f, 2.162287e-001f, 4.396796e-002f, 4.634384e-001f, -1.000000e+000f, 5.881193e-001f, 3.086457e-001f, -7.722259e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 7.224555e-003f, -3.692310e-002f, 5.009665e-002f, 2.832847e-001f, -7.489848e-001f, 6.132882e-001f, -1.000000e+000f, 7.454976e-001f, 4.008527e-001f, -6.309755e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.276708e-002f, 5.355973e-002f, 6.145675e-002f, 5.089868e-002f, 1.376021e-001f, 3.921130e-001f, -8.363154e-001f, 4.729935e-001f, 2.414235e-001f, -6.942694e-001f, 6.556432e-001f, -8.937498e-001f, 1.000000e+000f, 2.554845e-001f, -2.257429e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.549977e-002f, -6.479643e-002f, 6.854196e-002f, 2.873366e-001f, -7.580410e-001f, 5.571082e-001f, -1.000000e+000f, 6.272390e-001f, 4.118888e-001f, -7.653252e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.909963e-002f, 8.855366e-002f, 1.032582e-001f, 3.767554e-003f, 4.120983e-002f, 3.475121e-001f, -5.014307e-001f, 5.025588e-001f, 2.287335e-001f, -2.028589e-001f, 4.754021e-001f, -1.000000e+000f, 5.531043e-001f, 2.483673e-001f, -7.046253e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.465894e-002f, -1.322274e-002f, 6.036019e-002f, 3.318532e-002f, -1.997380e-001f, 4.051536e-001f, -1.000000e+000f, 7.689802e-001f, 2.636600e-001f, -7.259510e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.521021e-002f, 7.781033e-002f, 9.953987e-002f, 1.694249e-003f, -4.840224e-002f, 2.999157e-001f, -5.327490e-001f, 5.396933e-001f, 1.948297e-001f, -7.886089e-002f, 4.853404e-001f, -1.000000e+000f, 5.350663e-001f, 3.386258e-001f, -8.129204e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 3.821219e-002f, -6.235666e-002f, 7.121515e-002f, 2.748488e-001f, -7.406583e-001f, 4.872455e-001f, -1.000000e+000f, 6.562890e-001f, 3.572567e-001f, -6.446543e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 3.213795e-003f, 2.863675e-002f, 6.379273e-002f, 7.682730e-002f, -3.919090e-001f, 5.253384e-001f, -1.000000e+000f, 8.722765e-001f, 2.084952e-001f, -1.576328e-002f, 4.890235e-001f, -1.000000e+000f, 5.302775e-001f, 3.064975e-001f, -7.723951e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 3.448649e-002f, -1.089045e-001f, 8.648007e-002f, 3.400956e-001f, -8.247035e-001f, 5.197385e-001f, -1.000000e+000f, 5.587891e-001f, 4.505093e-001f, -8.877523e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.742238e-003f, 2.222291e-002f, 7.086593e-002f, 1.905753e-001f, -6.172709e-001f, 5.214478e-001f, -1.000000e+000f, 7.569044e-001f, 2.426146e-001f, 1.761898e-002f, 4.912925e-001f, -1.000000e+000f, 5.280372e-001f, 2.972884e-001f, -7.419663e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 5.464954e-002f, -1.288390e-001f, 7.681612e-002f, 3.903471e-001f, -8.831010e-001f, 4.463128e-001f, -1.000000e+000f, 6.417296e-001f, 4.079330e-001f, -8.760264e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.486498e-003f, 2.304182e-002f, 8.974718e-002f, 2.543100e-001f, 3.052880e-002f, 3.707981e-001f, -7.700922e-001f, 4.137504e-001f, 2.727827e-001f, -7.379222e-001f, 5.286495e-001f, -1.000000e+000f, 7.404409e-001f, 2.741598e-001f, -6.761582e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 5.470198e-002f, -1.292466e-001f, 7.717780e-002f, 3.892390e-001f, -8.819472e-001f, 4.479539e-001f, -1.000000e+000f, 6.414728e-001f, 4.064539e-001f, -8.741890e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.003699e-002f, -1.210170e-001f, 1.087624e-001f, 4.191092e-002f, -2.890621e-001f, 7.214138e-002f, 3.723702e-001f, 4.805189e-001f, 1.220402e-001f, 1.349969e-001f, 4.694792e-001f, -1.000000e+000f, 5.477968e-001f, 3.133612e-001f, -7.895311e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.283362e-002f, -1.302251e-001f, 9.460316e-002f, 2.982144e-001f, -7.722833e-001f, 4.754297e-001f, -1.000000e+000f, 5.294694e-001f, 4.359147e-001f, -9.308779e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.156845e-002f, -5.613107e-002f, 7.610326e-002f, 1.715359e-004f, 1.798705e-002f, 2.315238e-001f, 7.999486e-001f, 6.910557e-001f, 6.448682e-002f, 3.591102e-001f, 4.670697e-001f, -1.000000e+000f, 5.468197e-001f, 3.802539e-001f, -8.679855e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.241038e-002f, -1.293580e-001f, 9.380310e-002f, 3.016291e-001f, -7.762476e-001f, 4.760917e-001f, -1.000000e+000f, 5.290056e-001f, 4.366526e-001f, -9.313585e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.076388e-002f, -5.574482e-002f, 7.668592e-002f, 1.069416e-003f, 2.448689e-002f, 2.346316e-001f, 8.031998e-001f, 6.874476e-001f, 6.793703e-002f, 3.684931e-001f, 4.682345e-001f, -1.000000e+000f, 5.455380e-001f, 3.866581e-001f, -8.746204e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.316133e-002f, -1.298537e-001f, 9.432279e-002f, 2.956720e-001f, -7.685559e-001f, 4.777237e-001f, -1.000000e+000f, 5.270024e-001f, 4.422965e-001f, -9.375676e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.864339e-002f, -5.905748e-002f, 9.321385e-002f, 1.085218e-002f, -1.133083e-001f, 2.033767e-001f, 6.343972e-001f, 5.090702e-001f, 2.026463e-001f, 6.091521e-001f, 4.525044e-001f, -1.000000e+000f, 5.623503e-001f, 3.581821e-001f, -8.462282e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.316471e-002f, -1.298584e-001f, 9.431700e-002f, 2.956805e-001f, -7.685542e-001f, 4.777359e-001f, -1.000000e+000f, 5.269882e-001f, 4.423482e-001f, -9.376243e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.843076e-002f, -6.341570e-002f, 8.900210e-002f, 1.820251e-002f, -1.747003e-001f, 2.013314e-001f, 6.264716e-001f, 5.135433e-001f, 1.948328e-001f, 5.951583e-001f, 4.520913e-001f, -1.000000e+000f, 5.621690e-001f, 3.618699e-001f, -8.506980e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.329948e-002f, -1.303921e-001f, 9.438994e-002f, 2.987645e-001f, -7.713093e-001f, 4.790076e-001f, -1.000000e+000f, 5.255169e-001f, 4.460798e-001f, -9.416576e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 1.231192e-002f, -4.938000e-002f, 8.487310e-002f, 3.780810e-002f, -1.107288e-001f, 1.343978e-001f, 5.181679e-001f, 5.157406e-001f, 1.272985e-001f, 4.844114e-001f, 4.498770e-001f, -1.000000e+000f, 5.587201e-001f, 4.015415e-001f, -8.956014e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.329319e-002f, -1.304097e-001f, 9.443313e-002f, 2.986091e-001f, -7.710147e-001f, 4.792510e-001f, -1.000000e+000f, 5.252348e-001f, 4.468253e-001f, -9.424588e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.794434e-004f, 9.948182e-003f, 9.231419e-002f, 7.664200e-002f, 2.152436e-001f, 4.797819e-001f, -1.000000e+000f, 5.210894e-001f, 4.663249e-001f, -9.656705e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.357086e-001f, 3.786576e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 7.299231e-003f, 1.322969e-002f, 7.951712e-002f, 8.628813e-002f, 1.143682e-001f, 4.712446e-002f, 2.462852e-001f, 4.383482e-001f, 1.391429e-001f, 5.273991e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.107624e-002f, 7.237753e-002f, 6.213809e-002f, 5.512362e-002f, 3.317500e-001f, 5.848558e-001f, -7.604897e-001f, 8.577882e-001f, 2.537241e-001f, -5.902246e-002f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.872413e-002f, 7.675693e-003f, 4.989361e-002f, 3.063496e-003f, -7.827442e-002f, 2.934098e-001f, 1.000000e+000f, 8.520639e-001f, 1.911932e-001f, 6.091349e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.916134e-002f, 7.174061e-002f, 6.714972e-002f, 3.470970e-003f, 8.330199e-002f, 5.907849e-001f, -1.000000e+000f, 8.306850e-001f, 1.192604e-001f, 5.211774e-002f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 9.691752e-003f, -4.075860e-002f, 4.949910e-002f, 1.779908e-001f, -5.938508e-001f, 6.346079e-001f, -1.000000e+000f, 9.239845e-001f, 2.503998e-001f, -5.295633e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 8.920424e-003f, 3.927576e-002f, 4.421797e-002f, 3.112687e-002f, -1.453376e-001f, 4.799531e-001f, -1.000000e+000f, 6.195980e-001f, 8.692824e-002f, -3.968380e-001f, 4.447970e-001f, -6.181277e-001f, 1.000000e+000f, 1.820983e-001f, -5.237302e-002f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.771267e-002f, -4.838417e-002f, 4.606491e-002f, 1.269954e-001f, -5.039493e-001f, 5.827353e-001f, 3.987887e-001f, 1.000000e+000f, 1.436550e-001f, 2.297361e-002f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.038863e-002f, 6.838832e-002f, 1.370442e-001f, 8.975534e-002f, -4.440737e-002f, 7.704020e-002f, -1.992882e-001f, 3.457393e-001f, 2.162287e-001f, 4.396796e-002f, 4.634384e-001f, -1.000000e+000f, 5.881193e-001f, 3.086457e-001f, -7.722259e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 7.224555e-003f, -3.692310e-002f, 5.009665e-002f, 2.832847e-001f, -7.489848e-001f, 6.132882e-001f, -1.000000e+000f, 7.454976e-001f, 4.008527e-001f, -6.309755e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.276708e-002f, 5.355973e-002f, 6.145675e-002f, 5.089868e-002f, 1.376021e-001f, 3.921130e-001f, -8.363154e-001f, 4.729935e-001f, 2.414235e-001f, -6.942694e-001f, 6.556432e-001f, -8.937498e-001f, 1.000000e+000f, 2.554845e-001f, -2.257429e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.465894e-002f, -1.322274e-002f, 6.036019e-002f, 3.318532e-002f, -1.997380e-001f, 4.051536e-001f, -1.000000e+000f, 7.689802e-001f, 2.636600e-001f, -7.259510e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.521021e-002f, 7.781033e-002f, 9.953987e-002f, 1.694249e-003f, -4.840224e-002f, 2.999157e-001f, -5.327490e-001f, 5.396933e-001f, 1.948297e-001f, -7.886089e-002f, 4.853404e-001f, -1.000000e+000f, 5.350663e-001f, 3.386258e-001f, -8.129204e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 3.821219e-002f, -6.235666e-002f, 7.121515e-002f, 2.748488e-001f, -7.406583e-001f, 4.872455e-001f, -1.000000e+000f, 6.562890e-001f, 3.572567e-001f, -6.446543e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 3.213795e-003f, 2.863675e-002f, 6.379273e-002f, 7.682730e-002f, -3.919090e-001f, 5.253384e-001f, -1.000000e+000f, 8.722765e-001f, 2.084952e-001f, -1.576328e-002f, 4.890235e-001f, -1.000000e+000f, 5.302775e-001f, 3.064975e-001f, -7.723951e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 5.464954e-002f, -1.288390e-001f, 7.681612e-002f, 3.903471e-001f, -8.831010e-001f, 4.463128e-001f, -1.000000e+000f, 6.417296e-001f, 4.079330e-001f, -8.760264e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.486498e-003f, 2.304182e-002f, 8.974718e-002f, 2.543100e-001f, 3.052880e-002f, 3.707981e-001f, -7.700922e-001f, 4.137504e-001f, 2.727827e-001f, -7.379222e-001f, 5.286495e-001f, -1.000000e+000f, 7.404409e-001f, 2.741598e-001f, -6.761582e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 5.470198e-002f, -1.292466e-001f, 7.717780e-002f, 3.892390e-001f, -8.819472e-001f, 4.479539e-001f, -1.000000e+000f, 6.414728e-001f, 4.064539e-001f, -8.741890e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.003699e-002f, -1.210170e-001f, 1.087624e-001f, 4.191092e-002f, -2.890621e-001f, 7.214138e-002f, 3.723702e-001f, 4.805189e-001f, 1.220402e-001f, 1.349969e-001f, 4.694792e-001f, -1.000000e+000f, 5.477968e-001f, 3.133612e-001f, -7.895311e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.283362e-002f, -1.302251e-001f, 9.460316e-002f, 2.982144e-001f, -7.722833e-001f, 4.754297e-001f, -1.000000e+000f, 5.294694e-001f, 4.359147e-001f, -9.308779e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.156845e-002f, -5.613107e-002f, 7.610326e-002f, 1.715359e-004f, 1.798705e-002f, 2.315238e-001f, 7.999486e-001f, 6.910557e-001f, 6.448682e-002f, 3.591102e-001f, 4.670697e-001f, -1.000000e+000f, 5.468197e-001f, 3.802539e-001f, -8.679855e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.316133e-002f, -1.298537e-001f, 9.432279e-002f, 2.956720e-001f, -7.685559e-001f, 4.777237e-001f, -1.000000e+000f, 5.270024e-001f, 4.422965e-001f, -9.375676e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.864339e-002f, -5.905748e-002f, 9.321385e-002f, 1.085218e-002f, -1.133083e-001f, 2.033767e-001f, 6.343972e-001f, 5.090702e-001f, 2.026463e-001f, 6.091521e-001f, 4.525044e-001f, -1.000000e+000f, 5.623503e-001f, 3.581821e-001f, -8.462282e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.316471e-002f, -1.298584e-001f, 9.431700e-002f, 2.956805e-001f, -7.685542e-001f, 4.777359e-001f, -1.000000e+000f, 5.269882e-001f, 4.423482e-001f, -9.376243e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.843076e-002f, -6.341570e-002f, 8.900210e-002f, 1.820251e-002f, -1.747003e-001f, 2.013314e-001f, 6.264716e-001f, 5.135433e-001f, 1.948328e-001f, 5.951583e-001f, 4.520913e-001f, -1.000000e+000f, 5.621690e-001f, 3.618699e-001f, -8.506980e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.329319e-002f, -1.304097e-001f, 9.443313e-002f, 2.986091e-001f, -7.710147e-001f, 4.792510e-001f, -1.000000e+000f, 5.252348e-001f, 4.468253e-001f, -9.424588e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.794434e-004f, 9.948182e-003f, 9.231419e-002f, 7.664200e-002f, 2.152436e-001f, 4.797819e-001f, -1.000000e+000f, 5.210894e-001f, 4.663249e-001f, -9.656705e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.262978e-001f, 3.537012e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 7.299231e-003f, 1.322969e-002f, 7.951712e-002f, 8.628813e-002f, 1.143682e-001f, 4.712446e-002f, 2.462852e-001f, 4.383482e-001f, 1.391429e-001f, 5.273991e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.107624e-002f, 7.237753e-002f, 6.213809e-002f, 5.512362e-002f, 3.317500e-001f, 5.848558e-001f, -7.604897e-001f, 8.577882e-001f, 2.537241e-001f, -5.902246e-002f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.456078e-002f, -2.046903e-002f, 4.209776e-002f, 7.918608e-002f, -3.976338e-001f, 2.278602e-001f, -6.562348e-001f, 1.000000e+000f, 1.992023e-001f, -3.505137e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 9.436260e-003f, 5.344339e-002f, 7.567078e-002f, 1.025212e-002f, -1.431914e-001f, 5.455627e-001f, -1.000000e+000f, 7.337533e-001f, 1.588338e-001f, -1.508957e-002f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 9.691752e-003f, -4.075860e-002f, 4.949910e-002f, 1.779908e-001f, -5.938508e-001f, 6.346079e-001f, -1.000000e+000f, 9.239845e-001f, 2.503998e-001f, -5.295633e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 8.920424e-003f, 3.927576e-002f, 4.421797e-002f, 3.112687e-002f, -1.453376e-001f, 4.799531e-001f, -1.000000e+000f, 6.195980e-001f, 8.692824e-002f, -3.968380e-001f, 4.447970e-001f, -6.181277e-001f, 1.000000e+000f, 1.820983e-001f, -5.237302e-002f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 7.224555e-003f, -3.692310e-002f, 5.009665e-002f, 2.832847e-001f, -7.489848e-001f, 6.132882e-001f, -1.000000e+000f, 7.454976e-001f, 4.008527e-001f, -6.309755e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.276708e-002f, 5.355973e-002f, 6.145675e-002f, 5.089868e-002f, 1.376021e-001f, 3.921130e-001f, -8.363154e-001f, 4.729935e-001f, 2.414235e-001f, -6.942694e-001f, 6.556432e-001f, -8.937498e-001f, 1.000000e+000f, 2.554845e-001f, -2.257429e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.549977e-002f, -6.479643e-002f, 6.854196e-002f, 2.873366e-001f, -7.580410e-001f, 5.571082e-001f, -1.000000e+000f, 6.272390e-001f, 4.118888e-001f, -7.653252e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.909963e-002f, 8.855366e-002f, 1.032582e-001f, 3.767554e-003f, 4.120983e-002f, 3.475121e-001f, -5.014307e-001f, 5.025588e-001f, 2.287335e-001f, -2.028589e-001f, 4.754021e-001f, -1.000000e+000f, 5.531043e-001f, 2.483673e-001f, -7.046253e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 3.821219e-002f, -6.235666e-002f, 7.121515e-002f, 2.748488e-001f, -7.406583e-001f, 4.872455e-001f, -1.000000e+000f, 6.562890e-001f, 3.572567e-001f, -6.446543e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 3.213795e-003f, 2.863675e-002f, 6.379273e-002f, 7.682730e-002f, -3.919090e-001f, 5.253384e-001f, -1.000000e+000f, 8.722765e-001f, 2.084952e-001f, -1.576328e-002f, 4.890235e-001f, -1.000000e+000f, 5.302775e-001f, 3.064975e-001f, -7.723951e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 5.464954e-002f, -1.288390e-001f, 7.681612e-002f, 3.903471e-001f, -8.831010e-001f, 4.463128e-001f, -1.000000e+000f, 6.417296e-001f, 4.079330e-001f, -8.760264e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.486498e-003f, 2.304182e-002f, 8.974718e-002f, 2.543100e-001f, 3.052880e-002f, 3.707981e-001f, -7.700922e-001f, 4.137504e-001f, 2.727827e-001f, -7.379222e-001f, 5.286495e-001f, -1.000000e+000f, 7.404409e-001f, 2.741598e-001f, -6.761582e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 5.470198e-002f, -1.292466e-001f, 7.717780e-002f, 3.892390e-001f, -8.819472e-001f, 4.479539e-001f, -1.000000e+000f, 6.414728e-001f, 4.064539e-001f, -8.741890e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.003699e-002f, -1.210170e-001f, 1.087624e-001f, 4.191092e-002f, -2.890621e-001f, 7.214138e-002f, 3.723702e-001f, 4.805189e-001f, 1.220402e-001f, 1.349969e-001f, 4.694792e-001f, -1.000000e+000f, 5.477968e-001f, 3.133612e-001f, -7.895311e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.241038e-002f, -1.293580e-001f, 9.380310e-002f, 3.016291e-001f, -7.762476e-001f, 4.760917e-001f, -1.000000e+000f, 5.290056e-001f, 4.366526e-001f, -9.313585e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.076388e-002f, -5.574482e-002f, 7.668592e-002f, 1.069416e-003f, 2.448689e-002f, 2.346316e-001f, 8.031998e-001f, 6.874476e-001f, 6.793703e-002f, 3.684931e-001f, 4.682345e-001f, -1.000000e+000f, 5.455380e-001f, 3.866581e-001f, -8.746204e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.316133e-002f, -1.298537e-001f, 9.432279e-002f, 2.956720e-001f, -7.685559e-001f, 4.777237e-001f, -1.000000e+000f, 5.270024e-001f, 4.422965e-001f, -9.375676e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.864339e-002f, -5.905748e-002f, 9.321385e-002f, 1.085218e-002f, -1.133083e-001f, 2.033767e-001f, 6.343972e-001f, 5.090702e-001f, 2.026463e-001f, 6.091521e-001f, 4.525044e-001f, -1.000000e+000f, 5.623503e-001f, 3.581821e-001f, -8.462282e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.329948e-002f, -1.303921e-001f, 9.438994e-002f, 2.987645e-001f, -7.713093e-001f, 4.790076e-001f, -1.000000e+000f, 5.255169e-001f, 4.460798e-001f, -9.416576e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 1.231192e-002f, -4.938000e-002f, 8.487310e-002f, 3.780810e-002f, -1.107288e-001f, 1.343978e-001f, 5.181679e-001f, 5.157406e-001f, 1.272985e-001f, 4.844114e-001f, 4.498770e-001f, -1.000000e+000f, 5.587201e-001f, 4.015415e-001f, -8.956014e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -2.170030e-001f, 3.305514e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 7.299231e-003f, 1.322969e-002f, 7.951712e-002f, 8.628813e-002f, 1.143682e-001f, 4.712446e-002f, 2.462852e-001f, 4.383482e-001f, 1.391429e-001f, 5.273991e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.107624e-002f, 7.237753e-002f, 6.213809e-002f, 5.512362e-002f, 3.317500e-001f, 5.848558e-001f, -7.604897e-001f, 8.577882e-001f, 2.537241e-001f, -5.902246e-002f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.872413e-002f, 7.675693e-003f, 4.989361e-002f, 3.063496e-003f, -7.827442e-002f, 2.934098e-001f, 1.000000e+000f, 8.520639e-001f, 1.911932e-001f, 6.091349e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.916134e-002f, 7.174061e-002f, 6.714972e-002f, 3.470970e-003f, 8.330199e-002f, 5.907849e-001f, -1.000000e+000f, 8.306850e-001f, 1.192604e-001f, 5.211774e-002f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.771267e-002f, -4.838417e-002f, 4.606491e-002f, 1.269954e-001f, -5.039493e-001f, 5.827353e-001f, 3.987887e-001f, 1.000000e+000f, 1.436550e-001f, 2.297361e-002f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.038863e-002f, 6.838832e-002f, 1.370442e-001f, 8.975534e-002f, -4.440737e-002f, 7.704020e-002f, -1.992882e-001f, 3.457393e-001f, 2.162287e-001f, 4.396796e-002f, 4.634384e-001f, -1.000000e+000f, 5.881193e-001f, 3.086457e-001f, -7.722259e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.549977e-002f, -6.479643e-002f, 6.854196e-002f, 2.873366e-001f, -7.580410e-001f, 5.571082e-001f, -1.000000e+000f, 6.272390e-001f, 4.118888e-001f, -7.653252e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.909963e-002f, 8.855366e-002f, 1.032582e-001f, 3.767554e-003f, 4.120983e-002f, 3.475121e-001f, -5.014307e-001f, 5.025588e-001f, 2.287335e-001f, -2.028589e-001f, 4.754021e-001f, -1.000000e+000f, 5.531043e-001f, 2.483673e-001f, -7.046253e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 3.448649e-002f, -1.089045e-001f, 8.648007e-002f, 3.400956e-001f, -8.247035e-001f, 5.197385e-001f, -1.000000e+000f, 5.587891e-001f, 4.505093e-001f, -8.877523e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.742238e-003f, 2.222291e-002f, 7.086593e-002f, 1.905753e-001f, -6.172709e-001f, 5.214478e-001f, -1.000000e+000f, 7.569044e-001f, 2.426146e-001f, 1.761898e-002f, 4.912925e-001f, -1.000000e+000f, 5.280372e-001f, 2.972884e-001f, -7.419663e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 5.464954e-002f, -1.288390e-001f, 7.681612e-002f, 3.903471e-001f, -8.831010e-001f, 4.463128e-001f, -1.000000e+000f, 6.417296e-001f, 4.079330e-001f, -8.760264e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.486498e-003f, 2.304182e-002f, 8.974718e-002f, 2.543100e-001f, 3.052880e-002f, 3.707981e-001f, -7.700922e-001f, 4.137504e-001f, 2.727827e-001f, -7.379222e-001f, 5.286495e-001f, -1.000000e+000f, 7.404409e-001f, 2.741598e-001f, -6.761582e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 6.283362e-002f, -1.302251e-001f, 9.460316e-002f, 2.982144e-001f, -7.722833e-001f, 4.754297e-001f, -1.000000e+000f, 5.294694e-001f, 4.359147e-001f, -9.308779e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.156845e-002f, -5.613107e-002f, 7.610326e-002f, 1.715359e-004f, 1.798705e-002f, 2.315238e-001f, 7.999486e-001f, 6.910557e-001f, 6.448682e-002f, 3.591102e-001f, 4.670697e-001f, -1.000000e+000f, 5.468197e-001f, 3.802539e-001f, -8.679855e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 6.316133e-002f, -1.298537e-001f, 9.432279e-002f, 2.956720e-001f, -7.685559e-001f, 4.777237e-001f, -1.000000e+000f, 5.270024e-001f, 4.422965e-001f, -9.375676e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.864339e-002f, -5.905748e-002f, 9.321385e-002f, 1.085218e-002f, -1.133083e-001f, 2.033767e-001f, 6.343972e-001f, 5.090702e-001f, 2.026463e-001f, 6.091521e-001f, 4.525044e-001f, -1.000000e+000f, 5.623503e-001f, 3.581821e-001f, -8.462282e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.124113e-001f, 3.196079e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 2.872413e-002f, 7.675693e-003f, 4.989361e-002f, 3.063496e-003f, -7.827442e-002f, 2.934098e-001f, 1.000000e+000f, 8.520639e-001f, 1.911932e-001f, 6.091349e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 1.916134e-002f, 7.174061e-002f, 6.714972e-002f, 3.470970e-003f, 8.330199e-002f, 5.907849e-001f, -1.000000e+000f, 8.306850e-001f, 1.192604e-001f, 5.211774e-002f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 2.771267e-002f, -4.838417e-002f, 4.606491e-002f, 1.269954e-001f, -5.039493e-001f, 5.827353e-001f, 3.987887e-001f, 1.000000e+000f, 1.436550e-001f, 2.297361e-002f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 1.038863e-002f, 6.838832e-002f, 1.370442e-001f, 8.975534e-002f, -4.440737e-002f, 7.704020e-002f, -1.992882e-001f, 3.457393e-001f, 2.162287e-001f, 4.396796e-002f, 4.634384e-001f, -1.000000e+000f, 5.881193e-001f, 3.086457e-001f, -7.722259e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 7.224555e-003f, -3.692310e-002f, 5.009665e-002f, 2.832847e-001f, -7.489848e-001f, 6.132882e-001f, -1.000000e+000f, 7.454976e-001f, 4.008527e-001f, -6.309755e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 1.276708e-002f, 5.355973e-002f, 6.145675e-002f, 5.089868e-002f, 1.376021e-001f, 3.921130e-001f, -8.363154e-001f, 4.729935e-001f, 2.414235e-001f, -6.942694e-001f, 6.556432e-001f, -8.937498e-001f, 1.000000e+000f, 2.554845e-001f, -2.257429e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 3.316239e-002f, -7.048367e-002f, 4.888246e-002f, 2.631222e-001f, -7.247992e-001f, 6.526669e-001f, -6.333965e-001f, 1.000000e+000f, 2.960636e-001f, -4.500083e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 2.138547e-003f, 2.379521e-002f, 6.623985e-002f, 1.340859e-001f, -4.986855e-001f, 5.270667e-001f, -1.000000e+000f, 8.301718e-001f, 2.216861e-001f, 5.505732e-003f, 4.890904e-001f, -1.000000e+000f, 5.324927e-001f, 2.977774e-001f, -7.540731e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 3.320860e-002f, -6.184838e-002f, 6.200870e-002f, 2.908190e-001f, -7.626392e-001f, 4.682293e-001f, -1.000000e+000f, 7.004803e-001f, 3.869316e-001f, -6.735731e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 1.032137e-003f, 2.025375e-002f, 9.937716e-002f, 2.402534e-001f, 1.537118e-002f, 3.712405e-001f, -7.590880e-001f, 4.023212e-001f, 2.597828e-001f, -7.207509e-001f, 5.371020e-001f, -1.000000e+000f, 7.293882e-001f, 2.837003e-001f, -6.900016e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 5.469884e-002f, -1.292248e-001f, 7.715943e-002f, 3.892205e-001f, -8.819208e-001f, 4.479435e-001f, -1.000000e+000f, 6.415516e-001f, 4.064142e-001f, -8.741508e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 2.022644e-003f, 2.678377e-002f, 9.056180e-002f, 2.313122e-001f, 1.126542e-001f, 3.705041e-001f, -7.821975e-001f, 4.278763e-001f, 2.917777e-001f, -7.606948e-001f, 5.199534e-001f, -1.000000e+000f, 7.301556e-001f, 2.948076e-001f, -6.819392e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 6.283362e-002f, -1.302251e-001f, 9.460316e-002f, 2.982144e-001f, -7.722833e-001f, 4.754297e-001f, -1.000000e+000f, 5.294694e-001f, 4.359147e-001f, -9.308779e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 2.156845e-002f, -5.613107e-002f, 7.610326e-002f, 1.715359e-004f, 1.798705e-002f, 2.315238e-001f, 7.999486e-001f, 6.910557e-001f, 6.448682e-002f, 3.591102e-001f, 4.670697e-001f, -1.000000e+000f, 5.468197e-001f, 3.802539e-001f, -8.679855e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 6.316471e-002f, -1.298584e-001f, 9.431700e-002f, 2.956805e-001f, -7.685542e-001f, 4.777359e-001f, -1.000000e+000f, 5.269882e-001f, 4.423482e-001f, -9.376243e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 1.843076e-002f, -6.341570e-002f, 8.900210e-002f, 1.820251e-002f, -1.747003e-001f, 2.013314e-001f, 6.264716e-001f, 5.135433e-001f, 1.948328e-001f, 5.951583e-001f, 4.520913e-001f, -1.000000e+000f, 5.621690e-001f, 3.618699e-001f, -8.506980e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 6.326152e-002f, -1.303757e-001f, 9.440086e-002f, 2.987684e-001f, -7.713477e-001f, 4.790258e-001f, -1.000000e+000f, 5.255072e-001f, 4.460817e-001f, -9.416471e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 1.249617e-002f, -4.971910e-002f, 8.734208e-002f, 1.838250e-002f, -5.607350e-002f, 1.545364e-001f, 5.681763e-001f, 5.288413e-001f, 1.413742e-001f, 5.122144e-001f, 4.508059e-001f, -1.000000e+000f, 5.565814e-001f, 4.046914e-001f, -8.996413e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -2.000000e-001f, 0.000000e+000f, -2.000000e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.078623e-001f, 3.090624e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 2.987628e-002f, -5.533500e-002f, 4.989123e-002f, 1.742772e-001f, -5.895022e-001f, 6.591800e-001f, -4.975972e-001f, 1.000000e+000f, 3.380286e-001f, -3.417425e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 1.454064e-002f, 8.835996e-002f, 1.343194e-001f, 5.305588e-002f, 2.130358e-002f, 1.447988e-001f, -2.885179e-001f, 3.708108e-001f, 2.108985e-001f, -6.039225e-002f, 4.506583e-001f, -1.000000e+000f, 5.838358e-001f, 2.932815e-001f, -7.642320e-001f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 3.705491e-002f, -9.860085e-002f, 6.627350e-002f, 3.656083e-001f, -8.546414e-001f, 4.115749e-001f, -1.000000e+000f, 6.693885e-001f, 3.967472e-001f, -8.539600e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 1.544345e-002f, 7.943837e-002f, 1.024153e-001f, 2.063723e-003f, -3.655393e-002f, 2.988824e-001f, -5.027395e-001f, 5.165106e-001f, 2.108004e-001f, -9.812748e-002f, 4.815211e-001f, -1.000000e+000f, 5.414448e-001f, 3.181802e-001f, -7.885978e-001f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 3.821219e-002f, -6.235666e-002f, 7.121515e-002f, 2.748488e-001f, -7.406583e-001f, 4.872455e-001f, -1.000000e+000f, 6.562890e-001f, 3.572567e-001f, -6.446543e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 3.213795e-003f, 2.863675e-002f, 6.379273e-002f, 7.682730e-002f, -3.919090e-001f, 5.253384e-001f, -1.000000e+000f, 8.722765e-001f, 2.084952e-001f, -1.576328e-002f, 4.890235e-001f, -1.000000e+000f, 5.302775e-001f, 3.064975e-001f, -7.723951e-001f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 5.470198e-002f, -1.292466e-001f, 7.717780e-002f, 3.892390e-001f, -8.819472e-001f, 4.479539e-001f, -1.000000e+000f, 6.414728e-001f, 4.064539e-001f, -8.741890e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 6.003699e-002f, -1.210170e-001f, 1.087624e-001f, 4.191092e-002f, -2.890621e-001f, 7.214138e-002f, 3.723702e-001f, 4.805189e-001f, 1.220402e-001f, 1.349969e-001f, 4.694792e-001f, -1.000000e+000f, 5.477968e-001f, 3.133612e-001f, -7.895311e-001f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 6.330285e-002f, -1.304320e-001f, 9.440717e-002f, 2.988093e-001f, -7.714524e-001f, 4.790179e-001f, -1.000000e+000f, 5.255139e-001f, 4.459995e-001f, -9.415582e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 1.582327e-002f, -5.890178e-002f, 8.727484e-002f, 1.019892e-002f, -1.422942e-001f, 1.703982e-001f, 5.913122e-001f, 5.227855e-001f, 1.601169e-001f, 5.454919e-001f, 4.503298e-001f, -1.000000e+000f, 5.637605e-001f, 3.686459e-001f, -8.580702e-001f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 6.331880e-002f, -1.304735e-001f, 9.444273e-002f, 2.988225e-001f, -7.712921e-001f, 4.792395e-001f, -1.000000e+000f, 5.252464e-001f, 4.467535e-001f, -9.423815e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 6.049686e-004f, 3.076338e-003f, 9.248149e-002f, 7.443047e-002f, 1.811879e-001f, 4.795856e-001f, -1.000000e+000f, 5.212945e-001f, 4.664631e-001f, -9.658155e-001f,
  0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.033597e-001f, 2.988988e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 1.344819e-002f, 6.386102e-002f, 7.708874e-002f, 3.912220e-002f, 2.170729e-001f, 1.736589e-001f, -5.447236e-001f, 1.000000e+000f, 2.176588e-001f, 1.430313e-002f,
  0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 2.406629e-002f, 3.335656e-002f, 6.579889e-002f, 1.777725e-002f, 1.845867e-001f, 3.305816e-001f, 7.018573e-001f, 6.406449e-001f, 1.877638e-001f, 4.549571e-001f, 0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 2.467928e-002f, 7.737484e-002f, 6.266716e-002f, 7.266968e-002f, 3.662416e-001f, 5.964150e-001f, -7.846920e-001f, 8.477887e-001f, 2.406813e-001f, -7.001727e-002f,
  0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 8.516581e-003f, -2.962038e-002f, 4.472061e-002f, 1.168010e-001f, -4.823499e-001f, 6.582450e-001f, -8.227053e-001f, 1.000000e+000f, 2.168019e-001f, -4.150082e-001f, 0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 5.217575e-002f, -1.053982e-001f, 6.843560e-002f, 2.017916e-001f, -5.864617e-001f, 2.660313e-001f, 6.587412e-001f, 4.514594e-001f, 2.342072e-001f, 6.061492e-001f, 2.272924e-001f, -3.180451e-001f, 8.679261e-001f, 2.948260e-001f, -1.538300e-001f,
  0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 3.377696e-002f, -1.074652e-001f, 8.595198e-002f, 3.388958e-001f, -8.231035e-001f, 5.202536e-001f, -1.000000e+000f, 5.584208e-001f, 4.507780e-001f, -8.874921e-001f, 0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 2.389080e-005f, 3.025162e-003f, 9.629367e-002f, 2.722895e-001f, 8.415635e-004f, 3.894051e-001f, -7.987970e-001f, 4.241923e-001f, 2.995543e-001f, -7.740209e-001f, 5.409698e-001f, -1.000000e+000f, 6.846093e-001f, 3.605652e-001f, -7.613052e-001f,
  0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 6.330716e-002f, -1.299484e-001f, 9.432673e-002f, 2.956367e-001f, -7.685286e-001f, 4.776961e-001f, -1.000000e+000f, 5.270594e-001f, 4.420764e-001f, -9.373074e-001f, 0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 1.834207e-002f, -5.049994e-002f, 8.230189e-002f, 2.347749e-004f, 1.567427e-002f, 2.114614e-001f, 7.294653e-001f, 6.297144e-001f, 1.092445e-001f, 4.498251e-001f, 4.689770e-001f, -1.000000e+000f, 5.438969e-001f, 3.911887e-001f, -8.801048e-001f,
  0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 6.332334e-002f, -1.303980e-001f, 9.444005e-002f, 2.982785e-001f, -7.706514e-001f, 4.792831e-001f, -1.000000e+000f, 5.251963e-001f, 4.468906e-001f, -9.425281e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -1.989068e-001f, 2.891015e-001f, 0.000000e+000f, -2.734412e-001f, 2.969647e-004f, 2.957347e-003f, 8.718255e-002f, 5.855487e-002f, 1.369986e-001f, 4.798426e-001f, -1.000000e+000f, 5.210130e-001f, 4.663945e-001f, -9.657473e-001f,
  // Total number of coefficients: 11375
  // Maximum number of elevation coefficients: 20



   // Full coefficients
   // 10 degrees loudspeakers
   // 32000 Hz sample rate
    // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:36:22 1999
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 2.819125e-003f, -1.782709e-002f, 7.982192e-002f, 2.552601e-003f, -7.011453e-002f, 3.963251e-003f, 9.355898e-002f, 5.720409e-001f, 2.019212e-001f, 4.046616e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 4.465817e-003f, 3.078980e-002f, 5.358725e-002f, 1.312052e-001f, -2.509622e-001f, 5.716113e-001f, -1.000000e+000f, 7.280526e-001f, 2.842407e-001f, -3.773563e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 1.496874e-002f, -4.463902e-002f, 4.848310e-002f, 1.445096e-001f, -5.372765e-001f, 6.260979e-001f, -9.729670e-001f, 8.687717e-001f, 2.746984e-001f, -5.551551e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 1.241115e-002f, 3.776558e-002f, 7.445497e-002f, 4.827967e-002f, -3.082159e-001f, 5.020401e-001f, -1.000000e+000f, 6.186596e-001f, 2.355697e-001f, -3.511805e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 1.800474e-002f, -5.486845e-002f, 6.313216e-002f, 1.963038e-001f, -6.265838e-001f, 5.427455e-001f, -1.000000e+000f, 6.890919e-001f, 3.016058e-001f, -6.433042e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 6.954025e-002f, 7.377972e-002f, 1.639938e-001f, 1.918845e-001f, 7.941500e-002f, 4.677825e-002f, -1.124183e-001f, 2.445266e-001f, 3.016120e-001f, -3.507735e-001f, 4.830712e-001f, -1.000000e+000f, 5.591439e-001f, 3.262518e-001f, -7.850423e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 1.392328e-002f, -4.544967e-002f, 5.124928e-002f, 3.031323e-001f, -7.786136e-001f, 5.008704e-001f, -1.000000e+000f, 6.314919e-001f, 3.716177e-001f, -7.360367e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 4.265631e-004f, 1.234503e-002f, 9.246943e-002f, 2.324079e-001f, -3.526050e-001f, 3.663968e-001f, -6.434101e-001f, 4.630518e-001f, 3.040643e-001f, -5.694873e-001f, 4.755595e-001f, -1.000000e+000f, 5.408329e-001f, 3.152299e-001f, -7.935781e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 2.506290e-002f, -8.266990e-002f, 6.879141e-002f, 3.413553e-001f, -8.262382e-001f, 5.183422e-001f, -1.000000e+000f, 5.622967e-001f, 4.378112e-001f, -8.656103e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 3.715788e-003f, 1.574671e-002f, 9.225886e-002f, 2.351169e-001f, -3.569800e-001f, 3.754863e-001f, -6.693019e-001f, 4.664155e-001f, 2.832147e-001f, -5.606468e-001f, 4.792426e-001f, -1.000000e+000f, 5.333114e-001f, 3.346733e-001f, -8.177455e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 5.031818e-002f, -1.001609e-001f, 7.658238e-002f, 3.375067e-001f, -8.205994e-001f, 4.757023e-001f, -1.000000e+000f, 5.890801e-001f, 3.999971e-001f, -7.896788e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 2.364702e-004f, -8.130550e-003f, 7.089201e-002f, 2.840447e-001f, -7.353321e-001f, 4.776869e-001f, -1.000000e+000f, 6.678830e-001f, 2.948813e-001f, -3.806747e-001f, 4.894559e-001f, -1.000000e+000f, 5.197612e-001f, 3.019026e-001f, -7.770462e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 6.142873e-002f, -1.424235e-001f, 8.257495e-002f, 4.208196e-001f, -9.174085e-001f, 4.649471e-001f, -1.000000e+000f, 5.729617e-001f, 4.337530e-001f, -9.161868e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 1.127265e-003f, -1.920629e-002f, 8.188423e-002f, 3.186838e-001f, -3.689659e-001f, 4.214047e-001f, -8.698427e-001f, 4.561997e-001f, 3.564212e-001f, -8.433630e-001f, 4.937183e-001f, -1.000000e+000f, 6.064939e-001f, 3.788225e-001f, -8.280156e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 6.360370e-002f, -1.439837e-001f, 8.168170e-002f, 4.250494e-001f, -9.218754e-001f, 4.595450e-001f, -1.000000e+000f, 5.807631e-001f, 4.320790e-001f, -9.155826e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 1.273436e-003f, 1.002635e-002f, 9.260626e-002f, 2.439819e-001f, -2.335690e-001f, 3.428885e-001f, -7.045776e-001f, 4.749682e-001f, 2.725774e-001f, -6.502093e-001f, 4.794757e-001f, -1.000000e+000f, 5.284443e-001f, 3.950316e-001f, -8.860245e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 7.381627e-002f, -1.566871e-001f, 9.688176e-002f, 3.541116e-001f, -8.391772e-001f, 4.871321e-001f, -1.000000e+000f, 5.146534e-001f, 4.691559e-001f, -9.675036e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 3.320894e-003f, 3.496706e-002f, 9.920168e-002f, 1.714947e-001f, -1.318349e-002f, 2.530266e-001f, -6.139969e-001f, 4.700941e-001f, 1.751225e-001f, -5.521742e-001f, 4.721677e-001f, -1.000000e+000f, 5.350065e-001f, 3.864110e-001f, -8.785969e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 7.349727e-002f, -1.559923e-001f, 9.649801e-002f, 3.543700e-001f, -8.394730e-001f, 4.866593e-001f, -1.000000e+000f, 5.151456e-001f, 4.680688e-001f, -9.663962e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 2.165255e-003f, 2.525438e-002f, 1.018773e-001f, 1.530074e-001f, 1.231758e-001f, 2.252007e-001f, -5.711184e-001f, 4.739794e-001f, 1.997354e-001f, -5.508851e-001f, 4.676185e-001f, -1.000000e+000f, 5.391293e-001f, 4.025683e-001f, -8.968717e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 6.265819e-004f, -3.284278e-003f, 9.951471e-002f, 7.657663e-002f, 1.476103e-002f, 1.888058e-001f, -5.467171e-001f, 4.683780e-001f, 1.714379e-001f, -5.209234e-001f, 4.682448e-001f, -1.000000e+000f, 5.345108e-001f, 4.409976e-001f, -9.390671e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.136872e-001f, 2.183698e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 2.819125e-003f, -1.782709e-002f, 7.982192e-002f, 2.552601e-003f, -7.011453e-002f, 3.963251e-003f, 9.355898e-002f, 5.720409e-001f, 2.019212e-001f, 4.046616e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 4.465817e-003f, 3.078980e-002f, 5.358725e-002f, 1.312052e-001f, -2.509622e-001f, 5.716113e-001f, -1.000000e+000f, 7.280526e-001f, 2.842407e-001f, -3.773563e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 3.638946e-002f, -3.369313e-002f, 5.034827e-002f, 2.474222e-002f, -2.223880e-001f, 3.917480e-001f, -9.753027e-003f, 9.762788e-001f, 2.452430e-001f, -3.484565e-002f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 1.342478e-002f, 3.962722e-002f, 6.755391e-002f, 1.152730e-001f, -3.845400e-001f, 5.162764e-001f, -1.000000e+000f, 6.502539e-001f, 2.381935e-001f, -2.244072e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 1.800474e-002f, -5.486845e-002f, 6.313216e-002f, 1.963038e-001f, -6.265838e-001f, 5.427455e-001f, -1.000000e+000f, 6.890919e-001f, 3.016058e-001f, -6.433042e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 6.954025e-002f, 7.377972e-002f, 1.639938e-001f, 1.918845e-001f, 7.941500e-002f, 4.677825e-002f, -1.124183e-001f, 2.445266e-001f, 3.016120e-001f, -3.507735e-001f, 4.830712e-001f, -1.000000e+000f, 5.591439e-001f, 3.262518e-001f, -7.850423e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 3.532909e-002f, -7.065396e-002f, 4.988246e-002f, 1.950513e-001f, -6.245785e-001f, 6.532567e-001f, -5.093593e-001f, 1.000000e+000f, 2.123571e-001f, -3.270684e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 1.122067e-002f, 1.137632e-002f, 6.877018e-002f, 1.304742e-001f, -6.017083e-002f, 3.860274e-001f, -8.307800e-001f, 4.670848e-001f, 3.177201e-001f, -7.944340e-001f, 1.890414e-001f, -4.094286e-001f, 7.179769e-001f, 3.298044e-001f, -3.702571e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 1.392328e-002f, -4.544967e-002f, 5.124928e-002f, 3.031323e-001f, -7.786136e-001f, 5.008704e-001f, -1.000000e+000f, 6.314919e-001f, 3.716177e-001f, -7.360367e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 4.265631e-004f, 1.234503e-002f, 9.246943e-002f, 2.324079e-001f, -3.526050e-001f, 3.663968e-001f, -6.434101e-001f, 4.630518e-001f, 3.040643e-001f, -5.694873e-001f, 4.755595e-001f, -1.000000e+000f, 5.408329e-001f, 3.152299e-001f, -7.935781e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 2.180925e-002f, -3.467056e-002f, 7.354865e-002f, 8.411643e-002f, -1.570443e-001f, 3.421233e-001f, -8.954673e-001f, 6.311492e-001f, 3.640613e-001f, -8.511072e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 8.731805e-004f, 1.417912e-002f, 6.028335e-002f, 1.615694e-001f, -5.268623e-001f, 4.900643e-001f, -1.000000e+000f, 7.083512e-001f, 2.792742e-001f, -3.731544e-001f, 4.854894e-001f, -1.000000e+000f, 5.243269e-001f, 3.512544e-001f, -8.354288e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 5.031818e-002f, -1.001609e-001f, 7.658238e-002f, 3.375067e-001f, -8.205994e-001f, 4.757023e-001f, -1.000000e+000f, 5.890801e-001f, 3.999971e-001f, -7.896788e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 2.364702e-004f, -8.130550e-003f, 7.089201e-002f, 2.840447e-001f, -7.353321e-001f, 4.776869e-001f, -1.000000e+000f, 6.678830e-001f, 2.948813e-001f, -3.806747e-001f, 4.894559e-001f, -1.000000e+000f, 5.197612e-001f, 3.019026e-001f, -7.770462e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 6.142873e-002f, -1.424235e-001f, 8.257495e-002f, 4.208196e-001f, -9.174085e-001f, 4.649471e-001f, -1.000000e+000f, 5.729617e-001f, 4.337530e-001f, -9.161868e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 1.127265e-003f, -1.920629e-002f, 8.188423e-002f, 3.186838e-001f, -3.689659e-001f, 4.214047e-001f, -8.698427e-001f, 4.561997e-001f, 3.564212e-001f, -8.433630e-001f, 4.937183e-001f, -1.000000e+000f, 6.064939e-001f, 3.788225e-001f, -8.280156e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 6.360370e-002f, -1.439837e-001f, 8.168170e-002f, 4.250494e-001f, -9.218754e-001f, 4.595450e-001f, -1.000000e+000f, 5.807631e-001f, 4.320790e-001f, -9.155826e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 1.273436e-003f, 1.002635e-002f, 9.260626e-002f, 2.439819e-001f, -2.335690e-001f, 3.428885e-001f, -7.045776e-001f, 4.749682e-001f, 2.725774e-001f, -6.502093e-001f, 4.794757e-001f, -1.000000e+000f, 5.284443e-001f, 3.950316e-001f, -8.860245e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.507788e-002f, -1.589990e-001f, 9.702227e-002f, 3.674979e-001f, -8.502908e-001f, 4.903213e-001f, -1.000000e+000f, 5.099390e-001f, 4.851539e-001f, -9.849587e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 2.289676e-003f, 1.526003e-002f, 9.585349e-002f, 2.113456e-001f, -1.387771e-002f, 3.944260e-001f, -7.792328e-001f, 4.900127e-001f, 3.776170e-001f, -7.748593e-001f, 4.723946e-001f, -1.000000e+000f, 5.359310e-001f, 3.916196e-001f, -8.833639e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.349727e-002f, -1.559923e-001f, 9.649801e-002f, 3.543700e-001f, -8.394730e-001f, 4.866593e-001f, -1.000000e+000f, 5.151456e-001f, 4.680688e-001f, -9.663962e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 2.165255e-003f, 2.525438e-002f, 1.018773e-001f, 1.530074e-001f, 1.231758e-001f, 2.252007e-001f, -5.711184e-001f, 4.739794e-001f, 1.997354e-001f, -5.508851e-001f, 4.676185e-001f, -1.000000e+000f, 5.391293e-001f, 4.025683e-001f, -8.968717e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.346379e-002f, -1.559259e-001f, 9.646599e-002f, 3.543515e-001f, -8.394472e-001f, 4.866532e-001f, -1.000000e+000f, 5.151529e-001f, 4.680572e-001f, -9.663843e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 1.101774e-003f, 1.608534e-002f, 1.016559e-001f, 1.096375e-001f, 8.756548e-002f, 2.070531e-001f, -5.265283e-001f, 4.701683e-001f, 1.865041e-001f, -5.019827e-001f, 4.659774e-001f, -1.000000e+000f, 5.408060e-001f, 4.013372e-001f, -8.957793e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.333624e-002f, -1.556205e-001f, 9.629211e-002f, 3.543465e-001f, -8.394469e-001f, 4.865238e-001f, -1.000000e+000f, 5.152906e-001f, 4.677466e-001f, -9.660653e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 1.458437e-003f, -2.354412e-002f, 9.528747e-002f, 8.704920e-002f, -1.844527e-002f, 4.798087e-001f, -1.000000e+000f, 5.212022e-001f, 4.644379e-001f, -9.636828e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -1.502896e-001f, 2.677453e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 2.819125e-003f, -1.782709e-002f, 7.982192e-002f, 2.552601e-003f, -7.011453e-002f, 3.963251e-003f, 9.355898e-002f, 5.720409e-001f, 2.019212e-001f, 4.046616e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.465817e-003f, 3.078980e-002f, 5.358725e-002f, 1.312052e-001f, -2.509622e-001f, 5.716113e-001f, -1.000000e+000f, 7.280526e-001f, 2.842407e-001f, -3.773563e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 3.638946e-002f, -3.369313e-002f, 5.034827e-002f, 2.474222e-002f, -2.223880e-001f, 3.917480e-001f, -9.753027e-003f, 9.762788e-001f, 2.452430e-001f, -3.484565e-002f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.342478e-002f, 3.962722e-002f, 6.755391e-002f, 1.152730e-001f, -3.845400e-001f, 5.162764e-001f, -1.000000e+000f, 6.502539e-001f, 2.381935e-001f, -2.244072e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.496874e-002f, -4.463902e-002f, 4.848310e-002f, 1.445096e-001f, -5.372765e-001f, 6.260979e-001f, -9.729670e-001f, 8.687717e-001f, 2.746984e-001f, -5.551551e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.241115e-002f, 3.776558e-002f, 7.445497e-002f, 4.827967e-002f, -3.082159e-001f, 5.020401e-001f, -1.000000e+000f, 6.186596e-001f, 2.355697e-001f, -3.511805e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.800474e-002f, -5.486845e-002f, 6.313216e-002f, 1.963038e-001f, -6.265838e-001f, 5.427455e-001f, -1.000000e+000f, 6.890919e-001f, 3.016058e-001f, -6.433042e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 6.954025e-002f, 7.377972e-002f, 1.639938e-001f, 1.918845e-001f, 7.941500e-002f, 4.677825e-002f, -1.124183e-001f, 2.445266e-001f, 3.016120e-001f, -3.507735e-001f, 4.830712e-001f, -1.000000e+000f, 5.591439e-001f, 3.262518e-001f, -7.850423e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 3.532909e-002f, -7.065396e-002f, 4.988246e-002f, 1.950513e-001f, -6.245785e-001f, 6.532567e-001f, -5.093593e-001f, 1.000000e+000f, 2.123571e-001f, -3.270684e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.122067e-002f, 1.137632e-002f, 6.877018e-002f, 1.304742e-001f, -6.017083e-002f, 3.860274e-001f, -8.307800e-001f, 4.670848e-001f, 3.177201e-001f, -7.944340e-001f, 1.890414e-001f, -4.094286e-001f, 7.179769e-001f, 3.298044e-001f, -3.702571e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.392328e-002f, -4.544967e-002f, 5.124928e-002f, 3.031323e-001f, -7.786136e-001f, 5.008704e-001f, -1.000000e+000f, 6.314919e-001f, 3.716177e-001f, -7.360367e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.265631e-004f, 1.234503e-002f, 9.246943e-002f, 2.324079e-001f, -3.526050e-001f, 3.663968e-001f, -6.434101e-001f, 4.630518e-001f, 3.040643e-001f, -5.694873e-001f, 4.755595e-001f, -1.000000e+000f, 5.408329e-001f, 3.152299e-001f, -7.935781e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 2.506290e-002f, -8.266990e-002f, 6.879141e-002f, 3.413553e-001f, -8.262382e-001f, 5.183422e-001f, -1.000000e+000f, 5.622967e-001f, 4.378112e-001f, -8.656103e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 3.715788e-003f, 1.574671e-002f, 9.225886e-002f, 2.351169e-001f, -3.569800e-001f, 3.754863e-001f, -6.693019e-001f, 4.664155e-001f, 2.832147e-001f, -5.606468e-001f, 4.792426e-001f, -1.000000e+000f, 5.333114e-001f, 3.346733e-001f, -8.177455e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 2.180925e-002f, -3.467056e-002f, 7.354865e-002f, 8.411643e-002f, -1.570443e-001f, 3.421233e-001f, -8.954673e-001f, 6.311492e-001f, 3.640613e-001f, -8.511072e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 8.731805e-004f, 1.417912e-002f, 6.028335e-002f, 1.615694e-001f, -5.268623e-001f, 4.900643e-001f, -1.000000e+000f, 7.083512e-001f, 2.792742e-001f, -3.731544e-001f, 4.854894e-001f, -1.000000e+000f, 5.243269e-001f, 3.512544e-001f, -8.354288e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 5.031818e-002f, -1.001609e-001f, 7.658238e-002f, 3.375067e-001f, -8.205994e-001f, 4.757023e-001f, -1.000000e+000f, 5.890801e-001f, 3.999971e-001f, -7.896788e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 2.364702e-004f, -8.130550e-003f, 7.089201e-002f, 2.840447e-001f, -7.353321e-001f, 4.776869e-001f, -1.000000e+000f, 6.678830e-001f, 2.948813e-001f, -3.806747e-001f, 4.894559e-001f, -1.000000e+000f, 5.197612e-001f, 3.019026e-001f, -7.770462e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.511122e-002f, -1.223336e-001f, 8.299311e-002f, 3.928941e-001f, -8.859025e-001f, 5.055090e-001f, -1.000000e+000f, 5.306084e-001f, 4.666620e-001f, -9.361727e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.358947e-003f, -2.122267e-002f, 8.663131e-002f, 3.183860e-001f, -3.737043e-001f, 4.270687e-001f, -8.632304e-001f, 5.235797e-001f, 3.679027e-001f, -8.171239e-001f, 4.916717e-001f, -1.000000e+000f, 5.173320e-001f, 3.703868e-001f, -8.562928e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 6.142873e-002f, -1.424235e-001f, 8.257495e-002f, 4.208196e-001f, -9.174085e-001f, 4.649471e-001f, -1.000000e+000f, 5.729617e-001f, 4.337530e-001f, -9.161868e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.127265e-003f, -1.920629e-002f, 8.188423e-002f, 3.186838e-001f, -3.689659e-001f, 4.214047e-001f, -8.698427e-001f, 4.561997e-001f, 3.564212e-001f, -8.433630e-001f, 4.937183e-001f, -1.000000e+000f, 6.064939e-001f, 3.788225e-001f, -8.280156e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 6.360370e-002f, -1.439837e-001f, 8.168170e-002f, 4.250494e-001f, -9.218754e-001f, 4.595450e-001f, -1.000000e+000f, 5.807631e-001f, 4.320790e-001f, -9.155826e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.273436e-003f, 1.002635e-002f, 9.260626e-002f, 2.439819e-001f, -2.335690e-001f, 3.428885e-001f, -7.045776e-001f, 4.749682e-001f, 2.725774e-001f, -6.502093e-001f, 4.794757e-001f, -1.000000e+000f, 5.284443e-001f, 3.950316e-001f, -8.860245e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.507788e-002f, -1.589990e-001f, 9.702227e-002f, 3.674979e-001f, -8.502908e-001f, 4.903213e-001f, -1.000000e+000f, 5.099390e-001f, 4.851539e-001f, -9.849587e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 2.289676e-003f, 1.526003e-002f, 9.585349e-002f, 2.113456e-001f, -1.387771e-002f, 3.944260e-001f, -7.792328e-001f, 4.900127e-001f, 3.776170e-001f, -7.748593e-001f, 4.723946e-001f, -1.000000e+000f, 5.359310e-001f, 3.916196e-001f, -8.833639e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.381627e-002f, -1.566871e-001f, 9.688176e-002f, 3.541116e-001f, -8.391772e-001f, 4.871321e-001f, -1.000000e+000f, 5.146534e-001f, 4.691559e-001f, -9.675036e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 3.320894e-003f, 3.496706e-002f, 9.920168e-002f, 1.714947e-001f, -1.318349e-002f, 2.530266e-001f, -6.139969e-001f, 4.700941e-001f, 1.751225e-001f, -5.521742e-001f, 4.721677e-001f, -1.000000e+000f, 5.350065e-001f, 3.864110e-001f, -8.785969e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.349727e-002f, -1.559923e-001f, 9.649801e-002f, 3.543700e-001f, -8.394730e-001f, 4.866593e-001f, -1.000000e+000f, 5.151456e-001f, 4.680688e-001f, -9.663962e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 2.165255e-003f, 2.525438e-002f, 1.018773e-001f, 1.530074e-001f, 1.231758e-001f, 2.252007e-001f, -5.711184e-001f, 4.739794e-001f, 1.997354e-001f, -5.508851e-001f, 4.676185e-001f, -1.000000e+000f, 5.391293e-001f, 4.025683e-001f, -8.968717e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.346379e-002f, -1.559259e-001f, 9.646599e-002f, 3.543515e-001f, -8.394472e-001f, 4.866532e-001f, -1.000000e+000f, 5.151529e-001f, 4.680572e-001f, -9.663843e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.101774e-003f, 1.608534e-002f, 1.016559e-001f, 1.096375e-001f, 8.756548e-002f, 2.070531e-001f, -5.265283e-001f, 4.701683e-001f, 1.865041e-001f, -5.019827e-001f, 4.659774e-001f, -1.000000e+000f, 5.408060e-001f, 4.013372e-001f, -8.957793e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 6.265819e-004f, -3.284278e-003f, 9.951471e-002f, 7.657663e-002f, 1.476103e-002f, 1.888058e-001f, -5.467171e-001f, 4.683780e-001f, 1.714379e-001f, -5.209234e-001f, 4.682448e-001f, -1.000000e+000f, 5.345108e-001f, 4.409976e-001f, -9.390671e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.333624e-002f, -1.556205e-001f, 9.629211e-002f, 3.543465e-001f, -8.394469e-001f, 4.865238e-001f, -1.000000e+000f, 5.152906e-001f, 4.677466e-001f, -9.660653e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 1.458437e-003f, -2.354412e-002f, 9.528747e-002f, 8.704920e-002f, -1.844527e-002f, 4.798087e-001f, -1.000000e+000f, 5.212022e-001f, 4.644379e-001f, -9.636828e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -1.972436e-001f, 3.290312e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 2.819125e-003f, -1.782709e-002f, 7.982192e-002f, 2.552601e-003f, -7.011453e-002f, 3.963251e-003f, 9.355898e-002f, 5.720409e-001f, 2.019212e-001f, 4.046616e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.465817e-003f, 3.078980e-002f, 5.358725e-002f, 1.312052e-001f, -2.509622e-001f, 5.716113e-001f, -1.000000e+000f, 7.280526e-001f, 2.842407e-001f, -3.773563e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 3.638946e-002f, -3.369313e-002f, 5.034827e-002f, 2.474222e-002f, -2.223880e-001f, 3.917480e-001f, -9.753027e-003f, 9.762788e-001f, 2.452430e-001f, -3.484565e-002f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.342478e-002f, 3.962722e-002f, 6.755391e-002f, 1.152730e-001f, -3.845400e-001f, 5.162764e-001f, -1.000000e+000f, 6.502539e-001f, 2.381935e-001f, -2.244072e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.496874e-002f, -4.463902e-002f, 4.848310e-002f, 1.445096e-001f, -5.372765e-001f, 6.260979e-001f, -9.729670e-001f, 8.687717e-001f, 2.746984e-001f, -5.551551e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.241115e-002f, 3.776558e-002f, 7.445497e-002f, 4.827967e-002f, -3.082159e-001f, 5.020401e-001f, -1.000000e+000f, 6.186596e-001f, 2.355697e-001f, -3.511805e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.800474e-002f, -5.486845e-002f, 6.313216e-002f, 1.963038e-001f, -6.265838e-001f, 5.427455e-001f, -1.000000e+000f, 6.890919e-001f, 3.016058e-001f, -6.433042e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 6.954025e-002f, 7.377972e-002f, 1.639938e-001f, 1.918845e-001f, 7.941500e-002f, 4.677825e-002f, -1.124183e-001f, 2.445266e-001f, 3.016120e-001f, -3.507735e-001f, 4.830712e-001f, -1.000000e+000f, 5.591439e-001f, 3.262518e-001f, -7.850423e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 3.532909e-002f, -7.065396e-002f, 4.988246e-002f, 1.950513e-001f, -6.245785e-001f, 6.532567e-001f, -5.093593e-001f, 1.000000e+000f, 2.123571e-001f, -3.270684e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.122067e-002f, 1.137632e-002f, 6.877018e-002f, 1.304742e-001f, -6.017083e-002f, 3.860274e-001f, -8.307800e-001f, 4.670848e-001f, 3.177201e-001f, -7.944340e-001f, 1.890414e-001f, -4.094286e-001f, 7.179769e-001f, 3.298044e-001f, -3.702571e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.392328e-002f, -4.544967e-002f, 5.124928e-002f, 3.031323e-001f, -7.786136e-001f, 5.008704e-001f, -1.000000e+000f, 6.314919e-001f, 3.716177e-001f, -7.360367e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.265631e-004f, 1.234503e-002f, 9.246943e-002f, 2.324079e-001f, -3.526050e-001f, 3.663968e-001f, -6.434101e-001f, 4.630518e-001f, 3.040643e-001f, -5.694873e-001f, 4.755595e-001f, -1.000000e+000f, 5.408329e-001f, 3.152299e-001f, -7.935781e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 2.506290e-002f, -8.266990e-002f, 6.879141e-002f, 3.413553e-001f, -8.262382e-001f, 5.183422e-001f, -1.000000e+000f, 5.622967e-001f, 4.378112e-001f, -8.656103e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 3.715788e-003f, 1.574671e-002f, 9.225886e-002f, 2.351169e-001f, -3.569800e-001f, 3.754863e-001f, -6.693019e-001f, 4.664155e-001f, 2.832147e-001f, -5.606468e-001f, 4.792426e-001f, -1.000000e+000f, 5.333114e-001f, 3.346733e-001f, -8.177455e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 2.180925e-002f, -3.467056e-002f, 7.354865e-002f, 8.411643e-002f, -1.570443e-001f, 3.421233e-001f, -8.954673e-001f, 6.311492e-001f, 3.640613e-001f, -8.511072e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 8.731805e-004f, 1.417912e-002f, 6.028335e-002f, 1.615694e-001f, -5.268623e-001f, 4.900643e-001f, -1.000000e+000f, 7.083512e-001f, 2.792742e-001f, -3.731544e-001f, 4.854894e-001f, -1.000000e+000f, 5.243269e-001f, 3.512544e-001f, -8.354288e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 5.031818e-002f, -1.001609e-001f, 7.658238e-002f, 3.375067e-001f, -8.205994e-001f, 4.757023e-001f, -1.000000e+000f, 5.890801e-001f, 3.999971e-001f, -7.896788e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 2.364702e-004f, -8.130550e-003f, 7.089201e-002f, 2.840447e-001f, -7.353321e-001f, 4.776869e-001f, -1.000000e+000f, 6.678830e-001f, 2.948813e-001f, -3.806747e-001f, 4.894559e-001f, -1.000000e+000f, 5.197612e-001f, 3.019026e-001f, -7.770462e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.511122e-002f, -1.223336e-001f, 8.299311e-002f, 3.928941e-001f, -8.859025e-001f, 5.055090e-001f, -1.000000e+000f, 5.306084e-001f, 4.666620e-001f, -9.361727e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.358947e-003f, -2.122267e-002f, 8.663131e-002f, 3.183860e-001f, -3.737043e-001f, 4.270687e-001f, -8.632304e-001f, 5.235797e-001f, 3.679027e-001f, -8.171239e-001f, 4.916717e-001f, -1.000000e+000f, 5.173320e-001f, 3.703868e-001f, -8.562928e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 6.142873e-002f, -1.424235e-001f, 8.257495e-002f, 4.208196e-001f, -9.174085e-001f, 4.649471e-001f, -1.000000e+000f, 5.729617e-001f, 4.337530e-001f, -9.161868e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.127265e-003f, -1.920629e-002f, 8.188423e-002f, 3.186838e-001f, -3.689659e-001f, 4.214047e-001f, -8.698427e-001f, 4.561997e-001f, 3.564212e-001f, -8.433630e-001f, 4.937183e-001f, -1.000000e+000f, 6.064939e-001f, 3.788225e-001f, -8.280156e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 6.360370e-002f, -1.439837e-001f, 8.168170e-002f, 4.250494e-001f, -9.218754e-001f, 4.595450e-001f, -1.000000e+000f, 5.807631e-001f, 4.320790e-001f, -9.155826e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.273436e-003f, 1.002635e-002f, 9.260626e-002f, 2.439819e-001f, -2.335690e-001f, 3.428885e-001f, -7.045776e-001f, 4.749682e-001f, 2.725774e-001f, -6.502093e-001f, 4.794757e-001f, -1.000000e+000f, 5.284443e-001f, 3.950316e-001f, -8.860245e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.507788e-002f, -1.589990e-001f, 9.702227e-002f, 3.674979e-001f, -8.502908e-001f, 4.903213e-001f, -1.000000e+000f, 5.099390e-001f, 4.851539e-001f, -9.849587e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 2.289676e-003f, 1.526003e-002f, 9.585349e-002f, 2.113456e-001f, -1.387771e-002f, 3.944260e-001f, -7.792328e-001f, 4.900127e-001f, 3.776170e-001f, -7.748593e-001f, 4.723946e-001f, -1.000000e+000f, 5.359310e-001f, 3.916196e-001f, -8.833639e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.381627e-002f, -1.566871e-001f, 9.688176e-002f, 3.541116e-001f, -8.391772e-001f, 4.871321e-001f, -1.000000e+000f, 5.146534e-001f, 4.691559e-001f, -9.675036e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 3.320894e-003f, 3.496706e-002f, 9.920168e-002f, 1.714947e-001f, -1.318349e-002f, 2.530266e-001f, -6.139969e-001f, 4.700941e-001f, 1.751225e-001f, -5.521742e-001f, 4.721677e-001f, -1.000000e+000f, 5.350065e-001f, 3.864110e-001f, -8.785969e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.349727e-002f, -1.559923e-001f, 9.649801e-002f, 3.543700e-001f, -8.394730e-001f, 4.866593e-001f, -1.000000e+000f, 5.151456e-001f, 4.680688e-001f, -9.663962e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 2.165255e-003f, 2.525438e-002f, 1.018773e-001f, 1.530074e-001f, 1.231758e-001f, 2.252007e-001f, -5.711184e-001f, 4.739794e-001f, 1.997354e-001f, -5.508851e-001f, 4.676185e-001f, -1.000000e+000f, 5.391293e-001f, 4.025683e-001f, -8.968717e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.346379e-002f, -1.559259e-001f, 9.646599e-002f, 3.543515e-001f, -8.394472e-001f, 4.866532e-001f, -1.000000e+000f, 5.151529e-001f, 4.680572e-001f, -9.663843e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.101774e-003f, 1.608534e-002f, 1.016559e-001f, 1.096375e-001f, 8.756548e-002f, 2.070531e-001f, -5.265283e-001f, 4.701683e-001f, 1.865041e-001f, -5.019827e-001f, 4.659774e-001f, -1.000000e+000f, 5.408060e-001f, 4.013372e-001f, -8.957793e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 6.265819e-004f, -3.284278e-003f, 9.951471e-002f, 7.657663e-002f, 1.476103e-002f, 1.888058e-001f, -5.467171e-001f, 4.683780e-001f, 1.714379e-001f, -5.209234e-001f, 4.682448e-001f, -1.000000e+000f, 5.345108e-001f, 4.409976e-001f, -9.390671e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.333624e-002f, -1.556205e-001f, 9.629211e-002f, 3.543465e-001f, -8.394469e-001f, 4.865238e-001f, -1.000000e+000f, 5.152906e-001f, 4.677466e-001f, -9.660653e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 1.458437e-003f, -2.354412e-002f, 9.528747e-002f, 8.704920e-002f, -1.844527e-002f, 4.798087e-001f, -1.000000e+000f, 5.212022e-001f, 4.644379e-001f, -9.636828e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.573363e-001f, 4.052044e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  2.819125e-003f, -1.782709e-002f, 7.982192e-002f, 2.552601e-003f, -7.011453e-002f, 3.963251e-003f, 9.355898e-002f, 5.720409e-001f, 2.019212e-001f, 4.046616e-001f, 4.465817e-003f, 3.078980e-002f, 5.358725e-002f, 1.312052e-001f, -2.509622e-001f, 5.716113e-001f, -1.000000e+000f, 7.280526e-001f, 2.842407e-001f, -3.773563e-001f,
  0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  3.638946e-002f, -3.369313e-002f, 5.034827e-002f, 2.474222e-002f, -2.223880e-001f, 3.917480e-001f, -9.753027e-003f, 9.762788e-001f, 2.452430e-001f, -3.484565e-002f, 1.342478e-002f, 3.962722e-002f, 6.755391e-002f, 1.152730e-001f, -3.845400e-001f, 5.162764e-001f, -1.000000e+000f, 6.502539e-001f, 2.381935e-001f, -2.244072e-001f,
  1.496874e-002f, -4.463902e-002f, 4.848310e-002f, 1.445096e-001f, -5.372765e-001f, 6.260979e-001f, -9.729670e-001f, 8.687717e-001f, 2.746984e-001f, -5.551551e-001f, 1.241115e-002f, 3.776558e-002f, 7.445497e-002f, 4.827967e-002f, -3.082159e-001f, 5.020401e-001f, -1.000000e+000f, 6.186596e-001f, 2.355697e-001f, -3.511805e-001f,
  1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  1.800474e-002f, -5.486845e-002f, 6.313216e-002f, 1.963038e-001f, -6.265838e-001f, 5.427455e-001f, -1.000000e+000f, 6.890919e-001f, 3.016058e-001f, -6.433042e-001f, 6.954025e-002f, 7.377972e-002f, 1.639938e-001f, 1.918845e-001f, 7.941500e-002f, 4.677825e-002f, -1.124183e-001f, 2.445266e-001f, 3.016120e-001f, -3.507735e-001f, 4.830712e-001f, -1.000000e+000f, 5.591439e-001f, 3.262518e-001f, -7.850423e-001f,
  3.532909e-002f, -7.065396e-002f, 4.988246e-002f, 1.950513e-001f, -6.245785e-001f, 6.532567e-001f, -5.093593e-001f, 1.000000e+000f, 2.123571e-001f, -3.270684e-001f, 1.122067e-002f, 1.137632e-002f, 6.877018e-002f, 1.304742e-001f, -6.017083e-002f, 3.860274e-001f, -8.307800e-001f, 4.670848e-001f, 3.177201e-001f, -7.944340e-001f, 1.890414e-001f, -4.094286e-001f, 7.179769e-001f, 3.298044e-001f, -3.702571e-001f,
  3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  1.392328e-002f, -4.544967e-002f, 5.124928e-002f, 3.031323e-001f, -7.786136e-001f, 5.008704e-001f, -1.000000e+000f, 6.314919e-001f, 3.716177e-001f, -7.360367e-001f, 4.265631e-004f, 1.234503e-002f, 9.246943e-002f, 2.324079e-001f, -3.526050e-001f, 3.663968e-001f, -6.434101e-001f, 4.630518e-001f, 3.040643e-001f, -5.694873e-001f, 4.755595e-001f, -1.000000e+000f, 5.408329e-001f, 3.152299e-001f, -7.935781e-001f,
  2.506290e-002f, -8.266990e-002f, 6.879141e-002f, 3.413553e-001f, -8.262382e-001f, 5.183422e-001f, -1.000000e+000f, 5.622967e-001f, 4.378112e-001f, -8.656103e-001f, 3.715788e-003f, 1.574671e-002f, 9.225886e-002f, 2.351169e-001f, -3.569800e-001f, 3.754863e-001f, -6.693019e-001f, 4.664155e-001f, 2.832147e-001f, -5.606468e-001f, 4.792426e-001f, -1.000000e+000f, 5.333114e-001f, 3.346733e-001f, -8.177455e-001f,
  4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  2.180925e-002f, -3.467056e-002f, 7.354865e-002f, 8.411643e-002f, -1.570443e-001f, 3.421233e-001f, -8.954673e-001f, 6.311492e-001f, 3.640613e-001f, -8.511072e-001f, 8.731805e-004f, 1.417912e-002f, 6.028335e-002f, 1.615694e-001f, -5.268623e-001f, 4.900643e-001f, -1.000000e+000f, 7.083512e-001f, 2.792742e-001f, -3.731544e-001f, 4.854894e-001f, -1.000000e+000f, 5.243269e-001f, 3.512544e-001f, -8.354288e-001f,
  4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  5.031818e-002f, -1.001609e-001f, 7.658238e-002f, 3.375067e-001f, -8.205994e-001f, 4.757023e-001f, -1.000000e+000f, 5.890801e-001f, 3.999971e-001f, -7.896788e-001f, 2.364702e-004f, -8.130550e-003f, 7.089201e-002f, 2.840447e-001f, -7.353321e-001f, 4.776869e-001f, -1.000000e+000f, 6.678830e-001f, 2.948813e-001f, -3.806747e-001f, 4.894559e-001f, -1.000000e+000f, 5.197612e-001f, 3.019026e-001f, -7.770462e-001f,
  4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  4.511122e-002f, -1.223336e-001f, 8.299311e-002f, 3.928941e-001f, -8.859025e-001f, 5.055090e-001f, -1.000000e+000f, 5.306084e-001f, 4.666620e-001f, -9.361727e-001f, 1.358947e-003f, -2.122267e-002f, 8.663131e-002f, 3.183860e-001f, -3.737043e-001f, 4.270687e-001f, -8.632304e-001f, 5.235797e-001f, 3.679027e-001f, -8.171239e-001f, 4.916717e-001f, -1.000000e+000f, 5.173320e-001f, 3.703868e-001f, -8.562928e-001f,
  4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  6.142873e-002f, -1.424235e-001f, 8.257495e-002f, 4.208196e-001f, -9.174085e-001f, 4.649471e-001f, -1.000000e+000f, 5.729617e-001f, 4.337530e-001f, -9.161868e-001f, 1.127265e-003f, -1.920629e-002f, 8.188423e-002f, 3.186838e-001f, -3.689659e-001f, 4.214047e-001f, -8.698427e-001f, 4.561997e-001f, 3.564212e-001f, -8.433630e-001f, 4.937183e-001f, -1.000000e+000f, 6.064939e-001f, 3.788225e-001f, -8.280156e-001f,
  6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  6.360370e-002f, -1.439837e-001f, 8.168170e-002f, 4.250494e-001f, -9.218754e-001f, 4.595450e-001f, -1.000000e+000f, 5.807631e-001f, 4.320790e-001f, -9.155826e-001f, 1.273436e-003f, 1.002635e-002f, 9.260626e-002f, 2.439819e-001f, -2.335690e-001f, 3.428885e-001f, -7.045776e-001f, 4.749682e-001f, 2.725774e-001f, -6.502093e-001f, 4.794757e-001f, -1.000000e+000f, 5.284443e-001f, 3.950316e-001f, -8.860245e-001f,
  7.507788e-002f, -1.589990e-001f, 9.702227e-002f, 3.674979e-001f, -8.502908e-001f, 4.903213e-001f, -1.000000e+000f, 5.099390e-001f, 4.851539e-001f, -9.849587e-001f, 2.289676e-003f, 1.526003e-002f, 9.585349e-002f, 2.113456e-001f, -1.387771e-002f, 3.944260e-001f, -7.792328e-001f, 4.900127e-001f, 3.776170e-001f, -7.748593e-001f, 4.723946e-001f, -1.000000e+000f, 5.359310e-001f, 3.916196e-001f, -8.833639e-001f,
  7.381627e-002f, -1.566871e-001f, 9.688176e-002f, 3.541116e-001f, -8.391772e-001f, 4.871321e-001f, -1.000000e+000f, 5.146534e-001f, 4.691559e-001f, -9.675036e-001f, 3.320894e-003f, 3.496706e-002f, 9.920168e-002f, 1.714947e-001f, -1.318349e-002f, 2.530266e-001f, -6.139969e-001f, 4.700941e-001f, 1.751225e-001f, -5.521742e-001f, 4.721677e-001f, -1.000000e+000f, 5.350065e-001f, 3.864110e-001f, -8.785969e-001f,
  7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  7.349727e-002f, -1.559923e-001f, 9.649801e-002f, 3.543700e-001f, -8.394730e-001f, 4.866593e-001f, -1.000000e+000f, 5.151456e-001f, 4.680688e-001f, -9.663962e-001f, 2.165255e-003f, 2.525438e-002f, 1.018773e-001f, 1.530074e-001f, 1.231758e-001f, 2.252007e-001f, -5.711184e-001f, 4.739794e-001f, 1.997354e-001f, -5.508851e-001f, 4.676185e-001f, -1.000000e+000f, 5.391293e-001f, 4.025683e-001f, -8.968717e-001f,
  7.346379e-002f, -1.559259e-001f, 9.646599e-002f, 3.543515e-001f, -8.394472e-001f, 4.866532e-001f, -1.000000e+000f, 5.151529e-001f, 4.680572e-001f, -9.663843e-001f, 1.101774e-003f, 1.608534e-002f, 1.016559e-001f, 1.096375e-001f, 8.756548e-002f, 2.070531e-001f, -5.265283e-001f, 4.701683e-001f, 1.865041e-001f, -5.019827e-001f, 4.659774e-001f, -1.000000e+000f, 5.408060e-001f, 4.013372e-001f, -8.957793e-001f,
  7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 6.265819e-004f, -3.284278e-003f, 9.951471e-002f, 7.657663e-002f, 1.476103e-002f, 1.888058e-001f, -5.467171e-001f, 4.683780e-001f, 1.714379e-001f, -5.209234e-001f, 4.682448e-001f, -1.000000e+000f, 5.345108e-001f, 4.409976e-001f, -9.390671e-001f,
  7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  7.333624e-002f, -1.556205e-001f, 9.629211e-002f, 3.543465e-001f, -8.394469e-001f, 4.865238e-001f, -1.000000e+000f, 5.152906e-001f, 4.677466e-001f, -9.660653e-001f, 1.458437e-003f, -2.354412e-002f, 9.528747e-002f, 8.704920e-002f, -1.844527e-002f, 4.798087e-001f, -1.000000e+000f, 5.212022e-001f, 4.644379e-001f, -9.636828e-001f,
  7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 2.819125e-003f, -1.782709e-002f, 7.982192e-002f, 2.552601e-003f, -7.011453e-002f, 3.963251e-003f, 9.355898e-002f, 5.720409e-001f, 2.019212e-001f, 4.046616e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.465817e-003f, 3.078980e-002f, 5.358725e-002f, 1.312052e-001f, -2.509622e-001f, 5.716113e-001f, -1.000000e+000f, 7.280526e-001f, 2.842407e-001f, -3.773563e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 3.638946e-002f, -3.369313e-002f, 5.034827e-002f, 2.474222e-002f, -2.223880e-001f, 3.917480e-001f, -9.753027e-003f, 9.762788e-001f, 2.452430e-001f, -3.484565e-002f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.342478e-002f, 3.962722e-002f, 6.755391e-002f, 1.152730e-001f, -3.845400e-001f, 5.162764e-001f, -1.000000e+000f, 6.502539e-001f, 2.381935e-001f, -2.244072e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.496874e-002f, -4.463902e-002f, 4.848310e-002f, 1.445096e-001f, -5.372765e-001f, 6.260979e-001f, -9.729670e-001f, 8.687717e-001f, 2.746984e-001f, -5.551551e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.241115e-002f, 3.776558e-002f, 7.445497e-002f, 4.827967e-002f, -3.082159e-001f, 5.020401e-001f, -1.000000e+000f, 6.186596e-001f, 2.355697e-001f, -3.511805e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.800474e-002f, -5.486845e-002f, 6.313216e-002f, 1.963038e-001f, -6.265838e-001f, 5.427455e-001f, -1.000000e+000f, 6.890919e-001f, 3.016058e-001f, -6.433042e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 6.954025e-002f, 7.377972e-002f, 1.639938e-001f, 1.918845e-001f, 7.941500e-002f, 4.677825e-002f, -1.124183e-001f, 2.445266e-001f, 3.016120e-001f, -3.507735e-001f, 4.830712e-001f, -1.000000e+000f, 5.591439e-001f, 3.262518e-001f, -7.850423e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 3.532909e-002f, -7.065396e-002f, 4.988246e-002f, 1.950513e-001f, -6.245785e-001f, 6.532567e-001f, -5.093593e-001f, 1.000000e+000f, 2.123571e-001f, -3.270684e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.122067e-002f, 1.137632e-002f, 6.877018e-002f, 1.304742e-001f, -6.017083e-002f, 3.860274e-001f, -8.307800e-001f, 4.670848e-001f, 3.177201e-001f, -7.944340e-001f, 1.890414e-001f, -4.094286e-001f, 7.179769e-001f, 3.298044e-001f, -3.702571e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.392328e-002f, -4.544967e-002f, 5.124928e-002f, 3.031323e-001f, -7.786136e-001f, 5.008704e-001f, -1.000000e+000f, 6.314919e-001f, 3.716177e-001f, -7.360367e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.265631e-004f, 1.234503e-002f, 9.246943e-002f, 2.324079e-001f, -3.526050e-001f, 3.663968e-001f, -6.434101e-001f, 4.630518e-001f, 3.040643e-001f, -5.694873e-001f, 4.755595e-001f, -1.000000e+000f, 5.408329e-001f, 3.152299e-001f, -7.935781e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 2.506290e-002f, -8.266990e-002f, 6.879141e-002f, 3.413553e-001f, -8.262382e-001f, 5.183422e-001f, -1.000000e+000f, 5.622967e-001f, 4.378112e-001f, -8.656103e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 3.715788e-003f, 1.574671e-002f, 9.225886e-002f, 2.351169e-001f, -3.569800e-001f, 3.754863e-001f, -6.693019e-001f, 4.664155e-001f, 2.832147e-001f, -5.606468e-001f, 4.792426e-001f, -1.000000e+000f, 5.333114e-001f, 3.346733e-001f, -8.177455e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 2.180925e-002f, -3.467056e-002f, 7.354865e-002f, 8.411643e-002f, -1.570443e-001f, 3.421233e-001f, -8.954673e-001f, 6.311492e-001f, 3.640613e-001f, -8.511072e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 8.731805e-004f, 1.417912e-002f, 6.028335e-002f, 1.615694e-001f, -5.268623e-001f, 4.900643e-001f, -1.000000e+000f, 7.083512e-001f, 2.792742e-001f, -3.731544e-001f, 4.854894e-001f, -1.000000e+000f, 5.243269e-001f, 3.512544e-001f, -8.354288e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 5.031818e-002f, -1.001609e-001f, 7.658238e-002f, 3.375067e-001f, -8.205994e-001f, 4.757023e-001f, -1.000000e+000f, 5.890801e-001f, 3.999971e-001f, -7.896788e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 2.364702e-004f, -8.130550e-003f, 7.089201e-002f, 2.840447e-001f, -7.353321e-001f, 4.776869e-001f, -1.000000e+000f, 6.678830e-001f, 2.948813e-001f, -3.806747e-001f, 4.894559e-001f, -1.000000e+000f, 5.197612e-001f, 3.019026e-001f, -7.770462e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.511122e-002f, -1.223336e-001f, 8.299311e-002f, 3.928941e-001f, -8.859025e-001f, 5.055090e-001f, -1.000000e+000f, 5.306084e-001f, 4.666620e-001f, -9.361727e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.358947e-003f, -2.122267e-002f, 8.663131e-002f, 3.183860e-001f, -3.737043e-001f, 4.270687e-001f, -8.632304e-001f, 5.235797e-001f, 3.679027e-001f, -8.171239e-001f, 4.916717e-001f, -1.000000e+000f, 5.173320e-001f, 3.703868e-001f, -8.562928e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 6.142873e-002f, -1.424235e-001f, 8.257495e-002f, 4.208196e-001f, -9.174085e-001f, 4.649471e-001f, -1.000000e+000f, 5.729617e-001f, 4.337530e-001f, -9.161868e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.127265e-003f, -1.920629e-002f, 8.188423e-002f, 3.186838e-001f, -3.689659e-001f, 4.214047e-001f, -8.698427e-001f, 4.561997e-001f, 3.564212e-001f, -8.433630e-001f, 4.937183e-001f, -1.000000e+000f, 6.064939e-001f, 3.788225e-001f, -8.280156e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 6.360370e-002f, -1.439837e-001f, 8.168170e-002f, 4.250494e-001f, -9.218754e-001f, 4.595450e-001f, -1.000000e+000f, 5.807631e-001f, 4.320790e-001f, -9.155826e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.273436e-003f, 1.002635e-002f, 9.260626e-002f, 2.439819e-001f, -2.335690e-001f, 3.428885e-001f, -7.045776e-001f, 4.749682e-001f, 2.725774e-001f, -6.502093e-001f, 4.794757e-001f, -1.000000e+000f, 5.284443e-001f, 3.950316e-001f, -8.860245e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.507788e-002f, -1.589990e-001f, 9.702227e-002f, 3.674979e-001f, -8.502908e-001f, 4.903213e-001f, -1.000000e+000f, 5.099390e-001f, 4.851539e-001f, -9.849587e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 2.289676e-003f, 1.526003e-002f, 9.585349e-002f, 2.113456e-001f, -1.387771e-002f, 3.944260e-001f, -7.792328e-001f, 4.900127e-001f, 3.776170e-001f, -7.748593e-001f, 4.723946e-001f, -1.000000e+000f, 5.359310e-001f, 3.916196e-001f, -8.833639e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.381627e-002f, -1.566871e-001f, 9.688176e-002f, 3.541116e-001f, -8.391772e-001f, 4.871321e-001f, -1.000000e+000f, 5.146534e-001f, 4.691559e-001f, -9.675036e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 3.320894e-003f, 3.496706e-002f, 9.920168e-002f, 1.714947e-001f, -1.318349e-002f, 2.530266e-001f, -6.139969e-001f, 4.700941e-001f, 1.751225e-001f, -5.521742e-001f, 4.721677e-001f, -1.000000e+000f, 5.350065e-001f, 3.864110e-001f, -8.785969e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.349727e-002f, -1.559923e-001f, 9.649801e-002f, 3.543700e-001f, -8.394730e-001f, 4.866593e-001f, -1.000000e+000f, 5.151456e-001f, 4.680688e-001f, -9.663962e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 2.165255e-003f, 2.525438e-002f, 1.018773e-001f, 1.530074e-001f, 1.231758e-001f, 2.252007e-001f, -5.711184e-001f, 4.739794e-001f, 1.997354e-001f, -5.508851e-001f, 4.676185e-001f, -1.000000e+000f, 5.391293e-001f, 4.025683e-001f, -8.968717e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.346379e-002f, -1.559259e-001f, 9.646599e-002f, 3.543515e-001f, -8.394472e-001f, 4.866532e-001f, -1.000000e+000f, 5.151529e-001f, 4.680572e-001f, -9.663843e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.101774e-003f, 1.608534e-002f, 1.016559e-001f, 1.096375e-001f, 8.756548e-002f, 2.070531e-001f, -5.265283e-001f, 4.701683e-001f, 1.865041e-001f, -5.019827e-001f, 4.659774e-001f, -1.000000e+000f, 5.408060e-001f, 4.013372e-001f, -8.957793e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 6.265819e-004f, -3.284278e-003f, 9.951471e-002f, 7.657663e-002f, 1.476103e-002f, 1.888058e-001f, -5.467171e-001f, 4.683780e-001f, 1.714379e-001f, -5.209234e-001f, 4.682448e-001f, -1.000000e+000f, 5.345108e-001f, 4.409976e-001f, -9.390671e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.333624e-002f, -1.556205e-001f, 9.629211e-002f, 3.543465e-001f, -8.394469e-001f, 4.865238e-001f, -1.000000e+000f, 5.152906e-001f, 4.677466e-001f, -9.660653e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 1.458437e-003f, -2.354412e-002f, 9.528747e-002f, 8.704920e-002f, -1.844527e-002f, 4.798087e-001f, -1.000000e+000f, 5.212022e-001f, 4.644379e-001f, -9.636828e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -3.057977e-001f, 4.375852e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 2.819125e-003f, -1.782709e-002f, 7.982192e-002f, 2.552601e-003f, -7.011453e-002f, 3.963251e-003f, 9.355898e-002f, 5.720409e-001f, 2.019212e-001f, 4.046616e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.465817e-003f, 3.078980e-002f, 5.358725e-002f, 1.312052e-001f, -2.509622e-001f, 5.716113e-001f, -1.000000e+000f, 7.280526e-001f, 2.842407e-001f, -3.773563e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 3.638946e-002f, -3.369313e-002f, 5.034827e-002f, 2.474222e-002f, -2.223880e-001f, 3.917480e-001f, -9.753027e-003f, 9.762788e-001f, 2.452430e-001f, -3.484565e-002f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.342478e-002f, 3.962722e-002f, 6.755391e-002f, 1.152730e-001f, -3.845400e-001f, 5.162764e-001f, -1.000000e+000f, 6.502539e-001f, 2.381935e-001f, -2.244072e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.496874e-002f, -4.463902e-002f, 4.848310e-002f, 1.445096e-001f, -5.372765e-001f, 6.260979e-001f, -9.729670e-001f, 8.687717e-001f, 2.746984e-001f, -5.551551e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.241115e-002f, 3.776558e-002f, 7.445497e-002f, 4.827967e-002f, -3.082159e-001f, 5.020401e-001f, -1.000000e+000f, 6.186596e-001f, 2.355697e-001f, -3.511805e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.800474e-002f, -5.486845e-002f, 6.313216e-002f, 1.963038e-001f, -6.265838e-001f, 5.427455e-001f, -1.000000e+000f, 6.890919e-001f, 3.016058e-001f, -6.433042e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 6.954025e-002f, 7.377972e-002f, 1.639938e-001f, 1.918845e-001f, 7.941500e-002f, 4.677825e-002f, -1.124183e-001f, 2.445266e-001f, 3.016120e-001f, -3.507735e-001f, 4.830712e-001f, -1.000000e+000f, 5.591439e-001f, 3.262518e-001f, -7.850423e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 3.532909e-002f, -7.065396e-002f, 4.988246e-002f, 1.950513e-001f, -6.245785e-001f, 6.532567e-001f, -5.093593e-001f, 1.000000e+000f, 2.123571e-001f, -3.270684e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.122067e-002f, 1.137632e-002f, 6.877018e-002f, 1.304742e-001f, -6.017083e-002f, 3.860274e-001f, -8.307800e-001f, 4.670848e-001f, 3.177201e-001f, -7.944340e-001f, 1.890414e-001f, -4.094286e-001f, 7.179769e-001f, 3.298044e-001f, -3.702571e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.392328e-002f, -4.544967e-002f, 5.124928e-002f, 3.031323e-001f, -7.786136e-001f, 5.008704e-001f, -1.000000e+000f, 6.314919e-001f, 3.716177e-001f, -7.360367e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.265631e-004f, 1.234503e-002f, 9.246943e-002f, 2.324079e-001f, -3.526050e-001f, 3.663968e-001f, -6.434101e-001f, 4.630518e-001f, 3.040643e-001f, -5.694873e-001f, 4.755595e-001f, -1.000000e+000f, 5.408329e-001f, 3.152299e-001f, -7.935781e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 2.506290e-002f, -8.266990e-002f, 6.879141e-002f, 3.413553e-001f, -8.262382e-001f, 5.183422e-001f, -1.000000e+000f, 5.622967e-001f, 4.378112e-001f, -8.656103e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 3.715788e-003f, 1.574671e-002f, 9.225886e-002f, 2.351169e-001f, -3.569800e-001f, 3.754863e-001f, -6.693019e-001f, 4.664155e-001f, 2.832147e-001f, -5.606468e-001f, 4.792426e-001f, -1.000000e+000f, 5.333114e-001f, 3.346733e-001f, -8.177455e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 2.180925e-002f, -3.467056e-002f, 7.354865e-002f, 8.411643e-002f, -1.570443e-001f, 3.421233e-001f, -8.954673e-001f, 6.311492e-001f, 3.640613e-001f, -8.511072e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 8.731805e-004f, 1.417912e-002f, 6.028335e-002f, 1.615694e-001f, -5.268623e-001f, 4.900643e-001f, -1.000000e+000f, 7.083512e-001f, 2.792742e-001f, -3.731544e-001f, 4.854894e-001f, -1.000000e+000f, 5.243269e-001f, 3.512544e-001f, -8.354288e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 5.031818e-002f, -1.001609e-001f, 7.658238e-002f, 3.375067e-001f, -8.205994e-001f, 4.757023e-001f, -1.000000e+000f, 5.890801e-001f, 3.999971e-001f, -7.896788e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 2.364702e-004f, -8.130550e-003f, 7.089201e-002f, 2.840447e-001f, -7.353321e-001f, 4.776869e-001f, -1.000000e+000f, 6.678830e-001f, 2.948813e-001f, -3.806747e-001f, 4.894559e-001f, -1.000000e+000f, 5.197612e-001f, 3.019026e-001f, -7.770462e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.511122e-002f, -1.223336e-001f, 8.299311e-002f, 3.928941e-001f, -8.859025e-001f, 5.055090e-001f, -1.000000e+000f, 5.306084e-001f, 4.666620e-001f, -9.361727e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.358947e-003f, -2.122267e-002f, 8.663131e-002f, 3.183860e-001f, -3.737043e-001f, 4.270687e-001f, -8.632304e-001f, 5.235797e-001f, 3.679027e-001f, -8.171239e-001f, 4.916717e-001f, -1.000000e+000f, 5.173320e-001f, 3.703868e-001f, -8.562928e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 6.142873e-002f, -1.424235e-001f, 8.257495e-002f, 4.208196e-001f, -9.174085e-001f, 4.649471e-001f, -1.000000e+000f, 5.729617e-001f, 4.337530e-001f, -9.161868e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.127265e-003f, -1.920629e-002f, 8.188423e-002f, 3.186838e-001f, -3.689659e-001f, 4.214047e-001f, -8.698427e-001f, 4.561997e-001f, 3.564212e-001f, -8.433630e-001f, 4.937183e-001f, -1.000000e+000f, 6.064939e-001f, 3.788225e-001f, -8.280156e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 6.360370e-002f, -1.439837e-001f, 8.168170e-002f, 4.250494e-001f, -9.218754e-001f, 4.595450e-001f, -1.000000e+000f, 5.807631e-001f, 4.320790e-001f, -9.155826e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.273436e-003f, 1.002635e-002f, 9.260626e-002f, 2.439819e-001f, -2.335690e-001f, 3.428885e-001f, -7.045776e-001f, 4.749682e-001f, 2.725774e-001f, -6.502093e-001f, 4.794757e-001f, -1.000000e+000f, 5.284443e-001f, 3.950316e-001f, -8.860245e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.507788e-002f, -1.589990e-001f, 9.702227e-002f, 3.674979e-001f, -8.502908e-001f, 4.903213e-001f, -1.000000e+000f, 5.099390e-001f, 4.851539e-001f, -9.849587e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 2.289676e-003f, 1.526003e-002f, 9.585349e-002f, 2.113456e-001f, -1.387771e-002f, 3.944260e-001f, -7.792328e-001f, 4.900127e-001f, 3.776170e-001f, -7.748593e-001f, 4.723946e-001f, -1.000000e+000f, 5.359310e-001f, 3.916196e-001f, -8.833639e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.381627e-002f, -1.566871e-001f, 9.688176e-002f, 3.541116e-001f, -8.391772e-001f, 4.871321e-001f, -1.000000e+000f, 5.146534e-001f, 4.691559e-001f, -9.675036e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 3.320894e-003f, 3.496706e-002f, 9.920168e-002f, 1.714947e-001f, -1.318349e-002f, 2.530266e-001f, -6.139969e-001f, 4.700941e-001f, 1.751225e-001f, -5.521742e-001f, 4.721677e-001f, -1.000000e+000f, 5.350065e-001f, 3.864110e-001f, -8.785969e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.349727e-002f, -1.559923e-001f, 9.649801e-002f, 3.543700e-001f, -8.394730e-001f, 4.866593e-001f, -1.000000e+000f, 5.151456e-001f, 4.680688e-001f, -9.663962e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 2.165255e-003f, 2.525438e-002f, 1.018773e-001f, 1.530074e-001f, 1.231758e-001f, 2.252007e-001f, -5.711184e-001f, 4.739794e-001f, 1.997354e-001f, -5.508851e-001f, 4.676185e-001f, -1.000000e+000f, 5.391293e-001f, 4.025683e-001f, -8.968717e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.346379e-002f, -1.559259e-001f, 9.646599e-002f, 3.543515e-001f, -8.394472e-001f, 4.866532e-001f, -1.000000e+000f, 5.151529e-001f, 4.680572e-001f, -9.663843e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.101774e-003f, 1.608534e-002f, 1.016559e-001f, 1.096375e-001f, 8.756548e-002f, 2.070531e-001f, -5.265283e-001f, 4.701683e-001f, 1.865041e-001f, -5.019827e-001f, 4.659774e-001f, -1.000000e+000f, 5.408060e-001f, 4.013372e-001f, -8.957793e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 6.265819e-004f, -3.284278e-003f, 9.951471e-002f, 7.657663e-002f, 1.476103e-002f, 1.888058e-001f, -5.467171e-001f, 4.683780e-001f, 1.714379e-001f, -5.209234e-001f, 4.682448e-001f, -1.000000e+000f, 5.345108e-001f, 4.409976e-001f, -9.390671e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.333624e-002f, -1.556205e-001f, 9.629211e-002f, 3.543465e-001f, -8.394469e-001f, 4.865238e-001f, -1.000000e+000f, 5.152906e-001f, 4.677466e-001f, -9.660653e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 1.458437e-003f, -2.354412e-002f, 9.528747e-002f, 8.704920e-002f, -1.844527e-002f, 4.798087e-001f, -1.000000e+000f, 5.212022e-001f, 4.644379e-001f, -9.636828e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.789291e-001f, 3.836116e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 2.819125e-003f, -1.782709e-002f, 7.982192e-002f, 2.552601e-003f, -7.011453e-002f, 3.963251e-003f, 9.355898e-002f, 5.720409e-001f, 2.019212e-001f, 4.046616e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 4.465817e-003f, 3.078980e-002f, 5.358725e-002f, 1.312052e-001f, -2.509622e-001f, 5.716113e-001f, -1.000000e+000f, 7.280526e-001f, 2.842407e-001f, -3.773563e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 3.638946e-002f, -3.369313e-002f, 5.034827e-002f, 2.474222e-002f, -2.223880e-001f, 3.917480e-001f, -9.753027e-003f, 9.762788e-001f, 2.452430e-001f, -3.484565e-002f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 1.342478e-002f, 3.962722e-002f, 6.755391e-002f, 1.152730e-001f, -3.845400e-001f, 5.162764e-001f, -1.000000e+000f, 6.502539e-001f, 2.381935e-001f, -2.244072e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 1.800474e-002f, -5.486845e-002f, 6.313216e-002f, 1.963038e-001f, -6.265838e-001f, 5.427455e-001f, -1.000000e+000f, 6.890919e-001f, 3.016058e-001f, -6.433042e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 6.954025e-002f, 7.377972e-002f, 1.639938e-001f, 1.918845e-001f, 7.941500e-002f, 4.677825e-002f, -1.124183e-001f, 2.445266e-001f, 3.016120e-001f, -3.507735e-001f, 4.830712e-001f, -1.000000e+000f, 5.591439e-001f, 3.262518e-001f, -7.850423e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 3.532909e-002f, -7.065396e-002f, 4.988246e-002f, 1.950513e-001f, -6.245785e-001f, 6.532567e-001f, -5.093593e-001f, 1.000000e+000f, 2.123571e-001f, -3.270684e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 1.122067e-002f, 1.137632e-002f, 6.877018e-002f, 1.304742e-001f, -6.017083e-002f, 3.860274e-001f, -8.307800e-001f, 4.670848e-001f, 3.177201e-001f, -7.944340e-001f, 1.890414e-001f, -4.094286e-001f, 7.179769e-001f, 3.298044e-001f, -3.702571e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 1.392328e-002f, -4.544967e-002f, 5.124928e-002f, 3.031323e-001f, -7.786136e-001f, 5.008704e-001f, -1.000000e+000f, 6.314919e-001f, 3.716177e-001f, -7.360367e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 4.265631e-004f, 1.234503e-002f, 9.246943e-002f, 2.324079e-001f, -3.526050e-001f, 3.663968e-001f, -6.434101e-001f, 4.630518e-001f, 3.040643e-001f, -5.694873e-001f, 4.755595e-001f, -1.000000e+000f, 5.408329e-001f, 3.152299e-001f, -7.935781e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 2.180925e-002f, -3.467056e-002f, 7.354865e-002f, 8.411643e-002f, -1.570443e-001f, 3.421233e-001f, -8.954673e-001f, 6.311492e-001f, 3.640613e-001f, -8.511072e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 8.731805e-004f, 1.417912e-002f, 6.028335e-002f, 1.615694e-001f, -5.268623e-001f, 4.900643e-001f, -1.000000e+000f, 7.083512e-001f, 2.792742e-001f, -3.731544e-001f, 4.854894e-001f, -1.000000e+000f, 5.243269e-001f, 3.512544e-001f, -8.354288e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 5.031818e-002f, -1.001609e-001f, 7.658238e-002f, 3.375067e-001f, -8.205994e-001f, 4.757023e-001f, -1.000000e+000f, 5.890801e-001f, 3.999971e-001f, -7.896788e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 2.364702e-004f, -8.130550e-003f, 7.089201e-002f, 2.840447e-001f, -7.353321e-001f, 4.776869e-001f, -1.000000e+000f, 6.678830e-001f, 2.948813e-001f, -3.806747e-001f, 4.894559e-001f, -1.000000e+000f, 5.197612e-001f, 3.019026e-001f, -7.770462e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 6.142873e-002f, -1.424235e-001f, 8.257495e-002f, 4.208196e-001f, -9.174085e-001f, 4.649471e-001f, -1.000000e+000f, 5.729617e-001f, 4.337530e-001f, -9.161868e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 1.127265e-003f, -1.920629e-002f, 8.188423e-002f, 3.186838e-001f, -3.689659e-001f, 4.214047e-001f, -8.698427e-001f, 4.561997e-001f, 3.564212e-001f, -8.433630e-001f, 4.937183e-001f, -1.000000e+000f, 6.064939e-001f, 3.788225e-001f, -8.280156e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 6.360370e-002f, -1.439837e-001f, 8.168170e-002f, 4.250494e-001f, -9.218754e-001f, 4.595450e-001f, -1.000000e+000f, 5.807631e-001f, 4.320790e-001f, -9.155826e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 1.273436e-003f, 1.002635e-002f, 9.260626e-002f, 2.439819e-001f, -2.335690e-001f, 3.428885e-001f, -7.045776e-001f, 4.749682e-001f, 2.725774e-001f, -6.502093e-001f, 4.794757e-001f, -1.000000e+000f, 5.284443e-001f, 3.950316e-001f, -8.860245e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.507788e-002f, -1.589990e-001f, 9.702227e-002f, 3.674979e-001f, -8.502908e-001f, 4.903213e-001f, -1.000000e+000f, 5.099390e-001f, 4.851539e-001f, -9.849587e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 2.289676e-003f, 1.526003e-002f, 9.585349e-002f, 2.113456e-001f, -1.387771e-002f, 3.944260e-001f, -7.792328e-001f, 4.900127e-001f, 3.776170e-001f, -7.748593e-001f, 4.723946e-001f, -1.000000e+000f, 5.359310e-001f, 3.916196e-001f, -8.833639e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.349727e-002f, -1.559923e-001f, 9.649801e-002f, 3.543700e-001f, -8.394730e-001f, 4.866593e-001f, -1.000000e+000f, 5.151456e-001f, 4.680688e-001f, -9.663962e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 2.165255e-003f, 2.525438e-002f, 1.018773e-001f, 1.530074e-001f, 1.231758e-001f, 2.252007e-001f, -5.711184e-001f, 4.739794e-001f, 1.997354e-001f, -5.508851e-001f, 4.676185e-001f, -1.000000e+000f, 5.391293e-001f, 4.025683e-001f, -8.968717e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.346379e-002f, -1.559259e-001f, 9.646599e-002f, 3.543515e-001f, -8.394472e-001f, 4.866532e-001f, -1.000000e+000f, 5.151529e-001f, 4.680572e-001f, -9.663843e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 1.101774e-003f, 1.608534e-002f, 1.016559e-001f, 1.096375e-001f, 8.756548e-002f, 2.070531e-001f, -5.265283e-001f, 4.701683e-001f, 1.865041e-001f, -5.019827e-001f, 4.659774e-001f, -1.000000e+000f, 5.408060e-001f, 4.013372e-001f, -8.957793e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.333624e-002f, -1.556205e-001f, 9.629211e-002f, 3.543465e-001f, -8.394469e-001f, 4.865238e-001f, -1.000000e+000f, 5.152906e-001f, 4.677466e-001f, -9.660653e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 1.458437e-003f, -2.354412e-002f, 9.528747e-002f, 8.704920e-002f, -1.844527e-002f, 4.798087e-001f, -1.000000e+000f, 5.212022e-001f, 4.644379e-001f, -9.636828e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.750000e-001f, 0.000000e+000f, -2.750000e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.660902e-001f, 3.593886e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 2.819125e-003f, -1.782709e-002f, 7.982192e-002f, 2.552601e-003f, -7.011453e-002f, 3.963251e-003f, 9.355898e-002f, 5.720409e-001f, 2.019212e-001f, 4.046616e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 4.465817e-003f, 3.078980e-002f, 5.358725e-002f, 1.312052e-001f, -2.509622e-001f, 5.716113e-001f, -1.000000e+000f, 7.280526e-001f, 2.842407e-001f, -3.773563e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 1.496874e-002f, -4.463902e-002f, 4.848310e-002f, 1.445096e-001f, -5.372765e-001f, 6.260979e-001f, -9.729670e-001f, 8.687717e-001f, 2.746984e-001f, -5.551551e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 1.241115e-002f, 3.776558e-002f, 7.445497e-002f, 4.827967e-002f, -3.082159e-001f, 5.020401e-001f, -1.000000e+000f, 6.186596e-001f, 2.355697e-001f, -3.511805e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 1.800474e-002f, -5.486845e-002f, 6.313216e-002f, 1.963038e-001f, -6.265838e-001f, 5.427455e-001f, -1.000000e+000f, 6.890919e-001f, 3.016058e-001f, -6.433042e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 6.954025e-002f, 7.377972e-002f, 1.639938e-001f, 1.918845e-001f, 7.941500e-002f, 4.677825e-002f, -1.124183e-001f, 2.445266e-001f, 3.016120e-001f, -3.507735e-001f, 4.830712e-001f, -1.000000e+000f, 5.591439e-001f, 3.262518e-001f, -7.850423e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 1.392328e-002f, -4.544967e-002f, 5.124928e-002f, 3.031323e-001f, -7.786136e-001f, 5.008704e-001f, -1.000000e+000f, 6.314919e-001f, 3.716177e-001f, -7.360367e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 4.265631e-004f, 1.234503e-002f, 9.246943e-002f, 2.324079e-001f, -3.526050e-001f, 3.663968e-001f, -6.434101e-001f, 4.630518e-001f, 3.040643e-001f, -5.694873e-001f, 4.755595e-001f, -1.000000e+000f, 5.408329e-001f, 3.152299e-001f, -7.935781e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 2.506290e-002f, -8.266990e-002f, 6.879141e-002f, 3.413553e-001f, -8.262382e-001f, 5.183422e-001f, -1.000000e+000f, 5.622967e-001f, 4.378112e-001f, -8.656103e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 3.715788e-003f, 1.574671e-002f, 9.225886e-002f, 2.351169e-001f, -3.569800e-001f, 3.754863e-001f, -6.693019e-001f, 4.664155e-001f, 2.832147e-001f, -5.606468e-001f, 4.792426e-001f, -1.000000e+000f, 5.333114e-001f, 3.346733e-001f, -8.177455e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 5.031818e-002f, -1.001609e-001f, 7.658238e-002f, 3.375067e-001f, -8.205994e-001f, 4.757023e-001f, -1.000000e+000f, 5.890801e-001f, 3.999971e-001f, -7.896788e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 2.364702e-004f, -8.130550e-003f, 7.089201e-002f, 2.840447e-001f, -7.353321e-001f, 4.776869e-001f, -1.000000e+000f, 6.678830e-001f, 2.948813e-001f, -3.806747e-001f, 4.894559e-001f, -1.000000e+000f, 5.197612e-001f, 3.019026e-001f, -7.770462e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 6.142873e-002f, -1.424235e-001f, 8.257495e-002f, 4.208196e-001f, -9.174085e-001f, 4.649471e-001f, -1.000000e+000f, 5.729617e-001f, 4.337530e-001f, -9.161868e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 1.127265e-003f, -1.920629e-002f, 8.188423e-002f, 3.186838e-001f, -3.689659e-001f, 4.214047e-001f, -8.698427e-001f, 4.561997e-001f, 3.564212e-001f, -8.433630e-001f, 4.937183e-001f, -1.000000e+000f, 6.064939e-001f, 3.788225e-001f, -8.280156e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 6.360370e-002f, -1.439837e-001f, 8.168170e-002f, 4.250494e-001f, -9.218754e-001f, 4.595450e-001f, -1.000000e+000f, 5.807631e-001f, 4.320790e-001f, -9.155826e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 1.273436e-003f, 1.002635e-002f, 9.260626e-002f, 2.439819e-001f, -2.335690e-001f, 3.428885e-001f, -7.045776e-001f, 4.749682e-001f, 2.725774e-001f, -6.502093e-001f, 4.794757e-001f, -1.000000e+000f, 5.284443e-001f, 3.950316e-001f, -8.860245e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 7.381627e-002f, -1.566871e-001f, 9.688176e-002f, 3.541116e-001f, -8.391772e-001f, 4.871321e-001f, -1.000000e+000f, 5.146534e-001f, 4.691559e-001f, -9.675036e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 3.320894e-003f, 3.496706e-002f, 9.920168e-002f, 1.714947e-001f, -1.318349e-002f, 2.530266e-001f, -6.139969e-001f, 4.700941e-001f, 1.751225e-001f, -5.521742e-001f, 4.721677e-001f, -1.000000e+000f, 5.350065e-001f, 3.864110e-001f, -8.785969e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 7.349727e-002f, -1.559923e-001f, 9.649801e-002f, 3.543700e-001f, -8.394730e-001f, 4.866593e-001f, -1.000000e+000f, 5.151456e-001f, 4.680688e-001f, -9.663962e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 2.165255e-003f, 2.525438e-002f, 1.018773e-001f, 1.530074e-001f, 1.231758e-001f, 2.252007e-001f, -5.711184e-001f, 4.739794e-001f, 1.997354e-001f, -5.508851e-001f, 4.676185e-001f, -1.000000e+000f, 5.391293e-001f, 4.025683e-001f, -8.968717e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 6.265819e-004f, -3.284278e-003f, 9.951471e-002f, 7.657663e-002f, 1.476103e-002f, 1.888058e-001f, -5.467171e-001f, 4.683780e-001f, 1.714379e-001f, -5.209234e-001f, 4.682448e-001f, -1.000000e+000f, 5.345108e-001f, 4.409976e-001f, -9.390671e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.250000e-001f, 0.000000e+000f, -3.250000e-001f, 0.000000e+000f, -2.536689e-001f, 3.368212e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 2.819125e-003f, -1.782709e-002f, 7.982192e-002f, 2.552601e-003f, -7.011453e-002f, 3.963251e-003f, 9.355898e-002f, 5.720409e-001f, 2.019212e-001f, 4.046616e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 4.465817e-003f, 3.078980e-002f, 5.358725e-002f, 1.312052e-001f, -2.509622e-001f, 5.716113e-001f, -1.000000e+000f, 7.280526e-001f, 2.842407e-001f, -3.773563e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 3.638946e-002f, -3.369313e-002f, 5.034827e-002f, 2.474222e-002f, -2.223880e-001f, 3.917480e-001f, -9.753027e-003f, 9.762788e-001f, 2.452430e-001f, -3.484565e-002f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 1.342478e-002f, 3.962722e-002f, 6.755391e-002f, 1.152730e-001f, -3.845400e-001f, 5.162764e-001f, -1.000000e+000f, 6.502539e-001f, 2.381935e-001f, -2.244072e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 3.532909e-002f, -7.065396e-002f, 4.988246e-002f, 1.950513e-001f, -6.245785e-001f, 6.532567e-001f, -5.093593e-001f, 1.000000e+000f, 2.123571e-001f, -3.270684e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 1.122067e-002f, 1.137632e-002f, 6.877018e-002f, 1.304742e-001f, -6.017083e-002f, 3.860274e-001f, -8.307800e-001f, 4.670848e-001f, 3.177201e-001f, -7.944340e-001f, 1.890414e-001f, -4.094286e-001f, 7.179769e-001f, 3.298044e-001f, -3.702571e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 2.506290e-002f, -8.266990e-002f, 6.879141e-002f, 3.413553e-001f, -8.262382e-001f, 5.183422e-001f, -1.000000e+000f, 5.622967e-001f, 4.378112e-001f, -8.656103e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 3.715788e-003f, 1.574671e-002f, 9.225886e-002f, 2.351169e-001f, -3.569800e-001f, 3.754863e-001f, -6.693019e-001f, 4.664155e-001f, 2.832147e-001f, -5.606468e-001f, 4.792426e-001f, -1.000000e+000f, 5.333114e-001f, 3.346733e-001f, -8.177455e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 4.511122e-002f, -1.223336e-001f, 8.299311e-002f, 3.928941e-001f, -8.859025e-001f, 5.055090e-001f, -1.000000e+000f, 5.306084e-001f, 4.666620e-001f, -9.361727e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 1.358947e-003f, -2.122267e-002f, 8.663131e-002f, 3.183860e-001f, -3.737043e-001f, 4.270687e-001f, -8.632304e-001f, 5.235797e-001f, 3.679027e-001f, -8.171239e-001f, 4.916717e-001f, -1.000000e+000f, 5.173320e-001f, 3.703868e-001f, -8.562928e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 6.142873e-002f, -1.424235e-001f, 8.257495e-002f, 4.208196e-001f, -9.174085e-001f, 4.649471e-001f, -1.000000e+000f, 5.729617e-001f, 4.337530e-001f, -9.161868e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 1.127265e-003f, -1.920629e-002f, 8.188423e-002f, 3.186838e-001f, -3.689659e-001f, 4.214047e-001f, -8.698427e-001f, 4.561997e-001f, 3.564212e-001f, -8.433630e-001f, 4.937183e-001f, -1.000000e+000f, 6.064939e-001f, 3.788225e-001f, -8.280156e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 7.507788e-002f, -1.589990e-001f, 9.702227e-002f, 3.674979e-001f, -8.502908e-001f, 4.903213e-001f, -1.000000e+000f, 5.099390e-001f, 4.851539e-001f, -9.849587e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 2.289676e-003f, 1.526003e-002f, 9.585349e-002f, 2.113456e-001f, -1.387771e-002f, 3.944260e-001f, -7.792328e-001f, 4.900127e-001f, 3.776170e-001f, -7.748593e-001f, 4.723946e-001f, -1.000000e+000f, 5.359310e-001f, 3.916196e-001f, -8.833639e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 7.349727e-002f, -1.559923e-001f, 9.649801e-002f, 3.543700e-001f, -8.394730e-001f, 4.866593e-001f, -1.000000e+000f, 5.151456e-001f, 4.680688e-001f, -9.663962e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 2.165255e-003f, 2.525438e-002f, 1.018773e-001f, 1.530074e-001f, 1.231758e-001f, 2.252007e-001f, -5.711184e-001f, 4.739794e-001f, 1.997354e-001f, -5.508851e-001f, 4.676185e-001f, -1.000000e+000f, 5.391293e-001f, 4.025683e-001f, -8.968717e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.476179e-001f, 3.261187e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 3.638946e-002f, -3.369313e-002f, 5.034827e-002f, 2.474222e-002f, -2.223880e-001f, 3.917480e-001f, -9.753027e-003f, 9.762788e-001f, 2.452430e-001f, -3.484565e-002f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 1.342478e-002f, 3.962722e-002f, 6.755391e-002f, 1.152730e-001f, -3.845400e-001f, 5.162764e-001f, -1.000000e+000f, 6.502539e-001f, 2.381935e-001f, -2.244072e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 3.532909e-002f, -7.065396e-002f, 4.988246e-002f, 1.950513e-001f, -6.245785e-001f, 6.532567e-001f, -5.093593e-001f, 1.000000e+000f, 2.123571e-001f, -3.270684e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 1.122067e-002f, 1.137632e-002f, 6.877018e-002f, 1.304742e-001f, -6.017083e-002f, 3.860274e-001f, -8.307800e-001f, 4.670848e-001f, 3.177201e-001f, -7.944340e-001f, 1.890414e-001f, -4.094286e-001f, 7.179769e-001f, 3.298044e-001f, -3.702571e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 1.392328e-002f, -4.544967e-002f, 5.124928e-002f, 3.031323e-001f, -7.786136e-001f, 5.008704e-001f, -1.000000e+000f, 6.314919e-001f, 3.716177e-001f, -7.360367e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 4.265631e-004f, 1.234503e-002f, 9.246943e-002f, 2.324079e-001f, -3.526050e-001f, 3.663968e-001f, -6.434101e-001f, 4.630518e-001f, 3.040643e-001f, -5.694873e-001f, 4.755595e-001f, -1.000000e+000f, 5.408329e-001f, 3.152299e-001f, -7.935781e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 4.492526e-002f, -9.712721e-002f, 5.909819e-002f, 3.326082e-001f, -8.140038e-001f, 6.189931e-001f, -1.000000e+000f, 8.298262e-001f, 3.508539e-001f, -6.631580e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 5.838304e-004f, -1.387332e-002f, 1.057075e-001f, 2.958505e-001f, -3.738108e-001f, 3.255550e-001f, -6.787188e-001f, 4.468423e-001f, 2.973061e-001f, -7.603935e-001f, 4.901928e-001f, -1.000000e+000f, 5.200250e-001f, 3.076684e-001f, -7.733079e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 4.210405e-002f, -9.155523e-002f, 5.638606e-002f, 3.494380e-001f, -8.355122e-001f, 4.791174e-001f, -1.000000e+000f, 7.252601e-001f, 4.209710e-001f, -8.121593e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 3.148511e-003f, -2.255675e-002f, 9.257002e-002f, 3.022523e-001f, -3.674967e-001f, 4.245518e-001f, -8.503211e-001f, 5.203396e-001f, 3.441314e-001f, -7.883186e-001f, 4.912562e-001f, -1.000000e+000f, 5.177208e-001f, 3.605669e-001f, -8.452568e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 6.343536e-002f, -1.441983e-001f, 8.208330e-002f, 4.279355e-001f, -9.249287e-001f, 4.613995e-001f, -1.000000e+000f, 5.765859e-001f, 4.350430e-001f, -9.183726e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 8.634449e-004f, -1.641859e-002f, 8.295584e-002f, 2.924029e-001f, -3.023307e-001f, 4.247367e-001f, -8.859636e-001f, 4.688726e-001f, 3.815134e-001f, -8.715447e-001f, 4.948086e-001f, -1.000000e+000f, 6.057301e-001f, 3.822501e-001f, -8.183743e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 7.507788e-002f, -1.589990e-001f, 9.702227e-002f, 3.674979e-001f, -8.502908e-001f, 4.903213e-001f, -1.000000e+000f, 5.099390e-001f, 4.851539e-001f, -9.849587e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 2.289676e-003f, 1.526003e-002f, 9.585349e-002f, 2.113456e-001f, -1.387771e-002f, 3.944260e-001f, -7.792328e-001f, 4.900127e-001f, 3.776170e-001f, -7.748593e-001f, 4.723946e-001f, -1.000000e+000f, 5.359310e-001f, 3.916196e-001f, -8.833639e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 7.346379e-002f, -1.559259e-001f, 9.646599e-002f, 3.543515e-001f, -8.394472e-001f, 4.866532e-001f, -1.000000e+000f, 5.151529e-001f, 4.680572e-001f, -9.663843e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 1.101774e-003f, 1.608534e-002f, 1.016559e-001f, 1.096375e-001f, 8.756548e-002f, 2.070531e-001f, -5.265283e-001f, 4.701683e-001f, 1.865041e-001f, -5.019827e-001f, 4.659774e-001f, -1.000000e+000f, 5.408060e-001f, 4.013372e-001f, -8.957793e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 7.336747e-002f, -1.556945e-001f, 9.633355e-002f, 3.543380e-001f, -8.394334e-001f, 4.865643e-001f, -1.000000e+000f, 5.152465e-001f, 4.678540e-001f, -9.661767e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 5.181000e-006f, -6.229352e-004f, 1.046361e-001f, 1.085897e-001f, 2.687987e-002f, 1.892379e-001f, -5.543739e-001f, 4.678790e-001f, 1.507790e-001f, -5.187482e-001f, 4.682182e-001f, -1.000000e+000f, 5.353827e-001f, 4.337958e-001f, -9.311256e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -2.250000e-001f, 0.000000e+000f, -2.250000e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.416745e-001f, 3.157841e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 3.916907e-002f, -8.120590e-002f, 5.632899e-002f, 2.519435e-001f, -7.071531e-001f, 6.733632e-001f, -1.000000e+000f, 8.948525e-001f, 3.808288e-001f, -6.114577e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 2.277087e-002f, 1.704442e-002f, 1.798727e-001f, 1.639537e-001f, -4.184464e-002f, 5.085257e-002f, -1.525511e-001f, 2.371071e-001f, 3.290138e-001f, -4.129551e-001f, 4.671713e-001f, -1.000000e+000f, 5.455576e-001f, 4.005671e-001f, -8.920152e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 4.120020e-002f, -1.067267e-001f, 7.290127e-002f, 3.755498e-001f, -8.666111e-001f, 4.587260e-001f, -1.000000e+000f, 5.596141e-001f, 4.371490e-001f, -9.185140e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 1.021082e-003f, 1.778569e-002f, 7.755606e-002f, 1.524260e-001f, -4.455688e-001f, 3.788962e-001f, -7.519339e-001f, 5.500004e-001f, 2.834872e-001f, -4.004388e-001f, 4.861426e-001f, -1.000000e+000f, 5.245983e-001f, 3.787815e-001f, -8.649510e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 5.031818e-002f, -1.001609e-001f, 7.658238e-002f, 3.375067e-001f, -8.205994e-001f, 4.757023e-001f, -1.000000e+000f, 5.890801e-001f, 3.999971e-001f, -7.896788e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 2.364702e-004f, -8.130550e-003f, 7.089201e-002f, 2.840447e-001f, -7.353321e-001f, 4.776869e-001f, -1.000000e+000f, 6.678830e-001f, 2.948813e-001f, -3.806747e-001f, 4.894559e-001f, -1.000000e+000f, 5.197612e-001f, 3.019026e-001f, -7.770462e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 6.360370e-002f, -1.439837e-001f, 8.168170e-002f, 4.250494e-001f, -9.218754e-001f, 4.595450e-001f, -1.000000e+000f, 5.807631e-001f, 4.320790e-001f, -9.155826e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 1.273436e-003f, 1.002635e-002f, 9.260626e-002f, 2.439819e-001f, -2.335690e-001f, 3.428885e-001f, -7.045776e-001f, 4.749682e-001f, 2.725774e-001f, -6.502093e-001f, 4.794757e-001f, -1.000000e+000f, 5.284443e-001f, 3.950316e-001f, -8.860245e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 7.339847e-002f, -1.557570e-001f, 9.636696e-002f, 3.543372e-001f, -8.394318e-001f, 4.865662e-001f, -1.000000e+000f, 5.152454e-001f, 4.678511e-001f, -9.661730e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 5.743832e-004f, 1.509157e-002f, 1.016455e-001f, 1.062430e-001f, 8.626329e-002f, 2.069806e-001f, -5.364873e-001f, 4.693145e-001f, 1.843040e-001f, -5.112045e-001f, 4.640053e-001f, -1.000000e+000f, 5.427644e-001f, 4.023574e-001f, -8.969337e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 7.329642e-002f, -1.555340e-001f, 9.624402e-002f, 3.543473e-001f, -8.394514e-001f, 4.865294e-001f, -1.000000e+000f, 5.152838e-001f, 4.677602e-001f, -9.660798e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 6.127489e-004f, -1.847336e-003f, 9.845644e-002f, 6.965517e-002f, 4.064753e-002f, 1.977221e-001f, -5.463264e-001f, 4.721064e-001f, 1.788875e-001f, -5.248522e-001f, 4.691951e-001f, -1.000000e+000f, 5.332719e-001f, 4.413668e-001f, -9.395361e-001f,
  0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.358392e-001f, 3.058031e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 2.713454e-002f, 8.125098e-002f, 6.942444e-002f, 1.885496e-001f, 6.140488e-001f, 4.858762e-002f, -4.373129e-001f, 1.000000e+000f, 3.104326e-001f, -3.348162e-001f,
  0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 2.009215e-002f, 1.384493e-003f, 4.886356e-002f, 4.413391e-002f, -1.431948e-001f, 3.363572e-001f, 1.174435e-001f, 9.558661e-001f, 2.212921e-001f, 2.397052e-001f, 0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 8.115775e-003f, 3.611433e-002f, 5.331522e-002f, 9.759406e-002f, -1.853486e-001f, 5.683903e-001f, -1.000000e+000f, 7.320472e-001f, 2.977342e-001f, -3.871053e-001f,
  0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 1.434306e-002f, -4.632962e-002f, 5.652663e-002f, 1.703628e-001f, -5.819875e-001f, 5.872781e-001f, -1.000000e+000f, 7.766096e-001f, 2.595717e-001f, -5.512442e-001f, 0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 5.100267e-002f, -1.069900e-001f, 6.331853e-002f, 1.733262e-001f, -5.881464e-001f, 2.722012e-001f, 2.889416e-001f, 4.279100e-001f, 2.447551e-001f, 1.659342e-001f, 3.417289e-001f, -5.550349e-001f, 8.873465e-001f, 3.425718e-001f, -4.645541e-001f,
  0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 4.610869e-002f, -1.249564e-001f, 8.465931e-002f, 3.918028e-001f, -8.846999e-001f, 5.054417e-001f, -1.000000e+000f, 5.301693e-001f, 4.672670e-001f, -9.370330e-001f, 0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 4.088336e-003f, -3.593936e-002f, 8.912278e-002f, 3.239731e-001f, -3.868548e-001f, 4.321485e-001f, -8.835215e-001f, 4.586654e-001f, 3.703609e-001f, -8.601365e-001f, 5.039779e-001f, -1.000000e+000f, 5.897375e-001f, 4.110969e-001f, -8.601783e-001f,
  0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 7.340010e-002f, -1.556856e-001f, 9.631304e-002f, 3.542614e-001f, -8.393407e-001f, 4.869820e-001f, -1.000000e+000f, 5.148143e-001f, 4.687569e-001f, -9.670913e-001f, 0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 3.295666e-003f, 3.461434e-002f, 1.017825e-001f, 1.583365e-001f, 5.734259e-002f, 2.493758e-001f, -6.092276e-001f, 4.717949e-001f, 1.838829e-001f, -5.677191e-001f, 4.721676e-001f, -1.000000e+000f, 5.354258e-001f, 3.844707e-001f, -8.759462e-001f,
  0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 7.338193e-002f, -1.557058e-001f, 9.633223e-002f, 3.542985e-001f, -8.394376e-001f, 4.864281e-001f, -1.000000e+000f, 5.153993e-001f, 4.674526e-001f, -9.657551e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.301123e-001f, 2.961625e-001f, 0.000000e+000f, -3.340893e-001f, 4.100865e-003f, -3.833729e-002f, 8.986522e-002f, 6.482484e-002f, -1.317663e-001f, 4.824871e-001f, -1.000000e+000f, 5.181541e-001f, 4.705004e-001f, -9.700219e-001f,
  // Total number of coefficients: 11435
  // Maximum number of elevation coefficients: 20

       

   // Full coefficients
   // 10 degrees loudspeakers
   // 44100 Hz sample rate
     // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:40:43 1999
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 1.322314e-002f, -4.146835e-002f, 6.295295e-002f, 2.161373e-001f, -3.726901e-001f, 3.554757e-001f, -4.819053e-001f, 7.874023e-001f, 2.506681e-001f, -4.680120e-003f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.470901e-002f, -7.494775e-002f, 6.070811e-002f, 2.336764e-001f, -6.836182e-001f, 5.413179e-001f, -1.000000e+000f, 6.973301e-001f, 2.951916e-001f, -6.757465e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 6.578764e-003f, 4.480798e-003f, 3.471212e-002f, 1.152840e-001f, -4.760592e-001f, 4.896421e-001f, -1.000000e+000f, 5.664533e-001f, 2.229157e-001f, -4.852119e-001f, 6.209656e-001f, -1.000000e+000f, 9.958348e-001f, 3.566095e-001f, -5.692943e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.988570e-002f, -9.016886e-002f, 7.020686e-002f, 2.919328e-001f, -7.640623e-001f, 5.000010e-001f, -1.000000e+000f, 6.037346e-001f, 3.508045e-001f, -7.841635e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.317773e-002f, -1.207241e-002f, 5.743149e-002f, 2.636985e-001f, -4.557503e-001f, 4.202753e-001f, -8.744815e-001f, 4.740479e-001f, 3.170341e-001f, -7.844998e-001f, 5.035037e-001f, -1.000000e+000f, 7.415058e-001f, 3.494789e-001f, -6.465668e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.246366e-002f, -6.459941e-002f, 5.221127e-002f, 3.558052e-001f, -8.435697e-001f, 5.050136e-001f, -1.000000e+000f, 5.686529e-001f, 4.411742e-001f, -8.646393e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.864276e-003f, -1.516550e-002f, 6.376597e-002f, 3.106887e-001f, -5.739543e-001f, 4.370316e-001f, -9.099671e-001f, 4.802879e-001f, 3.663406e-001f, -8.559668e-001f, 5.236984e-001f, -1.000000e+000f, 6.107164e-001f, 3.681455e-001f, -7.449036e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 3.254264e-002f, -9.354672e-002f, 6.734914e-002f, 3.806962e-001f, -8.725686e-001f, 5.049446e-001f, -1.000000e+000f, 5.355576e-001f, 4.540378e-001f, -9.157984e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 8.141806e-003f, -1.409026e-002f, 7.315213e-002f, 3.035810e-001f, -5.724593e-001f, 4.242456e-001f, -8.191303e-001f, 4.935152e-001f, 3.380574e-001f, -7.185472e-001f, 4.835833e-001f, -1.000000e+000f, 5.228713e-001f, 3.741281e-001f, -8.650168e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.785360e-002f, -1.219542e-001f, 8.011566e-002f, 3.695524e-001f, -8.596944e-001f, 4.791870e-001f, -1.000000e+000f, 5.536897e-001f, 4.235773e-001f, -8.661673e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.957945e-003f, -4.208667e-002f, 7.503818e-002f, 3.522886e-001f, -6.084890e-001f, 4.409380e-001f, -9.206309e-001f, 5.392867e-001f, 3.720118e-001f, -8.350593e-001f, 4.910001e-001f, -1.000000e+000f, 5.135968e-001f, 3.973309e-001f, -8.903817e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 6.084316e-003f, -4.129280e-002f, 7.069943e-002f, 3.647263e-001f, -6.091489e-001f, 4.479257e-001f, -9.200933e-001f, 4.762298e-001f, 3.990380e-001f, -8.932390e-001f, 4.860903e-001f, -1.000000e+000f, 5.617690e-001f, 4.207380e-001f, -8.931136e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 1.490436e-003f, -1.827605e-002f, 6.935172e-002f, 3.120184e-001f, -5.183226e-001f, 4.093699e-001f, -8.691693e-001f, 5.163424e-001f, 3.433205e-001f, -8.001432e-001f, 4.822261e-001f, -1.000000e+000f, 5.219888e-001f, 3.976964e-001f, -8.918073e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.688459e-004f, -1.316108e-002f, 7.831948e-002f, 2.593152e-001f, -3.435127e-001f, 4.024735e-001f, -8.505511e-001f, 4.990421e-001f, 3.866097e-001f, -8.400276e-001f, 4.770364e-001f, -1.000000e+000f, 5.268981e-001f, 4.143340e-001f, -9.103115e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.223115e-003f, -2.770572e-002f, 8.884242e-002f, 2.155999e-001f, -2.409108e-001f, 4.746392e-001f, -1.000000e+000f, 5.284786e-001f, 4.328137e-001f, -9.303856e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 1.158327e-002f, -6.587948e-002f, 9.398611e-002f, 1.507905e-001f, -3.262713e-001f, 4.784270e-001f, -1.000000e+000f, 5.232203e-001f, 4.586636e-001f, -9.574771e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -1.345045e-001f, 2.136593e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 1.322314e-002f, -4.146835e-002f, 6.295295e-002f, 2.161373e-001f, -3.726901e-001f, 3.554757e-001f, -4.819053e-001f, 7.874023e-001f, 2.506681e-001f, -4.680120e-003f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.837810e-002f, -9.128662e-002f, 7.362081e-002f, 1.453575e-001f, -5.250476e-001f, 3.828661e-001f, -1.000000e+000f, 7.533863e-001f, 2.380831e-001f, -6.021700e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.432096e-003f, 1.497838e-003f, 3.086151e-002f, 1.415594e-001f, -5.245149e-001f, 4.913594e-001f, -1.000000e+000f, 5.909044e-001f, 2.963083e-001f, -5.977639e-001f, 4.195969e-001f, -9.852605e-001f, 1.000000e+000f, 3.039512e-001f, -4.463868e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 2.988570e-002f, -9.016886e-002f, 7.020686e-002f, 2.919328e-001f, -7.640623e-001f, 5.000010e-001f, -1.000000e+000f, 6.037346e-001f, 3.508045e-001f, -7.841635e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 2.317773e-002f, -1.207241e-002f, 5.743149e-002f, 2.636985e-001f, -4.557503e-001f, 4.202753e-001f, -8.744815e-001f, 4.740479e-001f, 3.170341e-001f, -7.844998e-001f, 5.035037e-001f, -1.000000e+000f, 7.415058e-001f, 3.494789e-001f, -6.465668e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 4.602835e-002f, -9.570457e-002f, 5.942014e-002f, 2.587200e-001f, -7.193281e-001f, 6.896812e-001f, -1.000000e+000f, 9.001023e-001f, 3.006722e-001f, -5.631464e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 1.849565e-002f, -5.623973e-002f, 9.747064e-002f, 3.232643e-001f, -5.495190e-001f, 2.115435e-001f, -4.168738e-001f, 3.708700e-001f, 3.405163e-001f, -5.944472e-001f, 4.691839e-001f, -1.000000e+000f, 5.440115e-001f, 3.599787e-001f, -8.485029e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 2.246366e-002f, -6.459941e-002f, 5.221127e-002f, 3.558052e-001f, -8.435697e-001f, 5.050136e-001f, -1.000000e+000f, 5.686529e-001f, 4.411742e-001f, -8.646393e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 2.864276e-003f, -1.516550e-002f, 6.376597e-002f, 3.106887e-001f, -5.739543e-001f, 4.370316e-001f, -9.099671e-001f, 4.802879e-001f, 3.663406e-001f, -8.559668e-001f, 5.236984e-001f, -1.000000e+000f, 6.107164e-001f, 3.681455e-001f, -7.449036e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 4.394360e-002f, -9.430049e-002f, 7.771441e-002f, 2.255125e-001f, -5.952914e-001f, 4.375299e-001f, -1.000000e+000f, 6.050437e-001f, 3.660556e-001f, -8.556120e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 3.055663e-004f, -7.347801e-003f, 5.491673e-002f, 2.797041e-001f, -7.259096e-001f, 4.746655e-001f, -1.000000e+000f, 6.143136e-001f, 3.417272e-001f, -5.973000e-001f, 4.880875e-001f, -1.000000e+000f, 5.169596e-001f, 3.712135e-001f, -8.616417e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.785360e-002f, -1.219542e-001f, 8.011566e-002f, 3.695524e-001f, -8.596944e-001f, 4.791870e-001f, -1.000000e+000f, 5.536897e-001f, 4.235773e-001f, -8.661673e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.957945e-003f, -4.208667e-002f, 7.503818e-002f, 3.522886e-001f, -6.084890e-001f, 4.409380e-001f, -9.206309e-001f, 5.392867e-001f, 3.720118e-001f, -8.350593e-001f, 4.910001e-001f, -1.000000e+000f, 5.135968e-001f, 3.973309e-001f, -8.903817e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 6.084316e-003f, -4.129280e-002f, 7.069943e-002f, 3.647263e-001f, -6.091489e-001f, 4.479257e-001f, -9.200933e-001f, 4.762298e-001f, 3.990380e-001f, -8.932390e-001f, 4.860903e-001f, -1.000000e+000f, 5.617690e-001f, 4.207380e-001f, -8.931136e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 1.490436e-003f, -1.827605e-002f, 6.935172e-002f, 3.120184e-001f, -5.183226e-001f, 4.093699e-001f, -8.691693e-001f, 5.163424e-001f, 3.433205e-001f, -8.001432e-001f, 4.822261e-001f, -1.000000e+000f, 5.219888e-001f, 3.976964e-001f, -8.918073e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 1.060768e-003f, -1.683465e-002f, 7.935141e-002f, 2.625074e-001f, -3.531108e-001f, 3.981502e-001f, -8.493628e-001f, 5.010097e-001f, 3.821627e-001f, -8.378958e-001f, 4.772888e-001f, -1.000000e+000f, 5.267417e-001f, 4.139108e-001f, -9.097408e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 2.223115e-003f, -2.770572e-002f, 8.884242e-002f, 2.155999e-001f, -2.409108e-001f, 4.746392e-001f, -1.000000e+000f, 5.284786e-001f, 4.328137e-001f, -9.303856e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 4.869989e-003f, -4.243980e-002f, 9.246105e-002f, 1.771000e-001f, -2.601195e-001f, 4.745255e-001f, -1.000000e+000f, 5.285583e-001f, 4.336133e-001f, -9.312464e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 1.463080e-002f, -6.443389e-002f, 9.595121e-002f, 1.478315e-001f, -2.907189e-001f, 4.847314e-001f, -1.000000e+000f, 5.157546e-001f, 4.734200e-001f, -9.730568e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -1.747495e-001f, 2.635628e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 1.322314e-002f, -4.146835e-002f, 6.295295e-002f, 2.161373e-001f, -3.726901e-001f, 3.554757e-001f, -4.819053e-001f, 7.874023e-001f, 2.506681e-001f, -4.680120e-003f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.837810e-002f, -9.128662e-002f, 7.362081e-002f, 1.453575e-001f, -5.250476e-001f, 3.828661e-001f, -1.000000e+000f, 7.533863e-001f, 2.380831e-001f, -6.021700e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.432096e-003f, 1.497838e-003f, 3.086151e-002f, 1.415594e-001f, -5.245149e-001f, 4.913594e-001f, -1.000000e+000f, 5.909044e-001f, 2.963083e-001f, -5.977639e-001f, 4.195969e-001f, -9.852605e-001f, 1.000000e+000f, 3.039512e-001f, -4.463868e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.470901e-002f, -7.494775e-002f, 6.070811e-002f, 2.336764e-001f, -6.836182e-001f, 5.413179e-001f, -1.000000e+000f, 6.973301e-001f, 2.951916e-001f, -6.757465e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 6.578764e-003f, 4.480798e-003f, 3.471212e-002f, 1.152840e-001f, -4.760592e-001f, 4.896421e-001f, -1.000000e+000f, 5.664533e-001f, 2.229157e-001f, -4.852119e-001f, 6.209656e-001f, -1.000000e+000f, 9.958348e-001f, 3.566095e-001f, -5.692943e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.988570e-002f, -9.016886e-002f, 7.020686e-002f, 2.919328e-001f, -7.640623e-001f, 5.000010e-001f, -1.000000e+000f, 6.037346e-001f, 3.508045e-001f, -7.841635e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.317773e-002f, -1.207241e-002f, 5.743149e-002f, 2.636985e-001f, -4.557503e-001f, 4.202753e-001f, -8.744815e-001f, 4.740479e-001f, 3.170341e-001f, -7.844998e-001f, 5.035037e-001f, -1.000000e+000f, 7.415058e-001f, 3.494789e-001f, -6.465668e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 4.602835e-002f, -9.570457e-002f, 5.942014e-002f, 2.587200e-001f, -7.193281e-001f, 6.896812e-001f, -1.000000e+000f, 9.001023e-001f, 3.006722e-001f, -5.631464e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 1.849565e-002f, -5.623973e-002f, 9.747064e-002f, 3.232643e-001f, -5.495190e-001f, 2.115435e-001f, -4.168738e-001f, 3.708700e-001f, 3.405163e-001f, -5.944472e-001f, 4.691839e-001f, -1.000000e+000f, 5.440115e-001f, 3.599787e-001f, -8.485029e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.246366e-002f, -6.459941e-002f, 5.221127e-002f, 3.558052e-001f, -8.435697e-001f, 5.050136e-001f, -1.000000e+000f, 5.686529e-001f, 4.411742e-001f, -8.646393e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.864276e-003f, -1.516550e-002f, 6.376597e-002f, 3.106887e-001f, -5.739543e-001f, 4.370316e-001f, -9.099671e-001f, 4.802879e-001f, 3.663406e-001f, -8.559668e-001f, 5.236984e-001f, -1.000000e+000f, 6.107164e-001f, 3.681455e-001f, -7.449036e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 3.254264e-002f, -9.354672e-002f, 6.734914e-002f, 3.806962e-001f, -8.725686e-001f, 5.049446e-001f, -1.000000e+000f, 5.355576e-001f, 4.540378e-001f, -9.157984e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 8.141806e-003f, -1.409026e-002f, 7.315213e-002f, 3.035810e-001f, -5.724593e-001f, 4.242456e-001f, -8.191303e-001f, 4.935152e-001f, 3.380574e-001f, -7.185472e-001f, 4.835833e-001f, -1.000000e+000f, 5.228713e-001f, 3.741281e-001f, -8.650168e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 4.394360e-002f, -9.430049e-002f, 7.771441e-002f, 2.255125e-001f, -5.952914e-001f, 4.375299e-001f, -1.000000e+000f, 6.050437e-001f, 3.660556e-001f, -8.556120e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 3.055663e-004f, -7.347801e-003f, 5.491673e-002f, 2.797041e-001f, -7.259096e-001f, 4.746655e-001f, -1.000000e+000f, 6.143136e-001f, 3.417272e-001f, -5.973000e-001f, 4.880875e-001f, -1.000000e+000f, 5.169596e-001f, 3.712135e-001f, -8.616417e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.785360e-002f, -1.219542e-001f, 8.011566e-002f, 3.695524e-001f, -8.596944e-001f, 4.791870e-001f, -1.000000e+000f, 5.536897e-001f, 4.235773e-001f, -8.661673e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.957945e-003f, -4.208667e-002f, 7.503818e-002f, 3.522886e-001f, -6.084890e-001f, 4.409380e-001f, -9.206309e-001f, 5.392867e-001f, 3.720118e-001f, -8.350593e-001f, 4.910001e-001f, -1.000000e+000f, 5.135968e-001f, 3.973309e-001f, -8.903817e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.250306e-002f, -1.319728e-001f, 8.293258e-002f, 4.137197e-001f, -9.096370e-001f, 4.998191e-001f, -1.000000e+000f, 5.185754e-001f, 4.743107e-001f, -9.584112e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.407096e-003f, -3.997112e-002f, 7.388108e-002f, 3.605491e-001f, -6.107350e-001f, 4.465037e-001f, -9.076140e-001f, 4.653387e-001f, 3.756399e-001f, -8.667639e-001f, 4.804941e-001f, -1.000000e+000f, 5.695261e-001f, 4.097252e-001f, -8.873911e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 6.084316e-003f, -4.129280e-002f, 7.069943e-002f, 3.647263e-001f, -6.091489e-001f, 4.479257e-001f, -9.200933e-001f, 4.762298e-001f, 3.990380e-001f, -8.932390e-001f, 4.860903e-001f, -1.000000e+000f, 5.617690e-001f, 4.207380e-001f, -8.931136e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 1.490436e-003f, -1.827605e-002f, 6.935172e-002f, 3.120184e-001f, -5.183226e-001f, 4.093699e-001f, -8.691693e-001f, 5.163424e-001f, 3.433205e-001f, -8.001432e-001f, 4.822261e-001f, -1.000000e+000f, 5.219888e-001f, 3.976964e-001f, -8.918073e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 1.060768e-003f, -1.683465e-002f, 7.935141e-002f, 2.625074e-001f, -3.531108e-001f, 3.981502e-001f, -8.493628e-001f, 5.010097e-001f, 3.821627e-001f, -8.378958e-001f, 4.772888e-001f, -1.000000e+000f, 5.267417e-001f, 4.139108e-001f, -9.097408e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.688459e-004f, -1.316108e-002f, 7.831948e-002f, 2.593152e-001f, -3.435127e-001f, 4.024735e-001f, -8.505511e-001f, 4.990421e-001f, 3.866097e-001f, -8.400276e-001f, 4.770364e-001f, -1.000000e+000f, 5.268981e-001f, 4.143340e-001f, -9.103115e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.223115e-003f, -2.770572e-002f, 8.884242e-002f, 2.155999e-001f, -2.409108e-001f, 4.746392e-001f, -1.000000e+000f, 5.284786e-001f, 4.328137e-001f, -9.303856e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 4.869989e-003f, -4.243980e-002f, 9.246105e-002f, 1.771000e-001f, -2.601195e-001f, 4.745255e-001f, -1.000000e+000f, 5.285583e-001f, 4.336133e-001f, -9.312464e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 1.158327e-002f, -6.587948e-002f, 9.398611e-002f, 1.507905e-001f, -3.262713e-001f, 4.784270e-001f, -1.000000e+000f, 5.232203e-001f, 4.586636e-001f, -9.574771e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 1.463080e-002f, -6.443389e-002f, 9.595121e-002f, 1.478315e-001f, -2.907189e-001f, 4.847314e-001f, -1.000000e+000f, 5.157546e-001f, 4.734200e-001f, -9.730568e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.260762e-001f, 3.257263e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 1.322314e-002f, -4.146835e-002f, 6.295295e-002f, 2.161373e-001f, -3.726901e-001f, 3.554757e-001f, -4.819053e-001f, 7.874023e-001f, 2.506681e-001f, -4.680120e-003f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.837810e-002f, -9.128662e-002f, 7.362081e-002f, 1.453575e-001f, -5.250476e-001f, 3.828661e-001f, -1.000000e+000f, 7.533863e-001f, 2.380831e-001f, -6.021700e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.432096e-003f, 1.497838e-003f, 3.086151e-002f, 1.415594e-001f, -5.245149e-001f, 4.913594e-001f, -1.000000e+000f, 5.909044e-001f, 2.963083e-001f, -5.977639e-001f, 4.195969e-001f, -9.852605e-001f, 1.000000e+000f, 3.039512e-001f, -4.463868e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.470901e-002f, -7.494775e-002f, 6.070811e-002f, 2.336764e-001f, -6.836182e-001f, 5.413179e-001f, -1.000000e+000f, 6.973301e-001f, 2.951916e-001f, -6.757465e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 6.578764e-003f, 4.480798e-003f, 3.471212e-002f, 1.152840e-001f, -4.760592e-001f, 4.896421e-001f, -1.000000e+000f, 5.664533e-001f, 2.229157e-001f, -4.852119e-001f, 6.209656e-001f, -1.000000e+000f, 9.958348e-001f, 3.566095e-001f, -5.692943e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.988570e-002f, -9.016886e-002f, 7.020686e-002f, 2.919328e-001f, -7.640623e-001f, 5.000010e-001f, -1.000000e+000f, 6.037346e-001f, 3.508045e-001f, -7.841635e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.317773e-002f, -1.207241e-002f, 5.743149e-002f, 2.636985e-001f, -4.557503e-001f, 4.202753e-001f, -8.744815e-001f, 4.740479e-001f, 3.170341e-001f, -7.844998e-001f, 5.035037e-001f, -1.000000e+000f, 7.415058e-001f, 3.494789e-001f, -6.465668e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 4.602835e-002f, -9.570457e-002f, 5.942014e-002f, 2.587200e-001f, -7.193281e-001f, 6.896812e-001f, -1.000000e+000f, 9.001023e-001f, 3.006722e-001f, -5.631464e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 1.849565e-002f, -5.623973e-002f, 9.747064e-002f, 3.232643e-001f, -5.495190e-001f, 2.115435e-001f, -4.168738e-001f, 3.708700e-001f, 3.405163e-001f, -5.944472e-001f, 4.691839e-001f, -1.000000e+000f, 5.440115e-001f, 3.599787e-001f, -8.485029e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.246366e-002f, -6.459941e-002f, 5.221127e-002f, 3.558052e-001f, -8.435697e-001f, 5.050136e-001f, -1.000000e+000f, 5.686529e-001f, 4.411742e-001f, -8.646393e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.864276e-003f, -1.516550e-002f, 6.376597e-002f, 3.106887e-001f, -5.739543e-001f, 4.370316e-001f, -9.099671e-001f, 4.802879e-001f, 3.663406e-001f, -8.559668e-001f, 5.236984e-001f, -1.000000e+000f, 6.107164e-001f, 3.681455e-001f, -7.449036e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 3.254264e-002f, -9.354672e-002f, 6.734914e-002f, 3.806962e-001f, -8.725686e-001f, 5.049446e-001f, -1.000000e+000f, 5.355576e-001f, 4.540378e-001f, -9.157984e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 8.141806e-003f, -1.409026e-002f, 7.315213e-002f, 3.035810e-001f, -5.724593e-001f, 4.242456e-001f, -8.191303e-001f, 4.935152e-001f, 3.380574e-001f, -7.185472e-001f, 4.835833e-001f, -1.000000e+000f, 5.228713e-001f, 3.741281e-001f, -8.650168e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 4.394360e-002f, -9.430049e-002f, 7.771441e-002f, 2.255125e-001f, -5.952914e-001f, 4.375299e-001f, -1.000000e+000f, 6.050437e-001f, 3.660556e-001f, -8.556120e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 3.055663e-004f, -7.347801e-003f, 5.491673e-002f, 2.797041e-001f, -7.259096e-001f, 4.746655e-001f, -1.000000e+000f, 6.143136e-001f, 3.417272e-001f, -5.973000e-001f, 4.880875e-001f, -1.000000e+000f, 5.169596e-001f, 3.712135e-001f, -8.616417e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.785360e-002f, -1.219542e-001f, 8.011566e-002f, 3.695524e-001f, -8.596944e-001f, 4.791870e-001f, -1.000000e+000f, 5.536897e-001f, 4.235773e-001f, -8.661673e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.957945e-003f, -4.208667e-002f, 7.503818e-002f, 3.522886e-001f, -6.084890e-001f, 4.409380e-001f, -9.206309e-001f, 5.392867e-001f, 3.720118e-001f, -8.350593e-001f, 4.910001e-001f, -1.000000e+000f, 5.135968e-001f, 3.973309e-001f, -8.903817e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.250306e-002f, -1.319728e-001f, 8.293258e-002f, 4.137197e-001f, -9.096370e-001f, 4.998191e-001f, -1.000000e+000f, 5.185754e-001f, 4.743107e-001f, -9.584112e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.407096e-003f, -3.997112e-002f, 7.388108e-002f, 3.605491e-001f, -6.107350e-001f, 4.465037e-001f, -9.076140e-001f, 4.653387e-001f, 3.756399e-001f, -8.667639e-001f, 4.804941e-001f, -1.000000e+000f, 5.695261e-001f, 4.097252e-001f, -8.873911e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 6.084316e-003f, -4.129280e-002f, 7.069943e-002f, 3.647263e-001f, -6.091489e-001f, 4.479257e-001f, -9.200933e-001f, 4.762298e-001f, 3.990380e-001f, -8.932390e-001f, 4.860903e-001f, -1.000000e+000f, 5.617690e-001f, 4.207380e-001f, -8.931136e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 1.490436e-003f, -1.827605e-002f, 6.935172e-002f, 3.120184e-001f, -5.183226e-001f, 4.093699e-001f, -8.691693e-001f, 5.163424e-001f, 3.433205e-001f, -8.001432e-001f, 4.822261e-001f, -1.000000e+000f, 5.219888e-001f, 3.976964e-001f, -8.918073e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 1.060768e-003f, -1.683465e-002f, 7.935141e-002f, 2.625074e-001f, -3.531108e-001f, 3.981502e-001f, -8.493628e-001f, 5.010097e-001f, 3.821627e-001f, -8.378958e-001f, 4.772888e-001f, -1.000000e+000f, 5.267417e-001f, 4.139108e-001f, -9.097408e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.688459e-004f, -1.316108e-002f, 7.831948e-002f, 2.593152e-001f, -3.435127e-001f, 4.024735e-001f, -8.505511e-001f, 4.990421e-001f, 3.866097e-001f, -8.400276e-001f, 4.770364e-001f, -1.000000e+000f, 5.268981e-001f, 4.143340e-001f, -9.103115e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.223115e-003f, -2.770572e-002f, 8.884242e-002f, 2.155999e-001f, -2.409108e-001f, 4.746392e-001f, -1.000000e+000f, 5.284786e-001f, 4.328137e-001f, -9.303856e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 4.869989e-003f, -4.243980e-002f, 9.246105e-002f, 1.771000e-001f, -2.601195e-001f, 4.745255e-001f, -1.000000e+000f, 5.285583e-001f, 4.336133e-001f, -9.312464e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 1.158327e-002f, -6.587948e-002f, 9.398611e-002f, 1.507905e-001f, -3.262713e-001f, 4.784270e-001f, -1.000000e+000f, 5.232203e-001f, 4.586636e-001f, -9.574771e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 1.463080e-002f, -6.443389e-002f, 9.595121e-002f, 1.478315e-001f, -2.907189e-001f, 4.847314e-001f, -1.000000e+000f, 5.157546e-001f, 4.734200e-001f, -9.730568e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.914345e-001f, 4.032437e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  1.322314e-002f, -4.146835e-002f, 6.295295e-002f, 2.161373e-001f, -3.726901e-001f, 3.554757e-001f, -4.819053e-001f, 7.874023e-001f, 2.506681e-001f, -4.680120e-003f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  5.837810e-002f, -9.128662e-002f, 7.362081e-002f, 1.453575e-001f, -5.250476e-001f, 3.828661e-001f, -1.000000e+000f, 7.533863e-001f, 2.380831e-001f, -6.021700e-001f, 7.432096e-003f, 1.497838e-003f, 3.086151e-002f, 1.415594e-001f, -5.245149e-001f, 4.913594e-001f, -1.000000e+000f, 5.909044e-001f, 2.963083e-001f, -5.977639e-001f, 4.195969e-001f, -9.852605e-001f, 1.000000e+000f, 3.039512e-001f, -4.463868e-001f,
  2.470901e-002f, -7.494775e-002f, 6.070811e-002f, 2.336764e-001f, -6.836182e-001f, 5.413179e-001f, -1.000000e+000f, 6.973301e-001f, 2.951916e-001f, -6.757465e-001f, 6.578764e-003f, 4.480798e-003f, 3.471212e-002f, 1.152840e-001f, -4.760592e-001f, 4.896421e-001f, -1.000000e+000f, 5.664533e-001f, 2.229157e-001f, -4.852119e-001f, 6.209656e-001f, -1.000000e+000f, 9.958348e-001f, 3.566095e-001f, -5.692943e-001f,
  2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  2.988570e-002f, -9.016886e-002f, 7.020686e-002f, 2.919328e-001f, -7.640623e-001f, 5.000010e-001f, -1.000000e+000f, 6.037346e-001f, 3.508045e-001f, -7.841635e-001f, 2.317773e-002f, -1.207241e-002f, 5.743149e-002f, 2.636985e-001f, -4.557503e-001f, 4.202753e-001f, -8.744815e-001f, 4.740479e-001f, 3.170341e-001f, -7.844998e-001f, 5.035037e-001f, -1.000000e+000f, 7.415058e-001f, 3.494789e-001f, -6.465668e-001f,
  4.602835e-002f, -9.570457e-002f, 5.942014e-002f, 2.587200e-001f, -7.193281e-001f, 6.896812e-001f, -1.000000e+000f, 9.001023e-001f, 3.006722e-001f, -5.631464e-001f, 1.849565e-002f, -5.623973e-002f, 9.747064e-002f, 3.232643e-001f, -5.495190e-001f, 2.115435e-001f, -4.168738e-001f, 3.708700e-001f, 3.405163e-001f, -5.944472e-001f, 4.691839e-001f, -1.000000e+000f, 5.440115e-001f, 3.599787e-001f, -8.485029e-001f,
  5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  2.246366e-002f, -6.459941e-002f, 5.221127e-002f, 3.558052e-001f, -8.435697e-001f, 5.050136e-001f, -1.000000e+000f, 5.686529e-001f, 4.411742e-001f, -8.646393e-001f, 2.864276e-003f, -1.516550e-002f, 6.376597e-002f, 3.106887e-001f, -5.739543e-001f, 4.370316e-001f, -9.099671e-001f, 4.802879e-001f, 3.663406e-001f, -8.559668e-001f, 5.236984e-001f, -1.000000e+000f, 6.107164e-001f, 3.681455e-001f, -7.449036e-001f,
  3.254264e-002f, -9.354672e-002f, 6.734914e-002f, 3.806962e-001f, -8.725686e-001f, 5.049446e-001f, -1.000000e+000f, 5.355576e-001f, 4.540378e-001f, -9.157984e-001f, 8.141806e-003f, -1.409026e-002f, 7.315213e-002f, 3.035810e-001f, -5.724593e-001f, 4.242456e-001f, -8.191303e-001f, 4.935152e-001f, 3.380574e-001f, -7.185472e-001f, 4.835833e-001f, -1.000000e+000f, 5.228713e-001f, 3.741281e-001f, -8.650168e-001f,
  5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  4.394360e-002f, -9.430049e-002f, 7.771441e-002f, 2.255125e-001f, -5.952914e-001f, 4.375299e-001f, -1.000000e+000f, 6.050437e-001f, 3.660556e-001f, -8.556120e-001f, 3.055663e-004f, -7.347801e-003f, 5.491673e-002f, 2.797041e-001f, -7.259096e-001f, 4.746655e-001f, -1.000000e+000f, 6.143136e-001f, 3.417272e-001f, -5.973000e-001f, 4.880875e-001f, -1.000000e+000f, 5.169596e-001f, 3.712135e-001f, -8.616417e-001f,
  6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  5.785360e-002f, -1.219542e-001f, 8.011566e-002f, 3.695524e-001f, -8.596944e-001f, 4.791870e-001f, -1.000000e+000f, 5.536897e-001f, 4.235773e-001f, -8.661673e-001f, 5.957945e-003f, -4.208667e-002f, 7.503818e-002f, 3.522886e-001f, -6.084890e-001f, 4.409380e-001f, -9.206309e-001f, 5.392867e-001f, 3.720118e-001f, -8.350593e-001f, 4.910001e-001f, -1.000000e+000f, 5.135968e-001f, 3.973309e-001f, -8.903817e-001f,
  5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  5.250306e-002f, -1.319728e-001f, 8.293258e-002f, 4.137197e-001f, -9.096370e-001f, 4.998191e-001f, -1.000000e+000f, 5.185754e-001f, 4.743107e-001f, -9.584112e-001f, 5.407096e-003f, -3.997112e-002f, 7.388108e-002f, 3.605491e-001f, -6.107350e-001f, 4.465037e-001f, -9.076140e-001f, 4.653387e-001f, 3.756399e-001f, -8.667639e-001f, 4.804941e-001f, -1.000000e+000f, 5.695261e-001f, 4.097252e-001f, -8.873911e-001f,
  5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 6.084316e-003f, -4.129280e-002f, 7.069943e-002f, 3.647263e-001f, -6.091489e-001f, 4.479257e-001f, -9.200933e-001f, 4.762298e-001f, 3.990380e-001f, -8.932390e-001f, 4.860903e-001f, -1.000000e+000f, 5.617690e-001f, 4.207380e-001f, -8.931136e-001f,
  6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 1.490436e-003f, -1.827605e-002f, 6.935172e-002f, 3.120184e-001f, -5.183226e-001f, 4.093699e-001f, -8.691693e-001f, 5.163424e-001f, 3.433205e-001f, -8.001432e-001f, 4.822261e-001f, -1.000000e+000f, 5.219888e-001f, 3.976964e-001f, -8.918073e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 1.060768e-003f, -1.683465e-002f, 7.935141e-002f, 2.625074e-001f, -3.531108e-001f, 3.981502e-001f, -8.493628e-001f, 5.010097e-001f, 3.821627e-001f, -8.378958e-001f, 4.772888e-001f, -1.000000e+000f, 5.267417e-001f, 4.139108e-001f, -9.097408e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 5.688459e-004f, -1.316108e-002f, 7.831948e-002f, 2.593152e-001f, -3.435127e-001f, 4.024735e-001f, -8.505511e-001f, 4.990421e-001f, 3.866097e-001f, -8.400276e-001f, 4.770364e-001f, -1.000000e+000f, 5.268981e-001f, 4.143340e-001f, -9.103115e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 2.223115e-003f, -2.770572e-002f, 8.884242e-002f, 2.155999e-001f, -2.409108e-001f, 4.746392e-001f, -1.000000e+000f, 5.284786e-001f, 4.328137e-001f, -9.303856e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 4.869989e-003f, -4.243980e-002f, 9.246105e-002f, 1.771000e-001f, -2.601195e-001f, 4.745255e-001f, -1.000000e+000f, 5.285583e-001f, 4.336133e-001f, -9.312464e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 1.158327e-002f, -6.587948e-002f, 9.398611e-002f, 1.507905e-001f, -3.262713e-001f, 4.784270e-001f, -1.000000e+000f, 5.232203e-001f, 4.586636e-001f, -9.574771e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 1.463080e-002f, -6.443389e-002f, 9.595121e-002f, 1.478315e-001f, -2.907189e-001f, 4.847314e-001f, -1.000000e+000f, 5.157546e-001f, 4.734200e-001f, -9.730568e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 1.322314e-002f, -4.146835e-002f, 6.295295e-002f, 2.161373e-001f, -3.726901e-001f, 3.554757e-001f, -4.819053e-001f, 7.874023e-001f, 2.506681e-001f, -4.680120e-003f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.837810e-002f, -9.128662e-002f, 7.362081e-002f, 1.453575e-001f, -5.250476e-001f, 3.828661e-001f, -1.000000e+000f, 7.533863e-001f, 2.380831e-001f, -6.021700e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.432096e-003f, 1.497838e-003f, 3.086151e-002f, 1.415594e-001f, -5.245149e-001f, 4.913594e-001f, -1.000000e+000f, 5.909044e-001f, 2.963083e-001f, -5.977639e-001f, 4.195969e-001f, -9.852605e-001f, 1.000000e+000f, 3.039512e-001f, -4.463868e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.470901e-002f, -7.494775e-002f, 6.070811e-002f, 2.336764e-001f, -6.836182e-001f, 5.413179e-001f, -1.000000e+000f, 6.973301e-001f, 2.951916e-001f, -6.757465e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 6.578764e-003f, 4.480798e-003f, 3.471212e-002f, 1.152840e-001f, -4.760592e-001f, 4.896421e-001f, -1.000000e+000f, 5.664533e-001f, 2.229157e-001f, -4.852119e-001f, 6.209656e-001f, -1.000000e+000f, 9.958348e-001f, 3.566095e-001f, -5.692943e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.988570e-002f, -9.016886e-002f, 7.020686e-002f, 2.919328e-001f, -7.640623e-001f, 5.000010e-001f, -1.000000e+000f, 6.037346e-001f, 3.508045e-001f, -7.841635e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.317773e-002f, -1.207241e-002f, 5.743149e-002f, 2.636985e-001f, -4.557503e-001f, 4.202753e-001f, -8.744815e-001f, 4.740479e-001f, 3.170341e-001f, -7.844998e-001f, 5.035037e-001f, -1.000000e+000f, 7.415058e-001f, 3.494789e-001f, -6.465668e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 4.602835e-002f, -9.570457e-002f, 5.942014e-002f, 2.587200e-001f, -7.193281e-001f, 6.896812e-001f, -1.000000e+000f, 9.001023e-001f, 3.006722e-001f, -5.631464e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 1.849565e-002f, -5.623973e-002f, 9.747064e-002f, 3.232643e-001f, -5.495190e-001f, 2.115435e-001f, -4.168738e-001f, 3.708700e-001f, 3.405163e-001f, -5.944472e-001f, 4.691839e-001f, -1.000000e+000f, 5.440115e-001f, 3.599787e-001f, -8.485029e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.246366e-002f, -6.459941e-002f, 5.221127e-002f, 3.558052e-001f, -8.435697e-001f, 5.050136e-001f, -1.000000e+000f, 5.686529e-001f, 4.411742e-001f, -8.646393e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.864276e-003f, -1.516550e-002f, 6.376597e-002f, 3.106887e-001f, -5.739543e-001f, 4.370316e-001f, -9.099671e-001f, 4.802879e-001f, 3.663406e-001f, -8.559668e-001f, 5.236984e-001f, -1.000000e+000f, 6.107164e-001f, 3.681455e-001f, -7.449036e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 3.254264e-002f, -9.354672e-002f, 6.734914e-002f, 3.806962e-001f, -8.725686e-001f, 5.049446e-001f, -1.000000e+000f, 5.355576e-001f, 4.540378e-001f, -9.157984e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 8.141806e-003f, -1.409026e-002f, 7.315213e-002f, 3.035810e-001f, -5.724593e-001f, 4.242456e-001f, -8.191303e-001f, 4.935152e-001f, 3.380574e-001f, -7.185472e-001f, 4.835833e-001f, -1.000000e+000f, 5.228713e-001f, 3.741281e-001f, -8.650168e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 4.394360e-002f, -9.430049e-002f, 7.771441e-002f, 2.255125e-001f, -5.952914e-001f, 4.375299e-001f, -1.000000e+000f, 6.050437e-001f, 3.660556e-001f, -8.556120e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 3.055663e-004f, -7.347801e-003f, 5.491673e-002f, 2.797041e-001f, -7.259096e-001f, 4.746655e-001f, -1.000000e+000f, 6.143136e-001f, 3.417272e-001f, -5.973000e-001f, 4.880875e-001f, -1.000000e+000f, 5.169596e-001f, 3.712135e-001f, -8.616417e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.785360e-002f, -1.219542e-001f, 8.011566e-002f, 3.695524e-001f, -8.596944e-001f, 4.791870e-001f, -1.000000e+000f, 5.536897e-001f, 4.235773e-001f, -8.661673e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.957945e-003f, -4.208667e-002f, 7.503818e-002f, 3.522886e-001f, -6.084890e-001f, 4.409380e-001f, -9.206309e-001f, 5.392867e-001f, 3.720118e-001f, -8.350593e-001f, 4.910001e-001f, -1.000000e+000f, 5.135968e-001f, 3.973309e-001f, -8.903817e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.250306e-002f, -1.319728e-001f, 8.293258e-002f, 4.137197e-001f, -9.096370e-001f, 4.998191e-001f, -1.000000e+000f, 5.185754e-001f, 4.743107e-001f, -9.584112e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.407096e-003f, -3.997112e-002f, 7.388108e-002f, 3.605491e-001f, -6.107350e-001f, 4.465037e-001f, -9.076140e-001f, 4.653387e-001f, 3.756399e-001f, -8.667639e-001f, 4.804941e-001f, -1.000000e+000f, 5.695261e-001f, 4.097252e-001f, -8.873911e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 6.084316e-003f, -4.129280e-002f, 7.069943e-002f, 3.647263e-001f, -6.091489e-001f, 4.479257e-001f, -9.200933e-001f, 4.762298e-001f, 3.990380e-001f, -8.932390e-001f, 4.860903e-001f, -1.000000e+000f, 5.617690e-001f, 4.207380e-001f, -8.931136e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 1.490436e-003f, -1.827605e-002f, 6.935172e-002f, 3.120184e-001f, -5.183226e-001f, 4.093699e-001f, -8.691693e-001f, 5.163424e-001f, 3.433205e-001f, -8.001432e-001f, 4.822261e-001f, -1.000000e+000f, 5.219888e-001f, 3.976964e-001f, -8.918073e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 1.060768e-003f, -1.683465e-002f, 7.935141e-002f, 2.625074e-001f, -3.531108e-001f, 3.981502e-001f, -8.493628e-001f, 5.010097e-001f, 3.821627e-001f, -8.378958e-001f, 4.772888e-001f, -1.000000e+000f, 5.267417e-001f, 4.139108e-001f, -9.097408e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.688459e-004f, -1.316108e-002f, 7.831948e-002f, 2.593152e-001f, -3.435127e-001f, 4.024735e-001f, -8.505511e-001f, 4.990421e-001f, 3.866097e-001f, -8.400276e-001f, 4.770364e-001f, -1.000000e+000f, 5.268981e-001f, 4.143340e-001f, -9.103115e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.223115e-003f, -2.770572e-002f, 8.884242e-002f, 2.155999e-001f, -2.409108e-001f, 4.746392e-001f, -1.000000e+000f, 5.284786e-001f, 4.328137e-001f, -9.303856e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 4.869989e-003f, -4.243980e-002f, 9.246105e-002f, 1.771000e-001f, -2.601195e-001f, 4.745255e-001f, -1.000000e+000f, 5.285583e-001f, 4.336133e-001f, -9.312464e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 1.158327e-002f, -6.587948e-002f, 9.398611e-002f, 1.507905e-001f, -3.262713e-001f, 4.784270e-001f, -1.000000e+000f, 5.232203e-001f, 4.586636e-001f, -9.574771e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 1.463080e-002f, -6.443389e-002f, 9.595121e-002f, 1.478315e-001f, -2.907189e-001f, 4.847314e-001f, -1.000000e+000f, 5.157546e-001f, 4.734200e-001f, -9.730568e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -3.398958e-001f, 4.395459e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 1.322314e-002f, -4.146835e-002f, 6.295295e-002f, 2.161373e-001f, -3.726901e-001f, 3.554757e-001f, -4.819053e-001f, 7.874023e-001f, 2.506681e-001f, -4.680120e-003f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.837810e-002f, -9.128662e-002f, 7.362081e-002f, 1.453575e-001f, -5.250476e-001f, 3.828661e-001f, -1.000000e+000f, 7.533863e-001f, 2.380831e-001f, -6.021700e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.432096e-003f, 1.497838e-003f, 3.086151e-002f, 1.415594e-001f, -5.245149e-001f, 4.913594e-001f, -1.000000e+000f, 5.909044e-001f, 2.963083e-001f, -5.977639e-001f, 4.195969e-001f, -9.852605e-001f, 1.000000e+000f, 3.039512e-001f, -4.463868e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.470901e-002f, -7.494775e-002f, 6.070811e-002f, 2.336764e-001f, -6.836182e-001f, 5.413179e-001f, -1.000000e+000f, 6.973301e-001f, 2.951916e-001f, -6.757465e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 6.578764e-003f, 4.480798e-003f, 3.471212e-002f, 1.152840e-001f, -4.760592e-001f, 4.896421e-001f, -1.000000e+000f, 5.664533e-001f, 2.229157e-001f, -4.852119e-001f, 6.209656e-001f, -1.000000e+000f, 9.958348e-001f, 3.566095e-001f, -5.692943e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.988570e-002f, -9.016886e-002f, 7.020686e-002f, 2.919328e-001f, -7.640623e-001f, 5.000010e-001f, -1.000000e+000f, 6.037346e-001f, 3.508045e-001f, -7.841635e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.317773e-002f, -1.207241e-002f, 5.743149e-002f, 2.636985e-001f, -4.557503e-001f, 4.202753e-001f, -8.744815e-001f, 4.740479e-001f, 3.170341e-001f, -7.844998e-001f, 5.035037e-001f, -1.000000e+000f, 7.415058e-001f, 3.494789e-001f, -6.465668e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 4.602835e-002f, -9.570457e-002f, 5.942014e-002f, 2.587200e-001f, -7.193281e-001f, 6.896812e-001f, -1.000000e+000f, 9.001023e-001f, 3.006722e-001f, -5.631464e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 1.849565e-002f, -5.623973e-002f, 9.747064e-002f, 3.232643e-001f, -5.495190e-001f, 2.115435e-001f, -4.168738e-001f, 3.708700e-001f, 3.405163e-001f, -5.944472e-001f, 4.691839e-001f, -1.000000e+000f, 5.440115e-001f, 3.599787e-001f, -8.485029e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.246366e-002f, -6.459941e-002f, 5.221127e-002f, 3.558052e-001f, -8.435697e-001f, 5.050136e-001f, -1.000000e+000f, 5.686529e-001f, 4.411742e-001f, -8.646393e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.864276e-003f, -1.516550e-002f, 6.376597e-002f, 3.106887e-001f, -5.739543e-001f, 4.370316e-001f, -9.099671e-001f, 4.802879e-001f, 3.663406e-001f, -8.559668e-001f, 5.236984e-001f, -1.000000e+000f, 6.107164e-001f, 3.681455e-001f, -7.449036e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 3.254264e-002f, -9.354672e-002f, 6.734914e-002f, 3.806962e-001f, -8.725686e-001f, 5.049446e-001f, -1.000000e+000f, 5.355576e-001f, 4.540378e-001f, -9.157984e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 8.141806e-003f, -1.409026e-002f, 7.315213e-002f, 3.035810e-001f, -5.724593e-001f, 4.242456e-001f, -8.191303e-001f, 4.935152e-001f, 3.380574e-001f, -7.185472e-001f, 4.835833e-001f, -1.000000e+000f, 5.228713e-001f, 3.741281e-001f, -8.650168e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 4.394360e-002f, -9.430049e-002f, 7.771441e-002f, 2.255125e-001f, -5.952914e-001f, 4.375299e-001f, -1.000000e+000f, 6.050437e-001f, 3.660556e-001f, -8.556120e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 3.055663e-004f, -7.347801e-003f, 5.491673e-002f, 2.797041e-001f, -7.259096e-001f, 4.746655e-001f, -1.000000e+000f, 6.143136e-001f, 3.417272e-001f, -5.973000e-001f, 4.880875e-001f, -1.000000e+000f, 5.169596e-001f, 3.712135e-001f, -8.616417e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.785360e-002f, -1.219542e-001f, 8.011566e-002f, 3.695524e-001f, -8.596944e-001f, 4.791870e-001f, -1.000000e+000f, 5.536897e-001f, 4.235773e-001f, -8.661673e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.957945e-003f, -4.208667e-002f, 7.503818e-002f, 3.522886e-001f, -6.084890e-001f, 4.409380e-001f, -9.206309e-001f, 5.392867e-001f, 3.720118e-001f, -8.350593e-001f, 4.910001e-001f, -1.000000e+000f, 5.135968e-001f, 3.973309e-001f, -8.903817e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.250306e-002f, -1.319728e-001f, 8.293258e-002f, 4.137197e-001f, -9.096370e-001f, 4.998191e-001f, -1.000000e+000f, 5.185754e-001f, 4.743107e-001f, -9.584112e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.407096e-003f, -3.997112e-002f, 7.388108e-002f, 3.605491e-001f, -6.107350e-001f, 4.465037e-001f, -9.076140e-001f, 4.653387e-001f, 3.756399e-001f, -8.667639e-001f, 4.804941e-001f, -1.000000e+000f, 5.695261e-001f, 4.097252e-001f, -8.873911e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 6.084316e-003f, -4.129280e-002f, 7.069943e-002f, 3.647263e-001f, -6.091489e-001f, 4.479257e-001f, -9.200933e-001f, 4.762298e-001f, 3.990380e-001f, -8.932390e-001f, 4.860903e-001f, -1.000000e+000f, 5.617690e-001f, 4.207380e-001f, -8.931136e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 1.490436e-003f, -1.827605e-002f, 6.935172e-002f, 3.120184e-001f, -5.183226e-001f, 4.093699e-001f, -8.691693e-001f, 5.163424e-001f, 3.433205e-001f, -8.001432e-001f, 4.822261e-001f, -1.000000e+000f, 5.219888e-001f, 3.976964e-001f, -8.918073e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 1.060768e-003f, -1.683465e-002f, 7.935141e-002f, 2.625074e-001f, -3.531108e-001f, 3.981502e-001f, -8.493628e-001f, 5.010097e-001f, 3.821627e-001f, -8.378958e-001f, 4.772888e-001f, -1.000000e+000f, 5.267417e-001f, 4.139108e-001f, -9.097408e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.688459e-004f, -1.316108e-002f, 7.831948e-002f, 2.593152e-001f, -3.435127e-001f, 4.024735e-001f, -8.505511e-001f, 4.990421e-001f, 3.866097e-001f, -8.400276e-001f, 4.770364e-001f, -1.000000e+000f, 5.268981e-001f, 4.143340e-001f, -9.103115e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.223115e-003f, -2.770572e-002f, 8.884242e-002f, 2.155999e-001f, -2.409108e-001f, 4.746392e-001f, -1.000000e+000f, 5.284786e-001f, 4.328137e-001f, -9.303856e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 4.869989e-003f, -4.243980e-002f, 9.246105e-002f, 1.771000e-001f, -2.601195e-001f, 4.745255e-001f, -1.000000e+000f, 5.285583e-001f, 4.336133e-001f, -9.312464e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 1.158327e-002f, -6.587948e-002f, 9.398611e-002f, 1.507905e-001f, -3.262713e-001f, 4.784270e-001f, -1.000000e+000f, 5.232203e-001f, 4.586636e-001f, -9.574771e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 1.463080e-002f, -6.443389e-002f, 9.595121e-002f, 1.478315e-001f, -2.907189e-001f, 4.847314e-001f, -1.000000e+000f, 5.157546e-001f, 4.734200e-001f, -9.730568e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -3.077617e-001f, 3.869165e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 1.322314e-002f, -4.146835e-002f, 6.295295e-002f, 2.161373e-001f, -3.726901e-001f, 3.554757e-001f, -4.819053e-001f, 7.874023e-001f, 2.506681e-001f, -4.680120e-003f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.837810e-002f, -9.128662e-002f, 7.362081e-002f, 1.453575e-001f, -5.250476e-001f, 3.828661e-001f, -1.000000e+000f, 7.533863e-001f, 2.380831e-001f, -6.021700e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.432096e-003f, 1.497838e-003f, 3.086151e-002f, 1.415594e-001f, -5.245149e-001f, 4.913594e-001f, -1.000000e+000f, 5.909044e-001f, 2.963083e-001f, -5.977639e-001f, 4.195969e-001f, -9.852605e-001f, 1.000000e+000f, 3.039512e-001f, -4.463868e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 2.988570e-002f, -9.016886e-002f, 7.020686e-002f, 2.919328e-001f, -7.640623e-001f, 5.000010e-001f, -1.000000e+000f, 6.037346e-001f, 3.508045e-001f, -7.841635e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 2.317773e-002f, -1.207241e-002f, 5.743149e-002f, 2.636985e-001f, -4.557503e-001f, 4.202753e-001f, -8.744815e-001f, 4.740479e-001f, 3.170341e-001f, -7.844998e-001f, 5.035037e-001f, -1.000000e+000f, 7.415058e-001f, 3.494789e-001f, -6.465668e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 4.602835e-002f, -9.570457e-002f, 5.942014e-002f, 2.587200e-001f, -7.193281e-001f, 6.896812e-001f, -1.000000e+000f, 9.001023e-001f, 3.006722e-001f, -5.631464e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 1.849565e-002f, -5.623973e-002f, 9.747064e-002f, 3.232643e-001f, -5.495190e-001f, 2.115435e-001f, -4.168738e-001f, 3.708700e-001f, 3.405163e-001f, -5.944472e-001f, 4.691839e-001f, -1.000000e+000f, 5.440115e-001f, 3.599787e-001f, -8.485029e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 2.246366e-002f, -6.459941e-002f, 5.221127e-002f, 3.558052e-001f, -8.435697e-001f, 5.050136e-001f, -1.000000e+000f, 5.686529e-001f, 4.411742e-001f, -8.646393e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 2.864276e-003f, -1.516550e-002f, 6.376597e-002f, 3.106887e-001f, -5.739543e-001f, 4.370316e-001f, -9.099671e-001f, 4.802879e-001f, 3.663406e-001f, -8.559668e-001f, 5.236984e-001f, -1.000000e+000f, 6.107164e-001f, 3.681455e-001f, -7.449036e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 4.394360e-002f, -9.430049e-002f, 7.771441e-002f, 2.255125e-001f, -5.952914e-001f, 4.375299e-001f, -1.000000e+000f, 6.050437e-001f, 3.660556e-001f, -8.556120e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 3.055663e-004f, -7.347801e-003f, 5.491673e-002f, 2.797041e-001f, -7.259096e-001f, 4.746655e-001f, -1.000000e+000f, 6.143136e-001f, 3.417272e-001f, -5.973000e-001f, 4.880875e-001f, -1.000000e+000f, 5.169596e-001f, 3.712135e-001f, -8.616417e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.785360e-002f, -1.219542e-001f, 8.011566e-002f, 3.695524e-001f, -8.596944e-001f, 4.791870e-001f, -1.000000e+000f, 5.536897e-001f, 4.235773e-001f, -8.661673e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.957945e-003f, -4.208667e-002f, 7.503818e-002f, 3.522886e-001f, -6.084890e-001f, 4.409380e-001f, -9.206309e-001f, 5.392867e-001f, 3.720118e-001f, -8.350593e-001f, 4.910001e-001f, -1.000000e+000f, 5.135968e-001f, 3.973309e-001f, -8.903817e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 6.084316e-003f, -4.129280e-002f, 7.069943e-002f, 3.647263e-001f, -6.091489e-001f, 4.479257e-001f, -9.200933e-001f, 4.762298e-001f, 3.990380e-001f, -8.932390e-001f, 4.860903e-001f, -1.000000e+000f, 5.617690e-001f, 4.207380e-001f, -8.931136e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 1.490436e-003f, -1.827605e-002f, 6.935172e-002f, 3.120184e-001f, -5.183226e-001f, 4.093699e-001f, -8.691693e-001f, 5.163424e-001f, 3.433205e-001f, -8.001432e-001f, 4.822261e-001f, -1.000000e+000f, 5.219888e-001f, 3.976964e-001f, -8.918073e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 1.060768e-003f, -1.683465e-002f, 7.935141e-002f, 2.625074e-001f, -3.531108e-001f, 3.981502e-001f, -8.493628e-001f, 5.010097e-001f, 3.821627e-001f, -8.378958e-001f, 4.772888e-001f, -1.000000e+000f, 5.267417e-001f, 4.139108e-001f, -9.097408e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 2.223115e-003f, -2.770572e-002f, 8.884242e-002f, 2.155999e-001f, -2.409108e-001f, 4.746392e-001f, -1.000000e+000f, 5.284786e-001f, 4.328137e-001f, -9.303856e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 4.869989e-003f, -4.243980e-002f, 9.246105e-002f, 1.771000e-001f, -2.601195e-001f, 4.745255e-001f, -1.000000e+000f, 5.285583e-001f, 4.336133e-001f, -9.312464e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 1.463080e-002f, -6.443389e-002f, 9.595121e-002f, 1.478315e-001f, -2.907189e-001f, 4.847314e-001f, -1.000000e+000f, 5.157546e-001f, 4.734200e-001f, -9.730568e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.926358e-001f, 3.631827e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 1.322314e-002f, -4.146835e-002f, 6.295295e-002f, 2.161373e-001f, -3.726901e-001f, 3.554757e-001f, -4.819053e-001f, 7.874023e-001f, 2.506681e-001f, -4.680120e-003f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.470901e-002f, -7.494775e-002f, 6.070811e-002f, 2.336764e-001f, -6.836182e-001f, 5.413179e-001f, -1.000000e+000f, 6.973301e-001f, 2.951916e-001f, -6.757465e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 6.578764e-003f, 4.480798e-003f, 3.471212e-002f, 1.152840e-001f, -4.760592e-001f, 4.896421e-001f, -1.000000e+000f, 5.664533e-001f, 2.229157e-001f, -4.852119e-001f, 6.209656e-001f, -1.000000e+000f, 9.958348e-001f, 3.566095e-001f, -5.692943e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.988570e-002f, -9.016886e-002f, 7.020686e-002f, 2.919328e-001f, -7.640623e-001f, 5.000010e-001f, -1.000000e+000f, 6.037346e-001f, 3.508045e-001f, -7.841635e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.317773e-002f, -1.207241e-002f, 5.743149e-002f, 2.636985e-001f, -4.557503e-001f, 4.202753e-001f, -8.744815e-001f, 4.740479e-001f, 3.170341e-001f, -7.844998e-001f, 5.035037e-001f, -1.000000e+000f, 7.415058e-001f, 3.494789e-001f, -6.465668e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.246366e-002f, -6.459941e-002f, 5.221127e-002f, 3.558052e-001f, -8.435697e-001f, 5.050136e-001f, -1.000000e+000f, 5.686529e-001f, 4.411742e-001f, -8.646393e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.864276e-003f, -1.516550e-002f, 6.376597e-002f, 3.106887e-001f, -5.739543e-001f, 4.370316e-001f, -9.099671e-001f, 4.802879e-001f, 3.663406e-001f, -8.559668e-001f, 5.236984e-001f, -1.000000e+000f, 6.107164e-001f, 3.681455e-001f, -7.449036e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 3.254264e-002f, -9.354672e-002f, 6.734914e-002f, 3.806962e-001f, -8.725686e-001f, 5.049446e-001f, -1.000000e+000f, 5.355576e-001f, 4.540378e-001f, -9.157984e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 8.141806e-003f, -1.409026e-002f, 7.315213e-002f, 3.035810e-001f, -5.724593e-001f, 4.242456e-001f, -8.191303e-001f, 4.935152e-001f, 3.380574e-001f, -7.185472e-001f, 4.835833e-001f, -1.000000e+000f, 5.228713e-001f, 3.741281e-001f, -8.650168e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.785360e-002f, -1.219542e-001f, 8.011566e-002f, 3.695524e-001f, -8.596944e-001f, 4.791870e-001f, -1.000000e+000f, 5.536897e-001f, 4.235773e-001f, -8.661673e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.957945e-003f, -4.208667e-002f, 7.503818e-002f, 3.522886e-001f, -6.084890e-001f, 4.409380e-001f, -9.206309e-001f, 5.392867e-001f, 3.720118e-001f, -8.350593e-001f, 4.910001e-001f, -1.000000e+000f, 5.135968e-001f, 3.973309e-001f, -8.903817e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 6.084316e-003f, -4.129280e-002f, 7.069943e-002f, 3.647263e-001f, -6.091489e-001f, 4.479257e-001f, -9.200933e-001f, 4.762298e-001f, 3.990380e-001f, -8.932390e-001f, 4.860903e-001f, -1.000000e+000f, 5.617690e-001f, 4.207380e-001f, -8.931136e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 1.490436e-003f, -1.827605e-002f, 6.935172e-002f, 3.120184e-001f, -5.183226e-001f, 4.093699e-001f, -8.691693e-001f, 5.163424e-001f, 3.433205e-001f, -8.001432e-001f, 4.822261e-001f, -1.000000e+000f, 5.219888e-001f, 3.976964e-001f, -8.918073e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.688459e-004f, -1.316108e-002f, 7.831948e-002f, 2.593152e-001f, -3.435127e-001f, 4.024735e-001f, -8.505511e-001f, 4.990421e-001f, 3.866097e-001f, -8.400276e-001f, 4.770364e-001f, -1.000000e+000f, 5.268981e-001f, 4.143340e-001f, -9.103115e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.223115e-003f, -2.770572e-002f, 8.884242e-002f, 2.155999e-001f, -2.409108e-001f, 4.746392e-001f, -1.000000e+000f, 5.284786e-001f, 4.328137e-001f, -9.303856e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 1.158327e-002f, -6.587948e-002f, 9.398611e-002f, 1.507905e-001f, -3.262713e-001f, 4.784270e-001f, -1.000000e+000f, 5.232203e-001f, 4.586636e-001f, -9.574771e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.781288e-001f, 3.410038e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 1.322314e-002f, -4.146835e-002f, 6.295295e-002f, 2.161373e-001f, -3.726901e-001f, 3.554757e-001f, -4.819053e-001f, 7.874023e-001f, 2.506681e-001f, -4.680120e-003f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 5.837810e-002f, -9.128662e-002f, 7.362081e-002f, 1.453575e-001f, -5.250476e-001f, 3.828661e-001f, -1.000000e+000f, 7.533863e-001f, 2.380831e-001f, -6.021700e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 7.432096e-003f, 1.497838e-003f, 3.086151e-002f, 1.415594e-001f, -5.245149e-001f, 4.913594e-001f, -1.000000e+000f, 5.909044e-001f, 2.963083e-001f, -5.977639e-001f, 4.195969e-001f, -9.852605e-001f, 1.000000e+000f, 3.039512e-001f, -4.463868e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 4.602835e-002f, -9.570457e-002f, 5.942014e-002f, 2.587200e-001f, -7.193281e-001f, 6.896812e-001f, -1.000000e+000f, 9.001023e-001f, 3.006722e-001f, -5.631464e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 1.849565e-002f, -5.623973e-002f, 9.747064e-002f, 3.232643e-001f, -5.495190e-001f, 2.115435e-001f, -4.168738e-001f, 3.708700e-001f, 3.405163e-001f, -5.944472e-001f, 4.691839e-001f, -1.000000e+000f, 5.440115e-001f, 3.599787e-001f, -8.485029e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 3.254264e-002f, -9.354672e-002f, 6.734914e-002f, 3.806962e-001f, -8.725686e-001f, 5.049446e-001f, -1.000000e+000f, 5.355576e-001f, 4.540378e-001f, -9.157984e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 8.141806e-003f, -1.409026e-002f, 7.315213e-002f, 3.035810e-001f, -5.724593e-001f, 4.242456e-001f, -8.191303e-001f, 4.935152e-001f, 3.380574e-001f, -7.185472e-001f, 4.835833e-001f, -1.000000e+000f, 5.228713e-001f, 3.741281e-001f, -8.650168e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 5.250306e-002f, -1.319728e-001f, 8.293258e-002f, 4.137197e-001f, -9.096370e-001f, 4.998191e-001f, -1.000000e+000f, 5.185754e-001f, 4.743107e-001f, -9.584112e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 5.407096e-003f, -3.997112e-002f, 7.388108e-002f, 3.605491e-001f, -6.107350e-001f, 4.465037e-001f, -9.076140e-001f, 4.653387e-001f, 3.756399e-001f, -8.667639e-001f, 4.804941e-001f, -1.000000e+000f, 5.695261e-001f, 4.097252e-001f, -8.873911e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 6.084316e-003f, -4.129280e-002f, 7.069943e-002f, 3.647263e-001f, -6.091489e-001f, 4.479257e-001f, -9.200933e-001f, 4.762298e-001f, 3.990380e-001f, -8.932390e-001f, 4.860903e-001f, -1.000000e+000f, 5.617690e-001f, 4.207380e-001f, -8.931136e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 1.060768e-003f, -1.683465e-002f, 7.935141e-002f, 2.625074e-001f, -3.531108e-001f, 3.981502e-001f, -8.493628e-001f, 5.010097e-001f, 3.821627e-001f, -8.378958e-001f, 4.772888e-001f, -1.000000e+000f, 5.267417e-001f, 4.139108e-001f, -9.097408e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 2.223115e-003f, -2.770572e-002f, 8.884242e-002f, 2.155999e-001f, -2.409108e-001f, 4.746392e-001f, -1.000000e+000f, 5.284786e-001f, 4.328137e-001f, -9.303856e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.711044e-001f, 3.304621e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 5.837810e-002f, -9.128662e-002f, 7.362081e-002f, 1.453575e-001f, -5.250476e-001f, 3.828661e-001f, -1.000000e+000f, 7.533863e-001f, 2.380831e-001f, -6.021700e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 7.432096e-003f, 1.497838e-003f, 3.086151e-002f, 1.415594e-001f, -5.245149e-001f, 4.913594e-001f, -1.000000e+000f, 5.909044e-001f, 2.963083e-001f, -5.977639e-001f, 4.195969e-001f, -9.852605e-001f, 1.000000e+000f, 3.039512e-001f, -4.463868e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 4.602835e-002f, -9.570457e-002f, 5.942014e-002f, 2.587200e-001f, -7.193281e-001f, 6.896812e-001f, -1.000000e+000f, 9.001023e-001f, 3.006722e-001f, -5.631464e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 1.849565e-002f, -5.623973e-002f, 9.747064e-002f, 3.232643e-001f, -5.495190e-001f, 2.115435e-001f, -4.168738e-001f, 3.708700e-001f, 3.405163e-001f, -5.944472e-001f, 4.691839e-001f, -1.000000e+000f, 5.440115e-001f, 3.599787e-001f, -8.485029e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 2.246366e-002f, -6.459941e-002f, 5.221127e-002f, 3.558052e-001f, -8.435697e-001f, 5.050136e-001f, -1.000000e+000f, 5.686529e-001f, 4.411742e-001f, -8.646393e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 2.864276e-003f, -1.516550e-002f, 6.376597e-002f, 3.106887e-001f, -5.739543e-001f, 4.370316e-001f, -9.099671e-001f, 4.802879e-001f, 3.663406e-001f, -8.559668e-001f, 5.236984e-001f, -1.000000e+000f, 6.107164e-001f, 3.681455e-001f, -7.449036e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 6.109795e-002f, -1.302562e-001f, 7.405944e-002f, 3.622673e-001f, -8.511959e-001f, 5.330006e-001f, -1.000000e+000f, 6.663211e-001f, 3.883545e-001f, -7.891514e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 6.641927e-003f, -4.513472e-002f, 7.670015e-002f, 3.550253e-001f, -6.089170e-001f, 4.451389e-001f, -9.086486e-001f, 4.682208e-001f, 3.754666e-001f, -8.665635e-001f, 4.779300e-001f, -1.000000e+000f, 5.797432e-001f, 3.990014e-001f, -8.708563e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 5.040609e-002f, -1.086292e-001f, 6.920574e-002f, 3.824652e-001f, -8.746030e-001f, 4.674548e-001f, -1.000000e+000f, 5.710345e-001f, 4.409225e-001f, -8.835182e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 8.559136e-003f, -5.251605e-002f, 8.092763e-002f, 3.547363e-001f, -6.088356e-001f, 4.501473e-001f, -9.170678e-001f, 4.710778e-001f, 3.909632e-001f, -8.842563e-001f, 4.880660e-001f, -1.000000e+000f, 5.611986e-001f, 4.187891e-001f, -8.919897e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 5.524415e-003f, -3.863905e-002f, 7.237742e-002f, 3.408737e-001f, -5.608131e-001f, 4.449753e-001f, -9.206689e-001f, 4.797497e-001f, 4.069779e-001f, -9.017505e-001f, 4.817914e-001f, -1.000000e+000f, 5.661825e-001f, 4.138644e-001f, -8.826669e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 1.060768e-003f, -1.683465e-002f, 7.935141e-002f, 2.625074e-001f, -3.531108e-001f, 3.981502e-001f, -8.493628e-001f, 5.010097e-001f, 3.821627e-001f, -8.378958e-001f, 4.772888e-001f, -1.000000e+000f, 5.267417e-001f, 4.139108e-001f, -9.097408e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 4.869989e-003f, -4.243980e-002f, 9.246105e-002f, 1.771000e-001f, -2.601195e-001f, 4.745255e-001f, -1.000000e+000f, 5.285583e-001f, 4.336133e-001f, -9.312464e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 8.524212e-003f, -5.675437e-002f, 9.574728e-002f, 1.792616e-001f, -2.874510e-001f, 4.756410e-001f, -1.000000e+000f, 5.259780e-001f, 4.536405e-001f, -9.525027e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.642307e-001f, 3.202681e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 5.795562e-002f, -1.218594e-001f, 7.475220e-002f, 2.964015e-001f, -7.699307e-001f, 5.479421e-001f, -1.000000e+000f, 6.851057e-001f, 4.136897e-001f, -7.722238e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 5.391755e-003f, -3.998134e-002f, 9.592364e-002f, 2.917739e-001f, -5.435577e-001f, 2.228441e-001f, -4.792148e-001f, 3.660837e-001f, 3.409406e-001f, -6.335960e-001f, 4.685655e-001f, -1.000000e+000f, 5.388039e-001f, 4.004669e-001f, -8.949437e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 5.026009e-002f, -1.178460e-001f, 6.907925e-002f, 4.250060e-001f, -9.219610e-001f, 4.531943e-001f, -1.000000e+000f, 5.659855e-001f, 4.459107e-001f, -9.343897e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 1.585308e-003f, -5.303236e-003f, 5.478789e-002f, 2.488193e-001f, -6.803084e-001f, 4.803493e-001f, -1.000000e+000f, 6.191258e-001f, 3.446716e-001f, -6.090105e-001f, 4.866282e-001f, -1.000000e+000f, 5.190249e-001f, 3.666814e-001f, -8.561988e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 5.785360e-002f, -1.219542e-001f, 8.011566e-002f, 3.695524e-001f, -8.596944e-001f, 4.791870e-001f, -1.000000e+000f, 5.536897e-001f, 4.235773e-001f, -8.661673e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 5.957945e-003f, -4.208667e-002f, 7.503818e-002f, 3.522886e-001f, -6.084890e-001f, 4.409380e-001f, -9.206309e-001f, 5.392867e-001f, 3.720118e-001f, -8.350593e-001f, 4.910001e-001f, -1.000000e+000f, 5.135968e-001f, 3.973309e-001f, -8.903817e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 6.939838e-002f, -1.519286e-001f, 8.337446e-002f, 4.382783e-001f, -9.362323e-001f, 4.658353e-001f, -1.000000e+000f, 5.548735e-001f, 4.512681e-001f, -9.427373e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 1.490436e-003f, -1.827605e-002f, 6.935172e-002f, 3.120184e-001f, -5.183226e-001f, 4.093699e-001f, -8.691693e-001f, 5.163424e-001f, 3.433205e-001f, -8.001432e-001f, 4.822261e-001f, -1.000000e+000f, 5.219888e-001f, 3.976964e-001f, -8.918073e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 5.356118e-003f, -4.436338e-002f, 9.268051e-002f, 1.766640e-001f, -2.630963e-001f, 4.727420e-001f, -1.000000e+000f, 5.304442e-001f, 4.329756e-001f, -9.305649e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 1.266008e-002f, -6.466639e-002f, 9.589443e-002f, 1.397048e-001f, -2.923888e-001f, 4.844593e-001f, -1.000000e+000f, 5.160463e-001f, 4.732974e-001f, -9.729288e-001f,
  0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.575064e-001f, 3.104090e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 6.566848e-003f, -2.462040e-002f, 5.991502e-002f, 3.144261e-001f, -4.935308e-001f, 1.118869e-001f, 4.695468e-001f, 7.025490e-001f, 3.329353e-001f, 6.917400e-001f, 4.683335e-001f, -1.000000e+000f, 8.744306e-001f, 3.403043e-001f, -6.256680e-001f,
  0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 2.664355e-002f, -3.064803e-002f, 5.040702e-002f, 1.028715e-001f, -3.407599e-001f, 4.330364e-001f, -4.864101e-001f, 1.000000e+000f, 2.687985e-001f, -1.169761e-001f, 0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 8.765551e-003f, 1.121329e-002f, 2.995193e-002f, 1.203280e-001f, -4.506585e-001f, 2.889291e-001f, -8.829942e-001f, 8.176921e-001f, 1.895919e-001f, -4.618284e-001f, 5.191174e-001f, -1.000000e+000f, 6.218109e-001f, 3.377220e-001f, -6.025937e-001f,
  0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 2.717484e-002f, -8.432493e-002f, 6.773464e-002f, 2.656855e-001f, -7.287016e-001f, 5.170221e-001f, -1.000000e+000f, 6.415082e-001f, 3.101325e-001f, -7.169383e-001f, 0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 5.973990e-002f, -1.256519e-001f, 7.018407e-002f, 2.501140e-001f, -7.066681e-001f, 3.258618e-001f, -1.010492e-001f, 4.395028e-001f, 3.177137e-001f, -1.964493e-001f, 3.278696e-001f, -7.532357e-001f, 7.614417e-001f, 3.752708e-001f, -6.642937e-001f,
  0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 5.156742e-002f, -1.303167e-001f, 8.233124e-002f, 4.119288e-001f, -9.076660e-001f, 4.999945e-001f, -1.000000e+000f, 5.185461e-001f, 4.739095e-001f, -9.577862e-001f, 0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 1.108234e-002f, -5.925094e-002f, 7.919626e-002f, 3.675494e-001f, -6.209533e-001f, 4.540693e-001f, -9.262078e-001f, 4.761091e-001f, 4.050225e-001f, -9.000248e-001f, 4.908539e-001f, -1.000000e+000f, 5.534251e-001f, 4.429664e-001f, -9.173356e-001f,
  0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 1.058148e-003f, -1.578504e-002f, 8.424657e-002f, 2.357681e-001f, -2.878145e-001f, 3.756163e-001f, -8.007900e-001f, 4.963429e-001f, 3.585123e-001f, -7.899100e-001f, 4.779492e-001f, -1.000000e+000f, 5.255739e-001f, 4.240256e-001f, -9.206847e-001f,
  0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 7.969933e-002f, -1.692378e-001f, 9.728206e-002f, 3.889417e-001f, -8.811302e-001f, 4.895030e-001f, -1.000000e+000f, 5.115348e-001f, 4.742211e-001f, -9.732089e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.509296e-001f, 3.008729e-001f, 0.000000e+000f, -3.745480e-001f, 2.050101e-002f, -7.696997e-002f, 9.098922e-002f, 1.442205e-001f, -3.777793e-001f, 4.844661e-001f, -1.000000e+000f, 5.160386e-001f, 4.728655e-001f, -9.724867e-001f,
  // Total number of coefficients: 11395
  // Maximum number of elevation coefficients: 20
 
  // Full coefficients
  // 10 degrees loudspeakers
  // 48000 Hz sample rate
    // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:44:37 1999
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.476895e-002f, -4.772919e-002f, 9.857382e-002f, 3.184259e-001f, -5.411729e-001f, 1.930449e-001f, -4.375183e-001f, 3.617866e-001f, 3.395317e-001f, -6.513644e-001f, 1.703568e-001f, 5.564557e-001f, 1.000000e+000f, 3.421456e-001f, 6.101007e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.689127e-002f, -6.034295e-002f, 7.573367e-002f, 1.510746e-001f, -3.598030e-001f, 2.582461e-001f, -3.711102e-001f, 6.609323e-001f, 2.699920e-001f, -8.961839e-002f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.336595e-002f, 7.139798e-002f, 1.052423e-001f, 1.364044e-001f, 4.843080e-001f, 1.045939e-001f, 9.041780e-002f, 2.573596e-001f, 1.382575e-001f, -3.911686e-001f, 5.106156e-001f, -1.000000e+000f, 6.079688e-001f, 3.635990e-001f, -6.518426e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 2.504047e-002f, -5.744294e-002f, 6.107820e-002f, 1.835301e-001f, -5.200785e-001f, 5.638516e-001f, -6.406730e-001f, 8.329126e-001f, 2.630250e-001f, -2.454248e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.380713e-002f, 7.631576e-002f, 1.174867e-001f, 9.044345e-002f, 4.152107e-001f, 6.338823e-002f, 6.196800e-002f, 2.128750e-001f, 1.844006e-001f, -4.571826e-001f, 5.125720e-001f, -1.000000e+000f, 6.048699e-001f, 3.494455e-001f, -6.403437e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 2.586329e-002f, -7.877184e-002f, 6.308858e-002f, 2.465824e-001f, -7.019656e-001f, 5.319711e-001f, -1.000000e+000f, 6.711449e-001f, 2.983519e-001f, -6.873001e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 9.906031e-002f, 3.428636e-001f, 3.444012e-001f, 1.862471e-001f, 5.327843e-001f, 3.604693e-003f, -1.943623e-002f, 9.411620e-002f, 2.479530e-001f, -6.833842e-001f, 4.890445e-001f, -1.000000e+000f, 5.578810e-001f, 3.368957e-001f, -6.160579e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 2.932792e-002f, -8.798980e-002f, 6.980727e-002f, 2.665515e-001f, -7.301254e-001f, 5.110451e-001f, -1.000000e+000f, 6.219825e-001f, 3.246262e-001f, -7.409548e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 6.074903e-002f, -1.274760e-001f, 7.051135e-002f, 2.574548e-001f, -7.173422e-001f, 3.393656e-001f, -1.800411e-001f, 4.524638e-001f, 3.183302e-001f, -2.650234e-001f, 3.279167e-001f, -7.710447e-001f, 7.379358e-001f, 3.800708e-001f, -6.957838e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 3.402835e-002f, -9.587249e-002f, 7.175216e-002f, 3.029362e-001f, -7.772123e-001f, 4.987369e-001f, -1.000000e+000f, 5.882841e-001f, 3.698387e-001f, -8.092812e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 5.637490e-002f, -4.851795e-002f, 1.201047e-001f, 2.674591e-001f, -4.283953e-001f, 1.692014e-001f, -3.676560e-001f, 3.073270e-001f, 3.616275e-001f, -6.506291e-001f, 4.836185e-001f, -1.000000e+000f, 5.352488e-001f, 3.621116e-001f, -8.395102e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 6.149242e-002f, -1.297940e-001f, 7.802510e-002f, 3.104696e-001f, -7.876483e-001f, 5.375757e-001f, -1.000000e+000f, 6.589254e-001f, 4.187305e-001f, -7.946705e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.552752e-002f, -7.559896e-002f, 1.155467e-001f, 2.972621e-001f, -5.082516e-001f, 1.554401e-001f, -3.327450e-001f, 2.983151e-001f, 3.786345e-001f, -6.797156e-001f, 4.753205e-001f, -1.000000e+000f, 5.298777e-001f, 4.318439e-001f, -9.283459e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 2.391743e-002f, -6.683163e-002f, 5.189245e-002f, 3.644112e-001f, -8.537105e-001f, 5.013733e-001f, -1.000000e+000f, 5.614421e-001f, 4.443746e-001f, -8.778641e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.174792e-003f, -1.828369e-002f, 6.308060e-002f, 3.022702e-001f, -5.815172e-001f, 4.432151e-001f, -9.190867e-001f, 4.823431e-001f, 3.783691e-001f, -8.691613e-001f, 5.178115e-001f, -1.000000e+000f, 6.011036e-001f, 3.836162e-001f, -7.636170e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 3.443310e-002f, -9.595484e-002f, 6.709729e-002f, 3.885255e-001f, -8.814584e-001f, 5.032401e-001f, -1.000000e+000f, 5.313710e-001f, 4.576336e-001f, -9.245908e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.090554e-002f, -2.638004e-002f, 7.506414e-002f, 3.219734e-001f, -6.038381e-001f, 4.135377e-001f, -8.001272e-001f, 4.699313e-001f, 3.747434e-001f, -7.703849e-001f, 4.857108e-001f, -1.000000e+000f, 5.198853e-001f, 3.971027e-001f, -8.898507e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 5.105304e-002f, -1.189222e-001f, 6.926449e-002f, 4.288426e-001f, -9.261120e-001f, 4.576352e-001f, -1.000000e+000f, 5.582403e-001f, 4.505843e-001f, -9.406401e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.248484e-003f, -1.398446e-002f, 5.372888e-002f, 3.028124e-001f, -7.277675e-001f, 4.853541e-001f, -1.000000e+000f, 6.021267e-001f, 3.522030e-001f, -6.417876e-001f, 4.886281e-001f, -1.000000e+000f, 5.160779e-001f, 4.094292e-001f, -9.030901e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 6.418364e-002f, -1.364553e-001f, 7.664677e-002f, 3.710593e-001f, -8.614629e-001f, 5.239905e-001f, -1.000000e+000f, 6.443606e-001f, 3.951996e-001f, -8.089448e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.929292e-003f, -4.126342e-002f, 7.080187e-002f, 3.601272e-001f, -6.431843e-001f, 4.593382e-001f, -9.636347e-001f, 5.574645e-001f, 3.713419e-001f, -8.459066e-001f, 4.916008e-001f, -1.000000e+000f, 5.129150e-001f, 3.782865e-001f, -8.682114e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 6.430248e-002f, -1.367515e-001f, 7.684578e-002f, 3.709878e-001f, -8.613788e-001f, 5.235570e-001f, -1.000000e+000f, 6.439532e-001f, 3.954255e-001f, -8.092431e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.747879e-003f, -4.188273e-002f, 7.155552e-002f, 3.603232e-001f, -6.453180e-001f, 4.520563e-001f, -9.486960e-001f, 5.501606e-001f, 3.690745e-001f, -8.390824e-001f, 4.912846e-001f, -1.000000e+000f, 5.127003e-001f, 3.854394e-001f, -8.779925e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 5.172992e-002f, -1.115459e-001f, 6.981478e-002f, 3.895055e-001f, -8.826066e-001f, 4.697163e-001f, -1.000000e+000f, 5.621780e-001f, 4.426229e-001f, -8.932282e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.167419e-002f, -5.616602e-002f, 7.924492e-002f, 3.652390e-001f, -6.493856e-001f, 4.537872e-001f, -9.227633e-001f, 4.726187e-001f, 3.926513e-001f, -8.861613e-001f, 4.866813e-001f, -1.000000e+000f, 5.561850e-001f, 4.192716e-001f, -8.965180e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 5.304582e-002f, -1.317054e-001f, 8.181438e-002f, 4.175902e-001f, -9.138676e-001f, 4.996502e-001f, -1.000000e+000f, 5.162188e-001f, 4.764373e-001f, -9.625105e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.305534e-002f, -6.166840e-002f, 7.720660e-002f, 3.762478e-001f, -6.596096e-001f, 4.582459e-001f, -9.332698e-001f, 4.784218e-001f, 4.108711e-001f, -9.064898e-001f, 4.914097e-001f, -1.000000e+000f, 5.468593e-001f, 4.455331e-001f, -9.228833e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 7.023191e-002f, -1.535651e-001f, 8.397517e-002f, 4.475914e-001f, -9.461398e-001f, 4.704265e-001f, -1.000000e+000f, 5.471855e-001f, 4.526238e-001f, -9.448613e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 7.974644e-003f, -4.674600e-002f, 6.850484e-002f, 3.757127e-001f, -6.526738e-001f, 4.571170e-001f, -9.354125e-001f, 4.817415e-001f, 4.208784e-001f, -9.165350e-001f, 4.879603e-001f, -1.000000e+000f, 5.521718e-001f, 4.300660e-001f, -9.047353e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 7.030626e-002f, -1.537034e-001f, 8.405322e-002f, 4.474088e-001f, -9.459359e-001f, 4.704265e-001f, -1.000000e+000f, 5.469331e-001f, 4.534453e-001f, -9.457357e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 7.630036e-003f, -4.636194e-002f, 7.069560e-002f, 3.554164e-001f, -6.115563e-001f, 4.559574e-001f, -9.385959e-001f, 4.860230e-001f, 4.298054e-001f, -9.260820e-001f, 4.860297e-001f, -1.000000e+000f, 5.524445e-001f, 4.332502e-001f, -9.056975e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 7.026710e-002f, -1.536210e-001f, 8.401100e-002f, 4.474050e-001f, -9.459295e-001f, 4.704330e-001f, -1.000000e+000f, 5.469418e-001f, 4.534234e-001f, -9.457078e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 2.663288e-003f, -2.666836e-002f, 6.736269e-002f, 3.306935e-001f, -5.716168e-001f, 4.193007e-001f, -8.873255e-001f, 5.141063e-001f, 3.675202e-001f, -8.314190e-001f, 4.848956e-001f, -1.000000e+000f, 5.187240e-001f, 4.178287e-001f, -9.131844e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.091162e-002f, -1.715755e-001f, 9.737576e-002f, 3.964150e-001f, -8.898371e-001f, 4.894045e-001f, -1.000000e+000f, 5.115605e-001f, 4.736282e-001f, -9.726593e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.403276e-003f, -1.919328e-002f, 7.555107e-002f, 2.749786e-001f, -4.060320e-001f, 4.130601e-001f, -8.624051e-001f, 4.972963e-001f, 4.000025e-001f, -8.538735e-001f, 4.807595e-001f, -1.000000e+000f, 5.224125e-001f, 4.319963e-001f, -9.289333e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.091805e-002f, -1.715971e-001f, 9.739119e-002f, 3.964088e-001f, -8.898299e-001f, 4.894045e-001f, -1.000000e+000f, 5.115605e-001f, 4.736321e-001f, -9.726633e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 2.991784e-003f, -2.026619e-002f, 8.083115e-002f, 2.511895e-001f, -3.460000e-001f, 3.933706e-001f, -8.287850e-001f, 4.967479e-001f, 3.786310e-001f, -8.191788e-001f, 4.789731e-001f, -1.000000e+000f, 5.240170e-001f, 4.280447e-001f, -9.252007e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.091316e-002f, -1.715896e-001f, 9.738830e-002f, 3.964070e-001f, -8.898291e-001f, 4.894069e-001f, -1.000000e+000f, 5.115577e-001f, 4.736341e-001f, -9.726656e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 4.983584e-003f, -3.403256e-002f, 8.679737e-002f, 2.332670e-001f, -3.064255e-001f, 4.767832e-001f, -1.000000e+000f, 5.259174e-001f, 4.375436e-001f, -9.354090e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.091585e-002f, -1.715945e-001f, 9.739090e-002f, 3.964016e-001f, -8.898234e-001f, 4.894067e-001f, -1.000000e+000f, 5.115576e-001f, 4.736341e-001f, -9.726659e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.527819e-003f, -5.171261e-002f, 9.172887e-002f, 1.952769e-001f, -3.246633e-001f, 4.752821e-001f, -1.000000e+000f, 5.274220e-001f, 4.387484e-001f, -9.366796e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.091754e-002f, -1.715979e-001f, 9.739271e-002f, 3.963998e-001f, -8.898215e-001f, 4.894072e-001f, -1.000000e+000f, 5.115571e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.131089e-002f, -6.369471e-002f, 9.479093e-002f, 1.947910e-001f, -3.460792e-001f, 4.769758e-001f, -1.000000e+000f, 5.245200e-001f, 4.558034e-001f, -9.547461e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.091701e-002f, -1.715965e-001f, 9.739186e-002f, 3.963998e-001f, -8.898217e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.495712e-002f, -7.225502e-002f, 9.288333e-002f, 1.689316e-001f, -3.789333e-001f, 4.757118e-001f, -1.000000e+000f, 5.260939e-001f, 4.524250e-001f, -9.511234e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.091701e-002f, -1.715965e-001f, 9.739186e-002f, 3.963998e-001f, -8.898217e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 1.687676e-002f, -7.318875e-002f, 9.519801e-002f, 1.600122e-001f, -3.517729e-001f, 4.823884e-001f, -1.000000e+000f, 5.183102e-001f, 4.686175e-001f, -9.681081e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -1.391947e-001f, 2.125981e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.476895e-002f, -4.772919e-002f, 9.857382e-002f, 3.184259e-001f, -5.411729e-001f, 1.930449e-001f, -4.375183e-001f, 3.617866e-001f, 3.395317e-001f, -6.513644e-001f, 1.703568e-001f, 5.564557e-001f, 1.000000e+000f, 3.421456e-001f, 6.101007e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.689127e-002f, -6.034295e-002f, 7.573367e-002f, 1.510746e-001f, -3.598030e-001f, 2.582461e-001f, -3.711102e-001f, 6.609323e-001f, 2.699920e-001f, -8.961839e-002f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.336595e-002f, 7.139798e-002f, 1.052423e-001f, 1.364044e-001f, 4.843080e-001f, 1.045939e-001f, 9.041780e-002f, 2.573596e-001f, 1.382575e-001f, -3.911686e-001f, 5.106156e-001f, -1.000000e+000f, 6.079688e-001f, 3.635990e-001f, -6.518426e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 2.504047e-002f, -5.744294e-002f, 6.107820e-002f, 1.835301e-001f, -5.200785e-001f, 5.638516e-001f, -6.406730e-001f, 8.329126e-001f, 2.630250e-001f, -2.454248e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.380713e-002f, 7.631576e-002f, 1.174867e-001f, 9.044345e-002f, 4.152107e-001f, 6.338823e-002f, 6.196800e-002f, 2.128750e-001f, 1.844006e-001f, -4.571826e-001f, 5.125720e-001f, -1.000000e+000f, 6.048699e-001f, 3.494455e-001f, -6.403437e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 6.122435e-002f, -1.002485e-001f, 7.552737e-002f, 1.555269e-001f, -5.562912e-001f, 3.708970e-001f, -1.000000e+000f, 7.530441e-001f, 2.408631e-001f, -6.065498e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 7.026950e-002f, 2.731814e-001f, 2.711141e-001f, 8.699288e-002f, 3.221189e-001f, 3.667906e-002f, -6.175584e-003f, 1.007169e-001f, 1.869881e-001f, -5.557677e-001f, 4.935088e-001f, -1.000000e+000f, 5.754918e-001f, 3.035724e-001f, -5.281465e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 2.932792e-002f, -8.798980e-002f, 6.980727e-002f, 2.665515e-001f, -7.301254e-001f, 5.110451e-001f, -1.000000e+000f, 6.219825e-001f, 3.246262e-001f, -7.409548e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 6.074903e-002f, -1.274760e-001f, 7.051135e-002f, 2.574548e-001f, -7.173422e-001f, 3.393656e-001f, -1.800411e-001f, 4.524638e-001f, 3.183302e-001f, -2.650234e-001f, 3.279167e-001f, -7.710447e-001f, 7.379358e-001f, 3.800708e-001f, -6.957838e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 3.402835e-002f, -9.587249e-002f, 7.175216e-002f, 3.029362e-001f, -7.772123e-001f, 4.987369e-001f, -1.000000e+000f, 5.882841e-001f, 3.698387e-001f, -8.092812e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 5.637490e-002f, -4.851795e-002f, 1.201047e-001f, 2.674591e-001f, -4.283953e-001f, 1.692014e-001f, -3.676560e-001f, 3.073270e-001f, 3.616275e-001f, -6.506291e-001f, 4.836185e-001f, -1.000000e+000f, 5.352488e-001f, 3.621116e-001f, -8.395102e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 5.193296e-002f, -1.083902e-001f, 6.582950e-002f, 2.720667e-001f, -7.376326e-001f, 6.460269e-001f, -1.000000e+000f, 8.253179e-001f, 3.140804e-001f, -6.052259e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.354973e-002f, -4.026029e-002f, 5.385606e-002f, 2.702529e-001f, -4.585760e-001f, 4.196533e-001f, -8.904533e-001f, 4.809430e-001f, 3.707268e-001f, -8.608423e-001f, 3.344402e-001f, -6.329279e-001f, 7.351835e-001f, 3.723163e-001f, -6.408857e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 6.149242e-002f, -1.297940e-001f, 7.802510e-002f, 3.104696e-001f, -7.876483e-001f, 5.375757e-001f, -1.000000e+000f, 6.589254e-001f, 4.187305e-001f, -7.946705e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.552752e-002f, -7.559896e-002f, 1.155467e-001f, 2.972621e-001f, -5.082516e-001f, 1.554401e-001f, -3.327450e-001f, 2.983151e-001f, 3.786345e-001f, -6.797156e-001f, 4.753205e-001f, -1.000000e+000f, 5.298777e-001f, 4.318439e-001f, -9.283459e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 2.391743e-002f, -6.683163e-002f, 5.189245e-002f, 3.644112e-001f, -8.537105e-001f, 5.013733e-001f, -1.000000e+000f, 5.614421e-001f, 4.443746e-001f, -8.778641e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.174792e-003f, -1.828369e-002f, 6.308060e-002f, 3.022702e-001f, -5.815172e-001f, 4.432151e-001f, -9.190867e-001f, 4.823431e-001f, 3.783691e-001f, -8.691613e-001f, 5.178115e-001f, -1.000000e+000f, 6.011036e-001f, 3.836162e-001f, -7.636170e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 5.105304e-002f, -1.189222e-001f, 6.926449e-002f, 4.288426e-001f, -9.261120e-001f, 4.576352e-001f, -1.000000e+000f, 5.582403e-001f, 4.505843e-001f, -9.406401e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.248484e-003f, -1.398446e-002f, 5.372888e-002f, 3.028124e-001f, -7.277675e-001f, 4.853541e-001f, -1.000000e+000f, 6.021267e-001f, 3.522030e-001f, -6.417876e-001f, 4.886281e-001f, -1.000000e+000f, 5.160779e-001f, 4.094292e-001f, -9.030901e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 4.474809e-002f, -9.945683e-002f, 7.937004e-002f, 2.225859e-001f, -6.082983e-001f, 4.403142e-001f, -1.000000e+000f, 5.956720e-001f, 3.744534e-001f, -8.653903e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.410808e-003f, -1.432046e-002f, 5.406996e-002f, 3.112739e-001f, -7.472798e-001f, 4.799224e-001f, -1.000000e+000f, 5.990256e-001f, 3.501849e-001f, -6.318294e-001f, 4.901599e-001f, -1.000000e+000f, 5.140663e-001f, 4.143303e-001f, -9.085273e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 6.418364e-002f, -1.364553e-001f, 7.664677e-002f, 3.710593e-001f, -8.614629e-001f, 5.239905e-001f, -1.000000e+000f, 6.443606e-001f, 3.951996e-001f, -8.089448e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.929292e-003f, -4.126342e-002f, 7.080187e-002f, 3.601272e-001f, -6.431843e-001f, 4.593382e-001f, -9.636347e-001f, 5.574645e-001f, 3.713419e-001f, -8.459066e-001f, 4.916008e-001f, -1.000000e+000f, 5.129150e-001f, 3.782865e-001f, -8.682114e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 6.430248e-002f, -1.367515e-001f, 7.684578e-002f, 3.709878e-001f, -8.613788e-001f, 5.235570e-001f, -1.000000e+000f, 6.439532e-001f, 3.954255e-001f, -8.092431e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.747879e-003f, -4.188273e-002f, 7.155552e-002f, 3.603232e-001f, -6.453180e-001f, 4.520563e-001f, -9.486960e-001f, 5.501606e-001f, 3.690745e-001f, -8.390824e-001f, 4.912846e-001f, -1.000000e+000f, 5.127003e-001f, 3.854394e-001f, -8.779925e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 5.172992e-002f, -1.115459e-001f, 6.981478e-002f, 3.895055e-001f, -8.826066e-001f, 4.697163e-001f, -1.000000e+000f, 5.621780e-001f, 4.426229e-001f, -8.932282e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.167419e-002f, -5.616602e-002f, 7.924492e-002f, 3.652390e-001f, -6.493856e-001f, 4.537872e-001f, -9.227633e-001f, 4.726187e-001f, 3.926513e-001f, -8.861613e-001f, 4.866813e-001f, -1.000000e+000f, 5.561850e-001f, 4.192716e-001f, -8.965180e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 5.304582e-002f, -1.317054e-001f, 8.181438e-002f, 4.175902e-001f, -9.138676e-001f, 4.996502e-001f, -1.000000e+000f, 5.162188e-001f, 4.764373e-001f, -9.625105e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.305534e-002f, -6.166840e-002f, 7.720660e-002f, 3.762478e-001f, -6.596096e-001f, 4.582459e-001f, -9.332698e-001f, 4.784218e-001f, 4.108711e-001f, -9.064898e-001f, 4.914097e-001f, -1.000000e+000f, 5.468593e-001f, 4.455331e-001f, -9.228833e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 7.023191e-002f, -1.535651e-001f, 8.397517e-002f, 4.475914e-001f, -9.461398e-001f, 4.704265e-001f, -1.000000e+000f, 5.471855e-001f, 4.526238e-001f, -9.448613e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 7.974644e-003f, -4.674600e-002f, 6.850484e-002f, 3.757127e-001f, -6.526738e-001f, 4.571170e-001f, -9.354125e-001f, 4.817415e-001f, 4.208784e-001f, -9.165350e-001f, 4.879603e-001f, -1.000000e+000f, 5.521718e-001f, 4.300660e-001f, -9.047353e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 7.030626e-002f, -1.537034e-001f, 8.405322e-002f, 4.474088e-001f, -9.459359e-001f, 4.704265e-001f, -1.000000e+000f, 5.469331e-001f, 4.534453e-001f, -9.457357e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 7.630036e-003f, -4.636194e-002f, 7.069560e-002f, 3.554164e-001f, -6.115563e-001f, 4.559574e-001f, -9.385959e-001f, 4.860230e-001f, 4.298054e-001f, -9.260820e-001f, 4.860297e-001f, -1.000000e+000f, 5.524445e-001f, 4.332502e-001f, -9.056975e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 7.026710e-002f, -1.536210e-001f, 8.401100e-002f, 4.474050e-001f, -9.459295e-001f, 4.704330e-001f, -1.000000e+000f, 5.469418e-001f, 4.534234e-001f, -9.457078e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 2.663288e-003f, -2.666836e-002f, 6.736269e-002f, 3.306935e-001f, -5.716168e-001f, 4.193007e-001f, -8.873255e-001f, 5.141063e-001f, 3.675202e-001f, -8.314190e-001f, 4.848956e-001f, -1.000000e+000f, 5.187240e-001f, 4.178287e-001f, -9.131844e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.085526e-002f, -1.714668e-001f, 9.732053e-002f, 3.964461e-001f, -8.898777e-001f, 4.894191e-001f, -1.000000e+000f, 5.115444e-001f, 4.736360e-001f, -9.726679e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.636816e-003f, -2.155432e-002f, 7.634302e-002f, 2.759227e-001f, -4.111239e-001f, 4.118899e-001f, -8.626984e-001f, 4.983888e-001f, 3.985906e-001f, -8.534813e-001f, 4.808563e-001f, -1.000000e+000f, 5.224240e-001f, 4.317658e-001f, -9.285823e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.091805e-002f, -1.715971e-001f, 9.739119e-002f, 3.964088e-001f, -8.898299e-001f, 4.894045e-001f, -1.000000e+000f, 5.115605e-001f, 4.736321e-001f, -9.726633e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 2.991784e-003f, -2.026619e-002f, 8.083115e-002f, 2.511895e-001f, -3.460000e-001f, 3.933706e-001f, -8.287850e-001f, 4.967479e-001f, 3.786310e-001f, -8.191788e-001f, 4.789731e-001f, -1.000000e+000f, 5.240170e-001f, 4.280447e-001f, -9.252007e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.091316e-002f, -1.715896e-001f, 9.738830e-002f, 3.964070e-001f, -8.898291e-001f, 4.894069e-001f, -1.000000e+000f, 5.115577e-001f, 4.736341e-001f, -9.726656e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 4.983584e-003f, -3.403256e-002f, 8.679737e-002f, 2.332670e-001f, -3.064255e-001f, 4.767832e-001f, -1.000000e+000f, 5.259174e-001f, 4.375436e-001f, -9.354090e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.091459e-002f, -1.715929e-001f, 9.739001e-002f, 3.964088e-001f, -8.898311e-001f, 4.894069e-001f, -1.000000e+000f, 5.115577e-001f, 4.736341e-001f, -9.726656e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.303780e-003f, -4.994725e-002f, 9.150195e-002f, 1.967031e-001f, -3.223445e-001f, 4.771008e-001f, -1.000000e+000f, 5.255664e-001f, 4.394569e-001f, -9.373793e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.091585e-002f, -1.715945e-001f, 9.739090e-002f, 3.964016e-001f, -8.898234e-001f, 4.894067e-001f, -1.000000e+000f, 5.115576e-001f, 4.736341e-001f, -9.726659e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.527819e-003f, -5.171261e-002f, 9.172887e-002f, 1.952769e-001f, -3.246633e-001f, 4.752821e-001f, -1.000000e+000f, 5.274220e-001f, 4.387484e-001f, -9.366796e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.091754e-002f, -1.715979e-001f, 9.739271e-002f, 3.963998e-001f, -8.898215e-001f, 4.894072e-001f, -1.000000e+000f, 5.115571e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.131089e-002f, -6.369471e-002f, 9.479093e-002f, 1.947910e-001f, -3.460792e-001f, 4.769758e-001f, -1.000000e+000f, 5.245200e-001f, 4.558034e-001f, -9.547461e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.091701e-002f, -1.715965e-001f, 9.739186e-002f, 3.963998e-001f, -8.898217e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.687676e-002f, -7.318875e-002f, 9.519801e-002f, 1.600122e-001f, -3.517729e-001f, 4.823884e-001f, -1.000000e+000f, 5.183102e-001f, 4.686175e-001f, -9.681081e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.091790e-002f, -1.715992e-001f, 9.739358e-002f, 3.963998e-001f, -8.898218e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 1.903731e-002f, -7.368609e-002f, 9.560447e-002f, 1.686498e-001f, -3.521080e-001f, 4.841716e-001f, -1.000000e+000f, 5.163727e-001f, 4.718789e-001f, -9.714719e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -1.802605e-001f, 2.626204e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.476895e-002f, -4.772919e-002f, 9.857382e-002f, 3.184259e-001f, -5.411729e-001f, 1.930449e-001f, -4.375183e-001f, 3.617866e-001f, 3.395317e-001f, -6.513644e-001f, 1.703568e-001f, 5.564557e-001f, 1.000000e+000f, 3.421456e-001f, 6.101007e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.689127e-002f, -6.034295e-002f, 7.573367e-002f, 1.510746e-001f, -3.598030e-001f, 2.582461e-001f, -3.711102e-001f, 6.609323e-001f, 2.699920e-001f, -8.961839e-002f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.336595e-002f, 7.139798e-002f, 1.052423e-001f, 1.364044e-001f, 4.843080e-001f, 1.045939e-001f, 9.041780e-002f, 2.573596e-001f, 1.382575e-001f, -3.911686e-001f, 5.106156e-001f, -1.000000e+000f, 6.079688e-001f, 3.635990e-001f, -6.518426e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 2.504047e-002f, -5.744294e-002f, 6.107820e-002f, 1.835301e-001f, -5.200785e-001f, 5.638516e-001f, -6.406730e-001f, 8.329126e-001f, 2.630250e-001f, -2.454248e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.380713e-002f, 7.631576e-002f, 1.174867e-001f, 9.044345e-002f, 4.152107e-001f, 6.338823e-002f, 6.196800e-002f, 2.128750e-001f, 1.844006e-001f, -4.571826e-001f, 5.125720e-001f, -1.000000e+000f, 6.048699e-001f, 3.494455e-001f, -6.403437e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 6.122435e-002f, -1.002485e-001f, 7.552737e-002f, 1.555269e-001f, -5.562912e-001f, 3.708970e-001f, -1.000000e+000f, 7.530441e-001f, 2.408631e-001f, -6.065498e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 7.026950e-002f, 2.731814e-001f, 2.711141e-001f, 8.699288e-002f, 3.221189e-001f, 3.667906e-002f, -6.175584e-003f, 1.007169e-001f, 1.869881e-001f, -5.557677e-001f, 4.935088e-001f, -1.000000e+000f, 5.754918e-001f, 3.035724e-001f, -5.281465e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 2.586329e-002f, -7.877184e-002f, 6.308858e-002f, 2.465824e-001f, -7.019656e-001f, 5.319711e-001f, -1.000000e+000f, 6.711449e-001f, 2.983519e-001f, -6.873001e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 9.906031e-002f, 3.428636e-001f, 3.444012e-001f, 1.862471e-001f, 5.327843e-001f, 3.604693e-003f, -1.943623e-002f, 9.411620e-002f, 2.479530e-001f, -6.833842e-001f, 4.890445e-001f, -1.000000e+000f, 5.578810e-001f, 3.368957e-001f, -6.160579e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 2.932792e-002f, -8.798980e-002f, 6.980727e-002f, 2.665515e-001f, -7.301254e-001f, 5.110451e-001f, -1.000000e+000f, 6.219825e-001f, 3.246262e-001f, -7.409548e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 6.074903e-002f, -1.274760e-001f, 7.051135e-002f, 2.574548e-001f, -7.173422e-001f, 3.393656e-001f, -1.800411e-001f, 4.524638e-001f, 3.183302e-001f, -2.650234e-001f, 3.279167e-001f, -7.710447e-001f, 7.379358e-001f, 3.800708e-001f, -6.957838e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 3.402835e-002f, -9.587249e-002f, 7.175216e-002f, 3.029362e-001f, -7.772123e-001f, 4.987369e-001f, -1.000000e+000f, 5.882841e-001f, 3.698387e-001f, -8.092812e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 5.637490e-002f, -4.851795e-002f, 1.201047e-001f, 2.674591e-001f, -4.283953e-001f, 1.692014e-001f, -3.676560e-001f, 3.073270e-001f, 3.616275e-001f, -6.506291e-001f, 4.836185e-001f, -1.000000e+000f, 5.352488e-001f, 3.621116e-001f, -8.395102e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 5.193296e-002f, -1.083902e-001f, 6.582950e-002f, 2.720667e-001f, -7.376326e-001f, 6.460269e-001f, -1.000000e+000f, 8.253179e-001f, 3.140804e-001f, -6.052259e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.354973e-002f, -4.026029e-002f, 5.385606e-002f, 2.702529e-001f, -4.585760e-001f, 4.196533e-001f, -8.904533e-001f, 4.809430e-001f, 3.707268e-001f, -8.608423e-001f, 3.344402e-001f, -6.329279e-001f, 7.351835e-001f, 3.723163e-001f, -6.408857e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 6.149242e-002f, -1.297940e-001f, 7.802510e-002f, 3.104696e-001f, -7.876483e-001f, 5.375757e-001f, -1.000000e+000f, 6.589254e-001f, 4.187305e-001f, -7.946705e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.552752e-002f, -7.559896e-002f, 1.155467e-001f, 2.972621e-001f, -5.082516e-001f, 1.554401e-001f, -3.327450e-001f, 2.983151e-001f, 3.786345e-001f, -6.797156e-001f, 4.753205e-001f, -1.000000e+000f, 5.298777e-001f, 4.318439e-001f, -9.283459e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 2.391743e-002f, -6.683163e-002f, 5.189245e-002f, 3.644112e-001f, -8.537105e-001f, 5.013733e-001f, -1.000000e+000f, 5.614421e-001f, 4.443746e-001f, -8.778641e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.174792e-003f, -1.828369e-002f, 6.308060e-002f, 3.022702e-001f, -5.815172e-001f, 4.432151e-001f, -9.190867e-001f, 4.823431e-001f, 3.783691e-001f, -8.691613e-001f, 5.178115e-001f, -1.000000e+000f, 6.011036e-001f, 3.836162e-001f, -7.636170e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 3.443310e-002f, -9.595484e-002f, 6.709729e-002f, 3.885255e-001f, -8.814584e-001f, 5.032401e-001f, -1.000000e+000f, 5.313710e-001f, 4.576336e-001f, -9.245908e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.090554e-002f, -2.638004e-002f, 7.506414e-002f, 3.219734e-001f, -6.038381e-001f, 4.135377e-001f, -8.001272e-001f, 4.699313e-001f, 3.747434e-001f, -7.703849e-001f, 4.857108e-001f, -1.000000e+000f, 5.198853e-001f, 3.971027e-001f, -8.898507e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 5.105304e-002f, -1.189222e-001f, 6.926449e-002f, 4.288426e-001f, -9.261120e-001f, 4.576352e-001f, -1.000000e+000f, 5.582403e-001f, 4.505843e-001f, -9.406401e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.248484e-003f, -1.398446e-002f, 5.372888e-002f, 3.028124e-001f, -7.277675e-001f, 4.853541e-001f, -1.000000e+000f, 6.021267e-001f, 3.522030e-001f, -6.417876e-001f, 4.886281e-001f, -1.000000e+000f, 5.160779e-001f, 4.094292e-001f, -9.030901e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 4.474809e-002f, -9.945683e-002f, 7.937004e-002f, 2.225859e-001f, -6.082983e-001f, 4.403142e-001f, -1.000000e+000f, 5.956720e-001f, 3.744534e-001f, -8.653903e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.410808e-003f, -1.432046e-002f, 5.406996e-002f, 3.112739e-001f, -7.472798e-001f, 4.799224e-001f, -1.000000e+000f, 5.990256e-001f, 3.501849e-001f, -6.318294e-001f, 4.901599e-001f, -1.000000e+000f, 5.140663e-001f, 4.143303e-001f, -9.085273e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 6.418364e-002f, -1.364553e-001f, 7.664677e-002f, 3.710593e-001f, -8.614629e-001f, 5.239905e-001f, -1.000000e+000f, 6.443606e-001f, 3.951996e-001f, -8.089448e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.929292e-003f, -4.126342e-002f, 7.080187e-002f, 3.601272e-001f, -6.431843e-001f, 4.593382e-001f, -9.636347e-001f, 5.574645e-001f, 3.713419e-001f, -8.459066e-001f, 4.916008e-001f, -1.000000e+000f, 5.129150e-001f, 3.782865e-001f, -8.682114e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 6.430248e-002f, -1.367515e-001f, 7.684578e-002f, 3.709878e-001f, -8.613788e-001f, 5.235570e-001f, -1.000000e+000f, 6.439532e-001f, 3.954255e-001f, -8.092431e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.747879e-003f, -4.188273e-002f, 7.155552e-002f, 3.603232e-001f, -6.453180e-001f, 4.520563e-001f, -9.486960e-001f, 5.501606e-001f, 3.690745e-001f, -8.390824e-001f, 4.912846e-001f, -1.000000e+000f, 5.127003e-001f, 3.854394e-001f, -8.779925e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 5.172992e-002f, -1.115459e-001f, 6.981478e-002f, 3.895055e-001f, -8.826066e-001f, 4.697163e-001f, -1.000000e+000f, 5.621780e-001f, 4.426229e-001f, -8.932282e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.167419e-002f, -5.616602e-002f, 7.924492e-002f, 3.652390e-001f, -6.493856e-001f, 4.537872e-001f, -9.227633e-001f, 4.726187e-001f, 3.926513e-001f, -8.861613e-001f, 4.866813e-001f, -1.000000e+000f, 5.561850e-001f, 4.192716e-001f, -8.965180e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 5.402164e-002f, -1.335123e-001f, 8.249652e-002f, 4.195573e-001f, -9.160293e-001f, 4.992024e-001f, -1.000000e+000f, 5.165540e-001f, 4.761026e-001f, -9.624208e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.011777e-002f, -4.910176e-002f, 7.298300e-002f, 3.755506e-001f, -6.549194e-001f, 4.557124e-001f, -9.261218e-001f, 4.739242e-001f, 4.020659e-001f, -8.963078e-001f, 4.858476e-001f, -1.000000e+000f, 5.549249e-001f, 4.230804e-001f, -9.005572e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 5.304582e-002f, -1.317054e-001f, 8.181438e-002f, 4.175902e-001f, -9.138676e-001f, 4.996502e-001f, -1.000000e+000f, 5.162188e-001f, 4.764373e-001f, -9.625105e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.305534e-002f, -6.166840e-002f, 7.720660e-002f, 3.762478e-001f, -6.596096e-001f, 4.582459e-001f, -9.332698e-001f, 4.784218e-001f, 4.108711e-001f, -9.064898e-001f, 4.914097e-001f, -1.000000e+000f, 5.468593e-001f, 4.455331e-001f, -9.228833e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 7.023191e-002f, -1.535651e-001f, 8.397517e-002f, 4.475914e-001f, -9.461398e-001f, 4.704265e-001f, -1.000000e+000f, 5.471855e-001f, 4.526238e-001f, -9.448613e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 7.974644e-003f, -4.674600e-002f, 6.850484e-002f, 3.757127e-001f, -6.526738e-001f, 4.571170e-001f, -9.354125e-001f, 4.817415e-001f, 4.208784e-001f, -9.165350e-001f, 4.879603e-001f, -1.000000e+000f, 5.521718e-001f, 4.300660e-001f, -9.047353e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 7.030626e-002f, -1.537034e-001f, 8.405322e-002f, 4.474088e-001f, -9.459359e-001f, 4.704265e-001f, -1.000000e+000f, 5.469331e-001f, 4.534453e-001f, -9.457357e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 7.630036e-003f, -4.636194e-002f, 7.069560e-002f, 3.554164e-001f, -6.115563e-001f, 4.559574e-001f, -9.385959e-001f, 4.860230e-001f, 4.298054e-001f, -9.260820e-001f, 4.860297e-001f, -1.000000e+000f, 5.524445e-001f, 4.332502e-001f, -9.056975e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 7.026710e-002f, -1.536210e-001f, 8.401100e-002f, 4.474050e-001f, -9.459295e-001f, 4.704330e-001f, -1.000000e+000f, 5.469418e-001f, 4.534234e-001f, -9.457078e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 2.663288e-003f, -2.666836e-002f, 6.736269e-002f, 3.306935e-001f, -5.716168e-001f, 4.193007e-001f, -8.873255e-001f, 5.141063e-001f, 3.675202e-001f, -8.314190e-001f, 4.848956e-001f, -1.000000e+000f, 5.187240e-001f, 4.178287e-001f, -9.131844e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.085526e-002f, -1.714668e-001f, 9.732053e-002f, 3.964461e-001f, -8.898777e-001f, 4.894191e-001f, -1.000000e+000f, 5.115444e-001f, 4.736360e-001f, -9.726679e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.636816e-003f, -2.155432e-002f, 7.634302e-002f, 2.759227e-001f, -4.111239e-001f, 4.118899e-001f, -8.626984e-001f, 4.983888e-001f, 3.985906e-001f, -8.534813e-001f, 4.808563e-001f, -1.000000e+000f, 5.224240e-001f, 4.317658e-001f, -9.285823e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091162e-002f, -1.715755e-001f, 9.737576e-002f, 3.964150e-001f, -8.898371e-001f, 4.894045e-001f, -1.000000e+000f, 5.115605e-001f, 4.736282e-001f, -9.726593e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.403276e-003f, -1.919328e-002f, 7.555107e-002f, 2.749786e-001f, -4.060320e-001f, 4.130601e-001f, -8.624051e-001f, 4.972963e-001f, 4.000025e-001f, -8.538735e-001f, 4.807595e-001f, -1.000000e+000f, 5.224125e-001f, 4.319963e-001f, -9.289333e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091805e-002f, -1.715971e-001f, 9.739119e-002f, 3.964088e-001f, -8.898299e-001f, 4.894045e-001f, -1.000000e+000f, 5.115605e-001f, 4.736321e-001f, -9.726633e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 2.991784e-003f, -2.026619e-002f, 8.083115e-002f, 2.511895e-001f, -3.460000e-001f, 3.933706e-001f, -8.287850e-001f, 4.967479e-001f, 3.786310e-001f, -8.191788e-001f, 4.789731e-001f, -1.000000e+000f, 5.240170e-001f, 4.280447e-001f, -9.252007e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091316e-002f, -1.715896e-001f, 9.738830e-002f, 3.964070e-001f, -8.898291e-001f, 4.894069e-001f, -1.000000e+000f, 5.115577e-001f, 4.736341e-001f, -9.726656e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 4.983584e-003f, -3.403256e-002f, 8.679737e-002f, 2.332670e-001f, -3.064255e-001f, 4.767832e-001f, -1.000000e+000f, 5.259174e-001f, 4.375436e-001f, -9.354090e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091459e-002f, -1.715929e-001f, 9.739001e-002f, 3.964088e-001f, -8.898311e-001f, 4.894069e-001f, -1.000000e+000f, 5.115577e-001f, 4.736341e-001f, -9.726656e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.303780e-003f, -4.994725e-002f, 9.150195e-002f, 1.967031e-001f, -3.223445e-001f, 4.771008e-001f, -1.000000e+000f, 5.255664e-001f, 4.394569e-001f, -9.373793e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091585e-002f, -1.715945e-001f, 9.739090e-002f, 3.964016e-001f, -8.898234e-001f, 4.894067e-001f, -1.000000e+000f, 5.115576e-001f, 4.736341e-001f, -9.726659e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.527819e-003f, -5.171261e-002f, 9.172887e-002f, 1.952769e-001f, -3.246633e-001f, 4.752821e-001f, -1.000000e+000f, 5.274220e-001f, 4.387484e-001f, -9.366796e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091754e-002f, -1.715979e-001f, 9.739271e-002f, 3.963998e-001f, -8.898215e-001f, 4.894072e-001f, -1.000000e+000f, 5.115571e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.131089e-002f, -6.369471e-002f, 9.479093e-002f, 1.947910e-001f, -3.460792e-001f, 4.769758e-001f, -1.000000e+000f, 5.245200e-001f, 4.558034e-001f, -9.547461e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091701e-002f, -1.715965e-001f, 9.739186e-002f, 3.963998e-001f, -8.898217e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.495712e-002f, -7.225502e-002f, 9.288333e-002f, 1.689316e-001f, -3.789333e-001f, 4.757118e-001f, -1.000000e+000f, 5.260939e-001f, 4.524250e-001f, -9.511234e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091701e-002f, -1.715965e-001f, 9.739186e-002f, 3.963998e-001f, -8.898217e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.687676e-002f, -7.318875e-002f, 9.519801e-002f, 1.600122e-001f, -3.517729e-001f, 4.823884e-001f, -1.000000e+000f, 5.183102e-001f, 4.686175e-001f, -9.681081e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091790e-002f, -1.715992e-001f, 9.739358e-002f, 3.963998e-001f, -8.898218e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 1.903731e-002f, -7.368609e-002f, 9.560447e-002f, 1.686498e-001f, -3.521080e-001f, 4.841716e-001f, -1.000000e+000f, 5.163727e-001f, 4.718789e-001f, -9.714719e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.325723e-001f, 3.249817e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.476895e-002f, -4.772919e-002f, 9.857382e-002f, 3.184259e-001f, -5.411729e-001f, 1.930449e-001f, -4.375183e-001f, 3.617866e-001f, 3.395317e-001f, -6.513644e-001f, 1.703568e-001f, 5.564557e-001f, 1.000000e+000f, 3.421456e-001f, 6.101007e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.689127e-002f, -6.034295e-002f, 7.573367e-002f, 1.510746e-001f, -3.598030e-001f, 2.582461e-001f, -3.711102e-001f, 6.609323e-001f, 2.699920e-001f, -8.961839e-002f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.336595e-002f, 7.139798e-002f, 1.052423e-001f, 1.364044e-001f, 4.843080e-001f, 1.045939e-001f, 9.041780e-002f, 2.573596e-001f, 1.382575e-001f, -3.911686e-001f, 5.106156e-001f, -1.000000e+000f, 6.079688e-001f, 3.635990e-001f, -6.518426e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 2.504047e-002f, -5.744294e-002f, 6.107820e-002f, 1.835301e-001f, -5.200785e-001f, 5.638516e-001f, -6.406730e-001f, 8.329126e-001f, 2.630250e-001f, -2.454248e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.380713e-002f, 7.631576e-002f, 1.174867e-001f, 9.044345e-002f, 4.152107e-001f, 6.338823e-002f, 6.196800e-002f, 2.128750e-001f, 1.844006e-001f, -4.571826e-001f, 5.125720e-001f, -1.000000e+000f, 6.048699e-001f, 3.494455e-001f, -6.403437e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 6.122435e-002f, -1.002485e-001f, 7.552737e-002f, 1.555269e-001f, -5.562912e-001f, 3.708970e-001f, -1.000000e+000f, 7.530441e-001f, 2.408631e-001f, -6.065498e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 7.026950e-002f, 2.731814e-001f, 2.711141e-001f, 8.699288e-002f, 3.221189e-001f, 3.667906e-002f, -6.175584e-003f, 1.007169e-001f, 1.869881e-001f, -5.557677e-001f, 4.935088e-001f, -1.000000e+000f, 5.754918e-001f, 3.035724e-001f, -5.281465e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 2.586329e-002f, -7.877184e-002f, 6.308858e-002f, 2.465824e-001f, -7.019656e-001f, 5.319711e-001f, -1.000000e+000f, 6.711449e-001f, 2.983519e-001f, -6.873001e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 9.906031e-002f, 3.428636e-001f, 3.444012e-001f, 1.862471e-001f, 5.327843e-001f, 3.604693e-003f, -1.943623e-002f, 9.411620e-002f, 2.479530e-001f, -6.833842e-001f, 4.890445e-001f, -1.000000e+000f, 5.578810e-001f, 3.368957e-001f, -6.160579e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 2.932792e-002f, -8.798980e-002f, 6.980727e-002f, 2.665515e-001f, -7.301254e-001f, 5.110451e-001f, -1.000000e+000f, 6.219825e-001f, 3.246262e-001f, -7.409548e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 6.074903e-002f, -1.274760e-001f, 7.051135e-002f, 2.574548e-001f, -7.173422e-001f, 3.393656e-001f, -1.800411e-001f, 4.524638e-001f, 3.183302e-001f, -2.650234e-001f, 3.279167e-001f, -7.710447e-001f, 7.379358e-001f, 3.800708e-001f, -6.957838e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 3.402835e-002f, -9.587249e-002f, 7.175216e-002f, 3.029362e-001f, -7.772123e-001f, 4.987369e-001f, -1.000000e+000f, 5.882841e-001f, 3.698387e-001f, -8.092812e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 5.637490e-002f, -4.851795e-002f, 1.201047e-001f, 2.674591e-001f, -4.283953e-001f, 1.692014e-001f, -3.676560e-001f, 3.073270e-001f, 3.616275e-001f, -6.506291e-001f, 4.836185e-001f, -1.000000e+000f, 5.352488e-001f, 3.621116e-001f, -8.395102e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 5.193296e-002f, -1.083902e-001f, 6.582950e-002f, 2.720667e-001f, -7.376326e-001f, 6.460269e-001f, -1.000000e+000f, 8.253179e-001f, 3.140804e-001f, -6.052259e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.354973e-002f, -4.026029e-002f, 5.385606e-002f, 2.702529e-001f, -4.585760e-001f, 4.196533e-001f, -8.904533e-001f, 4.809430e-001f, 3.707268e-001f, -8.608423e-001f, 3.344402e-001f, -6.329279e-001f, 7.351835e-001f, 3.723163e-001f, -6.408857e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 6.149242e-002f, -1.297940e-001f, 7.802510e-002f, 3.104696e-001f, -7.876483e-001f, 5.375757e-001f, -1.000000e+000f, 6.589254e-001f, 4.187305e-001f, -7.946705e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.552752e-002f, -7.559896e-002f, 1.155467e-001f, 2.972621e-001f, -5.082516e-001f, 1.554401e-001f, -3.327450e-001f, 2.983151e-001f, 3.786345e-001f, -6.797156e-001f, 4.753205e-001f, -1.000000e+000f, 5.298777e-001f, 4.318439e-001f, -9.283459e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 2.391743e-002f, -6.683163e-002f, 5.189245e-002f, 3.644112e-001f, -8.537105e-001f, 5.013733e-001f, -1.000000e+000f, 5.614421e-001f, 4.443746e-001f, -8.778641e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.174792e-003f, -1.828369e-002f, 6.308060e-002f, 3.022702e-001f, -5.815172e-001f, 4.432151e-001f, -9.190867e-001f, 4.823431e-001f, 3.783691e-001f, -8.691613e-001f, 5.178115e-001f, -1.000000e+000f, 6.011036e-001f, 3.836162e-001f, -7.636170e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 3.443310e-002f, -9.595484e-002f, 6.709729e-002f, 3.885255e-001f, -8.814584e-001f, 5.032401e-001f, -1.000000e+000f, 5.313710e-001f, 4.576336e-001f, -9.245908e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.090554e-002f, -2.638004e-002f, 7.506414e-002f, 3.219734e-001f, -6.038381e-001f, 4.135377e-001f, -8.001272e-001f, 4.699313e-001f, 3.747434e-001f, -7.703849e-001f, 4.857108e-001f, -1.000000e+000f, 5.198853e-001f, 3.971027e-001f, -8.898507e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 5.105304e-002f, -1.189222e-001f, 6.926449e-002f, 4.288426e-001f, -9.261120e-001f, 4.576352e-001f, -1.000000e+000f, 5.582403e-001f, 4.505843e-001f, -9.406401e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.248484e-003f, -1.398446e-002f, 5.372888e-002f, 3.028124e-001f, -7.277675e-001f, 4.853541e-001f, -1.000000e+000f, 6.021267e-001f, 3.522030e-001f, -6.417876e-001f, 4.886281e-001f, -1.000000e+000f, 5.160779e-001f, 4.094292e-001f, -9.030901e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 4.474809e-002f, -9.945683e-002f, 7.937004e-002f, 2.225859e-001f, -6.082983e-001f, 4.403142e-001f, -1.000000e+000f, 5.956720e-001f, 3.744534e-001f, -8.653903e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.410808e-003f, -1.432046e-002f, 5.406996e-002f, 3.112739e-001f, -7.472798e-001f, 4.799224e-001f, -1.000000e+000f, 5.990256e-001f, 3.501849e-001f, -6.318294e-001f, 4.901599e-001f, -1.000000e+000f, 5.140663e-001f, 4.143303e-001f, -9.085273e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 6.418364e-002f, -1.364553e-001f, 7.664677e-002f, 3.710593e-001f, -8.614629e-001f, 5.239905e-001f, -1.000000e+000f, 6.443606e-001f, 3.951996e-001f, -8.089448e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.929292e-003f, -4.126342e-002f, 7.080187e-002f, 3.601272e-001f, -6.431843e-001f, 4.593382e-001f, -9.636347e-001f, 5.574645e-001f, 3.713419e-001f, -8.459066e-001f, 4.916008e-001f, -1.000000e+000f, 5.129150e-001f, 3.782865e-001f, -8.682114e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 6.430248e-002f, -1.367515e-001f, 7.684578e-002f, 3.709878e-001f, -8.613788e-001f, 5.235570e-001f, -1.000000e+000f, 6.439532e-001f, 3.954255e-001f, -8.092431e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.747879e-003f, -4.188273e-002f, 7.155552e-002f, 3.603232e-001f, -6.453180e-001f, 4.520563e-001f, -9.486960e-001f, 5.501606e-001f, 3.690745e-001f, -8.390824e-001f, 4.912846e-001f, -1.000000e+000f, 5.127003e-001f, 3.854394e-001f, -8.779925e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 5.172992e-002f, -1.115459e-001f, 6.981478e-002f, 3.895055e-001f, -8.826066e-001f, 4.697163e-001f, -1.000000e+000f, 5.621780e-001f, 4.426229e-001f, -8.932282e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.167419e-002f, -5.616602e-002f, 7.924492e-002f, 3.652390e-001f, -6.493856e-001f, 4.537872e-001f, -9.227633e-001f, 4.726187e-001f, 3.926513e-001f, -8.861613e-001f, 4.866813e-001f, -1.000000e+000f, 5.561850e-001f, 4.192716e-001f, -8.965180e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 5.402164e-002f, -1.335123e-001f, 8.249652e-002f, 4.195573e-001f, -9.160293e-001f, 4.992024e-001f, -1.000000e+000f, 5.165540e-001f, 4.761026e-001f, -9.624208e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.011777e-002f, -4.910176e-002f, 7.298300e-002f, 3.755506e-001f, -6.549194e-001f, 4.557124e-001f, -9.261218e-001f, 4.739242e-001f, 4.020659e-001f, -8.963078e-001f, 4.858476e-001f, -1.000000e+000f, 5.549249e-001f, 4.230804e-001f, -9.005572e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 5.304582e-002f, -1.317054e-001f, 8.181438e-002f, 4.175902e-001f, -9.138676e-001f, 4.996502e-001f, -1.000000e+000f, 5.162188e-001f, 4.764373e-001f, -9.625105e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.305534e-002f, -6.166840e-002f, 7.720660e-002f, 3.762478e-001f, -6.596096e-001f, 4.582459e-001f, -9.332698e-001f, 4.784218e-001f, 4.108711e-001f, -9.064898e-001f, 4.914097e-001f, -1.000000e+000f, 5.468593e-001f, 4.455331e-001f, -9.228833e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 7.023191e-002f, -1.535651e-001f, 8.397517e-002f, 4.475914e-001f, -9.461398e-001f, 4.704265e-001f, -1.000000e+000f, 5.471855e-001f, 4.526238e-001f, -9.448613e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 7.974644e-003f, -4.674600e-002f, 6.850484e-002f, 3.757127e-001f, -6.526738e-001f, 4.571170e-001f, -9.354125e-001f, 4.817415e-001f, 4.208784e-001f, -9.165350e-001f, 4.879603e-001f, -1.000000e+000f, 5.521718e-001f, 4.300660e-001f, -9.047353e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 7.030626e-002f, -1.537034e-001f, 8.405322e-002f, 4.474088e-001f, -9.459359e-001f, 4.704265e-001f, -1.000000e+000f, 5.469331e-001f, 4.534453e-001f, -9.457357e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 7.630036e-003f, -4.636194e-002f, 7.069560e-002f, 3.554164e-001f, -6.115563e-001f, 4.559574e-001f, -9.385959e-001f, 4.860230e-001f, 4.298054e-001f, -9.260820e-001f, 4.860297e-001f, -1.000000e+000f, 5.524445e-001f, 4.332502e-001f, -9.056975e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 7.026710e-002f, -1.536210e-001f, 8.401100e-002f, 4.474050e-001f, -9.459295e-001f, 4.704330e-001f, -1.000000e+000f, 5.469418e-001f, 4.534234e-001f, -9.457078e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 2.663288e-003f, -2.666836e-002f, 6.736269e-002f, 3.306935e-001f, -5.716168e-001f, 4.193007e-001f, -8.873255e-001f, 5.141063e-001f, 3.675202e-001f, -8.314190e-001f, 4.848956e-001f, -1.000000e+000f, 5.187240e-001f, 4.178287e-001f, -9.131844e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.085526e-002f, -1.714668e-001f, 9.732053e-002f, 3.964461e-001f, -8.898777e-001f, 4.894191e-001f, -1.000000e+000f, 5.115444e-001f, 4.736360e-001f, -9.726679e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.636816e-003f, -2.155432e-002f, 7.634302e-002f, 2.759227e-001f, -4.111239e-001f, 4.118899e-001f, -8.626984e-001f, 4.983888e-001f, 3.985906e-001f, -8.534813e-001f, 4.808563e-001f, -1.000000e+000f, 5.224240e-001f, 4.317658e-001f, -9.285823e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091162e-002f, -1.715755e-001f, 9.737576e-002f, 3.964150e-001f, -8.898371e-001f, 4.894045e-001f, -1.000000e+000f, 5.115605e-001f, 4.736282e-001f, -9.726593e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.403276e-003f, -1.919328e-002f, 7.555107e-002f, 2.749786e-001f, -4.060320e-001f, 4.130601e-001f, -8.624051e-001f, 4.972963e-001f, 4.000025e-001f, -8.538735e-001f, 4.807595e-001f, -1.000000e+000f, 5.224125e-001f, 4.319963e-001f, -9.289333e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091805e-002f, -1.715971e-001f, 9.739119e-002f, 3.964088e-001f, -8.898299e-001f, 4.894045e-001f, -1.000000e+000f, 5.115605e-001f, 4.736321e-001f, -9.726633e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 2.991784e-003f, -2.026619e-002f, 8.083115e-002f, 2.511895e-001f, -3.460000e-001f, 3.933706e-001f, -8.287850e-001f, 4.967479e-001f, 3.786310e-001f, -8.191788e-001f, 4.789731e-001f, -1.000000e+000f, 5.240170e-001f, 4.280447e-001f, -9.252007e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091316e-002f, -1.715896e-001f, 9.738830e-002f, 3.964070e-001f, -8.898291e-001f, 4.894069e-001f, -1.000000e+000f, 5.115577e-001f, 4.736341e-001f, -9.726656e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 4.983584e-003f, -3.403256e-002f, 8.679737e-002f, 2.332670e-001f, -3.064255e-001f, 4.767832e-001f, -1.000000e+000f, 5.259174e-001f, 4.375436e-001f, -9.354090e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091459e-002f, -1.715929e-001f, 9.739001e-002f, 3.964088e-001f, -8.898311e-001f, 4.894069e-001f, -1.000000e+000f, 5.115577e-001f, 4.736341e-001f, -9.726656e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.303780e-003f, -4.994725e-002f, 9.150195e-002f, 1.967031e-001f, -3.223445e-001f, 4.771008e-001f, -1.000000e+000f, 5.255664e-001f, 4.394569e-001f, -9.373793e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091585e-002f, -1.715945e-001f, 9.739090e-002f, 3.964016e-001f, -8.898234e-001f, 4.894067e-001f, -1.000000e+000f, 5.115576e-001f, 4.736341e-001f, -9.726659e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.527819e-003f, -5.171261e-002f, 9.172887e-002f, 1.952769e-001f, -3.246633e-001f, 4.752821e-001f, -1.000000e+000f, 5.274220e-001f, 4.387484e-001f, -9.366796e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091754e-002f, -1.715979e-001f, 9.739271e-002f, 3.963998e-001f, -8.898215e-001f, 4.894072e-001f, -1.000000e+000f, 5.115571e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.131089e-002f, -6.369471e-002f, 9.479093e-002f, 1.947910e-001f, -3.460792e-001f, 4.769758e-001f, -1.000000e+000f, 5.245200e-001f, 4.558034e-001f, -9.547461e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091701e-002f, -1.715965e-001f, 9.739186e-002f, 3.963998e-001f, -8.898217e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.495712e-002f, -7.225502e-002f, 9.288333e-002f, 1.689316e-001f, -3.789333e-001f, 4.757118e-001f, -1.000000e+000f, 5.260939e-001f, 4.524250e-001f, -9.511234e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091701e-002f, -1.715965e-001f, 9.739186e-002f, 3.963998e-001f, -8.898217e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726669e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.687676e-002f, -7.318875e-002f, 9.519801e-002f, 1.600122e-001f, -3.517729e-001f, 4.823884e-001f, -1.000000e+000f, 5.183102e-001f, 4.686175e-001f, -9.681081e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091790e-002f, -1.715992e-001f, 9.739358e-002f, 3.963998e-001f, -8.898218e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 1.903731e-002f, -7.368609e-002f, 9.560447e-002f, 1.686498e-001f, -3.521080e-001f, 4.841716e-001f, -1.000000e+000f, 5.163727e-001f, 4.718789e-001f, -9.714719e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -2.500000e-001f, 0.000000e+000f, -2.500000e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -3.000000e-001f, 0.000000e+000f, -3.000000e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -3.500000e-001f, 0.000000e+000f, -3.500000e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 8.091808e-002f, -1.715994e-001f, 9.739358e-002f, 3.963998e-001f, -8.898219e-001f, 4.894072e-001f, -1.000000e+000f, 5.115570e-001f, 4.736350e-001f, -9.726670e-001f, 0.000000e+000f, 5.000000e-001f, -4.000000e-001f, 0.000000e+000f, -4.000000e-001f, 0.000000e+000f, -2.991169e-001f, 4.028019e-001f, 0.000000e+000f, -3.836635e-001f, 2.578871e-002f, -8.522515e-002f, 9.023804e-002f, 1.726251e-001f, -4.356754e-001f, 4.803566e-001f, -1.000000e+000f, 5.205530e-001f, 4.636017e-001f, -9.629139e-001f,
  1.476895e-002f, -4.772919e-002f, 9.857382e-002f, 3.184259e-001f, -5.411729e-001f, 1.930449e-001f, -4.375183e-001f, 3.617866e-001f, 3.395317e-001f, -6.513644e-001f, 1.703568e-001f, 5.564557e-001f, 1.000000e+000f, 3.421456e-001f, 6.101007e-001f,
  1.689127e-002f, -6.034295e-002f, 7.573367e-002f, 1.510746e-001f, -3.598030e-001f, 2.582461e-001f, -3.711102e-001f, 6.609323e-001f, 2.699920e-001f, -8.961839e-002f, 1.336595e-002f, 7.139798e-002f, 1.052423e-001f, 1.364044e-001f, 4.843080e-001f, 1.045939e-001f, 9.041780e-002f, 2.573596e-001f, 1.382575e-001f, -3.911686e-001f, 5.106156e-001f, -1.000000e+000f, 6.079688e-001f, 3.635990e-001f, -6.518426e-001f,
  0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 8.891397e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f,
  2.504047e-002f, -5.744294e-002f, 6.107820e-002f, 1.835301e-001f, -5.200785e-001f, 5.638516e-001f, -6.406730e-001f, 8.329126e-001f, 2.630250e-001f, -2.454248e-001f, 1.380713e-002f, 7.631576e-002f, 1.174867e-001f, 9.044345e-002f, 4.152107e-001f, 6.338823e-002f, 6.196800e-002f, 2.128750e-001f, 1.844006e-001f, -4.571826e-001f, 5.125720e-001f, -1.000000e+000f, 6.048699e-001f, 3.494455e-001f, -6.403437e-001f,
  6.122435e-002f, -1.002485e-001f, 7.552737e-002f, 1.555269e-001f, -5.562912e-001f, 3.708970e-001f, -1.000000e+000f, 7.530441e-001f, 2.408631e-001f, -6.065498e-001f, 7.026950e-002f, 2.731814e-001f, 2.711141e-001f, 8.699288e-002f, 3.221189e-001f, 3.667906e-002f, -6.175584e-003f, 1.007169e-001f, 1.869881e-001f, -5.557677e-001f, 4.935088e-001f, -1.000000e+000f, 5.754918e-001f, 3.035724e-001f, -5.281465e-001f,
  2.586329e-002f, -7.877184e-002f, 6.308858e-002f, 2.465824e-001f, -7.019656e-001f, 5.319711e-001f, -1.000000e+000f, 6.711449e-001f, 2.983519e-001f, -6.873001e-001f, 9.906031e-002f, 3.428636e-001f, 3.444012e-001f, 1.862471e-001f, 5.327843e-001f, 3.604693e-003f, -1.943623e-002f, 9.411620e-002f, 2.479530e-001f, -6.833842e-001f, 4.890445e-001f, -1.000000e+000f, 5.578810e-001f, 3.368957e-001f, -6.160579e-001f,
  2.932792e-002f, -8.798980e-002f, 6.980727e-002f, 2.665515e-001f, -7.301254e-001f, 5.110451e-001f, -1.000000e+000f, 6.219825e-001f, 3.246262e-001f, -7.409548e-001f, 6.074903e-002f, -1.274760e-001f, 7.051135e-002f, 2.574548e-001f, -7.173422e-001f, 3.393656e-001f, -1.800411e-001f, 4.524638e-001f, 3.183302e-001f, -2.650234e-001f, 3.279167e-001f, -7.710447e-001f, 7.379358e-001f, 3.800708e-001f, -6.957838e-001f,
  3.402835e-002f, -9.587249e-002f, 7.175216e-002f, 3.029362e-001f, -7.772123e-001f, 4.987369e-001f, -1.000000e+000f, 5.882841e-001f, 3.698387e-00